
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011088  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  08011228  08011228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012464  08012464  00014164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012464  08012464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801246c  0801246c  00014164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801246c  0801246c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012470  08012470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08012474  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000221c  20000164  080125d8  00014164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002380  080125d8  00014380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed68  00000000  00000000  00014194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b03  00000000  00000000  00032efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00037a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001508  00000000  00000000  00039530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca07  00000000  00000000  0003aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000245bd  00000000  00000000  0005743f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2f42  00000000  00000000  0007b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e93e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e0  00000000  00000000  0011e984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00126064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011210 	.word	0x08011210

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	08011210 	.word	0x08011210

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003c0 	.word	0x200003c0
 8000670:	200003d2 	.word	0x200003d2
 8000674:	20000180 	.word	0x20000180

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003e0 	.word	0x200003e0
 80007a0:	200003d4 	.word	0x200003d4

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003e0 	.word	0x200003e0
 8000808:	200003d4 	.word	0x200003d4

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d4 	.word	0x200003d4

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e4 	.word	0x200003e4
 8000898:	200003e8 	.word	0x200003e8

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b0b7      	sub	sp, #220	@ 0xdc
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b51      	ldr	r3, [pc, #324]	@ (80009f8 <MPU6050_Init+0x15c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	f040 8084 	bne.w	80009ea <MPU6050_Init+0x14e>
		data = 0x00;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e8:	4b44      	ldr	r3, [pc, #272]	@ (80009fc <MPU6050_Init+0x160>)
 80008ea:	681c      	ldr	r4, [r3, #0]
 80008ec:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80008f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	2201      	movs	r2, #1
 80008fc:	216b      	movs	r1, #107	@ 0x6b
 80008fe:	20d0      	movs	r0, #208	@ 0xd0
 8000900:	47a0      	blx	r4
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 800090a:	4413      	add	r3, r2
 800090c:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000910:	2307      	movs	r3, #7
 8000912:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000916:	4b39      	ldr	r3, [pc, #228]	@ (80009fc <MPU6050_Init+0x160>)
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800091e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000922:	9201      	str	r2, [sp, #4]
 8000924:	2201      	movs	r2, #1
 8000926:	9200      	str	r2, [sp, #0]
 8000928:	2201      	movs	r2, #1
 800092a:	2119      	movs	r1, #25
 800092c:	20d0      	movs	r0, #208	@ 0xd0
 800092e:	47a0      	blx	r4
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000938:	4413      	add	r3, r2
 800093a:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000944:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <MPU6050_Init+0x160>)
 8000946:	681c      	ldr	r4, [r3, #0]
 8000948:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800094c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000950:	9201      	str	r2, [sp, #4]
 8000952:	2201      	movs	r2, #1
 8000954:	9200      	str	r2, [sp, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	211c      	movs	r1, #28
 800095a:	20d0      	movs	r0, #208	@ 0xd0
 800095c:	47a0      	blx	r4
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000966:	4413      	add	r3, r2
 8000968:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MPU6050_Init+0x160>)
 8000974:	681c      	ldr	r4, [r3, #0]
 8000976:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800097a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800097e:	9201      	str	r2, [sp, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	9200      	str	r2, [sp, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	211b      	movs	r1, #27
 8000988:	20d0      	movs	r0, #208	@ 0xd0
 800098a:	47a0      	blx	r4
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000994:	4413      	add	r3, r2
 8000996:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 800099a:	2303      	movs	r3, #3
 800099c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MPU6050_Init+0x160>)
 80009a2:	681c      	ldr	r4, [r3, #0]
 80009a4:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80009a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	2201      	movs	r2, #1
 80009b4:	211a      	movs	r1, #26
 80009b6:	20d0      	movs	r0, #208	@ 0xd0
 80009b8:	47a0      	blx	r4
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009c2:	4413      	add	r3, r2
 80009c4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	23c4      	movs	r3, #196	@ 0xc4
 80009ce:	461a      	mov	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f00f ff9f 	bl	8010914 <memset>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2201      	movs	r2, #1
 80009da:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80009de:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <MPU6050_Init+0x152>
			return SYS_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e002      	b.n	80009f0 <MPU6050_Init+0x154>
		}


	}else{
		return SYS_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	37d4      	adds	r7, #212	@ 0xd4
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	200003e8 	.word	0x200003e8
 80009fc:	200003e4 	.word	0x200003e4

08000a00 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08d      	sub	sp, #52	@ 0x34
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000a1e:	e069      	b.n	8000af4 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 8000a20:	4b47      	ldr	r3, [pc, #284]	@ (8000b40 <MPU6050_Calibrate+0x140>)
 8000a22:	681c      	ldr	r4, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	33b4      	adds	r3, #180	@ 0xb4
 8000a28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	220e      	movs	r2, #14
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	2201      	movs	r2, #1
 8000a34:	213b      	movs	r1, #59	@ 0x3b
 8000a36:	20d0      	movs	r0, #208	@ 0xd0
 8000a38:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 8000a42:	b212      	sxth	r2, r2
 8000a44:	0212      	lsls	r2, r2, #8
 8000a46:	b211      	sxth	r1, r2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 8000a4e:	b212      	sxth	r2, r2
 8000a50:	430a      	orrs	r2, r1
 8000a52:	b212      	sxth	r2, r2
 8000a54:	4413      	add	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 8000a60:	b212      	sxth	r2, r2
 8000a62:	0212      	lsls	r2, r2, #8
 8000a64:	b211      	sxth	r1, r2
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8000a6c:	b212      	sxth	r2, r2
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	b212      	sxth	r2, r2
 8000a72:	4413      	add	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 8000a7e:	b212      	sxth	r2, r2
 8000a80:	0212      	lsls	r2, r2, #8
 8000a82:	b211      	sxth	r1, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8000a8a:	b212      	sxth	r2, r2
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	b212      	sxth	r2, r2
 8000a90:	4413      	add	r3, r2
 8000a92:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8000a9c:	b212      	sxth	r2, r2
 8000a9e:	0212      	lsls	r2, r2, #8
 8000aa0:	b211      	sxth	r1, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 8000aa8:	b212      	sxth	r2, r2
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	b212      	sxth	r2, r2
 8000aae:	4413      	add	r3, r2
 8000ab0:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 8000aba:	b212      	sxth	r2, r2
 8000abc:	0212      	lsls	r2, r2, #8
 8000abe:	b211      	sxth	r1, r2
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 8000ac6:	b212      	sxth	r2, r2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	b212      	sxth	r2, r2
 8000acc:	4413      	add	r3, r2
 8000ace:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8000ad8:	b212      	sxth	r2, r2
 8000ada:	0212      	lsls	r2, r2, #8
 8000adc:	b211      	sxth	r1, r2
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 8000ae4:	b212      	sxth	r2, r2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	b212      	sxth	r2, r2
 8000aea:	4413      	add	r3, r2
 8000aec:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000aee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000af0:	3301      	adds	r3, #1
 8000af2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000af4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000afa:	d391      	bcc.n	8000a20 <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b21a      	sxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	131b      	asrs	r3, r3, #12
 8000b0a:	b21a      	sxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS)/* - SCALE_FACTOR*/;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	131b      	asrs	r3, r3, #12
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	131b      	asrs	r3, r3, #12
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	131b      	asrs	r3, r3, #12
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 8000b38:	bf00      	nop
 8000b3a:	372c      	adds	r7, #44	@ 0x2c
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	200003e8 	.word	0x200003e8

08000b44 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	4313      	orrs	r3, r2
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b21a      	sxth	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8000be8:	b21b      	sxth	r3, r3
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8000c14:	b490      	push	{r4, r7}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80b8 	beq.w	8000d98 <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8000c30:	2300      	movs	r3, #0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e04e      	b.n	8000cd4 <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[channel] -= mpu->MAF.mediaBuffer[mpu->MAF.index][channel];
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3208      	adds	r2, #8
 8000c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000c46:	461c      	mov	r4, r3
 8000c48:	7bf8      	ldrb	r0, [r7, #15]
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	4623      	mov	r3, r4
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4423      	add	r3, r4
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4403      	add	r3, r0
 8000c56:	331c      	adds	r3, #28
 8000c58:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[channel] += mpu->MAF.rawData[channel];
 8000c68:	7bfa      	ldrb	r2, [r7, #15]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	7bf9      	ldrb	r1, [r7, #15]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	314c      	adds	r1, #76	@ 0x4c
 8000c78:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	4419      	add	r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3208      	adds	r2, #8
 8000c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][channel] = mpu->MAF.rawData[channel];
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000c92:	4618      	mov	r0, r3
 8000c94:	7bf9      	ldrb	r1, [r7, #15]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	324c      	adds	r2, #76	@ 0x4c
 8000c9a:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4403      	add	r3, r0
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	440b      	add	r3, r1
 8000caa:	331c      	adds	r3, #28
 8000cac:	4621      	mov	r1, r4
 8000cae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[channel] = (mpu->MAF.sumData[channel] >> NUM_MAF_BITS);
 8000cb2:	7bfa      	ldrb	r2, [r7, #15]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	10da      	asrs	r2, r3, #3
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	b211      	sxth	r1, r2
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	3350      	adds	r3, #80	@ 0x50
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4413      	add	r3, r2
 8000cca:	460a      	mov	r2, r1
 8000ccc:	809a      	strh	r2, [r3, #4]
		for(uint8_t channel = 0; channel < NUM_AXIS; channel++){
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d9ad      	bls.n	8000c36 <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	821a      	strh	r2, [r3, #16]
	}
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc90      	pop	{r4, r7}
 8000da0:	4770      	bx	lr
	...

08000da4 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000dae:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <Display_Set_I2C_Master_Transmit+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000db4:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <Display_Set_I2C_Master_Transmit+0x28>)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200003f4 	.word	0x200003f4
 8000dcc:	200003f8 	.word	0x200003f8

08000dd0 <Display_Init>:

e_system Display_Init(){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000dda:	22ae      	movs	r2, #174	@ 0xae
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2078      	movs	r0, #120	@ 0x78
 8000de0:	f000 f94a 	bl	8001078 <ssd1306_I2C_Write>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4413      	add	r3, r2
 8000dec:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000dee:	2220      	movs	r2, #32
 8000df0:	2100      	movs	r1, #0
 8000df2:	2078      	movs	r0, #120	@ 0x78
 8000df4:	f000 f940 	bl	8001078 <ssd1306_I2C_Write>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	4413      	add	r3, r2
 8000e00:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e02:	2210      	movs	r2, #16
 8000e04:	2100      	movs	r1, #0
 8000e06:	2078      	movs	r0, #120	@ 0x78
 8000e08:	f000 f936 	bl	8001078 <ssd1306_I2C_Write>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4413      	add	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000e16:	22b0      	movs	r2, #176	@ 0xb0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2078      	movs	r0, #120	@ 0x78
 8000e1c:	f000 f92c 	bl	8001078 <ssd1306_I2C_Write>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4413      	add	r3, r2
 8000e28:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000e2a:	22c8      	movs	r2, #200	@ 0xc8
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2078      	movs	r0, #120	@ 0x78
 8000e30:	f000 f922 	bl	8001078 <ssd1306_I2C_Write>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2078      	movs	r0, #120	@ 0x78
 8000e44:	f000 f918 	bl	8001078 <ssd1306_I2C_Write>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4413      	add	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000e52:	2210      	movs	r2, #16
 8000e54:	2100      	movs	r1, #0
 8000e56:	2078      	movs	r0, #120	@ 0x78
 8000e58:	f000 f90e 	bl	8001078 <ssd1306_I2C_Write>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4413      	add	r3, r2
 8000e64:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000e66:	2240      	movs	r2, #64	@ 0x40
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2078      	movs	r0, #120	@ 0x78
 8000e6c:	f000 f904 	bl	8001078 <ssd1306_I2C_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4413      	add	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000e7a:	2281      	movs	r2, #129	@ 0x81
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2078      	movs	r0, #120	@ 0x78
 8000e80:	f000 f8fa 	bl	8001078 <ssd1306_I2C_Write>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000e8e:	22ff      	movs	r2, #255	@ 0xff
 8000e90:	2100      	movs	r1, #0
 8000e92:	2078      	movs	r0, #120	@ 0x78
 8000e94:	f000 f8f0 	bl	8001078 <ssd1306_I2C_Write>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000ea2:	22a1      	movs	r2, #161	@ 0xa1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2078      	movs	r0, #120	@ 0x78
 8000ea8:	f000 f8e6 	bl	8001078 <ssd1306_I2C_Write>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000eb6:	22a6      	movs	r2, #166	@ 0xa6
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2078      	movs	r0, #120	@ 0x78
 8000ebc:	f000 f8dc 	bl	8001078 <ssd1306_I2C_Write>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000eca:	22a8      	movs	r2, #168	@ 0xa8
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2078      	movs	r0, #120	@ 0x78
 8000ed0:	f000 f8d2 	bl	8001078 <ssd1306_I2C_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4413      	add	r3, r2
 8000edc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000ede:	223f      	movs	r2, #63	@ 0x3f
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2078      	movs	r0, #120	@ 0x78
 8000ee4:	f000 f8c8 	bl	8001078 <ssd1306_I2C_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4413      	add	r3, r2
 8000ef0:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ef2:	22a4      	movs	r2, #164	@ 0xa4
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2078      	movs	r0, #120	@ 0x78
 8000ef8:	f000 f8be 	bl	8001078 <ssd1306_I2C_Write>
 8000efc:	4603      	mov	r3, r0
 8000efe:	461a      	mov	r2, r3
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4413      	add	r3, r2
 8000f04:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000f06:	22d3      	movs	r2, #211	@ 0xd3
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2078      	movs	r0, #120	@ 0x78
 8000f0c:	f000 f8b4 	bl	8001078 <ssd1306_I2C_Write>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4413      	add	r3, r2
 8000f18:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2078      	movs	r0, #120	@ 0x78
 8000f20:	f000 f8aa 	bl	8001078 <ssd1306_I2C_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000f2e:	22d5      	movs	r2, #213	@ 0xd5
 8000f30:	2100      	movs	r1, #0
 8000f32:	2078      	movs	r0, #120	@ 0x78
 8000f34:	f000 f8a0 	bl	8001078 <ssd1306_I2C_Write>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4413      	add	r3, r2
 8000f40:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000f42:	22f0      	movs	r2, #240	@ 0xf0
 8000f44:	2100      	movs	r1, #0
 8000f46:	2078      	movs	r0, #120	@ 0x78
 8000f48:	f000 f896 	bl	8001078 <ssd1306_I2C_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	4413      	add	r3, r2
 8000f54:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000f56:	22d9      	movs	r2, #217	@ 0xd9
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2078      	movs	r0, #120	@ 0x78
 8000f5c:	f000 f88c 	bl	8001078 <ssd1306_I2C_Write>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4413      	add	r3, r2
 8000f68:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000f6a:	2222      	movs	r2, #34	@ 0x22
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2078      	movs	r0, #120	@ 0x78
 8000f70:	f000 f882 	bl	8001078 <ssd1306_I2C_Write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000f7e:	22da      	movs	r2, #218	@ 0xda
 8000f80:	2100      	movs	r1, #0
 8000f82:	2078      	movs	r0, #120	@ 0x78
 8000f84:	f000 f878 	bl	8001078 <ssd1306_I2C_Write>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	4413      	add	r3, r2
 8000f90:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000f92:	2212      	movs	r2, #18
 8000f94:	2100      	movs	r1, #0
 8000f96:	2078      	movs	r0, #120	@ 0x78
 8000f98:	f000 f86e 	bl	8001078 <ssd1306_I2C_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000fa6:	22db      	movs	r2, #219	@ 0xdb
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2078      	movs	r0, #120	@ 0x78
 8000fac:	f000 f864 	bl	8001078 <ssd1306_I2C_Write>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2078      	movs	r0, #120	@ 0x78
 8000fc0:	f000 f85a 	bl	8001078 <ssd1306_I2C_Write>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4413      	add	r3, r2
 8000fcc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000fce:	228d      	movs	r2, #141	@ 0x8d
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2078      	movs	r0, #120	@ 0x78
 8000fd4:	f000 f850 	bl	8001078 <ssd1306_I2C_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4413      	add	r3, r2
 8000fe0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000fe2:	2214      	movs	r2, #20
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	f000 f846 	bl	8001078 <ssd1306_I2C_Write>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000ff6:	22af      	movs	r2, #175	@ 0xaf
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2078      	movs	r0, #120	@ 0x78
 8000ffc:	f000 f83c 	bl	8001078 <ssd1306_I2C_Write>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4413      	add	r3, r2
 8001008:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800100a:	222e      	movs	r2, #46	@ 0x2e
 800100c:	2100      	movs	r1, #0
 800100e:	2078      	movs	r0, #120	@ 0x78
 8001010:	f000 f832 	bl	8001078 <ssd1306_I2C_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4413      	add	r3, r2
 800101c:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f8e8 	bl	80011f4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001024:	4b12      	ldr	r3, [pc, #72]	@ (8001070 <Display_Init+0x2a0>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800102a:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <Display_Init+0x2a0>)
 800102c:	2200      	movs	r2, #0
 800102e:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <Display_Init+0x2a0>)
 8001032:	2201      	movs	r2, #1
 8001034:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8001036:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <Display_Init+0x2a4>)
 8001038:	2200      	movs	r2, #0
 800103a:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 800103c:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <Display_Init+0x2a4>)
 800103e:	2200      	movs	r2, #0
 8001040:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8001042:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <Display_Init+0x2a4>)
 8001044:	2201      	movs	r2, #1
 8001046:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <Display_Init+0x2a4>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <Display_Init+0x2a4>)
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	3b50      	subs	r3, #80	@ 0x50
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <Display_Init+0x2a4>)
 8001058:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <Display_Init+0x2a4>)
 800105c:	2200      	movs	r2, #0
 800105e:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <Display_Init+0x2a4>)
 8001062:	2210      	movs	r2, #16
 8001064:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 8001066:	79fb      	ldrb	r3, [r7, #7]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200003ec 	.word	0x200003ec
 8001074:	200007fc 	.word	0x200007fc

08001078 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	460b      	mov	r3, r1
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	4613      	mov	r3, r2
 8001088:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001092:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <ssd1306_I2C_Write+0x38>)
 8001094:	681c      	ldr	r4, [r3, #0]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	b298      	uxth	r0, r3
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	230a      	movs	r3, #10
 80010a0:	2202      	movs	r2, #2
 80010a2:	47a0      	blx	r4
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200003f8 	.word	0x200003f8

080010b4 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80010b4:	b598      	push	{r3, r4, r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d054      	beq.n	800116a <Display_UpdateScreen_Task+0xb6>
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d050      	beq.n	800116a <Display_UpdateScreen_Task+0xb6>
 80010c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <Display_UpdateScreen_Task+0xc0>)
 80010ca:	795b      	ldrb	r3, [r3, #5]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d04c      	beq.n	800116a <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010d2:	78db      	ldrb	r3, [r3, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <Display_UpdateScreen_Task+0x2a>
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d01c      	beq.n	8001116 <Display_UpdateScreen_Task+0x62>
 80010dc:	e038      	b.n	8001150 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010e0:	789b      	ldrb	r3, [r3, #2]
 80010e2:	3b50      	subs	r3, #80	@ 0x50
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010e8:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 80010f6:	4b20      	ldr	r3, [pc, #128]	@ (8001178 <Display_UpdateScreen_Task+0xc4>)
 80010f8:	681c      	ldr	r4, [r3, #0]
 80010fa:	2303      	movs	r3, #3
 80010fc:	4a1f      	ldr	r2, [pc, #124]	@ (800117c <Display_UpdateScreen_Task+0xc8>)
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	@ 0x78
 8001102:	47a0      	blx	r4
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 800110c:	2201      	movs	r2, #1
 800110e:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001110:	e021      	b.n	8001156 <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e02a      	b.n	800116c <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001116:	4b18      	ldr	r3, [pc, #96]	@ (8001178 <Display_UpdateScreen_Task+0xc4>)
 8001118:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <Display_UpdateScreen_Task+0xcc>)
 8001122:	441a      	add	r2, r3
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	2140      	movs	r1, #64	@ 0x40
 8001128:	2078      	movs	r0, #120	@ 0x78
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001134:	789b      	ldrb	r3, [r3, #2]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 800113c:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001140:	2200      	movs	r2, #0
 8001142:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 800114a:	e004      	b.n	8001156 <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00d      	b.n	800116c <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001152:	2208      	movs	r2, #8
 8001154:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001158:	789b      	ldrb	r3, [r3, #2]
 800115a:	2b07      	cmp	r3, #7
 800115c:	d905      	bls.n	800116a <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001164:	4b02      	ldr	r3, [pc, #8]	@ (8001170 <Display_UpdateScreen_Task+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd98      	pop	{r3, r4, r7, pc}
 8001170:	200007fc 	.word	0x200007fc
 8001174:	200003ec 	.word	0x200003ec
 8001178:	200003f4 	.word	0x200003f4
 800117c:	20000800 	.word	0x20000800
 8001180:	200003fc 	.word	0x200003fc

08001184 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <Display_I2C_DMA_Ready+0x1c>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	7053      	strb	r3, [r2, #1]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	200007fc 	.word	0x200007fc

080011a4 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <Display_I2C_Refresh_Ready+0x1c>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	7013      	strb	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	200007fc 	.word	0x200007fc

080011c4 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <Display_SetCursor+0x2c>)
 80011da:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <Display_SetCursor+0x2c>)
 80011e2:	805a      	strh	r2, [r3, #2]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	200003ec 	.word	0x200003ec

080011f4 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e00d      	b.n	8001220 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <Display_Fill+0x1a>
 800120a:	2100      	movs	r1, #0
 800120c:	e000      	b.n	8001210 <Display_Fill+0x1c>
 800120e:	21ff      	movs	r1, #255	@ 0xff
 8001210:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <Display_Fill+0x44>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001226:	d3ed      	bcc.n	8001204 <Display_Fill+0x10>
	}
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200003fc 	.word	0x200003fc

0800123c <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	70fb      	strb	r3, [r7, #3]
	if (
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	2b7f      	cmp	r3, #127	@ 0x7f
 8001252:	d848      	bhi.n	80012e6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	2b3f      	cmp	r3, #63	@ 0x3f
 8001258:	d845      	bhi.n	80012e6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <Display_DrawPixel+0xb8>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d11a      	bne.n	80012ac <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001276:	88fa      	ldrh	r2, [r7, #6]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	08db      	lsrs	r3, r3, #3
 800127c:	b298      	uxth	r0, r3
 800127e:	4603      	mov	r3, r0
 8001280:	01db      	lsls	r3, r3, #7
 8001282:	4413      	add	r3, r2
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <Display_DrawPixel+0xbc>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	b25a      	sxtb	r2, r3
 800128a:	88bb      	ldrh	r3, [r7, #4]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2101      	movs	r1, #1
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	b25b      	sxtb	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b259      	sxtb	r1, r3
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	4603      	mov	r3, r0
 80012a0:	01db      	lsls	r3, r3, #7
 80012a2:	4413      	add	r3, r2
 80012a4:	b2c9      	uxtb	r1, r1
 80012a6:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <Display_DrawPixel+0xbc>)
 80012a8:	54d1      	strb	r1, [r2, r3]
 80012aa:	e01d      	b.n	80012e8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	08db      	lsrs	r3, r3, #3
 80012b2:	b298      	uxth	r0, r3
 80012b4:	4603      	mov	r3, r0
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4413      	add	r3, r2
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <Display_DrawPixel+0xbc>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	b25b      	sxtb	r3, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	4013      	ands	r3, r2
 80012d4:	b259      	sxtb	r1, r3
 80012d6:	88fa      	ldrh	r2, [r7, #6]
 80012d8:	4603      	mov	r3, r0
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	4413      	add	r3, r2
 80012de:	b2c9      	uxtb	r1, r1
 80012e0:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <Display_DrawPixel+0xbc>)
 80012e2:	54d1      	strb	r1, [r2, r3]
 80012e4:	e000      	b.n	80012e8 <Display_DrawPixel+0xac>
		return;
 80012e6:	bf00      	nop
	}
}
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200003ec 	.word	0x200003ec
 80012f8:	200003fc 	.word	0x200003fc

080012fc <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60ba      	str	r2, [r7, #8]
 8001304:	461a      	mov	r2, r3
 8001306:	4603      	mov	r3, r0
 8001308:	81fb      	strh	r3, [r7, #14]
 800130a:	460b      	mov	r3, r1
 800130c:	81bb      	strh	r3, [r7, #12]
 800130e:	4613      	mov	r3, r2
 8001310:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001316:	3307      	adds	r3, #7
 8001318:	2b00      	cmp	r3, #0
 800131a:	da00      	bge.n	800131e <Display_DrawBitmap+0x22>
 800131c:	3307      	adds	r3, #7
 800131e:	10db      	asrs	r3, r3, #3
 8001320:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001326:	2300      	movs	r3, #0
 8001328:	82bb      	strh	r3, [r7, #20]
 800132a:	e044      	b.n	80013b6 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	827b      	strh	r3, [r7, #18]
 8001330:	e02f      	b.n	8001392 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001332:	8a7b      	ldrh	r3, [r7, #18]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	75fb      	strb	r3, [r7, #23]
 8001342:	e012      	b.n	800136a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001348:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800134c:	fb03 f202 	mul.w	r2, r3, r2
 8001350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001354:	2b00      	cmp	r3, #0
 8001356:	da00      	bge.n	800135a <Display_DrawBitmap+0x5e>
 8001358:	3307      	adds	r3, #7
 800135a:	10db      	asrs	r3, r3, #3
 800135c:	b21b      	sxth	r3, r3
 800135e:	4413      	add	r3, r2
 8001360:	461a      	mov	r2, r3
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800136a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da09      	bge.n	8001386 <Display_DrawBitmap+0x8a>
 8001372:	89fa      	ldrh	r2, [r7, #14]
 8001374:	8a7b      	ldrh	r3, [r7, #18]
 8001376:	4413      	add	r3, r2
 8001378:	b29b      	uxth	r3, r3
 800137a:	89b9      	ldrh	r1, [r7, #12]
 800137c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5b 	bl	800123c <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001386:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800138a:	b29b      	uxth	r3, r3
 800138c:	3301      	adds	r3, #1
 800138e:	b29b      	uxth	r3, r3
 8001390:	827b      	strh	r3, [r7, #18]
 8001392:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbc9      	blt.n	8001332 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800139e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	82bb      	strh	r3, [r7, #20]
 80013aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	81bb      	strh	r3, [r7, #12]
 80013b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013be:	429a      	cmp	r2, r3
 80013c0:	dbb4      	blt.n	800132c <Display_DrawBitmap+0x30>
        }
    }
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	1d38      	adds	r0, r7, #4
 80013d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	4613      	mov	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80013e4:	4b36      	ldr	r3, [pc, #216]	@ (80014c0 <Display_WriteChar+0xf4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	793b      	ldrb	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f0:	dc06      	bgt.n	8001400 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80013f2:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <Display_WriteChar+0xf4>)
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	461a      	mov	r2, r3
 80013f8:	797b      	ldrb	r3, [r7, #5]
 80013fa:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80013fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80013fe:	dd01      	ble.n	8001404 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001400:	2300      	movs	r3, #0
 8001402:	e058      	b.n	80014b6 <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e048      	b.n	800149c <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3b20      	subs	r3, #32
 8001410:	7979      	ldrb	r1, [r7, #5]
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4619      	mov	r1, r3
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	440b      	add	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001424:	2300      	movs	r3, #0
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	e030      	b.n	800148c <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <Display_WriteChar+0xf4>)
 800143c:	881a      	ldrh	r2, [r3, #0]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4413      	add	r3, r2
 8001444:	b298      	uxth	r0, r3
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <Display_WriteChar+0xf4>)
 8001448:	885a      	ldrh	r2, [r3, #2]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	7bba      	ldrb	r2, [r7, #14]
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fef1 	bl	800123c <Display_DrawPixel>
 800145a:	e014      	b.n	8001486 <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <Display_WriteChar+0xf4>)
 800145e:	881a      	ldrh	r2, [r3, #0]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4413      	add	r3, r2
 8001466:	b298      	uxth	r0, r3
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <Display_WriteChar+0xf4>)
 800146a:	885a      	ldrh	r2, [r3, #2]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4413      	add	r3, r2
 8001472:	b299      	uxth	r1, r3
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	f7ff fedb 	bl	800123c <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	3301      	adds	r3, #1
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	793b      	ldrb	r3, [r7, #4]
 800148e:	461a      	mov	r2, r3
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	4293      	cmp	r3, r2
 8001494:	d3c9      	bcc.n	800142a <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	461a      	mov	r2, r3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d3b1      	bcc.n	800140a <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <Display_WriteChar+0xf4>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	793a      	ldrb	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <Display_WriteChar+0xf4>)
 80014b2:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	200003ec 	.word	0x200003ec

080014c4 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	1d38      	adds	r0, r7, #4
 80014ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80014d2:	70fb      	strb	r3, [r7, #3]
    while (*str){
 80014d4:	e012      	b.n	80014fc <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	7818      	ldrb	r0, [r3, #0]
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	1d3a      	adds	r2, r7, #4
 80014de:	ca06      	ldmia	r2, {r1, r2}
 80014e0:	f7ff ff74 	bl	80013cc <Display_WriteChar>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d002      	beq.n	80014f6 <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	e008      	b.n	8001508 <Display_WriteString+0x44>

        str++;	// Next char
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
    while (*str){
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e8      	bne.n	80014d6 <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	4611      	mov	r1, r2
 800151c:	461a      	mov	r2, r3
 800151e:	4623      	mov	r3, r4
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	4603      	mov	r3, r0
 8001524:	80bb      	strh	r3, [r7, #4]
 8001526:	460b      	mov	r3, r1
 8001528:	807b      	strh	r3, [r7, #2]
 800152a:	4613      	mov	r3, r2
 800152c:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 800152e:	88fa      	ldrh	r2, [r7, #6]
 8001530:	887b      	ldrh	r3, [r7, #2]
 8001532:	429a      	cmp	r2, r3
 8001534:	d004      	beq.n	8001540 <Display_DrawLine+0x30>
 8001536:	88ba      	ldrh	r2, [r7, #4]
 8001538:	883b      	ldrh	r3, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	f040 8090 	bne.w	8001660 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2b7f      	cmp	r3, #127	@ 0x7f
 8001544:	d901      	bls.n	800154a <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001546:	237f      	movs	r3, #127	@ 0x7f
 8001548:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d901      	bls.n	8001554 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001550:	237f      	movs	r3, #127	@ 0x7f
 8001552:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001554:	88bb      	ldrh	r3, [r7, #4]
 8001556:	2b3f      	cmp	r3, #63	@ 0x3f
 8001558:	d901      	bls.n	800155e <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 800155a:	233f      	movs	r3, #63	@ 0x3f
 800155c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800155e:	883b      	ldrh	r3, [r7, #0]
 8001560:	2b3f      	cmp	r3, #63	@ 0x3f
 8001562:	d901      	bls.n	8001568 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001564:	233f      	movs	r3, #63	@ 0x3f
 8001566:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	429a      	cmp	r2, r3
 800156e:	d205      	bcs.n	800157c <Display_DrawLine+0x6c>
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	b29b      	uxth	r3, r3
 8001578:	b21b      	sxth	r3, r3
 800157a:	e004      	b.n	8001586 <Display_DrawLine+0x76>
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	b21b      	sxth	r3, r3
 8001586:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001588:	88ba      	ldrh	r2, [r7, #4]
 800158a:	883b      	ldrh	r3, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d205      	bcs.n	800159c <Display_DrawLine+0x8c>
 8001590:	883a      	ldrh	r2, [r7, #0]
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21b      	sxth	r3, r3
 800159a:	e004      	b.n	80015a6 <Display_DrawLine+0x96>
 800159c:	88ba      	ldrh	r2, [r7, #4]
 800159e:	883b      	ldrh	r3, [r7, #0]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 80015a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 80015b0:	883a      	ldrh	r2, [r7, #0]
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d205      	bcs.n	80015c4 <Display_DrawLine+0xb4>
			tmp = y1;
 80015b8:	883b      	ldrh	r3, [r7, #0]
 80015ba:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015c0:	893b      	ldrh	r3, [r7, #8]
 80015c2:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d205      	bcs.n	80015d8 <Display_DrawLine+0xc8>
			tmp = x1;
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015d4:	893b      	ldrh	r3, [r7, #8]
 80015d6:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	e00c      	b.n	80015f8 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 80015de:	89f9      	ldrh	r1, [r7, #14]
 80015e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fe28 	bl	800123c <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80015ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	81fb      	strh	r3, [r7, #14]
 80015f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015fc:	883b      	ldrh	r3, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	dded      	ble.n	80015de <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 8001602:	e030      	b.n	8001666 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 8001604:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d12b      	bne.n	8001664 <Display_DrawLine+0x154>
		if (y1 < y0) {
 800160c:	883a      	ldrh	r2, [r7, #0]
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	d205      	bcs.n	8001620 <Display_DrawLine+0x110>
			tmp = y1;
 8001614:	883b      	ldrh	r3, [r7, #0]
 8001616:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001618:	88bb      	ldrh	r3, [r7, #4]
 800161a:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800161c:	893b      	ldrh	r3, [r7, #8]
 800161e:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001620:	887a      	ldrh	r2, [r7, #2]
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	429a      	cmp	r2, r3
 8001626:	d205      	bcs.n	8001634 <Display_DrawLine+0x124>
			tmp = x1;
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001630:	893b      	ldrh	r3, [r7, #8]
 8001632:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	81fb      	strh	r3, [r7, #14]
 8001638:	e00c      	b.n	8001654 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 800163a:	89fb      	ldrh	r3, [r7, #14]
 800163c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001640:	88b9      	ldrh	r1, [r7, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fdfa 	bl	800123c <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164c:	b29b      	uxth	r3, r3
 800164e:	3301      	adds	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	429a      	cmp	r2, r3
 800165c:	dded      	ble.n	800163a <Display_DrawLine+0x12a>
		}
	}
	return;
 800165e:	e001      	b.n	8001664 <Display_DrawLine+0x154>
		return;
 8001660:	bf00      	nop
 8001662:	e000      	b.n	8001666 <Display_DrawLine+0x156>
	return;
 8001664:	bf00      	nop
}
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}

0800166c <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af02      	add	r7, sp, #8
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2b7f      	cmp	r3, #127	@ 0x7f
 800168e:	d836      	bhi.n	80016fe <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	2b3f      	cmp	r3, #63	@ 0x3f
 8001694:	d833      	bhi.n	80016fe <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4413      	add	r3, r2
 800169c:	2b7f      	cmp	r3, #127	@ 0x7f
 800169e:	dd03      	ble.n	80016a8 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80016a6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80016a8:	88ba      	ldrh	r2, [r7, #4]
 80016aa:	883b      	ldrh	r3, [r7, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80016b0:	dd03      	ble.n	80016ba <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80016b8:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e018      	b.n	80016f2 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	4413      	add	r3, r2
 80016c8:	b299      	uxth	r1, r3
 80016ca:	88fa      	ldrh	r2, [r7, #6]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4413      	add	r3, r2
 80016d0:	b29c      	uxth	r4, r3
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	88f8      	ldrh	r0, [r7, #6]
 80016de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	4622      	mov	r2, r4
 80016e8:	f7ff ff12 	bl	8001510 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	3301      	adds	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	883a      	ldrh	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d2e1      	bcs.n	80016c0 <Display_DrawFilledRectangle+0x54>
 80016fc:	e000      	b.n	8001700 <Display_DrawFilledRectangle+0x94>
		return;
 80016fe:	bf00      	nop
	}
}
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}

08001706 <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	b29a      	uxth	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800172e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	729a      	strb	r2, [r3, #10]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	3b01      	subs	r3, #1
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	885b      	ldrh	r3, [r3, #2]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10e      	bne.n	800177e <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	88da      	ldrh	r2, [r3, #6]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	889b      	ldrh	r3, [r3, #4]
 8001768:	4413      	add	r3, r2
 800176a:	b29a      	uxth	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	881a      	ldrh	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a9b      	ldrb	r3, [r3, #10]
 8001782:	3b01      	subs	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a9b      	ldrb	r3, [r3, #10]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <Encoder_Task+0x54>
		enc->pps = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	811a      	strh	r2, [r3, #8]
	}
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	809a      	strh	r2, [r3, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	88da      	ldrh	r2, [r3, #6]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	80da      	strh	r2, [r3, #6]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 80017e6:	b480      	push	{r7}
 80017e8:	b085      	sub	sp, #20
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	819a      	strh	r2, [r3, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d050      	beq.n	80018da <Motor_Set_Speed+0xb6>
		return;
	if(speed > 100)
 8001838:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183c:	2b64      	cmp	r3, #100	@ 0x64
 800183e:	dd01      	ble.n	8001844 <Motor_Set_Speed+0x20>
		speed = 100;
 8001840:	2364      	movs	r3, #100	@ 0x64
 8001842:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 8001844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001848:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800184c:	da01      	bge.n	8001852 <Motor_Set_Speed+0x2e>
		speed = -100;
 800184e:	239c      	movs	r3, #156	@ 0x9c
 8001850:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 8001852:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	429a      	cmp	r2, r3
 800185c:	d03f      	beq.n	80018de <Motor_Set_Speed+0xba>
		return;

	motor->vel = speed * 600;
 800185e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001862:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001866:	fb03 f202 	mul.w	r2, r3, r2
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 800186e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001872:	2b00      	cmp	r3, #0
 8001874:	dd10      	ble.n	8001898 <Motor_Set_Speed+0x74>
		motor->direction = FORWARD;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 800187c:	2102      	movs	r1, #2
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f832 	bl	80018e8 <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel-1);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6892      	ldr	r2, [r2, #8]
 800188c:	b292      	uxth	r2, r2
 800188e:	3a01      	subs	r2, #1
 8001890:	b292      	uxth	r2, r2
 8001892:	4610      	mov	r0, r2
 8001894:	4798      	blx	r3
 8001896:	e023      	b.n	80018e0 <Motor_Set_Speed+0xbc>
	}else if(speed < 0){
 8001898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189c:	2b00      	cmp	r3, #0
 800189e:	da10      	bge.n	80018c2 <Motor_Set_Speed+0x9e>
		motor->direction = BACKWARD;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2203      	movs	r2, #3
 80018a4:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80018a6:	2103      	movs	r1, #3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f81d 	bl	80018e8 <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6892      	ldr	r2, [r2, #8]
 80018b6:	b292      	uxth	r2, r2
 80018b8:	43d2      	mvns	r2, r2
 80018ba:	b292      	uxth	r2, r2
 80018bc:	4610      	mov	r0, r2
 80018be:	4798      	blx	r3
 80018c0:	e00e      	b.n	80018e0 <Motor_Set_Speed+0xbc>
	}else{
		motor->direction = FREE_WHEEL;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80018c8:	2101      	movs	r1, #1
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f80c 	bl	80018e8 <Motor_Set_Direction>
		motor->setPWM(0);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	2000      	movs	r0, #0
 80018d6:	4798      	blx	r3
 80018d8:	e002      	b.n	80018e0 <Motor_Set_Speed+0xbc>
		return;
 80018da:	bf00      	nop
 80018dc:	e000      	b.n	80018e0 <Motor_Set_Speed+0xbc>
		return;
 80018de:	bf00      	nop
	}
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d027      	beq.n	800194c <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d825      	bhi.n	800194e <Motor_Set_Direction+0x66>
 8001902:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <Motor_Set_Direction+0x20>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	0800194f 	.word	0x0800194f
 800190c:	0800191d 	.word	0x0800191d
 8001910:	08001929 	.word	0x08001929
 8001914:	08001935 	.word	0x08001935
 8001918:	08001941 	.word	0x08001941
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2100      	movs	r1, #0
 8001922:	2000      	movs	r0, #0
 8001924:	4798      	blx	r3
			break;
 8001926:	e012      	b.n	800194e <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2100      	movs	r1, #0
 800192e:	2001      	movs	r0, #1
 8001930:	4798      	blx	r3
			break;
 8001932:	e00c      	b.n	800194e <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	2101      	movs	r1, #1
 800193a:	2000      	movs	r0, #0
 800193c:	4798      	blx	r3
			break;
 800193e:	e006      	b.n	800194e <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	2101      	movs	r1, #1
 8001946:	2001      	movs	r0, #1
 8001948:	4798      	blx	r3
			break;
 800194a:	e000      	b.n	800194e <Motor_Set_Direction+0x66>
		return;
 800194c:	bf00      	nop
	}
}
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b04      	cmp	r3, #4
 8001962:	d10c      	bne.n	800197e <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	899b      	ldrh	r3, [r3, #12]
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	899b      	ldrh	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
	}
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 800198a:	b480      	push	{r7}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <Comm_Task>:

void Comm_Task(s_commData* comm){
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d002      	beq.n	8001a10 <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f81a 	bl	8001a44 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	789a      	ldrb	r2, [r3, #2]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	78db      	ldrb	r3, [r3, #3]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d00e      	beq.n	8001a3a <Comm_Task+0x48>
		if(!comm->isESP01){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <Comm_Task+0x48>
				comm->dataWriter(comm);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001a52:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001a54:	e11b      	b.n	8001c8e <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	f200 810e 	bhi.w	8001c7e <decodeProtocol+0x23a>
 8001a62:	a201      	add	r2, pc, #4	@ (adr r2, 8001a68 <decodeProtocol+0x24>)
 8001a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a68:	08001a85 	.word	0x08001a85
 8001a6c:	08001ab7 	.word	0x08001ab7
 8001a70:	08001af9 	.word	0x08001af9
 8001a74:	08001b3b 	.word	0x08001b3b
 8001a78:	08001b7d 	.word	0x08001b7d
 8001a7c:	08001baf 	.word	0x08001baf
 8001a80:	08001c01 	.word	0x08001c01
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	b2d1      	uxtb	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a9e:	2b55      	cmp	r3, #85	@ 0x55
 8001aa0:	f040 80f2 	bne.w	8001c88 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001ab4:	e0e8      	b.n	8001c88 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001ad0:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ad2:	d104      	bne.n	8001ade <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001adc:	e0d7      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001af6:	e0ca      	b.n	8001c8e <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	b2d1      	uxtb	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b12:	2b45      	cmp	r3, #69	@ 0x45
 8001b14:	d104      	bne.n	8001b20 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b1e:	e0b6      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b38:	e0a9      	b.n	8001c8e <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	b2d1      	uxtb	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b54:	2b52      	cmp	r3, #82	@ 0x52
 8001b56:	d104      	bne.n	8001b62 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001b60:	e095      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b7a:	e088      	b.n	8001c8e <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001ba0:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <decodeProtocol+0x264>)
 8001ba2:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001bac:	e06f      	b.n	8001c8e <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	b2d1      	uxtb	r1, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001bc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bca:	d10c      	bne.n	8001be6 <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2206      	movs	r2, #6
 8001bd0:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001bd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <decodeProtocol+0x264>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001be4:	e053      	b.n	8001c8e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001bec:	3b01      	subs	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001bfe:	e046      	b.n	8001c8e <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d914      	bls.n	8001c32 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	b2d1      	uxtb	r1, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001c28:	4053      	eors	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c3c:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <decodeProtocol+0x264>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d122      	bne.n	8001c8c <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	440b      	add	r3, r1
 8001c60:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d111      	bne.n	8001c8c <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00c      	beq.n	8001c8c <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	4798      	blx	r3
				}
			}
			break;
 8001c7c:	e006      	b.n	8001c8c <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001c86:	e002      	b.n	8001c8e <decodeProtocol+0x24a>
			break;
 8001c88:	bf00      	nop
 8001c8a:	e000      	b.n	8001c8e <decodeProtocol+0x24a>
			break;
 8001c8c:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	f47f aedd 	bne.w	8001a56 <decodeProtocol+0x12>
		}
	}
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000829 	.word	0x20000829

08001cac <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	460b      	mov	r3, r1
 8001cba:	72fb      	strb	r3, [r7, #11]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001cc0:	4b62      	ldr	r3, [pc, #392]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001cc6:	4b62      	ldr	r3, [pc, #392]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001ccc:	4b60      	ldr	r3, [pc, #384]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	b2d1      	uxtb	r1, r2
 8001cd4:	4a5e      	ldr	r2, [pc, #376]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cd6:	7011      	strb	r1, [r2, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001cdc:	2155      	movs	r1, #85	@ 0x55
 8001cde:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	b2d1      	uxtb	r1, r2
 8001ce8:	4a59      	ldr	r2, [pc, #356]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cea:	7011      	strb	r1, [r2, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b59      	ldr	r3, [pc, #356]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001cf0:	214e      	movs	r1, #78	@ 0x4e
 8001cf2:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001cf4:	4b56      	ldr	r3, [pc, #344]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	b2d1      	uxtb	r1, r2
 8001cfc:	4a54      	ldr	r2, [pc, #336]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001cfe:	7011      	strb	r1, [r2, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b54      	ldr	r3, [pc, #336]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d04:	2145      	movs	r1, #69	@ 0x45
 8001d06:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001d08:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	b2d1      	uxtb	r1, r2
 8001d10:	4a4f      	ldr	r2, [pc, #316]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d12:	7011      	strb	r1, [r2, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b4f      	ldr	r3, [pc, #316]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d18:	2152      	movs	r1, #82	@ 0x52
 8001d1a:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <comm_sendCMD+0x1ac>)
 8001d22:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001d24:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	b2d1      	uxtb	r1, r2
 8001d2c:	4a48      	ldr	r2, [pc, #288]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d2e:	7011      	strb	r1, [r2, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b48      	ldr	r3, [pc, #288]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001d38:	4b45      	ldr	r3, [pc, #276]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	b2d1      	uxtb	r1, r2
 8001d40:	4a43      	ldr	r2, [pc, #268]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d42:	7011      	strb	r1, [r2, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d48:	213a      	movs	r1, #58	@ 0x3a
 8001d4a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001d4c:	4b40      	ldr	r3, [pc, #256]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	b2d1      	uxtb	r1, r2
 8001d54:	4a3e      	ldr	r2, [pc, #248]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d56:	7011      	strb	r1, [r2, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	2bb1      	cmp	r3, #177	@ 0xb1
 8001d64:	d002      	beq.n	8001d6c <comm_sendCMD+0xc0>
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	2bee      	cmp	r3, #238	@ 0xee
 8001d6a:	d109      	bne.n	8001d80 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	b2d1      	uxtb	r1, r2
 8001d74:	4a36      	ldr	r2, [pc, #216]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d76:	7011      	strb	r1, [r2, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4a36      	ldr	r2, [pc, #216]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d7c:	7abb      	ldrb	r3, [r7, #10]
 8001d7e:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d013      	beq.n	8001dae <comm_sendCMD+0x102>
 8001d86:	7abb      	ldrb	r3, [r7, #10]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d010      	beq.n	8001dae <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001d8c:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b30      	ldr	r3, [pc, #192]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001d94:	4413      	add	r3, r2
 8001d96:	7aba      	ldrb	r2, [r7, #10]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f00e fdee 	bl	801097c <memcpy>
        auxIndex += len;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	7abb      	ldrb	r3, [r7, #10]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001dac:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <comm_sendCMD+0x1ac>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <comm_sendCMD+0x1b0>)
 8001dc0:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	@ (8001e58 <comm_sendCMD+0x1ac>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <comm_sendCMD+0x1b0>)
 8001dca:	7819      	ldrb	r1, [r3, #0]
 8001dcc:	4b21      	ldr	r3, [pc, #132]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001dce:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e01f      	b.n	8001e1e <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001de6:	5c9a      	ldrb	r2, [r3, r2]
 8001de8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4053      	eors	r3, r2
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001df2:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001df4:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	78db      	ldrb	r3, [r3, #3]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	b2d1      	uxtb	r1, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	70d1      	strb	r1, [r2, #3]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <comm_sendCMD+0x1a8>)
 8001e0a:	5c1a      	ldrb	r2, [r3, r0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	440b      	add	r3, r1
 8001e10:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <comm_sendCMD+0x1a0>)
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <comm_sendCMD+0x1a4>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3d9      	bcc.n	8001dde <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	78db      	ldrb	r3, [r3, #3]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	b2d1      	uxtb	r1, r2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	70d1      	strb	r1, [r2, #3]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <comm_sendCMD+0x1b4>)
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	440b      	add	r3, r1
 8001e40:	711a      	strb	r2, [r3, #4]
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000806 	.word	0x20000806
 8001e50:	20000807 	.word	0x20000807
 8001e54:	20000808 	.word	0x20000808
 8001e58:	20000826 	.word	0x20000826
 8001e5c:	20000827 	.word	0x20000827
 8001e60:	20000828 	.word	0x20000828

08001e64 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af02      	add	r7, sp, #8
	uint8_t auxPos = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	717b      	strb	r3, [r7, #5]
	if(Display.isInit){
 8001e6e:	4ba3      	ldr	r3, [pc, #652]	@ (80020fc <OLED_Print_Data_Task+0x298>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 812b 	beq.w	80020ce <OLED_Print_Data_Task+0x26a>
		switch(Display.state){
 8001e78:	4ba0      	ldr	r3, [pc, #640]	@ (80020fc <OLED_Print_Data_Task+0x298>)
 8001e7a:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d023      	beq.n	8001eca <OLED_Print_Data_Task+0x66>
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	f300 8123 	bgt.w	80020ce <OLED_Print_Data_Task+0x26a>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <OLED_Print_Data_Task+0x2c>
 8001e8c:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001e8e:	e11e      	b.n	80020ce <OLED_Print_Data_Task+0x26a>
			if(HAL_GetTick() - Display.timer > 2000){
 8001e90:	f001 fea6 	bl	8003be0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b99      	ldr	r3, [pc, #612]	@ (80020fc <OLED_Print_Data_Task+0x298>)
 8001e98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001ea2:	f240 8111 	bls.w	80020c8 <OLED_Print_Data_Task+0x264>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff f9a4 	bl	80011f4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001eac:	2301      	movs	r3, #1
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	2340      	movs	r3, #64	@ 0x40
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	4a92      	ldr	r2, [pc, #584]	@ (8002100 <OLED_Print_Data_Task+0x29c>)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fa1e 	bl	80012fc <Display_DrawBitmap>
				Display.state = INPUTS;
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	@ (80020fc <OLED_Print_Data_Task+0x298>)
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001ec8:	e0fe      	b.n	80020c8 <OLED_Print_Data_Task+0x264>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8001eca:	2300      	movs	r3, #0
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	232c      	movs	r3, #44	@ 0x2c
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2325      	movs	r3, #37	@ 0x25
 8001ed4:	4a8b      	ldr	r2, [pc, #556]	@ (8002104 <OLED_Print_Data_Task+0x2a0>)
 8001ed6:	2111      	movs	r1, #17
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7ff fa0f 	bl	80012fc <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001ede:	2300      	movs	r3, #0
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	e03f      	b.n	8001f64 <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	71bb      	strb	r3, [r7, #6]
 8001ee8:	e036      	b.n	8001f58 <OLED_Print_Data_Task+0xf4>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4a86      	ldr	r2, [pc, #536]	@ (8002108 <OLED_Print_Data_Task+0x2a4>)
 8001eee:	3308      	adds	r3, #8
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	885a      	ldrh	r2, [r3, #2]
 8001ef6:	79bb      	ldrb	r3, [r7, #6]
 8001ef8:	4984      	ldr	r1, [pc, #528]	@ (800210c <OLED_Print_Data_Task+0x2a8>)
 8001efa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d827      	bhi.n	8001f52 <OLED_Print_Data_Task+0xee>
						auxPos = 2 + i * 3;
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	461a      	mov	r2, r3
 8001f06:	0052      	lsls	r2, r2, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	717b      	strb	r3, [r7, #5]
						Display_DrawLine(auxPos, 61,  auxPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001f10:	797b      	ldrb	r3, [r7, #5]
 8001f12:	b298      	uxth	r0, r3
 8001f14:	797b      	ldrb	r3, [r7, #5]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	497d      	ldr	r1, [pc, #500]	@ (8002110 <OLED_Print_Data_Task+0x2ac>)
 8001f1c:	5ccb      	ldrb	r3, [r1, r3]
 8001f1e:	4619      	mov	r1, r3
 8001f20:	2301      	movs	r3, #1
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	460b      	mov	r3, r1
 8001f26:	213d      	movs	r1, #61	@ 0x3d
 8001f28:	f7ff faf2 	bl	8001510 <Display_DrawLine>
						Display_DrawLine(auxPos+1, 61,  auxPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001f2c:	797b      	ldrb	r3, [r7, #5]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	b298      	uxth	r0, r3
 8001f34:	797b      	ldrb	r3, [r7, #5]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	4974      	ldr	r1, [pc, #464]	@ (8002110 <OLED_Print_Data_Task+0x2ac>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	4619      	mov	r1, r3
 8001f44:	2301      	movs	r3, #1
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	213d      	movs	r1, #61	@ 0x3d
 8001f4c:	f7ff fae0 	bl	8001510 <Display_DrawLine>
						break;
 8001f50:	e005      	b.n	8001f5e <OLED_Print_Data_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 8001f52:	79bb      	ldrb	r3, [r7, #6]
 8001f54:	3301      	adds	r3, #1
 8001f56:	71bb      	strb	r3, [r7, #6]
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001f5c:	d9c5      	bls.n	8001eea <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	3301      	adds	r3, #1
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b07      	cmp	r3, #7
 8001f68:	d9bc      	bls.n	8001ee4 <OLED_Print_Data_Task+0x80>
					}
				}
			}

			if(MPU6050.isInit){
 8001f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001f6c:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80ab 	beq.w	80020cc <OLED_Print_Data_Task+0x268>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8001f76:	4b67      	ldr	r3, [pc, #412]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	139b      	asrs	r3, r3, #14
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f88:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002118 <OLED_Print_Data_Task+0x2b4>
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001f9c:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001fa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa4:	139b      	asrs	r3, r3, #14
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002118 <OLED_Print_Data_Task+0x2b4>
 8001fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbc:	ee17 3a90 	vmov	r3, s15
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	4b54      	ldr	r3, [pc, #336]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001fc4:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8001fc6:	4b53      	ldr	r3, [pc, #332]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001fc8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fcc:	139b      	asrs	r3, r3, #14
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002118 <OLED_Print_Data_Task+0x2b4>
 8001fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe4:	ee17 3a90 	vmov	r3, s15
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	4b4a      	ldr	r3, [pc, #296]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001fec:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8001fee:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8001ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4949      	ldr	r1, [pc, #292]	@ (800211c <OLED_Print_Data_Task+0x2b8>)
 8001ff8:	4849      	ldr	r0, [pc, #292]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 8001ffa:	f00e fc69 	bl	80108d0 <siprintf>
				Display_SetCursor(25, 17);
 8001ffe:	2111      	movs	r1, #17
 8002000:	2019      	movs	r0, #25
 8002002:	f7ff f8df 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8002006:	4a47      	ldr	r2, [pc, #284]	@ (8002124 <OLED_Print_Data_Task+0x2c0>)
 8002008:	2301      	movs	r3, #1
 800200a:	ca06      	ldmia	r2, {r1, r2}
 800200c:	4844      	ldr	r0, [pc, #272]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 800200e:	f7ff fa59 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8002012:	4b40      	ldr	r3, [pc, #256]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8002014:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002018:	461a      	mov	r2, r3
 800201a:	4943      	ldr	r1, [pc, #268]	@ (8002128 <OLED_Print_Data_Task+0x2c4>)
 800201c:	4840      	ldr	r0, [pc, #256]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 800201e:	f00e fc57 	bl	80108d0 <siprintf>
				Display_SetCursor(25, 34);
 8002022:	2122      	movs	r1, #34	@ 0x22
 8002024:	2019      	movs	r0, #25
 8002026:	f7ff f8cd 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800202a:	4a3e      	ldr	r2, [pc, #248]	@ (8002124 <OLED_Print_Data_Task+0x2c0>)
 800202c:	2301      	movs	r3, #1
 800202e:	ca06      	ldmia	r2, {r1, r2}
 8002030:	483b      	ldr	r0, [pc, #236]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 8002032:	f7ff fa47 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8002036:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8002038:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800203c:	461a      	mov	r2, r3
 800203e:	493b      	ldr	r1, [pc, #236]	@ (800212c <OLED_Print_Data_Task+0x2c8>)
 8002040:	4837      	ldr	r0, [pc, #220]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 8002042:	f00e fc45 	bl	80108d0 <siprintf>
				Display_SetCursor(25, 51);
 8002046:	2133      	movs	r1, #51	@ 0x33
 8002048:	2019      	movs	r0, #25
 800204a:	f7ff f8bb 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800204e:	4a35      	ldr	r2, [pc, #212]	@ (8002124 <OLED_Print_Data_Task+0x2c0>)
 8002050:	2301      	movs	r3, #1
 8002052:	ca06      	ldmia	r2, {r1, r2}
 8002054:	4832      	ldr	r0, [pc, #200]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 8002056:	f7ff fa35 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 800205c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002060:	461a      	mov	r2, r3
 8002062:	4933      	ldr	r1, [pc, #204]	@ (8002130 <OLED_Print_Data_Task+0x2cc>)
 8002064:	482e      	ldr	r0, [pc, #184]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 8002066:	f00e fc33 	bl	80108d0 <siprintf>
				Display_SetCursor(73, 17);
 800206a:	2111      	movs	r1, #17
 800206c:	2049      	movs	r0, #73	@ 0x49
 800206e:	f7ff f8a9 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8002072:	4a2c      	ldr	r2, [pc, #176]	@ (8002124 <OLED_Print_Data_Task+0x2c0>)
 8002074:	2301      	movs	r3, #1
 8002076:	ca06      	ldmia	r2, {r1, r2}
 8002078:	4829      	ldr	r0, [pc, #164]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 800207a:	f7ff fa23 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 800207e:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 8002080:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002084:	461a      	mov	r2, r3
 8002086:	492b      	ldr	r1, [pc, #172]	@ (8002134 <OLED_Print_Data_Task+0x2d0>)
 8002088:	4825      	ldr	r0, [pc, #148]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 800208a:	f00e fc21 	bl	80108d0 <siprintf>
				Display_SetCursor(73, 34);
 800208e:	2122      	movs	r1, #34	@ 0x22
 8002090:	2049      	movs	r0, #73	@ 0x49
 8002092:	f7ff f897 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8002096:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <OLED_Print_Data_Task+0x2c0>)
 8002098:	2301      	movs	r3, #1
 800209a:	ca06      	ldmia	r2, {r1, r2}
 800209c:	4820      	ldr	r0, [pc, #128]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 800209e:	f7ff fa11 	bl	80014c4 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <OLED_Print_Data_Task+0x2b0>)
 80020a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4923      	ldr	r1, [pc, #140]	@ (8002138 <OLED_Print_Data_Task+0x2d4>)
 80020ac:	481c      	ldr	r0, [pc, #112]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 80020ae:	f00e fc0f 	bl	80108d0 <siprintf>
				Display_SetCursor(73, 51);
 80020b2:	2133      	movs	r1, #51	@ 0x33
 80020b4:	2049      	movs	r0, #73	@ 0x49
 80020b6:	f7ff f885 	bl	80011c4 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80020ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002124 <OLED_Print_Data_Task+0x2c0>)
 80020bc:	2301      	movs	r3, #1
 80020be:	ca06      	ldmia	r2, {r1, r2}
 80020c0:	4817      	ldr	r0, [pc, #92]	@ (8002120 <OLED_Print_Data_Task+0x2bc>)
 80020c2:	f7ff f9ff 	bl	80014c4 <Display_WriteString>
			}

			break;
 80020c6:	e001      	b.n	80020cc <OLED_Print_Data_Task+0x268>
			break;
 80020c8:	bf00      	nop
 80020ca:	e000      	b.n	80020ce <OLED_Print_Data_Task+0x26a>
			break;
 80020cc:	bf00      	nop
		}
	}

	is30s--;
 80020ce:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <OLED_Print_Data_Task+0x2d8>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	4b19      	ldr	r3, [pc, #100]	@ (800213c <OLED_Print_Data_Task+0x2d8>)
 80020d8:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <OLED_Print_Data_Task+0x2d8>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <OLED_Print_Data_Task+0x28a>
		is30s = 300;
 80020e2:	4b16      	ldr	r3, [pc, #88]	@ (800213c <OLED_Print_Data_Task+0x2d8>)
 80020e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020e8:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 80020ea:	f000 f829 	bl	8002140 <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff f858 	bl	80011a4 <Display_I2C_Refresh_Ready>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000bd8 	.word	0x20000bd8
 8002100:	080118a4 	.word	0x080118a4
 8002104:	080113c8 	.word	0x080113c8
 8002108:	20000fec 	.word	0x20000fec
 800210c:	0801136c 	.word	0x0801136c
 8002110:	0801133c 	.word	0x0801133c
 8002114:	20000b14 	.word	0x20000b14
 8002118:	411ccccd 	.word	0x411ccccd
 800211c:	08011228 	.word	0x08011228
 8002120:	20000fe0 	.word	0x20000fe0
 8002124:	20000000 	.word	0x20000000
 8002128:	08011230 	.word	0x08011230
 800212c:	08011238 	.word	0x08011238
 8002130:	08011240 	.word	0x08011240
 8002134:	08011248 	.word	0x08011248
 8002138:	08011250 	.word	0x08011250
 800213c:	2000000c 	.word	0x2000000c

08002140 <BateryLevel_Set>:

void BateryLevel_Set(){
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8002146:	2300      	movs	r3, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2309      	movs	r3, #9
 800214c:	2206      	movs	r2, #6
 800214e:	2104      	movs	r1, #4
 8002150:	2003      	movs	r0, #3
 8002152:	f7ff fa8b 	bl	800166c <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8002156:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <BateryLevel_Set+0x94>)
 8002158:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800215a:	f640 723b 	movw	r2, #3899	@ 0xf3b
 800215e:	4293      	cmp	r3, r2
 8002160:	d908      	bls.n	8002174 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8002162:	2301      	movs	r3, #1
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2309      	movs	r3, #9
 8002168:	2206      	movs	r2, #6
 800216a:	2104      	movs	r1, #4
 800216c:	2003      	movs	r0, #3
 800216e:	f7ff fa7d 	bl	800166c <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8002172:	e02b      	b.n	80021cc <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8002174:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <BateryLevel_Set+0x94>)
 8002176:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002178:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800217c:	4293      	cmp	r3, r2
 800217e:	d908      	bls.n	8002192 <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8002180:	2301      	movs	r3, #1
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2307      	movs	r3, #7
 8002186:	2206      	movs	r2, #6
 8002188:	2106      	movs	r1, #6
 800218a:	2003      	movs	r0, #3
 800218c:	f7ff fa6e 	bl	800166c <Display_DrawFilledRectangle>
}
 8002190:	e01c      	b.n	80021cc <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <BateryLevel_Set+0x94>)
 8002194:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002196:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800219a:	4293      	cmp	r3, r2
 800219c:	d908      	bls.n	80021b0 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 800219e:	2301      	movs	r3, #1
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2305      	movs	r3, #5
 80021a4:	2206      	movs	r2, #6
 80021a6:	2108      	movs	r1, #8
 80021a8:	2003      	movs	r0, #3
 80021aa:	f7ff fa5f 	bl	800166c <Display_DrawFilledRectangle>
}
 80021ae:	e00d      	b.n	80021cc <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 80021b0:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <BateryLevel_Set+0x94>)
 80021b2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80021b4:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d907      	bls.n	80021cc <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 80021bc:	2301      	movs	r3, #1
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2302      	movs	r3, #2
 80021c2:	2206      	movs	r2, #6
 80021c4:	210b      	movs	r1, #11
 80021c6:	2003      	movs	r0, #3
 80021c8:	f7ff fa50 	bl	800166c <Display_DrawFilledRectangle>
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000fec 	.word	0x20000fec

080021d8 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	3302      	adds	r3, #2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80021ee:	2bf1      	cmp	r3, #241	@ 0xf1
 80021f0:	f000 81c9 	beq.w	8002586 <decodeOn_USB+0x3ae>
 80021f4:	2bf1      	cmp	r3, #241	@ 0xf1
 80021f6:	f300 81bf 	bgt.w	8002578 <decodeOn_USB+0x3a0>
 80021fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80021fc:	d036      	beq.n	800226c <decodeOn_USB+0x94>
 80021fe:	2bf0      	cmp	r3, #240	@ 0xf0
 8002200:	f300 81ba 	bgt.w	8002578 <decodeOn_USB+0x3a0>
 8002204:	2bb1      	cmp	r3, #177	@ 0xb1
 8002206:	dc2d      	bgt.n	8002264 <decodeOn_USB+0x8c>
 8002208:	2ba0      	cmp	r3, #160	@ 0xa0
 800220a:	f2c0 81b5 	blt.w	8002578 <decodeOn_USB+0x3a0>
 800220e:	3ba0      	subs	r3, #160	@ 0xa0
 8002210:	2b11      	cmp	r3, #17
 8002212:	f200 81b1 	bhi.w	8002578 <decodeOn_USB+0x3a0>
 8002216:	a201      	add	r2, pc, #4	@ (adr r2, 800221c <decodeOn_USB+0x44>)
 8002218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221c:	08002287 	.word	0x08002287
 8002220:	080022fd 	.word	0x080022fd
 8002224:	08002357 	.word	0x08002357
 8002228:	080023e3 	.word	0x080023e3
 800222c:	08002481 	.word	0x08002481
 8002230:	08002579 	.word	0x08002579
 8002234:	08002579 	.word	0x08002579
 8002238:	08002579 	.word	0x08002579
 800223c:	08002579 	.word	0x08002579
 8002240:	08002579 	.word	0x08002579
 8002244:	08002579 	.word	0x08002579
 8002248:	08002579 	.word	0x08002579
 800224c:	08002579 	.word	0x08002579
 8002250:	08002579 	.word	0x08002579
 8002254:	08002579 	.word	0x08002579
 8002258:	08002579 	.word	0x08002579
 800225c:	08002579 	.word	0x08002579
 8002260:	0800258b 	.word	0x0800258b
 8002264:	2bde      	cmp	r3, #222	@ 0xde
 8002266:	f000 8192 	beq.w	800258e <decodeOn_USB+0x3b6>
 800226a:	e185      	b.n	8002578 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	220d      	movs	r2, #13
 8002270:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800227a:	2301      	movs	r3, #1
 800227c:	21f0      	movs	r1, #240	@ 0xf0
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fd14 	bl	8001cac <comm_sendCMD>
		break;
 8002284:	e184      	b.n	8002590 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	3303      	adds	r3, #3
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002294:	2b08      	cmp	r3, #8
 8002296:	d82a      	bhi.n	80022ee <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	3303      	adds	r3, #3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022a6:	4aa8      	ldr	r2, [pc, #672]	@ (8002548 <decodeOn_USB+0x370>)
 80022a8:	3308      	adds	r3, #8
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	885a      	ldrh	r2, [r3, #2]
 80022b0:	4ba6      	ldr	r3, [pc, #664]	@ (800254c <decodeOn_USB+0x374>)
 80022b2:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	3303      	adds	r3, #3
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80022c8:	4ba0      	ldr	r3, [pc, #640]	@ (800254c <decodeOn_USB+0x374>)
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80022d2:	4b9e      	ldr	r3, [pc, #632]	@ (800254c <decodeOn_USB+0x374>)
 80022d4:	785a      	ldrb	r2, [r3, #1]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80022e2:	2303      	movs	r3, #3
 80022e4:	21a0      	movs	r1, #160	@ 0xa0
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fce0 	bl	8001cac <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 80022ec:	e150      	b.n	8002590 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 80022ee:	2306      	movs	r3, #6
 80022f0:	4a97      	ldr	r2, [pc, #604]	@ (8002550 <decodeOn_USB+0x378>)
 80022f2:	21ef      	movs	r1, #239	@ 0xef
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fcd9 	bl	8001cac <comm_sendCMD>
		break;
 80022fa:	e149      	b.n	8002590 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e01d      	b.n	800233e <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	4a90      	ldr	r2, [pc, #576]	@ (8002548 <decodeOn_USB+0x370>)
 8002306:	3308      	adds	r3, #8
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	885a      	ldrh	r2, [r3, #2]
 800230e:	4b8f      	ldr	r3, [pc, #572]	@ (800254c <decodeOn_USB+0x374>)
 8002310:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4a8d      	ldr	r2, [pc, #564]	@ (800254c <decodeOn_USB+0x374>)
 8002318:	7811      	ldrb	r1, [r2, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	460a      	mov	r2, r1
 8002320:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	3301      	adds	r3, #1
 800232a:	4a88      	ldr	r2, [pc, #544]	@ (800254c <decodeOn_USB+0x374>)
 800232c:	7851      	ldrb	r1, [r2, #1]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	460a      	mov	r2, r1
 8002334:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	3301      	adds	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	2b08      	cmp	r3, #8
 8002342:	d9de      	bls.n	8002302 <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800234a:	2311      	movs	r3, #17
 800234c:	21a1      	movs	r1, #161	@ 0xa1
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff fcac 	bl	8001cac <comm_sendCMD>
		break;
 8002354:	e11c      	b.n	8002590 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	3303      	adds	r3, #3
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002364:	2b00      	cmp	r3, #0
 8002366:	d115      	bne.n	8002394 <decodeOn_USB+0x1bc>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	785b      	ldrb	r3, [r3, #1]
 800236c:	3304      	adds	r3, #4
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002376:	b25b      	sxtb	r3, r3
 8002378:	4619      	mov	r1, r3
 800237a:	4876      	ldr	r0, [pc, #472]	@ (8002554 <decodeOn_USB+0x37c>)
 800237c:	f7ff fa52 	bl	8001824 <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 8002380:	4b75      	ldr	r3, [pc, #468]	@ (8002558 <decodeOn_USB+0x380>)
 8002382:	220d      	movs	r2, #13
 8002384:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002388:	2301      	movs	r3, #1
 800238a:	4a74      	ldr	r2, [pc, #464]	@ (800255c <decodeOn_USB+0x384>)
 800238c:	21a2      	movs	r1, #162	@ 0xa2
 800238e:	4872      	ldr	r0, [pc, #456]	@ (8002558 <decodeOn_USB+0x380>)
 8002390:	f7ff fc8c 	bl	8001cac <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	3303      	adds	r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d116      	bne.n	80023d4 <decodeOn_USB+0x1fc>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	3304      	adds	r3, #4
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	4869      	ldr	r0, [pc, #420]	@ (8002560 <decodeOn_USB+0x388>)
 80023ba:	f7ff fa33 	bl	8001824 <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80023be:	4b66      	ldr	r3, [pc, #408]	@ (8002558 <decodeOn_USB+0x380>)
 80023c0:	220d      	movs	r2, #13
 80023c2:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80023c6:	2301      	movs	r3, #1
 80023c8:	4a64      	ldr	r2, [pc, #400]	@ (800255c <decodeOn_USB+0x384>)
 80023ca:	21a2      	movs	r1, #162	@ 0xa2
 80023cc:	4862      	ldr	r0, [pc, #392]	@ (8002558 <decodeOn_USB+0x380>)
 80023ce:	f7ff fc6d 	bl	8001cac <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 80023d2:	e0dd      	b.n	8002590 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 80023d4:	2308      	movs	r3, #8
 80023d6:	4a63      	ldr	r2, [pc, #396]	@ (8002564 <decodeOn_USB+0x38c>)
 80023d8:	21ef      	movs	r1, #239	@ 0xef
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fc66 	bl	8001cac <comm_sendCMD>
		break;
 80023e0:	e0d6      	b.n	8002590 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	3303      	adds	r3, #3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11a      	bne.n	800242a <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 80023f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002568 <decodeOn_USB+0x390>)
 80023f6:	891a      	ldrh	r2, [r3, #8]
 80023f8:	4b54      	ldr	r3, [pc, #336]	@ (800254c <decodeOn_USB+0x374>)
 80023fa:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002404:	4b51      	ldr	r3, [pc, #324]	@ (800254c <decodeOn_USB+0x374>)
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800240e:	4b4f      	ldr	r3, [pc, #316]	@ (800254c <decodeOn_USB+0x374>)
 8002410:	785a      	ldrb	r2, [r3, #1]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800241e:	2303      	movs	r3, #3
 8002420:	21a3      	movs	r1, #163	@ 0xa3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fc42 	bl	8001cac <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8002428:	e0b2      	b.n	8002590 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	3303      	adds	r3, #3
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11a      	bne.n	8002472 <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 800243c:	4b4b      	ldr	r3, [pc, #300]	@ (800256c <decodeOn_USB+0x394>)
 800243e:	891a      	ldrh	r2, [r3, #8]
 8002440:	4b42      	ldr	r3, [pc, #264]	@ (800254c <decodeOn_USB+0x374>)
 8002442:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 800244c:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <decodeOn_USB+0x374>)
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8002456:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <decodeOn_USB+0x374>)
 8002458:	785a      	ldrb	r2, [r3, #1]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002466:	2303      	movs	r3, #3
 8002468:	21a3      	movs	r1, #163	@ 0xa3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fc1e 	bl	8001cac <comm_sendCMD>
		break;
 8002470:	e08e      	b.n	8002590 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 8002472:	230a      	movs	r3, #10
 8002474:	4a3e      	ldr	r2, [pc, #248]	@ (8002570 <decodeOn_USB+0x398>)
 8002476:	21ef      	movs	r1, #239	@ 0xef
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fc17 	bl	8001cac <comm_sendCMD>
		break;
 800247e:	e087      	b.n	8002590 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 8002480:	4b3c      	ldr	r3, [pc, #240]	@ (8002574 <decodeOn_USB+0x39c>)
 8002482:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002486:	4b31      	ldr	r3, [pc, #196]	@ (800254c <decodeOn_USB+0x374>)
 8002488:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 800248a:	4b30      	ldr	r3, [pc, #192]	@ (800254c <decodeOn_USB+0x374>)
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8002494:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <decodeOn_USB+0x374>)
 8002496:	785a      	ldrb	r2, [r3, #1]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 800249e:	4b35      	ldr	r3, [pc, #212]	@ (8002574 <decodeOn_USB+0x39c>)
 80024a0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <decodeOn_USB+0x374>)
 80024a6:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 80024a8:	4b28      	ldr	r3, [pc, #160]	@ (800254c <decodeOn_USB+0x374>)
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 80024b2:	4b26      	ldr	r3, [pc, #152]	@ (800254c <decodeOn_USB+0x374>)
 80024b4:	785a      	ldrb	r2, [r3, #1]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <decodeOn_USB+0x39c>)
 80024be:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80024c2:	4b22      	ldr	r3, [pc, #136]	@ (800254c <decodeOn_USB+0x374>)
 80024c4:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 80024c6:	4b21      	ldr	r3, [pc, #132]	@ (800254c <decodeOn_USB+0x374>)
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <decodeOn_USB+0x374>)
 80024d2:	785a      	ldrb	r2, [r3, #1]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 80024da:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <decodeOn_USB+0x39c>)
 80024dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80024e0:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <decodeOn_USB+0x374>)
 80024e2:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <decodeOn_USB+0x374>)
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 80024ee:	4b17      	ldr	r3, [pc, #92]	@ (800254c <decodeOn_USB+0x374>)
 80024f0:	785a      	ldrb	r2, [r3, #1]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <decodeOn_USB+0x39c>)
 80024fa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80024fe:	4b13      	ldr	r3, [pc, #76]	@ (800254c <decodeOn_USB+0x374>)
 8002500:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <decodeOn_USB+0x374>)
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 800250c:	4b0f      	ldr	r3, [pc, #60]	@ (800254c <decodeOn_USB+0x374>)
 800250e:	785a      	ldrb	r2, [r3, #1]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 8002516:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <decodeOn_USB+0x39c>)
 8002518:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <decodeOn_USB+0x374>)
 800251e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8002520:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <decodeOn_USB+0x374>)
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 800252a:	4b08      	ldr	r3, [pc, #32]	@ (800254c <decodeOn_USB+0x374>)
 800252c:	785a      	ldrb	r2, [r3, #1]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800253a:	230c      	movs	r3, #12
 800253c:	21a4      	movs	r1, #164	@ 0xa4
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fbb4 	bl	8001cac <comm_sendCMD>
		break;
 8002544:	e024      	b.n	8002590 <decodeOn_USB+0x3b8>
 8002546:	bf00      	nop
 8002548:	20000fec 	.word	0x20000fec
 800254c:	20000ac4 	.word	0x20000ac4
 8002550:	08011258 	.word	0x08011258
 8002554:	20000acc 	.word	0x20000acc
 8002558:	20001010 	.word	0x20001010
 800255c:	20001220 	.word	0x20001220
 8002560:	20000ae4 	.word	0x20000ae4
 8002564:	08011260 	.word	0x08011260
 8002568:	20000afc 	.word	0x20000afc
 800256c:	20000b08 	.word	0x20000b08
 8002570:	0801126c 	.word	0x0801126c
 8002574:	20000b14 	.word	0x20000b14
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 8002578:	2306      	movs	r3, #6
 800257a:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <decodeOn_USB+0x3c0>)
 800257c:	21ef      	movs	r1, #239	@ 0xef
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fb94 	bl	8001cac <comm_sendCMD>
		break;
 8002584:	e004      	b.n	8002590 <decodeOn_USB+0x3b8>
		break;
 8002586:	bf00      	nop
 8002588:	e002      	b.n	8002590 <decodeOn_USB+0x3b8>
		break;
 800258a:	bf00      	nop
 800258c:	e000      	b.n	8002590 <decodeOn_USB+0x3b8>
		break;
 800258e:	bf00      	nop
	}
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	08011278 	.word	0x08011278

0800259c <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]

}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <task_10ms>:

void task_10ms(){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 80025b8:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <task_10ms+0xa4>)
 80025ba:	7813      	ldrb	r3, [r2, #0]
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 80025c2:	4b26      	ldr	r3, [pc, #152]	@ (800265c <task_10ms+0xa8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b24      	ldr	r3, [pc, #144]	@ (800265c <task_10ms+0xa8>)
 80025cc:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 80025ce:	4b23      	ldr	r3, [pc, #140]	@ (800265c <task_10ms+0xa8>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11a      	bne.n	800260c <task_10ms+0x58>
		is100ms1 = 10;
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <task_10ms+0xa8>)
 80025d8:	220a      	movs	r2, #10
 80025da:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80025dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025e0:	481f      	ldr	r0, [pc, #124]	@ (8002660 <task_10ms+0xac>)
 80025e2:	f002 ff2c 	bl	800543e <HAL_GPIO_TogglePin>
		is1s--;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <task_10ms+0xb0>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <task_10ms+0xb0>)
 80025f0:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <task_10ms+0xb0>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <task_10ms+0x58>
			is1s = 10;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <task_10ms+0xb0>)
 80025fc:	220a      	movs	r2, #10
 80025fe:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 8002600:	4819      	ldr	r0, [pc, #100]	@ (8002668 <task_10ms+0xb4>)
 8002602:	f7ff f8df 	bl	80017c4 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 8002606:	4819      	ldr	r0, [pc, #100]	@ (800266c <task_10ms+0xb8>)
 8002608:	f7ff f8dc 	bl	80017c4 <Encoder_1s_Elapsed>
		}
	}

	Display.refreshCounter_10ms--;
 800260c:	4b18      	ldr	r3, [pc, #96]	@ (8002670 <task_10ms+0xbc>)
 800260e:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8002612:	3b01      	subs	r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <task_10ms+0xbc>)
 8002618:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ //Tasa de refresco variable
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <task_10ms+0xbc>)
 800261e:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <task_10ms+0x82>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <task_10ms+0xbc>)
 8002628:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <task_10ms+0xbc>)
 800262e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8002632:	f7ff fc17 	bl	8001e64 <OLED_Print_Data_Task>
	}

	Debouncer_Task();
 8002636:	f7fe f8e9 	bl	800080c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 800263a:	480e      	ldr	r0, [pc, #56]	@ (8002674 <task_10ms+0xc0>)
 800263c:	f7ff f98a 	bl	8001954 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 8002640:	480d      	ldr	r0, [pc, #52]	@ (8002678 <task_10ms+0xc4>)
 8002642:	f7ff f987 	bl	8001954 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8002646:	4808      	ldr	r0, [pc, #32]	@ (8002668 <task_10ms+0xb4>)
 8002648:	f7ff f87c 	bl	8001744 <Encoder_Task>
	Encoder_Task(&EncoderR);
 800264c:	4807      	ldr	r0, [pc, #28]	@ (800266c <task_10ms+0xb8>)
 800264e:	f7ff f879 	bl	8001744 <Encoder_Task>
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000ac0 	.word	0x20000ac0
 800265c:	20000008 	.word	0x20000008
 8002660:	40020800 	.word	0x40020800
 8002664:	20000009 	.word	0x20000009
 8002668:	20000afc 	.word	0x20000afc
 800266c:	20000b08 	.word	0x20000b08
 8002670:	20000bd8 	.word	0x20000bd8
 8002674:	20000acc 	.word	0x20000acc
 8002678:	20000ae4 	.word	0x20000ae4

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002680:	f001 fa48 	bl	8003b14 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8002684:	4b38      	ldr	r3, [pc, #224]	@ (8002768 <main+0xec>)
 8002686:	2200      	movs	r2, #0
 8002688:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 800268c:	4b37      	ldr	r3, [pc, #220]	@ (800276c <main+0xf0>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 8002692:	4b36      	ldr	r3, [pc, #216]	@ (800276c <main+0xf0>)
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800269a:	f000 f88d 	bl	80027b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269e:	f000 fb1f 	bl	8002ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a2:	f000 fadf 	bl	8002c64 <MX_DMA_Init>
  MX_ADC1_Init();
 80026a6:	f000 f8f1 	bl	800288c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80026aa:	f00d fb95 	bl	800fdd8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80026ae:	f000 f9dd 	bl	8002a6c <MX_TIM1_Init>
  MX_I2C1_Init();
 80026b2:	f000 f9ad 	bl	8002a10 <MX_I2C1_Init>
  MX_TIM3_Init();
 80026b6:	f000 fa29 	bl	8002b0c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80026ba:	f000 faa9 	bl	8002c10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80026be:	4a2c      	ldr	r2, [pc, #176]	@ (8002770 <main+0xf4>)
 80026c0:	492c      	ldr	r1, [pc, #176]	@ (8002774 <main+0xf8>)
 80026c2:	482d      	ldr	r0, [pc, #180]	@ (8002778 <main+0xfc>)
 80026c4:	f7ff f961 	bl	800198a <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80026c8:	482c      	ldr	r0, [pc, #176]	@ (800277c <main+0x100>)
 80026ca:	f00d fcd7 	bl	801007c <CDC_Attach_Rx>

  //HAL_UART_Receive_IT(&huart1, &dataRx, 1);
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80026ce:	f7fe f835 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80026d2:	492b      	ldr	r1, [pc, #172]	@ (8002780 <main+0x104>)
 80026d4:	482b      	ldr	r0, [pc, #172]	@ (8002784 <main+0x108>)
 80026d6:	f7fe f865 	bl	80007a4 <Debounce_Add>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <main+0x10c>)
 80026e0:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  Init_Timing();
 80026e2:	f000 fbdf 	bl	8002ea4 <Init_Timing>

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 80026e6:	f000 fc21 	bl	8002f2c <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 80026ea:	f000 fc57 	bl	8002f9c <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80026ee:	4b27      	ldr	r3, [pc, #156]	@ (800278c <main+0x110>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <main+0x114>)
 80026f8:	4926      	ldr	r1, [pc, #152]	@ (8002794 <main+0x118>)
 80026fa:	4827      	ldr	r0, [pc, #156]	@ (8002798 <main+0x11c>)
 80026fc:	f7ff f873 	bl	80017e6 <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8002700:	4b22      	ldr	r3, [pc, #136]	@ (800278c <main+0x110>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002706:	b29b      	uxth	r3, r3
 8002708:	4a24      	ldr	r2, [pc, #144]	@ (800279c <main+0x120>)
 800270a:	4925      	ldr	r1, [pc, #148]	@ (80027a0 <main+0x124>)
 800270c:	4825      	ldr	r0, [pc, #148]	@ (80027a4 <main+0x128>)
 800270e:	f7ff f86a 	bl	80017e6 <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8002712:	210a      	movs	r1, #10
 8002714:	4824      	ldr	r0, [pc, #144]	@ (80027a8 <main+0x12c>)
 8002716:	f7fe fff6 	bl	8001706 <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 800271a:	210a      	movs	r1, #10
 800271c:	4823      	ldr	r0, [pc, #140]	@ (80027ac <main+0x130>)
 800271e:	f7fe fff2 	bl	8001706 <Encoder_Init>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"ESP INIT", 8);
  }else{

  }*/

  Car.state = IDLE;
 8002722:	4b23      	ldr	r3, [pc, #140]	@ (80027b0 <main+0x134>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 8002728:	4813      	ldr	r0, [pc, #76]	@ (8002778 <main+0xfc>)
 800272a:	f7ff f962 	bl	80019f2 <Comm_Task>
	Display_UpdateScreen_Task();
 800272e:	f7fe fcc1 	bl	80010b4 <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8002732:	480d      	ldr	r0, [pc, #52]	@ (8002768 <main+0xec>)
 8002734:	f7fe fa6e 	bl	8000c14 <MPU6050_MAF>
	//ESP01_Task();
	  /* END USER TASK */

	if(IS10MS){
 8002738:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <main+0x138>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <main+0xce>
		task_10ms();
 8002746:	f7ff ff35 	bl	80025b4 <task_10ms>
	}

	switch(Car.state){
 800274a:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <main+0x134>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d005      	beq.n	800275e <main+0xe2>
 8002752:	2b02      	cmp	r3, #2
 8002754:	dce8      	bgt.n	8002728 <main+0xac>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <main+0xe6>
 800275a:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 800275c:	e002      	b.n	8002764 <main+0xe8>
	case GO_FROM_TO:

		break;
 800275e:	bf00      	nop
 8002760:	e7e2      	b.n	8002728 <main+0xac>
		break;
 8002762:	bf00      	nop
	Comm_Task(&USB.data);
 8002764:	e7e0      	b.n	8002728 <main+0xac>
 8002766:	bf00      	nop
 8002768:	20000b14 	.word	0x20000b14
 800276c:	20000bd8 	.word	0x20000bd8
 8002770:	08003291 	.word	0x08003291
 8002774:	080021d9 	.word	0x080021d9
 8002778:	20001010 	.word	0x20001010
 800277c:	08003305 	.word	0x08003305
 8002780:	0800259d 	.word	0x0800259d
 8002784:	08003279 	.word	0x08003279
 8002788:	20000ac8 	.word	0x20000ac8
 800278c:	20000a30 	.word	0x20000a30
 8002790:	0800335d 	.word	0x0800335d
 8002794:	080033d1 	.word	0x080033d1
 8002798:	20000acc 	.word	0x20000acc
 800279c:	08003395 	.word	0x08003395
 80027a0:	080033f5 	.word	0x080033f5
 80027a4:	20000ae4 	.word	0x20000ae4
 80027a8:	20000afc 	.word	0x20000afc
 80027ac:	20000b08 	.word	0x20000b08
 80027b0:	20001244 	.word	0x20001244
 80027b4:	20000ac0 	.word	0x20000ac0

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b094      	sub	sp, #80	@ 0x50
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	2230      	movs	r2, #48	@ 0x30
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00e f8a4 	bl	8010914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	4b28      	ldr	r3, [pc, #160]	@ (8002884 <SystemClock_Config+0xcc>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <SystemClock_Config+0xcc>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ec:	4b25      	ldr	r3, [pc, #148]	@ (8002884 <SystemClock_Config+0xcc>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f8:	2300      	movs	r3, #0
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <SystemClock_Config+0xd0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a21      	ldr	r2, [pc, #132]	@ (8002888 <SystemClock_Config+0xd0>)
 8002802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <SystemClock_Config+0xd0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002814:	2301      	movs	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281e:	2302      	movs	r3, #2
 8002820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002822:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002828:	2319      	movs	r3, #25
 800282a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800282c:	23c0      	movs	r3, #192	@ 0xc0
 800282e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002830:	2302      	movs	r3, #2
 8002832:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002834:	2304      	movs	r3, #4
 8002836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	4618      	mov	r0, r3
 800283e:	f007 fc5d 	bl	800a0fc <HAL_RCC_OscConfig>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002848:	f000 fde6 	bl	8003418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284c:	230f      	movs	r3, #15
 800284e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002850:	2302      	movs	r3, #2
 8002852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800285c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002862:	f107 030c 	add.w	r3, r7, #12
 8002866:	2103      	movs	r1, #3
 8002868:	4618      	mov	r0, r3
 800286a:	f007 febf 	bl	800a5ec <HAL_RCC_ClockConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002874:	f000 fdd0 	bl	8003418 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002878:	f007 ff9e 	bl	800a7b8 <HAL_RCC_EnableCSS>
}
 800287c:	bf00      	nop
 800287e:	3750      	adds	r7, #80	@ 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000

0800288c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002892:	463b      	mov	r3, r7
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800289e:	4b59      	ldr	r3, [pc, #356]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028a0:	4a59      	ldr	r2, [pc, #356]	@ (8002a08 <MX_ADC1_Init+0x17c>)
 80028a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028a4:	4b57      	ldr	r3, [pc, #348]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028ac:	4b55      	ldr	r3, [pc, #340]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80028b2:	4b54      	ldr	r3, [pc, #336]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028b8:	4b52      	ldr	r3, [pc, #328]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028be:	4b51      	ldr	r3, [pc, #324]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028ce:	4a4f      	ldr	r2, [pc, #316]	@ (8002a0c <MX_ADC1_Init+0x180>)
 80028d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80028d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028da:	2209      	movs	r2, #9
 80028dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028de:	4b49      	ldr	r3, [pc, #292]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028ec:	4845      	ldr	r0, [pc, #276]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80028ee:	f001 f9a7 	bl	8003c40 <HAL_ADC_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80028f8:	f000 fd8e 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002904:	2303      	movs	r3, #3
 8002906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	483d      	ldr	r0, [pc, #244]	@ (8002a04 <MX_ADC1_Init+0x178>)
 800290e:	f001 fbf9 	bl	8004104 <HAL_ADC_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002918:	f000 fd7e 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800291c:	2302      	movs	r3, #2
 800291e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002920:	2302      	movs	r3, #2
 8002922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	4619      	mov	r1, r3
 8002928:	4836      	ldr	r0, [pc, #216]	@ (8002a04 <MX_ADC1_Init+0x178>)
 800292a:	f001 fbeb 	bl	8004104 <HAL_ADC_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002934:	f000 fd70 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002938:	2303      	movs	r3, #3
 800293a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800293c:	2303      	movs	r3, #3
 800293e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	482f      	ldr	r0, [pc, #188]	@ (8002a04 <MX_ADC1_Init+0x178>)
 8002946:	f001 fbdd 	bl	8004104 <HAL_ADC_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002950:	f000 fd62 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002954:	2304      	movs	r3, #4
 8002956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002958:	2304      	movs	r3, #4
 800295a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800295c:	463b      	mov	r3, r7
 800295e:	4619      	mov	r1, r3
 8002960:	4828      	ldr	r0, [pc, #160]	@ (8002a04 <MX_ADC1_Init+0x178>)
 8002962:	f001 fbcf 	bl	8004104 <HAL_ADC_ConfigChannel>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800296c:	f000 fd54 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002970:	2305      	movs	r3, #5
 8002972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002974:	2305      	movs	r3, #5
 8002976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002978:	463b      	mov	r3, r7
 800297a:	4619      	mov	r1, r3
 800297c:	4821      	ldr	r0, [pc, #132]	@ (8002a04 <MX_ADC1_Init+0x178>)
 800297e:	f001 fbc1 	bl	8004104 <HAL_ADC_ConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002988:	f000 fd46 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800298c:	2306      	movs	r3, #6
 800298e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002990:	2306      	movs	r3, #6
 8002992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002994:	463b      	mov	r3, r7
 8002996:	4619      	mov	r1, r3
 8002998:	481a      	ldr	r0, [pc, #104]	@ (8002a04 <MX_ADC1_Init+0x178>)
 800299a:	f001 fbb3 	bl	8004104 <HAL_ADC_ConfigChannel>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80029a4:	f000 fd38 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80029a8:	2307      	movs	r3, #7
 80029aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80029ac:	2307      	movs	r3, #7
 80029ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029b0:	463b      	mov	r3, r7
 80029b2:	4619      	mov	r1, r3
 80029b4:	4813      	ldr	r0, [pc, #76]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80029b6:	f001 fba5 	bl	8004104 <HAL_ADC_ConfigChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80029c0:	f000 fd2a 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80029c4:	2308      	movs	r3, #8
 80029c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80029c8:	2308      	movs	r3, #8
 80029ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029cc:	463b      	mov	r3, r7
 80029ce:	4619      	mov	r1, r3
 80029d0:	480c      	ldr	r0, [pc, #48]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80029d2:	f001 fb97 	bl	8004104 <HAL_ADC_ConfigChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80029dc:	f000 fd1c 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80029e0:	2309      	movs	r3, #9
 80029e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80029e4:	2309      	movs	r3, #9
 80029e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029e8:	463b      	mov	r3, r7
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	@ (8002a04 <MX_ADC1_Init+0x178>)
 80029ee:	f001 fb89 	bl	8004104 <HAL_ADC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80029f8:	f000 fd0e 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000082c 	.word	0x2000082c
 8002a08:	40012000 	.word	0x40012000
 8002a0c:	0f000001 	.word	0x0f000001

08002a10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a14:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a16:	4a13      	ldr	r2, [pc, #76]	@ (8002a64 <MX_I2C1_Init+0x54>)
 8002a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a1c:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <MX_I2C1_Init+0x58>)
 8002a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a4c:	4804      	ldr	r0, [pc, #16]	@ (8002a60 <MX_I2C1_Init+0x50>)
 8002a4e:	f002 fd29 	bl	80054a4 <HAL_I2C_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a58:	f000 fcde 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200008d4 	.word	0x200008d4
 8002a64:	40005400 	.word	0x40005400
 8002a68:	00061a80 	.word	0x00061a80

08002a6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a72:	f107 0308 	add.w	r3, r7, #8
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a80:	463b      	mov	r3, r7
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a88:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b08 <MX_TIM1_Init+0x9c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002a9c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002aa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa2:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ab4:	4813      	ldr	r0, [pc, #76]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002ab6:	f007 ffa0 	bl	800a9fa <HAL_TIM_Base_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002ac0:	f000 fcaa 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ac4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480c      	ldr	r0, [pc, #48]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002ad2:	f008 faff 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002adc:	f000 fc9c 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ae8:	463b      	mov	r3, r7
 8002aea:	4619      	mov	r1, r3
 8002aec:	4805      	ldr	r0, [pc, #20]	@ (8002b04 <MX_TIM1_Init+0x98>)
 8002aee:	f008 feb9 	bl	800b864 <HAL_TIMEx_MasterConfigSynchronization>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002af8:	f000 fc8e 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200009e8 	.word	0x200009e8
 8002b08:	40010000 	.word	0x40010000

08002b0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	@ 0x38
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b3c:	4b32      	ldr	r3, [pc, #200]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b3e:	4a33      	ldr	r2, [pc, #204]	@ (8002c0c <MX_TIM3_Init+0x100>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8002b42:	4b31      	ldr	r3, [pc, #196]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b44:	220f      	movs	r2, #15
 8002b46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b50:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002b54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b2c      	ldr	r3, [pc, #176]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b62:	4829      	ldr	r0, [pc, #164]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b64:	f007 ff49 	bl	800a9fa <HAL_TIM_Base_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002b6e:	f000 fc53 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4822      	ldr	r0, [pc, #136]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b80:	f008 faa8 	bl	800b0d4 <HAL_TIM_ConfigClockSource>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b8a:	f000 fc45 	bl	8003418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b8e:	481e      	ldr	r0, [pc, #120]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002b90:	f007 ffe4 	bl	800ab5c <HAL_TIM_PWM_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b9a:	f000 fc3d 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	4619      	mov	r1, r3
 8002bac:	4816      	ldr	r0, [pc, #88]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002bae:	f008 fe59 	bl	800b864 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002bb8:	f000 fc2e 	bl	8003418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbc:	2360      	movs	r3, #96	@ 0x60
 8002bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	480d      	ldr	r0, [pc, #52]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002bd4:	f008 f9bc 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002bde:	f000 fc1b 	bl	8003418 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	2204      	movs	r2, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4807      	ldr	r0, [pc, #28]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002bea:	f008 f9b1 	bl	800af50 <HAL_TIM_PWM_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002bf4:	f000 fc10 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002bf8:	4803      	ldr	r0, [pc, #12]	@ (8002c08 <MX_TIM3_Init+0xfc>)
 8002bfa:	f000 fde1 	bl	80037c0 <HAL_TIM_MspPostInit>

}
 8002bfe:	bf00      	nop
 8002c00:	3738      	adds	r7, #56	@ 0x38
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000a30 	.word	0x20000a30
 8002c0c:	40000400 	.word	0x40000400

08002c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c14:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <MX_USART1_UART_Init+0x50>)
 8002c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c34:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c36:	220c      	movs	r2, #12
 8002c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c3a:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_USART1_UART_Init+0x4c>)
 8002c48:	f008 fe8e 	bl	800b968 <HAL_UART_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c52:	f000 fbe1 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000a78 	.word	0x20000a78
 8002c60:	40011000 	.word	0x40011000

08002c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <MX_DMA_Init+0x78>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	4a1a      	ldr	r2, [pc, #104]	@ (8002cdc <MX_DMA_Init+0x78>)
 8002c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7a:	4b18      	ldr	r3, [pc, #96]	@ (8002cdc <MX_DMA_Init+0x78>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c82:	607b      	str	r3, [r7, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <MX_DMA_Init+0x78>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a13      	ldr	r2, [pc, #76]	@ (8002cdc <MX_DMA_Init+0x78>)
 8002c90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <MX_DMA_Init+0x78>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	200b      	movs	r0, #11
 8002ca8:	f001 fdc1 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002cac:	200b      	movs	r0, #11
 8002cae:	f001 fdda 	bl	8004866 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	200c      	movs	r0, #12
 8002cb8:	f001 fdb9 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002cbc:	200c      	movs	r0, #12
 8002cbe:	f001 fdd2 	bl	8004866 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2038      	movs	r0, #56	@ 0x38
 8002cc8:	f001 fdb1 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ccc:	2038      	movs	r0, #56	@ 0x38
 8002cce:	f001 fdca 	bl	8004866 <HAL_NVIC_EnableIRQ>

}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	@ 0x28
 8002ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	4b66      	ldr	r3, [pc, #408]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a65      	ldr	r2, [pc, #404]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d06:	4b63      	ldr	r3, [pc, #396]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	4b5f      	ldr	r3, [pc, #380]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d22:	4b5c      	ldr	r3, [pc, #368]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	4b58      	ldr	r3, [pc, #352]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	4a57      	ldr	r2, [pc, #348]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3e:	4b55      	ldr	r3, [pc, #340]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	4a50      	ldr	r2, [pc, #320]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <MX_GPIO_Init+0x1b4>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002d66:	2200      	movs	r2, #0
 8002d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d6c:	484a      	ldr	r0, [pc, #296]	@ (8002e98 <MX_GPIO_Init+0x1b8>)
 8002d6e:	f002 fb4d 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002d78:	4848      	ldr	r0, [pc, #288]	@ (8002e9c <MX_GPIO_Init+0x1bc>)
 8002d7a:	f002 fb47 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2108      	movs	r1, #8
 8002d82:	4847      	ldr	r0, [pc, #284]	@ (8002ea0 <MX_GPIO_Init+0x1c0>)
 8002d84:	f002 fb42 	bl	800540c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002d88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	4619      	mov	r1, r3
 8002da0:	483d      	ldr	r0, [pc, #244]	@ (8002e98 <MX_GPIO_Init+0x1b8>)
 8002da2:	f002 f997 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002da6:	2301      	movs	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4838      	ldr	r0, [pc, #224]	@ (8002e9c <MX_GPIO_Init+0x1bc>)
 8002dba:	f002 f98b 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4833      	ldr	r0, [pc, #204]	@ (8002ea0 <MX_GPIO_Init+0x1c0>)
 8002dd2:	f002 f97f 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ddc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	4619      	mov	r1, r3
 8002dec:	482c      	ldr	r0, [pc, #176]	@ (8002ea0 <MX_GPIO_Init+0x1c0>)
 8002dee:	f002 f971 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002df2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e00:	2303      	movs	r3, #3
 8002e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e04:	2305      	movs	r3, #5
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e08:	f107 0314 	add.w	r3, r7, #20
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4824      	ldr	r0, [pc, #144]	@ (8002ea0 <MX_GPIO_Init+0x1c0>)
 8002e10:	f002 f960 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481c      	ldr	r0, [pc, #112]	@ (8002e9c <MX_GPIO_Init+0x1bc>)
 8002e2c:	f002 f952 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8002e30:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e36:	2301      	movs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4814      	ldr	r0, [pc, #80]	@ (8002e9c <MX_GPIO_Init+0x1bc>)
 8002e4a:	f002 f943 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8002e4e:	2308      	movs	r3, #8
 8002e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	4619      	mov	r1, r3
 8002e64:	480e      	ldr	r0, [pc, #56]	@ (8002ea0 <MX_GPIO_Init+0x1c0>)
 8002e66:	f002 f935 	bl	80050d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2017      	movs	r0, #23
 8002e70:	f001 fcdd 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e74:	2017      	movs	r0, #23
 8002e76:	f001 fcf6 	bl	8004866 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2028      	movs	r0, #40	@ 0x28
 8002e80:	f001 fcd5 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e84:	2028      	movs	r0, #40	@ 0x28
 8002e86:	f001 fcee 	bl	8004866 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e8a:	bf00      	nop
 8002e8c:	3728      	adds	r7, #40	@ 0x28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020800 	.word	0x40020800
 8002e9c:	40020000 	.word	0x40020000
 8002ea0:	40020400 	.word	0x40020400

08002ea4 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8002ea8:	4819      	ldr	r0, [pc, #100]	@ (8002f10 <Init_Timing+0x6c>)
 8002eaa:	f007 fdf5 	bl	800aa98 <HAL_TIM_Base_Start_IT>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8002eb4:	2309      	movs	r3, #9
 8002eb6:	4a17      	ldr	r2, [pc, #92]	@ (8002f14 <Init_Timing+0x70>)
 8002eb8:	21ee      	movs	r1, #238	@ 0xee
 8002eba:	4817      	ldr	r0, [pc, #92]	@ (8002f18 <Init_Timing+0x74>)
 8002ebc:	f7fe fef6 	bl	8001cac <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8002ec0:	4816      	ldr	r0, [pc, #88]	@ (8002f1c <Init_Timing+0x78>)
 8002ec2:	f007 fde9 	bl	800aa98 <HAL_TIM_Base_Start_IT>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002ecc:	230e      	movs	r3, #14
 8002ece:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <Init_Timing+0x7c>)
 8002ed0:	21ee      	movs	r1, #238	@ 0xee
 8002ed2:	4811      	ldr	r0, [pc, #68]	@ (8002f18 <Init_Timing+0x74>)
 8002ed4:	f7fe feea 	bl	8001cac <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4810      	ldr	r0, [pc, #64]	@ (8002f1c <Init_Timing+0x78>)
 8002edc:	f007 fe98 	bl	800ac10 <HAL_TIM_PWM_Start>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002ee6:	230e      	movs	r3, #14
 8002ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <Init_Timing+0x80>)
 8002eea:	21ee      	movs	r1, #238	@ 0xee
 8002eec:	480a      	ldr	r0, [pc, #40]	@ (8002f18 <Init_Timing+0x74>)
 8002eee:	f7fe fedd 	bl	8001cac <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	4809      	ldr	r0, [pc, #36]	@ (8002f1c <Init_Timing+0x78>)
 8002ef6:	f007 fe8b 	bl	800ac10 <HAL_TIM_PWM_Start>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d005      	beq.n	8002f0c <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8002f00:	230e      	movs	r3, #14
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <Init_Timing+0x84>)
 8002f04:	21ee      	movs	r1, #238	@ 0xee
 8002f06:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <Init_Timing+0x74>)
 8002f08:	f7fe fed0 	bl	8001cac <comm_sendCMD>
	  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	200009e8 	.word	0x200009e8
 8002f14:	08011280 	.word	0x08011280
 8002f18:	20001010 	.word	0x20001010
 8002f1c:	20000a30 	.word	0x20000a30
 8002f20:	0801128c 	.word	0x0801128c
 8002f24:	0801129c 	.word	0x0801129c
 8002f28:	080112ac 	.word	0x080112ac

08002f2c <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8002f30:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002f34:	2201      	movs	r2, #1
 8002f36:	21d0      	movs	r1, #208	@ 0xd0
 8002f38:	4811      	ldr	r0, [pc, #68]	@ (8002f80 <Init_MPU6050+0x54>)
 8002f3a:	f003 fb25 	bl	8006588 <HAL_I2C_IsDeviceReady>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d006      	beq.n	8002f52 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8002f44:	230d      	movs	r3, #13
 8002f46:	4a0f      	ldr	r2, [pc, #60]	@ (8002f84 <Init_MPU6050+0x58>)
 8002f48:	21ee      	movs	r1, #238	@ 0xee
 8002f4a:	480f      	ldr	r0, [pc, #60]	@ (8002f88 <Init_MPU6050+0x5c>)
 8002f4c:	f7fe feae 	bl	8001cac <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8002f50:	e013      	b.n	8002f7a <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 8002f52:	490e      	ldr	r1, [pc, #56]	@ (8002f8c <Init_MPU6050+0x60>)
 8002f54:	480e      	ldr	r0, [pc, #56]	@ (8002f90 <Init_MPU6050+0x64>)
 8002f56:	f7fd fc8b 	bl	8000870 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8002f5a:	480e      	ldr	r0, [pc, #56]	@ (8002f94 <Init_MPU6050+0x68>)
 8002f5c:	f7fd fc9e 	bl	800089c <MPU6050_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8002f66:	230c      	movs	r3, #12
 8002f68:	4a0b      	ldr	r2, [pc, #44]	@ (8002f98 <Init_MPU6050+0x6c>)
 8002f6a:	21ee      	movs	r1, #238	@ 0xee
 8002f6c:	4806      	ldr	r0, [pc, #24]	@ (8002f88 <Init_MPU6050+0x5c>)
 8002f6e:	f7fe fe9d 	bl	8001cac <comm_sendCMD>
}
 8002f72:	e002      	b.n	8002f7a <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8002f74:	4807      	ldr	r0, [pc, #28]	@ (8002f94 <Init_MPU6050+0x68>)
 8002f76:	f7fd fd43 	bl	8000a00 <MPU6050_Calibrate>
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200008d4 	.word	0x200008d4
 8002f84:	080112bc 	.word	0x080112bc
 8002f88:	20001010 	.word	0x20001010
 8002f8c:	08003239 	.word	0x08003239
 8002f90:	080031f9 	.word	0x080031f9
 8002f94:	20000b14 	.word	0x20000b14
 8002f98:	080112cc 	.word	0x080112cc

08002f9c <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <Init_Display+0x84>)
 8002fa4:	220a      	movs	r2, #10
 8002fa6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002faa:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <Init_Display+0x84>)
 8002fac:	220a      	movs	r2, #10
 8002fae:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8002fb2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2178      	movs	r1, #120	@ 0x78
 8002fba:	481a      	ldr	r0, [pc, #104]	@ (8003024 <Init_Display+0x88>)
 8002fbc:	f003 fae4 	bl	8006588 <HAL_I2C_IsDeviceReady>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8002fc6:	230a      	movs	r3, #10
 8002fc8:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <Init_Display+0x8c>)
 8002fca:	21ee      	movs	r1, #238	@ 0xee
 8002fcc:	4817      	ldr	r0, [pc, #92]	@ (800302c <Init_Display+0x90>)
 8002fce:	f7fe fe6d 	bl	8001cac <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8002fd2:	e022      	b.n	800301a <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002fd4:	4916      	ldr	r1, [pc, #88]	@ (8003030 <Init_Display+0x94>)
 8002fd6:	4817      	ldr	r0, [pc, #92]	@ (8003034 <Init_Display+0x98>)
 8002fd8:	f7fd fee4 	bl	8000da4 <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8002fdc:	f7fd fef8 	bl	8000dd0 <Display_Init>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002fe6:	2309      	movs	r3, #9
 8002fe8:	4a13      	ldr	r2, [pc, #76]	@ (8003038 <Init_Display+0x9c>)
 8002fea:	21ee      	movs	r1, #238	@ 0xee
 8002fec:	480f      	ldr	r0, [pc, #60]	@ (800302c <Init_Display+0x90>)
 8002fee:	f7fe fe5d 	bl	8001cac <comm_sendCMD>
}
 8002ff2:	e012      	b.n	800301a <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	2340      	movs	r3, #64	@ 0x40
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800303c <Init_Display+0xa0>)
 8003000:	2100      	movs	r1, #0
 8003002:	2000      	movs	r0, #0
 8003004:	f7fe f97a 	bl	80012fc <Display_DrawBitmap>
			Display.isInit = TRUE;
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <Init_Display+0x84>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 800300e:	f000 fde7 	bl	8003be0 <HAL_GetTick>
 8003012:	4603      	mov	r3, r0
 8003014:	4a02      	ldr	r2, [pc, #8]	@ (8003020 <Init_Display+0x84>)
 8003016:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	20000bd8 	.word	0x20000bd8
 8003024:	200008d4 	.word	0x200008d4
 8003028:	080112dc 	.word	0x080112dc
 800302c:	20001010 	.word	0x20001010
 8003030:	080031c5 	.word	0x080031c5
 8003034:	08003189 	.word	0x08003189
 8003038:	080112e8 	.word	0x080112e8
 800303c:	080114a4 	.word	0x080114a4

08003040 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1a      	ldr	r2, [pc, #104]	@ (80030b8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d123      	bne.n	800309a <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8003052:	2209      	movs	r2, #9
 8003054:	4919      	ldr	r1, [pc, #100]	@ (80030bc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003056:	481a      	ldr	r0, [pc, #104]	@ (80030c0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003058:	f000 ff46 	bl	8003ee8 <HAL_ADC_Start_DMA>
		is5ms--;
 800305c:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	3b01      	subs	r3, #1
 8003062:	b2da      	uxtb	r2, r3
 8003064:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003066:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8003068:	4b16      	ldr	r3, [pc, #88]	@ (80030c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d114      	bne.n	800309a <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8003070:	4b14      	ldr	r3, [pc, #80]	@ (80030c4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003072:	2214      	movs	r2, #20
 8003074:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8003076:	4b14      	ldr	r3, [pc, #80]	@ (80030c8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003078:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 8003080:	230e      	movs	r3, #14
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2301      	movs	r3, #1
 800308a:	223b      	movs	r2, #59	@ 0x3b
 800308c:	21d0      	movs	r1, #208	@ 0xd0
 800308e:	4810      	ldr	r0, [pc, #64]	@ (80030d0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003090:	f003 f8ea 	bl	8006268 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe f875 	bl	8001184 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0d      	ldr	r2, [pc, #52]	@ (80030d4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d104      	bne.n	80030ae <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 80030a4:	4a0c      	ldr	r2, [pc, #48]	@ (80030d8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80030a6:	7813      	ldrb	r3, [r2, #0]
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	7013      	strb	r3, [r2, #0]
	}
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	20000fec 	.word	0x20000fec
 80030c0:	2000082c 	.word	0x2000082c
 80030c4:	2000000a 	.word	0x2000000a
 80030c8:	20000b14 	.word	0x20000b14
 80030cc:	20000bc8 	.word	0x20000bc8
 80030d0:	200008d4 	.word	0x200008d4
 80030d4:	40000400 	.word	0x40000400
 80030d8:	20000ac0 	.word	0x20000ac0

080030dc <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e8:	2b78      	cmp	r3, #120	@ 0x78
 80030ea:	d107      	bne.n	80030fc <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 80030ec:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_I2C_MemTxCpltCallback+0x28>)
 80030ee:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f7fe f844 	bl	8001184 <Display_I2C_DMA_Ready>
		}
	}
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000b14 	.word	0x20000b14

08003108 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003114:	2bd0      	cmp	r3, #208	@ 0xd0
 8003116:	d105      	bne.n	8003124 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8003118:	4804      	ldr	r0, [pc, #16]	@ (800312c <HAL_I2C_MemRxCpltCallback+0x24>)
 800311a:	f7fd fd13 	bl	8000b44 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 800311e:	2001      	movs	r0, #1
 8003120:	f7fe f830 	bl	8001184 <Display_I2C_DMA_Ready>
	}
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	20000b14 	.word	0x20000b14

08003130 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8003138:	4903      	ldr	r1, [pc, #12]	@ (8003148 <HAL_ADC_ConvCpltCallback+0x18>)
 800313a:	4804      	ldr	r0, [pc, #16]	@ (800314c <HAL_ADC_ConvCpltCallback+0x1c>)
 800313c:	f7fd fa36 	bl	80005ac <ADC_Conversion_Cplt>
}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000ffe 	.word	0x20000ffe
 800314c:	20000fec 	.word	0x20000fec

08003150 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003160:	d102      	bne.n	8003168 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8003162:	4807      	ldr	r0, [pc, #28]	@ (8003180 <HAL_GPIO_EXTI_Callback+0x30>)
 8003164:	f7fe fb1e 	bl	80017a4 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800316e:	d102      	bne.n	8003176 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8003170:	4804      	ldr	r0, [pc, #16]	@ (8003184 <HAL_GPIO_EXTI_Callback+0x34>)
 8003172:	f7fe fb17 	bl	80017a4 <Encoder_Add_Pulse>
	}
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000afc 	.word	0x20000afc
 8003184:	20000b08 	.word	0x20000b08

08003188 <I2C_1_Abstract_Mem_DMA_Transmit>:
		HAL_UART_Receive_IT(&huart1, &ESP.AT_buffer[ESP.At_iWrite++], 1);
	}
}*/

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af02      	add	r7, sp, #8
 800318e:	60ba      	str	r2, [r7, #8]
 8003190:	461a      	mov	r2, r3
 8003192:	4603      	mov	r3, r0
 8003194:	81fb      	strh	r3, [r7, #14]
 8003196:	460b      	mov	r3, r1
 8003198:	737b      	strb	r3, [r7, #13]
 800319a:	4613      	mov	r3, r2
 800319c:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 800319e:	7b7b      	ldrb	r3, [r7, #13]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	89f9      	ldrh	r1, [r7, #14]
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2301      	movs	r3, #1
 80031ae:	4804      	ldr	r0, [pc, #16]	@ (80031c0 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 80031b0:	f002 fefc 	bl	8005fac <HAL_I2C_Mem_Write_DMA>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200008d4 	.word	0x200008d4

080031c4 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607b      	str	r3, [r7, #4]
 80031ce:	4603      	mov	r3, r0
 80031d0:	81fb      	strh	r3, [r7, #14]
 80031d2:	4613      	mov	r3, r2
 80031d4:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80031d6:	89ba      	ldrh	r2, [r7, #12]
 80031d8:	89f9      	ldrh	r1, [r7, #14]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4804      	ldr	r0, [pc, #16]	@ (80031f4 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80031e4:	f002 fab8 	bl	8005758 <HAL_I2C_Master_Transmit>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	200008d4 	.word	0x200008d4

080031f8 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af04      	add	r7, sp, #16
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	80fb      	strh	r3, [r7, #6]
 8003204:	460b      	mov	r3, r1
 8003206:	717b      	strb	r3, [r7, #5]
 8003208:	4613      	mov	r3, r2
 800320a:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 800320c:	797b      	ldrb	r3, [r7, #5]
 800320e:	b29a      	uxth	r2, r3
 8003210:	793b      	ldrb	r3, [r7, #4]
 8003212:	b298      	uxth	r0, r3
 8003214:	88f9      	ldrh	r1, [r7, #6]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	8a3b      	ldrh	r3, [r7, #16]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4603      	mov	r3, r0
 8003224:	4803      	ldr	r0, [pc, #12]	@ (8003234 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 8003226:	f002 fb95 	bl	8005954 <HAL_I2C_Mem_Write>
 800322a:	4603      	mov	r3, r0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200008d4 	.word	0x200008d4

08003238 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af04      	add	r7, sp, #16
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4603      	mov	r3, r0
 8003242:	80fb      	strh	r3, [r7, #6]
 8003244:	460b      	mov	r3, r1
 8003246:	717b      	strb	r3, [r7, #5]
 8003248:	4613      	mov	r3, r2
 800324a:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 800324c:	797b      	ldrb	r3, [r7, #5]
 800324e:	b29a      	uxth	r2, r3
 8003250:	793b      	ldrb	r3, [r7, #4]
 8003252:	b298      	uxth	r0, r3
 8003254:	88f9      	ldrh	r1, [r7, #6]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	8a3b      	ldrh	r3, [r7, #16]
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	4603      	mov	r3, r0
 8003264:	4803      	ldr	r0, [pc, #12]	@ (8003274 <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 8003266:	f002 fc6f 	bl	8005b48 <HAL_I2C_Mem_Read>
 800326a:	4603      	mov	r3, r0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	200008d4 	.word	0x200008d4

08003278 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 800327c:	2101      	movs	r1, #1
 800327e:	4803      	ldr	r0, [pc, #12]	@ (800328c <KEY_Read_Value+0x14>)
 8003280:	f002 f8ac 	bl	80053dc <HAL_GPIO_ReadPin>
 8003284:	4603      	mov	r3, r0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40020000 	.word	0x40020000

08003290 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8003298:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <writeOn_USB+0x70>)
 800329a:	78da      	ldrb	r2, [r3, #3]
 800329c:	4b18      	ldr	r3, [pc, #96]	@ (8003300 <writeOn_USB+0x70>)
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d909      	bls.n	80032b8 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 80032a4:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <writeOn_USB+0x70>)
 80032a6:	78da      	ldrb	r2, [r3, #3]
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <writeOn_USB+0x70>)
 80032aa:	789b      	ldrb	r3, [r3, #2]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b13      	ldr	r3, [pc, #76]	@ (8003300 <writeOn_USB+0x70>)
 80032b2:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 80032b6:	e006      	b.n	80032c6 <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 80032b8:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <writeOn_USB+0x70>)
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	425b      	negs	r3, r3
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <writeOn_USB+0x70>)
 80032c2:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 80032c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003300 <writeOn_USB+0x70>)
 80032c8:	789b      	ldrb	r3, [r3, #2]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003300 <writeOn_USB+0x70>)
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003300 <writeOn_USB+0x70>)
 80032d4:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f00c fe96 	bl	801000c <CDC_Transmit_FS>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <writeOn_USB+0x70>)
 80032e8:	789a      	ldrb	r2, [r3, #2]
 80032ea:	4b05      	ldr	r3, [pc, #20]	@ (8003300 <writeOn_USB+0x70>)
 80032ec:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80032f0:	4413      	add	r3, r2
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	4b02      	ldr	r3, [pc, #8]	@ (8003300 <writeOn_USB+0x70>)
 80032f6:	709a      	strb	r2, [r3, #2]
	}
}
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20001010 	.word	0x20001010

08003304 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01a      	beq.n	800334a <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8003314:	2300      	movs	r3, #0
 8003316:	81fb      	strh	r3, [r7, #14]
 8003318:	e013      	b.n	8003342 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 800331a:	89fb      	ldrh	r3, [r7, #14]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	441a      	add	r2, r3
 8003320:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <dataRxOn_USB+0x54>)
 8003322:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8003326:	1c59      	adds	r1, r3, #1
 8003328:	b2c8      	uxtb	r0, r1
 800332a:	490b      	ldr	r1, [pc, #44]	@ (8003358 <dataRxOn_USB+0x54>)
 800332c:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8003330:	4619      	mov	r1, r3
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <dataRxOn_USB+0x54>)
 8003336:	440b      	add	r3, r1
 8003338:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 800333c:	89fb      	ldrh	r3, [r7, #14]
 800333e:	3301      	adds	r3, #1
 8003340:	81fb      	strh	r3, [r7, #14]
 8003342:	89fb      	ldrh	r3, [r7, #14]
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d8e7      	bhi.n	800331a <dataRxOn_USB+0x16>
		}
	}
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20001010 	.word	0x20001010

0800335c <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	460a      	mov	r2, r1
 8003366:	71fb      	strb	r3, [r7, #7]
 8003368:	4613      	mov	r3, r2
 800336a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	461a      	mov	r2, r3
 8003370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003374:	4806      	ldr	r0, [pc, #24]	@ (8003390 <Motor_Left_SetPins+0x34>)
 8003376:	f002 f849 	bl	800540c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 800337a:	79bb      	ldrb	r3, [r7, #6]
 800337c:	461a      	mov	r2, r3
 800337e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003382:	4803      	ldr	r0, [pc, #12]	@ (8003390 <Motor_Left_SetPins+0x34>)
 8003384:	f002 f842 	bl	800540c <HAL_GPIO_WritePin>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020000 	.word	0x40020000

08003394 <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	460a      	mov	r2, r1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	461a      	mov	r2, r3
 80033a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ac:	4806      	ldr	r0, [pc, #24]	@ (80033c8 <Motor_Right_SetPins+0x34>)
 80033ae:	f002 f82d 	bl	800540c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 80033b2:	79bb      	ldrb	r3, [r7, #6]
 80033b4:	461a      	mov	r2, r3
 80033b6:	2108      	movs	r1, #8
 80033b8:	4804      	ldr	r0, [pc, #16]	@ (80033cc <Motor_Right_SetPins+0x38>)
 80033ba:	f002 f827 	bl	800540c <HAL_GPIO_WritePin>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400

080033d0 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80033da:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <Motor_Left_SetPWM+0x20>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000a30 	.word	0x20000a30

080033f4 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <Motor_Right_SetPWM+0x20>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000a30 	.word	0x20000a30

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <Error_Handler+0x8>

08003424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	4b13      	ldr	r3, [pc, #76]	@ (800347c <HAL_MspInit+0x58>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	4a12      	ldr	r2, [pc, #72]	@ (800347c <HAL_MspInit+0x58>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003438:	6453      	str	r3, [r2, #68]	@ 0x44
 800343a:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_MspInit+0x58>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <HAL_MspInit+0x58>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	4a0b      	ldr	r2, [pc, #44]	@ (800347c <HAL_MspInit+0x58>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003454:	6413      	str	r3, [r2, #64]	@ 0x40
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_MspInit+0x58>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	2100      	movs	r1, #0
 8003466:	2051      	movs	r0, #81	@ 0x51
 8003468:	f001 f9e1 	bl	800482e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800346c:	2051      	movs	r0, #81	@ 0x51
 800346e:	f001 f9fa 	bl	8004866 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800

08003480 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	@ 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a40      	ldr	r2, [pc, #256]	@ (80035a0 <HAL_ADC_MspInit+0x120>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d179      	bne.n	8003596 <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b3f      	ldr	r3, [pc, #252]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	4a3e      	ldr	r2, [pc, #248]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034b2:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c6:	4a37      	ldr	r2, [pc, #220]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ce:	4b35      	ldr	r3, [pc, #212]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	4a30      	ldr	r2, [pc, #192]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ea:	4b2e      	ldr	r3, [pc, #184]	@ (80035a4 <HAL_ADC_MspInit+0x124>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 80034f6:	23fe      	movs	r3, #254	@ 0xfe
 80034f8:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034fa:	2303      	movs	r3, #3
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	4619      	mov	r1, r3
 8003508:	4827      	ldr	r0, [pc, #156]	@ (80035a8 <HAL_ADC_MspInit+0x128>)
 800350a:	f001 fde3 	bl	80050d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 800350e:	2303      	movs	r3, #3
 8003510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003512:	2303      	movs	r3, #3
 8003514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4822      	ldr	r0, [pc, #136]	@ (80035ac <HAL_ADC_MspInit+0x12c>)
 8003522:	f001 fdd7 	bl	80050d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003526:	4b22      	ldr	r3, [pc, #136]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003528:	4a22      	ldr	r2, [pc, #136]	@ (80035b4 <HAL_ADC_MspInit+0x134>)
 800352a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800352c:	4b20      	ldr	r3, [pc, #128]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003532:	4b1f      	ldr	r3, [pc, #124]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003538:	4b1d      	ldr	r3, [pc, #116]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800353e:	4b1c      	ldr	r3, [pc, #112]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003544:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003546:	4b1a      	ldr	r3, [pc, #104]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003548:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800354c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800354e:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003550:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003556:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003558:	2200      	movs	r2, #0
 800355a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 800355e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003562:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003564:	4b12      	ldr	r3, [pc, #72]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800356a:	4811      	ldr	r0, [pc, #68]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 800356c:	f001 f996 	bl	800489c <HAL_DMA_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003576:	f7ff ff4f 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a0c      	ldr	r2, [pc, #48]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003580:	4a0b      	ldr	r2, [pc, #44]	@ (80035b0 <HAL_ADC_MspInit+0x130>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	2012      	movs	r0, #18
 800358c:	f001 f94f 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003590:	2012      	movs	r0, #18
 8003592:	f001 f968 	bl	8004866 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003596:	bf00      	nop
 8003598:	3728      	adds	r7, #40	@ 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40012000 	.word	0x40012000
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	20000874 	.word	0x20000874
 80035b4:	40026410 	.word	0x40026410

080035b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a50      	ldr	r2, [pc, #320]	@ (8003718 <HAL_I2C_MspInit+0x160>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f040 8099 	bne.w	800370e <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	4b4e      	ldr	r3, [pc, #312]	@ (800371c <HAL_I2C_MspInit+0x164>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	4a4d      	ldr	r2, [pc, #308]	@ (800371c <HAL_I2C_MspInit+0x164>)
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ec:	4b4b      	ldr	r3, [pc, #300]	@ (800371c <HAL_I2C_MspInit+0x164>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80035f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035fe:	2312      	movs	r3, #18
 8003600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003606:	2303      	movs	r3, #3
 8003608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800360a:	2304      	movs	r3, #4
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	4842      	ldr	r0, [pc, #264]	@ (8003720 <HAL_I2C_MspInit+0x168>)
 8003616:	f001 fd5d 	bl	80050d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b3f      	ldr	r3, [pc, #252]	@ (800371c <HAL_I2C_MspInit+0x164>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	4a3e      	ldr	r2, [pc, #248]	@ (800371c <HAL_I2C_MspInit+0x164>)
 8003624:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003628:	6413      	str	r3, [r2, #64]	@ 0x40
 800362a:	4b3c      	ldr	r3, [pc, #240]	@ (800371c <HAL_I2C_MspInit+0x164>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003638:	4a3b      	ldr	r2, [pc, #236]	@ (8003728 <HAL_I2C_MspInit+0x170>)
 800363a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800363c:	4b39      	ldr	r3, [pc, #228]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003644:	2240      	movs	r2, #64	@ 0x40
 8003646:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003648:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 800364a:	2200      	movs	r2, #0
 800364c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800364e:	4b35      	ldr	r3, [pc, #212]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003654:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003656:	4b33      	ldr	r3, [pc, #204]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003658:	2200      	movs	r2, #0
 800365a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800365c:	4b31      	ldr	r3, [pc, #196]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 800365e:	2200      	movs	r2, #0
 8003660:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003662:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003664:	2200      	movs	r2, #0
 8003666:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003668:	4b2e      	ldr	r3, [pc, #184]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 800366a:	2200      	movs	r2, #0
 800366c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366e:	4b2d      	ldr	r3, [pc, #180]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003670:	2200      	movs	r2, #0
 8003672:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003674:	482b      	ldr	r0, [pc, #172]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003676:	f001 f911 	bl	800489c <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003680:	f7ff feca 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a27      	ldr	r2, [pc, #156]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34
 800368a:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_I2C_MspInit+0x16c>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003690:	4b26      	ldr	r3, [pc, #152]	@ (800372c <HAL_I2C_MspInit+0x174>)
 8003692:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_I2C_MspInit+0x178>)
 8003694:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003696:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_I2C_MspInit+0x174>)
 8003698:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800369c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800369e:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a4:	4b21      	ldr	r3, [pc, #132]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036aa:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036b0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036b2:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b8:	4b1c      	ldr	r3, [pc, #112]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036c4:	4b19      	ldr	r3, [pc, #100]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036c6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036cc:	4b17      	ldr	r3, [pc, #92]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80036d2:	4816      	ldr	r0, [pc, #88]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036d4:	f001 f8e2 	bl	800489c <HAL_DMA_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80036de:	f7ff fe9b 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a11      	ldr	r2, [pc, #68]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80036e8:	4a10      	ldr	r2, [pc, #64]	@ (800372c <HAL_I2C_MspInit+0x174>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	201f      	movs	r0, #31
 80036f4:	f001 f89b 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036f8:	201f      	movs	r0, #31
 80036fa:	f001 f8b4 	bl	8004866 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2020      	movs	r0, #32
 8003704:	f001 f893 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003708:	2020      	movs	r0, #32
 800370a:	f001 f8ac 	bl	8004866 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800370e:	bf00      	nop
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40005400 	.word	0x40005400
 800371c:	40023800 	.word	0x40023800
 8003720:	40020400 	.word	0x40020400
 8003724:	20000928 	.word	0x20000928
 8003728:	40026028 	.word	0x40026028
 800372c:	20000988 	.word	0x20000988
 8003730:	40026010 	.word	0x40026010

08003734 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <HAL_TIM_Base_MspInit+0x80>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d116      	bne.n	8003774 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <HAL_TIM_Base_MspInit+0x84>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <HAL_TIM_Base_MspInit+0x84>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6453      	str	r3, [r2, #68]	@ 0x44
 8003756:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <HAL_TIM_Base_MspInit+0x84>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	2019      	movs	r0, #25
 8003768:	f001 f861 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800376c:	2019      	movs	r0, #25
 800376e:	f001 f87a 	bl	8004866 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003772:	e01a      	b.n	80037aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a10      	ldr	r2, [pc, #64]	@ (80037bc <HAL_TIM_Base_MspInit+0x88>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d115      	bne.n	80037aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <HAL_TIM_Base_MspInit+0x84>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	4a0c      	ldr	r2, [pc, #48]	@ (80037b8 <HAL_TIM_Base_MspInit+0x84>)
 8003788:	f043 0302 	orr.w	r3, r3, #2
 800378c:	6413      	str	r3, [r2, #64]	@ 0x40
 800378e:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_TIM_Base_MspInit+0x84>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800379a:	2200      	movs	r2, #0
 800379c:	2100      	movs	r1, #0
 800379e:	201d      	movs	r0, #29
 80037a0:	f001 f845 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037a4:	201d      	movs	r0, #29
 80037a6:	f001 f85e 	bl	8004866 <HAL_NVIC_EnableIRQ>
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40000400 	.word	0x40000400

080037c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b088      	sub	sp, #32
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <HAL_TIM_MspPostInit+0x68>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d11d      	bne.n	800381e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	4b11      	ldr	r3, [pc, #68]	@ (800382c <HAL_TIM_MspPostInit+0x6c>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	4a10      	ldr	r2, [pc, #64]	@ (800382c <HAL_TIM_MspPostInit+0x6c>)
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f2:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <HAL_TIM_MspPostInit+0x6c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 80037fe:	2330      	movs	r3, #48	@ 0x30
 8003800:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800380e:	2302      	movs	r3, #2
 8003810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	4619      	mov	r1, r3
 8003818:	4805      	ldr	r0, [pc, #20]	@ (8003830 <HAL_TIM_MspPostInit+0x70>)
 800381a:	f001 fc5b 	bl	80050d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800381e:	bf00      	nop
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40000400 	.word	0x40000400
 800382c:	40023800 	.word	0x40023800
 8003830:	40020400 	.word	0x40020400

08003834 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	@ 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 0314 	add.w	r3, r7, #20
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_UART_MspInit+0x94>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d133      	bne.n	80038be <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	4b1c      	ldr	r3, [pc, #112]	@ (80038cc <HAL_UART_MspInit+0x98>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <HAL_UART_MspInit+0x98>)
 8003860:	f043 0310 	orr.w	r3, r3, #16
 8003864:	6453      	str	r3, [r2, #68]	@ 0x44
 8003866:	4b19      	ldr	r3, [pc, #100]	@ (80038cc <HAL_UART_MspInit+0x98>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_UART_MspInit+0x98>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4a14      	ldr	r2, [pc, #80]	@ (80038cc <HAL_UART_MspInit+0x98>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	6313      	str	r3, [r2, #48]	@ 0x30
 8003882:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_UART_MspInit+0x98>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 800388e:	23c0      	movs	r3, #192	@ 0xc0
 8003890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389a:	2303      	movs	r3, #3
 800389c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800389e:	2307      	movs	r3, #7
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a2:	f107 0314 	add.w	r3, r7, #20
 80038a6:	4619      	mov	r1, r3
 80038a8:	4809      	ldr	r0, [pc, #36]	@ (80038d0 <HAL_UART_MspInit+0x9c>)
 80038aa:	f001 fc13 	bl	80050d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2100      	movs	r1, #0
 80038b2:	2025      	movs	r0, #37	@ 0x25
 80038b4:	f000 ffbb 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038b8:	2025      	movs	r0, #37	@ 0x25
 80038ba:	f000 ffd4 	bl	8004866 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80038be:	bf00      	nop
 80038c0:	3728      	adds	r7, #40	@ 0x28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40011000 	.word	0x40011000
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020400 	.word	0x40020400

080038d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80038d8:	f007 f874 	bl	800a9c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <NMI_Handler+0x8>

080038e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <HardFault_Handler+0x4>

080038e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <MemManage_Handler+0x4>

080038f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <BusFault_Handler+0x4>

080038f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <UsageFault_Handler+0x4>

08003900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800392e:	f000 f943 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800393c:	4802      	ldr	r0, [pc, #8]	@ (8003948 <DMA1_Stream0_IRQHandler+0x10>)
 800393e:	f001 f945 	bl	8004bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000988 	.word	0x20000988

0800394c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003950:	4802      	ldr	r0, [pc, #8]	@ (800395c <DMA1_Stream1_IRQHandler+0x10>)
 8003952:	f001 f93b 	bl	8004bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20000928 	.word	0x20000928

08003960 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003964:	4802      	ldr	r0, [pc, #8]	@ (8003970 <ADC_IRQHandler+0x10>)
 8003966:	f000 f9ae 	bl	8003cc6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	2000082c 	.word	0x2000082c

08003974 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8003978:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800397c:	f001 fd7a 	bl	8005474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}

08003984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003988:	4802      	ldr	r0, [pc, #8]	@ (8003994 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800398a:	f007 f9f1 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200009e8 	.word	0x200009e8

08003998 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800399c:	4802      	ldr	r0, [pc, #8]	@ (80039a8 <TIM3_IRQHandler+0x10>)
 800399e:	f007 f9e7 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000a30 	.word	0x20000a30

080039ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80039b0:	4802      	ldr	r0, [pc, #8]	@ (80039bc <I2C1_EV_IRQHandler+0x10>)
 80039b2:	f002 ff17 	bl	80067e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200008d4 	.word	0x200008d4

080039c0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80039c4:	4802      	ldr	r0, [pc, #8]	@ (80039d0 <I2C1_ER_IRQHandler+0x10>)
 80039c6:	f003 f87e 	bl	8006ac6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200008d4 	.word	0x200008d4

080039d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <USART1_IRQHandler+0x10>)
 80039da:	f008 f815 	bl	800ba08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000a78 	.word	0x20000a78

080039e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 80039ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80039f0:	f001 fd40 	bl	8005474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039fc:	4802      	ldr	r0, [pc, #8]	@ (8003a08 <DMA2_Stream0_IRQHandler+0x10>)
 80039fe:	f001 f8e5 	bl	8004bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000874 	.word	0x20000874

08003a0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a10:	4802      	ldr	r0, [pc, #8]	@ (8003a1c <OTG_FS_IRQHandler+0x10>)
 8003a12:	f005 fa64 	bl	8008ede <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20001b34 	.word	0x20001b34

08003a20 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a38:	4a14      	ldr	r2, [pc, #80]	@ (8003a8c <_sbrk+0x5c>)
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <_sbrk+0x60>)
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a44:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d102      	bne.n	8003a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <_sbrk+0x64>)
 8003a4e:	4a12      	ldr	r2, [pc, #72]	@ (8003a98 <_sbrk+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <_sbrk+0x64>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d207      	bcs.n	8003a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a60:	f00c ff60 	bl	8010924 <__errno>
 8003a64:	4603      	mov	r3, r0
 8003a66:	220c      	movs	r2, #12
 8003a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	e009      	b.n	8003a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <_sbrk+0x64>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a76:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	4a05      	ldr	r2, [pc, #20]	@ (8003a94 <_sbrk+0x64>)
 8003a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20020000 	.word	0x20020000
 8003a90:	00000400 	.word	0x00000400
 8003a94:	20001248 	.word	0x20001248
 8003a98:	20002380 	.word	0x20002380

08003a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <SystemInit+0x20>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa6:	4a05      	ldr	r2, [pc, #20]	@ (8003abc <SystemInit+0x20>)
 8003aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ab0:	bf00      	nop
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003af8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ac4:	f7ff ffea 	bl	8003a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ac8:	480c      	ldr	r0, [pc, #48]	@ (8003afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003aca:	490d      	ldr	r1, [pc, #52]	@ (8003b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003acc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad0:	e002      	b.n	8003ad8 <LoopCopyDataInit>

08003ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad6:	3304      	adds	r3, #4

08003ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003adc:	d3f9      	bcc.n	8003ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ade:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8003b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae4:	e001      	b.n	8003aea <LoopFillZerobss>

08003ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae8:	3204      	adds	r2, #4

08003aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aec:	d3fb      	bcc.n	8003ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aee:	f00c ff1f 	bl	8010930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fe fdc3 	bl	800267c <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003b04:	08012474 	.word	0x08012474
  ldr r2, =_sbss
 8003b08:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003b0c:	20002380 	.word	0x20002380

08003b10 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <DMA1_Stream2_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b18:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b54 <HAL_Init+0x40>)
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	@ (8003b54 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <HAL_Init+0x40>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <HAL_Init+0x40>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f000 fe6b 	bl	8004818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	200f      	movs	r0, #15
 8003b44:	f000 f808 	bl	8003b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fc6c 	bl	8003424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <HAL_InitTick+0x54>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_InitTick+0x58>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fe83 	bl	8004882 <HAL_SYSTICK_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00e      	b.n	8003ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d80a      	bhi.n	8003ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 fe4b 	bl	800482e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b98:	4a06      	ldr	r2, [pc, #24]	@ (8003bb4 <HAL_InitTick+0x5c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000010 	.word	0x20000010
 8003bb0:	20000018 	.word	0x20000018
 8003bb4:	20000014 	.word	0x20000014

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000018 	.word	0x20000018
 8003bdc:	2000124c 	.word	0x2000124c

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	2000124c 	.word	0x2000124c

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff ffee 	bl	8003be0 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_Delay+0x44>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000018 	.word	0x20000018

08003c40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e033      	b.n	8003cbe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fc0e 	bl	8003480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d118      	bne.n	8003cb0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c86:	f023 0302 	bic.w	r3, r3, #2
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fb68 	bl	8004368 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f023 0303 	bic.w	r3, r3, #3
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cae:	e001      	b.n	8003cb4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d049      	beq.n	8003d90 <HAL_ADC_IRQHandler+0xca>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d046      	beq.n	8003d90 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d12b      	bne.n	8003d80 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d127      	bne.n	8003d80 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d006      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d119      	bne.n	8003d80 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0220 	bic.w	r2, r2, #32
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff f9d5 	bl	8003130 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f06f 0212 	mvn.w	r2, #18
 8003d8e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d057      	beq.n	8003e56 <HAL_ADC_IRQHandler+0x190>
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d054      	beq.n	8003e56 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d139      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d006      	beq.n	8003dee <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d12b      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d124      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11d      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d119      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e20:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d105      	bne.n	8003e46 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fc0c 	bl	8004664 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 020c 	mvn.w	r2, #12
 8003e54:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e64:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d017      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x1d6>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d014      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10d      	bne.n	8003e9c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e84:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f925 	bl	80040dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0201 	mvn.w	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003eaa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d015      	beq.n	8003ede <HAL_ADC_IRQHandler+0x218>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d012      	beq.n	8003ede <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	f043 0202 	orr.w	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0220 	mvn.w	r2, #32
 8003ecc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f90e 	bl	80040f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0220 	mvn.w	r2, #32
 8003edc:	601a      	str	r2, [r3, #0]
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_ADC_Start_DMA+0x1e>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e0ce      	b.n	80040a4 <HAL_ADC_Start_DMA+0x1bc>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d018      	beq.n	8003f4e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80040ac <HAL_ADC_Start_DMA+0x1c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5f      	ldr	r2, [pc, #380]	@ (80040b0 <HAL_ADC_Start_DMA+0x1c8>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0c9a      	lsrs	r2, r3, #18
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f40:	e002      	b.n	8003f48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f9      	bne.n	8003f42 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5c:	d107      	bne.n	8003f6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f6c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	f040 8086 	bne.w	800408a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003fa8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d106      	bne.n	8003fcc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f023 0206 	bic.w	r2, r3, #6
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fca:	e002      	b.n	8003fd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fda:	4b36      	ldr	r3, [pc, #216]	@ (80040b4 <HAL_ADC_Start_DMA+0x1cc>)
 8003fdc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	4a35      	ldr	r2, [pc, #212]	@ (80040b8 <HAL_ADC_Start_DMA+0x1d0>)
 8003fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fea:	4a34      	ldr	r2, [pc, #208]	@ (80040bc <HAL_ADC_Start_DMA+0x1d4>)
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	4a33      	ldr	r2, [pc, #204]	@ (80040c0 <HAL_ADC_Start_DMA+0x1d8>)
 8003ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800400e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800401e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	334c      	adds	r3, #76	@ 0x4c
 800402a:	4619      	mov	r1, r3
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f000 fce2 	bl	80049f8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10f      	bne.n	8004060 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d129      	bne.n	80040a2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	e020      	b.n	80040a2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a17      	ldr	r2, [pc, #92]	@ (80040c4 <HAL_ADC_Start_DMA+0x1dc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d11b      	bne.n	80040a2 <HAL_ADC_Start_DMA+0x1ba>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d114      	bne.n	80040a2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	e00b      	b.n	80040a2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f043 0210 	orr.w	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f043 0201 	orr.w	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000010 	.word	0x20000010
 80040b0:	431bde83 	.word	0x431bde83
 80040b4:	40012300 	.word	0x40012300
 80040b8:	08004561 	.word	0x08004561
 80040bc:	0800461b 	.word	0x0800461b
 80040c0:	08004637 	.word	0x08004637
 80040c4:	40012000 	.word	0x40012000

080040c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x1c>
 800411c:	2302      	movs	r3, #2
 800411e:	e113      	b.n	8004348 <HAL_ADC_ConfigChannel+0x244>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b09      	cmp	r3, #9
 800412e:	d925      	bls.n	800417c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68d9      	ldr	r1, [r3, #12]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	3b1e      	subs	r3, #30
 8004146:	2207      	movs	r2, #7
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43da      	mvns	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	400a      	ands	r2, r1
 8004154:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68d9      	ldr	r1, [r3, #12]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	4618      	mov	r0, r3
 8004168:	4603      	mov	r3, r0
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4403      	add	r3, r0
 800416e:	3b1e      	subs	r3, #30
 8004170:	409a      	lsls	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	e022      	b.n	80041c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6919      	ldr	r1, [r3, #16]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	2207      	movs	r2, #7
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	43da      	mvns	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	400a      	ands	r2, r1
 800419e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6919      	ldr	r1, [r3, #16]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4618      	mov	r0, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4403      	add	r3, r0
 80041b8:	409a      	lsls	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d824      	bhi.n	8004214 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b05      	subs	r3, #5
 80041dc:	221f      	movs	r2, #31
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	400a      	ands	r2, r1
 80041ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	3b05      	subs	r3, #5
 8004206:	fa00 f203 	lsl.w	r2, r0, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34
 8004212:	e04c      	b.n	80042ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d824      	bhi.n	8004266 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	3b23      	subs	r3, #35	@ 0x23
 800422e:	221f      	movs	r2, #31
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43da      	mvns	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	400a      	ands	r2, r1
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	4618      	mov	r0, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	3b23      	subs	r3, #35	@ 0x23
 8004258:	fa00 f203 	lsl.w	r2, r0, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
 8004264:	e023      	b.n	80042ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	3b41      	subs	r3, #65	@ 0x41
 8004278:	221f      	movs	r2, #31
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	400a      	ands	r2, r1
 8004286:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4618      	mov	r0, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	3b41      	subs	r3, #65	@ 0x41
 80042a2:	fa00 f203 	lsl.w	r2, r0, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042ae:	4b29      	ldr	r3, [pc, #164]	@ (8004354 <HAL_ADC_ConfigChannel+0x250>)
 80042b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a28      	ldr	r2, [pc, #160]	@ (8004358 <HAL_ADC_ConfigChannel+0x254>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10f      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x1d8>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b12      	cmp	r3, #18
 80042c2:	d10b      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004358 <HAL_ADC_ConfigChannel+0x254>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d12b      	bne.n	800433e <HAL_ADC_ConfigChannel+0x23a>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	@ (800435c <HAL_ADC_ConfigChannel+0x258>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <HAL_ADC_ConfigChannel+0x1f4>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b11      	cmp	r3, #17
 80042f6:	d122      	bne.n	800433e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a11      	ldr	r2, [pc, #68]	@ (800435c <HAL_ADC_ConfigChannel+0x258>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d111      	bne.n	800433e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800431a:	4b11      	ldr	r3, [pc, #68]	@ (8004360 <HAL_ADC_ConfigChannel+0x25c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_ADC_ConfigChannel+0x260>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	0c9a      	lsrs	r2, r3, #18
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004330:	e002      	b.n	8004338 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3b01      	subs	r3, #1
 8004336:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f9      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40012300 	.word	0x40012300
 8004358:	40012000 	.word	0x40012000
 800435c:	10000012 	.word	0x10000012
 8004360:	20000010 	.word	0x20000010
 8004364:	431bde83 	.word	0x431bde83

08004368 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004370:	4b79      	ldr	r3, [pc, #484]	@ (8004558 <ADC_Init+0x1f0>)
 8004372:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800439c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	021a      	lsls	r2, r3, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80043c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6899      	ldr	r1, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fa:	4a58      	ldr	r2, [pc, #352]	@ (800455c <ADC_Init+0x1f4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800440e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6899      	ldr	r1, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004430:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6899      	ldr	r1, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	e00f      	b.n	8004466 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004464:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0202 	bic.w	r2, r2, #2
 8004474:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7e1b      	ldrb	r3, [r3, #24]
 8004480:	005a      	lsls	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01b      	beq.n	80044cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80044b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6859      	ldr	r1, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	3b01      	subs	r3, #1
 80044c0:	035a      	lsls	r2, r3, #13
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	e007      	b.n	80044dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80044ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	051a      	lsls	r2, r3, #20
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004510:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6899      	ldr	r1, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800451e:	025a      	lsls	r2, r3, #9
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6899      	ldr	r1, [r3, #8]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	029a      	lsls	r2, r3, #10
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40012300 	.word	0x40012300
 800455c:	0f000001 	.word	0x0f000001

08004560 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d13c      	bne.n	80045f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d12b      	bne.n	80045ec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004598:	2b00      	cmp	r3, #0
 800459a:	d127      	bne.n	80045ec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d119      	bne.n	80045ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0220 	bic.w	r2, r2, #32
 80045c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d105      	bne.n	80045ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7fe fd9f 	bl	8003130 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045f2:	e00e      	b.n	8004612 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff fd75 	bl	80040f0 <HAL_ADC_ErrorCallback>
}
 8004606:	e004      	b.n	8004612 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7ff fd4d 	bl	80040c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2240      	movs	r2, #64	@ 0x40
 8004648:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fd4a 	bl	80040f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004688:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046aa:	4a04      	ldr	r2, [pc, #16]	@ (80046bc <__NVIC_SetPriorityGrouping+0x44>)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	60d3      	str	r3, [r2, #12]
}
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <__NVIC_GetPriorityGrouping+0x18>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	0a1b      	lsrs	r3, r3, #8
 80046ca:	f003 0307 	and.w	r3, r3, #7
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db0b      	blt.n	8004706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4907      	ldr	r1, [pc, #28]	@ (8004714 <__NVIC_EnableIRQ+0x38>)
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2001      	movs	r0, #1
 80046fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	e000e100 	.word	0xe000e100

08004718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004728:	2b00      	cmp	r3, #0
 800472a:	db0a      	blt.n	8004742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	b2da      	uxtb	r2, r3
 8004730:	490c      	ldr	r1, [pc, #48]	@ (8004764 <__NVIC_SetPriority+0x4c>)
 8004732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	440b      	add	r3, r1
 800473c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004740:	e00a      	b.n	8004758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	b2da      	uxtb	r2, r3
 8004746:	4908      	ldr	r1, [pc, #32]	@ (8004768 <__NVIC_SetPriority+0x50>)
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	f003 030f 	and.w	r3, r3, #15
 800474e:	3b04      	subs	r3, #4
 8004750:	0112      	lsls	r2, r2, #4
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	440b      	add	r3, r1
 8004756:	761a      	strb	r2, [r3, #24]
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000e100 	.word	0xe000e100
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800476c:	b480      	push	{r7}
 800476e:	b089      	sub	sp, #36	@ 0x24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f1c3 0307 	rsb	r3, r3, #7
 8004786:	2b04      	cmp	r3, #4
 8004788:	bf28      	it	cs
 800478a:	2304      	movcs	r3, #4
 800478c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3304      	adds	r3, #4
 8004792:	2b06      	cmp	r3, #6
 8004794:	d902      	bls.n	800479c <NVIC_EncodePriority+0x30>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	3b03      	subs	r3, #3
 800479a:	e000      	b.n	800479e <NVIC_EncodePriority+0x32>
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a0:	f04f 32ff 	mov.w	r2, #4294967295
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	43da      	mvns	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	401a      	ands	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047b4:	f04f 31ff 	mov.w	r1, #4294967295
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	43d9      	mvns	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c4:	4313      	orrs	r3, r2
         );
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3724      	adds	r7, #36	@ 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047e4:	d301      	bcc.n	80047ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047e6:	2301      	movs	r3, #1
 80047e8:	e00f      	b.n	800480a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004814 <SysTick_Config+0x40>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047f2:	210f      	movs	r1, #15
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295
 80047f8:	f7ff ff8e 	bl	8004718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <SysTick_Config+0x40>)
 80047fe:	2200      	movs	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004802:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <SysTick_Config+0x40>)
 8004804:	2207      	movs	r2, #7
 8004806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	e000e010 	.word	0xe000e010

08004818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff29 	bl	8004678 <__NVIC_SetPriorityGrouping>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	607a      	str	r2, [r7, #4]
 800483a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004840:	f7ff ff3e 	bl	80046c0 <__NVIC_GetPriorityGrouping>
 8004844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff ff8e 	bl	800476c <NVIC_EncodePriority>
 8004850:	4602      	mov	r2, r0
 8004852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004856:	4611      	mov	r1, r2
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff5d 	bl	8004718 <__NVIC_SetPriority>
}
 800485e:	bf00      	nop
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	4603      	mov	r3, r0
 800486e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ff31 	bl	80046dc <__NVIC_EnableIRQ>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff ffa2 	bl	80047d4 <SysTick_Config>
 8004890:	4603      	mov	r3, r0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048a8:	f7ff f99a 	bl	8003be0 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e099      	b.n	80049ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0201 	bic.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d8:	e00f      	b.n	80048fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048da:	f7ff f981 	bl	8003be0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d908      	bls.n	80048fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e078      	b.n	80049ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e8      	bne.n	80048da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4b38      	ldr	r3, [pc, #224]	@ (80049f4 <HAL_DMA_Init+0x158>)
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	2b04      	cmp	r3, #4
 8004952:	d107      	bne.n	8004964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	4313      	orrs	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	2b04      	cmp	r3, #4
 800498c:	d117      	bne.n	80049be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 fb1b 	bl	8004fdc <DMA_CheckFifoParam>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2240      	movs	r2, #64	@ 0x40
 80049b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80049ba:	2301      	movs	r3, #1
 80049bc:	e016      	b.n	80049ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fad2 	bl	8004f70 <DMA_CalcBaseAndBitshift>
 80049cc:	4603      	mov	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d4:	223f      	movs	r2, #63	@ 0x3f
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	f010803f 	.word	0xf010803f

080049f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_DMA_Start_IT+0x26>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e040      	b.n	8004aa0 <HAL_DMA_Start_IT+0xa8>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d12f      	bne.n	8004a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fa64 	bl	8004f14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	223f      	movs	r2, #63	@ 0x3f
 8004a52:	409a      	lsls	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0216 	orr.w	r2, r2, #22
 8004a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e005      	b.n	8004a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ab6:	f7ff f893 	bl	8003be0 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d008      	beq.n	8004ada <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2280      	movs	r2, #128	@ 0x80
 8004acc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e052      	b.n	8004b80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0216 	bic.w	r2, r2, #22
 8004ae8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695a      	ldr	r2, [r3, #20]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004af8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d103      	bne.n	8004b0a <HAL_DMA_Abort+0x62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0208 	bic.w	r2, r2, #8
 8004b18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b2a:	e013      	b.n	8004b54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b2c:	f7ff f858 	bl	8003be0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b05      	cmp	r3, #5
 8004b38:	d90c      	bls.n	8004b54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2203      	movs	r2, #3
 8004b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e015      	b.n	8004b80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e4      	bne.n	8004b2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	223f      	movs	r2, #63	@ 0x3f
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2280      	movs	r2, #128	@ 0x80
 8004ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00c      	b.n	8004bc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0201 	bic.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8004e14 <HAL_DMA_IRQHandler+0x248>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8004e18 <HAL_DMA_IRQHandler+0x24c>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	0a9b      	lsrs	r3, r3, #10
 8004be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01a      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0204 	bic.w	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	2208      	movs	r2, #8
 8004c26:	409a      	lsls	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d012      	beq.n	8004c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	f043 0202 	orr.w	r2, r3, #2
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c72:	2204      	movs	r2, #4
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	2204      	movs	r2, #4
 8004c92:	409a      	lsls	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	2210      	movs	r2, #16
 8004caa:	409a      	lsls	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d043      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d03c      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d018      	beq.n	8004d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d108      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d024      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	4798      	blx	r3
 8004cfa:	e01f      	b.n	8004d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01b      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
 8004d0c:	e016      	b.n	8004d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d107      	bne.n	8004d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0208 	bic.w	r2, r2, #8
 8004d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d40:	2220      	movs	r2, #32
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 808f 	beq.w	8004e6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8087 	beq.w	8004e6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d62:	2220      	movs	r2, #32
 8004d64:	409a      	lsls	r2, r3
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d136      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0216 	bic.w	r2, r2, #22
 8004d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695a      	ldr	r2, [r3, #20]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_DMA_IRQHandler+0x1da>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0208 	bic.w	r2, r2, #8
 8004db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dba:	223f      	movs	r2, #63	@ 0x3f
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d07e      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
        }
        return;
 8004de2:	e079      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d01d      	beq.n	8004e2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10d      	bne.n	8004e1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d031      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
 8004e10:	e02c      	b.n	8004e6c <HAL_DMA_IRQHandler+0x2a0>
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010
 8004e18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d023      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
 8004e2c:	e01e      	b.n	8004e6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0210 	bic.w	r2, r2, #16
 8004e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d032      	beq.n	8004eda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d022      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2205      	movs	r2, #5
 8004e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d307      	bcc.n	8004eb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f2      	bne.n	8004e98 <HAL_DMA_IRQHandler+0x2cc>
 8004eb2:	e000      	b.n	8004eb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004eb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
 8004ed6:	e000      	b.n	8004eda <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ed8:	bf00      	nop
    }
  }
}
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eee:	b2db      	uxtb	r3, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b40      	cmp	r3, #64	@ 0x40
 8004f40:	d108      	bne.n	8004f54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f52:	e007      	b.n	8004f64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]
}
 8004f64:	bf00      	nop
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	3b10      	subs	r3, #16
 8004f80:	4a14      	ldr	r2, [pc, #80]	@ (8004fd4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f8a:	4a13      	ldr	r2, [pc, #76]	@ (8004fd8 <DMA_CalcBaseAndBitshift+0x68>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d909      	bls.n	8004fb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	1d1a      	adds	r2, r3, #4
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fb0:	e007      	b.n	8004fc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	aaaaaaab 	.word	0xaaaaaaab
 8004fd8:	08012428 	.word	0x08012428

08004fdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d11f      	bne.n	8005036 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d856      	bhi.n	80050aa <DMA_CheckFifoParam+0xce>
 8004ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8005004 <DMA_CheckFifoParam+0x28>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	08005015 	.word	0x08005015
 8005008:	08005027 	.word	0x08005027
 800500c:	08005015 	.word	0x08005015
 8005010:	080050ab 	.word	0x080050ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d046      	beq.n	80050ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e043      	b.n	80050ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800502e:	d140      	bne.n	80050b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005034:	e03d      	b.n	80050b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503e:	d121      	bne.n	8005084 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d837      	bhi.n	80050b6 <DMA_CheckFifoParam+0xda>
 8005046:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <DMA_CheckFifoParam+0x70>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	0800505d 	.word	0x0800505d
 8005050:	08005063 	.word	0x08005063
 8005054:	0800505d 	.word	0x0800505d
 8005058:	08005075 	.word	0x08005075
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e030      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d025      	beq.n	80050ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005072:	e022      	b.n	80050ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005078:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800507c:	d11f      	bne.n	80050be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005082:	e01c      	b.n	80050be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d903      	bls.n	8005092 <DMA_CheckFifoParam+0xb6>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d003      	beq.n	8005098 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005090:	e018      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
      break;
 8005096:	e015      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73fb      	strb	r3, [r7, #15]
      break;
 80050a8:	e00b      	b.n	80050c2 <DMA_CheckFifoParam+0xe6>
      break;
 80050aa:	bf00      	nop
 80050ac:	e00a      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050ae:	bf00      	nop
 80050b0:	e008      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050b2:	bf00      	nop
 80050b4:	e006      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050b6:	bf00      	nop
 80050b8:	e004      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <DMA_CheckFifoParam+0xe8>
      break;
 80050c2:	bf00      	nop
    }
  } 
  
  return status; 
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop

080050d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	@ 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	e159      	b.n	80053a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050f0:	2201      	movs	r2, #1
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	fa02 f303 	lsl.w	r3, r2, r3
 80050f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	f040 8148 	bne.w	800539e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d005      	beq.n	8005126 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005122:	2b02      	cmp	r3, #2
 8005124:	d130      	bne.n	8005188 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	2203      	movs	r2, #3
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800515c:	2201      	movs	r2, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 0201 	and.w	r2, r3, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4313      	orrs	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	2b03      	cmp	r3, #3
 8005192:	d017      	beq.n	80051c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	2203      	movs	r2, #3
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	005b      	lsls	r3, r3, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d123      	bne.n	8005218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	08da      	lsrs	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3208      	adds	r2, #8
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	220f      	movs	r2, #15
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	4013      	ands	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	08da      	lsrs	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3208      	adds	r2, #8
 8005212:	69b9      	ldr	r1, [r7, #24]
 8005214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2203      	movs	r2, #3
 8005224:	fa02 f303 	lsl.w	r3, r2, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 0203 	and.w	r2, r3, #3
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005254:	2b00      	cmp	r3, #0
 8005256:	f000 80a2 	beq.w	800539e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	4b57      	ldr	r3, [pc, #348]	@ (80053bc <HAL_GPIO_Init+0x2e8>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005262:	4a56      	ldr	r2, [pc, #344]	@ (80053bc <HAL_GPIO_Init+0x2e8>)
 8005264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005268:	6453      	str	r3, [r2, #68]	@ 0x44
 800526a:	4b54      	ldr	r3, [pc, #336]	@ (80053bc <HAL_GPIO_Init+0x2e8>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005276:	4a52      	ldr	r2, [pc, #328]	@ (80053c0 <HAL_GPIO_Init+0x2ec>)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	3302      	adds	r3, #2
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	220f      	movs	r2, #15
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a49      	ldr	r2, [pc, #292]	@ (80053c4 <HAL_GPIO_Init+0x2f0>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d019      	beq.n	80052d6 <HAL_GPIO_Init+0x202>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a48      	ldr	r2, [pc, #288]	@ (80053c8 <HAL_GPIO_Init+0x2f4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <HAL_GPIO_Init+0x1fe>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a47      	ldr	r2, [pc, #284]	@ (80053cc <HAL_GPIO_Init+0x2f8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00d      	beq.n	80052ce <HAL_GPIO_Init+0x1fa>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a46      	ldr	r2, [pc, #280]	@ (80053d0 <HAL_GPIO_Init+0x2fc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <HAL_GPIO_Init+0x1f6>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a45      	ldr	r2, [pc, #276]	@ (80053d4 <HAL_GPIO_Init+0x300>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_GPIO_Init+0x1f2>
 80052c2:	2304      	movs	r3, #4
 80052c4:	e008      	b.n	80052d8 <HAL_GPIO_Init+0x204>
 80052c6:	2307      	movs	r3, #7
 80052c8:	e006      	b.n	80052d8 <HAL_GPIO_Init+0x204>
 80052ca:	2303      	movs	r3, #3
 80052cc:	e004      	b.n	80052d8 <HAL_GPIO_Init+0x204>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e002      	b.n	80052d8 <HAL_GPIO_Init+0x204>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <HAL_GPIO_Init+0x204>
 80052d6:	2300      	movs	r3, #0
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	f002 0203 	and.w	r2, r2, #3
 80052de:	0092      	lsls	r2, r2, #2
 80052e0:	4093      	lsls	r3, r2
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e8:	4935      	ldr	r1, [pc, #212]	@ (80053c0 <HAL_GPIO_Init+0x2ec>)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	3302      	adds	r3, #2
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052f6:	4b38      	ldr	r3, [pc, #224]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800531a:	4a2f      	ldr	r2, [pc, #188]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005320:	4b2d      	ldr	r3, [pc, #180]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005344:	4a24      	ldr	r2, [pc, #144]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800534a:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800536e:	4a1a      	ldr	r2, [pc, #104]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005374:	4b18      	ldr	r3, [pc, #96]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005398:	4a0f      	ldr	r2, [pc, #60]	@ (80053d8 <HAL_GPIO_Init+0x304>)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	3301      	adds	r3, #1
 80053a2:	61fb      	str	r3, [r7, #28]
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	f67f aea2 	bls.w	80050f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	3724      	adds	r7, #36	@ 0x24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800
 80053c0:	40013800 	.word	0x40013800
 80053c4:	40020000 	.word	0x40020000
 80053c8:	40020400 	.word	0x40020400
 80053cc:	40020800 	.word	0x40020800
 80053d0:	40020c00 	.word	0x40020c00
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40013c00 	.word	0x40013c00

080053dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053f4:	2301      	movs	r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
 80053f8:	e001      	b.n	80053fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005400:	4618      	mov	r0, r3
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	807b      	strh	r3, [r7, #2]
 8005418:	4613      	mov	r3, r2
 800541a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800541c:	787b      	ldrb	r3, [r7, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005422:	887a      	ldrh	r2, [r7, #2]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005428:	e003      	b.n	8005432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800542a:	887b      	ldrh	r3, [r7, #2]
 800542c:	041a      	lsls	r2, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005450:	887a      	ldrh	r2, [r7, #2]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4013      	ands	r3, r2
 8005456:	041a      	lsls	r2, r3, #16
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	43d9      	mvns	r1, r3
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	400b      	ands	r3, r1
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	619a      	str	r2, [r3, #24]
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800547e:	4b08      	ldr	r3, [pc, #32]	@ (80054a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005480:	695a      	ldr	r2, [r3, #20]
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d006      	beq.n	8005498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800548a:	4a05      	ldr	r2, [pc, #20]	@ (80054a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd fe5c 	bl	8003150 <HAL_GPIO_EXTI_Callback>
  }
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40013c00 	.word	0x40013c00

080054a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e12b      	b.n	800570e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fe f874 	bl	80035b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2224      	movs	r2, #36	@ 0x24
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005508:	f005 fa34 	bl	800a974 <HAL_RCC_GetPCLK1Freq>
 800550c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	4a81      	ldr	r2, [pc, #516]	@ (8005718 <HAL_I2C_Init+0x274>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d807      	bhi.n	8005528 <HAL_I2C_Init+0x84>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a80      	ldr	r2, [pc, #512]	@ (800571c <HAL_I2C_Init+0x278>)
 800551c:	4293      	cmp	r3, r2
 800551e:	bf94      	ite	ls
 8005520:	2301      	movls	r3, #1
 8005522:	2300      	movhi	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e006      	b.n	8005536 <HAL_I2C_Init+0x92>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4a7d      	ldr	r2, [pc, #500]	@ (8005720 <HAL_I2C_Init+0x27c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	bf94      	ite	ls
 8005530:	2301      	movls	r3, #1
 8005532:	2300      	movhi	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e0e7      	b.n	800570e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a78      	ldr	r2, [pc, #480]	@ (8005724 <HAL_I2C_Init+0x280>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	0c9b      	lsrs	r3, r3, #18
 8005548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a6a      	ldr	r2, [pc, #424]	@ (8005718 <HAL_I2C_Init+0x274>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d802      	bhi.n	8005578 <HAL_I2C_Init+0xd4>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	3301      	adds	r3, #1
 8005576:	e009      	b.n	800558c <HAL_I2C_Init+0xe8>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800557e:	fb02 f303 	mul.w	r3, r2, r3
 8005582:	4a69      	ldr	r2, [pc, #420]	@ (8005728 <HAL_I2C_Init+0x284>)
 8005584:	fba2 2303 	umull	r2, r3, r2, r3
 8005588:	099b      	lsrs	r3, r3, #6
 800558a:	3301      	adds	r3, #1
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6812      	ldr	r2, [r2, #0]
 8005590:	430b      	orrs	r3, r1
 8005592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800559e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	495c      	ldr	r1, [pc, #368]	@ (8005718 <HAL_I2C_Init+0x274>)
 80055a8:	428b      	cmp	r3, r1
 80055aa:	d819      	bhi.n	80055e0 <HAL_I2C_Init+0x13c>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1e59      	subs	r1, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055c0:	400b      	ands	r3, r1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_I2C_Init+0x138>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1e59      	subs	r1, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055da:	e051      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 80055dc:	2304      	movs	r3, #4
 80055de:	e04f      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d111      	bne.n	800560c <HAL_I2C_Init+0x168>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1e58      	subs	r0, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	440b      	add	r3, r1
 80055f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e012      	b.n	8005632 <HAL_I2C_Init+0x18e>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1e58      	subs	r0, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	0099      	lsls	r1, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005622:	3301      	adds	r3, #1
 8005624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005628:	2b00      	cmp	r3, #0
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_I2C_Init+0x196>
 8005636:	2301      	movs	r3, #1
 8005638:	e022      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10e      	bne.n	8005660 <HAL_I2C_Init+0x1bc>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1e58      	subs	r0, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	440b      	add	r3, r1
 8005650:	fbb0 f3f3 	udiv	r3, r0, r3
 8005654:	3301      	adds	r3, #1
 8005656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800565a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565e:	e00f      	b.n	8005680 <HAL_I2C_Init+0x1dc>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	0099      	lsls	r1, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	fbb0 f3f3 	udiv	r3, r0, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	6809      	ldr	r1, [r1, #0]
 8005684:	4313      	orrs	r3, r2
 8005686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6911      	ldr	r1, [r2, #16]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	68d2      	ldr	r2, [r2, #12]
 80056ba:	4311      	orrs	r1, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	000186a0 	.word	0x000186a0
 800571c:	001e847f 	.word	0x001e847f
 8005720:	003d08ff 	.word	0x003d08ff
 8005724:	431bde83 	.word	0x431bde83
 8005728:	10624dd3 	.word	0x10624dd3

0800572c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b80      	cmp	r3, #128	@ 0x80
 8005740:	d103      	bne.n	800574a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]
  }
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	461a      	mov	r2, r3
 8005764:	460b      	mov	r3, r1
 8005766:	817b      	strh	r3, [r7, #10]
 8005768:	4613      	mov	r3, r2
 800576a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800576c:	f7fe fa38 	bl	8003be0 <HAL_GetTick>
 8005770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b20      	cmp	r3, #32
 800577c:	f040 80e0 	bne.w	8005940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	2319      	movs	r3, #25
 8005786:	2201      	movs	r2, #1
 8005788:	4970      	ldr	r1, [pc, #448]	@ (800594c <HAL_I2C_Master_Transmit+0x1f4>)
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f002 ffe0 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	e0d3      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d101      	bne.n	80057a8 <HAL_I2C_Master_Transmit+0x50>
 80057a4:	2302      	movs	r3, #2
 80057a6:	e0cc      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d007      	beq.n	80057ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2221      	movs	r2, #33	@ 0x21
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2210      	movs	r2, #16
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	893a      	ldrh	r2, [r7, #8]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a50      	ldr	r2, [pc, #320]	@ (8005950 <HAL_I2C_Master_Transmit+0x1f8>)
 800580e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005810:	8979      	ldrh	r1, [r7, #10]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f002 fbd6 	bl	8007fc8 <I2C_MasterRequestWrite>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e08d      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800583c:	e066      	b.n	800590c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6a39      	ldr	r1, [r7, #32]
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f003 f89e 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	2b04      	cmp	r3, #4
 8005854:	d107      	bne.n	8005866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e06b      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11b      	bne.n	80058e0 <HAL_I2C_Master_Transmit+0x188>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d017      	beq.n	80058e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	6a39      	ldr	r1, [r7, #32]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f003 f895 	bl	8008a14 <I2C_WaitOnBTFFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d107      	bne.n	8005908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e01a      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d194      	bne.n	800583e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	00100002 	.word	0x00100002
 8005950:	ffff0000 	.word	0xffff0000

08005954 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	461a      	mov	r2, r3
 8005962:	4603      	mov	r3, r0
 8005964:	817b      	strh	r3, [r7, #10]
 8005966:	460b      	mov	r3, r1
 8005968:	813b      	strh	r3, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800596e:	f7fe f937 	bl	8003be0 <HAL_GetTick>
 8005972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b20      	cmp	r3, #32
 800597e:	f040 80d9 	bne.w	8005b34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2319      	movs	r3, #25
 8005988:	2201      	movs	r2, #1
 800598a:	496d      	ldr	r1, [pc, #436]	@ (8005b40 <HAL_I2C_Mem_Write+0x1ec>)
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f002 fedf 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
 800599a:	e0cc      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_I2C_Mem_Write+0x56>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e0c5      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d007      	beq.n	80059d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2221      	movs	r2, #33	@ 0x21
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2240      	movs	r2, #64	@ 0x40
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b44 <HAL_I2C_Mem_Write+0x1f0>)
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a12:	88f8      	ldrh	r0, [r7, #6]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	8979      	ldrh	r1, [r7, #10]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4603      	mov	r3, r0
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f002 fb52 	bl	80080cc <I2C_RequestMemoryWrite>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d052      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e081      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f002 ffa4 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d107      	bne.n	8005a5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e06b      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_I2C_Mem_Write+0x180>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1aa      	bne.n	8005a32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f002 ff97 	bl	8008a14 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00d      	beq.n	8005b08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d107      	bne.n	8005b04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e016      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	00100002 	.word	0x00100002
 8005b44:	ffff0000 	.word	0xffff0000

08005b48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	@ 0x30
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	817b      	strh	r3, [r7, #10]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	813b      	strh	r3, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b62:	f7fe f83d 	bl	8003be0 <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	f040 8214 	bne.w	8005f9e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2319      	movs	r3, #25
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	497b      	ldr	r1, [pc, #492]	@ (8005d6c <HAL_I2C_Mem_Read+0x224>)
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f002 fde5 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e207      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_Mem_Read+0x56>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e200      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d007      	beq.n	8005bc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2222      	movs	r2, #34	@ 0x22
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2240      	movs	r2, #64	@ 0x40
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a5b      	ldr	r2, [pc, #364]	@ (8005d70 <HAL_I2C_Mem_Read+0x228>)
 8005c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c06:	88f8      	ldrh	r0, [r7, #6]
 8005c08:	893a      	ldrh	r2, [r7, #8]
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f002 faee 	bl	80081f8 <I2C_RequestMemoryRead>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e1bc      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d113      	bne.n	8005c56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e190      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d11b      	bne.n	8005c96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e170      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	e150      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cec:	e144      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	f200 80f1 	bhi.w	8005eda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d123      	bne.n	8005d48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f002 feff 	bl	8008b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e145      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d46:	e117      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d14e      	bne.n	8005dee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d56:	2200      	movs	r2, #0
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <HAL_I2C_Mem_Read+0x22c>)
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f002 fcf8 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e11a      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
 8005d6a:	bf00      	nop
 8005d6c:	00100002 	.word	0x00100002
 8005d70:	ffff0000 	.word	0xffff0000
 8005d74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dec:	e0c4      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	2200      	movs	r2, #0
 8005df6:	496c      	ldr	r1, [pc, #432]	@ (8005fa8 <HAL_I2C_Mem_Read+0x460>)
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f002 fca9 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0cb      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	2200      	movs	r2, #0
 8005e52:	4955      	ldr	r1, [pc, #340]	@ (8005fa8 <HAL_I2C_Mem_Read+0x460>)
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f002 fc7b 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e09d      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ed8:	e04e      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005edc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f002 fe12 	bl	8008b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e058      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d124      	bne.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d107      	bne.n	8005f46 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f aeb6 	bne.w	8005cee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	00010004 	.word	0x00010004

08005fac <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	@ 0x28
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fca:	f7fd fe09 	bl	8003be0 <HAL_GetTick>
 8005fce:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	f040 8136 	bne.w	800624a <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fde:	4b9d      	ldr	r3, [pc, #628]	@ (8006254 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	08db      	lsrs	r3, r3, #3
 8005fe4:	4a9c      	ldr	r2, [pc, #624]	@ (8006258 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0a1a      	lsrs	r2, r3, #8
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009a      	lsls	r2, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d112      	bne.n	800602a <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601e:	f043 0220 	orr.w	r2, r3, #32
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
 8006028:	e110      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d0df      	beq.n	8005ff8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_I2C_Mem_Write_DMA+0x9a>
 8006042:	2302      	movs	r3, #2
 8006044:	e102      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d007      	beq.n	800606c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800607a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2221      	movs	r2, #33	@ 0x21
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2240      	movs	r2, #64	@ 0x40
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800609c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4a6c      	ldr	r2, [pc, #432]	@ (800625c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80060ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80060ae:	897a      	ldrh	r2, [r7, #10]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80060b4:	893a      	ldrh	r2, [r7, #8]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80a9 	beq.w	8006222 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d02a      	beq.n	800612e <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060dc:	4a60      	ldr	r2, [pc, #384]	@ (8006260 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80060de:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e4:	4a5f      	ldr	r2, [pc, #380]	@ (8006264 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80060e6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ec:	2200      	movs	r2, #0
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f4:	2200      	movs	r2, #0
 80060f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fc:	2200      	movs	r2, #0
 80060fe:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006104:	2200      	movs	r2, #0
 8006106:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	4619      	mov	r1, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3310      	adds	r3, #16
 8006118:	461a      	mov	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	f7fe fc6b 	bl	80049f8 <HAL_DMA_Start_IT>
 8006122:	4603      	mov	r3, r0
 8006124:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006126:	7efb      	ldrb	r3, [r7, #27]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d166      	bne.n	80061fa <HAL_I2C_Mem_Write_DMA+0x24e>
 800612c:	e013      	b.n	8006156 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e07a      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006156:	88f8      	ldrh	r0, [r7, #6]
 8006158:	893a      	ldrh	r2, [r7, #8]
 800615a:	8979      	ldrh	r1, [r7, #10]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	2323      	movs	r3, #35	@ 0x23
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4603      	mov	r3, r0
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f001 ffb0 	bl	80080cc <I2C_RequestMemoryWrite>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d022      	beq.n	80061b8 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fd06 	bl	8004b88 <HAL_DMA_Abort_IT>
 800617c:	4603      	mov	r3, r0
 800617e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006184:	2200      	movs	r2, #0
 8006186:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006196:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0201 	bic.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e049      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b8:	2300      	movs	r3, #0
 80061ba:	613b      	str	r3, [r7, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061e4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061f4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e028      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	f043 0210 	orr.w	r2, r3, #16
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e014      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000010 	.word	0x20000010
 8006258:	14f8b589 	.word	0x14f8b589
 800625c:	ffff0000 	.word	0xffff0000
 8006260:	080083c9 	.word	0x080083c9
 8006264:	08008587 	.word	0x08008587

08006268 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08c      	sub	sp, #48	@ 0x30
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	4603      	mov	r3, r0
 8006278:	817b      	strh	r3, [r7, #10]
 800627a:	460b      	mov	r3, r1
 800627c:	813b      	strh	r3, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006282:	f7fd fcad 	bl	8003be0 <HAL_GetTick>
 8006286:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b20      	cmp	r3, #32
 8006296:	f040 8172 	bne.w	800657e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800629a:	4b93      	ldr	r3, [pc, #588]	@ (80064e8 <HAL_I2C_Mem_Read_DMA+0x280>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	08db      	lsrs	r3, r3, #3
 80062a0:	4a92      	ldr	r2, [pc, #584]	@ (80064ec <HAL_I2C_Mem_Read_DMA+0x284>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	0a1a      	lsrs	r2, r3, #8
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009a      	lsls	r2, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	3b01      	subs	r3, #1
 80062b8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d112      	bne.n	80062e6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
 80062e4:	e14c      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d0df      	beq.n	80062b4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_I2C_Mem_Read_DMA+0x9a>
 80062fe:	2302      	movs	r3, #2
 8006300:	e13e      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d007      	beq.n	8006328 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2222      	movs	r2, #34	@ 0x22
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2240      	movs	r2, #64	@ 0x40
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a62      	ldr	r2, [pc, #392]	@ (80064f0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006368:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800636a:	897a      	ldrh	r2, [r7, #10]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006370:	893a      	ldrh	r2, [r7, #8]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 80cc 	beq.w	8006524 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d02d      	beq.n	80063f0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006398:	4a56      	ldr	r2, [pc, #344]	@ (80064f4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800639a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	4a55      	ldr	r2, [pc, #340]	@ (80064f8 <HAL_I2C_Mem_Read_DMA+0x290>)
 80063a2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	2200      	movs	r2, #0
 80063aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	2200      	movs	r2, #0
 80063b2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	2200      	movs	r2, #0
 80063ba:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	2200      	movs	r2, #0
 80063c2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3310      	adds	r3, #16
 80063ce:	4619      	mov	r1, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	461a      	mov	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063da:	f7fe fb0d 	bl	80049f8 <HAL_DMA_Start_IT>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 8087 	bne.w	80064fc <HAL_I2C_Mem_Read_DMA+0x294>
 80063ee:	e013      	b.n	8006418 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006404:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0b3      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006418:	88f8      	ldrh	r0, [r7, #6]
 800641a:	893a      	ldrh	r2, [r7, #8]
 800641c:	8979      	ldrh	r1, [r7, #10]
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	2323      	movs	r3, #35	@ 0x23
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	4603      	mov	r3, r0
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f001 fee5 	bl	80081f8 <I2C_RequestMemoryRead>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d023      	beq.n	800647c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	4618      	mov	r0, r3
 800643a:	f7fe fba5 	bl	8004b88 <HAL_DMA_Abort_IT>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	2200      	movs	r2, #0
 800644a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 0201 	bic.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e081      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006480:	2b01      	cmp	r3, #1
 8006482:	d108      	bne.n	8006496 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	e007      	b.n	80064a6 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064d2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	e049      	b.n	800657a <HAL_I2C_Mem_Read_DMA+0x312>
 80064e6:	bf00      	nop
 80064e8:	20000010 	.word	0x20000010
 80064ec:	14f8b589 	.word	0x14f8b589
 80064f0:	ffff0000 	.word	0xffff0000
 80064f4:	080083c9 	.word	0x080083c9
 80064f8:	08008587 	.word	0x08008587
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	f043 0210 	orr.w	r2, r3, #16
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e02d      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006524:	88f8      	ldrh	r0, [r7, #6]
 8006526:	893a      	ldrh	r2, [r7, #8]
 8006528:	8979      	ldrh	r1, [r7, #10]
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2323      	movs	r3, #35	@ 0x23
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4603      	mov	r3, r0
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f001 fe5f 	bl	80081f8 <I2C_RequestMemoryRead>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e01d      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006568:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800657e:	2302      	movs	r3, #2
  }
}
 8006580:	4618      	mov	r0, r3
 8006582:	3728      	adds	r7, #40	@ 0x28
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	460b      	mov	r3, r1
 8006596:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006598:	f7fd fb22 	bl	8003be0 <HAL_GetTick>
 800659c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	f040 8111 	bne.w	80067d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	2319      	movs	r3, #25
 80065b6:	2201      	movs	r2, #1
 80065b8:	4988      	ldr	r1, [pc, #544]	@ (80067dc <HAL_I2C_IsDeviceReady+0x254>)
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f002 f8c8 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80065c6:	2302      	movs	r3, #2
 80065c8:	e104      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_I2C_IsDeviceReady+0x50>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e0fd      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d007      	beq.n	80065fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800660c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2224      	movs	r2, #36	@ 0x24
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a70      	ldr	r2, [pc, #448]	@ (80067e0 <HAL_I2C_IsDeviceReady+0x258>)
 8006620:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006630:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f002 f886 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00d      	beq.n	8006666 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006658:	d103      	bne.n	8006662 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006660:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e0b6      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006666:	897b      	ldrh	r3, [r7, #10]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006674:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006676:	f7fd fab3 	bl	8003be0 <HAL_GetTick>
 800667a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b02      	cmp	r3, #2
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066aa:	e025      	b.n	80066f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066ac:	f7fd fa98 	bl	8003be0 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d302      	bcc.n	80066c2 <HAL_I2C_IsDeviceReady+0x13a>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	22a0      	movs	r2, #160	@ 0xa0
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ee:	bf0c      	ite	eq
 80066f0:	2301      	moveq	r3, #1
 80066f2:	2300      	movne	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2ba0      	cmp	r3, #160	@ 0xa0
 8006702:	d005      	beq.n	8006710 <HAL_I2C_IsDeviceReady+0x188>
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_I2C_IsDeviceReady+0x188>
 800670a:	7dbb      	ldrb	r3, [r7, #22]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0cd      	beq.n	80066ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b02      	cmp	r3, #2
 8006724:	d129      	bne.n	800677a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006734:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2319      	movs	r3, #25
 8006752:	2201      	movs	r2, #1
 8006754:	4921      	ldr	r1, [pc, #132]	@ (80067dc <HAL_I2C_IsDeviceReady+0x254>)
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f001 fffa 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e036      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	e02c      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006788:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006792:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2319      	movs	r3, #25
 800679a:	2201      	movs	r2, #1
 800679c:	490f      	ldr	r1, [pc, #60]	@ (80067dc <HAL_I2C_IsDeviceReady+0x254>)
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f001 ffd6 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e012      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	3301      	adds	r3, #1
 80067b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	f4ff af32 	bcc.w	8006622 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	00100002 	.word	0x00100002
 80067e0:	ffff0000 	.word	0xffff0000

080067e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006804:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800680c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b10      	cmp	r3, #16
 8006812:	d003      	beq.n	800681c <HAL_I2C_EV_IRQHandler+0x38>
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	f040 80c1 	bne.w	800699e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <HAL_I2C_EV_IRQHandler+0x6e>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800683c:	d003      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x62>
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006844:	d101      	bne.n	800684a <HAL_I2C_EV_IRQHandler+0x66>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <HAL_I2C_EV_IRQHandler+0x68>
 800684a:	2300      	movs	r3, #0
 800684c:	2b01      	cmp	r3, #1
 800684e:	f000 8132 	beq.w	8006ab6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <HAL_I2C_EV_IRQHandler+0x92>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	0a5b      	lsrs	r3, r3, #9
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f002 f9d9 	bl	8008c20 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fd8b 	bl	800738a <I2C_Master_SB>
 8006874:	e092      	b.n	800699c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	08db      	lsrs	r3, r3, #3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d009      	beq.n	8006896 <HAL_I2C_EV_IRQHandler+0xb2>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	0a5b      	lsrs	r3, r3, #9
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fe01 	bl	8007496 <I2C_Master_ADD10>
 8006894:	e082      	b.n	800699c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	085b      	lsrs	r3, r3, #1
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	0a5b      	lsrs	r3, r3, #9
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fe1b 	bl	80074ea <I2C_Master_ADDR>
 80068b4:	e072      	b.n	800699c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	089b      	lsrs	r3, r3, #2
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d03b      	beq.n	800693a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d0:	f000 80f3 	beq.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00f      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x11c>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	0a9b      	lsrs	r3, r3, #10
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d009      	beq.n	8006900 <HAL_I2C_EV_IRQHandler+0x11c>
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	089b      	lsrs	r3, r3, #2
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f9df 	bl	8006cbc <I2C_MasterTransmit_TXE>
 80068fe:	e04d      	b.n	800699c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	089b      	lsrs	r3, r3, #2
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80d6 	beq.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	0a5b      	lsrs	r3, r3, #9
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 80cf 	beq.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b21      	cmp	r3, #33	@ 0x21
 8006920:	d103      	bne.n	800692a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa66 	bl	8006df4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006928:	e0c7      	b.n	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	f040 80c4 	bne.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fad4 	bl	8006ee0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006938:	e0bf      	b.n	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006948:	f000 80b7 	beq.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	099b      	lsrs	r3, r3, #6
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00f      	beq.n	8006978 <HAL_I2C_EV_IRQHandler+0x194>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	0a9b      	lsrs	r3, r3, #10
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_I2C_EV_IRQHandler+0x194>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb4d 	bl	8007010 <I2C_MasterReceive_RXNE>
 8006976:	e011      	b.n	800699c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	089b      	lsrs	r3, r3, #2
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 809a 	beq.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	0a5b      	lsrs	r3, r3, #9
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 8093 	beq.w	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fc03 	bl	80071a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800699a:	e08e      	b.n	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
 800699c:	e08d      	b.n	8006aba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	e007      	b.n	80069c0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d012      	beq.n	80069f2 <HAL_I2C_EV_IRQHandler+0x20e>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0a5b      	lsrs	r3, r3, #9
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00c      	beq.n	80069f2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80069e8:	69b9      	ldr	r1, [r7, #24]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 ffcc 	bl	8007988 <I2C_Slave_ADDR>
 80069f0:	e066      	b.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <HAL_I2C_EV_IRQHandler+0x22e>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	0a5b      	lsrs	r3, r3, #9
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 f806 	bl	8007a1c <I2C_Slave_STOPF>
 8006a10:	e056      	b.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b21      	cmp	r3, #33	@ 0x21
 8006a16:	d002      	beq.n	8006a1e <HAL_I2C_EV_IRQHandler+0x23a>
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	2b29      	cmp	r3, #41	@ 0x29
 8006a1c:	d125      	bne.n	8006a6a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	09db      	lsrs	r3, r3, #7
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00f      	beq.n	8006a4a <HAL_I2C_EV_IRQHandler+0x266>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	0a9b      	lsrs	r3, r3, #10
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <HAL_I2C_EV_IRQHandler+0x266>
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fee2 	bl	800780c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a48:	e039      	b.n	8006abe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	089b      	lsrs	r3, r3, #2
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d033      	beq.n	8006abe <HAL_I2C_EV_IRQHandler+0x2da>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	0a5b      	lsrs	r3, r3, #9
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d02d      	beq.n	8006abe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 ff0f 	bl	8007886 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a68:	e029      	b.n	8006abe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	099b      	lsrs	r3, r3, #6
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00f      	beq.n	8006a96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	0a9b      	lsrs	r3, r3, #10
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	089b      	lsrs	r3, r3, #2
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ff1a 	bl	80078c8 <I2C_SlaveReceive_RXNE>
 8006a94:	e014      	b.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	089b      	lsrs	r3, r3, #2
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	0a5b      	lsrs	r3, r3, #9
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 ff48 	bl	8007944 <I2C_SlaveReceive_BTF>
 8006ab4:	e004      	b.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006ab6:	bf00      	nop
 8006ab8:	e002      	b.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aba:	bf00      	nop
 8006abc:	e000      	b.n	8006ac0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006abe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b08a      	sub	sp, #40	@ 0x28
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ae8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <HAL_I2C_ER_IRQHandler+0x4e>
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	0a5b      	lsrs	r3, r3, #9
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00e      	beq.n	8006b3e <HAL_I2C_ER_IRQHandler+0x78>
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d008      	beq.n	8006b3e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	f043 0302 	orr.w	r3, r3, #2
 8006b32:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006b3c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	0a9b      	lsrs	r3, r3, #10
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d03f      	beq.n	8006bca <HAL_I2C_ER_IRQHandler+0x104>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d039      	beq.n	8006bca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006b56:	7efb      	ldrb	r3, [r7, #27]
 8006b58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b70:	7ebb      	ldrb	r3, [r7, #26]
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d112      	bne.n	8006b9c <HAL_I2C_ER_IRQHandler+0xd6>
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10f      	bne.n	8006b9c <HAL_I2C_ER_IRQHandler+0xd6>
 8006b7c:	7cfb      	ldrb	r3, [r7, #19]
 8006b7e:	2b21      	cmp	r3, #33	@ 0x21
 8006b80:	d008      	beq.n	8006b94 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006b82:	7cfb      	ldrb	r3, [r7, #19]
 8006b84:	2b29      	cmp	r3, #41	@ 0x29
 8006b86:	d005      	beq.n	8006b94 <HAL_I2C_ER_IRQHandler+0xce>
 8006b88:	7cfb      	ldrb	r3, [r7, #19]
 8006b8a:	2b28      	cmp	r3, #40	@ 0x28
 8006b8c:	d106      	bne.n	8006b9c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b21      	cmp	r3, #33	@ 0x21
 8006b92:	d103      	bne.n	8006b9c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f871 	bl	8007c7c <I2C_Slave_AF>
 8006b9a:	e016      	b.n	8006bca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ba4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	f043 0304 	orr.w	r3, r3, #4
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006bae:	7efb      	ldrb	r3, [r7, #27]
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d002      	beq.n	8006bba <HAL_I2C_ER_IRQHandler+0xf4>
 8006bb4:	7efb      	ldrb	r3, [r7, #27]
 8006bb6:	2b40      	cmp	r3, #64	@ 0x40
 8006bb8:	d107      	bne.n	8006bca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bc8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	0adb      	lsrs	r3, r3, #11
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_I2C_ER_IRQHandler+0x12e>
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006bf2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f8ac 	bl	8007d64 <I2C_ITError>
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	3728      	adds	r7, #40	@ 0x28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
 8006c70:	4613      	mov	r3, r2
 8006c72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d150      	bne.n	8006d84 <I2C_MasterTransmit_TXE+0xc8>
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2b21      	cmp	r3, #33	@ 0x21
 8006ce6:	d14d      	bne.n	8006d84 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d01d      	beq.n	8006d2a <I2C_MasterTransmit_TXE+0x6e>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d01a      	beq.n	8006d2a <I2C_MasterTransmit_TXE+0x6e>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cfa:	d016      	beq.n	8006d2a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d0a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2211      	movs	r2, #17
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff ff76 	bl	8006c14 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d28:	e060      	b.n	8006dec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d38:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d48:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b40      	cmp	r3, #64	@ 0x40
 8006d62:	d107      	bne.n	8006d74 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fc f9b5 	bl	80030dc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d72:	e03b      	b.n	8006dec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff49 	bl	8006c14 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d82:	e033      	b.n	8006dec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b21      	cmp	r3, #33	@ 0x21
 8006d88:	d005      	beq.n	8006d96 <I2C_MasterTransmit_TXE+0xda>
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b40      	cmp	r3, #64	@ 0x40
 8006d8e:	d12d      	bne.n	8006dec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b22      	cmp	r3, #34	@ 0x22
 8006d94:	d12a      	bne.n	8006dec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d108      	bne.n	8006db2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006db0:	e01c      	b.n	8006dec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	d103      	bne.n	8006dc6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f88e 	bl	8006ee0 <I2C_MemoryTransmit_TXE_BTF>
}
 8006dc4:	e012      	b.n	8006dec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006dea:	e7ff      	b.n	8006dec <I2C_MasterTransmit_TXE+0x130>
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b21      	cmp	r3, #33	@ 0x21
 8006e0c:	d164      	bne.n	8006ed8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d012      	beq.n	8006e3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e3c:	e04c      	b.n	8006ed8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d01d      	beq.n	8006e80 <I2C_MasterTransmit_BTF+0x8c>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d01a      	beq.n	8006e80 <I2C_MasterTransmit_BTF+0x8c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e50:	d016      	beq.n	8006e80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2211      	movs	r2, #17
 8006e66:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff fecb 	bl	8006c14 <HAL_I2C_MasterTxCpltCallback>
}
 8006e7e:	e02b      	b.n	8006ed8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b40      	cmp	r3, #64	@ 0x40
 8006eb8:	d107      	bne.n	8006eca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fc f90a 	bl	80030dc <HAL_I2C_MemTxCpltCallback>
}
 8006ec8:	e006      	b.n	8006ed8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fe9e 	bl	8006c14 <HAL_I2C_MasterTxCpltCallback>
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d11d      	bne.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d10b      	bne.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f10:	1c9a      	adds	r2, r3, #2
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006f16:	e077      	b.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	121b      	asrs	r3, r3, #8
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f32:	e069      	b.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d10b      	bne.n	8006f54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f52:	e059      	b.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d152      	bne.n	8007002 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b22      	cmp	r3, #34	@ 0x22
 8006f60:	d10d      	bne.n	8006f7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f7c:	e044      	b.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d015      	beq.n	8006fb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	2b21      	cmp	r3, #33	@ 0x21
 8006f8c:	d112      	bne.n	8006fb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006fb2:	e029      	b.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d124      	bne.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	2b21      	cmp	r3, #33	@ 0x21
 8006fc2:	d121      	bne.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fd2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fe2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fc f86e 	bl	80030dc <HAL_I2C_MemTxCpltCallback>
}
 8007000:	e002      	b.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fe fb92 	bl	800572c <I2C_Flush_DR>
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b22      	cmp	r3, #34	@ 0x22
 8007022:	f040 80b9 	bne.w	8007198 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b03      	cmp	r3, #3
 8007038:	d921      	bls.n	800707e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	2b03      	cmp	r3, #3
 8007068:	f040 8096 	bne.w	8007198 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800707a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800707c:	e08c      	b.n	8007198 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007082:	2b02      	cmp	r3, #2
 8007084:	d07f      	beq.n	8007186 <I2C_MasterReceive_RXNE+0x176>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d002      	beq.n	8007092 <I2C_MasterReceive_RXNE+0x82>
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d179      	bne.n	8007186 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fd06 	bl	8008aa4 <I2C_WaitOnSTOPRequestThroughIT>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d14c      	bne.n	8007138 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80070bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b40      	cmp	r3, #64	@ 0x40
 80070f6:	d10a      	bne.n	800710e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fb fffe 	bl	8003108 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800710c:	e044      	b.n	8007198 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d002      	beq.n	8007122 <I2C_MasterReceive_RXNE+0x112>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b20      	cmp	r3, #32
 8007120:	d103      	bne.n	800712a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	@ 0x30
 8007128:	e002      	b.n	8007130 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2212      	movs	r2, #18
 800712e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff fd79 	bl	8006c28 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007136:	e02f      	b.n	8007198 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007146:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691a      	ldr	r2, [r3, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fd88 	bl	8006c94 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007184:	e008      	b.n	8007198 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007194:	605a      	str	r2, [r3, #4]
}
 8007196:	e7ff      	b.n	8007198 <I2C_MasterReceive_RXNE+0x188>
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b04      	cmp	r3, #4
 80071b6:	d11b      	bne.n	80071f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80071ee:	e0c8      	b.n	8007382 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d129      	bne.n	800724e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007208:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b04      	cmp	r3, #4
 800720e:	d00a      	beq.n	8007226 <I2C_MasterReceive_BTF+0x86>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d007      	beq.n	8007226 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007224:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800724c:	e099      	b.n	8007382 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	f040 8081 	bne.w	800735c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d002      	beq.n	8007266 <I2C_MasterReceive_BTF+0xc6>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b10      	cmp	r3, #16
 8007264:	d108      	bne.n	8007278 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e019      	b.n	80072ac <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b04      	cmp	r3, #4
 800727c:	d002      	beq.n	8007284 <I2C_MasterReceive_BTF+0xe4>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b02      	cmp	r3, #2
 8007282:	d108      	bne.n	8007296 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e00a      	b.n	80072ac <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b10      	cmp	r3, #16
 800729a:	d007      	beq.n	80072ac <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691a      	ldr	r2, [r3, #16]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007306:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d10a      	bne.n	8007332 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fb feec 	bl	8003108 <HAL_I2C_MemRxCpltCallback>
}
 8007330:	e027      	b.n	8007382 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b08      	cmp	r3, #8
 800733e:	d002      	beq.n	8007346 <I2C_MasterReceive_BTF+0x1a6>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b20      	cmp	r3, #32
 8007344:	d103      	bne.n	800734e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	631a      	str	r2, [r3, #48]	@ 0x30
 800734c:	e002      	b.n	8007354 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2212      	movs	r2, #18
 8007352:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fc67 	bl	8006c28 <HAL_I2C_MasterRxCpltCallback>
}
 800735a:	e012      	b.n	8007382 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007378:	b29b      	uxth	r3, r3
 800737a:	3b01      	subs	r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b40      	cmp	r3, #64	@ 0x40
 800739c:	d117      	bne.n	80073ce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073b6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80073b8:	e067      	b.n	800748a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	611a      	str	r2, [r3, #16]
}
 80073cc:	e05d      	b.n	800748a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073d6:	d133      	bne.n	8007440 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b21      	cmp	r3, #33	@ 0x21
 80073e2:	d109      	bne.n	80073f8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073f4:	611a      	str	r2, [r3, #16]
 80073f6:	e008      	b.n	800740a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	f043 0301 	orr.w	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <I2C_Master_SB+0x92>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007418:	2b00      	cmp	r3, #0
 800741a:	d108      	bne.n	800742e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d032      	beq.n	800748a <I2C_Master_SB+0x100>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d02d      	beq.n	800748a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800743c:	605a      	str	r2, [r3, #4]
}
 800743e:	e024      	b.n	800748a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10e      	bne.n	8007466 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744c:	b29b      	uxth	r3, r3
 800744e:	11db      	asrs	r3, r3, #7
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f003 0306 	and.w	r3, r3, #6
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f063 030f 	orn	r3, r3, #15
 800745c:	b2da      	uxtb	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	611a      	str	r2, [r3, #16]
}
 8007464:	e011      	b.n	800748a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10d      	bne.n	800748a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007472:	b29b      	uxth	r3, r3
 8007474:	11db      	asrs	r3, r3, #7
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 0306 	and.w	r3, r3, #6
 800747c:	b2db      	uxtb	r3, r3
 800747e:	f063 030e 	orn	r3, r3, #14
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	611a      	str	r2, [r3, #16]
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <I2C_Master_ADD10+0x26>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d108      	bne.n	80074ce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <I2C_Master_ADD10+0x48>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074dc:	605a      	str	r2, [r3, #4]
  }
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b091      	sub	sp, #68	@ 0x44
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b22      	cmp	r3, #34	@ 0x22
 8007512:	f040 8169 	bne.w	80077e8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <I2C_Master_ADDR+0x54>
 800751e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007522:	2b40      	cmp	r3, #64	@ 0x40
 8007524:	d10b      	bne.n	800753e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007526:	2300      	movs	r3, #0
 8007528:	633b      	str	r3, [r7, #48]	@ 0x30
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	633b      	str	r3, [r7, #48]	@ 0x30
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	633b      	str	r3, [r7, #48]	@ 0x30
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	e160      	b.n	8007800 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11d      	bne.n	8007582 <I2C_Master_ADDR+0x98>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800754e:	d118      	bne.n	8007582 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007550:	2300      	movs	r3, #0
 8007552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007574:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007580:	e13e      	b.n	8007800 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d113      	bne.n	80075b4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758c:	2300      	movs	r3, #0
 800758e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e115      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	f040 808a 	bne.w	80076d4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80075c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80075c6:	d137      	bne.n	8007638 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075d6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075e6:	d113      	bne.n	8007610 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075f6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075f8:	2300      	movs	r3, #0
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	e0e7      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007610:	2300      	movs	r3, #0
 8007612:	623b      	str	r3, [r7, #32]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	623b      	str	r3, [r7, #32]
 8007624:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e0d3      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	2b08      	cmp	r3, #8
 800763c:	d02e      	beq.n	800769c <I2C_Master_ADDR+0x1b2>
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	2b20      	cmp	r3, #32
 8007642:	d02b      	beq.n	800769c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007646:	2b12      	cmp	r3, #18
 8007648:	d102      	bne.n	8007650 <I2C_Master_ADDR+0x166>
 800764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764c:	2b01      	cmp	r3, #1
 800764e:	d125      	bne.n	800769c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	2b04      	cmp	r3, #4
 8007654:	d00e      	beq.n	8007674 <I2C_Master_ADDR+0x18a>
 8007656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007658:	2b02      	cmp	r3, #2
 800765a:	d00b      	beq.n	8007674 <I2C_Master_ADDR+0x18a>
 800765c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765e:	2b10      	cmp	r3, #16
 8007660:	d008      	beq.n	8007674 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	e007      	b.n	8007684 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007682:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007684:	2300      	movs	r3, #0
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	e0a1      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e085      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d14d      	bne.n	800777a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80076de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d016      	beq.n	8007712 <I2C_Master_ADDR+0x228>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d013      	beq.n	8007712 <I2C_Master_ADDR+0x228>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d010      	beq.n	8007712 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076fe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e007      	b.n	8007722 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007720:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800772c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007730:	d117      	bne.n	8007762 <I2C_Master_ADDR+0x278>
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007738:	d00b      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 800773a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773c:	2b01      	cmp	r3, #1
 800773e:	d008      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 8007740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007742:	2b08      	cmp	r3, #8
 8007744:	d005      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 8007746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007748:	2b10      	cmp	r3, #16
 800774a:	d002      	beq.n	8007752 <I2C_Master_ADDR+0x268>
 800774c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800774e:	2b20      	cmp	r3, #32
 8007750:	d107      	bne.n	8007762 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007760:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	e032      	b.n	80077e0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007788:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007798:	d117      	bne.n	80077ca <I2C_Master_ADDR+0x2e0>
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077a0:	d00b      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d008      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d005      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d002      	beq.n	80077ba <I2C_Master_ADDR+0x2d0>
 80077b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d107      	bne.n	80077ca <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80077e6:	e00b      	b.n	8007800 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	e7ff      	b.n	8007800 <I2C_Master_ADDR+0x316>
 8007800:	bf00      	nop
 8007802:	3744      	adds	r7, #68	@ 0x44
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800781a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d02b      	beq.n	800787e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782a:	781a      	ldrb	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	3b01      	subs	r3, #1
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d114      	bne.n	800787e <I2C_SlaveTransmit_TXE+0x72>
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b29      	cmp	r3, #41	@ 0x29
 8007858:	d111      	bne.n	800787e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007868:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2221      	movs	r2, #33	@ 0x21
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2228      	movs	r2, #40	@ 0x28
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff f9df 	bl	8006c3c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007886:	b480      	push	{r7}
 8007888:	b083      	sub	sp, #12
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a8:	1c5a      	adds	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02c      	beq.n	800793c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d114      	bne.n	800793c <I2C_SlaveReceive_RXNE+0x74>
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b2a      	cmp	r3, #42	@ 0x2a
 8007916:	d111      	bne.n	800793c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007926:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2222      	movs	r2, #34	@ 0x22
 800792c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2228      	movs	r2, #40	@ 0x28
 8007932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff f98a 	bl	8006c50 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800793c:	bf00      	nop
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d012      	beq.n	800797c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007960:	b2d2      	uxtb	r2, r2
 8007962:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80079a2:	2b28      	cmp	r3, #40	@ 0x28
 80079a4:	d127      	bne.n	80079f6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079b4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	089b      	lsrs	r3, r3, #2
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80079c2:	2301      	movs	r3, #1
 80079c4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	09db      	lsrs	r3, r3, #7
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d103      	bne.n	80079da <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	81bb      	strh	r3, [r7, #12]
 80079d8:	e002      	b.n	80079e0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80079e8:	89ba      	ldrh	r2, [r7, #12]
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff f938 	bl	8006c64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80079f4:	e00e      	b.n	8007a14 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f6:	2300      	movs	r3, #0
 80079f8:	60bb      	str	r3, [r7, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60bb      	str	r3, [r7, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a78:	d172      	bne.n	8007b60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b22      	cmp	r3, #34	@ 0x22
 8007a7e:	d002      	beq.n	8007a86 <I2C_Slave_STOPF+0x6a>
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a84:	d135      	bne.n	8007af2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d005      	beq.n	8007aaa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa2:	f043 0204 	orr.w	r2, r3, #4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ab8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fd fa0e 	bl	8004ee0 <HAL_DMA_GetState>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d049      	beq.n	8007b5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ace:	4a69      	ldr	r2, [pc, #420]	@ (8007c74 <I2C_Slave_STOPF+0x258>)
 8007ad0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd f856 	bl	8004b88 <HAL_DMA_Abort_IT>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d03d      	beq.n	8007b5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007af0:	e035      	b.n	8007b5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	f043 0204 	orr.w	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd f9d8 	bl	8004ee0 <HAL_DMA_GetState>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d014      	beq.n	8007b60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8007c74 <I2C_Slave_STOPF+0x258>)
 8007b3c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fd f820 	bl	8004b88 <HAL_DMA_Abort_IT>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	e000      	b.n	8007b60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03e      	beq.n	8007be8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d112      	bne.n	8007b9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba8:	2b40      	cmp	r3, #64	@ 0x40
 8007baa:	d112      	bne.n	8007bd2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691a      	ldr	r2, [r3, #16]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be0:	f043 0204 	orr.w	r2, r3, #4
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f8b7 	bl	8007d64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007bf6:	e039      	b.n	8007c6c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bfc:	d109      	bne.n	8007c12 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2228      	movs	r2, #40	@ 0x28
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff f81f 	bl	8006c50 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b28      	cmp	r3, #40	@ 0x28
 8007c1c:	d111      	bne.n	8007c42 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a15      	ldr	r2, [pc, #84]	@ (8007c78 <I2C_Slave_STOPF+0x25c>)
 8007c22:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff f820 	bl	8006c80 <HAL_I2C_ListenCpltCallback>
}
 8007c40:	e014      	b.n	8007c6c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c46:	2b22      	cmp	r3, #34	@ 0x22
 8007c48:	d002      	beq.n	8007c50 <I2C_Slave_STOPF+0x234>
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	2b22      	cmp	r3, #34	@ 0x22
 8007c4e:	d10d      	bne.n	8007c6c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7fe fff2 	bl	8006c50 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	08008601 	.word	0x08008601
 8007c78:	ffff0000 	.word	0xffff0000

08007c7c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c90:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d002      	beq.n	8007c9e <I2C_Slave_AF+0x22>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b20      	cmp	r3, #32
 8007c9c:	d129      	bne.n	8007cf2 <I2C_Slave_AF+0x76>
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b28      	cmp	r3, #40	@ 0x28
 8007ca2:	d126      	bne.n	8007cf2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8007d60 <I2C_Slave_AF+0xe4>)
 8007ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007cb8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007cc2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cd2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fe ffc8 	bl	8006c80 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007cf0:	e031      	b.n	8007d56 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b21      	cmp	r3, #33	@ 0x21
 8007cf6:	d129      	bne.n	8007d4c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a19      	ldr	r2, [pc, #100]	@ (8007d60 <I2C_Slave_AF+0xe4>)
 8007cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2221      	movs	r2, #33	@ 0x21
 8007d02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d22:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d2c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d3c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fd fcf4 	bl	800572c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7fe ff79 	bl	8006c3c <HAL_I2C_SlaveTxCpltCallback>
}
 8007d4a:	e004      	b.n	8007d56 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d54:	615a      	str	r2, [r3, #20]
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	ffff0000 	.word	0xffff0000

08007d64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b10      	cmp	r3, #16
 8007d80:	d002      	beq.n	8007d88 <I2C_ITError+0x24>
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b40      	cmp	r3, #64	@ 0x40
 8007d86:	d10a      	bne.n	8007d9e <I2C_ITError+0x3a>
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	2b22      	cmp	r3, #34	@ 0x22
 8007d8c:	d107      	bne.n	8007d9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
 8007da0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007da4:	2b28      	cmp	r3, #40	@ 0x28
 8007da6:	d107      	bne.n	8007db8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2228      	movs	r2, #40	@ 0x28
 8007db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007db6:	e015      	b.n	8007de4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dc6:	d00a      	beq.n	8007dde <I2C_ITError+0x7a>
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b60      	cmp	r3, #96	@ 0x60
 8007dcc:	d007      	beq.n	8007dde <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007df2:	d162      	bne.n	8007eba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d020      	beq.n	8007e54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e16:	4a6a      	ldr	r2, [pc, #424]	@ (8007fc0 <I2C_ITError+0x25c>)
 8007e18:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fc feb2 	bl	8004b88 <HAL_DMA_Abort_IT>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8089 	beq.w	8007f3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0201 	bic.w	r2, r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2220      	movs	r2, #32
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
 8007e52:	e074      	b.n	8007f3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e58:	4a59      	ldr	r2, [pc, #356]	@ (8007fc0 <I2C_ITError+0x25c>)
 8007e5a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fc fe91 	bl	8004b88 <HAL_DMA_Abort_IT>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d068      	beq.n	8007f3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e76:	2b40      	cmp	r3, #64	@ 0x40
 8007e78:	d10b      	bne.n	8007e92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691a      	ldr	r2, [r3, #16]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0201 	bic.w	r2, r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	e041      	b.n	8007f3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b60      	cmp	r3, #96	@ 0x60
 8007ec4:	d125      	bne.n	8007f12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ede:	2b40      	cmp	r3, #64	@ 0x40
 8007ee0:	d10b      	bne.n	8007efa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0201 	bic.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fe fecc 	bl	8006ca8 <HAL_I2C_AbortCpltCallback>
 8007f10:	e015      	b.n	8007f3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1c:	2b40      	cmp	r3, #64	@ 0x40
 8007f1e:	d10b      	bne.n	8007f38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7fe feab 	bl	8006c94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10e      	bne.n	8007f6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f88:	f003 0304 	and.w	r3, r3, #4
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d113      	bne.n	8007fb8 <I2C_ITError+0x254>
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b28      	cmp	r3, #40	@ 0x28
 8007f94:	d110      	bne.n	8007fb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc4 <I2C_ITError+0x260>)
 8007f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fe fe64 	bl	8006c80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	08008601 	.word	0x08008601
 8007fc4:	ffff0000 	.word	0xffff0000

08007fc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b088      	sub	sp, #32
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	607a      	str	r2, [r7, #4]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d006      	beq.n	8007ff2 <I2C_MasterRequestWrite+0x2a>
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d003      	beq.n	8007ff2 <I2C_MasterRequestWrite+0x2a>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ff0:	d108      	bne.n	8008004 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e00b      	b.n	800801c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008008:	2b12      	cmp	r3, #18
 800800a:	d107      	bne.n	800801c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800801a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 fb91 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00d      	beq.n	8008050 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800803e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008042:	d103      	bne.n	800804c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800804a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e035      	b.n	80080bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008058:	d108      	bne.n	800806c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800805a:	897b      	ldrh	r3, [r7, #10]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008068:	611a      	str	r2, [r3, #16]
 800806a:	e01b      	b.n	80080a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800806c:	897b      	ldrh	r3, [r7, #10]
 800806e:	11db      	asrs	r3, r3, #7
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 0306 	and.w	r3, r3, #6
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f063 030f 	orn	r3, r3, #15
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	490e      	ldr	r1, [pc, #56]	@ (80080c4 <I2C_MasterRequestWrite+0xfc>)
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fbda 	bl	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e010      	b.n	80080bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	4907      	ldr	r1, [pc, #28]	@ (80080c8 <I2C_MasterRequestWrite+0x100>)
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fbca 	bl	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	00010008 	.word	0x00010008
 80080c8:	00010002 	.word	0x00010002

080080cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af02      	add	r7, sp, #8
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	4608      	mov	r0, r1
 80080d6:	4611      	mov	r1, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	4603      	mov	r3, r0
 80080dc:	817b      	strh	r3, [r7, #10]
 80080de:	460b      	mov	r3, r1
 80080e0:	813b      	strh	r3, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fb24 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800811c:	d103      	bne.n	8008126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e05f      	b.n	80081ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800812a:	897b      	ldrh	r3, [r7, #10]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	461a      	mov	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800813a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813c:	6a3a      	ldr	r2, [r7, #32]
 800813e:	492d      	ldr	r1, [pc, #180]	@ (80081f4 <I2C_RequestMemoryWrite+0x128>)
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 fb7f 	bl	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e04c      	b.n	80081ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	617b      	str	r3, [r7, #20]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008168:	6a39      	ldr	r1, [r7, #32]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fc0a 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00d      	beq.n	8008192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817a:	2b04      	cmp	r3, #4
 800817c:	d107      	bne.n	800818e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800818c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e02b      	b.n	80081ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d105      	bne.n	80081a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008198:	893b      	ldrh	r3, [r7, #8]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	611a      	str	r2, [r3, #16]
 80081a2:	e021      	b.n	80081e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081a4:	893b      	ldrh	r3, [r7, #8]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b4:	6a39      	ldr	r1, [r7, #32]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fbe4 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00d      	beq.n	80081de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d107      	bne.n	80081da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e005      	b.n	80081ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081de:	893b      	ldrh	r3, [r7, #8]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	00010002 	.word	0x00010002

080081f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4603      	mov	r3, r0
 8008208:	817b      	strh	r3, [r7, #10]
 800820a:	460b      	mov	r3, r1
 800820c:	813b      	strh	r3, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	2200      	movs	r2, #0
 800823a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fa86 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00d      	beq.n	8008266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008258:	d103      	bne.n	8008262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e0aa      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008266:	897b      	ldrh	r3, [r7, #10]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	461a      	mov	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	6a3a      	ldr	r2, [r7, #32]
 800827a:	4952      	ldr	r1, [pc, #328]	@ (80083c4 <I2C_RequestMemoryRead+0x1cc>)
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 fae1 	bl	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e097      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082a4:	6a39      	ldr	r1, [r7, #32]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fb6c 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d107      	bne.n	80082ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e076      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d105      	bne.n	80082e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082d4:	893b      	ldrh	r3, [r7, #8]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	611a      	str	r2, [r3, #16]
 80082de:	e021      	b.n	8008324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082e0:	893b      	ldrh	r3, [r7, #8]
 80082e2:	0a1b      	lsrs	r3, r3, #8
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f0:	6a39      	ldr	r1, [r7, #32]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fb46 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	2b04      	cmp	r3, #4
 8008304:	d107      	bne.n	8008316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e050      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800831a:	893b      	ldrh	r3, [r7, #8]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008326:	6a39      	ldr	r1, [r7, #32]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 fb2b 	bl	8008984 <I2C_WaitOnTXEFlagUntilTimeout>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00d      	beq.n	8008350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008338:	2b04      	cmp	r3, #4
 800833a:	d107      	bne.n	800834c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800834a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e035      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800835e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	2200      	movs	r2, #0
 8008368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f9ef 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00d      	beq.n	8008394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008386:	d103      	bne.n	8008390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800838e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e013      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008394:	897b      	ldrh	r3, [r7, #10]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	f043 0301 	orr.w	r3, r3, #1
 800839c:	b2da      	uxtb	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	4906      	ldr	r1, [pc, #24]	@ (80083c4 <I2C_RequestMemoryRead+0x1cc>)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fa4a 	bl	8008844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	00010002 	.word	0x00010002

080083c8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083dc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083e4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80083fa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008408:	2200      	movs	r2, #0
 800840a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008418:	2200      	movs	r2, #0
 800841a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800841c:	7cfb      	ldrb	r3, [r7, #19]
 800841e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008422:	2b21      	cmp	r3, #33	@ 0x21
 8008424:	d007      	beq.n	8008436 <I2C_DMAXferCplt+0x6e>
 8008426:	7cfb      	ldrb	r3, [r7, #19]
 8008428:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800842c:	2b22      	cmp	r3, #34	@ 0x22
 800842e:	d131      	bne.n	8008494 <I2C_DMAXferCplt+0xcc>
 8008430:	7cbb      	ldrb	r3, [r7, #18]
 8008432:	2b20      	cmp	r3, #32
 8008434:	d12e      	bne.n	8008494 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008444:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2200      	movs	r2, #0
 800844a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800844c:	7cfb      	ldrb	r3, [r7, #19]
 800844e:	2b29      	cmp	r3, #41	@ 0x29
 8008450:	d10a      	bne.n	8008468 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2221      	movs	r2, #33	@ 0x21
 8008456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2228      	movs	r2, #40	@ 0x28
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008460:	6978      	ldr	r0, [r7, #20]
 8008462:	f7fe fbeb 	bl	8006c3c <HAL_I2C_SlaveTxCpltCallback>
 8008466:	e00c      	b.n	8008482 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008468:	7cfb      	ldrb	r3, [r7, #19]
 800846a:	2b2a      	cmp	r3, #42	@ 0x2a
 800846c:	d109      	bne.n	8008482 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2222      	movs	r2, #34	@ 0x22
 8008472:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2228      	movs	r2, #40	@ 0x28
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f7fe fbe7 	bl	8006c50 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008490:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008492:	e074      	b.n	800857e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d06e      	beq.n	800857e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d107      	bne.n	80084ba <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084b8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80084c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80084d0:	d009      	beq.n	80084e6 <I2C_DMAXferCplt+0x11e>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d006      	beq.n	80084e6 <I2C_DMAXferCplt+0x11e>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80084de:	d002      	beq.n	80084e6 <I2C_DMAXferCplt+0x11e>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d107      	bne.n	80084f6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008504:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008514:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	f7fe fbb5 	bl	8006c94 <HAL_I2C_ErrorCallback>
}
 800852a:	e028      	b.n	800857e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2220      	movs	r2, #32
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b40      	cmp	r3, #64	@ 0x40
 800853e:	d10a      	bne.n	8008556 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800854e:	6978      	ldr	r0, [r7, #20]
 8008550:	f7fa fdda 	bl	8003108 <HAL_I2C_MemRxCpltCallback>
}
 8008554:	e013      	b.n	800857e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d002      	beq.n	800856a <I2C_DMAXferCplt+0x1a2>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b20      	cmp	r3, #32
 8008568:	d103      	bne.n	8008572 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008570:	e002      	b.n	8008578 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2212      	movs	r2, #18
 8008576:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008578:	6978      	ldr	r0, [r7, #20]
 800857a:	f7fe fb55 	bl	8006c28 <HAL_I2C_MasterRxCpltCallback>
}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008592:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a0:	2200      	movs	r2, #0
 80085a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	2200      	movs	r2, #0
 80085b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7fc fca1 	bl	8004efc <HAL_DMA_GetError>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d01b      	beq.n	80085f8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085ce:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ea:	f043 0210 	orr.w	r2, r3, #16
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7fe fb4e 	bl	8006c94 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085f8:	bf00      	nop
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008618:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800861a:	4b4b      	ldr	r3, [pc, #300]	@ (8008748 <I2C_DMAAbort+0x148>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	08db      	lsrs	r3, r3, #3
 8008620:	4a4a      	ldr	r2, [pc, #296]	@ (800874c <I2C_DMAAbort+0x14c>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	0a1a      	lsrs	r2, r3, #8
 8008628:	4613      	mov	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	00da      	lsls	r2, r3, #3
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008646:	e00a      	b.n	800865e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3b01      	subs	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800865c:	d0ea      	beq.n	8008634 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866a:	2200      	movs	r2, #0
 800866c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867a:	2200      	movs	r2, #0
 800867c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800868c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2200      	movs	r2, #0
 8008692:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a0:	2200      	movs	r2, #0
 80086a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d003      	beq.n	80086b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	2200      	movs	r2, #0
 80086b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f022 0201 	bic.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b60      	cmp	r3, #96	@ 0x60
 80086ce:	d10e      	bne.n	80086ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2200      	movs	r2, #0
 80086e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f7fe fade 	bl	8006ca8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086ec:	e027      	b.n	800873e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086ee:	7cfb      	ldrb	r3, [r7, #19]
 80086f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80086f4:	2b28      	cmp	r3, #40	@ 0x28
 80086f6:	d117      	bne.n	8008728 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0201 	orr.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008716:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2200      	movs	r2, #0
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2228      	movs	r2, #40	@ 0x28
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008726:	e007      	b.n	8008738 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008738:	6978      	ldr	r0, [r7, #20]
 800873a:	f7fe faab 	bl	8006c94 <HAL_I2C_ErrorCallback>
}
 800873e:	bf00      	nop
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000010 	.word	0x20000010
 800874c:	14f8b589 	.word	0x14f8b589

08008750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008760:	e048      	b.n	80087f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d044      	beq.n	80087f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876a:	f7fb fa39 	bl	8003be0 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d302      	bcc.n	8008780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d139      	bne.n	80087f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	0c1b      	lsrs	r3, r3, #16
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10d      	bne.n	80087a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	43da      	mvns	r2, r3
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4013      	ands	r3, r2
 8008796:	b29b      	uxth	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	461a      	mov	r2, r3
 80087a4:	e00c      	b.n	80087c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	43da      	mvns	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	4013      	ands	r3, r2
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bf0c      	ite	eq
 80087b8:	2301      	moveq	r3, #1
 80087ba:	2300      	movne	r3, #0
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d116      	bne.n	80087f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e0:	f043 0220 	orr.w	r2, r3, #32
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e023      	b.n	800883c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	0c1b      	lsrs	r3, r3, #16
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d10d      	bne.n	800881a <I2C_WaitOnFlagUntilTimeout+0xca>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	43da      	mvns	r2, r3
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4013      	ands	r3, r2
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	e00c      	b.n	8008834 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	43da      	mvns	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	bf0c      	ite	eq
 800882c:	2301      	moveq	r3, #1
 800882e:	2300      	movne	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	429a      	cmp	r2, r3
 8008838:	d093      	beq.n	8008762 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008852:	e071      	b.n	8008938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800885e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008862:	d123      	bne.n	80088ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008872:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800887c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008898:	f043 0204 	orr.w	r2, r3, #4
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e067      	b.n	800897c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d041      	beq.n	8008938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b4:	f7fb f994 	bl	8003be0 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d302      	bcc.n	80088ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d136      	bne.n	8008938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	0c1b      	lsrs	r3, r3, #16
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d10c      	bne.n	80088ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	43da      	mvns	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4013      	ands	r3, r2
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	e00b      	b.n	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	43da      	mvns	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	4013      	ands	r3, r2
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2220      	movs	r2, #32
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008924:	f043 0220 	orr.w	r2, r3, #32
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e021      	b.n	800897c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	0c1b      	lsrs	r3, r3, #16
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b01      	cmp	r3, #1
 8008940:	d10c      	bne.n	800895c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	43da      	mvns	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e00b      	b.n	8008974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	43da      	mvns	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	4013      	ands	r3, r2
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	f47f af6d 	bne.w	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008990:	e034      	b.n	80089fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 f915 	bl	8008bc2 <I2C_IsAcknowledgeFailed>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e034      	b.n	8008a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a8:	d028      	beq.n	80089fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089aa:	f7fb f919 	bl	8003be0 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d302      	bcc.n	80089c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d11d      	bne.n	80089fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ca:	2b80      	cmp	r3, #128	@ 0x80
 80089cc:	d016      	beq.n	80089fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2220      	movs	r2, #32
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e8:	f043 0220 	orr.w	r2, r3, #32
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e007      	b.n	8008a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a06:	2b80      	cmp	r3, #128	@ 0x80
 8008a08:	d1c3      	bne.n	8008992 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a20:	e034      	b.n	8008a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f8cd 	bl	8008bc2 <I2C_IsAcknowledgeFailed>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e034      	b.n	8008a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d028      	beq.n	8008a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a3a:	f7fb f8d1 	bl	8003be0 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d302      	bcc.n	8008a50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11d      	bne.n	8008a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d016      	beq.n	8008a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a78:	f043 0220 	orr.w	r2, r3, #32
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e007      	b.n	8008a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	f003 0304 	and.w	r3, r3, #4
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d1c3      	bne.n	8008a22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ab0:	4b13      	ldr	r3, [pc, #76]	@ (8008b00 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	4a13      	ldr	r2, [pc, #76]	@ (8008b04 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8008abc:	0a1a      	lsrs	r2, r3, #8
 8008abe:	4613      	mov	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d107      	bne.n	8008ae2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	f043 0220 	orr.w	r2, r3, #32
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e008      	b.n	8008af4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008af0:	d0e9      	beq.n	8008ac6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	20000010 	.word	0x20000010
 8008b04:	14f8b589 	.word	0x14f8b589

08008b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b14:	e049      	b.n	8008baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d119      	bne.n	8008b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0210 	mvn.w	r2, #16
 8008b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e030      	b.n	8008bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b58:	f7fb f842 	bl	8003be0 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d302      	bcc.n	8008b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d11d      	bne.n	8008baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b78:	2b40      	cmp	r3, #64	@ 0x40
 8008b7a:	d016      	beq.n	8008baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2220      	movs	r2, #32
 8008b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b96:	f043 0220 	orr.w	r2, r3, #32
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e007      	b.n	8008bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb4:	2b40      	cmp	r3, #64	@ 0x40
 8008bb6:	d1ae      	bne.n	8008b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd8:	d11b      	bne.n	8008c12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008be2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	f043 0204 	orr.w	r2, r3, #4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008c30:	d103      	bne.n	8008c3a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c38:	e007      	b.n	8008c4a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008c42:	d102      	bne.n	8008c4a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2208      	movs	r2, #8
 8008c48:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af02      	add	r7, sp, #8
 8008c5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e101      	b.n	8008e6c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f007 fb1a 	bl	80102bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c96:	d102      	bne.n	8008c9e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f003 fe95 	bl	800c9d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	7c1a      	ldrb	r2, [r3, #16]
 8008cb0:	f88d 2000 	strb.w	r2, [sp]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cb8:	f003 fd74 	bl	800c7a4 <USB_CoreInit>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d005      	beq.n	8008cce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e0ce      	b.n	8008e6c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 fe8d 	bl	800c9f4 <USB_SetCurrentMode>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e0bf      	b.n	8008e6c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
 8008cf0:	e04a      	b.n	8008d88 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008cf2:	7bfa      	ldrb	r2, [r7, #15]
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	00db      	lsls	r3, r3, #3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	3315      	adds	r3, #21
 8008d02:	2201      	movs	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d06:	7bfa      	ldrb	r2, [r7, #15]
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	440b      	add	r3, r1
 8008d14:	3314      	adds	r3, #20
 8008d16:	7bfa      	ldrb	r2, [r7, #15]
 8008d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d1a:	7bfa      	ldrb	r2, [r7, #15]
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	b298      	uxth	r0, r3
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	332e      	adds	r3, #46	@ 0x2e
 8008d2e:	4602      	mov	r2, r0
 8008d30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d32:	7bfa      	ldrb	r2, [r7, #15]
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	3318      	adds	r3, #24
 8008d42:	2200      	movs	r2, #0
 8008d44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d46:	7bfa      	ldrb	r2, [r7, #15]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	331c      	adds	r3, #28
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d5a:	7bfa      	ldrb	r2, [r7, #15]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3320      	adds	r3, #32
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d6e:	7bfa      	ldrb	r2, [r7, #15]
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	3324      	adds	r3, #36	@ 0x24
 8008d7e:	2200      	movs	r2, #0
 8008d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
 8008d84:	3301      	adds	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	791b      	ldrb	r3, [r3, #4]
 8008d8c:	7bfa      	ldrb	r2, [r7, #15]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d3af      	bcc.n	8008cf2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
 8008d96:	e044      	b.n	8008e22 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d98:	7bfa      	ldrb	r2, [r7, #15]
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008daa:	2200      	movs	r2, #0
 8008dac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008dae:	7bfa      	ldrb	r2, [r7, #15]
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008dc0:	7bfa      	ldrb	r2, [r7, #15]
 8008dc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008dc4:	7bfa      	ldrb	r2, [r7, #15]
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008dda:	7bfa      	ldrb	r2, [r7, #15]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008df0:	7bfa      	ldrb	r2, [r7, #15]
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4613      	mov	r3, r2
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	4413      	add	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	440b      	add	r3, r1
 8008dfe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e02:	2200      	movs	r2, #0
 8008e04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e06:	7bfa      	ldrb	r2, [r7, #15]
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	440b      	add	r3, r1
 8008e14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	73fb      	strb	r3, [r7, #15]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	791b      	ldrb	r3, [r3, #4]
 8008e26:	7bfa      	ldrb	r2, [r7, #15]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d3b5      	bcc.n	8008d98 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7c1a      	ldrb	r2, [r3, #16]
 8008e34:	f88d 2000 	strb.w	r2, [sp]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e3c:	f003 fe26 	bl	800ca8c <USB_DevInit>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e00c      	b.n	8008e6c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f004 fe70 	bl	800db4a <USB_DevDisconnect>

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_PCD_Start+0x1c>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e022      	b.n	8008ed6 <HAL_PCD_Start+0x62>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d009      	beq.n	8008eb8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d105      	bne.n	8008eb8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f003 fd77 	bl	800c9b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f004 fe1e 	bl	800db08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008ede:	b590      	push	{r4, r7, lr}
 8008ee0:	b08d      	sub	sp, #52	@ 0x34
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f004 fedc 	bl	800dcb2 <USB_GetMode>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 848c 	bne.w	800981a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f004 fe40 	bl	800db8c <USB_ReadInterrupts>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 8482 	beq.w	8009818 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f004 fe2d 	bl	800db8c <USB_ReadInterrupts>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d107      	bne.n	8008f4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695a      	ldr	r2, [r3, #20]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f002 0202 	and.w	r2, r2, #2
 8008f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f004 fe1b 	bl	800db8c <USB_ReadInterrupts>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f003 0310 	and.w	r3, r3, #16
 8008f5c:	2b10      	cmp	r3, #16
 8008f5e:	d161      	bne.n	8009024 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699a      	ldr	r2, [r3, #24]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0210 	bic.w	r2, r2, #16
 8008f6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008f96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f9a:	d124      	bne.n	8008fe6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d035      	beq.n	8009014 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	091b      	lsrs	r3, r3, #4
 8008fb0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	6a38      	ldr	r0, [r7, #32]
 8008fbc:	f004 fc52 	bl	800d864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	68da      	ldr	r2, [r3, #12]
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	091b      	lsrs	r3, r3, #4
 8008fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fcc:	441a      	add	r2, r3
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	695a      	ldr	r2, [r3, #20]
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fde:	441a      	add	r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	615a      	str	r2, [r3, #20]
 8008fe4:	e016      	b.n	8009014 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008fec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008ff0:	d110      	bne.n	8009014 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6a38      	ldr	r0, [r7, #32]
 8008ffe:	f004 fc31 	bl	800d864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	695a      	ldr	r2, [r3, #20]
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	091b      	lsrs	r3, r3, #4
 800900a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800900e:	441a      	add	r2, r3
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	699a      	ldr	r2, [r3, #24]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0210 	orr.w	r2, r2, #16
 8009022:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4618      	mov	r0, r3
 800902a:	f004 fdaf 	bl	800db8c <USB_ReadInterrupts>
 800902e:	4603      	mov	r3, r0
 8009030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009034:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009038:	f040 80a7 	bne.w	800918a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f004 fdb4 	bl	800dbb2 <USB_ReadDevAllOutEpInterrupt>
 800904a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800904c:	e099      	b.n	8009182 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800904e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 808e 	beq.w	8009176 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f004 fdd8 	bl	800dc1a <USB_ReadDevOutEPInterrupt>
 800906a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00c      	beq.n	8009090 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009082:	461a      	mov	r2, r3
 8009084:	2301      	movs	r3, #1
 8009086:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fea4 	bl	8009dd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f003 0308 	and.w	r3, r3, #8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800909a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909c:	015a      	lsls	r2, r3, #5
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	4413      	add	r3, r2
 80090a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a6:	461a      	mov	r2, r3
 80090a8:	2308      	movs	r3, #8
 80090aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80090ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 ff7a 	bl	8009fa8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	f003 0310 	and.w	r3, r3, #16
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d008      	beq.n	80090d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ca:	461a      	mov	r2, r3
 80090cc:	2310      	movs	r3, #16
 80090ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d030      	beq.n	800913c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e2:	2b80      	cmp	r3, #128	@ 0x80
 80090e4:	d109      	bne.n	80090fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80090f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80090fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4413      	add	r3, r2
 800910c:	3304      	adds	r3, #4
 800910e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	78db      	ldrb	r3, [r3, #3]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d108      	bne.n	800912a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2200      	movs	r2, #0
 800911c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800911e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009120:	b2db      	uxtb	r3, r3
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f007 f9c5 	bl	80104b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009136:	461a      	mov	r2, r3
 8009138:	2302      	movs	r3, #2
 800913a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f003 0320 	and.w	r3, r3, #32
 8009142:	2b00      	cmp	r3, #0
 8009144:	d008      	beq.n	8009158 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009152:	461a      	mov	r2, r3
 8009154:	2320      	movs	r3, #32
 8009156:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916e:	461a      	mov	r2, r3
 8009170:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009174:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	3301      	adds	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	f47f af62 	bne.w	800904e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f004 fcfc 	bl	800db8c <USB_ReadInterrupts>
 8009194:	4603      	mov	r3, r0
 8009196:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800919a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800919e:	f040 80db 	bne.w	8009358 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f004 fd1d 	bl	800dbe6 <USB_ReadDevAllInEpInterrupt>
 80091ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80091ae:	2300      	movs	r3, #0
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80091b2:	e0cd      	b.n	8009350 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 80c2 	beq.w	8009344 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f004 fd43 	bl	800dc56 <USB_ReadDevInEPInterrupt>
 80091d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d057      	beq.n	800928c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80091dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091de:	f003 030f 	and.w	r3, r3, #15
 80091e2:	2201      	movs	r2, #1
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	43db      	mvns	r3, r3
 80091f6:	69f9      	ldr	r1, [r7, #28]
 80091f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091fc:	4013      	ands	r3, r2
 80091fe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920c:	461a      	mov	r2, r3
 800920e:	2301      	movs	r3, #1
 8009210:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	799b      	ldrb	r3, [r3, #6]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d132      	bne.n	8009280 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800921e:	4613      	mov	r3, r2
 8009220:	00db      	lsls	r3, r3, #3
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	3320      	adds	r3, #32
 800922a:	6819      	ldr	r1, [r3, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4403      	add	r3, r0
 800923a:	331c      	adds	r3, #28
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4419      	add	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009244:	4613      	mov	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4403      	add	r3, r0
 800924e:	3320      	adds	r3, #32
 8009250:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	d113      	bne.n	8009280 <HAL_PCD_IRQHandler+0x3a2>
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800925c:	4613      	mov	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	440b      	add	r3, r1
 8009266:	3324      	adds	r3, #36	@ 0x24
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d108      	bne.n	8009280 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009278:	461a      	mov	r2, r3
 800927a:	2101      	movs	r1, #1
 800927c:	f004 fd4a 	bl	800dd14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	b2db      	uxtb	r3, r3
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f007 f899 	bl	80103be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f003 0308 	and.w	r3, r3, #8
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a2:	461a      	mov	r2, r3
 80092a4:	2308      	movs	r3, #8
 80092a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f003 0310 	and.w	r3, r3, #16
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d008      	beq.n	80092c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092be:	461a      	mov	r2, r3
 80092c0:	2310      	movs	r3, #16
 80092c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d008      	beq.n	80092e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092da:	461a      	mov	r2, r3
 80092dc:	2340      	movs	r3, #64	@ 0x40
 80092de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d023      	beq.n	8009332 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80092ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092ec:	6a38      	ldr	r0, [r7, #32]
 80092ee:	f003 fd31 	bl	800cd54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80092f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f4:	4613      	mov	r3, r2
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	4413      	add	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	3310      	adds	r3, #16
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4413      	add	r3, r2
 8009302:	3304      	adds	r3, #4
 8009304:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	78db      	ldrb	r3, [r3, #3]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d108      	bne.n	8009320 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2200      	movs	r2, #0
 8009312:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	b2db      	uxtb	r3, r3
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f007 f8dc 	bl	80104d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800932c:	461a      	mov	r2, r3
 800932e:	2302      	movs	r3, #2
 8009330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800933c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fcbd 	bl	8009cbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	3301      	adds	r3, #1
 8009348:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	085b      	lsrs	r3, r3, #1
 800934e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	f47f af2e 	bne.w	80091b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4618      	mov	r0, r3
 800935e:	f004 fc15 	bl	800db8c <USB_ReadInterrupts>
 8009362:	4603      	mov	r3, r0
 8009364:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009368:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800936c:	d122      	bne.n	80093b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009388:	2b01      	cmp	r3, #1
 800938a:	d108      	bne.n	800939e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fea4 	bl	800a0e4 <HAL_PCDEx_LPM_Callback>
 800939c:	e002      	b.n	80093a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f007 f87a 	bl	8010498 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695a      	ldr	r2, [r3, #20]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80093b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f004 fbe7 	bl	800db8c <USB_ReadInterrupts>
 80093be:	4603      	mov	r3, r0
 80093c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80093c8:	d112      	bne.n	80093f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d102      	bne.n	80093e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f007 f836 	bl	801044c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	695a      	ldr	r2, [r3, #20]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80093ee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f004 fbc9 	bl	800db8c <USB_ReadInterrupts>
 80093fa:	4603      	mov	r3, r0
 80093fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009404:	f040 80b7 	bne.w	8009576 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009416:	f023 0301 	bic.w	r3, r3, #1
 800941a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2110      	movs	r1, #16
 8009422:	4618      	mov	r0, r3
 8009424:	f003 fc96 	bl	800cd54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009428:	2300      	movs	r3, #0
 800942a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800942c:	e046      	b.n	80094bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	4413      	add	r3, r2
 8009436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943a:	461a      	mov	r2, r3
 800943c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009440:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009452:	0151      	lsls	r1, r2, #5
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	440a      	add	r2, r1
 8009458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800945c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009460:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946e:	461a      	mov	r2, r3
 8009470:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009474:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	69fa      	ldr	r2, [r7, #28]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009490:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009494:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	69fa      	ldr	r2, [r7, #28]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	3301      	adds	r3, #1
 80094ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	791b      	ldrb	r3, [r3, #4]
 80094c0:	461a      	mov	r2, r3
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d3b2      	bcc.n	800942e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	69fa      	ldr	r2, [r7, #28]
 80094d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80094da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	7bdb      	ldrb	r3, [r3, #15]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d016      	beq.n	8009512 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094f4:	f043 030b 	orr.w	r3, r3, #11
 80094f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800950a:	f043 030b 	orr.w	r3, r3, #11
 800950e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009510:	e015      	b.n	800953e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009520:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009524:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8009528:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	69fa      	ldr	r2, [r7, #28]
 8009534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009538:	f043 030b 	orr.w	r3, r3, #11
 800953c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800954c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009550:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009560:	461a      	mov	r2, r3
 8009562:	f004 fbd7 	bl	800dd14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695a      	ldr	r2, [r3, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f004 fb06 	bl	800db8c <USB_ReadInterrupts>
 8009580:	4603      	mov	r3, r0
 8009582:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800958a:	d123      	bne.n	80095d4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f004 fb9c 	bl	800dcce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f003 fc53 	bl	800ce46 <USB_GetDevSpeed>
 80095a0:	4603      	mov	r3, r0
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681c      	ldr	r4, [r3, #0]
 80095ac:	f001 f9d6 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 80095b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095b6:	461a      	mov	r2, r3
 80095b8:	4620      	mov	r0, r4
 80095ba:	f003 f957 	bl	800c86c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f006 ff25 	bl	801040e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	695a      	ldr	r2, [r3, #20]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80095d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f004 fad7 	bl	800db8c <USB_ReadInterrupts>
 80095de:	4603      	mov	r3, r0
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d10a      	bne.n	80095fe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f006 ff02 	bl	80103f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	695a      	ldr	r2, [r3, #20]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f002 0208 	and.w	r2, r2, #8
 80095fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	f004 fac2 	bl	800db8c <USB_ReadInterrupts>
 8009608:	4603      	mov	r3, r0
 800960a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800960e:	2b80      	cmp	r3, #128	@ 0x80
 8009610:	d123      	bne.n	800965a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800961e:	2301      	movs	r3, #1
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
 8009622:	e014      	b.n	800964e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009628:	4613      	mov	r3, r2
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	440b      	add	r3, r1
 8009632:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d105      	bne.n	8009648 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963e:	b2db      	uxtb	r3, r3
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fb0a 	bl	8009c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	3301      	adds	r3, #1
 800964c:	627b      	str	r3, [r7, #36]	@ 0x24
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	791b      	ldrb	r3, [r3, #4]
 8009652:	461a      	mov	r2, r3
 8009654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009656:	4293      	cmp	r3, r2
 8009658:	d3e4      	bcc.n	8009624 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f004 fa94 	bl	800db8c <USB_ReadInterrupts>
 8009664:	4603      	mov	r3, r0
 8009666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800966a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800966e:	d13c      	bne.n	80096ea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009670:	2301      	movs	r3, #1
 8009672:	627b      	str	r3, [r7, #36]	@ 0x24
 8009674:	e02b      	b.n	80096ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800968a:	4613      	mov	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	3318      	adds	r3, #24
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d115      	bne.n	80096c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800969c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800969e:	2b00      	cmp	r3, #0
 80096a0:	da12      	bge.n	80096c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a6:	4613      	mov	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	4413      	add	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	3317      	adds	r3, #23
 80096b2:	2201      	movs	r2, #1
 80096b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 faca 	bl	8009c5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	3301      	adds	r3, #1
 80096cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	461a      	mov	r2, r3
 80096d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d3cd      	bcc.n	8009676 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695a      	ldr	r2, [r3, #20]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80096e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f004 fa4c 	bl	800db8c <USB_ReadInterrupts>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096fe:	d156      	bne.n	80097ae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009700:	2301      	movs	r3, #1
 8009702:	627b      	str	r3, [r7, #36]	@ 0x24
 8009704:	e045      	b.n	8009792 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	4413      	add	r3, r2
 800970e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800971a:	4613      	mov	r3, r2
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	4413      	add	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	440b      	add	r3, r1
 8009724:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d12e      	bne.n	800978c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800972e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009730:	2b00      	cmp	r3, #0
 8009732:	da2b      	bge.n	800978c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009740:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009744:	429a      	cmp	r2, r3
 8009746:	d121      	bne.n	800978c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800974c:	4613      	mov	r3, r2
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	440b      	add	r3, r1
 8009756:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800975a:	2201      	movs	r2, #1
 800975c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009784:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009788:	6053      	str	r3, [r2, #4]
            break;
 800978a:	e008      	b.n	800979e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	3301      	adds	r3, #1
 8009790:	627b      	str	r3, [r7, #36]	@ 0x24
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	791b      	ldrb	r3, [r3, #4]
 8009796:	461a      	mov	r2, r3
 8009798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979a:	4293      	cmp	r3, r2
 800979c:	d3b3      	bcc.n	8009706 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	695a      	ldr	r2, [r3, #20]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80097ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f004 f9ea 	bl	800db8c <USB_ReadInterrupts>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80097be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097c2:	d10a      	bne.n	80097da <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f006 fe99 	bl	80104fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80097d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f004 f9d4 	bl	800db8c <USB_ReadInterrupts>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f003 0304 	and.w	r3, r3, #4
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d115      	bne.n	800981a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f006 fe89 	bl	8010518 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6859      	ldr	r1, [r3, #4]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
 8009816:	e000      	b.n	800981a <HAL_PCD_IRQHandler+0x93c>
      return;
 8009818:	bf00      	nop
    }
  }
}
 800981a:	3734      	adds	r7, #52	@ 0x34
 800981c:	46bd      	mov	sp, r7
 800981e:	bd90      	pop	{r4, r7, pc}

08009820 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_PCD_SetAddress+0x1a>
 8009836:	2302      	movs	r3, #2
 8009838:	e012      	b.n	8009860 <HAL_PCD_SetAddress+0x40>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	78fa      	ldrb	r2, [r7, #3]
 8009846:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f004 f933 	bl	800dabc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4603      	mov	r3, r0
 8009878:	70fb      	strb	r3, [r7, #3]
 800987a:	460b      	mov	r3, r1
 800987c:	803b      	strh	r3, [r7, #0]
 800987e:	4613      	mov	r3, r2
 8009880:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800988a:	2b00      	cmp	r3, #0
 800988c:	da0f      	bge.n	80098ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	f003 020f 	and.w	r2, r3, #15
 8009894:	4613      	mov	r3, r2
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	4413      	add	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	3310      	adds	r3, #16
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	4413      	add	r3, r2
 80098a2:	3304      	adds	r3, #4
 80098a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	705a      	strb	r2, [r3, #1]
 80098ac:	e00f      	b.n	80098ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	f003 020f 	and.w	r2, r3, #15
 80098b4:	4613      	mov	r3, r2
 80098b6:	00db      	lsls	r3, r3, #3
 80098b8:	4413      	add	r3, r2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4413      	add	r3, r2
 80098c4:	3304      	adds	r3, #4
 80098c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	f003 030f 	and.w	r3, r3, #15
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80098da:	883b      	ldrh	r3, [r7, #0]
 80098dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	78ba      	ldrb	r2, [r7, #2]
 80098e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d004      	beq.n	80098fc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80098fc:	78bb      	ldrb	r3, [r7, #2]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d102      	bne.n	8009908 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800990e:	2b01      	cmp	r3, #1
 8009910:	d101      	bne.n	8009916 <HAL_PCD_EP_Open+0xae>
 8009912:	2302      	movs	r3, #2
 8009914:	e00e      	b.n	8009934 <HAL_PCD_EP_Open+0xcc>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68f9      	ldr	r1, [r7, #12]
 8009924:	4618      	mov	r0, r3
 8009926:	f003 fab3 	bl	800ce90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009932:	7afb      	ldrb	r3, [r7, #11]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	460b      	mov	r3, r1
 8009946:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800994c:	2b00      	cmp	r3, #0
 800994e:	da0f      	bge.n	8009970 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009950:	78fb      	ldrb	r3, [r7, #3]
 8009952:	f003 020f 	and.w	r2, r3, #15
 8009956:	4613      	mov	r3, r2
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	3310      	adds	r3, #16
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	4413      	add	r3, r2
 8009964:	3304      	adds	r3, #4
 8009966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	705a      	strb	r2, [r3, #1]
 800996e:	e00f      	b.n	8009990 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009970:	78fb      	ldrb	r3, [r7, #3]
 8009972:	f003 020f 	and.w	r2, r3, #15
 8009976:	4613      	mov	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	4413      	add	r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	3304      	adds	r3, #4
 8009988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	b2da      	uxtb	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_PCD_EP_Close+0x6e>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e00e      	b.n	80099c8 <HAL_PCD_EP_Close+0x8c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	68f9      	ldr	r1, [r7, #12]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f003 faf1 	bl	800cfa0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	607a      	str	r2, [r7, #4]
 80099da:	603b      	str	r3, [r7, #0]
 80099dc:	460b      	mov	r3, r1
 80099de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099e0:	7afb      	ldrb	r3, [r7, #11]
 80099e2:	f003 020f 	and.w	r2, r3, #15
 80099e6:	4613      	mov	r3, r2
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	4413      	add	r3, r2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	3304      	adds	r3, #4
 80099f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a12:	7afb      	ldrb	r3, [r7, #11]
 8009a14:	f003 030f 	and.w	r3, r3, #15
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	799b      	ldrb	r3, [r3, #6]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d102      	bne.n	8009a2c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	799b      	ldrb	r3, [r3, #6]
 8009a34:	461a      	mov	r2, r3
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	f003 fb8e 	bl	800d158 <USB_EPStartXfer>

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	f003 020f 	and.w	r2, r3, #15
 8009a58:	6879      	ldr	r1, [r7, #4]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	00db      	lsls	r3, r3, #3
 8009a5e:	4413      	add	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	440b      	add	r3, r1
 8009a64:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009a68:	681b      	ldr	r3, [r3, #0]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b086      	sub	sp, #24
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	460b      	mov	r3, r1
 8009a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a86:	7afb      	ldrb	r3, [r7, #11]
 8009a88:	f003 020f 	and.w	r2, r3, #15
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	4413      	add	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	3310      	adds	r3, #16
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	4413      	add	r3, r2
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2200      	movs	r2, #0
 8009aae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	f003 030f 	and.w	r3, r3, #15
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	799b      	ldrb	r3, [r3, #6]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d102      	bne.n	8009ad0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	799b      	ldrb	r3, [r3, #6]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6979      	ldr	r1, [r7, #20]
 8009adc:	f003 fb3c 	bl	800d158 <USB_EPStartXfer>

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	460b      	mov	r3, r1
 8009af4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	f003 030f 	and.w	r3, r3, #15
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7912      	ldrb	r2, [r2, #4]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d901      	bls.n	8009b08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e04f      	b.n	8009ba8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	da0f      	bge.n	8009b30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	f003 020f 	and.w	r2, r3, #15
 8009b16:	4613      	mov	r3, r2
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	3310      	adds	r3, #16
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	3304      	adds	r3, #4
 8009b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	705a      	strb	r2, [r3, #1]
 8009b2e:	e00d      	b.n	8009b4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009b30:	78fa      	ldrb	r2, [r7, #3]
 8009b32:	4613      	mov	r3, r2
 8009b34:	00db      	lsls	r3, r3, #3
 8009b36:	4413      	add	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	4413      	add	r3, r2
 8009b42:	3304      	adds	r3, #4
 8009b44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	f003 030f 	and.w	r3, r3, #15
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d101      	bne.n	8009b6c <HAL_PCD_EP_SetStall+0x82>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e01d      	b.n	8009ba8 <HAL_PCD_EP_SetStall+0xbe>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68f9      	ldr	r1, [r7, #12]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f003 feca 	bl	800d914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	f003 030f 	and.w	r3, r3, #15
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d109      	bne.n	8009b9e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7999      	ldrb	r1, [r3, #6]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f004 f8bb 	bl	800dd14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009bbc:	78fb      	ldrb	r3, [r7, #3]
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	7912      	ldrb	r2, [r2, #4]
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d901      	bls.n	8009bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e042      	b.n	8009c54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da0f      	bge.n	8009bf6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bd6:	78fb      	ldrb	r3, [r7, #3]
 8009bd8:	f003 020f 	and.w	r2, r3, #15
 8009bdc:	4613      	mov	r3, r2
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	3310      	adds	r3, #16
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	4413      	add	r3, r2
 8009bea:	3304      	adds	r3, #4
 8009bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	705a      	strb	r2, [r3, #1]
 8009bf4:	e00f      	b.n	8009c16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bf6:	78fb      	ldrb	r3, [r7, #3]
 8009bf8:	f003 020f 	and.w	r2, r3, #15
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	f003 030f 	and.w	r3, r3, #15
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_PCD_EP_ClrStall+0x86>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e00e      	b.n	8009c54 <HAL_PCD_EP_ClrStall+0xa4>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68f9      	ldr	r1, [r7, #12]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f003 fed3 	bl	800d9f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	da0c      	bge.n	8009c8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	f003 020f 	and.w	r2, r3, #15
 8009c76:	4613      	mov	r3, r2
 8009c78:	00db      	lsls	r3, r3, #3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	3310      	adds	r3, #16
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	4413      	add	r3, r2
 8009c84:	3304      	adds	r3, #4
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e00c      	b.n	8009ca4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	f003 020f 	and.w	r2, r3, #15
 8009c90:	4613      	mov	r3, r2
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68f9      	ldr	r1, [r7, #12]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f003 fcf2 	bl	800d694 <USB_EPStopXfer>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b08a      	sub	sp, #40	@ 0x28
 8009cc2:	af02      	add	r7, sp, #8
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	4413      	add	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	3310      	adds	r3, #16
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	695a      	ldr	r2, [r3, #20]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d901      	bls.n	8009cf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e06b      	b.n	8009dce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	691a      	ldr	r2, [r3, #16]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	69fa      	ldr	r2, [r7, #28]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d902      	bls.n	8009d12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	3303      	adds	r3, #3
 8009d16:	089b      	lsrs	r3, r3, #2
 8009d18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d1a:	e02a      	b.n	8009d72 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	691a      	ldr	r2, [r3, #16]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	695b      	ldr	r3, [r3, #20]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	69fa      	ldr	r2, [r7, #28]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d902      	bls.n	8009d38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	3303      	adds	r3, #3
 8009d3c:	089b      	lsrs	r3, r3, #2
 8009d3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68d9      	ldr	r1, [r3, #12]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	4603      	mov	r3, r0
 8009d54:	6978      	ldr	r0, [r7, #20]
 8009d56:	f003 fd47 	bl	800d7e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	695a      	ldr	r2, [r3, #20]
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	441a      	add	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d809      	bhi.n	8009d9c <PCD_WriteEmptyTxFifo+0xde>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	695a      	ldr	r2, [r3, #20]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d203      	bcs.n	8009d9c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1bf      	bne.n	8009d1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	691a      	ldr	r2, [r3, #16]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	695b      	ldr	r3, [r3, #20]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d811      	bhi.n	8009dcc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	2201      	movs	r2, #1
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	6939      	ldr	r1, [r7, #16]
 8009dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dc8:	4013      	ands	r3, r2
 8009dca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3720      	adds	r7, #32
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	333c      	adds	r3, #60	@ 0x3c
 8009df0:	3304      	adds	r3, #4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	799b      	ldrb	r3, [r3, #6]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d17b      	bne.n	8009f06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f003 0308 	and.w	r3, r3, #8
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d015      	beq.n	8009e44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	4a61      	ldr	r2, [pc, #388]	@ (8009fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	f240 80b9 	bls.w	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 80b3 	beq.w	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e40:	6093      	str	r3, [r2, #8]
 8009e42:	e0a7      	b.n	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d009      	beq.n	8009e62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	2320      	movs	r3, #32
 8009e5e:	6093      	str	r3, [r2, #8]
 8009e60:	e098      	b.n	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f040 8093 	bne.w	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	4a4b      	ldr	r2, [pc, #300]	@ (8009fa0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d90f      	bls.n	8009e96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e92:	6093      	str	r3, [r2, #8]
 8009e94:	e07e      	b.n	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6a1a      	ldr	r2, [r3, #32]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	0159      	lsls	r1, r3, #5
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	440b      	add	r3, r1
 8009eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec2:	1ad2      	subs	r2, r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d114      	bne.n	8009ef8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	f003 ff16 	bl	800dd14 <USB_EP0_OutStart>
 8009ee8:	e006      	b.n	8009ef8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68da      	ldr	r2, [r3, #12]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	441a      	add	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f006 fa42 	bl	8010388 <HAL_PCD_DataOutStageCallback>
 8009f04:	e046      	b.n	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	4a26      	ldr	r2, [pc, #152]	@ (8009fa4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d124      	bne.n	8009f58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f24:	461a      	mov	r2, r3
 8009f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f2a:	6093      	str	r3, [r2, #8]
 8009f2c:	e032      	b.n	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d008      	beq.n	8009f4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f44:	461a      	mov	r2, r3
 8009f46:	2320      	movs	r3, #32
 8009f48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f006 fa19 	bl	8010388 <HAL_PCD_DataOutStageCallback>
 8009f56:	e01d      	b.n	8009f94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d114      	bne.n	8009f88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	4613      	mov	r3, r2
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d108      	bne.n	8009f88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f80:	461a      	mov	r2, r3
 8009f82:	2100      	movs	r1, #0
 8009f84:	f003 fec6 	bl	800dd14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f006 f9fa 	bl	8010388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	4f54300a 	.word	0x4f54300a
 8009fa4:	4f54310a 	.word	0x4f54310a

08009fa8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	333c      	adds	r3, #60	@ 0x3c
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	015a      	lsls	r2, r3, #5
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	4413      	add	r3, r2
 8009fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	4a15      	ldr	r2, [pc, #84]	@ (800a030 <PCD_EP_OutSetupPacket_int+0x88>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d90e      	bls.n	8009ffc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d009      	beq.n	8009ffc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ffa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f006 f9b1 	bl	8010364 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	4a0a      	ldr	r2, [pc, #40]	@ (800a030 <PCD_EP_OutSetupPacket_int+0x88>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d90c      	bls.n	800a024 <PCD_EP_OutSetupPacket_int+0x7c>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	799b      	ldrb	r3, [r3, #6]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d108      	bne.n	800a024 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a01c:	461a      	mov	r2, r3
 800a01e:	2101      	movs	r1, #1
 800a020:	f003 fe78 	bl	800dd14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	4f54300a 	.word	0x4f54300a

0800a034 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
 800a040:	4613      	mov	r3, r2
 800a042:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d107      	bne.n	800a062 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a052:	883b      	ldrh	r3, [r7, #0]
 800a054:	0419      	lsls	r1, r3, #16
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	430a      	orrs	r2, r1
 800a05e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a060:	e028      	b.n	800a0b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	4413      	add	r3, r2
 800a06e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
 800a074:	e00d      	b.n	800a092 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	3340      	adds	r3, #64	@ 0x40
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	0c1b      	lsrs	r3, r3, #16
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4413      	add	r3, r2
 800a08a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	3301      	adds	r3, #1
 800a090:	73fb      	strb	r3, [r7, #15]
 800a092:	7bfa      	ldrb	r2, [r7, #15]
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	3b01      	subs	r3, #1
 800a098:	429a      	cmp	r2, r3
 800a09a:	d3ec      	bcc.n	800a076 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a09c:	883b      	ldrh	r3, [r7, #0]
 800a09e:	0418      	lsls	r0, r3, #16
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6819      	ldr	r1, [r3, #0]
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	4302      	orrs	r2, r0
 800a0ac:	3340      	adds	r3, #64	@ 0x40
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	440b      	add	r3, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	887a      	ldrh	r2, [r7, #2]
 800a0d4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e267      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b00      	cmp	r3, #0
 800a118:	d075      	beq.n	800a206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a11a:	4b88      	ldr	r3, [pc, #544]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f003 030c 	and.w	r3, r3, #12
 800a122:	2b04      	cmp	r3, #4
 800a124:	d00c      	beq.n	800a140 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a126:	4b85      	ldr	r3, [pc, #532]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a12e:	2b08      	cmp	r3, #8
 800a130:	d112      	bne.n	800a158 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a132:	4b82      	ldr	r3, [pc, #520]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a13a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a13e:	d10b      	bne.n	800a158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a140:	4b7e      	ldr	r3, [pc, #504]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d05b      	beq.n	800a204 <HAL_RCC_OscConfig+0x108>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d157      	bne.n	800a204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e242      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a160:	d106      	bne.n	800a170 <HAL_RCC_OscConfig+0x74>
 800a162:	4b76      	ldr	r3, [pc, #472]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a75      	ldr	r2, [pc, #468]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	e01d      	b.n	800a1ac <HAL_RCC_OscConfig+0xb0>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a178:	d10c      	bne.n	800a194 <HAL_RCC_OscConfig+0x98>
 800a17a:	4b70      	ldr	r3, [pc, #448]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a6f      	ldr	r2, [pc, #444]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a180:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	4b6d      	ldr	r3, [pc, #436]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a6c      	ldr	r2, [pc, #432]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a18c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	e00b      	b.n	800a1ac <HAL_RCC_OscConfig+0xb0>
 800a194:	4b69      	ldr	r3, [pc, #420]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a68      	ldr	r2, [pc, #416]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a19a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	4b66      	ldr	r3, [pc, #408]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a65      	ldr	r2, [pc, #404]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a1a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d013      	beq.n	800a1dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1b4:	f7f9 fd14 	bl	8003be0 <HAL_GetTick>
 800a1b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ba:	e008      	b.n	800a1ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1bc:	f7f9 fd10 	bl	8003be0 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b64      	cmp	r3, #100	@ 0x64
 800a1c8:	d901      	bls.n	800a1ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e207      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1ce:	4b5b      	ldr	r3, [pc, #364]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0f0      	beq.n	800a1bc <HAL_RCC_OscConfig+0xc0>
 800a1da:	e014      	b.n	800a206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1dc:	f7f9 fd00 	bl	8003be0 <HAL_GetTick>
 800a1e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1e2:	e008      	b.n	800a1f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1e4:	f7f9 fcfc 	bl	8003be0 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b64      	cmp	r3, #100	@ 0x64
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e1f3      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1f6:	4b51      	ldr	r3, [pc, #324]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1f0      	bne.n	800a1e4 <HAL_RCC_OscConfig+0xe8>
 800a202:	e000      	b.n	800a206 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 0302 	and.w	r3, r3, #2
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d063      	beq.n	800a2da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a212:	4b4a      	ldr	r3, [pc, #296]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 030c 	and.w	r3, r3, #12
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a21e:	4b47      	ldr	r3, [pc, #284]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a226:	2b08      	cmp	r3, #8
 800a228:	d11c      	bne.n	800a264 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a22a:	4b44      	ldr	r3, [pc, #272]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d116      	bne.n	800a264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a236:	4b41      	ldr	r3, [pc, #260]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d005      	beq.n	800a24e <HAL_RCC_OscConfig+0x152>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d001      	beq.n	800a24e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e1c7      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a24e:	4b3b      	ldr	r3, [pc, #236]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4937      	ldr	r1, [pc, #220]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a262:	e03a      	b.n	800a2da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d020      	beq.n	800a2ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a26c:	4b34      	ldr	r3, [pc, #208]	@ (800a340 <HAL_RCC_OscConfig+0x244>)
 800a26e:	2201      	movs	r2, #1
 800a270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a272:	f7f9 fcb5 	bl	8003be0 <HAL_GetTick>
 800a276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a278:	e008      	b.n	800a28c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a27a:	f7f9 fcb1 	bl	8003be0 <HAL_GetTick>
 800a27e:	4602      	mov	r2, r0
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	2b02      	cmp	r3, #2
 800a286:	d901      	bls.n	800a28c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a288:	2303      	movs	r3, #3
 800a28a:	e1a8      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a28c:	4b2b      	ldr	r3, [pc, #172]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0f0      	beq.n	800a27a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a298:	4b28      	ldr	r3, [pc, #160]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	00db      	lsls	r3, r3, #3
 800a2a6:	4925      	ldr	r1, [pc, #148]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	600b      	str	r3, [r1, #0]
 800a2ac:	e015      	b.n	800a2da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2ae:	4b24      	ldr	r3, [pc, #144]	@ (800a340 <HAL_RCC_OscConfig+0x244>)
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2b4:	f7f9 fc94 	bl	8003be0 <HAL_GetTick>
 800a2b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2ba:	e008      	b.n	800a2ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2bc:	f7f9 fc90 	bl	8003be0 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d901      	bls.n	800a2ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	e187      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0302 	and.w	r3, r3, #2
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1f0      	bne.n	800a2bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d036      	beq.n	800a354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d016      	beq.n	800a31c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2ee:	4b15      	ldr	r3, [pc, #84]	@ (800a344 <HAL_RCC_OscConfig+0x248>)
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f4:	f7f9 fc74 	bl	8003be0 <HAL_GetTick>
 800a2f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2fa:	e008      	b.n	800a30e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2fc:	f7f9 fc70 	bl	8003be0 <HAL_GetTick>
 800a300:	4602      	mov	r2, r0
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	1ad3      	subs	r3, r2, r3
 800a306:	2b02      	cmp	r3, #2
 800a308:	d901      	bls.n	800a30e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e167      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a30e:	4b0b      	ldr	r3, [pc, #44]	@ (800a33c <HAL_RCC_OscConfig+0x240>)
 800a310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b00      	cmp	r3, #0
 800a318:	d0f0      	beq.n	800a2fc <HAL_RCC_OscConfig+0x200>
 800a31a:	e01b      	b.n	800a354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a31c:	4b09      	ldr	r3, [pc, #36]	@ (800a344 <HAL_RCC_OscConfig+0x248>)
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a322:	f7f9 fc5d 	bl	8003be0 <HAL_GetTick>
 800a326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a328:	e00e      	b.n	800a348 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a32a:	f7f9 fc59 	bl	8003be0 <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d907      	bls.n	800a348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e150      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
 800a33c:	40023800 	.word	0x40023800
 800a340:	42470000 	.word	0x42470000
 800a344:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a348:	4b88      	ldr	r3, [pc, #544]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a34a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1ea      	bne.n	800a32a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8097 	beq.w	800a490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a362:	2300      	movs	r3, #0
 800a364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a366:	4b81      	ldr	r3, [pc, #516]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a36a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10f      	bne.n	800a392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a372:	2300      	movs	r3, #0
 800a374:	60bb      	str	r3, [r7, #8]
 800a376:	4b7d      	ldr	r3, [pc, #500]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a37a:	4a7c      	ldr	r2, [pc, #496]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a37c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a380:	6413      	str	r3, [r2, #64]	@ 0x40
 800a382:	4b7a      	ldr	r3, [pc, #488]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a38a:	60bb      	str	r3, [r7, #8]
 800a38c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a38e:	2301      	movs	r3, #1
 800a390:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a392:	4b77      	ldr	r3, [pc, #476]	@ (800a570 <HAL_RCC_OscConfig+0x474>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d118      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a39e:	4b74      	ldr	r3, [pc, #464]	@ (800a570 <HAL_RCC_OscConfig+0x474>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a73      	ldr	r2, [pc, #460]	@ (800a570 <HAL_RCC_OscConfig+0x474>)
 800a3a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3aa:	f7f9 fc19 	bl	8003be0 <HAL_GetTick>
 800a3ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3b0:	e008      	b.n	800a3c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3b2:	f7f9 fc15 	bl	8003be0 <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d901      	bls.n	800a3c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e10c      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3c4:	4b6a      	ldr	r3, [pc, #424]	@ (800a570 <HAL_RCC_OscConfig+0x474>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0f0      	beq.n	800a3b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d106      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x2ea>
 800a3d8:	4b64      	ldr	r3, [pc, #400]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a3da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3dc:	4a63      	ldr	r2, [pc, #396]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3e4:	e01c      	b.n	800a420 <HAL_RCC_OscConfig+0x324>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	d10c      	bne.n	800a408 <HAL_RCC_OscConfig+0x30c>
 800a3ee:	4b5f      	ldr	r3, [pc, #380]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3f2:	4a5e      	ldr	r2, [pc, #376]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a3f4:	f043 0304 	orr.w	r3, r3, #4
 800a3f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3fa:	4b5c      	ldr	r3, [pc, #368]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3fe:	4a5b      	ldr	r2, [pc, #364]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a400:	f043 0301 	orr.w	r3, r3, #1
 800a404:	6713      	str	r3, [r2, #112]	@ 0x70
 800a406:	e00b      	b.n	800a420 <HAL_RCC_OscConfig+0x324>
 800a408:	4b58      	ldr	r3, [pc, #352]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a40c:	4a57      	ldr	r2, [pc, #348]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a40e:	f023 0301 	bic.w	r3, r3, #1
 800a412:	6713      	str	r3, [r2, #112]	@ 0x70
 800a414:	4b55      	ldr	r3, [pc, #340]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a418:	4a54      	ldr	r2, [pc, #336]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a41a:	f023 0304 	bic.w	r3, r3, #4
 800a41e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d015      	beq.n	800a454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a428:	f7f9 fbda 	bl	8003be0 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a42e:	e00a      	b.n	800a446 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a430:	f7f9 fbd6 	bl	8003be0 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a43e:	4293      	cmp	r3, r2
 800a440:	d901      	bls.n	800a446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e0cb      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a446:	4b49      	ldr	r3, [pc, #292]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0ee      	beq.n	800a430 <HAL_RCC_OscConfig+0x334>
 800a452:	e014      	b.n	800a47e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a454:	f7f9 fbc4 	bl	8003be0 <HAL_GetTick>
 800a458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a45a:	e00a      	b.n	800a472 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a45c:	f7f9 fbc0 	bl	8003be0 <HAL_GetTick>
 800a460:	4602      	mov	r2, r0
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e0b5      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a472:	4b3e      	ldr	r3, [pc, #248]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1ee      	bne.n	800a45c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d105      	bne.n	800a490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a484:	4b39      	ldr	r3, [pc, #228]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a488:	4a38      	ldr	r2, [pc, #224]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a48a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a48e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 80a1 	beq.w	800a5dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a49a:	4b34      	ldr	r3, [pc, #208]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 030c 	and.w	r3, r3, #12
 800a4a2:	2b08      	cmp	r3, #8
 800a4a4:	d05c      	beq.n	800a560 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d141      	bne.n	800a532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ae:	4b31      	ldr	r3, [pc, #196]	@ (800a574 <HAL_RCC_OscConfig+0x478>)
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4b4:	f7f9 fb94 	bl	8003be0 <HAL_GetTick>
 800a4b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ba:	e008      	b.n	800a4ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4bc:	f7f9 fb90 	bl	8003be0 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d901      	bls.n	800a4ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e087      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ce:	4b27      	ldr	r3, [pc, #156]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f0      	bne.n	800a4bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	69da      	ldr	r2, [r3, #28]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	019b      	lsls	r3, r3, #6
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	041b      	lsls	r3, r3, #16
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fc:	061b      	lsls	r3, r3, #24
 800a4fe:	491b      	ldr	r1, [pc, #108]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a500:	4313      	orrs	r3, r2
 800a502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a504:	4b1b      	ldr	r3, [pc, #108]	@ (800a574 <HAL_RCC_OscConfig+0x478>)
 800a506:	2201      	movs	r2, #1
 800a508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a50a:	f7f9 fb69 	bl	8003be0 <HAL_GetTick>
 800a50e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a510:	e008      	b.n	800a524 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a512:	f7f9 fb65 	bl	8003be0 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d901      	bls.n	800a524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	e05c      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a524:	4b11      	ldr	r3, [pc, #68]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0f0      	beq.n	800a512 <HAL_RCC_OscConfig+0x416>
 800a530:	e054      	b.n	800a5dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a532:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <HAL_RCC_OscConfig+0x478>)
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a538:	f7f9 fb52 	bl	8003be0 <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53e:	e008      	b.n	800a552 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a540:	f7f9 fb4e 	bl	8003be0 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e045      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a552:	4b06      	ldr	r3, [pc, #24]	@ (800a56c <HAL_RCC_OscConfig+0x470>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1f0      	bne.n	800a540 <HAL_RCC_OscConfig+0x444>
 800a55e:	e03d      	b.n	800a5dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d107      	bne.n	800a578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e038      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
 800a56c:	40023800 	.word	0x40023800
 800a570:	40007000 	.word	0x40007000
 800a574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a578:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e8 <HAL_RCC_OscConfig+0x4ec>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d028      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a590:	429a      	cmp	r2, r3
 800a592:	d121      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d11a      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a5ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d111      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d001      	beq.n	800a5dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e000      	b.n	800a5de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	40023800 	.word	0x40023800

0800a5ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0cc      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a600:	4b68      	ldr	r3, [pc, #416]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d90c      	bls.n	800a628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a60e:	4b65      	ldr	r3, [pc, #404]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a616:	4b63      	ldr	r3, [pc, #396]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d001      	beq.n	800a628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e0b8      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0302 	and.w	r3, r3, #2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d020      	beq.n	800a676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d005      	beq.n	800a64c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a640:	4b59      	ldr	r3, [pc, #356]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	4a58      	ldr	r2, [pc, #352]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a646:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a64a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0308 	and.w	r3, r3, #8
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a658:	4b53      	ldr	r3, [pc, #332]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	4a52      	ldr	r2, [pc, #328]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a65e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a664:	4b50      	ldr	r3, [pc, #320]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	494d      	ldr	r1, [pc, #308]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a672:	4313      	orrs	r3, r2
 800a674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d044      	beq.n	800a70c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d107      	bne.n	800a69a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a68a:	4b47      	ldr	r3, [pc, #284]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a692:	2b00      	cmp	r3, #0
 800a694:	d119      	bne.n	800a6ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e07f      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d003      	beq.n	800a6aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d107      	bne.n	800a6ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d109      	bne.n	800a6ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e06f      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 0302 	and.w	r3, r3, #2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e067      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ca:	4b37      	ldr	r3, [pc, #220]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f023 0203 	bic.w	r2, r3, #3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	4934      	ldr	r1, [pc, #208]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6dc:	f7f9 fa80 	bl	8003be0 <HAL_GetTick>
 800a6e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6e2:	e00a      	b.n	800a6fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6e4:	f7f9 fa7c 	bl	8003be0 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d901      	bls.n	800a6fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e04f      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 020c 	and.w	r2, r3, #12
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	429a      	cmp	r2, r3
 800a70a:	d1eb      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a70c:	4b25      	ldr	r3, [pc, #148]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0307 	and.w	r3, r3, #7
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d20c      	bcs.n	800a734 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a71a:	4b22      	ldr	r3, [pc, #136]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	b2d2      	uxtb	r2, r2
 800a720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a722:	4b20      	ldr	r3, [pc, #128]	@ (800a7a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d001      	beq.n	800a734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a730:	2301      	movs	r3, #1
 800a732:	e032      	b.n	800a79a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a740:	4b19      	ldr	r3, [pc, #100]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	4916      	ldr	r1, [pc, #88]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0308 	and.w	r3, r3, #8
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a75e:	4b12      	ldr	r3, [pc, #72]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	00db      	lsls	r3, r3, #3
 800a76c:	490e      	ldr	r1, [pc, #56]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a772:	f000 f82d 	bl	800a7d0 <HAL_RCC_GetSysClockFreq>
 800a776:	4602      	mov	r2, r0
 800a778:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	091b      	lsrs	r3, r3, #4
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	490a      	ldr	r1, [pc, #40]	@ (800a7ac <HAL_RCC_ClockConfig+0x1c0>)
 800a784:	5ccb      	ldrb	r3, [r1, r3]
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	4a09      	ldr	r2, [pc, #36]	@ (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a78c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a78e:	4b09      	ldr	r3, [pc, #36]	@ (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4618      	mov	r0, r3
 800a794:	f7f9 f9e0 	bl	8003b58 <HAL_InitTick>

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	40023c00 	.word	0x40023c00
 800a7a8:	40023800 	.word	0x40023800
 800a7ac:	08012410 	.word	0x08012410
 800a7b0:	20000010 	.word	0x20000010
 800a7b4:	20000014 	.word	0x20000014

0800a7b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a7bc:	4b03      	ldr	r3, [pc, #12]	@ (800a7cc <HAL_RCC_EnableCSS+0x14>)
 800a7be:	2201      	movs	r2, #1
 800a7c0:	601a      	str	r2, [r3, #0]
}
 800a7c2:	bf00      	nop
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	4247004c 	.word	0x4247004c

0800a7d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7d4:	b090      	sub	sp, #64	@ 0x40
 800a7d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7e8:	4b59      	ldr	r3, [pc, #356]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f003 030c 	and.w	r3, r3, #12
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d00d      	beq.n	800a810 <HAL_RCC_GetSysClockFreq+0x40>
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	f200 80a1 	bhi.w	800a93c <HAL_RCC_GetSysClockFreq+0x16c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <HAL_RCC_GetSysClockFreq+0x34>
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d003      	beq.n	800a80a <HAL_RCC_GetSysClockFreq+0x3a>
 800a802:	e09b      	b.n	800a93c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a804:	4b53      	ldr	r3, [pc, #332]	@ (800a954 <HAL_RCC_GetSysClockFreq+0x184>)
 800a806:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a808:	e09b      	b.n	800a942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a80a:	4b53      	ldr	r3, [pc, #332]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x188>)
 800a80c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a80e:	e098      	b.n	800a942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a810:	4b4f      	ldr	r3, [pc, #316]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a818:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a81a:	4b4d      	ldr	r3, [pc, #308]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d028      	beq.n	800a878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a826:	4b4a      	ldr	r3, [pc, #296]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	099b      	lsrs	r3, r3, #6
 800a82c:	2200      	movs	r2, #0
 800a82e:	623b      	str	r3, [r7, #32]
 800a830:	627a      	str	r2, [r7, #36]	@ 0x24
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a838:	2100      	movs	r1, #0
 800a83a:	4b47      	ldr	r3, [pc, #284]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x188>)
 800a83c:	fb03 f201 	mul.w	r2, r3, r1
 800a840:	2300      	movs	r3, #0
 800a842:	fb00 f303 	mul.w	r3, r0, r3
 800a846:	4413      	add	r3, r2
 800a848:	4a43      	ldr	r2, [pc, #268]	@ (800a958 <HAL_RCC_GetSysClockFreq+0x188>)
 800a84a:	fba0 1202 	umull	r1, r2, r0, r2
 800a84e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a850:	460a      	mov	r2, r1
 800a852:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a856:	4413      	add	r3, r2
 800a858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85c:	2200      	movs	r2, #0
 800a85e:	61bb      	str	r3, [r7, #24]
 800a860:	61fa      	str	r2, [r7, #28]
 800a862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a86a:	f7f5 fd09 	bl	8000280 <__aeabi_uldivmod>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4613      	mov	r3, r2
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a876:	e053      	b.n	800a920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a878:	4b35      	ldr	r3, [pc, #212]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	099b      	lsrs	r3, r3, #6
 800a87e:	2200      	movs	r2, #0
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	617a      	str	r2, [r7, #20]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a88a:	f04f 0b00 	mov.w	fp, #0
 800a88e:	4652      	mov	r2, sl
 800a890:	465b      	mov	r3, fp
 800a892:	f04f 0000 	mov.w	r0, #0
 800a896:	f04f 0100 	mov.w	r1, #0
 800a89a:	0159      	lsls	r1, r3, #5
 800a89c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8a0:	0150      	lsls	r0, r2, #5
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	ebb2 080a 	subs.w	r8, r2, sl
 800a8aa:	eb63 090b 	sbc.w	r9, r3, fp
 800a8ae:	f04f 0200 	mov.w	r2, #0
 800a8b2:	f04f 0300 	mov.w	r3, #0
 800a8b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a8ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a8be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a8c2:	ebb2 0408 	subs.w	r4, r2, r8
 800a8c6:	eb63 0509 	sbc.w	r5, r3, r9
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	00eb      	lsls	r3, r5, #3
 800a8d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8d8:	00e2      	lsls	r2, r4, #3
 800a8da:	4614      	mov	r4, r2
 800a8dc:	461d      	mov	r5, r3
 800a8de:	eb14 030a 	adds.w	r3, r4, sl
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	eb45 030b 	adc.w	r3, r5, fp
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	028b      	lsls	r3, r1, #10
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a900:	4621      	mov	r1, r4
 800a902:	028a      	lsls	r2, r1, #10
 800a904:	4610      	mov	r0, r2
 800a906:	4619      	mov	r1, r3
 800a908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a90a:	2200      	movs	r2, #0
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	60fa      	str	r2, [r7, #12]
 800a910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a914:	f7f5 fcb4 	bl	8000280 <__aeabi_uldivmod>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4613      	mov	r3, r2
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a920:	4b0b      	ldr	r3, [pc, #44]	@ (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	0c1b      	lsrs	r3, r3, #16
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	3301      	adds	r3, #1
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a930:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	fbb2 f3f3 	udiv	r3, r2, r3
 800a938:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a93a:	e002      	b.n	800a942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <HAL_RCC_GetSysClockFreq+0x184>)
 800a93e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a940:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a944:	4618      	mov	r0, r3
 800a946:	3740      	adds	r7, #64	@ 0x40
 800a948:	46bd      	mov	sp, r7
 800a94a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a94e:	bf00      	nop
 800a950:	40023800 	.word	0x40023800
 800a954:	00f42400 	.word	0x00f42400
 800a958:	017d7840 	.word	0x017d7840

0800a95c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a960:	4b03      	ldr	r3, [pc, #12]	@ (800a970 <HAL_RCC_GetHCLKFreq+0x14>)
 800a962:	681b      	ldr	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	20000010 	.word	0x20000010

0800a974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a978:	f7ff fff0 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a97c:	4602      	mov	r2, r0
 800a97e:	4b05      	ldr	r3, [pc, #20]	@ (800a994 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	0a9b      	lsrs	r3, r3, #10
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	4903      	ldr	r1, [pc, #12]	@ (800a998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a98a:	5ccb      	ldrb	r3, [r1, r3]
 800a98c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a990:	4618      	mov	r0, r3
 800a992:	bd80      	pop	{r7, pc}
 800a994:	40023800 	.word	0x40023800
 800a998:	08012420 	.word	0x08012420

0800a99c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a9a0:	f7ff ffdc 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	0b5b      	lsrs	r3, r3, #13
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	4903      	ldr	r1, [pc, #12]	@ (800a9c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9b2:	5ccb      	ldrb	r3, [r1, r3]
 800a9b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	40023800 	.word	0x40023800
 800a9c0:	08012420 	.word	0x08012420

0800a9c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a9c8:	4b06      	ldr	r3, [pc, #24]	@ (800a9e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d0:	2b80      	cmp	r3, #128	@ 0x80
 800a9d2:	d104      	bne.n	800a9de <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a9d4:	f000 f80a 	bl	800a9ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a9d8:	4b03      	ldr	r3, [pc, #12]	@ (800a9e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a9da:	2280      	movs	r2, #128	@ 0x80
 800a9dc:	701a      	strb	r2, [r3, #0]
  }
}
 800a9de:	bf00      	nop
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40023800 	.word	0x40023800
 800a9e8:	4002380e 	.word	0x4002380e

0800a9ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e041      	b.n	800aa90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d106      	bne.n	800aa26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7f8 fe87 	bl	8003734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3304      	adds	r3, #4
 800aa36:	4619      	mov	r1, r3
 800aa38:	4610      	mov	r0, r2
 800aa3a:	f000 fc3b 	bl	800b2b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d001      	beq.n	800aab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e044      	b.n	800ab3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68da      	ldr	r2, [r3, #12]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0201 	orr.w	r2, r2, #1
 800aac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a1e      	ldr	r2, [pc, #120]	@ (800ab48 <HAL_TIM_Base_Start_IT+0xb0>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d018      	beq.n	800ab04 <HAL_TIM_Base_Start_IT+0x6c>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aada:	d013      	beq.n	800ab04 <HAL_TIM_Base_Start_IT+0x6c>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1a      	ldr	r2, [pc, #104]	@ (800ab4c <HAL_TIM_Base_Start_IT+0xb4>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00e      	beq.n	800ab04 <HAL_TIM_Base_Start_IT+0x6c>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a19      	ldr	r2, [pc, #100]	@ (800ab50 <HAL_TIM_Base_Start_IT+0xb8>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d009      	beq.n	800ab04 <HAL_TIM_Base_Start_IT+0x6c>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a17      	ldr	r2, [pc, #92]	@ (800ab54 <HAL_TIM_Base_Start_IT+0xbc>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d004      	beq.n	800ab04 <HAL_TIM_Base_Start_IT+0x6c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a16      	ldr	r2, [pc, #88]	@ (800ab58 <HAL_TIM_Base_Start_IT+0xc0>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d111      	bne.n	800ab28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b06      	cmp	r3, #6
 800ab14:	d010      	beq.n	800ab38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f042 0201 	orr.w	r2, r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab26:	e007      	b.n	800ab38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0201 	orr.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	40010000 	.word	0x40010000
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	40000800 	.word	0x40000800
 800ab54:	40000c00 	.word	0x40000c00
 800ab58:	40014000 	.word	0x40014000

0800ab5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e041      	b.n	800abf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f839 	bl	800abfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f000 fb8a 	bl	800b2b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
	...

0800ac10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d109      	bne.n	800ac34 <HAL_TIM_PWM_Start+0x24>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	bf14      	ite	ne
 800ac2c:	2301      	movne	r3, #1
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	e022      	b.n	800ac7a <HAL_TIM_PWM_Start+0x6a>
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	2b04      	cmp	r3, #4
 800ac38:	d109      	bne.n	800ac4e <HAL_TIM_PWM_Start+0x3e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	bf14      	ite	ne
 800ac46:	2301      	movne	r3, #1
 800ac48:	2300      	moveq	r3, #0
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	e015      	b.n	800ac7a <HAL_TIM_PWM_Start+0x6a>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d109      	bne.n	800ac68 <HAL_TIM_PWM_Start+0x58>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	bf14      	ite	ne
 800ac60:	2301      	movne	r3, #1
 800ac62:	2300      	moveq	r3, #0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	e008      	b.n	800ac7a <HAL_TIM_PWM_Start+0x6a>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	bf14      	ite	ne
 800ac74:	2301      	movne	r3, #1
 800ac76:	2300      	moveq	r3, #0
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d001      	beq.n	800ac82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e068      	b.n	800ad54 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d104      	bne.n	800ac92 <HAL_TIM_PWM_Start+0x82>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac90:	e013      	b.n	800acba <HAL_TIM_PWM_Start+0xaa>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d104      	bne.n	800aca2 <HAL_TIM_PWM_Start+0x92>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aca0:	e00b      	b.n	800acba <HAL_TIM_PWM_Start+0xaa>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d104      	bne.n	800acb2 <HAL_TIM_PWM_Start+0xa2>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800acb0:	e003      	b.n	800acba <HAL_TIM_PWM_Start+0xaa>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2201      	movs	r2, #1
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fda8 	bl	800b818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a23      	ldr	r2, [pc, #140]	@ (800ad5c <HAL_TIM_PWM_Start+0x14c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d107      	bne.n	800ace2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ace0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad5c <HAL_TIM_PWM_Start+0x14c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d018      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x10e>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf4:	d013      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x10e>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a19      	ldr	r2, [pc, #100]	@ (800ad60 <HAL_TIM_PWM_Start+0x150>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00e      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x10e>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a17      	ldr	r2, [pc, #92]	@ (800ad64 <HAL_TIM_PWM_Start+0x154>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d009      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x10e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a16      	ldr	r2, [pc, #88]	@ (800ad68 <HAL_TIM_PWM_Start+0x158>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d004      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x10e>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a14      	ldr	r2, [pc, #80]	@ (800ad6c <HAL_TIM_PWM_Start+0x15c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d111      	bne.n	800ad42 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b06      	cmp	r3, #6
 800ad2e:	d010      	beq.n	800ad52 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f042 0201 	orr.w	r2, r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad40:	e007      	b.n	800ad52 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f042 0201 	orr.w	r2, r2, #1
 800ad50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	40010000 	.word	0x40010000
 800ad60:	40000400 	.word	0x40000400
 800ad64:	40000800 	.word	0x40000800
 800ad68:	40000c00 	.word	0x40000c00
 800ad6c:	40014000 	.word	0x40014000

0800ad70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d020      	beq.n	800add4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01b      	beq.n	800add4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f06f 0202 	mvn.w	r2, #2
 800ada4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa5b 	bl	800b276 <HAL_TIM_IC_CaptureCallback>
 800adc0:	e005      	b.n	800adce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa4d 	bl	800b262 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fa5e 	bl	800b28a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f003 0304 	and.w	r3, r3, #4
 800adda:	2b00      	cmp	r3, #0
 800addc:	d020      	beq.n	800ae20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d01b      	beq.n	800ae20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0204 	mvn.w	r2, #4
 800adf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2202      	movs	r2, #2
 800adf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa35 	bl	800b276 <HAL_TIM_IC_CaptureCallback>
 800ae0c:	e005      	b.n	800ae1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fa27 	bl	800b262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fa38 	bl	800b28a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d020      	beq.n	800ae6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d01b      	beq.n	800ae6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f06f 0208 	mvn.w	r2, #8
 800ae3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2204      	movs	r2, #4
 800ae42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	69db      	ldr	r3, [r3, #28]
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fa0f 	bl	800b276 <HAL_TIM_IC_CaptureCallback>
 800ae58:	e005      	b.n	800ae66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa01 	bl	800b262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fa12 	bl	800b28a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	f003 0310 	and.w	r3, r3, #16
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d020      	beq.n	800aeb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f003 0310 	and.w	r3, r3, #16
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d01b      	beq.n	800aeb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f06f 0210 	mvn.w	r2, #16
 800ae88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9e9 	bl	800b276 <HAL_TIM_IC_CaptureCallback>
 800aea4:	e005      	b.n	800aeb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9db 	bl	800b262 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9ec 	bl	800b28a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00c      	beq.n	800aedc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f003 0301 	and.w	r3, r3, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d007      	beq.n	800aedc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f06f 0201 	mvn.w	r2, #1
 800aed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7f8 f8b2 	bl	8003040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00c      	beq.n	800af00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d007      	beq.n	800af00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800aef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fd2a 	bl	800b954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00c      	beq.n	800af24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af10:	2b00      	cmp	r3, #0
 800af12:	d007      	beq.n	800af24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f9bd 	bl	800b29e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00c      	beq.n	800af48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f003 0320 	and.w	r3, r3, #32
 800af34:	2b00      	cmp	r3, #0
 800af36:	d007      	beq.n	800af48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f06f 0220 	mvn.w	r2, #32
 800af40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fcfc 	bl	800b940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af66:	2b01      	cmp	r3, #1
 800af68:	d101      	bne.n	800af6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af6a:	2302      	movs	r3, #2
 800af6c:	e0ae      	b.n	800b0cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b0c      	cmp	r3, #12
 800af7a:	f200 809f 	bhi.w	800b0bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800af7e:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800afb9 	.word	0x0800afb9
 800af88:	0800b0bd 	.word	0x0800b0bd
 800af8c:	0800b0bd 	.word	0x0800b0bd
 800af90:	0800b0bd 	.word	0x0800b0bd
 800af94:	0800aff9 	.word	0x0800aff9
 800af98:	0800b0bd 	.word	0x0800b0bd
 800af9c:	0800b0bd 	.word	0x0800b0bd
 800afa0:	0800b0bd 	.word	0x0800b0bd
 800afa4:	0800b03b 	.word	0x0800b03b
 800afa8:	0800b0bd 	.word	0x0800b0bd
 800afac:	0800b0bd 	.word	0x0800b0bd
 800afb0:	0800b0bd 	.word	0x0800b0bd
 800afb4:	0800b07b 	.word	0x0800b07b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68b9      	ldr	r1, [r7, #8]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fa04 	bl	800b3cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	699a      	ldr	r2, [r3, #24]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f042 0208 	orr.w	r2, r2, #8
 800afd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	699a      	ldr	r2, [r3, #24]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0204 	bic.w	r2, r2, #4
 800afe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	6999      	ldr	r1, [r3, #24]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	691a      	ldr	r2, [r3, #16]
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	619a      	str	r2, [r3, #24]
      break;
 800aff6:	e064      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	4618      	mov	r0, r3
 800b000:	f000 fa4a 	bl	800b498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	699a      	ldr	r2, [r3, #24]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6999      	ldr	r1, [r3, #24]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	021a      	lsls	r2, r3, #8
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	619a      	str	r2, [r3, #24]
      break;
 800b038:	e043      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fa95 	bl	800b570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69da      	ldr	r2, [r3, #28]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f042 0208 	orr.w	r2, r2, #8
 800b054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69da      	ldr	r2, [r3, #28]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 0204 	bic.w	r2, r2, #4
 800b064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	69d9      	ldr	r1, [r3, #28]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	691a      	ldr	r2, [r3, #16]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	430a      	orrs	r2, r1
 800b076:	61da      	str	r2, [r3, #28]
      break;
 800b078:	e023      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	4618      	mov	r0, r3
 800b082:	f000 fadf 	bl	800b644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	69da      	ldr	r2, [r3, #28]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	69da      	ldr	r2, [r3, #28]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	69d9      	ldr	r1, [r3, #28]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	021a      	lsls	r2, r3, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	430a      	orrs	r2, r1
 800b0b8:	61da      	str	r2, [r3, #28]
      break;
 800b0ba:	e002      	b.n	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e0b4      	b.n	800b25a <HAL_TIM_ConfigClockSource+0x186>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b10e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b116:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68ba      	ldr	r2, [r7, #8]
 800b11e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b128:	d03e      	beq.n	800b1a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b12a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b12e:	f200 8087 	bhi.w	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b136:	f000 8086 	beq.w	800b246 <HAL_TIM_ConfigClockSource+0x172>
 800b13a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b13e:	d87f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b140:	2b70      	cmp	r3, #112	@ 0x70
 800b142:	d01a      	beq.n	800b17a <HAL_TIM_ConfigClockSource+0xa6>
 800b144:	2b70      	cmp	r3, #112	@ 0x70
 800b146:	d87b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b148:	2b60      	cmp	r3, #96	@ 0x60
 800b14a:	d050      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x11a>
 800b14c:	2b60      	cmp	r3, #96	@ 0x60
 800b14e:	d877      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b150:	2b50      	cmp	r3, #80	@ 0x50
 800b152:	d03c      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0xfa>
 800b154:	2b50      	cmp	r3, #80	@ 0x50
 800b156:	d873      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b158:	2b40      	cmp	r3, #64	@ 0x40
 800b15a:	d058      	beq.n	800b20e <HAL_TIM_ConfigClockSource+0x13a>
 800b15c:	2b40      	cmp	r3, #64	@ 0x40
 800b15e:	d86f      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b160:	2b30      	cmp	r3, #48	@ 0x30
 800b162:	d064      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b164:	2b30      	cmp	r3, #48	@ 0x30
 800b166:	d86b      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b168:	2b20      	cmp	r3, #32
 800b16a:	d060      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d867      	bhi.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d05c      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b174:	2b10      	cmp	r3, #16
 800b176:	d05a      	beq.n	800b22e <HAL_TIM_ConfigClockSource+0x15a>
 800b178:	e062      	b.n	800b240 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b18a:	f000 fb25 	bl	800b7d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b19c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
      break;
 800b1a6:	e04f      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1b8:	f000 fb0e 	bl	800b7d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689a      	ldr	r2, [r3, #8]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1ca:	609a      	str	r2, [r3, #8]
      break;
 800b1cc:	e03c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f000 fa82 	bl	800b6e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2150      	movs	r1, #80	@ 0x50
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 fadb 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800b1ec:	e02c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f000 faa1 	bl	800b742 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2160      	movs	r1, #96	@ 0x60
 800b206:	4618      	mov	r0, r3
 800b208:	f000 facb 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800b20c:	e01c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b21a:	461a      	mov	r2, r3
 800b21c:	f000 fa62 	bl	800b6e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2140      	movs	r1, #64	@ 0x40
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fabb 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800b22c:	e00c      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f000 fab2 	bl	800b7a2 <TIM_ITRx_SetConfig>
      break;
 800b23e:	e003      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	73fb      	strb	r3, [r7, #15]
      break;
 800b244:	e000      	b.n	800b248 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b26a:	bf00      	nop
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a3a      	ldr	r2, [pc, #232]	@ (800b3b0 <TIM_Base_SetConfig+0xfc>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d00f      	beq.n	800b2ec <TIM_Base_SetConfig+0x38>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d2:	d00b      	beq.n	800b2ec <TIM_Base_SetConfig+0x38>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a37      	ldr	r2, [pc, #220]	@ (800b3b4 <TIM_Base_SetConfig+0x100>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d007      	beq.n	800b2ec <TIM_Base_SetConfig+0x38>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a36      	ldr	r2, [pc, #216]	@ (800b3b8 <TIM_Base_SetConfig+0x104>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d003      	beq.n	800b2ec <TIM_Base_SetConfig+0x38>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a35      	ldr	r2, [pc, #212]	@ (800b3bc <TIM_Base_SetConfig+0x108>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d108      	bne.n	800b2fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a2b      	ldr	r2, [pc, #172]	@ (800b3b0 <TIM_Base_SetConfig+0xfc>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d01b      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b30c:	d017      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a28      	ldr	r2, [pc, #160]	@ (800b3b4 <TIM_Base_SetConfig+0x100>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d013      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a27      	ldr	r2, [pc, #156]	@ (800b3b8 <TIM_Base_SetConfig+0x104>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d00f      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a26      	ldr	r2, [pc, #152]	@ (800b3bc <TIM_Base_SetConfig+0x108>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d00b      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a25      	ldr	r2, [pc, #148]	@ (800b3c0 <TIM_Base_SetConfig+0x10c>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d007      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4a24      	ldr	r2, [pc, #144]	@ (800b3c4 <TIM_Base_SetConfig+0x110>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d003      	beq.n	800b33e <TIM_Base_SetConfig+0x8a>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	4a23      	ldr	r2, [pc, #140]	@ (800b3c8 <TIM_Base_SetConfig+0x114>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d108      	bne.n	800b350 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a0e      	ldr	r2, [pc, #56]	@ (800b3b0 <TIM_Base_SetConfig+0xfc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d103      	bne.n	800b384 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	691a      	ldr	r2, [r3, #16]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b01      	cmp	r3, #1
 800b394:	d105      	bne.n	800b3a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	f023 0201 	bic.w	r2, r3, #1
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	611a      	str	r2, [r3, #16]
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	40010000 	.word	0x40010000
 800b3b4:	40000400 	.word	0x40000400
 800b3b8:	40000800 	.word	0x40000800
 800b3bc:	40000c00 	.word	0x40000c00
 800b3c0:	40014000 	.word	0x40014000
 800b3c4:	40014400 	.word	0x40014400
 800b3c8:	40014800 	.word	0x40014800

0800b3cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a1b      	ldr	r3, [r3, #32]
 800b3da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	f023 0201 	bic.w	r2, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f023 0303 	bic.w	r3, r3, #3
 800b402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f023 0302 	bic.w	r3, r3, #2
 800b414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a1c      	ldr	r2, [pc, #112]	@ (800b494 <TIM_OC1_SetConfig+0xc8>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d10c      	bne.n	800b442 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f023 0308 	bic.w	r3, r3, #8
 800b42e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	697a      	ldr	r2, [r7, #20]
 800b436:	4313      	orrs	r3, r2
 800b438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f023 0304 	bic.w	r3, r3, #4
 800b440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a13      	ldr	r2, [pc, #76]	@ (800b494 <TIM_OC1_SetConfig+0xc8>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d111      	bne.n	800b46e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	4313      	orrs	r3, r2
 800b462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	621a      	str	r2, [r3, #32]
}
 800b488:	bf00      	nop
 800b48a:	371c      	adds	r7, #28
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	40010000 	.word	0x40010000

0800b498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	f023 0210 	bic.w	r2, r3, #16
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	021b      	lsls	r3, r3, #8
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	f023 0320 	bic.w	r3, r3, #32
 800b4e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	011b      	lsls	r3, r3, #4
 800b4ea:	697a      	ldr	r2, [r7, #20]
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a1e      	ldr	r2, [pc, #120]	@ (800b56c <TIM_OC2_SetConfig+0xd4>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d10d      	bne.n	800b514 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	4313      	orrs	r3, r2
 800b50a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b512:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a15      	ldr	r2, [pc, #84]	@ (800b56c <TIM_OC2_SetConfig+0xd4>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d113      	bne.n	800b544 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b52a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	693a      	ldr	r2, [r7, #16]
 800b534:	4313      	orrs	r3, r2
 800b536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	4313      	orrs	r3, r2
 800b542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	621a      	str	r2, [r3, #32]
}
 800b55e:	bf00      	nop
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	40010000 	.word	0x40010000

0800b570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a1b      	ldr	r3, [r3, #32]
 800b57e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6a1b      	ldr	r3, [r3, #32]
 800b584:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b59e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 0303 	bic.w	r3, r3, #3
 800b5a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b5b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b640 <TIM_OC3_SetConfig+0xd0>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d10d      	bne.n	800b5ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	021b      	lsls	r3, r3, #8
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a14      	ldr	r2, [pc, #80]	@ (800b640 <TIM_OC3_SetConfig+0xd0>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d113      	bne.n	800b61a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	693a      	ldr	r2, [r7, #16]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	621a      	str	r2, [r3, #32]
}
 800b634:	bf00      	nop
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	40010000 	.word	0x40010000

0800b644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a1b      	ldr	r3, [r3, #32]
 800b658:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	021b      	lsls	r3, r3, #8
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	4313      	orrs	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b68e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	031b      	lsls	r3, r3, #12
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	4313      	orrs	r3, r2
 800b69a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a10      	ldr	r2, [pc, #64]	@ (800b6e0 <TIM_OC4_SetConfig+0x9c>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d109      	bne.n	800b6b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	019b      	lsls	r3, r3, #6
 800b6b2:	697a      	ldr	r2, [r7, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	621a      	str	r2, [r3, #32]
}
 800b6d2:	bf00      	nop
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
 800b6de:	bf00      	nop
 800b6e0:	40010000 	.word	0x40010000

0800b6e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6a1b      	ldr	r3, [r3, #32]
 800b6fa:	f023 0201 	bic.w	r2, r3, #1
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b70e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	011b      	lsls	r3, r3, #4
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4313      	orrs	r3, r2
 800b718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f023 030a 	bic.w	r3, r3, #10
 800b720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4313      	orrs	r3, r2
 800b728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	621a      	str	r2, [r3, #32]
}
 800b736:	bf00      	nop
 800b738:	371c      	adds	r7, #28
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b742:	b480      	push	{r7}
 800b744:	b087      	sub	sp, #28
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6a1b      	ldr	r3, [r3, #32]
 800b758:	f023 0210 	bic.w	r2, r3, #16
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	699b      	ldr	r3, [r3, #24]
 800b764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b76c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	031b      	lsls	r3, r3, #12
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	4313      	orrs	r3, r2
 800b776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b77e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	011b      	lsls	r3, r3, #4
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	693a      	ldr	r2, [r7, #16]
 800b78e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	621a      	str	r2, [r3, #32]
}
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b085      	sub	sp, #20
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	f043 0307 	orr.w	r3, r3, #7
 800b7c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	609a      	str	r2, [r3, #8]
}
 800b7cc:	bf00      	nop
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	021a      	lsls	r2, r3, #8
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	4313      	orrs	r3, r2
 800b804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	609a      	str	r2, [r3, #8]
}
 800b80c:	bf00      	nop
 800b80e:	371c      	adds	r7, #28
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f003 031f 	and.w	r3, r3, #31
 800b82a:	2201      	movs	r2, #1
 800b82c:	fa02 f303 	lsl.w	r3, r2, r3
 800b830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6a1a      	ldr	r2, [r3, #32]
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	43db      	mvns	r3, r3
 800b83a:	401a      	ands	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6a1a      	ldr	r2, [r3, #32]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f003 031f 	and.w	r3, r3, #31
 800b84a:	6879      	ldr	r1, [r7, #4]
 800b84c:	fa01 f303 	lsl.w	r3, r1, r3
 800b850:	431a      	orrs	r2, r3
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	621a      	str	r2, [r3, #32]
}
 800b856:	bf00      	nop
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
	...

0800b864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b874:	2b01      	cmp	r3, #1
 800b876:	d101      	bne.n	800b87c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b878:	2302      	movs	r3, #2
 800b87a:	e050      	b.n	800b91e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b92c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d018      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8c8:	d013      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a18      	ldr	r2, [pc, #96]	@ (800b930 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00e      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a16      	ldr	r2, [pc, #88]	@ (800b934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a15      	ldr	r2, [pc, #84]	@ (800b938 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d004      	beq.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a13      	ldr	r2, [pc, #76]	@ (800b93c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d10c      	bne.n	800b90c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	4313      	orrs	r3, r2
 800b902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	40010000 	.word	0x40010000
 800b930:	40000400 	.word	0x40000400
 800b934:	40000800 	.word	0x40000800
 800b938:	40000c00 	.word	0x40000c00
 800b93c:	40014000 	.word	0x40014000

0800b940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e042      	b.n	800ba00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7f7 ff50 	bl	8003834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2224      	movs	r2, #36	@ 0x24
 800b998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68da      	ldr	r2, [r3, #12]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fc85 	bl	800c2bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	691a      	ldr	r2, [r3, #16]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b9c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	695a      	ldr	r2, [r3, #20]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b9d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68da      	ldr	r2, [r3, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b9e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b0ba      	sub	sp, #232	@ 0xe8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ba34:	2300      	movs	r3, #0
 800ba36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba3e:	f003 030f 	and.w	r3, r3, #15
 800ba42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ba46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10f      	bne.n	800ba6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba52:	f003 0320 	and.w	r3, r3, #32
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d009      	beq.n	800ba6e <HAL_UART_IRQHandler+0x66>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fb69 	bl	800c13e <UART_Receive_IT>
      return;
 800ba6c:	e25b      	b.n	800bf26 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 80de 	beq.w	800bc34 <HAL_UART_IRQHandler+0x22c>
 800ba78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d106      	bne.n	800ba92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 80d1 	beq.w	800bc34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ba92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d00b      	beq.n	800bab6 <HAL_UART_IRQHandler+0xae>
 800ba9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800baa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d005      	beq.n	800bab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baae:	f043 0201 	orr.w	r2, r3, #1
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baba:	f003 0304 	and.w	r3, r3, #4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00b      	beq.n	800bada <HAL_UART_IRQHandler+0xd2>
 800bac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d005      	beq.n	800bada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bad2:	f043 0202 	orr.w	r2, r3, #2
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bade:	f003 0302 	and.w	r3, r3, #2
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00b      	beq.n	800bafe <HAL_UART_IRQHandler+0xf6>
 800bae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d005      	beq.n	800bafe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baf6:	f043 0204 	orr.w	r2, r3, #4
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bafe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb02:	f003 0308 	and.w	r3, r3, #8
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d011      	beq.n	800bb2e <HAL_UART_IRQHandler+0x126>
 800bb0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb0e:	f003 0320 	and.w	r3, r3, #32
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d105      	bne.n	800bb22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb26:	f043 0208 	orr.w	r2, r3, #8
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 81f2 	beq.w	800bf1c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d008      	beq.n	800bb56 <HAL_UART_IRQHandler+0x14e>
 800bb44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 faf4 	bl	800c13e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	695b      	ldr	r3, [r3, #20]
 800bb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb60:	2b40      	cmp	r3, #64	@ 0x40
 800bb62:	bf0c      	ite	eq
 800bb64:	2301      	moveq	r3, #1
 800bb66:	2300      	movne	r3, #0
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb72:	f003 0308 	and.w	r3, r3, #8
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d103      	bne.n	800bb82 <HAL_UART_IRQHandler+0x17a>
 800bb7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d04f      	beq.n	800bc22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f9fc 	bl	800bf80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb92:	2b40      	cmp	r3, #64	@ 0x40
 800bb94:	d141      	bne.n	800bc1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3314      	adds	r3, #20
 800bb9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bba4:	e853 3f00 	ldrex	r3, [r3]
 800bba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3314      	adds	r3, #20
 800bbbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bbc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bbce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bbda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1d9      	bne.n	800bb96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d013      	beq.n	800bc12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbee:	4a7e      	ldr	r2, [pc, #504]	@ (800bde8 <HAL_UART_IRQHandler+0x3e0>)
 800bbf0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7f8 ffc6 	bl	8004b88 <HAL_DMA_Abort_IT>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d016      	beq.n	800bc30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc10:	e00e      	b.n	800bc30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f99e 	bl	800bf54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc18:	e00a      	b.n	800bc30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f000 f99a 	bl	800bf54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc20:	e006      	b.n	800bc30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f996 	bl	800bf54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bc2e:	e175      	b.n	800bf1c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc30:	bf00      	nop
    return;
 800bc32:	e173      	b.n	800bf1c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	f040 814f 	bne.w	800bedc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc42:	f003 0310 	and.w	r3, r3, #16
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 8148 	beq.w	800bedc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc50:	f003 0310 	and.w	r3, r3, #16
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 8141 	beq.w	800bedc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60bb      	str	r3, [r7, #8]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60bb      	str	r3, [r7, #8]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	60bb      	str	r3, [r7, #8]
 800bc6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc7a:	2b40      	cmp	r3, #64	@ 0x40
 800bc7c:	f040 80b6 	bne.w	800bdec <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bc8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 8145 	beq.w	800bf20 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bc9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	f080 813e 	bcs.w	800bf20 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcb6:	f000 8088 	beq.w	800bdca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	330c      	adds	r3, #12
 800bcc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcc8:	e853 3f00 	ldrex	r3, [r3]
 800bccc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bcd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	330c      	adds	r3, #12
 800bce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bce6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bcea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bcf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bcf6:	e841 2300 	strex	r3, r2, [r1]
 800bcfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bcfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1d9      	bne.n	800bcba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3314      	adds	r3, #20
 800bd0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd10:	e853 3f00 	ldrex	r3, [r3]
 800bd14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd18:	f023 0301 	bic.w	r3, r3, #1
 800bd1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3314      	adds	r3, #20
 800bd26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd36:	e841 2300 	strex	r3, r2, [r1]
 800bd3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1e1      	bne.n	800bd06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	3314      	adds	r3, #20
 800bd48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd4c:	e853 3f00 	ldrex	r3, [r3]
 800bd50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	3314      	adds	r3, #20
 800bd62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd6e:	e841 2300 	strex	r3, r2, [r1]
 800bd72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1e3      	bne.n	800bd42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2220      	movs	r2, #32
 800bd7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	330c      	adds	r3, #12
 800bd8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bd98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd9a:	f023 0310 	bic.w	r3, r3, #16
 800bd9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	330c      	adds	r3, #12
 800bda8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bdac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bdae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bdb2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bdba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e3      	bne.n	800bd88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7f8 fe6f 	bl	8004aa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f8c1 	bl	800bf68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bde6:	e09b      	b.n	800bf20 <HAL_UART_IRQHandler+0x518>
 800bde8:	0800c047 	.word	0x0800c047
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be00:	b29b      	uxth	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	f000 808e 	beq.w	800bf24 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 8089 	beq.w	800bf24 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	330c      	adds	r3, #12
 800be18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1c:	e853 3f00 	ldrex	r3, [r3]
 800be20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	330c      	adds	r3, #12
 800be32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800be36:	647a      	str	r2, [r7, #68]	@ 0x44
 800be38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e3      	bne.n	800be12 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3314      	adds	r3, #20
 800be50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	623b      	str	r3, [r7, #32]
   return(result);
 800be5a:	6a3b      	ldr	r3, [r7, #32]
 800be5c:	f023 0301 	bic.w	r3, r3, #1
 800be60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3314      	adds	r3, #20
 800be6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be6e:	633a      	str	r2, [r7, #48]	@ 0x30
 800be70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be76:	e841 2300 	strex	r3, r2, [r1]
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1e3      	bne.n	800be4a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2220      	movs	r2, #32
 800be86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	330c      	adds	r3, #12
 800be96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	e853 3f00 	ldrex	r3, [r3]
 800be9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f023 0310 	bic.w	r3, r3, #16
 800bea6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	330c      	adds	r3, #12
 800beb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800beb4:	61fa      	str	r2, [r7, #28]
 800beb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb8:	69b9      	ldr	r1, [r7, #24]
 800beba:	69fa      	ldr	r2, [r7, #28]
 800bebc:	e841 2300 	strex	r3, r2, [r1]
 800bec0:	617b      	str	r3, [r7, #20]
   return(result);
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1e3      	bne.n	800be90 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2202      	movs	r2, #2
 800becc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bece:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f847 	bl	800bf68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800beda:	e023      	b.n	800bf24 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d009      	beq.n	800befc <HAL_UART_IRQHandler+0x4f4>
 800bee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f8ba 	bl	800c06e <UART_Transmit_IT>
    return;
 800befa:	e014      	b.n	800bf26 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800befc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00e      	beq.n	800bf26 <HAL_UART_IRQHandler+0x51e>
 800bf08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d008      	beq.n	800bf26 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f8fa 	bl	800c10e <UART_EndTransmit_IT>
    return;
 800bf1a:	e004      	b.n	800bf26 <HAL_UART_IRQHandler+0x51e>
    return;
 800bf1c:	bf00      	nop
 800bf1e:	e002      	b.n	800bf26 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf20:	bf00      	nop
 800bf22:	e000      	b.n	800bf26 <HAL_UART_IRQHandler+0x51e>
      return;
 800bf24:	bf00      	nop
  }
}
 800bf26:	37e8      	adds	r7, #232	@ 0xe8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b095      	sub	sp, #84	@ 0x54
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	330c      	adds	r3, #12
 800bf8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf92:	e853 3f00 	ldrex	r3, [r3]
 800bf96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	330c      	adds	r3, #12
 800bfa6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfa8:	643a      	str	r2, [r7, #64]	@ 0x40
 800bfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bfae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e5      	bne.n	800bf88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3314      	adds	r3, #20
 800bfc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	61fb      	str	r3, [r7, #28]
   return(result);
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	f023 0301 	bic.w	r3, r3, #1
 800bfd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3314      	adds	r3, #20
 800bfda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bfde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e5      	bne.n	800bfbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d119      	bne.n	800c02c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	330c      	adds	r3, #12
 800bffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	60bb      	str	r3, [r7, #8]
   return(result);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f023 0310 	bic.w	r3, r3, #16
 800c00e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	330c      	adds	r3, #12
 800c016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c018:	61ba      	str	r2, [r7, #24]
 800c01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6979      	ldr	r1, [r7, #20]
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	613b      	str	r3, [r7, #16]
   return(result);
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e5      	bne.n	800bff8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c03a:	bf00      	nop
 800c03c:	3754      	adds	r7, #84	@ 0x54
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c052:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2200      	movs	r2, #0
 800c058:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2200      	movs	r2, #0
 800c05e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f7ff ff77 	bl	800bf54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c06e:	b480      	push	{r7}
 800c070:	b085      	sub	sp, #20
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b21      	cmp	r3, #33	@ 0x21
 800c080:	d13e      	bne.n	800c100 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c08a:	d114      	bne.n	800c0b6 <UART_Transmit_IT+0x48>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d110      	bne.n	800c0b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	1c9a      	adds	r2, r3, #2
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	621a      	str	r2, [r3, #32]
 800c0b4:	e008      	b.n	800c0c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	1c59      	adds	r1, r3, #1
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	6211      	str	r1, [r2, #32]
 800c0c0:	781a      	ldrb	r2, [r3, #0]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10f      	bne.n	800c0fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68da      	ldr	r2, [r3, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	e000      	b.n	800c102 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c100:	2302      	movs	r3, #2
  }
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b082      	sub	sp, #8
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68da      	ldr	r2, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c124:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2220      	movs	r2, #32
 800c12a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f7ff fefc 	bl	800bf2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b08c      	sub	sp, #48	@ 0x30
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b22      	cmp	r3, #34	@ 0x22
 800c150:	f040 80ae 	bne.w	800c2b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c15c:	d117      	bne.n	800c18e <UART_Receive_IT+0x50>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d113      	bne.n	800c18e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c166:	2300      	movs	r3, #0
 800c168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	b29b      	uxth	r3, r3
 800c178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c180:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c186:	1c9a      	adds	r2, r3, #2
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c18c:	e026      	b.n	800c1dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c192:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c194:	2300      	movs	r3, #0
 800c196:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1a0:	d007      	beq.n	800c1b2 <UART_Receive_IT+0x74>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10a      	bne.n	800c1c0 <UART_Receive_IT+0x82>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	e008      	b.n	800c1d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1d6:	1c5a      	adds	r2, r3, #1
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d15d      	bne.n	800c2ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f022 0220 	bic.w	r2, r2, #32
 800c1fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c20e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	695a      	ldr	r2, [r3, #20]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f022 0201 	bic.w	r2, r2, #1
 800c21e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2220      	movs	r2, #32
 800c224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c232:	2b01      	cmp	r3, #1
 800c234:	d135      	bne.n	800c2a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	330c      	adds	r3, #12
 800c242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	e853 3f00 	ldrex	r3, [r3]
 800c24a:	613b      	str	r3, [r7, #16]
   return(result);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f023 0310 	bic.w	r3, r3, #16
 800c252:	627b      	str	r3, [r7, #36]	@ 0x24
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	330c      	adds	r3, #12
 800c25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c25c:	623a      	str	r2, [r7, #32]
 800c25e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c260:	69f9      	ldr	r1, [r7, #28]
 800c262:	6a3a      	ldr	r2, [r7, #32]
 800c264:	e841 2300 	strex	r3, r2, [r1]
 800c268:	61bb      	str	r3, [r7, #24]
   return(result);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e5      	bne.n	800c23c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 0310 	and.w	r3, r3, #16
 800c27a:	2b10      	cmp	r3, #16
 800c27c:	d10a      	bne.n	800c294 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	60fb      	str	r3, [r7, #12]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	60fb      	str	r3, [r7, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fe64 	bl	800bf68 <HAL_UARTEx_RxEventCallback>
 800c2a0:	e002      	b.n	800c2a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fe4c 	bl	800bf40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e002      	b.n	800c2b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e000      	b.n	800c2b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c2b0:	2302      	movs	r3, #2
  }
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3730      	adds	r7, #48	@ 0x30
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2c0:	b0c0      	sub	sp, #256	@ 0x100
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2d8:	68d9      	ldr	r1, [r3, #12]
 800c2da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	ea40 0301 	orr.w	r3, r0, r1
 800c2e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2ea:	689a      	ldr	r2, [r3, #8]
 800c2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f0:	691b      	ldr	r3, [r3, #16]
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	431a      	orrs	r2, r3
 800c2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c300:	69db      	ldr	r3, [r3, #28]
 800c302:	4313      	orrs	r3, r2
 800c304:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c314:	f021 010c 	bic.w	r1, r1, #12
 800c318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c322:	430b      	orrs	r3, r1
 800c324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	695b      	ldr	r3, [r3, #20]
 800c32e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c336:	6999      	ldr	r1, [r3, #24]
 800c338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	ea40 0301 	orr.w	r3, r0, r1
 800c342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b8f      	ldr	r3, [pc, #572]	@ (800c588 <UART_SetConfig+0x2cc>)
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d005      	beq.n	800c35c <UART_SetConfig+0xa0>
 800c350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	4b8d      	ldr	r3, [pc, #564]	@ (800c58c <UART_SetConfig+0x2d0>)
 800c358:	429a      	cmp	r2, r3
 800c35a:	d104      	bne.n	800c366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c35c:	f7fe fb1e 	bl	800a99c <HAL_RCC_GetPCLK2Freq>
 800c360:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c364:	e003      	b.n	800c36e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c366:	f7fe fb05 	bl	800a974 <HAL_RCC_GetPCLK1Freq>
 800c36a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c36e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c372:	69db      	ldr	r3, [r3, #28]
 800c374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c378:	f040 810c 	bne.w	800c594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c37c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c380:	2200      	movs	r2, #0
 800c382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c386:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c38a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	1891      	adds	r1, r2, r2
 800c394:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c396:	415b      	adcs	r3, r3
 800c398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c39a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c39e:	4621      	mov	r1, r4
 800c3a0:	eb12 0801 	adds.w	r8, r2, r1
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	eb43 0901 	adc.w	r9, r3, r1
 800c3aa:	f04f 0200 	mov.w	r2, #0
 800c3ae:	f04f 0300 	mov.w	r3, #0
 800c3b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c3b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c3ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c3be:	4690      	mov	r8, r2
 800c3c0:	4699      	mov	r9, r3
 800c3c2:	4623      	mov	r3, r4
 800c3c4:	eb18 0303 	adds.w	r3, r8, r3
 800c3c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	eb49 0303 	adc.w	r3, r9, r3
 800c3d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c3d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c3e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c3e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	18db      	adds	r3, r3, r3
 800c3ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	eb42 0303 	adc.w	r3, r2, r3
 800c3f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c3fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c400:	f7f3 ff3e 	bl	8000280 <__aeabi_uldivmod>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4b61      	ldr	r3, [pc, #388]	@ (800c590 <UART_SetConfig+0x2d4>)
 800c40a:	fba3 2302 	umull	r2, r3, r3, r2
 800c40e:	095b      	lsrs	r3, r3, #5
 800c410:	011c      	lsls	r4, r3, #4
 800c412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c416:	2200      	movs	r2, #0
 800c418:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c41c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c424:	4642      	mov	r2, r8
 800c426:	464b      	mov	r3, r9
 800c428:	1891      	adds	r1, r2, r2
 800c42a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c42c:	415b      	adcs	r3, r3
 800c42e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c434:	4641      	mov	r1, r8
 800c436:	eb12 0a01 	adds.w	sl, r2, r1
 800c43a:	4649      	mov	r1, r9
 800c43c:	eb43 0b01 	adc.w	fp, r3, r1
 800c440:	f04f 0200 	mov.w	r2, #0
 800c444:	f04f 0300 	mov.w	r3, #0
 800c448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c44c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c454:	4692      	mov	sl, r2
 800c456:	469b      	mov	fp, r3
 800c458:	4643      	mov	r3, r8
 800c45a:	eb1a 0303 	adds.w	r3, sl, r3
 800c45e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c462:	464b      	mov	r3, r9
 800c464:	eb4b 0303 	adc.w	r3, fp, r3
 800c468:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c478:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c47c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c480:	460b      	mov	r3, r1
 800c482:	18db      	adds	r3, r3, r3
 800c484:	643b      	str	r3, [r7, #64]	@ 0x40
 800c486:	4613      	mov	r3, r2
 800c488:	eb42 0303 	adc.w	r3, r2, r3
 800c48c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c48e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c496:	f7f3 fef3 	bl	8000280 <__aeabi_uldivmod>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4611      	mov	r1, r2
 800c4a0:	4b3b      	ldr	r3, [pc, #236]	@ (800c590 <UART_SetConfig+0x2d4>)
 800c4a2:	fba3 2301 	umull	r2, r3, r3, r1
 800c4a6:	095b      	lsrs	r3, r3, #5
 800c4a8:	2264      	movs	r2, #100	@ 0x64
 800c4aa:	fb02 f303 	mul.w	r3, r2, r3
 800c4ae:	1acb      	subs	r3, r1, r3
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c4b6:	4b36      	ldr	r3, [pc, #216]	@ (800c590 <UART_SetConfig+0x2d4>)
 800c4b8:	fba3 2302 	umull	r2, r3, r3, r2
 800c4bc:	095b      	lsrs	r3, r3, #5
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c4c4:	441c      	add	r4, r3
 800c4c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c4d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c4d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c4d8:	4642      	mov	r2, r8
 800c4da:	464b      	mov	r3, r9
 800c4dc:	1891      	adds	r1, r2, r2
 800c4de:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c4e0:	415b      	adcs	r3, r3
 800c4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c4e8:	4641      	mov	r1, r8
 800c4ea:	1851      	adds	r1, r2, r1
 800c4ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800c4ee:	4649      	mov	r1, r9
 800c4f0:	414b      	adcs	r3, r1
 800c4f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4f4:	f04f 0200 	mov.w	r2, #0
 800c4f8:	f04f 0300 	mov.w	r3, #0
 800c4fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c500:	4659      	mov	r1, fp
 800c502:	00cb      	lsls	r3, r1, #3
 800c504:	4651      	mov	r1, sl
 800c506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c50a:	4651      	mov	r1, sl
 800c50c:	00ca      	lsls	r2, r1, #3
 800c50e:	4610      	mov	r0, r2
 800c510:	4619      	mov	r1, r3
 800c512:	4603      	mov	r3, r0
 800c514:	4642      	mov	r2, r8
 800c516:	189b      	adds	r3, r3, r2
 800c518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c51c:	464b      	mov	r3, r9
 800c51e:	460a      	mov	r2, r1
 800c520:	eb42 0303 	adc.w	r3, r2, r3
 800c524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c534:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c53c:	460b      	mov	r3, r1
 800c53e:	18db      	adds	r3, r3, r3
 800c540:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c542:	4613      	mov	r3, r2
 800c544:	eb42 0303 	adc.w	r3, r2, r3
 800c548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c54a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c54e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c552:	f7f3 fe95 	bl	8000280 <__aeabi_uldivmod>
 800c556:	4602      	mov	r2, r0
 800c558:	460b      	mov	r3, r1
 800c55a:	4b0d      	ldr	r3, [pc, #52]	@ (800c590 <UART_SetConfig+0x2d4>)
 800c55c:	fba3 1302 	umull	r1, r3, r3, r2
 800c560:	095b      	lsrs	r3, r3, #5
 800c562:	2164      	movs	r1, #100	@ 0x64
 800c564:	fb01 f303 	mul.w	r3, r1, r3
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	3332      	adds	r3, #50	@ 0x32
 800c56e:	4a08      	ldr	r2, [pc, #32]	@ (800c590 <UART_SetConfig+0x2d4>)
 800c570:	fba2 2303 	umull	r2, r3, r2, r3
 800c574:	095b      	lsrs	r3, r3, #5
 800c576:	f003 0207 	and.w	r2, r3, #7
 800c57a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4422      	add	r2, r4
 800c582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c584:	e106      	b.n	800c794 <UART_SetConfig+0x4d8>
 800c586:	bf00      	nop
 800c588:	40011000 	.word	0x40011000
 800c58c:	40011400 	.word	0x40011400
 800c590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c598:	2200      	movs	r2, #0
 800c59a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c59e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c5a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c5a6:	4642      	mov	r2, r8
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	1891      	adds	r1, r2, r2
 800c5ac:	6239      	str	r1, [r7, #32]
 800c5ae:	415b      	adcs	r3, r3
 800c5b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c5b6:	4641      	mov	r1, r8
 800c5b8:	1854      	adds	r4, r2, r1
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	eb43 0501 	adc.w	r5, r3, r1
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	00eb      	lsls	r3, r5, #3
 800c5ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c5ce:	00e2      	lsls	r2, r4, #3
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	461d      	mov	r5, r3
 800c5d4:	4643      	mov	r3, r8
 800c5d6:	18e3      	adds	r3, r4, r3
 800c5d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5dc:	464b      	mov	r3, r9
 800c5de:	eb45 0303 	adc.w	r3, r5, r3
 800c5e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c5f6:	f04f 0200 	mov.w	r2, #0
 800c5fa:	f04f 0300 	mov.w	r3, #0
 800c5fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c602:	4629      	mov	r1, r5
 800c604:	008b      	lsls	r3, r1, #2
 800c606:	4621      	mov	r1, r4
 800c608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c60c:	4621      	mov	r1, r4
 800c60e:	008a      	lsls	r2, r1, #2
 800c610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c614:	f7f3 fe34 	bl	8000280 <__aeabi_uldivmod>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4b60      	ldr	r3, [pc, #384]	@ (800c7a0 <UART_SetConfig+0x4e4>)
 800c61e:	fba3 2302 	umull	r2, r3, r3, r2
 800c622:	095b      	lsrs	r3, r3, #5
 800c624:	011c      	lsls	r4, r3, #4
 800c626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c630:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c638:	4642      	mov	r2, r8
 800c63a:	464b      	mov	r3, r9
 800c63c:	1891      	adds	r1, r2, r2
 800c63e:	61b9      	str	r1, [r7, #24]
 800c640:	415b      	adcs	r3, r3
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c648:	4641      	mov	r1, r8
 800c64a:	1851      	adds	r1, r2, r1
 800c64c:	6139      	str	r1, [r7, #16]
 800c64e:	4649      	mov	r1, r9
 800c650:	414b      	adcs	r3, r1
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	f04f 0200 	mov.w	r2, #0
 800c658:	f04f 0300 	mov.w	r3, #0
 800c65c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c660:	4659      	mov	r1, fp
 800c662:	00cb      	lsls	r3, r1, #3
 800c664:	4651      	mov	r1, sl
 800c666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c66a:	4651      	mov	r1, sl
 800c66c:	00ca      	lsls	r2, r1, #3
 800c66e:	4610      	mov	r0, r2
 800c670:	4619      	mov	r1, r3
 800c672:	4603      	mov	r3, r0
 800c674:	4642      	mov	r2, r8
 800c676:	189b      	adds	r3, r3, r2
 800c678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c67c:	464b      	mov	r3, r9
 800c67e:	460a      	mov	r2, r1
 800c680:	eb42 0303 	adc.w	r3, r2, r3
 800c684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	2200      	movs	r2, #0
 800c690:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c692:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c694:	f04f 0200 	mov.w	r2, #0
 800c698:	f04f 0300 	mov.w	r3, #0
 800c69c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	008b      	lsls	r3, r1, #2
 800c6a4:	4641      	mov	r1, r8
 800c6a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c6aa:	4641      	mov	r1, r8
 800c6ac:	008a      	lsls	r2, r1, #2
 800c6ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c6b2:	f7f3 fde5 	bl	8000280 <__aeabi_uldivmod>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	4b38      	ldr	r3, [pc, #224]	@ (800c7a0 <UART_SetConfig+0x4e4>)
 800c6be:	fba3 2301 	umull	r2, r3, r3, r1
 800c6c2:	095b      	lsrs	r3, r3, #5
 800c6c4:	2264      	movs	r2, #100	@ 0x64
 800c6c6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ca:	1acb      	subs	r3, r1, r3
 800c6cc:	011b      	lsls	r3, r3, #4
 800c6ce:	3332      	adds	r3, #50	@ 0x32
 800c6d0:	4a33      	ldr	r2, [pc, #204]	@ (800c7a0 <UART_SetConfig+0x4e4>)
 800c6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d6:	095b      	lsrs	r3, r3, #5
 800c6d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6dc:	441c      	add	r4, r3
 800c6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800c6e6:	677a      	str	r2, [r7, #116]	@ 0x74
 800c6e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c6ec:	4642      	mov	r2, r8
 800c6ee:	464b      	mov	r3, r9
 800c6f0:	1891      	adds	r1, r2, r2
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	415b      	adcs	r3, r3
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6fc:	4641      	mov	r1, r8
 800c6fe:	1851      	adds	r1, r2, r1
 800c700:	6039      	str	r1, [r7, #0]
 800c702:	4649      	mov	r1, r9
 800c704:	414b      	adcs	r3, r1
 800c706:	607b      	str	r3, [r7, #4]
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	f04f 0300 	mov.w	r3, #0
 800c710:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c714:	4659      	mov	r1, fp
 800c716:	00cb      	lsls	r3, r1, #3
 800c718:	4651      	mov	r1, sl
 800c71a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c71e:	4651      	mov	r1, sl
 800c720:	00ca      	lsls	r2, r1, #3
 800c722:	4610      	mov	r0, r2
 800c724:	4619      	mov	r1, r3
 800c726:	4603      	mov	r3, r0
 800c728:	4642      	mov	r2, r8
 800c72a:	189b      	adds	r3, r3, r2
 800c72c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c72e:	464b      	mov	r3, r9
 800c730:	460a      	mov	r2, r1
 800c732:	eb42 0303 	adc.w	r3, r2, r3
 800c736:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	663b      	str	r3, [r7, #96]	@ 0x60
 800c742:	667a      	str	r2, [r7, #100]	@ 0x64
 800c744:	f04f 0200 	mov.w	r2, #0
 800c748:	f04f 0300 	mov.w	r3, #0
 800c74c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c750:	4649      	mov	r1, r9
 800c752:	008b      	lsls	r3, r1, #2
 800c754:	4641      	mov	r1, r8
 800c756:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c75a:	4641      	mov	r1, r8
 800c75c:	008a      	lsls	r2, r1, #2
 800c75e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c762:	f7f3 fd8d 	bl	8000280 <__aeabi_uldivmod>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a0 <UART_SetConfig+0x4e4>)
 800c76c:	fba3 1302 	umull	r1, r3, r3, r2
 800c770:	095b      	lsrs	r3, r3, #5
 800c772:	2164      	movs	r1, #100	@ 0x64
 800c774:	fb01 f303 	mul.w	r3, r1, r3
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	011b      	lsls	r3, r3, #4
 800c77c:	3332      	adds	r3, #50	@ 0x32
 800c77e:	4a08      	ldr	r2, [pc, #32]	@ (800c7a0 <UART_SetConfig+0x4e4>)
 800c780:	fba2 2303 	umull	r2, r3, r2, r3
 800c784:	095b      	lsrs	r3, r3, #5
 800c786:	f003 020f 	and.w	r2, r3, #15
 800c78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4422      	add	r2, r4
 800c792:	609a      	str	r2, [r3, #8]
}
 800c794:	bf00      	nop
 800c796:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c79a:	46bd      	mov	sp, r7
 800c79c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7a0:	51eb851f 	.word	0x51eb851f

0800c7a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7a4:	b084      	sub	sp, #16
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	f107 001c 	add.w	r0, r7, #28
 800c7b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d123      	bne.n	800c806 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c7d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c7e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d105      	bne.n	800c7fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f001 fae8 	bl	800ddd0 <USB_CoreReset>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
 800c804:	e01b      	b.n	800c83e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f001 fadc 	bl	800ddd0 <USB_CoreReset>
 800c818:	4603      	mov	r3, r0
 800c81a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c81c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c820:	2b00      	cmp	r3, #0
 800c822:	d106      	bne.n	800c832 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c828:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	639a      	str	r2, [r3, #56]	@ 0x38
 800c830:	e005      	b.n	800c83e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c836:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c83e:	7fbb      	ldrb	r3, [r7, #30]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d10b      	bne.n	800c85c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f043 0206 	orr.w	r2, r3, #6
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f043 0220 	orr.w	r2, r3, #32
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c868:	b004      	add	sp, #16
 800c86a:	4770      	bx	lr

0800c86c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	4613      	mov	r3, r2
 800c878:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c87a:	79fb      	ldrb	r3, [r7, #7]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d165      	bne.n	800c94c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4a41      	ldr	r2, [pc, #260]	@ (800c988 <USB_SetTurnaroundTime+0x11c>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d906      	bls.n	800c896 <USB_SetTurnaroundTime+0x2a>
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4a40      	ldr	r2, [pc, #256]	@ (800c98c <USB_SetTurnaroundTime+0x120>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d202      	bcs.n	800c896 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c890:	230f      	movs	r3, #15
 800c892:	617b      	str	r3, [r7, #20]
 800c894:	e062      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	4a3c      	ldr	r2, [pc, #240]	@ (800c98c <USB_SetTurnaroundTime+0x120>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d306      	bcc.n	800c8ac <USB_SetTurnaroundTime+0x40>
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4a3b      	ldr	r2, [pc, #236]	@ (800c990 <USB_SetTurnaroundTime+0x124>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d202      	bcs.n	800c8ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c8a6:	230e      	movs	r3, #14
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	e057      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	4a38      	ldr	r2, [pc, #224]	@ (800c990 <USB_SetTurnaroundTime+0x124>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d306      	bcc.n	800c8c2 <USB_SetTurnaroundTime+0x56>
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	4a37      	ldr	r2, [pc, #220]	@ (800c994 <USB_SetTurnaroundTime+0x128>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d202      	bcs.n	800c8c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c8bc:	230d      	movs	r3, #13
 800c8be:	617b      	str	r3, [r7, #20]
 800c8c0:	e04c      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	4a33      	ldr	r2, [pc, #204]	@ (800c994 <USB_SetTurnaroundTime+0x128>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d306      	bcc.n	800c8d8 <USB_SetTurnaroundTime+0x6c>
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4a32      	ldr	r2, [pc, #200]	@ (800c998 <USB_SetTurnaroundTime+0x12c>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d802      	bhi.n	800c8d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c8d2:	230c      	movs	r3, #12
 800c8d4:	617b      	str	r3, [r7, #20]
 800c8d6:	e041      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	4a2f      	ldr	r2, [pc, #188]	@ (800c998 <USB_SetTurnaroundTime+0x12c>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d906      	bls.n	800c8ee <USB_SetTurnaroundTime+0x82>
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4a2e      	ldr	r2, [pc, #184]	@ (800c99c <USB_SetTurnaroundTime+0x130>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d802      	bhi.n	800c8ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c8e8:	230b      	movs	r3, #11
 800c8ea:	617b      	str	r3, [r7, #20]
 800c8ec:	e036      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	4a2a      	ldr	r2, [pc, #168]	@ (800c99c <USB_SetTurnaroundTime+0x130>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d906      	bls.n	800c904 <USB_SetTurnaroundTime+0x98>
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	4a29      	ldr	r2, [pc, #164]	@ (800c9a0 <USB_SetTurnaroundTime+0x134>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d802      	bhi.n	800c904 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c8fe:	230a      	movs	r3, #10
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	e02b      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	4a26      	ldr	r2, [pc, #152]	@ (800c9a0 <USB_SetTurnaroundTime+0x134>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d906      	bls.n	800c91a <USB_SetTurnaroundTime+0xae>
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4a25      	ldr	r2, [pc, #148]	@ (800c9a4 <USB_SetTurnaroundTime+0x138>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d202      	bcs.n	800c91a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c914:	2309      	movs	r3, #9
 800c916:	617b      	str	r3, [r7, #20]
 800c918:	e020      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	4a21      	ldr	r2, [pc, #132]	@ (800c9a4 <USB_SetTurnaroundTime+0x138>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d306      	bcc.n	800c930 <USB_SetTurnaroundTime+0xc4>
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	4a20      	ldr	r2, [pc, #128]	@ (800c9a8 <USB_SetTurnaroundTime+0x13c>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d802      	bhi.n	800c930 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c92a:	2308      	movs	r3, #8
 800c92c:	617b      	str	r3, [r7, #20]
 800c92e:	e015      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	4a1d      	ldr	r2, [pc, #116]	@ (800c9a8 <USB_SetTurnaroundTime+0x13c>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d906      	bls.n	800c946 <USB_SetTurnaroundTime+0xda>
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	4a1c      	ldr	r2, [pc, #112]	@ (800c9ac <USB_SetTurnaroundTime+0x140>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d202      	bcs.n	800c946 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c940:	2307      	movs	r3, #7
 800c942:	617b      	str	r3, [r7, #20]
 800c944:	e00a      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c946:	2306      	movs	r3, #6
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	e007      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c952:	2309      	movs	r3, #9
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	e001      	b.n	800c95c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c958:	2309      	movs	r3, #9
 800c95a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	68da      	ldr	r2, [r3, #12]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	029b      	lsls	r3, r3, #10
 800c970:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c974:	431a      	orrs	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	371c      	adds	r7, #28
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	00d8acbf 	.word	0x00d8acbf
 800c98c:	00e4e1c0 	.word	0x00e4e1c0
 800c990:	00f42400 	.word	0x00f42400
 800c994:	01067380 	.word	0x01067380
 800c998:	011a499f 	.word	0x011a499f
 800c99c:	01312cff 	.word	0x01312cff
 800c9a0:	014ca43f 	.word	0x014ca43f
 800c9a4:	016e3600 	.word	0x016e3600
 800c9a8:	01a6ab1f 	.word	0x01a6ab1f
 800c9ac:	01e84800 	.word	0x01e84800

0800c9b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	f043 0201 	orr.w	r2, r3, #1
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	f023 0201 	bic.w	r2, r3, #1
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d115      	bne.n	800ca42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca22:	200a      	movs	r0, #10
 800ca24:	f7f7 f8e8 	bl	8003bf8 <HAL_Delay>
      ms += 10U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	330a      	adds	r3, #10
 800ca2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f001 f93f 	bl	800dcb2 <USB_GetMode>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d01e      	beq.n	800ca78 <USB_SetCurrentMode+0x84>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca3e:	d9f0      	bls.n	800ca22 <USB_SetCurrentMode+0x2e>
 800ca40:	e01a      	b.n	800ca78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca42:	78fb      	ldrb	r3, [r7, #3]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d115      	bne.n	800ca74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca54:	200a      	movs	r0, #10
 800ca56:	f7f7 f8cf 	bl	8003bf8 <HAL_Delay>
      ms += 10U;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	330a      	adds	r3, #10
 800ca5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f001 f926 	bl	800dcb2 <USB_GetMode>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d005      	beq.n	800ca78 <USB_SetCurrentMode+0x84>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca70:	d9f0      	bls.n	800ca54 <USB_SetCurrentMode+0x60>
 800ca72:	e001      	b.n	800ca78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e005      	b.n	800ca84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ca7c:	d101      	bne.n	800ca82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e000      	b.n	800ca84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3710      	adds	r7, #16
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b086      	sub	sp, #24
 800ca92:	af00      	add	r7, sp, #0
 800ca94:	6078      	str	r0, [r7, #4]
 800ca96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ca9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800caa6:	2300      	movs	r3, #0
 800caa8:	613b      	str	r3, [r7, #16]
 800caaa:	e009      	b.n	800cac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	3340      	adds	r3, #64	@ 0x40
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	3301      	adds	r3, #1
 800cabe:	613b      	str	r3, [r7, #16]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2b0e      	cmp	r3, #14
 800cac4:	d9f2      	bls.n	800caac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cac6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d11c      	bne.n	800cb08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cadc:	f043 0302 	orr.w	r3, r3, #2
 800cae0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cafe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	639a      	str	r2, [r3, #56]	@ 0x38
 800cb06:	e00b      	b.n	800cb20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb26:	461a      	mov	r2, r3
 800cb28:	2300      	movs	r3, #0
 800cb2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d10d      	bne.n	800cb50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cb34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d104      	bne.n	800cb46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f968 	bl	800ce14 <USB_SetDevSpeed>
 800cb44:	e008      	b.n	800cb58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cb46:	2101      	movs	r1, #1
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f963 	bl	800ce14 <USB_SetDevSpeed>
 800cb4e:	e003      	b.n	800cb58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb50:	2103      	movs	r1, #3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f95e 	bl	800ce14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb58:	2110      	movs	r1, #16
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f8fa 	bl	800cd54 <USB_FlushTxFifo>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f924 	bl	800cdb8 <USB_FlushRxFifo>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d001      	beq.n	800cb7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800cb76:	2301      	movs	r3, #1
 800cb78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb80:	461a      	mov	r2, r3
 800cb82:	2300      	movs	r3, #0
 800cb84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2300      	movs	r3, #0
 800cb90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb98:	461a      	mov	r2, r3
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb9e:	2300      	movs	r3, #0
 800cba0:	613b      	str	r3, [r7, #16]
 800cba2:	e043      	b.n	800cc2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cbb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbba:	d118      	bne.n	800cbee <USB_DevInit+0x162>
    {
      if (i == 0U)
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cbd4:	6013      	str	r3, [r2, #0]
 800cbd6:	e013      	b.n	800cc00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	e008      	b.n	800cc00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	015a      	lsls	r2, r3, #5
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4413      	add	r3, r2
 800cc08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	613b      	str	r3, [r7, #16]
 800cc2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc30:	461a      	mov	r2, r3
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d3b5      	bcc.n	800cba4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	613b      	str	r3, [r7, #16]
 800cc3c:	e043      	b.n	800ccc6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	015a      	lsls	r2, r3, #5
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	4413      	add	r3, r2
 800cc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc54:	d118      	bne.n	800cc88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d10a      	bne.n	800cc72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc68:	461a      	mov	r2, r3
 800cc6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	e013      	b.n	800cc9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	015a      	lsls	r2, r3, #5
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	4413      	add	r3, r2
 800cc7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc7e:	461a      	mov	r2, r3
 800cc80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cc84:	6013      	str	r3, [r2, #0]
 800cc86:	e008      	b.n	800cc9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	015a      	lsls	r2, r3, #5
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	4413      	add	r3, r2
 800cc90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc94:	461a      	mov	r2, r3
 800cc96:	2300      	movs	r3, #0
 800cc98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	015a      	lsls	r2, r3, #5
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	4413      	add	r3, r2
 800cca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cca6:	461a      	mov	r2, r3
 800cca8:	2300      	movs	r3, #0
 800ccaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccb8:	461a      	mov	r2, r3
 800ccba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ccbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	613b      	str	r3, [r7, #16]
 800ccc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ccca:	461a      	mov	r2, r3
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d3b5      	bcc.n	800cc3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cce4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ccf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ccf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d105      	bne.n	800cd08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	f043 0210 	orr.w	r2, r3, #16
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699a      	ldr	r2, [r3, #24]
 800cd0c:	4b10      	ldr	r3, [pc, #64]	@ (800cd50 <USB_DevInit+0x2c4>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d005      	beq.n	800cd28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	f043 0208 	orr.w	r2, r3, #8
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d107      	bne.n	800cd40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cd38:	f043 0304 	orr.w	r3, r3, #4
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd4c:	b004      	add	sp, #16
 800cd4e:	4770      	bx	lr
 800cd50:	803c3800 	.word	0x803c3800

0800cd54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	3301      	adds	r3, #1
 800cd66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd6e:	d901      	bls.n	800cd74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e01b      	b.n	800cdac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	daf2      	bge.n	800cd62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	019b      	lsls	r3, r3, #6
 800cd84:	f043 0220 	orr.w	r2, r3, #32
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd98:	d901      	bls.n	800cd9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e006      	b.n	800cdac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	691b      	ldr	r3, [r3, #16]
 800cda2:	f003 0320 	and.w	r3, r3, #32
 800cda6:	2b20      	cmp	r3, #32
 800cda8:	d0f0      	beq.n	800cd8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3714      	adds	r7, #20
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdd0:	d901      	bls.n	800cdd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e018      	b.n	800ce08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	daf2      	bge.n	800cdc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cdde:	2300      	movs	r3, #0
 800cde0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2210      	movs	r2, #16
 800cde6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	3301      	adds	r3, #1
 800cdec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cdf4:	d901      	bls.n	800cdfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e006      	b.n	800ce08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	f003 0310 	and.w	r3, r3, #16
 800ce02:	2b10      	cmp	r3, #16
 800ce04:	d0f0      	beq.n	800cde8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	78fb      	ldrb	r3, [r7, #3]
 800ce2e:	68f9      	ldr	r1, [r7, #12]
 800ce30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce34:	4313      	orrs	r3, r2
 800ce36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b087      	sub	sp, #28
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f003 0306 	and.w	r3, r3, #6
 800ce5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d102      	bne.n	800ce6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ce66:	2300      	movs	r3, #0
 800ce68:	75fb      	strb	r3, [r7, #23]
 800ce6a:	e00a      	b.n	800ce82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2b02      	cmp	r3, #2
 800ce70:	d002      	beq.n	800ce78 <USB_GetDevSpeed+0x32>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b06      	cmp	r3, #6
 800ce76:	d102      	bne.n	800ce7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ce78:	2302      	movs	r3, #2
 800ce7a:	75fb      	strb	r3, [r7, #23]
 800ce7c:	e001      	b.n	800ce82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ce7e:	230f      	movs	r3, #15
 800ce80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	371c      	adds	r7, #28
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	785b      	ldrb	r3, [r3, #1]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d13a      	bne.n	800cf22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceb2:	69da      	ldr	r2, [r3, #28]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	f003 030f 	and.w	r3, r3, #15
 800cebc:	2101      	movs	r1, #1
 800cebe:	fa01 f303 	lsl.w	r3, r1, r3
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	68f9      	ldr	r1, [r7, #12]
 800cec6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ceca:	4313      	orrs	r3, r2
 800cecc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	015a      	lsls	r2, r3, #5
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	4413      	add	r3, r2
 800ced6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d155      	bne.n	800cf90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	015a      	lsls	r2, r3, #5
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4413      	add	r3, r2
 800ceec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cef0:	681a      	ldr	r2, [r3, #0]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	791b      	ldrb	r3, [r3, #4]
 800cefe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	059b      	lsls	r3, r3, #22
 800cf06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	0151      	lsls	r1, r2, #5
 800cf0e:	68fa      	ldr	r2, [r7, #12]
 800cf10:	440a      	add	r2, r1
 800cf12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	e036      	b.n	800cf90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf28:	69da      	ldr	r2, [r3, #28]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	f003 030f 	and.w	r3, r3, #15
 800cf32:	2101      	movs	r1, #1
 800cf34:	fa01 f303 	lsl.w	r3, r1, r3
 800cf38:	041b      	lsls	r3, r3, #16
 800cf3a:	68f9      	ldr	r1, [r7, #12]
 800cf3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf40:	4313      	orrs	r3, r2
 800cf42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	015a      	lsls	r2, r3, #5
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d11a      	bne.n	800cf90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	015a      	lsls	r2, r3, #5
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	4413      	add	r3, r2
 800cf62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	791b      	ldrb	r3, [r3, #4]
 800cf74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf76:	430b      	orrs	r3, r1
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	0151      	lsls	r1, r2, #5
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	440a      	add	r2, r1
 800cf82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
	...

0800cfa0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	785b      	ldrb	r3, [r3, #1]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d161      	bne.n	800d080 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	015a      	lsls	r2, r3, #5
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cfce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cfd2:	d11f      	bne.n	800d014 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	0151      	lsls	r1, r2, #5
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	440a      	add	r2, r1
 800cfea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cff2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	015a      	lsls	r2, r3, #5
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	4413      	add	r3, r2
 800cffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68ba      	ldr	r2, [r7, #8]
 800d004:	0151      	lsls	r1, r2, #5
 800d006:	68fa      	ldr	r2, [r7, #12]
 800d008:	440a      	add	r2, r1
 800d00a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d00e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d012:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d01a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	f003 030f 	and.w	r3, r3, #15
 800d024:	2101      	movs	r1, #1
 800d026:	fa01 f303 	lsl.w	r3, r1, r3
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	43db      	mvns	r3, r3
 800d02e:	68f9      	ldr	r1, [r7, #12]
 800d030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d034:	4013      	ands	r3, r2
 800d036:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d03e:	69da      	ldr	r2, [r3, #28]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	f003 030f 	and.w	r3, r3, #15
 800d048:	2101      	movs	r1, #1
 800d04a:	fa01 f303 	lsl.w	r3, r1, r3
 800d04e:	b29b      	uxth	r3, r3
 800d050:	43db      	mvns	r3, r3
 800d052:	68f9      	ldr	r1, [r7, #12]
 800d054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d058:	4013      	ands	r3, r2
 800d05a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	015a      	lsls	r2, r3, #5
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	4413      	add	r3, r2
 800d064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	0159      	lsls	r1, r3, #5
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	440b      	add	r3, r1
 800d072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d076:	4619      	mov	r1, r3
 800d078:	4b35      	ldr	r3, [pc, #212]	@ (800d150 <USB_DeactivateEndpoint+0x1b0>)
 800d07a:	4013      	ands	r3, r2
 800d07c:	600b      	str	r3, [r1, #0]
 800d07e:	e060      	b.n	800d142 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	015a      	lsls	r2, r3, #5
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	4413      	add	r3, r2
 800d088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d096:	d11f      	bne.n	800d0d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	015a      	lsls	r2, r3, #5
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4413      	add	r3, r2
 800d0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	0151      	lsls	r1, r2, #5
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	440a      	add	r2, r1
 800d0ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d0b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	015a      	lsls	r2, r3, #5
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4413      	add	r3, r2
 800d0c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	0151      	lsls	r1, r2, #5
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	440a      	add	r2, r1
 800d0ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d0d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d0d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	f003 030f 	and.w	r3, r3, #15
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ee:	041b      	lsls	r3, r3, #16
 800d0f0:	43db      	mvns	r3, r3
 800d0f2:	68f9      	ldr	r1, [r7, #12]
 800d0f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0f8:	4013      	ands	r3, r2
 800d0fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d102:	69da      	ldr	r2, [r3, #28]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	f003 030f 	and.w	r3, r3, #15
 800d10c:	2101      	movs	r1, #1
 800d10e:	fa01 f303 	lsl.w	r3, r1, r3
 800d112:	041b      	lsls	r3, r3, #16
 800d114:	43db      	mvns	r3, r3
 800d116:	68f9      	ldr	r1, [r7, #12]
 800d118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d11c:	4013      	ands	r3, r2
 800d11e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	015a      	lsls	r2, r3, #5
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	4413      	add	r3, r2
 800d128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	0159      	lsls	r1, r3, #5
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	440b      	add	r3, r1
 800d136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d13a:	4619      	mov	r1, r3
 800d13c:	4b05      	ldr	r3, [pc, #20]	@ (800d154 <USB_DeactivateEndpoint+0x1b4>)
 800d13e:	4013      	ands	r3, r2
 800d140:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d142:	2300      	movs	r3, #0
}
 800d144:	4618      	mov	r0, r3
 800d146:	3714      	adds	r7, #20
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr
 800d150:	ec337800 	.word	0xec337800
 800d154:	eff37800 	.word	0xeff37800

0800d158 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08a      	sub	sp, #40	@ 0x28
 800d15c:	af02      	add	r7, sp, #8
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	4613      	mov	r3, r2
 800d164:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	785b      	ldrb	r3, [r3, #1]
 800d174:	2b01      	cmp	r3, #1
 800d176:	f040 817f 	bne.w	800d478 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d132      	bne.n	800d1e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	015a      	lsls	r2, r3, #5
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	4413      	add	r3, r2
 800d18a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	69ba      	ldr	r2, [r7, #24]
 800d192:	0151      	lsls	r1, r2, #5
 800d194:	69fa      	ldr	r2, [r7, #28]
 800d196:	440a      	add	r2, r1
 800d198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d19c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d1a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d1a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	015a      	lsls	r2, r3, #5
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	69ba      	ldr	r2, [r7, #24]
 800d1b6:	0151      	lsls	r1, r2, #5
 800d1b8:	69fa      	ldr	r2, [r7, #28]
 800d1ba:	440a      	add	r2, r1
 800d1bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d1c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	015a      	lsls	r2, r3, #5
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1d2:	691b      	ldr	r3, [r3, #16]
 800d1d4:	69ba      	ldr	r2, [r7, #24]
 800d1d6:	0151      	lsls	r1, r2, #5
 800d1d8:	69fa      	ldr	r2, [r7, #28]
 800d1da:	440a      	add	r2, r1
 800d1dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1e0:	0cdb      	lsrs	r3, r3, #19
 800d1e2:	04db      	lsls	r3, r3, #19
 800d1e4:	6113      	str	r3, [r2, #16]
 800d1e6:	e097      	b.n	800d318 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	015a      	lsls	r2, r3, #5
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	69ba      	ldr	r2, [r7, #24]
 800d1f8:	0151      	lsls	r1, r2, #5
 800d1fa:	69fa      	ldr	r2, [r7, #28]
 800d1fc:	440a      	add	r2, r1
 800d1fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d202:	0cdb      	lsrs	r3, r3, #19
 800d204:	04db      	lsls	r3, r3, #19
 800d206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	015a      	lsls	r2, r3, #5
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	4413      	add	r3, r2
 800d210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	69ba      	ldr	r2, [r7, #24]
 800d218:	0151      	lsls	r1, r2, #5
 800d21a:	69fa      	ldr	r2, [r7, #28]
 800d21c:	440a      	add	r2, r1
 800d21e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d222:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d226:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d22a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d11a      	bne.n	800d268 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	691a      	ldr	r2, [r3, #16]
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d903      	bls.n	800d246 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	689a      	ldr	r2, [r3, #8]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	69ba      	ldr	r2, [r7, #24]
 800d256:	0151      	lsls	r1, r2, #5
 800d258:	69fa      	ldr	r2, [r7, #28]
 800d25a:	440a      	add	r2, r1
 800d25c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d260:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d264:	6113      	str	r3, [r2, #16]
 800d266:	e044      	b.n	800d2f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	691a      	ldr	r2, [r3, #16]
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	4413      	add	r3, r2
 800d272:	1e5a      	subs	r2, r3, #1
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	fbb2 f3f3 	udiv	r3, r2, r3
 800d27c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	015a      	lsls	r2, r3, #5
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	4413      	add	r3, r2
 800d286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d28a:	691a      	ldr	r2, [r3, #16]
 800d28c:	8afb      	ldrh	r3, [r7, #22]
 800d28e:	04d9      	lsls	r1, r3, #19
 800d290:	4ba4      	ldr	r3, [pc, #656]	@ (800d524 <USB_EPStartXfer+0x3cc>)
 800d292:	400b      	ands	r3, r1
 800d294:	69b9      	ldr	r1, [r7, #24]
 800d296:	0148      	lsls	r0, r1, #5
 800d298:	69f9      	ldr	r1, [r7, #28]
 800d29a:	4401      	add	r1, r0
 800d29c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	791b      	ldrb	r3, [r3, #4]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d122      	bne.n	800d2f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d2ac:	69bb      	ldr	r3, [r7, #24]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	0151      	lsls	r1, r2, #5
 800d2be:	69fa      	ldr	r2, [r7, #28]
 800d2c0:	440a      	add	r2, r1
 800d2c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d2ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	015a      	lsls	r2, r3, #5
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2d8:	691a      	ldr	r2, [r3, #16]
 800d2da:	8afb      	ldrh	r3, [r7, #22]
 800d2dc:	075b      	lsls	r3, r3, #29
 800d2de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d2e2:	69b9      	ldr	r1, [r7, #24]
 800d2e4:	0148      	lsls	r0, r1, #5
 800d2e6:	69f9      	ldr	r1, [r7, #28]
 800d2e8:	4401      	add	r1, r0
 800d2ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2fe:	691a      	ldr	r2, [r3, #16]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d308:	69b9      	ldr	r1, [r7, #24]
 800d30a:	0148      	lsls	r0, r1, #5
 800d30c:	69f9      	ldr	r1, [r7, #28]
 800d30e:	4401      	add	r1, r0
 800d310:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d314:	4313      	orrs	r3, r2
 800d316:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d318:	79fb      	ldrb	r3, [r7, #7]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d14b      	bne.n	800d3b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	69db      	ldr	r3, [r3, #28]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d009      	beq.n	800d33a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	015a      	lsls	r2, r3, #5
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	4413      	add	r3, r2
 800d32e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d332:	461a      	mov	r2, r3
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	791b      	ldrb	r3, [r3, #4]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d128      	bne.n	800d394 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d110      	bne.n	800d374 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	015a      	lsls	r2, r3, #5
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	4413      	add	r3, r2
 800d35a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	0151      	lsls	r1, r2, #5
 800d364:	69fa      	ldr	r2, [r7, #28]
 800d366:	440a      	add	r2, r1
 800d368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d36c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d370:	6013      	str	r3, [r2, #0]
 800d372:	e00f      	b.n	800d394 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	015a      	lsls	r2, r3, #5
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	4413      	add	r3, r2
 800d37c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	69ba      	ldr	r2, [r7, #24]
 800d384:	0151      	lsls	r1, r2, #5
 800d386:	69fa      	ldr	r2, [r7, #28]
 800d388:	440a      	add	r2, r1
 800d38a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d38e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d392:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	015a      	lsls	r2, r3, #5
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	4413      	add	r3, r2
 800d39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	69ba      	ldr	r2, [r7, #24]
 800d3a4:	0151      	lsls	r1, r2, #5
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	440a      	add	r2, r1
 800d3aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d3b2:	6013      	str	r3, [r2, #0]
 800d3b4:	e166      	b.n	800d684 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	69ba      	ldr	r2, [r7, #24]
 800d3c6:	0151      	lsls	r1, r2, #5
 800d3c8:	69fa      	ldr	r2, [r7, #28]
 800d3ca:	440a      	add	r2, r1
 800d3cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d3d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	791b      	ldrb	r3, [r3, #4]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d015      	beq.n	800d40a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 814e 	beq.w	800d684 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 030f 	and.w	r3, r3, #15
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3fe:	69f9      	ldr	r1, [r7, #28]
 800d400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d404:	4313      	orrs	r3, r2
 800d406:	634b      	str	r3, [r1, #52]	@ 0x34
 800d408:	e13c      	b.n	800d684 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d416:	2b00      	cmp	r3, #0
 800d418:	d110      	bne.n	800d43c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	015a      	lsls	r2, r3, #5
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	4413      	add	r3, r2
 800d422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	69ba      	ldr	r2, [r7, #24]
 800d42a:	0151      	lsls	r1, r2, #5
 800d42c:	69fa      	ldr	r2, [r7, #28]
 800d42e:	440a      	add	r2, r1
 800d430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d438:	6013      	str	r3, [r2, #0]
 800d43a:	e00f      	b.n	800d45c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	4413      	add	r3, r2
 800d444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	0151      	lsls	r1, r2, #5
 800d44e:	69fa      	ldr	r2, [r7, #28]
 800d450:	440a      	add	r2, r1
 800d452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d45a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	68d9      	ldr	r1, [r3, #12]
 800d460:	68bb      	ldr	r3, [r7, #8]
 800d462:	781a      	ldrb	r2, [r3, #0]
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	b298      	uxth	r0, r3
 800d46a:	79fb      	ldrb	r3, [r7, #7]
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	4603      	mov	r3, r0
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f000 f9b9 	bl	800d7e8 <USB_WritePacket>
 800d476:	e105      	b.n	800d684 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	015a      	lsls	r2, r3, #5
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	4413      	add	r3, r2
 800d480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	69ba      	ldr	r2, [r7, #24]
 800d488:	0151      	lsls	r1, r2, #5
 800d48a:	69fa      	ldr	r2, [r7, #28]
 800d48c:	440a      	add	r2, r1
 800d48e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d492:	0cdb      	lsrs	r3, r3, #19
 800d494:	04db      	lsls	r3, r3, #19
 800d496:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	69ba      	ldr	r2, [r7, #24]
 800d4a8:	0151      	lsls	r1, r2, #5
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	440a      	add	r2, r1
 800d4ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d4b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d4ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d132      	bne.n	800d528 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	689a      	ldr	r2, [r3, #8]
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	015a      	lsls	r2, r3, #5
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4e6:	691a      	ldr	r2, [r3, #16]
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4f0:	69b9      	ldr	r1, [r7, #24]
 800d4f2:	0148      	lsls	r0, r1, #5
 800d4f4:	69f9      	ldr	r1, [r7, #28]
 800d4f6:	4401      	add	r1, r0
 800d4f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d500:	69bb      	ldr	r3, [r7, #24]
 800d502:	015a      	lsls	r2, r3, #5
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	4413      	add	r3, r2
 800d508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	69ba      	ldr	r2, [r7, #24]
 800d510:	0151      	lsls	r1, r2, #5
 800d512:	69fa      	ldr	r2, [r7, #28]
 800d514:	440a      	add	r2, r1
 800d516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d51a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d51e:	6113      	str	r3, [r2, #16]
 800d520:	e062      	b.n	800d5e8 <USB_EPStartXfer+0x490>
 800d522:	bf00      	nop
 800d524:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	691b      	ldr	r3, [r3, #16]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d123      	bne.n	800d578 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	015a      	lsls	r2, r3, #5
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	4413      	add	r3, r2
 800d538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d53c:	691a      	ldr	r2, [r3, #16]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d546:	69b9      	ldr	r1, [r7, #24]
 800d548:	0148      	lsls	r0, r1, #5
 800d54a:	69f9      	ldr	r1, [r7, #28]
 800d54c:	4401      	add	r1, r0
 800d54e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d552:	4313      	orrs	r3, r2
 800d554:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	015a      	lsls	r2, r3, #5
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	4413      	add	r3, r2
 800d55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	69ba      	ldr	r2, [r7, #24]
 800d566:	0151      	lsls	r1, r2, #5
 800d568:	69fa      	ldr	r2, [r7, #28]
 800d56a:	440a      	add	r2, r1
 800d56c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d570:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d574:	6113      	str	r3, [r2, #16]
 800d576:	e037      	b.n	800d5e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	691a      	ldr	r2, [r3, #16]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	4413      	add	r3, r2
 800d582:	1e5a      	subs	r2, r3, #1
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	fbb2 f3f3 	udiv	r3, r2, r3
 800d58c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	8afa      	ldrh	r2, [r7, #22]
 800d594:	fb03 f202 	mul.w	r2, r3, r2
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	015a      	lsls	r2, r3, #5
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5a8:	691a      	ldr	r2, [r3, #16]
 800d5aa:	8afb      	ldrh	r3, [r7, #22]
 800d5ac:	04d9      	lsls	r1, r3, #19
 800d5ae:	4b38      	ldr	r3, [pc, #224]	@ (800d690 <USB_EPStartXfer+0x538>)
 800d5b0:	400b      	ands	r3, r1
 800d5b2:	69b9      	ldr	r1, [r7, #24]
 800d5b4:	0148      	lsls	r0, r1, #5
 800d5b6:	69f9      	ldr	r1, [r7, #28]
 800d5b8:	4401      	add	r1, r0
 800d5ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	69fb      	ldr	r3, [r7, #28]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ce:	691a      	ldr	r2, [r3, #16]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5d8:	69b9      	ldr	r1, [r7, #24]
 800d5da:	0148      	lsls	r0, r1, #5
 800d5dc:	69f9      	ldr	r1, [r7, #28]
 800d5de:	4401      	add	r1, r0
 800d5e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d10d      	bne.n	800d60a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d009      	beq.n	800d60a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	68d9      	ldr	r1, [r3, #12]
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	015a      	lsls	r2, r3, #5
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	4413      	add	r3, r2
 800d602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d606:	460a      	mov	r2, r1
 800d608:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	791b      	ldrb	r3, [r3, #4]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d128      	bne.n	800d664 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d618:	689b      	ldr	r3, [r3, #8]
 800d61a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d110      	bne.n	800d644 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	015a      	lsls	r2, r3, #5
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	4413      	add	r3, r2
 800d62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	69ba      	ldr	r2, [r7, #24]
 800d632:	0151      	lsls	r1, r2, #5
 800d634:	69fa      	ldr	r2, [r7, #28]
 800d636:	440a      	add	r2, r1
 800d638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d63c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	e00f      	b.n	800d664 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	015a      	lsls	r2, r3, #5
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	0151      	lsls	r1, r2, #5
 800d656:	69fa      	ldr	r2, [r7, #28]
 800d658:	440a      	add	r2, r1
 800d65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d65e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d662:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	69ba      	ldr	r2, [r7, #24]
 800d674:	0151      	lsls	r1, r2, #5
 800d676:	69fa      	ldr	r2, [r7, #28]
 800d678:	440a      	add	r2, r1
 800d67a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d67e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3720      	adds	r7, #32
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	1ff80000 	.word	0x1ff80000

0800d694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d694:	b480      	push	{r7}
 800d696:	b087      	sub	sp, #28
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	785b      	ldrb	r3, [r3, #1]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d14a      	bne.n	800d748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	015a      	lsls	r2, r3, #5
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6ca:	f040 8086 	bne.w	800d7da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	015a      	lsls	r2, r3, #5
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	7812      	ldrb	r2, [r2, #0]
 800d6e2:	0151      	lsls	r1, r2, #5
 800d6e4:	693a      	ldr	r2, [r7, #16]
 800d6e6:	440a      	add	r2, r1
 800d6e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d6f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	683a      	ldr	r2, [r7, #0]
 800d704:	7812      	ldrb	r2, [r2, #0]
 800d706:	0151      	lsls	r1, r2, #5
 800d708:	693a      	ldr	r2, [r7, #16]
 800d70a:	440a      	add	r2, r1
 800d70c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d710:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	3301      	adds	r3, #1
 800d71a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d722:	4293      	cmp	r3, r2
 800d724:	d902      	bls.n	800d72c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d726:	2301      	movs	r3, #1
 800d728:	75fb      	strb	r3, [r7, #23]
          break;
 800d72a:	e056      	b.n	800d7da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	015a      	lsls	r2, r3, #5
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	4413      	add	r3, r2
 800d736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d744:	d0e7      	beq.n	800d716 <USB_EPStopXfer+0x82>
 800d746:	e048      	b.n	800d7da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	4413      	add	r3, r2
 800d752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d75c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d760:	d13b      	bne.n	800d7da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	7812      	ldrb	r2, [r2, #0]
 800d776:	0151      	lsls	r1, r2, #5
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	440a      	add	r2, r1
 800d77c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d780:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	7812      	ldrb	r2, [r2, #0]
 800d79a:	0151      	lsls	r1, r2, #5
 800d79c:	693a      	ldr	r2, [r7, #16]
 800d79e:	440a      	add	r2, r1
 800d7a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d7a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d902      	bls.n	800d7c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d7be:	e00c      	b.n	800d7da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	015a      	lsls	r2, r3, #5
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7d8:	d0e7      	beq.n	800d7aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	371c      	adds	r7, #28
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b089      	sub	sp, #36	@ 0x24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	71fb      	strb	r3, [r7, #7]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d806:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d123      	bne.n	800d856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d80e:	88bb      	ldrh	r3, [r7, #4]
 800d810:	3303      	adds	r3, #3
 800d812:	089b      	lsrs	r3, r3, #2
 800d814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d816:	2300      	movs	r3, #0
 800d818:	61bb      	str	r3, [r7, #24]
 800d81a:	e018      	b.n	800d84e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	031a      	lsls	r2, r3, #12
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	4413      	add	r3, r2
 800d824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d828:	461a      	mov	r2, r3
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	3301      	adds	r3, #1
 800d834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	3301      	adds	r3, #1
 800d83a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	3301      	adds	r3, #1
 800d840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	3301      	adds	r3, #1
 800d846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	3301      	adds	r3, #1
 800d84c:	61bb      	str	r3, [r7, #24]
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	429a      	cmp	r2, r3
 800d854:	d3e2      	bcc.n	800d81c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3724      	adds	r7, #36	@ 0x24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d864:	b480      	push	{r7}
 800d866:	b08b      	sub	sp, #44	@ 0x2c
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	4613      	mov	r3, r2
 800d870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d87a:	88fb      	ldrh	r3, [r7, #6]
 800d87c:	089b      	lsrs	r3, r3, #2
 800d87e:	b29b      	uxth	r3, r3
 800d880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d882:	88fb      	ldrh	r3, [r7, #6]
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d88a:	2300      	movs	r3, #0
 800d88c:	623b      	str	r3, [r7, #32]
 800d88e:	e014      	b.n	800d8ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	3301      	adds	r3, #1
 800d8a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d8b4:	6a3b      	ldr	r3, [r7, #32]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	623b      	str	r3, [r7, #32]
 800d8ba:	6a3a      	ldr	r2, [r7, #32]
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d3e6      	bcc.n	800d890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d8c2:	8bfb      	ldrh	r3, [r7, #30]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d01e      	beq.n	800d906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	f107 0310 	add.w	r3, r7, #16
 800d8d8:	6812      	ldr	r2, [r2, #0]
 800d8da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d8dc:	693a      	ldr	r2, [r7, #16]
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ec:	701a      	strb	r2, [r3, #0]
      i++;
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d8fa:	8bfb      	ldrh	r3, [r7, #30]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d900:	8bfb      	ldrh	r3, [r7, #30]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1ea      	bne.n	800d8dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d908:	4618      	mov	r0, r3
 800d90a:	372c      	adds	r7, #44	@ 0x2c
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	785b      	ldrb	r3, [r3, #1]
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d12c      	bne.n	800d98a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	015a      	lsls	r2, r3, #5
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	4413      	add	r3, r2
 800d938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	db12      	blt.n	800d968 <USB_EPSetStall+0x54>
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00f      	beq.n	800d968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	015a      	lsls	r2, r3, #5
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4413      	add	r3, r2
 800d950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	0151      	lsls	r1, r2, #5
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	440a      	add	r2, r1
 800d95e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d962:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	015a      	lsls	r2, r3, #5
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	0151      	lsls	r1, r2, #5
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	440a      	add	r2, r1
 800d97e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d986:	6013      	str	r3, [r2, #0]
 800d988:	e02b      	b.n	800d9e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	015a      	lsls	r2, r3, #5
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	4413      	add	r3, r2
 800d992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	db12      	blt.n	800d9c2 <USB_EPSetStall+0xae>
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00f      	beq.n	800d9c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	015a      	lsls	r2, r3, #5
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	0151      	lsls	r1, r2, #5
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	440a      	add	r2, r1
 800d9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d9c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	015a      	lsls	r2, r3, #5
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	0151      	lsls	r1, r2, #5
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	440a      	add	r2, r1
 800d9d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d9dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d9e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d128      	bne.n	800da5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	015a      	lsls	r2, r3, #5
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68ba      	ldr	r2, [r7, #8]
 800da1c:	0151      	lsls	r1, r2, #5
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	440a      	add	r2, r1
 800da22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	791b      	ldrb	r3, [r3, #4]
 800da30:	2b03      	cmp	r3, #3
 800da32:	d003      	beq.n	800da3c <USB_EPClearStall+0x4c>
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	791b      	ldrb	r3, [r3, #4]
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d138      	bne.n	800daae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	015a      	lsls	r2, r3, #5
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4413      	add	r3, r2
 800da44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	0151      	lsls	r1, r2, #5
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	440a      	add	r2, r1
 800da52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da5a:	6013      	str	r3, [r2, #0]
 800da5c:	e027      	b.n	800daae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	015a      	lsls	r2, r3, #5
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	4413      	add	r3, r2
 800da66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	0151      	lsls	r1, r2, #5
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	440a      	add	r2, r1
 800da74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	791b      	ldrb	r3, [r3, #4]
 800da82:	2b03      	cmp	r3, #3
 800da84:	d003      	beq.n	800da8e <USB_EPClearStall+0x9e>
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	791b      	ldrb	r3, [r3, #4]
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d10f      	bne.n	800daae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	015a      	lsls	r2, r3, #5
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	4413      	add	r3, r2
 800da96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	0151      	lsls	r1, r2, #5
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	440a      	add	r2, r1
 800daa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800daa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800daac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dada:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	011b      	lsls	r3, r3, #4
 800daec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800daf0:	68f9      	ldr	r1, [r7, #12]
 800daf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800daf6:	4313      	orrs	r3, r2
 800daf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800db08:	b480      	push	{r7}
 800db0a:	b085      	sub	sp, #20
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db22:	f023 0303 	bic.w	r3, r3, #3
 800db26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db36:	f023 0302 	bic.w	r3, r3, #2
 800db3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b085      	sub	sp, #20
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db64:	f023 0303 	bic.w	r3, r3, #3
 800db68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	68fa      	ldr	r2, [r7, #12]
 800db74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db78:	f043 0302 	orr.w	r3, r3, #2
 800db7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db7e:	2300      	movs	r3, #0
}
 800db80:	4618      	mov	r0, r3
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4013      	ands	r3, r2
 800dba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dba4:	68fb      	ldr	r3, [r7, #12]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbce:	69db      	ldr	r3, [r3, #28]
 800dbd0:	68ba      	ldr	r2, [r7, #8]
 800dbd2:	4013      	ands	r3, r2
 800dbd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	0c1b      	lsrs	r3, r3, #16
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbf8:	699b      	ldr	r3, [r3, #24]
 800dbfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc02:	69db      	ldr	r3, [r3, #28]
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	4013      	ands	r3, r2
 800dc08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	b29b      	uxth	r3, r3
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	b085      	sub	sp, #20
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	460b      	mov	r3, r1
 800dc24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	015a      	lsls	r2, r3, #5
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	4413      	add	r3, r2
 800dc32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	68ba      	ldr	r2, [r7, #8]
 800dc44:	4013      	ands	r3, r2
 800dc46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc48:	68bb      	ldr	r3, [r7, #8]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b087      	sub	sp, #28
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	460b      	mov	r3, r1
 800dc60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dc7a:	78fb      	ldrb	r3, [r7, #3]
 800dc7c:	f003 030f 	and.w	r3, r3, #15
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	fa22 f303 	lsr.w	r3, r2, r3
 800dc86:	01db      	lsls	r3, r3, #7
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dc90:	78fb      	ldrb	r3, [r7, #3]
 800dc92:	015a      	lsls	r2, r3, #5
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	4413      	add	r3, r2
 800dc98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	4013      	ands	r3, r2
 800dca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dca4:	68bb      	ldr	r3, [r7, #8]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b083      	sub	sp, #12
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	f003 0301 	and.w	r3, r3, #1
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b085      	sub	sp, #20
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dce8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800dcec:	f023 0307 	bic.w	r3, r3, #7
 800dcf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b087      	sub	sp, #28
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	607a      	str	r2, [r7, #4]
 800dd20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	333c      	adds	r3, #60	@ 0x3c
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	4a26      	ldr	r2, [pc, #152]	@ (800ddcc <USB_EP0_OutStart+0xb8>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d90a      	bls.n	800dd4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd48:	d101      	bne.n	800dd4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	e037      	b.n	800ddbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd54:	461a      	mov	r2, r3
 800dd56:	2300      	movs	r3, #0
 800dd58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	697a      	ldr	r2, [r7, #20]
 800dd64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd7c:	f043 0318 	orr.w	r3, r3, #24
 800dd80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	697a      	ldr	r2, [r7, #20]
 800dd8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800dd94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dd96:	7afb      	ldrb	r3, [r7, #11]
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d10f      	bne.n	800ddbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dda2:	461a      	mov	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	697a      	ldr	r2, [r7, #20]
 800ddb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ddb6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ddba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	371c      	adds	r7, #28
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc8:	4770      	bx	lr
 800ddca:	bf00      	nop
 800ddcc:	4f54300a 	.word	0x4f54300a

0800ddd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	3301      	adds	r3, #1
 800dde0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dde8:	d901      	bls.n	800ddee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ddea:	2303      	movs	r3, #3
 800ddec:	e01b      	b.n	800de26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	daf2      	bge.n	800dddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	f043 0201 	orr.w	r2, r3, #1
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3301      	adds	r3, #1
 800de0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de12:	d901      	bls.n	800de18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de14:	2303      	movs	r3, #3
 800de16:	e006      	b.n	800de26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	691b      	ldr	r3, [r3, #16]
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	2b01      	cmp	r3, #1
 800de22:	d0f0      	beq.n	800de06 <USB_CoreReset+0x36>

  return HAL_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3714      	adds	r7, #20
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
	...

0800de34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800de44:	f002 fd00 	bl	8010848 <USBD_static_malloc>
 800de48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d109      	bne.n	800de64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	32b0      	adds	r2, #176	@ 0xb0
 800de5a:	2100      	movs	r1, #0
 800de5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800de60:	2302      	movs	r3, #2
 800de62:	e0d4      	b.n	800e00e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800de64:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800de68:	2100      	movs	r1, #0
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f002 fd52 	bl	8010914 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	32b0      	adds	r2, #176	@ 0xb0
 800de7a:	68f9      	ldr	r1, [r7, #12]
 800de7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	32b0      	adds	r2, #176	@ 0xb0
 800de8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	7c1b      	ldrb	r3, [r3, #16]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d138      	bne.n	800df0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de9c:	4b5e      	ldr	r3, [pc, #376]	@ (800e018 <USBD_CDC_Init+0x1e4>)
 800de9e:	7819      	ldrb	r1, [r3, #0]
 800dea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dea4:	2202      	movs	r2, #2
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f002 fbab 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800deac:	4b5a      	ldr	r3, [pc, #360]	@ (800e018 <USBD_CDC_Init+0x1e4>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f003 020f 	and.w	r2, r3, #15
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	4613      	mov	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	440b      	add	r3, r1
 800dec0:	3324      	adds	r3, #36	@ 0x24
 800dec2:	2201      	movs	r2, #1
 800dec4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dec6:	4b55      	ldr	r3, [pc, #340]	@ (800e01c <USBD_CDC_Init+0x1e8>)
 800dec8:	7819      	ldrb	r1, [r3, #0]
 800deca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dece:	2202      	movs	r2, #2
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f002 fb96 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ded6:	4b51      	ldr	r3, [pc, #324]	@ (800e01c <USBD_CDC_Init+0x1e8>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	f003 020f 	and.w	r2, r3, #15
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4613      	mov	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	440b      	add	r3, r1
 800deea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800deee:	2201      	movs	r2, #1
 800def0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800def2:	4b4b      	ldr	r3, [pc, #300]	@ (800e020 <USBD_CDC_Init+0x1ec>)
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	f003 020f 	and.w	r2, r3, #15
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	4613      	mov	r3, r2
 800defe:	009b      	lsls	r3, r3, #2
 800df00:	4413      	add	r3, r2
 800df02:	009b      	lsls	r3, r3, #2
 800df04:	440b      	add	r3, r1
 800df06:	3326      	adds	r3, #38	@ 0x26
 800df08:	2210      	movs	r2, #16
 800df0a:	801a      	strh	r2, [r3, #0]
 800df0c:	e035      	b.n	800df7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df0e:	4b42      	ldr	r3, [pc, #264]	@ (800e018 <USBD_CDC_Init+0x1e4>)
 800df10:	7819      	ldrb	r1, [r3, #0]
 800df12:	2340      	movs	r3, #64	@ 0x40
 800df14:	2202      	movs	r2, #2
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f002 fb73 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df1c:	4b3e      	ldr	r3, [pc, #248]	@ (800e018 <USBD_CDC_Init+0x1e4>)
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	f003 020f 	and.w	r2, r3, #15
 800df24:	6879      	ldr	r1, [r7, #4]
 800df26:	4613      	mov	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	440b      	add	r3, r1
 800df30:	3324      	adds	r3, #36	@ 0x24
 800df32:	2201      	movs	r2, #1
 800df34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df36:	4b39      	ldr	r3, [pc, #228]	@ (800e01c <USBD_CDC_Init+0x1e8>)
 800df38:	7819      	ldrb	r1, [r3, #0]
 800df3a:	2340      	movs	r3, #64	@ 0x40
 800df3c:	2202      	movs	r2, #2
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f002 fb5f 	bl	8010602 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df44:	4b35      	ldr	r3, [pc, #212]	@ (800e01c <USBD_CDC_Init+0x1e8>)
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 020f 	and.w	r2, r3, #15
 800df4c:	6879      	ldr	r1, [r7, #4]
 800df4e:	4613      	mov	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	4413      	add	r3, r2
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	440b      	add	r3, r1
 800df58:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df5c:	2201      	movs	r2, #1
 800df5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df60:	4b2f      	ldr	r3, [pc, #188]	@ (800e020 <USBD_CDC_Init+0x1ec>)
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	f003 020f 	and.w	r2, r3, #15
 800df68:	6879      	ldr	r1, [r7, #4]
 800df6a:	4613      	mov	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	4413      	add	r3, r2
 800df70:	009b      	lsls	r3, r3, #2
 800df72:	440b      	add	r3, r1
 800df74:	3326      	adds	r3, #38	@ 0x26
 800df76:	2210      	movs	r2, #16
 800df78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df7a:	4b29      	ldr	r3, [pc, #164]	@ (800e020 <USBD_CDC_Init+0x1ec>)
 800df7c:	7819      	ldrb	r1, [r3, #0]
 800df7e:	2308      	movs	r3, #8
 800df80:	2203      	movs	r2, #3
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f002 fb3d 	bl	8010602 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df88:	4b25      	ldr	r3, [pc, #148]	@ (800e020 <USBD_CDC_Init+0x1ec>)
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	f003 020f 	and.w	r2, r3, #15
 800df90:	6879      	ldr	r1, [r7, #4]
 800df92:	4613      	mov	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4413      	add	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	440b      	add	r3, r1
 800df9c:	3324      	adds	r3, #36	@ 0x24
 800df9e:	2201      	movs	r2, #1
 800dfa0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	33b0      	adds	r3, #176	@ 0xb0
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dfd8:	2302      	movs	r3, #2
 800dfda:	e018      	b.n	800e00e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	7c1b      	ldrb	r3, [r3, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10a      	bne.n	800dffa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfe4:	4b0d      	ldr	r3, [pc, #52]	@ (800e01c <USBD_CDC_Init+0x1e8>)
 800dfe6:	7819      	ldrb	r1, [r3, #0]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f002 fbf4 	bl	80107e0 <USBD_LL_PrepareReceive>
 800dff8:	e008      	b.n	800e00c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dffa:	4b08      	ldr	r3, [pc, #32]	@ (800e01c <USBD_CDC_Init+0x1e8>)
 800dffc:	7819      	ldrb	r1, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e004:	2340      	movs	r3, #64	@ 0x40
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	f002 fbea 	bl	80107e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	200000a3 	.word	0x200000a3
 800e01c:	200000a4 	.word	0x200000a4
 800e020:	200000a5 	.word	0x200000a5

0800e024 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e030:	4b3a      	ldr	r3, [pc, #232]	@ (800e11c <USBD_CDC_DeInit+0xf8>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f002 fb09 	bl	801064e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e03c:	4b37      	ldr	r3, [pc, #220]	@ (800e11c <USBD_CDC_DeInit+0xf8>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	f003 020f 	and.w	r2, r3, #15
 800e044:	6879      	ldr	r1, [r7, #4]
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	440b      	add	r3, r1
 800e050:	3324      	adds	r3, #36	@ 0x24
 800e052:	2200      	movs	r2, #0
 800e054:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e056:	4b32      	ldr	r3, [pc, #200]	@ (800e120 <USBD_CDC_DeInit+0xfc>)
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	4619      	mov	r1, r3
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f002 faf6 	bl	801064e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e062:	4b2f      	ldr	r3, [pc, #188]	@ (800e120 <USBD_CDC_DeInit+0xfc>)
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	f003 020f 	and.w	r2, r3, #15
 800e06a:	6879      	ldr	r1, [r7, #4]
 800e06c:	4613      	mov	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	4413      	add	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	440b      	add	r3, r1
 800e076:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e07a:	2200      	movs	r2, #0
 800e07c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e07e:	4b29      	ldr	r3, [pc, #164]	@ (800e124 <USBD_CDC_DeInit+0x100>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	4619      	mov	r1, r3
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f002 fae2 	bl	801064e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e08a:	4b26      	ldr	r3, [pc, #152]	@ (800e124 <USBD_CDC_DeInit+0x100>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	f003 020f 	and.w	r2, r3, #15
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	4613      	mov	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	440b      	add	r3, r1
 800e09e:	3324      	adds	r3, #36	@ 0x24
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e0a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e124 <USBD_CDC_DeInit+0x100>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	f003 020f 	and.w	r2, r3, #15
 800e0ac:	6879      	ldr	r1, [r7, #4]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	440b      	add	r3, r1
 800e0b8:	3326      	adds	r3, #38	@ 0x26
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	32b0      	adds	r2, #176	@ 0xb0
 800e0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01f      	beq.n	800e110 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	33b0      	adds	r3, #176	@ 0xb0
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	32b0      	adds	r2, #176	@ 0xb0
 800e0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f002 fbb6 	bl	8010864 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	32b0      	adds	r2, #176	@ 0xb0
 800e102:	2100      	movs	r1, #0
 800e104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e110:	2300      	movs	r3, #0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	200000a3 	.word	0x200000a3
 800e120:	200000a4 	.word	0x200000a4
 800e124:	200000a5 	.word	0x200000a5

0800e128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	32b0      	adds	r2, #176	@ 0xb0
 800e13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e140:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e142:	2300      	movs	r3, #0
 800e144:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e146:	2300      	movs	r3, #0
 800e148:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e14a:	2300      	movs	r3, #0
 800e14c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e154:	2303      	movs	r3, #3
 800e156:	e0bf      	b.n	800e2d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e160:	2b00      	cmp	r3, #0
 800e162:	d050      	beq.n	800e206 <USBD_CDC_Setup+0xde>
 800e164:	2b20      	cmp	r3, #32
 800e166:	f040 80af 	bne.w	800e2c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	88db      	ldrh	r3, [r3, #6]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d03a      	beq.n	800e1e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	b25b      	sxtb	r3, r3
 800e178:	2b00      	cmp	r3, #0
 800e17a:	da1b      	bge.n	800e1b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	33b0      	adds	r3, #176	@ 0xb0
 800e186:	009b      	lsls	r3, r3, #2
 800e188:	4413      	add	r3, r2
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	683a      	ldr	r2, [r7, #0]
 800e190:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e192:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	88d2      	ldrh	r2, [r2, #6]
 800e198:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	88db      	ldrh	r3, [r3, #6]
 800e19e:	2b07      	cmp	r3, #7
 800e1a0:	bf28      	it	cs
 800e1a2:	2307      	movcs	r3, #7
 800e1a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	89fa      	ldrh	r2, [r7, #14]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f001 fd93 	bl	800fcd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e1b2:	e090      	b.n	800e2d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	785a      	ldrb	r2, [r3, #1]
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	88db      	ldrh	r3, [r3, #6]
 800e1c2:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1c4:	d803      	bhi.n	800e1ce <USBD_CDC_Setup+0xa6>
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	88db      	ldrh	r3, [r3, #6]
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	e000      	b.n	800e1d0 <USBD_CDC_Setup+0xa8>
 800e1ce:	2240      	movs	r2, #64	@ 0x40
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e1d6:	6939      	ldr	r1, [r7, #16]
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e1de:	461a      	mov	r2, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f001 fda5 	bl	800fd30 <USBD_CtlPrepareRx>
      break;
 800e1e6:	e076      	b.n	800e2d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	33b0      	adds	r3, #176	@ 0xb0
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	7850      	ldrb	r0, [r2, #1]
 800e1fe:	2200      	movs	r2, #0
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	4798      	blx	r3
      break;
 800e204:	e067      	b.n	800e2d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	785b      	ldrb	r3, [r3, #1]
 800e20a:	2b0b      	cmp	r3, #11
 800e20c:	d851      	bhi.n	800e2b2 <USBD_CDC_Setup+0x18a>
 800e20e:	a201      	add	r2, pc, #4	@ (adr r2, 800e214 <USBD_CDC_Setup+0xec>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e245 	.word	0x0800e245
 800e218:	0800e2c1 	.word	0x0800e2c1
 800e21c:	0800e2b3 	.word	0x0800e2b3
 800e220:	0800e2b3 	.word	0x0800e2b3
 800e224:	0800e2b3 	.word	0x0800e2b3
 800e228:	0800e2b3 	.word	0x0800e2b3
 800e22c:	0800e2b3 	.word	0x0800e2b3
 800e230:	0800e2b3 	.word	0x0800e2b3
 800e234:	0800e2b3 	.word	0x0800e2b3
 800e238:	0800e2b3 	.word	0x0800e2b3
 800e23c:	0800e26f 	.word	0x0800e26f
 800e240:	0800e299 	.word	0x0800e299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d107      	bne.n	800e260 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e250:	f107 030a 	add.w	r3, r7, #10
 800e254:	2202      	movs	r2, #2
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f001 fd3d 	bl	800fcd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e25e:	e032      	b.n	800e2c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f001 fcbb 	bl	800fbde <USBD_CtlError>
            ret = USBD_FAIL;
 800e268:	2303      	movs	r3, #3
 800e26a:	75fb      	strb	r3, [r7, #23]
          break;
 800e26c:	e02b      	b.n	800e2c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b03      	cmp	r3, #3
 800e278:	d107      	bne.n	800e28a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e27a:	f107 030d 	add.w	r3, r7, #13
 800e27e:	2201      	movs	r2, #1
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 fd28 	bl	800fcd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e288:	e01d      	b.n	800e2c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f001 fca6 	bl	800fbde <USBD_CtlError>
            ret = USBD_FAIL;
 800e292:	2303      	movs	r3, #3
 800e294:	75fb      	strb	r3, [r7, #23]
          break;
 800e296:	e016      	b.n	800e2c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b03      	cmp	r3, #3
 800e2a2:	d00f      	beq.n	800e2c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f001 fc99 	bl	800fbde <USBD_CtlError>
            ret = USBD_FAIL;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2b0:	e008      	b.n	800e2c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f001 fc92 	bl	800fbde <USBD_CtlError>
          ret = USBD_FAIL;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	75fb      	strb	r3, [r7, #23]
          break;
 800e2be:	e002      	b.n	800e2c6 <USBD_CDC_Setup+0x19e>
          break;
 800e2c0:	bf00      	nop
 800e2c2:	e008      	b.n	800e2d6 <USBD_CDC_Setup+0x1ae>
          break;
 800e2c4:	bf00      	nop
      }
      break;
 800e2c6:	e006      	b.n	800e2d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f001 fc87 	bl	800fbde <USBD_CtlError>
      ret = USBD_FAIL;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	32b0      	adds	r2, #176	@ 0xb0
 800e2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e306:	2303      	movs	r3, #3
 800e308:	e065      	b.n	800e3d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	32b0      	adds	r2, #176	@ 0xb0
 800e314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e31a:	78fb      	ldrb	r3, [r7, #3]
 800e31c:	f003 020f 	and.w	r2, r3, #15
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	440b      	add	r3, r1
 800e32c:	3318      	adds	r3, #24
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d02f      	beq.n	800e394 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e334:	78fb      	ldrb	r3, [r7, #3]
 800e336:	f003 020f 	and.w	r2, r3, #15
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	4613      	mov	r3, r2
 800e33e:	009b      	lsls	r3, r3, #2
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	440b      	add	r3, r1
 800e346:	3318      	adds	r3, #24
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	78fb      	ldrb	r3, [r7, #3]
 800e34c:	f003 010f 	and.w	r1, r3, #15
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	460b      	mov	r3, r1
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	440b      	add	r3, r1
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4403      	add	r3, r0
 800e35c:	331c      	adds	r3, #28
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	fbb2 f1f3 	udiv	r1, r2, r3
 800e364:	fb01 f303 	mul.w	r3, r1, r3
 800e368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d112      	bne.n	800e394 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e36e:	78fb      	ldrb	r3, [r7, #3]
 800e370:	f003 020f 	and.w	r2, r3, #15
 800e374:	6879      	ldr	r1, [r7, #4]
 800e376:	4613      	mov	r3, r2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	4413      	add	r3, r2
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	440b      	add	r3, r1
 800e380:	3318      	adds	r3, #24
 800e382:	2200      	movs	r2, #0
 800e384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e386:	78f9      	ldrb	r1, [r7, #3]
 800e388:	2300      	movs	r3, #0
 800e38a:	2200      	movs	r2, #0
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f002 fa06 	bl	801079e <USBD_LL_Transmit>
 800e392:	e01f      	b.n	800e3d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	33b0      	adds	r3, #176	@ 0xb0
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	4413      	add	r3, r2
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d010      	beq.n	800e3d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	33b0      	adds	r3, #176	@ 0xb0
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	691b      	ldr	r3, [r3, #16]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e3d0:	78fa      	ldrb	r2, [r7, #3]
 800e3d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e3d4:	2300      	movs	r3, #0
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	32b0      	adds	r2, #176	@ 0xb0
 800e3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	32b0      	adds	r2, #176	@ 0xb0
 800e404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e40c:	2303      	movs	r3, #3
 800e40e:	e01a      	b.n	800e446 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f002 fa04 	bl	8010822 <USBD_LL_GetRxDataSize>
 800e41a:	4602      	mov	r2, r0
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e428:	687a      	ldr	r2, [r7, #4]
 800e42a:	33b0      	adds	r3, #176	@ 0xb0
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	4413      	add	r3, r2
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e440:	4611      	mov	r1, r2
 800e442:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b084      	sub	sp, #16
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	32b0      	adds	r2, #176	@ 0xb0
 800e460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e46c:	2303      	movs	r3, #3
 800e46e:	e024      	b.n	800e4ba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	33b0      	adds	r3, #176	@ 0xb0
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	4413      	add	r3, r2
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d019      	beq.n	800e4b8 <USBD_CDC_EP0_RxReady+0x6a>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e48a:	2bff      	cmp	r3, #255	@ 0xff
 800e48c:	d014      	beq.n	800e4b8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	33b0      	adds	r3, #176	@ 0xb0
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	4413      	add	r3, r2
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	68fa      	ldr	r2, [r7, #12]
 800e4a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e4a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	22ff      	movs	r2, #255	@ 0xff
 800e4b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
	...

0800e4c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4cc:	2182      	movs	r1, #130	@ 0x82
 800e4ce:	4818      	ldr	r0, [pc, #96]	@ (800e530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4d0:	f000 fd4f 	bl	800ef72 <USBD_GetEpDesc>
 800e4d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4d6:	2101      	movs	r1, #1
 800e4d8:	4815      	ldr	r0, [pc, #84]	@ (800e530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4da:	f000 fd4a 	bl	800ef72 <USBD_GetEpDesc>
 800e4de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4e0:	2181      	movs	r1, #129	@ 0x81
 800e4e2:	4813      	ldr	r0, [pc, #76]	@ (800e530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e4e4:	f000 fd45 	bl	800ef72 <USBD_GetEpDesc>
 800e4e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d002      	beq.n	800e4f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2210      	movs	r2, #16
 800e4f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d006      	beq.n	800e50a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e504:	711a      	strb	r2, [r3, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d006      	beq.n	800e51e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e518:	711a      	strb	r2, [r3, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2243      	movs	r2, #67	@ 0x43
 800e522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e524:	4b02      	ldr	r3, [pc, #8]	@ (800e530 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20000060 	.word	0x20000060

0800e534 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e53c:	2182      	movs	r1, #130	@ 0x82
 800e53e:	4818      	ldr	r0, [pc, #96]	@ (800e5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e540:	f000 fd17 	bl	800ef72 <USBD_GetEpDesc>
 800e544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e546:	2101      	movs	r1, #1
 800e548:	4815      	ldr	r0, [pc, #84]	@ (800e5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e54a:	f000 fd12 	bl	800ef72 <USBD_GetEpDesc>
 800e54e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e550:	2181      	movs	r1, #129	@ 0x81
 800e552:	4813      	ldr	r0, [pc, #76]	@ (800e5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e554:	f000 fd0d 	bl	800ef72 <USBD_GetEpDesc>
 800e558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	2210      	movs	r2, #16
 800e564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d006      	beq.n	800e57a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2200      	movs	r2, #0
 800e570:	711a      	strb	r2, [r3, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	f042 0202 	orr.w	r2, r2, #2
 800e578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d006      	beq.n	800e58e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	711a      	strb	r2, [r3, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f042 0202 	orr.w	r2, r2, #2
 800e58c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2243      	movs	r2, #67	@ 0x43
 800e592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e594:	4b02      	ldr	r3, [pc, #8]	@ (800e5a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	20000060 	.word	0x20000060

0800e5a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b086      	sub	sp, #24
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5ac:	2182      	movs	r1, #130	@ 0x82
 800e5ae:	4818      	ldr	r0, [pc, #96]	@ (800e610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5b0:	f000 fcdf 	bl	800ef72 <USBD_GetEpDesc>
 800e5b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5b6:	2101      	movs	r1, #1
 800e5b8:	4815      	ldr	r0, [pc, #84]	@ (800e610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5ba:	f000 fcda 	bl	800ef72 <USBD_GetEpDesc>
 800e5be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5c0:	2181      	movs	r1, #129	@ 0x81
 800e5c2:	4813      	ldr	r0, [pc, #76]	@ (800e610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5c4:	f000 fcd5 	bl	800ef72 <USBD_GetEpDesc>
 800e5c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	2210      	movs	r2, #16
 800e5d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d006      	beq.n	800e5ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5e4:	711a      	strb	r2, [r3, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d006      	beq.n	800e5fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5f8:	711a      	strb	r2, [r3, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2243      	movs	r2, #67	@ 0x43
 800e602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e604:	4b02      	ldr	r3, [pc, #8]	@ (800e610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	20000060 	.word	0x20000060

0800e614 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	220a      	movs	r2, #10
 800e620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e622:	4b03      	ldr	r3, [pc, #12]	@ (800e630 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e624:	4618      	mov	r0, r3
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr
 800e630:	2000001c 	.word	0x2000001c

0800e634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d101      	bne.n	800e648 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e644:	2303      	movs	r3, #3
 800e646:	e009      	b.n	800e65c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	33b0      	adds	r3, #176	@ 0xb0
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e65a:	2300      	movs	r3, #0
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e668:	b480      	push	{r7}
 800e66a:	b087      	sub	sp, #28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	32b0      	adds	r2, #176	@ 0xb0
 800e67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e682:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e68a:	2303      	movs	r3, #3
 800e68c:	e008      	b.n	800e6a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e69e:	2300      	movs	r3, #0
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	371c      	adds	r7, #28
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b085      	sub	sp, #20
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
 800e6b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	32b0      	adds	r2, #176	@ 0xb0
 800e6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	e004      	b.n	800e6da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3714      	adds	r7, #20
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
	...

0800e6e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b084      	sub	sp, #16
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	32b0      	adds	r2, #176	@ 0xb0
 800e6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e700:	2301      	movs	r3, #1
 800e702:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e70a:	2303      	movs	r3, #3
 800e70c:	e025      	b.n	800e75a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e714:	2b00      	cmp	r3, #0
 800e716:	d11f      	bne.n	800e758 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	2201      	movs	r2, #1
 800e71c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e720:	4b10      	ldr	r3, [pc, #64]	@ (800e764 <USBD_CDC_TransmitPacket+0x7c>)
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	f003 020f 	and.w	r2, r3, #15
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	4613      	mov	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	4403      	add	r3, r0
 800e73a:	3318      	adds	r3, #24
 800e73c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e73e:	4b09      	ldr	r3, [pc, #36]	@ (800e764 <USBD_CDC_TransmitPacket+0x7c>)
 800e740:	7819      	ldrb	r1, [r3, #0]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f002 f825 	bl	801079e <USBD_LL_Transmit>

    ret = USBD_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e758:	7bfb      	ldrb	r3, [r7, #15]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	200000a3 	.word	0x200000a3

0800e768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b084      	sub	sp, #16
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	32b0      	adds	r2, #176	@ 0xb0
 800e77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e77e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	32b0      	adds	r2, #176	@ 0xb0
 800e78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d101      	bne.n	800e796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e792:	2303      	movs	r3, #3
 800e794:	e018      	b.n	800e7c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7c1b      	ldrb	r3, [r3, #16]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10a      	bne.n	800e7b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e79e:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d0 <USBD_CDC_ReceivePacket+0x68>)
 800e7a0:	7819      	ldrb	r1, [r3, #0]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f002 f817 	bl	80107e0 <USBD_LL_PrepareReceive>
 800e7b2:	e008      	b.n	800e7c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7b4:	4b06      	ldr	r3, [pc, #24]	@ (800e7d0 <USBD_CDC_ReceivePacket+0x68>)
 800e7b6:	7819      	ldrb	r1, [r3, #0]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e7be:	2340      	movs	r3, #64	@ 0x40
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f002 f80d 	bl	80107e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	200000a4 	.word	0x200000a4

0800e7d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d101      	bne.n	800e7ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	e01f      	b.n	800e82c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2200      	movs	r2, #0
 800e800:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d003      	beq.n	800e812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2201      	movs	r2, #1
 800e816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	79fa      	ldrb	r2, [r7, #7]
 800e81e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f001 fe87 	bl	8010534 <USBD_LL_Init>
 800e826:	4603      	mov	r3, r0
 800e828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e83e:	2300      	movs	r3, #0
 800e840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d101      	bne.n	800e84c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e848:	2303      	movs	r3, #3
 800e84a:	e025      	b.n	800e898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	683a      	ldr	r2, [r7, #0]
 800e850:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	32ae      	adds	r2, #174	@ 0xae
 800e85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00f      	beq.n	800e888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	32ae      	adds	r2, #174	@ 0xae
 800e872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e878:	f107 020e 	add.w	r2, r7, #14
 800e87c:	4610      	mov	r0, r2
 800e87e:	4798      	blx	r3
 800e880:	4602      	mov	r2, r0
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f001 fe8f 	bl	80105cc <USBD_LL_Start>
 800e8ae:	4603      	mov	r3, r0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b083      	sub	sp, #12
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e8c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr

0800e8ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8ce:	b580      	push	{r7, lr}
 800e8d0:	b084      	sub	sp, #16
 800e8d2:	af00      	add	r7, sp, #0
 800e8d4:	6078      	str	r0, [r7, #4]
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	78fa      	ldrb	r2, [r7, #3]
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	4798      	blx	r3
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b084      	sub	sp, #16
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	460b      	mov	r3, r1
 800e910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	78fa      	ldrb	r2, [r7, #3]
 800e920:	4611      	mov	r1, r2
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	4798      	blx	r3
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e92c:	2303      	movs	r3, #3
 800e92e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e930:	7bfb      	ldrb	r3, [r7, #15]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
 800e942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f001 f90c 	bl	800fb6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2201      	movs	r2, #1
 800e956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e960:	461a      	mov	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e96e:	f003 031f 	and.w	r3, r3, #31
 800e972:	2b02      	cmp	r3, #2
 800e974:	d01a      	beq.n	800e9ac <USBD_LL_SetupStage+0x72>
 800e976:	2b02      	cmp	r3, #2
 800e978:	d822      	bhi.n	800e9c0 <USBD_LL_SetupStage+0x86>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <USBD_LL_SetupStage+0x4a>
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d00a      	beq.n	800e998 <USBD_LL_SetupStage+0x5e>
 800e982:	e01d      	b.n	800e9c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 fb63 	bl	800f058 <USBD_StdDevReq>
 800e992:	4603      	mov	r3, r0
 800e994:	73fb      	strb	r3, [r7, #15]
      break;
 800e996:	e020      	b.n	800e9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e99e:	4619      	mov	r1, r3
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f000 fbcb 	bl	800f13c <USBD_StdItfReq>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e9aa:	e016      	b.n	800e9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 fc2d 	bl	800f214 <USBD_StdEPReq>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e9be:	e00c      	b.n	800e9da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e9c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f001 fe5c 	bl	801068c <USBD_LL_StallEP>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e9d8:	bf00      	nop
  }

  return ret;
 800e9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3710      	adds	r7, #16
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b086      	sub	sp, #24
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	460b      	mov	r3, r1
 800e9ee:	607a      	str	r2, [r7, #4]
 800e9f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e9f6:	7afb      	ldrb	r3, [r7, #11]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d16e      	bne.n	800eada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ea02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ea0a:	2b03      	cmp	r3, #3
 800ea0c:	f040 8098 	bne.w	800eb40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	689a      	ldr	r2, [r3, #8]
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d913      	bls.n	800ea44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	689a      	ldr	r2, [r3, #8]
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	1ad2      	subs	r2, r2, r3
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	68da      	ldr	r2, [r3, #12]
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	4293      	cmp	r3, r2
 800ea34:	bf28      	it	cs
 800ea36:	4613      	movcs	r3, r2
 800ea38:	461a      	mov	r2, r3
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f001 f994 	bl	800fd6a <USBD_CtlContinueRx>
 800ea42:	e07d      	b.n	800eb40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ea4a:	f003 031f 	and.w	r3, r3, #31
 800ea4e:	2b02      	cmp	r3, #2
 800ea50:	d014      	beq.n	800ea7c <USBD_LL_DataOutStage+0x98>
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d81d      	bhi.n	800ea92 <USBD_LL_DataOutStage+0xae>
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <USBD_LL_DataOutStage+0x7c>
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d003      	beq.n	800ea66 <USBD_LL_DataOutStage+0x82>
 800ea5e:	e018      	b.n	800ea92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ea60:	2300      	movs	r3, #0
 800ea62:	75bb      	strb	r3, [r7, #22]
            break;
 800ea64:	e018      	b.n	800ea98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	4619      	mov	r1, r3
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f000 fa64 	bl	800ef3e <USBD_CoreFindIF>
 800ea76:	4603      	mov	r3, r0
 800ea78:	75bb      	strb	r3, [r7, #22]
            break;
 800ea7a:	e00d      	b.n	800ea98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4619      	mov	r1, r3
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f000 fa66 	bl	800ef58 <USBD_CoreFindEP>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	75bb      	strb	r3, [r7, #22]
            break;
 800ea90:	e002      	b.n	800ea98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ea92:	2300      	movs	r3, #0
 800ea94:	75bb      	strb	r3, [r7, #22]
            break;
 800ea96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ea98:	7dbb      	ldrb	r3, [r7, #22]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d119      	bne.n	800ead2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d113      	bne.n	800ead2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eaaa:	7dba      	ldrb	r2, [r7, #22]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	32ae      	adds	r2, #174	@ 0xae
 800eab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eab4:	691b      	ldr	r3, [r3, #16]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d00b      	beq.n	800ead2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eaba:	7dba      	ldrb	r2, [r7, #22]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eac2:	7dba      	ldrb	r2, [r7, #22]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	32ae      	adds	r2, #174	@ 0xae
 800eac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eacc:	691b      	ldr	r3, [r3, #16]
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ead2:	68f8      	ldr	r0, [r7, #12]
 800ead4:	f001 f95a 	bl	800fd8c <USBD_CtlSendStatus>
 800ead8:	e032      	b.n	800eb40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eada:	7afb      	ldrb	r3, [r7, #11]
 800eadc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	4619      	mov	r1, r3
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f000 fa37 	bl	800ef58 <USBD_CoreFindEP>
 800eaea:	4603      	mov	r3, r0
 800eaec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eaee:	7dbb      	ldrb	r3, [r7, #22]
 800eaf0:	2bff      	cmp	r3, #255	@ 0xff
 800eaf2:	d025      	beq.n	800eb40 <USBD_LL_DataOutStage+0x15c>
 800eaf4:	7dbb      	ldrb	r3, [r7, #22]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d122      	bne.n	800eb40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b03      	cmp	r3, #3
 800eb04:	d117      	bne.n	800eb36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eb06:	7dba      	ldrb	r2, [r7, #22]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	32ae      	adds	r2, #174	@ 0xae
 800eb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00f      	beq.n	800eb36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eb16:	7dba      	ldrb	r2, [r7, #22]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eb1e:	7dba      	ldrb	r2, [r7, #22]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	32ae      	adds	r2, #174	@ 0xae
 800eb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	7afa      	ldrb	r2, [r7, #11]
 800eb2c:	4611      	mov	r1, r2
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	4798      	blx	r3
 800eb32:	4603      	mov	r3, r0
 800eb34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eb36:	7dfb      	ldrb	r3, [r7, #23]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	e000      	b.n	800eb42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3718      	adds	r7, #24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b086      	sub	sp, #24
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	460b      	mov	r3, r1
 800eb54:	607a      	str	r2, [r7, #4]
 800eb56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d16f      	bne.n	800ec3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	3314      	adds	r3, #20
 800eb62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d15a      	bne.n	800ec24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	689a      	ldr	r2, [r3, #8]
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d914      	bls.n	800eba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	689a      	ldr	r2, [r3, #8]
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	6879      	ldr	r1, [r7, #4]
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f001 f8bc 	bl	800fd0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb96:	2300      	movs	r3, #0
 800eb98:	2200      	movs	r2, #0
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f001 fe1f 	bl	80107e0 <USBD_LL_PrepareReceive>
 800eba2:	e03f      	b.n	800ec24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	68da      	ldr	r2, [r3, #12]
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d11c      	bne.n	800ebea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	685a      	ldr	r2, [r3, #4]
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d316      	bcc.n	800ebea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	685a      	ldr	r2, [r3, #4]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d20f      	bcs.n	800ebea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ebca:	2200      	movs	r2, #0
 800ebcc:	2100      	movs	r1, #0
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f001 f89d 	bl	800fd0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebdc:	2300      	movs	r3, #0
 800ebde:	2200      	movs	r2, #0
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f001 fdfc 	bl	80107e0 <USBD_LL_PrepareReceive>
 800ebe8:	e01c      	b.n	800ec24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b03      	cmp	r3, #3
 800ebf4:	d10f      	bne.n	800ec16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d009      	beq.n	800ec16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec16:	2180      	movs	r1, #128	@ 0x80
 800ec18:	68f8      	ldr	r0, [r7, #12]
 800ec1a:	f001 fd37 	bl	801068c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f001 f8c7 	bl	800fdb2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d03a      	beq.n	800eca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f7ff fe42 	bl	800e8b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ec3c:	e032      	b.n	800eca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ec3e:	7afb      	ldrb	r3, [r7, #11]
 800ec40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	4619      	mov	r1, r3
 800ec48:	68f8      	ldr	r0, [r7, #12]
 800ec4a:	f000 f985 	bl	800ef58 <USBD_CoreFindEP>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	2bff      	cmp	r3, #255	@ 0xff
 800ec56:	d025      	beq.n	800eca4 <USBD_LL_DataInStage+0x15a>
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d122      	bne.n	800eca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d11c      	bne.n	800eca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ec6a:	7dfa      	ldrb	r2, [r7, #23]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	32ae      	adds	r2, #174	@ 0xae
 800ec70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec74:	695b      	ldr	r3, [r3, #20]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d014      	beq.n	800eca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ec7a:	7dfa      	ldrb	r2, [r7, #23]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ec82:	7dfa      	ldrb	r2, [r7, #23]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	32ae      	adds	r2, #174	@ 0xae
 800ec88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec8c:	695b      	ldr	r3, [r3, #20]
 800ec8e:	7afa      	ldrb	r2, [r7, #11]
 800ec90:	4611      	mov	r1, r2
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	4798      	blx	r3
 800ec96:	4603      	mov	r3, r0
 800ec98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ec9a:	7dbb      	ldrb	r3, [r7, #22]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eca0:	7dbb      	ldrb	r3, [r7, #22]
 800eca2:	e000      	b.n	800eca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d014      	beq.n	800ed14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00e      	beq.n	800ed14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	6852      	ldr	r2, [r2, #4]
 800ed02:	b2d2      	uxtb	r2, r2
 800ed04:	4611      	mov	r1, r2
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	4798      	blx	r3
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d001      	beq.n	800ed14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ed10:	2303      	movs	r3, #3
 800ed12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed14:	2340      	movs	r3, #64	@ 0x40
 800ed16:	2200      	movs	r2, #0
 800ed18:	2100      	movs	r1, #0
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f001 fc71 	bl	8010602 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2201      	movs	r2, #1
 800ed24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2240      	movs	r2, #64	@ 0x40
 800ed2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed30:	2340      	movs	r3, #64	@ 0x40
 800ed32:	2200      	movs	r2, #0
 800ed34:	2180      	movs	r1, #128	@ 0x80
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 fc63 	bl	8010602 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2240      	movs	r2, #64	@ 0x40
 800ed46:	621a      	str	r2, [r3, #32]

  return ret;
 800ed48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b083      	sub	sp, #12
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	78fa      	ldrb	r2, [r7, #3]
 800ed62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	370c      	adds	r7, #12
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b083      	sub	sp, #12
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	2b04      	cmp	r3, #4
 800ed84:	d006      	beq.n	800ed94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2204      	movs	r2, #4
 800ed98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	370c      	adds	r7, #12
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr

0800edaa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800edaa:	b480      	push	{r7}
 800edac:	b083      	sub	sp, #12
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b04      	cmp	r3, #4
 800edbc:	d106      	bne.n	800edcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800edc4:	b2da      	uxtb	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800edcc:	2300      	movs	r3, #0
}
 800edce:	4618      	mov	r0, r3
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr

0800edda <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b082      	sub	sp, #8
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ede8:	b2db      	uxtb	r3, r3
 800edea:	2b03      	cmp	r3, #3
 800edec:	d110      	bne.n	800ee10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00b      	beq.n	800ee10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edfe:	69db      	ldr	r3, [r3, #28]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d005      	beq.n	800ee10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee0a:	69db      	ldr	r3, [r3, #28]
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ee10:	2300      	movs	r3, #0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	460b      	mov	r3, r1
 800ee24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	32ae      	adds	r2, #174	@ 0xae
 800ee30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee38:	2303      	movs	r3, #3
 800ee3a:	e01c      	b.n	800ee76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b03      	cmp	r3, #3
 800ee46:	d115      	bne.n	800ee74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	32ae      	adds	r2, #174	@ 0xae
 800ee52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee56:	6a1b      	ldr	r3, [r3, #32]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00b      	beq.n	800ee74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	32ae      	adds	r2, #174	@ 0xae
 800ee66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6a:	6a1b      	ldr	r3, [r3, #32]
 800ee6c:	78fa      	ldrb	r2, [r7, #3]
 800ee6e:	4611      	mov	r1, r2
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b082      	sub	sp, #8
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
 800ee86:	460b      	mov	r3, r1
 800ee88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	32ae      	adds	r2, #174	@ 0xae
 800ee94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d101      	bne.n	800eea0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee9c:	2303      	movs	r3, #3
 800ee9e:	e01c      	b.n	800eeda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eea6:	b2db      	uxtb	r3, r3
 800eea8:	2b03      	cmp	r3, #3
 800eeaa:	d115      	bne.n	800eed8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	32ae      	adds	r2, #174	@ 0xae
 800eeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00b      	beq.n	800eed8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	32ae      	adds	r2, #174	@ 0xae
 800eeca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eed0:	78fa      	ldrb	r2, [r7, #3]
 800eed2:	4611      	mov	r1, r2
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eed8:	2300      	movs	r3, #0
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eee2:	b480      	push	{r7}
 800eee4:	b083      	sub	sp, #12
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eeea:	2300      	movs	r3, #0
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr

0800eef8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ef00:	2300      	movs	r3, #0
 800ef02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d00e      	beq.n	800ef34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	6852      	ldr	r2, [r2, #4]
 800ef22:	b2d2      	uxtb	r2, r2
 800ef24:	4611      	mov	r1, r2
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	4798      	blx	r3
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ef30:	2303      	movs	r3, #3
 800ef32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
 800ef46:	460b      	mov	r3, r1
 800ef48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	370c      	adds	r7, #12
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	460b      	mov	r3, r1
 800ef62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	370c      	adds	r7, #12
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b086      	sub	sp, #24
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	460b      	mov	r3, r1
 800ef7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	885b      	ldrh	r3, [r3, #2]
 800ef8e:	b29b      	uxth	r3, r3
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	7812      	ldrb	r2, [r2, #0]
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d91f      	bls.n	800efd8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ef9e:	e013      	b.n	800efc8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800efa0:	f107 030a 	add.w	r3, r7, #10
 800efa4:	4619      	mov	r1, r3
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	f000 f81b 	bl	800efe2 <USBD_GetNextDesc>
 800efac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	785b      	ldrb	r3, [r3, #1]
 800efb2:	2b05      	cmp	r3, #5
 800efb4:	d108      	bne.n	800efc8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	789b      	ldrb	r3, [r3, #2]
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d008      	beq.n	800efd6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800efc4:	2300      	movs	r3, #0
 800efc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	885b      	ldrh	r3, [r3, #2]
 800efcc:	b29a      	uxth	r2, r3
 800efce:	897b      	ldrh	r3, [r7, #10]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d8e5      	bhi.n	800efa0 <USBD_GetEpDesc+0x2e>
 800efd4:	e000      	b.n	800efd8 <USBD_GetEpDesc+0x66>
          break;
 800efd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800efd8:	693b      	ldr	r3, [r7, #16]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3718      	adds	r7, #24
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800efe2:	b480      	push	{r7}
 800efe4:	b085      	sub	sp, #20
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	7812      	ldrb	r2, [r2, #0]
 800eff8:	4413      	add	r3, r2
 800effa:	b29a      	uxth	r2, r3
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	461a      	mov	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4413      	add	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f00c:	68fb      	ldr	r3, [r7, #12]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3714      	adds	r7, #20
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr

0800f01a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f01a:	b480      	push	{r7}
 800f01c:	b087      	sub	sp, #28
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	3301      	adds	r3, #1
 800f030:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f038:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f03c:	021b      	lsls	r3, r3, #8
 800f03e:	b21a      	sxth	r2, r3
 800f040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f044:	4313      	orrs	r3, r2
 800f046:	b21b      	sxth	r3, r3
 800f048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f04a:	89fb      	ldrh	r3, [r7, #14]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	371c      	adds	r7, #28
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f06e:	2b40      	cmp	r3, #64	@ 0x40
 800f070:	d005      	beq.n	800f07e <USBD_StdDevReq+0x26>
 800f072:	2b40      	cmp	r3, #64	@ 0x40
 800f074:	d857      	bhi.n	800f126 <USBD_StdDevReq+0xce>
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00f      	beq.n	800f09a <USBD_StdDevReq+0x42>
 800f07a:	2b20      	cmp	r3, #32
 800f07c:	d153      	bne.n	800f126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	32ae      	adds	r2, #174	@ 0xae
 800f088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	4798      	blx	r3
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]
      break;
 800f098:	e04a      	b.n	800f130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	785b      	ldrb	r3, [r3, #1]
 800f09e:	2b09      	cmp	r3, #9
 800f0a0:	d83b      	bhi.n	800f11a <USBD_StdDevReq+0xc2>
 800f0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0a8 <USBD_StdDevReq+0x50>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f0fd 	.word	0x0800f0fd
 800f0ac:	0800f111 	.word	0x0800f111
 800f0b0:	0800f11b 	.word	0x0800f11b
 800f0b4:	0800f107 	.word	0x0800f107
 800f0b8:	0800f11b 	.word	0x0800f11b
 800f0bc:	0800f0db 	.word	0x0800f0db
 800f0c0:	0800f0d1 	.word	0x0800f0d1
 800f0c4:	0800f11b 	.word	0x0800f11b
 800f0c8:	0800f0f3 	.word	0x0800f0f3
 800f0cc:	0800f0e5 	.word	0x0800f0e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f0d0:	6839      	ldr	r1, [r7, #0]
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 fa3c 	bl	800f550 <USBD_GetDescriptor>
          break;
 800f0d8:	e024      	b.n	800f124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 fba1 	bl	800f824 <USBD_SetAddress>
          break;
 800f0e2:	e01f      	b.n	800f124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 fbe0 	bl	800f8ac <USBD_SetConfig>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	73fb      	strb	r3, [r7, #15]
          break;
 800f0f0:	e018      	b.n	800f124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f0f2:	6839      	ldr	r1, [r7, #0]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 fc83 	bl	800fa00 <USBD_GetConfig>
          break;
 800f0fa:	e013      	b.n	800f124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f0fc:	6839      	ldr	r1, [r7, #0]
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 fcb4 	bl	800fa6c <USBD_GetStatus>
          break;
 800f104:	e00e      	b.n	800f124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f106:	6839      	ldr	r1, [r7, #0]
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 fce3 	bl	800fad4 <USBD_SetFeature>
          break;
 800f10e:	e009      	b.n	800f124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fd07 	bl	800fb26 <USBD_ClrFeature>
          break;
 800f118:	e004      	b.n	800f124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 fd5e 	bl	800fbde <USBD_CtlError>
          break;
 800f122:	bf00      	nop
      }
      break;
 800f124:	e004      	b.n	800f130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 fd58 	bl	800fbde <USBD_CtlError>
      break;
 800f12e:	bf00      	nop
  }

  return ret;
 800f130:	7bfb      	ldrb	r3, [r7, #15]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop

0800f13c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f146:	2300      	movs	r3, #0
 800f148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f152:	2b40      	cmp	r3, #64	@ 0x40
 800f154:	d005      	beq.n	800f162 <USBD_StdItfReq+0x26>
 800f156:	2b40      	cmp	r3, #64	@ 0x40
 800f158:	d852      	bhi.n	800f200 <USBD_StdItfReq+0xc4>
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d001      	beq.n	800f162 <USBD_StdItfReq+0x26>
 800f15e:	2b20      	cmp	r3, #32
 800f160:	d14e      	bne.n	800f200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	3b01      	subs	r3, #1
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d840      	bhi.n	800f1f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	889b      	ldrh	r3, [r3, #4]
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b01      	cmp	r3, #1
 800f178:	d836      	bhi.n	800f1e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	889b      	ldrh	r3, [r3, #4]
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	4619      	mov	r1, r3
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7ff fedb 	bl	800ef3e <USBD_CoreFindIF>
 800f188:	4603      	mov	r3, r0
 800f18a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f18c:	7bbb      	ldrb	r3, [r7, #14]
 800f18e:	2bff      	cmp	r3, #255	@ 0xff
 800f190:	d01d      	beq.n	800f1ce <USBD_StdItfReq+0x92>
 800f192:	7bbb      	ldrb	r3, [r7, #14]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d11a      	bne.n	800f1ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f198:	7bba      	ldrb	r2, [r7, #14]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	32ae      	adds	r2, #174	@ 0xae
 800f19e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1a2:	689b      	ldr	r3, [r3, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00f      	beq.n	800f1c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f1a8:	7bba      	ldrb	r2, [r7, #14]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f1b0:	7bba      	ldrb	r2, [r7, #14]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	32ae      	adds	r2, #174	@ 0xae
 800f1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	4798      	blx	r3
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f1c6:	e004      	b.n	800f1d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f1cc:	e001      	b.n	800f1d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f1ce:	2303      	movs	r3, #3
 800f1d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	88db      	ldrh	r3, [r3, #6]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d110      	bne.n	800f1fc <USBD_StdItfReq+0xc0>
 800f1da:	7bfb      	ldrb	r3, [r7, #15]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10d      	bne.n	800f1fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 fdd3 	bl	800fd8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f1e6:	e009      	b.n	800f1fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fcf7 	bl	800fbde <USBD_CtlError>
          break;
 800f1f0:	e004      	b.n	800f1fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fcf2 	bl	800fbde <USBD_CtlError>
          break;
 800f1fa:	e000      	b.n	800f1fe <USBD_StdItfReq+0xc2>
          break;
 800f1fc:	bf00      	nop
      }
      break;
 800f1fe:	e004      	b.n	800f20a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f200:	6839      	ldr	r1, [r7, #0]
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fceb 	bl	800fbde <USBD_CtlError>
      break;
 800f208:	bf00      	nop
  }

  return ret;
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f21e:	2300      	movs	r3, #0
 800f220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	889b      	ldrh	r3, [r3, #4]
 800f226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f230:	2b40      	cmp	r3, #64	@ 0x40
 800f232:	d007      	beq.n	800f244 <USBD_StdEPReq+0x30>
 800f234:	2b40      	cmp	r3, #64	@ 0x40
 800f236:	f200 817f 	bhi.w	800f538 <USBD_StdEPReq+0x324>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d02a      	beq.n	800f294 <USBD_StdEPReq+0x80>
 800f23e:	2b20      	cmp	r3, #32
 800f240:	f040 817a 	bne.w	800f538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f244:	7bbb      	ldrb	r3, [r7, #14]
 800f246:	4619      	mov	r1, r3
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f7ff fe85 	bl	800ef58 <USBD_CoreFindEP>
 800f24e:	4603      	mov	r3, r0
 800f250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f252:	7b7b      	ldrb	r3, [r7, #13]
 800f254:	2bff      	cmp	r3, #255	@ 0xff
 800f256:	f000 8174 	beq.w	800f542 <USBD_StdEPReq+0x32e>
 800f25a:	7b7b      	ldrb	r3, [r7, #13]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f040 8170 	bne.w	800f542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f262:	7b7a      	ldrb	r2, [r7, #13]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f26a:	7b7a      	ldrb	r2, [r7, #13]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	32ae      	adds	r2, #174	@ 0xae
 800f270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	2b00      	cmp	r3, #0
 800f278:	f000 8163 	beq.w	800f542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f27c:	7b7a      	ldrb	r2, [r7, #13]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	32ae      	adds	r2, #174	@ 0xae
 800f282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f286:	689b      	ldr	r3, [r3, #8]
 800f288:	6839      	ldr	r1, [r7, #0]
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	4798      	blx	r3
 800f28e:	4603      	mov	r3, r0
 800f290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f292:	e156      	b.n	800f542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	785b      	ldrb	r3, [r3, #1]
 800f298:	2b03      	cmp	r3, #3
 800f29a:	d008      	beq.n	800f2ae <USBD_StdEPReq+0x9a>
 800f29c:	2b03      	cmp	r3, #3
 800f29e:	f300 8145 	bgt.w	800f52c <USBD_StdEPReq+0x318>
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 809b 	beq.w	800f3de <USBD_StdEPReq+0x1ca>
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d03c      	beq.n	800f326 <USBD_StdEPReq+0x112>
 800f2ac:	e13e      	b.n	800f52c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	d002      	beq.n	800f2c0 <USBD_StdEPReq+0xac>
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d016      	beq.n	800f2ec <USBD_StdEPReq+0xd8>
 800f2be:	e02c      	b.n	800f31a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2c0:	7bbb      	ldrb	r3, [r7, #14]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00d      	beq.n	800f2e2 <USBD_StdEPReq+0xce>
 800f2c6:	7bbb      	ldrb	r3, [r7, #14]
 800f2c8:	2b80      	cmp	r3, #128	@ 0x80
 800f2ca:	d00a      	beq.n	800f2e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2cc:	7bbb      	ldrb	r3, [r7, #14]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 f9db 	bl	801068c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2d6:	2180      	movs	r1, #128	@ 0x80
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f001 f9d7 	bl	801068c <USBD_LL_StallEP>
 800f2de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2e0:	e020      	b.n	800f324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 fc7a 	bl	800fbde <USBD_CtlError>
              break;
 800f2ea:	e01b      	b.n	800f324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	885b      	ldrh	r3, [r3, #2]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d10e      	bne.n	800f312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f2f4:	7bbb      	ldrb	r3, [r7, #14]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00b      	beq.n	800f312 <USBD_StdEPReq+0xfe>
 800f2fa:	7bbb      	ldrb	r3, [r7, #14]
 800f2fc:	2b80      	cmp	r3, #128	@ 0x80
 800f2fe:	d008      	beq.n	800f312 <USBD_StdEPReq+0xfe>
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	88db      	ldrh	r3, [r3, #6]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d104      	bne.n	800f312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f308:	7bbb      	ldrb	r3, [r7, #14]
 800f30a:	4619      	mov	r1, r3
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f001 f9bd 	bl	801068c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fd3a 	bl	800fd8c <USBD_CtlSendStatus>

              break;
 800f318:	e004      	b.n	800f324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fc5e 	bl	800fbde <USBD_CtlError>
              break;
 800f322:	bf00      	nop
          }
          break;
 800f324:	e107      	b.n	800f536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f32c:	b2db      	uxtb	r3, r3
 800f32e:	2b02      	cmp	r3, #2
 800f330:	d002      	beq.n	800f338 <USBD_StdEPReq+0x124>
 800f332:	2b03      	cmp	r3, #3
 800f334:	d016      	beq.n	800f364 <USBD_StdEPReq+0x150>
 800f336:	e04b      	b.n	800f3d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00d      	beq.n	800f35a <USBD_StdEPReq+0x146>
 800f33e:	7bbb      	ldrb	r3, [r7, #14]
 800f340:	2b80      	cmp	r3, #128	@ 0x80
 800f342:	d00a      	beq.n	800f35a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f344:	7bbb      	ldrb	r3, [r7, #14]
 800f346:	4619      	mov	r1, r3
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f001 f99f 	bl	801068c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f34e:	2180      	movs	r1, #128	@ 0x80
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f001 f99b 	bl	801068c <USBD_LL_StallEP>
 800f356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f358:	e040      	b.n	800f3dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fc3e 	bl	800fbde <USBD_CtlError>
              break;
 800f362:	e03b      	b.n	800f3dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	885b      	ldrh	r3, [r3, #2]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d136      	bne.n	800f3da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f36c:	7bbb      	ldrb	r3, [r7, #14]
 800f36e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f372:	2b00      	cmp	r3, #0
 800f374:	d004      	beq.n	800f380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	4619      	mov	r1, r3
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f001 f9a5 	bl	80106ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fd03 	bl	800fd8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f386:	7bbb      	ldrb	r3, [r7, #14]
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fde4 	bl	800ef58 <USBD_CoreFindEP>
 800f390:	4603      	mov	r3, r0
 800f392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f394:	7b7b      	ldrb	r3, [r7, #13]
 800f396:	2bff      	cmp	r3, #255	@ 0xff
 800f398:	d01f      	beq.n	800f3da <USBD_StdEPReq+0x1c6>
 800f39a:	7b7b      	ldrb	r3, [r7, #13]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d11c      	bne.n	800f3da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f3a0:	7b7a      	ldrb	r2, [r7, #13]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f3a8:	7b7a      	ldrb	r2, [r7, #13]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	32ae      	adds	r2, #174	@ 0xae
 800f3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d010      	beq.n	800f3da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f3b8:	7b7a      	ldrb	r2, [r7, #13]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	32ae      	adds	r2, #174	@ 0xae
 800f3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	6839      	ldr	r1, [r7, #0]
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	4798      	blx	r3
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f3ce:	e004      	b.n	800f3da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f3d0:	6839      	ldr	r1, [r7, #0]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fc03 	bl	800fbde <USBD_CtlError>
              break;
 800f3d8:	e000      	b.n	800f3dc <USBD_StdEPReq+0x1c8>
              break;
 800f3da:	bf00      	nop
          }
          break;
 800f3dc:	e0ab      	b.n	800f536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	d002      	beq.n	800f3f0 <USBD_StdEPReq+0x1dc>
 800f3ea:	2b03      	cmp	r3, #3
 800f3ec:	d032      	beq.n	800f454 <USBD_StdEPReq+0x240>
 800f3ee:	e097      	b.n	800f520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3f0:	7bbb      	ldrb	r3, [r7, #14]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d007      	beq.n	800f406 <USBD_StdEPReq+0x1f2>
 800f3f6:	7bbb      	ldrb	r3, [r7, #14]
 800f3f8:	2b80      	cmp	r3, #128	@ 0x80
 800f3fa:	d004      	beq.n	800f406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fbed 	bl	800fbde <USBD_CtlError>
                break;
 800f404:	e091      	b.n	800f52a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	da0b      	bge.n	800f426 <USBD_StdEPReq+0x212>
 800f40e:	7bbb      	ldrb	r3, [r7, #14]
 800f410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f414:	4613      	mov	r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	3310      	adds	r3, #16
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	4413      	add	r3, r2
 800f422:	3304      	adds	r3, #4
 800f424:	e00b      	b.n	800f43e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f426:	7bbb      	ldrb	r3, [r7, #14]
 800f428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f42c:	4613      	mov	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4413      	add	r3, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	4413      	add	r3, r2
 800f43c:	3304      	adds	r3, #4
 800f43e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2202      	movs	r2, #2
 800f44a:	4619      	mov	r1, r3
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 fc43 	bl	800fcd8 <USBD_CtlSendData>
              break;
 800f452:	e06a      	b.n	800f52a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	da11      	bge.n	800f480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f45c:	7bbb      	ldrb	r3, [r7, #14]
 800f45e:	f003 020f 	and.w	r2, r3, #15
 800f462:	6879      	ldr	r1, [r7, #4]
 800f464:	4613      	mov	r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	440b      	add	r3, r1
 800f46e:	3324      	adds	r3, #36	@ 0x24
 800f470:	881b      	ldrh	r3, [r3, #0]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d117      	bne.n	800f4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f476:	6839      	ldr	r1, [r7, #0]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 fbb0 	bl	800fbde <USBD_CtlError>
                  break;
 800f47e:	e054      	b.n	800f52a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f480:	7bbb      	ldrb	r3, [r7, #14]
 800f482:	f003 020f 	and.w	r2, r3, #15
 800f486:	6879      	ldr	r1, [r7, #4]
 800f488:	4613      	mov	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	440b      	add	r3, r1
 800f492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d104      	bne.n	800f4a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f49c:	6839      	ldr	r1, [r7, #0]
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 fb9d 	bl	800fbde <USBD_CtlError>
                  break;
 800f4a4:	e041      	b.n	800f52a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	da0b      	bge.n	800f4c6 <USBD_StdEPReq+0x2b2>
 800f4ae:	7bbb      	ldrb	r3, [r7, #14]
 800f4b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4413      	add	r3, r2
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	3310      	adds	r3, #16
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	e00b      	b.n	800f4de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4c6:	7bbb      	ldrb	r3, [r7, #14]
 800f4c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	4413      	add	r3, r2
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	4413      	add	r3, r2
 800f4dc:	3304      	adds	r3, #4
 800f4de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d002      	beq.n	800f4ec <USBD_StdEPReq+0x2d8>
 800f4e6:	7bbb      	ldrb	r3, [r7, #14]
 800f4e8:	2b80      	cmp	r3, #128	@ 0x80
 800f4ea:	d103      	bne.n	800f4f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	601a      	str	r2, [r3, #0]
 800f4f2:	e00e      	b.n	800f512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f001 f905 	bl	8010708 <USBD_LL_IsStallEP>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d003      	beq.n	800f50c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2201      	movs	r2, #1
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	e002      	b.n	800f512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	2200      	movs	r2, #0
 800f510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2202      	movs	r2, #2
 800f516:	4619      	mov	r1, r3
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 fbdd 	bl	800fcd8 <USBD_CtlSendData>
              break;
 800f51e:	e004      	b.n	800f52a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f520:	6839      	ldr	r1, [r7, #0]
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 fb5b 	bl	800fbde <USBD_CtlError>
              break;
 800f528:	bf00      	nop
          }
          break;
 800f52a:	e004      	b.n	800f536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 fb55 	bl	800fbde <USBD_CtlError>
          break;
 800f534:	bf00      	nop
      }
      break;
 800f536:	e005      	b.n	800f544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 fb4f 	bl	800fbde <USBD_CtlError>
      break;
 800f540:	e000      	b.n	800f544 <USBD_StdEPReq+0x330>
      break;
 800f542:	bf00      	nop
  }

  return ret;
 800f544:	7bfb      	ldrb	r3, [r7, #15]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
	...

0800f550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f55a:	2300      	movs	r3, #0
 800f55c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f55e:	2300      	movs	r3, #0
 800f560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f562:	2300      	movs	r3, #0
 800f564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	885b      	ldrh	r3, [r3, #2]
 800f56a:	0a1b      	lsrs	r3, r3, #8
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	3b01      	subs	r3, #1
 800f570:	2b06      	cmp	r3, #6
 800f572:	f200 8128 	bhi.w	800f7c6 <USBD_GetDescriptor+0x276>
 800f576:	a201      	add	r2, pc, #4	@ (adr r2, 800f57c <USBD_GetDescriptor+0x2c>)
 800f578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57c:	0800f599 	.word	0x0800f599
 800f580:	0800f5b1 	.word	0x0800f5b1
 800f584:	0800f5f1 	.word	0x0800f5f1
 800f588:	0800f7c7 	.word	0x0800f7c7
 800f58c:	0800f7c7 	.word	0x0800f7c7
 800f590:	0800f767 	.word	0x0800f767
 800f594:	0800f793 	.word	0x0800f793
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	7c12      	ldrb	r2, [r2, #16]
 800f5a4:	f107 0108 	add.w	r1, r7, #8
 800f5a8:	4610      	mov	r0, r2
 800f5aa:	4798      	blx	r3
 800f5ac:	60f8      	str	r0, [r7, #12]
      break;
 800f5ae:	e112      	b.n	800f7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	7c1b      	ldrb	r3, [r3, #16]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10d      	bne.n	800f5d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5c0:	f107 0208 	add.w	r2, r7, #8
 800f5c4:	4610      	mov	r0, r2
 800f5c6:	4798      	blx	r3
 800f5c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f5d2:	e100      	b.n	800f7d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5dc:	f107 0208 	add.w	r2, r7, #8
 800f5e0:	4610      	mov	r0, r2
 800f5e2:	4798      	blx	r3
 800f5e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	2202      	movs	r2, #2
 800f5ec:	701a      	strb	r2, [r3, #0]
      break;
 800f5ee:	e0f2      	b.n	800f7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	885b      	ldrh	r3, [r3, #2]
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b05      	cmp	r3, #5
 800f5f8:	f200 80ac 	bhi.w	800f754 <USBD_GetDescriptor+0x204>
 800f5fc:	a201      	add	r2, pc, #4	@ (adr r2, 800f604 <USBD_GetDescriptor+0xb4>)
 800f5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f602:	bf00      	nop
 800f604:	0800f61d 	.word	0x0800f61d
 800f608:	0800f651 	.word	0x0800f651
 800f60c:	0800f685 	.word	0x0800f685
 800f610:	0800f6b9 	.word	0x0800f6b9
 800f614:	0800f6ed 	.word	0x0800f6ed
 800f618:	0800f721 	.word	0x0800f721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00b      	beq.n	800f640 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	7c12      	ldrb	r2, [r2, #16]
 800f634:	f107 0108 	add.w	r1, r7, #8
 800f638:	4610      	mov	r0, r2
 800f63a:	4798      	blx	r3
 800f63c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f63e:	e091      	b.n	800f764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f640:	6839      	ldr	r1, [r7, #0]
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 facb 	bl	800fbde <USBD_CtlError>
            err++;
 800f648:	7afb      	ldrb	r3, [r7, #11]
 800f64a:	3301      	adds	r3, #1
 800f64c:	72fb      	strb	r3, [r7, #11]
          break;
 800f64e:	e089      	b.n	800f764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00b      	beq.n	800f674 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	7c12      	ldrb	r2, [r2, #16]
 800f668:	f107 0108 	add.w	r1, r7, #8
 800f66c:	4610      	mov	r0, r2
 800f66e:	4798      	blx	r3
 800f670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f672:	e077      	b.n	800f764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f674:	6839      	ldr	r1, [r7, #0]
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 fab1 	bl	800fbde <USBD_CtlError>
            err++;
 800f67c:	7afb      	ldrb	r3, [r7, #11]
 800f67e:	3301      	adds	r3, #1
 800f680:	72fb      	strb	r3, [r7, #11]
          break;
 800f682:	e06f      	b.n	800f764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d00b      	beq.n	800f6a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	7c12      	ldrb	r2, [r2, #16]
 800f69c:	f107 0108 	add.w	r1, r7, #8
 800f6a0:	4610      	mov	r0, r2
 800f6a2:	4798      	blx	r3
 800f6a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6a6:	e05d      	b.n	800f764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6a8:	6839      	ldr	r1, [r7, #0]
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 fa97 	bl	800fbde <USBD_CtlError>
            err++;
 800f6b0:	7afb      	ldrb	r3, [r7, #11]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6b6:	e055      	b.n	800f764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d00b      	beq.n	800f6dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	7c12      	ldrb	r2, [r2, #16]
 800f6d0:	f107 0108 	add.w	r1, r7, #8
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	4798      	blx	r3
 800f6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6da:	e043      	b.n	800f764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6dc:	6839      	ldr	r1, [r7, #0]
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 fa7d 	bl	800fbde <USBD_CtlError>
            err++;
 800f6e4:	7afb      	ldrb	r3, [r7, #11]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ea:	e03b      	b.n	800f764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6f2:	695b      	ldr	r3, [r3, #20]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00b      	beq.n	800f710 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	7c12      	ldrb	r2, [r2, #16]
 800f704:	f107 0108 	add.w	r1, r7, #8
 800f708:	4610      	mov	r0, r2
 800f70a:	4798      	blx	r3
 800f70c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f70e:	e029      	b.n	800f764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f710:	6839      	ldr	r1, [r7, #0]
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 fa63 	bl	800fbde <USBD_CtlError>
            err++;
 800f718:	7afb      	ldrb	r3, [r7, #11]
 800f71a:	3301      	adds	r3, #1
 800f71c:	72fb      	strb	r3, [r7, #11]
          break;
 800f71e:	e021      	b.n	800f764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00b      	beq.n	800f744 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f732:	699b      	ldr	r3, [r3, #24]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	7c12      	ldrb	r2, [r2, #16]
 800f738:	f107 0108 	add.w	r1, r7, #8
 800f73c:	4610      	mov	r0, r2
 800f73e:	4798      	blx	r3
 800f740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f742:	e00f      	b.n	800f764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f744:	6839      	ldr	r1, [r7, #0]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 fa49 	bl	800fbde <USBD_CtlError>
            err++;
 800f74c:	7afb      	ldrb	r3, [r7, #11]
 800f74e:	3301      	adds	r3, #1
 800f750:	72fb      	strb	r3, [r7, #11]
          break;
 800f752:	e007      	b.n	800f764 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fa41 	bl	800fbde <USBD_CtlError>
          err++;
 800f75c:	7afb      	ldrb	r3, [r7, #11]
 800f75e:	3301      	adds	r3, #1
 800f760:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f762:	bf00      	nop
      }
      break;
 800f764:	e037      	b.n	800f7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	7c1b      	ldrb	r3, [r3, #16]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d109      	bne.n	800f782 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f776:	f107 0208 	add.w	r2, r7, #8
 800f77a:	4610      	mov	r0, r2
 800f77c:	4798      	blx	r3
 800f77e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f780:	e029      	b.n	800f7d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 fa2a 	bl	800fbde <USBD_CtlError>
        err++;
 800f78a:	7afb      	ldrb	r3, [r7, #11]
 800f78c:	3301      	adds	r3, #1
 800f78e:	72fb      	strb	r3, [r7, #11]
      break;
 800f790:	e021      	b.n	800f7d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	7c1b      	ldrb	r3, [r3, #16]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d10d      	bne.n	800f7b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7a2:	f107 0208 	add.w	r2, r7, #8
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	4798      	blx	r3
 800f7aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	2207      	movs	r2, #7
 800f7b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7b4:	e00f      	b.n	800f7d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 fa10 	bl	800fbde <USBD_CtlError>
        err++;
 800f7be:	7afb      	ldrb	r3, [r7, #11]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	72fb      	strb	r3, [r7, #11]
      break;
 800f7c4:	e007      	b.n	800f7d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 fa08 	bl	800fbde <USBD_CtlError>
      err++;
 800f7ce:	7afb      	ldrb	r3, [r7, #11]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	72fb      	strb	r3, [r7, #11]
      break;
 800f7d4:	bf00      	nop
  }

  if (err != 0U)
 800f7d6:	7afb      	ldrb	r3, [r7, #11]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d11e      	bne.n	800f81a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	88db      	ldrh	r3, [r3, #6]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d016      	beq.n	800f812 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f7e4:	893b      	ldrh	r3, [r7, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00e      	beq.n	800f808 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	88da      	ldrh	r2, [r3, #6]
 800f7ee:	893b      	ldrh	r3, [r7, #8]
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	bf28      	it	cs
 800f7f4:	4613      	movcs	r3, r2
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7fa:	893b      	ldrh	r3, [r7, #8]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	68f9      	ldr	r1, [r7, #12]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 fa69 	bl	800fcd8 <USBD_CtlSendData>
 800f806:	e009      	b.n	800f81c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f808:	6839      	ldr	r1, [r7, #0]
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 f9e7 	bl	800fbde <USBD_CtlError>
 800f810:	e004      	b.n	800f81c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 faba 	bl	800fd8c <USBD_CtlSendStatus>
 800f818:	e000      	b.n	800f81c <USBD_GetDescriptor+0x2cc>
    return;
 800f81a:	bf00      	nop
  }
}
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop

0800f824 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	889b      	ldrh	r3, [r3, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d131      	bne.n	800f89a <USBD_SetAddress+0x76>
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	88db      	ldrh	r3, [r3, #6]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d12d      	bne.n	800f89a <USBD_SetAddress+0x76>
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	885b      	ldrh	r3, [r3, #2]
 800f842:	2b7f      	cmp	r3, #127	@ 0x7f
 800f844:	d829      	bhi.n	800f89a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	885b      	ldrh	r3, [r3, #2]
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	2b03      	cmp	r3, #3
 800f85c:	d104      	bne.n	800f868 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 f9bc 	bl	800fbde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f866:	e01d      	b.n	800f8a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	7bfa      	ldrb	r2, [r7, #15]
 800f86c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	4619      	mov	r1, r3
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 ff73 	bl	8010760 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 fa86 	bl	800fd8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f880:	7bfb      	ldrb	r3, [r7, #15]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d004      	beq.n	800f890 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2202      	movs	r2, #2
 800f88a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f88e:	e009      	b.n	800f8a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f898:	e004      	b.n	800f8a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f89a:	6839      	ldr	r1, [r7, #0]
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f99e 	bl	800fbde <USBD_CtlError>
  }
}
 800f8a2:	bf00      	nop
 800f8a4:	bf00      	nop
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	885b      	ldrh	r3, [r3, #2]
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	4b4e      	ldr	r3, [pc, #312]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f8c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8c4:	4b4d      	ldr	r3, [pc, #308]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d905      	bls.n	800f8d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f000 f985 	bl	800fbde <USBD_CtlError>
    return USBD_FAIL;
 800f8d4:	2303      	movs	r3, #3
 800f8d6:	e08c      	b.n	800f9f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	2b02      	cmp	r3, #2
 800f8e2:	d002      	beq.n	800f8ea <USBD_SetConfig+0x3e>
 800f8e4:	2b03      	cmp	r3, #3
 800f8e6:	d029      	beq.n	800f93c <USBD_SetConfig+0x90>
 800f8e8:	e075      	b.n	800f9d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8ea:	4b44      	ldr	r3, [pc, #272]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d020      	beq.n	800f934 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f8f2:	4b42      	ldr	r3, [pc, #264]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8fc:	4b3f      	ldr	r3, [pc, #252]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7fe ffe3 	bl	800e8ce <USBD_SetClassConfig>
 800f908:	4603      	mov	r3, r0
 800f90a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f90c:	7bfb      	ldrb	r3, [r7, #15]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d008      	beq.n	800f924 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f912:	6839      	ldr	r1, [r7, #0]
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 f962 	bl	800fbde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2202      	movs	r2, #2
 800f91e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f922:	e065      	b.n	800f9f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fa31 	bl	800fd8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2203      	movs	r2, #3
 800f92e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f932:	e05d      	b.n	800f9f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 fa29 	bl	800fd8c <USBD_CtlSendStatus>
      break;
 800f93a:	e059      	b.n	800f9f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f93c:	4b2f      	ldr	r3, [pc, #188]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d112      	bne.n	800f96a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2202      	movs	r2, #2
 800f948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f94c:	4b2b      	ldr	r3, [pc, #172]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f94e:	781b      	ldrb	r3, [r3, #0]
 800f950:	461a      	mov	r2, r3
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f956:	4b29      	ldr	r3, [pc, #164]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	4619      	mov	r1, r3
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7fe ffd2 	bl	800e906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 fa12 	bl	800fd8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f968:	e042      	b.n	800f9f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f96a:	4b24      	ldr	r3, [pc, #144]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	461a      	mov	r2, r3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	429a      	cmp	r2, r3
 800f976:	d02a      	beq.n	800f9ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	b2db      	uxtb	r3, r3
 800f97e:	4619      	mov	r1, r3
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7fe ffc0 	bl	800e906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f986:	4b1d      	ldr	r3, [pc, #116]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	461a      	mov	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f990:	4b1a      	ldr	r3, [pc, #104]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7fe ff99 	bl	800e8ce <USBD_SetClassConfig>
 800f99c:	4603      	mov	r3, r0
 800f99e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f9a0:	7bfb      	ldrb	r3, [r7, #15]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00f      	beq.n	800f9c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f918 	bl	800fbde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7fe ffa5 	bl	800e906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2202      	movs	r2, #2
 800f9c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9c4:	e014      	b.n	800f9f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f9e0 	bl	800fd8c <USBD_CtlSendStatus>
      break;
 800f9cc:	e010      	b.n	800f9f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f9dc 	bl	800fd8c <USBD_CtlSendStatus>
      break;
 800f9d4:	e00c      	b.n	800f9f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f9d6:	6839      	ldr	r1, [r7, #0]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f000 f900 	bl	800fbde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9de:	4b07      	ldr	r3, [pc, #28]	@ (800f9fc <USBD_SetConfig+0x150>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	4619      	mov	r1, r3
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fe ff8e 	bl	800e906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800f9ee:	bf00      	nop
  }

  return ret;
 800f9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20001250 	.word	0x20001250

0800fa00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	88db      	ldrh	r3, [r3, #6]
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d004      	beq.n	800fa1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 f8e2 	bl	800fbde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa1a:	e023      	b.n	800fa64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b02      	cmp	r3, #2
 800fa26:	dc02      	bgt.n	800fa2e <USBD_GetConfig+0x2e>
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	dc03      	bgt.n	800fa34 <USBD_GetConfig+0x34>
 800fa2c:	e015      	b.n	800fa5a <USBD_GetConfig+0x5a>
 800fa2e:	2b03      	cmp	r3, #3
 800fa30:	d00b      	beq.n	800fa4a <USBD_GetConfig+0x4a>
 800fa32:	e012      	b.n	800fa5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	2201      	movs	r2, #1
 800fa40:	4619      	mov	r1, r3
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f948 	bl	800fcd8 <USBD_CtlSendData>
        break;
 800fa48:	e00c      	b.n	800fa64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	2201      	movs	r2, #1
 800fa50:	4619      	mov	r1, r3
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 f940 	bl	800fcd8 <USBD_CtlSendData>
        break;
 800fa58:	e004      	b.n	800fa64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 f8be 	bl	800fbde <USBD_CtlError>
        break;
 800fa62:	bf00      	nop
}
 800fa64:	bf00      	nop
 800fa66:	3708      	adds	r7, #8
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	3b01      	subs	r3, #1
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d81e      	bhi.n	800fac2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	88db      	ldrh	r3, [r3, #6]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	d004      	beq.n	800fa96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f000 f8a5 	bl	800fbde <USBD_CtlError>
        break;
 800fa94:	e01a      	b.n	800facc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d005      	beq.n	800fab2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	f043 0202 	orr.w	r2, r3, #2
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	330c      	adds	r3, #12
 800fab6:	2202      	movs	r2, #2
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 f90c 	bl	800fcd8 <USBD_CtlSendData>
      break;
 800fac0:	e004      	b.n	800facc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 f88a 	bl	800fbde <USBD_CtlError>
      break;
 800faca:	bf00      	nop
  }
}
 800facc:	bf00      	nop
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
 800fadc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	885b      	ldrh	r3, [r3, #2]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d107      	bne.n	800faf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2201      	movs	r2, #1
 800faea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 f94c 	bl	800fd8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800faf4:	e013      	b.n	800fb1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	885b      	ldrh	r3, [r3, #2]
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d10b      	bne.n	800fb16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	889b      	ldrh	r3, [r3, #4]
 800fb02:	0a1b      	lsrs	r3, r3, #8
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f93c 	bl	800fd8c <USBD_CtlSendStatus>
}
 800fb14:	e003      	b.n	800fb1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f860 	bl	800fbde <USBD_CtlError>
}
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b082      	sub	sp, #8
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]
 800fb2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d80b      	bhi.n	800fb56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	885b      	ldrh	r3, [r3, #2]
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	d10c      	bne.n	800fb60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 f91c 	bl	800fd8c <USBD_CtlSendStatus>
      }
      break;
 800fb54:	e004      	b.n	800fb60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb56:	6839      	ldr	r1, [r7, #0]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 f840 	bl	800fbde <USBD_CtlError>
      break;
 800fb5e:	e000      	b.n	800fb62 <USBD_ClrFeature+0x3c>
      break;
 800fb60:	bf00      	nop
  }
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b084      	sub	sp, #16
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
 800fb72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	781a      	ldrb	r2, [r3, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	3301      	adds	r3, #1
 800fb84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	781a      	ldrb	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	3301      	adds	r3, #1
 800fb92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f7ff fa40 	bl	800f01a <SWAPBYTE>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	3301      	adds	r3, #1
 800fba6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fbae:	68f8      	ldr	r0, [r7, #12]
 800fbb0:	f7ff fa33 	bl	800f01a <SWAPBYTE>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f7ff fa26 	bl	800f01a <SWAPBYTE>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	80da      	strh	r2, [r3, #6]
}
 800fbd6:	bf00      	nop
 800fbd8:	3710      	adds	r7, #16
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b082      	sub	sp, #8
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
 800fbe6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbe8:	2180      	movs	r1, #128	@ 0x80
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 fd4e 	bl	801068c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fd4a 	bl	801068c <USBD_LL_StallEP>
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	60b9      	str	r1, [r7, #8]
 800fc0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d042      	beq.n	800fc9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fc1a:	6938      	ldr	r0, [r7, #16]
 800fc1c:	f000 f842 	bl	800fca4 <USBD_GetLen>
 800fc20:	4603      	mov	r3, r0
 800fc22:	3301      	adds	r3, #1
 800fc24:	005b      	lsls	r3, r3, #1
 800fc26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc2a:	d808      	bhi.n	800fc3e <USBD_GetString+0x3e>
 800fc2c:	6938      	ldr	r0, [r7, #16]
 800fc2e:	f000 f839 	bl	800fca4 <USBD_GetLen>
 800fc32:	4603      	mov	r3, r0
 800fc34:	3301      	adds	r3, #1
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	e001      	b.n	800fc42 <USBD_GetString+0x42>
 800fc3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	7812      	ldrb	r2, [r2, #0]
 800fc50:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
 800fc54:	3301      	adds	r3, #1
 800fc56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc58:	7dfb      	ldrb	r3, [r7, #23]
 800fc5a:	68ba      	ldr	r2, [r7, #8]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	2203      	movs	r2, #3
 800fc60:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc62:	7dfb      	ldrb	r3, [r7, #23]
 800fc64:	3301      	adds	r3, #1
 800fc66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc68:	e013      	b.n	800fc92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fc6a:	7dfb      	ldrb	r3, [r7, #23]
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	4413      	add	r3, r2
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	7812      	ldrb	r2, [r2, #0]
 800fc74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	613b      	str	r3, [r7, #16]
    idx++;
 800fc7c:	7dfb      	ldrb	r3, [r7, #23]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc82:	7dfb      	ldrb	r3, [r7, #23]
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	4413      	add	r3, r2
 800fc88:	2200      	movs	r2, #0
 800fc8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc8c:	7dfb      	ldrb	r3, [r7, #23]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1e7      	bne.n	800fc6a <USBD_GetString+0x6a>
 800fc9a:	e000      	b.n	800fc9e <USBD_GetString+0x9e>
    return;
 800fc9c:	bf00      	nop
  }
}
 800fc9e:	3718      	adds	r7, #24
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fcac:	2300      	movs	r3, #0
 800fcae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fcb4:	e005      	b.n	800fcc2 <USBD_GetLen+0x1e>
  {
    len++;
 800fcb6:	7bfb      	ldrb	r3, [r7, #15]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1f5      	bne.n	800fcb6 <USBD_GetLen+0x12>
  }

  return len;
 800fcca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3714      	adds	r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2202      	movs	r2, #2
 800fce8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f000 fd4d 	bl	801079e <USBD_LL_Transmit>

  return USBD_OK;
 800fd04:	2300      	movs	r3, #0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}

0800fd0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	60f8      	str	r0, [r7, #12]
 800fd16:	60b9      	str	r1, [r7, #8]
 800fd18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	2100      	movs	r1, #0
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f000 fd3c 	bl	801079e <USBD_LL_Transmit>

  return USBD_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3710      	adds	r7, #16
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}

0800fd30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2203      	movs	r2, #3
 800fd40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	2100      	movs	r1, #0
 800fd5a:	68f8      	ldr	r0, [r7, #12]
 800fd5c:	f000 fd40 	bl	80107e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	b084      	sub	sp, #16
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	60f8      	str	r0, [r7, #12]
 800fd72:	60b9      	str	r1, [r7, #8]
 800fd74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	68f8      	ldr	r0, [r7, #12]
 800fd7e:	f000 fd2f 	bl	80107e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2204      	movs	r2, #4
 800fd98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	2200      	movs	r2, #0
 800fda0:	2100      	movs	r1, #0
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 fcfb 	bl	801079e <USBD_LL_Transmit>

  return USBD_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2205      	movs	r2, #5
 800fdbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 fd09 	bl	80107e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fddc:	2200      	movs	r2, #0
 800fdde:	4912      	ldr	r1, [pc, #72]	@ (800fe28 <MX_USB_DEVICE_Init+0x50>)
 800fde0:	4812      	ldr	r0, [pc, #72]	@ (800fe2c <MX_USB_DEVICE_Init+0x54>)
 800fde2:	f7fe fcf7 	bl	800e7d4 <USBD_Init>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d001      	beq.n	800fdf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fdec:	f7f3 fb14 	bl	8003418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fdf0:	490f      	ldr	r1, [pc, #60]	@ (800fe30 <MX_USB_DEVICE_Init+0x58>)
 800fdf2:	480e      	ldr	r0, [pc, #56]	@ (800fe2c <MX_USB_DEVICE_Init+0x54>)
 800fdf4:	f7fe fd1e 	bl	800e834 <USBD_RegisterClass>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d001      	beq.n	800fe02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdfe:	f7f3 fb0b 	bl	8003418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fe02:	490c      	ldr	r1, [pc, #48]	@ (800fe34 <MX_USB_DEVICE_Init+0x5c>)
 800fe04:	4809      	ldr	r0, [pc, #36]	@ (800fe2c <MX_USB_DEVICE_Init+0x54>)
 800fe06:	f7fe fc15 	bl	800e634 <USBD_CDC_RegisterInterface>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fe10:	f7f3 fb02 	bl	8003418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe14:	4805      	ldr	r0, [pc, #20]	@ (800fe2c <MX_USB_DEVICE_Init+0x54>)
 800fe16:	f7fe fd43 	bl	800e8a0 <USBD_Start>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe20:	f7f3 fafa 	bl	8003418 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe24:	bf00      	nop
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	200000c4 	.word	0x200000c4
 800fe2c:	20001254 	.word	0x20001254
 800fe30:	20000028 	.word	0x20000028
 800fe34:	200000b0 	.word	0x200000b0

0800fe38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4905      	ldr	r1, [pc, #20]	@ (800fe54 <CDC_Init_FS+0x1c>)
 800fe40:	4805      	ldr	r0, [pc, #20]	@ (800fe58 <CDC_Init_FS+0x20>)
 800fe42:	f7fe fc11 	bl	800e668 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fe46:	4905      	ldr	r1, [pc, #20]	@ (800fe5c <CDC_Init_FS+0x24>)
 800fe48:	4803      	ldr	r0, [pc, #12]	@ (800fe58 <CDC_Init_FS+0x20>)
 800fe4a:	f7fe fc2f 	bl	800e6ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fe4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	20001730 	.word	0x20001730
 800fe58:	20001254 	.word	0x20001254
 800fe5c:	20001530 	.word	0x20001530

0800fe60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe60:	b480      	push	{r7}
 800fe62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	6039      	str	r1, [r7, #0]
 800fe7a:	71fb      	strb	r3, [r7, #7]
 800fe7c:	4613      	mov	r3, r2
 800fe7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	2b23      	cmp	r3, #35	@ 0x23
 800fe84:	f200 8097 	bhi.w	800ffb6 <CDC_Control_FS+0x146>
 800fe88:	a201      	add	r2, pc, #4	@ (adr r2, 800fe90 <CDC_Control_FS+0x20>)
 800fe8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe8e:	bf00      	nop
 800fe90:	0800ffb7 	.word	0x0800ffb7
 800fe94:	0800ffb7 	.word	0x0800ffb7
 800fe98:	0800ffb7 	.word	0x0800ffb7
 800fe9c:	0800ffb7 	.word	0x0800ffb7
 800fea0:	0800ffb7 	.word	0x0800ffb7
 800fea4:	0800ffb7 	.word	0x0800ffb7
 800fea8:	0800ffb7 	.word	0x0800ffb7
 800feac:	0800ffb7 	.word	0x0800ffb7
 800feb0:	0800ffb7 	.word	0x0800ffb7
 800feb4:	0800ffb7 	.word	0x0800ffb7
 800feb8:	0800ffb7 	.word	0x0800ffb7
 800febc:	0800ffb7 	.word	0x0800ffb7
 800fec0:	0800ffb7 	.word	0x0800ffb7
 800fec4:	0800ffb7 	.word	0x0800ffb7
 800fec8:	0800ffb7 	.word	0x0800ffb7
 800fecc:	0800ffb7 	.word	0x0800ffb7
 800fed0:	0800ffb7 	.word	0x0800ffb7
 800fed4:	0800ffb7 	.word	0x0800ffb7
 800fed8:	0800ffb7 	.word	0x0800ffb7
 800fedc:	0800ffb7 	.word	0x0800ffb7
 800fee0:	0800ffb7 	.word	0x0800ffb7
 800fee4:	0800ffb7 	.word	0x0800ffb7
 800fee8:	0800ffb7 	.word	0x0800ffb7
 800feec:	0800ffb7 	.word	0x0800ffb7
 800fef0:	0800ffb7 	.word	0x0800ffb7
 800fef4:	0800ffb7 	.word	0x0800ffb7
 800fef8:	0800ffb7 	.word	0x0800ffb7
 800fefc:	0800ffb7 	.word	0x0800ffb7
 800ff00:	0800ffb7 	.word	0x0800ffb7
 800ff04:	0800ffb7 	.word	0x0800ffb7
 800ff08:	0800ffb7 	.word	0x0800ffb7
 800ff0c:	0800ffb7 	.word	0x0800ffb7
 800ff10:	0800ff21 	.word	0x0800ff21
 800ff14:	0800ff63 	.word	0x0800ff63
 800ff18:	0800ffb7 	.word	0x0800ffb7
 800ff1c:	0800ffb7 	.word	0x0800ffb7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	461a      	mov	r2, r3
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	3301      	adds	r3, #1
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	021b      	lsls	r3, r3, #8
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	3302      	adds	r3, #2
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	041b      	lsls	r3, r3, #16
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	3303      	adds	r3, #3
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	061b      	lsls	r3, r3, #24
 800ff42:	4313      	orrs	r3, r2
 800ff44:	4a20      	ldr	r2, [pc, #128]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff46:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	791a      	ldrb	r2, [r3, #4]
 800ff4c:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff4e:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	795a      	ldrb	r2, [r3, #5]
 800ff54:	4b1c      	ldr	r3, [pc, #112]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff56:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	799a      	ldrb	r2, [r3, #6]
 800ff5c:	4b1a      	ldr	r3, [pc, #104]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff5e:	719a      	strb	r2, [r3, #6]
    break;
 800ff60:	e02a      	b.n	800ffb8 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ff62:	4b19      	ldr	r3, [pc, #100]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ff6c:	4b16      	ldr	r3, [pc, #88]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	0a1a      	lsrs	r2, r3, #8
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	3301      	adds	r3, #1
 800ff76:	b2d2      	uxtb	r2, r2
 800ff78:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ff7a:	4b13      	ldr	r3, [pc, #76]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	0c1a      	lsrs	r2, r3, #16
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	3302      	adds	r3, #2
 800ff84:	b2d2      	uxtb	r2, r2
 800ff86:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800ff88:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	0e1a      	lsrs	r2, r3, #24
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	3303      	adds	r3, #3
 800ff92:	b2d2      	uxtb	r2, r2
 800ff94:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4a0b      	ldr	r2, [pc, #44]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ff9c:	7912      	ldrb	r2, [r2, #4]
 800ff9e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	3305      	adds	r3, #5
 800ffa4:	4a08      	ldr	r2, [pc, #32]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ffa6:	7952      	ldrb	r2, [r2, #5]
 800ffa8:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	3306      	adds	r3, #6
 800ffae:	4a06      	ldr	r2, [pc, #24]	@ (800ffc8 <CDC_Control_FS+0x158>)
 800ffb0:	7992      	ldrb	r2, [r2, #6]
 800ffb2:	701a      	strb	r2, [r3, #0]
	break;
 800ffb4:	e000      	b.n	800ffb8 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ffb6:	bf00      	nop
  }

  return (USBD_OK);
 800ffb8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	370c      	adds	r7, #12
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	200000a8 	.word	0x200000a8

0800ffcc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 800ffd6:	4b0b      	ldr	r3, [pc, #44]	@ (8010004 <CDC_Receive_FS+0x38>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d006      	beq.n	800ffec <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 800ffde:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <CDC_Receive_FS+0x38>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	683a      	ldr	r2, [r7, #0]
 800ffe4:	6812      	ldr	r2, [r2, #0]
 800ffe6:	4611      	mov	r1, r2
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ffec:	6879      	ldr	r1, [r7, #4]
 800ffee:	4806      	ldr	r0, [pc, #24]	@ (8010008 <CDC_Receive_FS+0x3c>)
 800fff0:	f7fe fb5c 	bl	800e6ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fff4:	4804      	ldr	r0, [pc, #16]	@ (8010008 <CDC_Receive_FS+0x3c>)
 800fff6:	f7fe fbb7 	bl	800e768 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fffa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	20001930 	.word	0x20001930
 8010008:	20001254 	.word	0x20001254

0801000c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	460b      	mov	r3, r1
 8010016:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801001c:	4b0d      	ldr	r3, [pc, #52]	@ (8010054 <CDC_Transmit_FS+0x48>)
 801001e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010022:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801002a:	2b00      	cmp	r3, #0
 801002c:	d001      	beq.n	8010032 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801002e:	2301      	movs	r3, #1
 8010030:	e00b      	b.n	801004a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010032:	887b      	ldrh	r3, [r7, #2]
 8010034:	461a      	mov	r2, r3
 8010036:	6879      	ldr	r1, [r7, #4]
 8010038:	4806      	ldr	r0, [pc, #24]	@ (8010054 <CDC_Transmit_FS+0x48>)
 801003a:	f7fe fb15 	bl	800e668 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801003e:	4805      	ldr	r0, [pc, #20]	@ (8010054 <CDC_Transmit_FS+0x48>)
 8010040:	f7fe fb52 	bl	800e6e8 <USBD_CDC_TransmitPacket>
 8010044:	4603      	mov	r3, r0
 8010046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010048:	7bfb      	ldrb	r3, [r7, #15]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3710      	adds	r7, #16
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop
 8010054:	20001254 	.word	0x20001254

08010058 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010058:	b480      	push	{r7}
 801005a:	b087      	sub	sp, #28
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	4613      	mov	r3, r2
 8010064:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010066:	2300      	movs	r3, #0
 8010068:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801006a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801006e:	4618      	mov	r0, r3
 8010070:	371c      	adds	r7, #28
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr
	...

0801007c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 8010084:	4a04      	ldr	r2, [pc, #16]	@ (8010098 <CDC_Attach_Rx+0x1c>)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6013      	str	r3, [r2, #0]
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	20001930 	.word	0x20001930

0801009c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	6039      	str	r1, [r7, #0]
 80100a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	2212      	movs	r2, #18
 80100ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100ae:	4b03      	ldr	r3, [pc, #12]	@ (80100bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	200000e0 	.word	0x200000e0

080100c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	4603      	mov	r3, r0
 80100c8:	6039      	str	r1, [r7, #0]
 80100ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2204      	movs	r2, #4
 80100d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80100d2:	4b03      	ldr	r3, [pc, #12]	@ (80100e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	200000f4 	.word	0x200000f4

080100e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b082      	sub	sp, #8
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	4603      	mov	r3, r0
 80100ec:	6039      	str	r1, [r7, #0]
 80100ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100f0:	79fb      	ldrb	r3, [r7, #7]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d105      	bne.n	8010102 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	4907      	ldr	r1, [pc, #28]	@ (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
 80100fa:	4808      	ldr	r0, [pc, #32]	@ (801011c <USBD_FS_ProductStrDescriptor+0x38>)
 80100fc:	f7ff fd80 	bl	800fc00 <USBD_GetString>
 8010100:	e004      	b.n	801010c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010102:	683a      	ldr	r2, [r7, #0]
 8010104:	4904      	ldr	r1, [pc, #16]	@ (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
 8010106:	4805      	ldr	r0, [pc, #20]	@ (801011c <USBD_FS_ProductStrDescriptor+0x38>)
 8010108:	f7ff fd7a 	bl	800fc00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801010c:	4b02      	ldr	r3, [pc, #8]	@ (8010118 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20001934 	.word	0x20001934
 801011c:	080112f4 	.word	0x080112f4

08010120 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	4603      	mov	r3, r0
 8010128:	6039      	str	r1, [r7, #0]
 801012a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801012c:	683a      	ldr	r2, [r7, #0]
 801012e:	4904      	ldr	r1, [pc, #16]	@ (8010140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010130:	4804      	ldr	r0, [pc, #16]	@ (8010144 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010132:	f7ff fd65 	bl	800fc00 <USBD_GetString>
  return USBD_StrDesc;
 8010136:	4b02      	ldr	r3, [pc, #8]	@ (8010140 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	20001934 	.word	0x20001934
 8010144:	0801130c 	.word	0x0801130c

08010148 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
 801014e:	4603      	mov	r3, r0
 8010150:	6039      	str	r1, [r7, #0]
 8010152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	221a      	movs	r2, #26
 8010158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801015a:	f000 f843 	bl	80101e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801015e:	4b02      	ldr	r3, [pc, #8]	@ (8010168 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010160:	4618      	mov	r0, r3
 8010162:	3708      	adds	r7, #8
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	200000f8 	.word	0x200000f8

0801016c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	4603      	mov	r3, r0
 8010174:	6039      	str	r1, [r7, #0]
 8010176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d105      	bne.n	801018a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	4907      	ldr	r1, [pc, #28]	@ (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010182:	4808      	ldr	r0, [pc, #32]	@ (80101a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010184:	f7ff fd3c 	bl	800fc00 <USBD_GetString>
 8010188:	e004      	b.n	8010194 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801018a:	683a      	ldr	r2, [r7, #0]
 801018c:	4904      	ldr	r1, [pc, #16]	@ (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801018e:	4805      	ldr	r0, [pc, #20]	@ (80101a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010190:	f7ff fd36 	bl	800fc00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010194:	4b02      	ldr	r3, [pc, #8]	@ (80101a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010196:	4618      	mov	r0, r3
 8010198:	3708      	adds	r7, #8
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
 801019e:	bf00      	nop
 80101a0:	20001934 	.word	0x20001934
 80101a4:	08011320 	.word	0x08011320

080101a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	4603      	mov	r3, r0
 80101b0:	6039      	str	r1, [r7, #0]
 80101b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101b4:	79fb      	ldrb	r3, [r7, #7]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d105      	bne.n	80101c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101ba:	683a      	ldr	r2, [r7, #0]
 80101bc:	4907      	ldr	r1, [pc, #28]	@ (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101be:	4808      	ldr	r0, [pc, #32]	@ (80101e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101c0:	f7ff fd1e 	bl	800fc00 <USBD_GetString>
 80101c4:	e004      	b.n	80101d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101c6:	683a      	ldr	r2, [r7, #0]
 80101c8:	4904      	ldr	r1, [pc, #16]	@ (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101ca:	4805      	ldr	r0, [pc, #20]	@ (80101e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101cc:	f7ff fd18 	bl	800fc00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80101d0:	4b02      	ldr	r3, [pc, #8]	@ (80101dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	20001934 	.word	0x20001934
 80101e0:	0801132c 	.word	0x0801132c

080101e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80101ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010228 <Get_SerialNum+0x44>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80101f0:	4b0e      	ldr	r3, [pc, #56]	@ (801022c <Get_SerialNum+0x48>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80101f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010230 <Get_SerialNum+0x4c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4413      	add	r3, r2
 8010202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d009      	beq.n	801021e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801020a:	2208      	movs	r2, #8
 801020c:	4909      	ldr	r1, [pc, #36]	@ (8010234 <Get_SerialNum+0x50>)
 801020e:	68f8      	ldr	r0, [r7, #12]
 8010210:	f000 f814 	bl	801023c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010214:	2204      	movs	r2, #4
 8010216:	4908      	ldr	r1, [pc, #32]	@ (8010238 <Get_SerialNum+0x54>)
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f000 f80f 	bl	801023c <IntToUnicode>
  }
}
 801021e:	bf00      	nop
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	1fff7a10 	.word	0x1fff7a10
 801022c:	1fff7a14 	.word	0x1fff7a14
 8010230:	1fff7a18 	.word	0x1fff7a18
 8010234:	200000fa 	.word	0x200000fa
 8010238:	2000010a 	.word	0x2000010a

0801023c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801023c:	b480      	push	{r7}
 801023e:	b087      	sub	sp, #28
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4613      	mov	r3, r2
 8010248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801024e:	2300      	movs	r3, #0
 8010250:	75fb      	strb	r3, [r7, #23]
 8010252:	e027      	b.n	80102a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	0f1b      	lsrs	r3, r3, #28
 8010258:	2b09      	cmp	r3, #9
 801025a:	d80b      	bhi.n	8010274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	0f1b      	lsrs	r3, r3, #28
 8010260:	b2da      	uxtb	r2, r3
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4619      	mov	r1, r3
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	440b      	add	r3, r1
 801026c:	3230      	adds	r2, #48	@ 0x30
 801026e:	b2d2      	uxtb	r2, r2
 8010270:	701a      	strb	r2, [r3, #0]
 8010272:	e00a      	b.n	801028a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	0f1b      	lsrs	r3, r3, #28
 8010278:	b2da      	uxtb	r2, r3
 801027a:	7dfb      	ldrb	r3, [r7, #23]
 801027c:	005b      	lsls	r3, r3, #1
 801027e:	4619      	mov	r1, r3
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	440b      	add	r3, r1
 8010284:	3237      	adds	r2, #55	@ 0x37
 8010286:	b2d2      	uxtb	r2, r2
 8010288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	011b      	lsls	r3, r3, #4
 801028e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	3301      	adds	r3, #1
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	4413      	add	r3, r2
 801029a:	2200      	movs	r2, #0
 801029c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801029e:	7dfb      	ldrb	r3, [r7, #23]
 80102a0:	3301      	adds	r3, #1
 80102a2:	75fb      	strb	r3, [r7, #23]
 80102a4:	7dfa      	ldrb	r2, [r7, #23]
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d3d3      	bcc.n	8010254 <IntToUnicode+0x18>
  }
}
 80102ac:	bf00      	nop
 80102ae:	bf00      	nop
 80102b0:	371c      	adds	r7, #28
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
	...

080102bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b08a      	sub	sp, #40	@ 0x28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80102c4:	f107 0314 	add.w	r3, r7, #20
 80102c8:	2200      	movs	r2, #0
 80102ca:	601a      	str	r2, [r3, #0]
 80102cc:	605a      	str	r2, [r3, #4]
 80102ce:	609a      	str	r2, [r3, #8]
 80102d0:	60da      	str	r2, [r3, #12]
 80102d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80102dc:	d13a      	bne.n	8010354 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80102de:	2300      	movs	r3, #0
 80102e0:	613b      	str	r3, [r7, #16]
 80102e2:	4b1e      	ldr	r3, [pc, #120]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 80102e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102e6:	4a1d      	ldr	r2, [pc, #116]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 80102e8:	f043 0301 	orr.w	r3, r3, #1
 80102ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80102ee:	4b1b      	ldr	r3, [pc, #108]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 80102f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	613b      	str	r3, [r7, #16]
 80102f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80102fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80102fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010300:	2302      	movs	r3, #2
 8010302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010304:	2300      	movs	r3, #0
 8010306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010308:	2303      	movs	r3, #3
 801030a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801030c:	230a      	movs	r3, #10
 801030e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010310:	f107 0314 	add.w	r3, r7, #20
 8010314:	4619      	mov	r1, r3
 8010316:	4812      	ldr	r0, [pc, #72]	@ (8010360 <HAL_PCD_MspInit+0xa4>)
 8010318:	f7f4 fedc 	bl	80050d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801031c:	4b0f      	ldr	r3, [pc, #60]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 801031e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010320:	4a0e      	ldr	r2, [pc, #56]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 8010322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010326:	6353      	str	r3, [r2, #52]	@ 0x34
 8010328:	2300      	movs	r3, #0
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	4b0b      	ldr	r3, [pc, #44]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 801032e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010330:	4a0a      	ldr	r2, [pc, #40]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 8010332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010336:	6453      	str	r3, [r2, #68]	@ 0x44
 8010338:	4b08      	ldr	r3, [pc, #32]	@ (801035c <HAL_PCD_MspInit+0xa0>)
 801033a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801033c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010344:	2200      	movs	r2, #0
 8010346:	2100      	movs	r1, #0
 8010348:	2043      	movs	r0, #67	@ 0x43
 801034a:	f7f4 fa70 	bl	800482e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801034e:	2043      	movs	r0, #67	@ 0x43
 8010350:	f7f4 fa89 	bl	8004866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010354:	bf00      	nop
 8010356:	3728      	adds	r7, #40	@ 0x28
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	40023800 	.word	0x40023800
 8010360:	40020000 	.word	0x40020000

08010364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010378:	4619      	mov	r1, r3
 801037a:	4610      	mov	r0, r2
 801037c:	f7fe fadd 	bl	800e93a <USBD_LL_SetupStage>
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801039a:	78fa      	ldrb	r2, [r7, #3]
 801039c:	6879      	ldr	r1, [r7, #4]
 801039e:	4613      	mov	r3, r2
 80103a0:	00db      	lsls	r3, r3, #3
 80103a2:	4413      	add	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	440b      	add	r3, r1
 80103a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	78fb      	ldrb	r3, [r7, #3]
 80103b0:	4619      	mov	r1, r3
 80103b2:	f7fe fb17 	bl	800e9e4 <USBD_LL_DataOutStage>
}
 80103b6:	bf00      	nop
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b082      	sub	sp, #8
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	460b      	mov	r3, r1
 80103c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80103d0:	78fa      	ldrb	r2, [r7, #3]
 80103d2:	6879      	ldr	r1, [r7, #4]
 80103d4:	4613      	mov	r3, r2
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	4413      	add	r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	440b      	add	r3, r1
 80103de:	3320      	adds	r3, #32
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	78fb      	ldrb	r3, [r7, #3]
 80103e4:	4619      	mov	r1, r3
 80103e6:	f7fe fbb0 	bl	800eb4a <USBD_LL_DataInStage>
}
 80103ea:	bf00      	nop
 80103ec:	3708      	adds	r7, #8
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b082      	sub	sp, #8
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010400:	4618      	mov	r0, r3
 8010402:	f7fe fcea 	bl	800edda <USBD_LL_SOF>
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bd80      	pop	{r7, pc}

0801040e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801040e:	b580      	push	{r7, lr}
 8010410:	b084      	sub	sp, #16
 8010412:	af00      	add	r7, sp, #0
 8010414:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010416:	2301      	movs	r3, #1
 8010418:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	79db      	ldrb	r3, [r3, #7]
 801041e:	2b02      	cmp	r3, #2
 8010420:	d001      	beq.n	8010426 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010422:	f7f2 fff9 	bl	8003418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801042c:	7bfa      	ldrb	r2, [r7, #15]
 801042e:	4611      	mov	r1, r2
 8010430:	4618      	mov	r0, r3
 8010432:	f7fe fc8e 	bl	800ed52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801043c:	4618      	mov	r0, r3
 801043e:	f7fe fc36 	bl	800ecae <USBD_LL_Reset>
}
 8010442:	bf00      	nop
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
	...

0801044c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe fc89 	bl	800ed72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	6812      	ldr	r2, [r2, #0]
 801046e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010472:	f043 0301 	orr.w	r3, r3, #1
 8010476:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	7adb      	ldrb	r3, [r3, #11]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d005      	beq.n	801048c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010480:	4b04      	ldr	r3, [pc, #16]	@ (8010494 <HAL_PCD_SuspendCallback+0x48>)
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	4a03      	ldr	r2, [pc, #12]	@ (8010494 <HAL_PCD_SuspendCallback+0x48>)
 8010486:	f043 0306 	orr.w	r3, r3, #6
 801048a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	e000ed00 	.word	0xe000ed00

08010498 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fe fc7f 	bl	800edaa <USBD_LL_Resume>
}
 80104ac:	bf00      	nop
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	460b      	mov	r3, r1
 80104be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104c6:	78fa      	ldrb	r2, [r7, #3]
 80104c8:	4611      	mov	r1, r2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fe fcd7 	bl	800ee7e <USBD_LL_IsoOUTIncomplete>
}
 80104d0:	bf00      	nop
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	460b      	mov	r3, r1
 80104e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104ea:	78fa      	ldrb	r2, [r7, #3]
 80104ec:	4611      	mov	r1, r2
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fe fc93 	bl	800ee1a <USBD_LL_IsoINIncomplete>
}
 80104f4:	bf00      	nop
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801050a:	4618      	mov	r0, r3
 801050c:	f7fe fce9 	bl	800eee2 <USBD_LL_DevConnected>
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010526:	4618      	mov	r0, r3
 8010528:	f7fe fce6 	bl	800eef8 <USBD_LL_DevDisconnected>
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d13c      	bne.n	80105be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010544:	4a20      	ldr	r2, [pc, #128]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a1e      	ldr	r2, [pc, #120]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010550:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010554:	4b1c      	ldr	r3, [pc, #112]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010556:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801055a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801055c:	4b1a      	ldr	r3, [pc, #104]	@ (80105c8 <USBD_LL_Init+0x94>)
 801055e:	2204      	movs	r2, #4
 8010560:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010562:	4b19      	ldr	r3, [pc, #100]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010564:	2202      	movs	r2, #2
 8010566:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010568:	4b17      	ldr	r3, [pc, #92]	@ (80105c8 <USBD_LL_Init+0x94>)
 801056a:	2200      	movs	r2, #0
 801056c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801056e:	4b16      	ldr	r3, [pc, #88]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010570:	2202      	movs	r2, #2
 8010572:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010574:	4b14      	ldr	r3, [pc, #80]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010576:	2200      	movs	r2, #0
 8010578:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801057a:	4b13      	ldr	r3, [pc, #76]	@ (80105c8 <USBD_LL_Init+0x94>)
 801057c:	2200      	movs	r2, #0
 801057e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010580:	4b11      	ldr	r3, [pc, #68]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010582:	2200      	movs	r2, #0
 8010584:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010586:	4b10      	ldr	r3, [pc, #64]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010588:	2200      	movs	r2, #0
 801058a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801058c:	4b0e      	ldr	r3, [pc, #56]	@ (80105c8 <USBD_LL_Init+0x94>)
 801058e:	2200      	movs	r2, #0
 8010590:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010592:	480d      	ldr	r0, [pc, #52]	@ (80105c8 <USBD_LL_Init+0x94>)
 8010594:	f7f8 fb5f 	bl	8008c56 <HAL_PCD_Init>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801059e:	f7f2 ff3b 	bl	8003418 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80105a2:	2180      	movs	r1, #128	@ 0x80
 80105a4:	4808      	ldr	r0, [pc, #32]	@ (80105c8 <USBD_LL_Init+0x94>)
 80105a6:	f7f9 fd8c 	bl	800a0c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80105aa:	2240      	movs	r2, #64	@ 0x40
 80105ac:	2100      	movs	r1, #0
 80105ae:	4806      	ldr	r0, [pc, #24]	@ (80105c8 <USBD_LL_Init+0x94>)
 80105b0:	f7f9 fd40 	bl	800a034 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80105b4:	2280      	movs	r2, #128	@ 0x80
 80105b6:	2101      	movs	r1, #1
 80105b8:	4803      	ldr	r0, [pc, #12]	@ (80105c8 <USBD_LL_Init+0x94>)
 80105ba:	f7f9 fd3b 	bl	800a034 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	20001b34 	.word	0x20001b34

080105cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7f8 fc46 	bl	8008e74 <HAL_PCD_Start>
 80105e8:	4603      	mov	r3, r0
 80105ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105ec:	7bfb      	ldrb	r3, [r7, #15]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f000 f942 	bl	8010878 <USBD_Get_USB_Status>
 80105f4:	4603      	mov	r3, r0
 80105f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b084      	sub	sp, #16
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	4608      	mov	r0, r1
 801060c:	4611      	mov	r1, r2
 801060e:	461a      	mov	r2, r3
 8010610:	4603      	mov	r3, r0
 8010612:	70fb      	strb	r3, [r7, #3]
 8010614:	460b      	mov	r3, r1
 8010616:	70bb      	strb	r3, [r7, #2]
 8010618:	4613      	mov	r3, r2
 801061a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801061c:	2300      	movs	r3, #0
 801061e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010620:	2300      	movs	r3, #0
 8010622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801062a:	78bb      	ldrb	r3, [r7, #2]
 801062c:	883a      	ldrh	r2, [r7, #0]
 801062e:	78f9      	ldrb	r1, [r7, #3]
 8010630:	f7f9 f91a 	bl	8009868 <HAL_PCD_EP_Open>
 8010634:	4603      	mov	r3, r0
 8010636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010638:	7bfb      	ldrb	r3, [r7, #15]
 801063a:	4618      	mov	r0, r3
 801063c:	f000 f91c 	bl	8010878 <USBD_Get_USB_Status>
 8010640:	4603      	mov	r3, r0
 8010642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010644:	7bbb      	ldrb	r3, [r7, #14]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b084      	sub	sp, #16
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801065a:	2300      	movs	r3, #0
 801065c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010668:	78fa      	ldrb	r2, [r7, #3]
 801066a:	4611      	mov	r1, r2
 801066c:	4618      	mov	r0, r3
 801066e:	f7f9 f965 	bl	800993c <HAL_PCD_EP_Close>
 8010672:	4603      	mov	r3, r0
 8010674:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010676:	7bfb      	ldrb	r3, [r7, #15]
 8010678:	4618      	mov	r0, r3
 801067a:	f000 f8fd 	bl	8010878 <USBD_Get_USB_Status>
 801067e:	4603      	mov	r3, r0
 8010680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010682:	7bbb      	ldrb	r3, [r7, #14]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3710      	adds	r7, #16
 8010688:	46bd      	mov	sp, r7
 801068a:	bd80      	pop	{r7, pc}

0801068c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	460b      	mov	r3, r1
 8010696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106a6:	78fa      	ldrb	r2, [r7, #3]
 80106a8:	4611      	mov	r1, r2
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7f9 fa1d 	bl	8009aea <HAL_PCD_EP_SetStall>
 80106b0:	4603      	mov	r3, r0
 80106b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b4:	7bfb      	ldrb	r3, [r7, #15]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f000 f8de 	bl	8010878 <USBD_Get_USB_Status>
 80106bc:	4603      	mov	r3, r0
 80106be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106ca:	b580      	push	{r7, lr}
 80106cc:	b084      	sub	sp, #16
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	460b      	mov	r3, r1
 80106d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106d6:	2300      	movs	r3, #0
 80106d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106da:	2300      	movs	r3, #0
 80106dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106e4:	78fa      	ldrb	r2, [r7, #3]
 80106e6:	4611      	mov	r1, r2
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7f9 fa61 	bl	8009bb0 <HAL_PCD_EP_ClrStall>
 80106ee:	4603      	mov	r3, r0
 80106f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	4618      	mov	r0, r3
 80106f6:	f000 f8bf 	bl	8010878 <USBD_Get_USB_Status>
 80106fa:	4603      	mov	r3, r0
 80106fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010700:	4618      	mov	r0, r3
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010708:	b480      	push	{r7}
 801070a:	b085      	sub	sp, #20
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	460b      	mov	r3, r1
 8010712:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801071a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801071c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010720:	2b00      	cmp	r3, #0
 8010722:	da0b      	bge.n	801073c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010724:	78fb      	ldrb	r3, [r7, #3]
 8010726:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801072a:	68f9      	ldr	r1, [r7, #12]
 801072c:	4613      	mov	r3, r2
 801072e:	00db      	lsls	r3, r3, #3
 8010730:	4413      	add	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	440b      	add	r3, r1
 8010736:	3316      	adds	r3, #22
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	e00b      	b.n	8010754 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010742:	68f9      	ldr	r1, [r7, #12]
 8010744:	4613      	mov	r3, r2
 8010746:	00db      	lsls	r3, r3, #3
 8010748:	4413      	add	r3, r2
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	440b      	add	r3, r1
 801074e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010752:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010754:	4618      	mov	r0, r3
 8010756:	3714      	adds	r7, #20
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr

08010760 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010770:	2300      	movs	r3, #0
 8010772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801077a:	78fa      	ldrb	r2, [r7, #3]
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f7f9 f84e 	bl	8009820 <HAL_PCD_SetAddress>
 8010784:	4603      	mov	r3, r0
 8010786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010788:	7bfb      	ldrb	r3, [r7, #15]
 801078a:	4618      	mov	r0, r3
 801078c:	f000 f874 	bl	8010878 <USBD_Get_USB_Status>
 8010790:	4603      	mov	r3, r0
 8010792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010794:	7bbb      	ldrb	r3, [r7, #14]
}
 8010796:	4618      	mov	r0, r3
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b086      	sub	sp, #24
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	60f8      	str	r0, [r7, #12]
 80107a6:	607a      	str	r2, [r7, #4]
 80107a8:	603b      	str	r3, [r7, #0]
 80107aa:	460b      	mov	r3, r1
 80107ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ae:	2300      	movs	r3, #0
 80107b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107b2:	2300      	movs	r3, #0
 80107b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80107bc:	7af9      	ldrb	r1, [r7, #11]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	f7f9 f958 	bl	8009a76 <HAL_PCD_EP_Transmit>
 80107c6:	4603      	mov	r3, r0
 80107c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 f853 	bl	8010878 <USBD_Get_USB_Status>
 80107d2:	4603      	mov	r3, r0
 80107d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3718      	adds	r7, #24
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b086      	sub	sp, #24
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	607a      	str	r2, [r7, #4]
 80107ea:	603b      	str	r3, [r7, #0]
 80107ec:	460b      	mov	r3, r1
 80107ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107f4:	2300      	movs	r3, #0
 80107f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80107fe:	7af9      	ldrb	r1, [r7, #11]
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	f7f9 f8e4 	bl	80099d0 <HAL_PCD_EP_Receive>
 8010808:	4603      	mov	r3, r0
 801080a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801080c:	7dfb      	ldrb	r3, [r7, #23]
 801080e:	4618      	mov	r0, r3
 8010810:	f000 f832 	bl	8010878 <USBD_Get_USB_Status>
 8010814:	4603      	mov	r3, r0
 8010816:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010818:	7dbb      	ldrb	r3, [r7, #22]
}
 801081a:	4618      	mov	r0, r3
 801081c:	3718      	adds	r7, #24
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b082      	sub	sp, #8
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	460b      	mov	r3, r1
 801082c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010834:	78fa      	ldrb	r2, [r7, #3]
 8010836:	4611      	mov	r1, r2
 8010838:	4618      	mov	r0, r3
 801083a:	f7f9 f904 	bl	8009a46 <HAL_PCD_EP_GetRxCount>
 801083e:	4603      	mov	r3, r0
}
 8010840:	4618      	mov	r0, r3
 8010842:	3708      	adds	r7, #8
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}

08010848 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010848:	b480      	push	{r7}
 801084a:	b083      	sub	sp, #12
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010850:	4b03      	ldr	r3, [pc, #12]	@ (8010860 <USBD_static_malloc+0x18>)
}
 8010852:	4618      	mov	r0, r3
 8010854:	370c      	adds	r7, #12
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	20002018 	.word	0x20002018

08010864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]

}
 801086c:	bf00      	nop
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	4603      	mov	r3, r0
 8010880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	2b03      	cmp	r3, #3
 801088a:	d817      	bhi.n	80108bc <USBD_Get_USB_Status+0x44>
 801088c:	a201      	add	r2, pc, #4	@ (adr r2, 8010894 <USBD_Get_USB_Status+0x1c>)
 801088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010892:	bf00      	nop
 8010894:	080108a5 	.word	0x080108a5
 8010898:	080108ab 	.word	0x080108ab
 801089c:	080108b1 	.word	0x080108b1
 80108a0:	080108b7 	.word	0x080108b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80108a4:	2300      	movs	r3, #0
 80108a6:	73fb      	strb	r3, [r7, #15]
    break;
 80108a8:	e00b      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108aa:	2303      	movs	r3, #3
 80108ac:	73fb      	strb	r3, [r7, #15]
    break;
 80108ae:	e008      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73fb      	strb	r3, [r7, #15]
    break;
 80108b4:	e005      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108b6:	2303      	movs	r3, #3
 80108b8:	73fb      	strb	r3, [r7, #15]
    break;
 80108ba:	e002      	b.n	80108c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80108bc:	2303      	movs	r3, #3
 80108be:	73fb      	strb	r3, [r7, #15]
    break;
 80108c0:	bf00      	nop
  }
  return usb_status;
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3714      	adds	r7, #20
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <siprintf>:
 80108d0:	b40e      	push	{r1, r2, r3}
 80108d2:	b510      	push	{r4, lr}
 80108d4:	b09d      	sub	sp, #116	@ 0x74
 80108d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80108d8:	9002      	str	r0, [sp, #8]
 80108da:	9006      	str	r0, [sp, #24]
 80108dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80108e0:	480a      	ldr	r0, [pc, #40]	@ (801090c <siprintf+0x3c>)
 80108e2:	9107      	str	r1, [sp, #28]
 80108e4:	9104      	str	r1, [sp, #16]
 80108e6:	490a      	ldr	r1, [pc, #40]	@ (8010910 <siprintf+0x40>)
 80108e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80108ec:	9105      	str	r1, [sp, #20]
 80108ee:	2400      	movs	r4, #0
 80108f0:	a902      	add	r1, sp, #8
 80108f2:	6800      	ldr	r0, [r0, #0]
 80108f4:	9301      	str	r3, [sp, #4]
 80108f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80108f8:	f000 f9a2 	bl	8010c40 <_svfiprintf_r>
 80108fc:	9b02      	ldr	r3, [sp, #8]
 80108fe:	701c      	strb	r4, [r3, #0]
 8010900:	b01d      	add	sp, #116	@ 0x74
 8010902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010906:	b003      	add	sp, #12
 8010908:	4770      	bx	lr
 801090a:	bf00      	nop
 801090c:	20000114 	.word	0x20000114
 8010910:	ffff0208 	.word	0xffff0208

08010914 <memset>:
 8010914:	4402      	add	r2, r0
 8010916:	4603      	mov	r3, r0
 8010918:	4293      	cmp	r3, r2
 801091a:	d100      	bne.n	801091e <memset+0xa>
 801091c:	4770      	bx	lr
 801091e:	f803 1b01 	strb.w	r1, [r3], #1
 8010922:	e7f9      	b.n	8010918 <memset+0x4>

08010924 <__errno>:
 8010924:	4b01      	ldr	r3, [pc, #4]	@ (801092c <__errno+0x8>)
 8010926:	6818      	ldr	r0, [r3, #0]
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop
 801092c:	20000114 	.word	0x20000114

08010930 <__libc_init_array>:
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	4d0d      	ldr	r5, [pc, #52]	@ (8010968 <__libc_init_array+0x38>)
 8010934:	4c0d      	ldr	r4, [pc, #52]	@ (801096c <__libc_init_array+0x3c>)
 8010936:	1b64      	subs	r4, r4, r5
 8010938:	10a4      	asrs	r4, r4, #2
 801093a:	2600      	movs	r6, #0
 801093c:	42a6      	cmp	r6, r4
 801093e:	d109      	bne.n	8010954 <__libc_init_array+0x24>
 8010940:	4d0b      	ldr	r5, [pc, #44]	@ (8010970 <__libc_init_array+0x40>)
 8010942:	4c0c      	ldr	r4, [pc, #48]	@ (8010974 <__libc_init_array+0x44>)
 8010944:	f000 fc64 	bl	8011210 <_init>
 8010948:	1b64      	subs	r4, r4, r5
 801094a:	10a4      	asrs	r4, r4, #2
 801094c:	2600      	movs	r6, #0
 801094e:	42a6      	cmp	r6, r4
 8010950:	d105      	bne.n	801095e <__libc_init_array+0x2e>
 8010952:	bd70      	pop	{r4, r5, r6, pc}
 8010954:	f855 3b04 	ldr.w	r3, [r5], #4
 8010958:	4798      	blx	r3
 801095a:	3601      	adds	r6, #1
 801095c:	e7ee      	b.n	801093c <__libc_init_array+0xc>
 801095e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010962:	4798      	blx	r3
 8010964:	3601      	adds	r6, #1
 8010966:	e7f2      	b.n	801094e <__libc_init_array+0x1e>
 8010968:	0801246c 	.word	0x0801246c
 801096c:	0801246c 	.word	0x0801246c
 8010970:	0801246c 	.word	0x0801246c
 8010974:	08012470 	.word	0x08012470

08010978 <__retarget_lock_acquire_recursive>:
 8010978:	4770      	bx	lr

0801097a <__retarget_lock_release_recursive>:
 801097a:	4770      	bx	lr

0801097c <memcpy>:
 801097c:	440a      	add	r2, r1
 801097e:	4291      	cmp	r1, r2
 8010980:	f100 33ff 	add.w	r3, r0, #4294967295
 8010984:	d100      	bne.n	8010988 <memcpy+0xc>
 8010986:	4770      	bx	lr
 8010988:	b510      	push	{r4, lr}
 801098a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801098e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010992:	4291      	cmp	r1, r2
 8010994:	d1f9      	bne.n	801098a <memcpy+0xe>
 8010996:	bd10      	pop	{r4, pc}

08010998 <_free_r>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4605      	mov	r5, r0
 801099c:	2900      	cmp	r1, #0
 801099e:	d041      	beq.n	8010a24 <_free_r+0x8c>
 80109a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109a4:	1f0c      	subs	r4, r1, #4
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	bfb8      	it	lt
 80109aa:	18e4      	addlt	r4, r4, r3
 80109ac:	f000 f8e0 	bl	8010b70 <__malloc_lock>
 80109b0:	4a1d      	ldr	r2, [pc, #116]	@ (8010a28 <_free_r+0x90>)
 80109b2:	6813      	ldr	r3, [r2, #0]
 80109b4:	b933      	cbnz	r3, 80109c4 <_free_r+0x2c>
 80109b6:	6063      	str	r3, [r4, #4]
 80109b8:	6014      	str	r4, [r2, #0]
 80109ba:	4628      	mov	r0, r5
 80109bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109c0:	f000 b8dc 	b.w	8010b7c <__malloc_unlock>
 80109c4:	42a3      	cmp	r3, r4
 80109c6:	d908      	bls.n	80109da <_free_r+0x42>
 80109c8:	6820      	ldr	r0, [r4, #0]
 80109ca:	1821      	adds	r1, r4, r0
 80109cc:	428b      	cmp	r3, r1
 80109ce:	bf01      	itttt	eq
 80109d0:	6819      	ldreq	r1, [r3, #0]
 80109d2:	685b      	ldreq	r3, [r3, #4]
 80109d4:	1809      	addeq	r1, r1, r0
 80109d6:	6021      	streq	r1, [r4, #0]
 80109d8:	e7ed      	b.n	80109b6 <_free_r+0x1e>
 80109da:	461a      	mov	r2, r3
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	b10b      	cbz	r3, 80109e4 <_free_r+0x4c>
 80109e0:	42a3      	cmp	r3, r4
 80109e2:	d9fa      	bls.n	80109da <_free_r+0x42>
 80109e4:	6811      	ldr	r1, [r2, #0]
 80109e6:	1850      	adds	r0, r2, r1
 80109e8:	42a0      	cmp	r0, r4
 80109ea:	d10b      	bne.n	8010a04 <_free_r+0x6c>
 80109ec:	6820      	ldr	r0, [r4, #0]
 80109ee:	4401      	add	r1, r0
 80109f0:	1850      	adds	r0, r2, r1
 80109f2:	4283      	cmp	r3, r0
 80109f4:	6011      	str	r1, [r2, #0]
 80109f6:	d1e0      	bne.n	80109ba <_free_r+0x22>
 80109f8:	6818      	ldr	r0, [r3, #0]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	6053      	str	r3, [r2, #4]
 80109fe:	4408      	add	r0, r1
 8010a00:	6010      	str	r0, [r2, #0]
 8010a02:	e7da      	b.n	80109ba <_free_r+0x22>
 8010a04:	d902      	bls.n	8010a0c <_free_r+0x74>
 8010a06:	230c      	movs	r3, #12
 8010a08:	602b      	str	r3, [r5, #0]
 8010a0a:	e7d6      	b.n	80109ba <_free_r+0x22>
 8010a0c:	6820      	ldr	r0, [r4, #0]
 8010a0e:	1821      	adds	r1, r4, r0
 8010a10:	428b      	cmp	r3, r1
 8010a12:	bf04      	itt	eq
 8010a14:	6819      	ldreq	r1, [r3, #0]
 8010a16:	685b      	ldreq	r3, [r3, #4]
 8010a18:	6063      	str	r3, [r4, #4]
 8010a1a:	bf04      	itt	eq
 8010a1c:	1809      	addeq	r1, r1, r0
 8010a1e:	6021      	streq	r1, [r4, #0]
 8010a20:	6054      	str	r4, [r2, #4]
 8010a22:	e7ca      	b.n	80109ba <_free_r+0x22>
 8010a24:	bd38      	pop	{r3, r4, r5, pc}
 8010a26:	bf00      	nop
 8010a28:	2000237c 	.word	0x2000237c

08010a2c <sbrk_aligned>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8010a6c <sbrk_aligned+0x40>)
 8010a30:	460c      	mov	r4, r1
 8010a32:	6831      	ldr	r1, [r6, #0]
 8010a34:	4605      	mov	r5, r0
 8010a36:	b911      	cbnz	r1, 8010a3e <sbrk_aligned+0x12>
 8010a38:	f000 fba4 	bl	8011184 <_sbrk_r>
 8010a3c:	6030      	str	r0, [r6, #0]
 8010a3e:	4621      	mov	r1, r4
 8010a40:	4628      	mov	r0, r5
 8010a42:	f000 fb9f 	bl	8011184 <_sbrk_r>
 8010a46:	1c43      	adds	r3, r0, #1
 8010a48:	d103      	bne.n	8010a52 <sbrk_aligned+0x26>
 8010a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8010a4e:	4620      	mov	r0, r4
 8010a50:	bd70      	pop	{r4, r5, r6, pc}
 8010a52:	1cc4      	adds	r4, r0, #3
 8010a54:	f024 0403 	bic.w	r4, r4, #3
 8010a58:	42a0      	cmp	r0, r4
 8010a5a:	d0f8      	beq.n	8010a4e <sbrk_aligned+0x22>
 8010a5c:	1a21      	subs	r1, r4, r0
 8010a5e:	4628      	mov	r0, r5
 8010a60:	f000 fb90 	bl	8011184 <_sbrk_r>
 8010a64:	3001      	adds	r0, #1
 8010a66:	d1f2      	bne.n	8010a4e <sbrk_aligned+0x22>
 8010a68:	e7ef      	b.n	8010a4a <sbrk_aligned+0x1e>
 8010a6a:	bf00      	nop
 8010a6c:	20002378 	.word	0x20002378

08010a70 <_malloc_r>:
 8010a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a74:	1ccd      	adds	r5, r1, #3
 8010a76:	f025 0503 	bic.w	r5, r5, #3
 8010a7a:	3508      	adds	r5, #8
 8010a7c:	2d0c      	cmp	r5, #12
 8010a7e:	bf38      	it	cc
 8010a80:	250c      	movcc	r5, #12
 8010a82:	2d00      	cmp	r5, #0
 8010a84:	4606      	mov	r6, r0
 8010a86:	db01      	blt.n	8010a8c <_malloc_r+0x1c>
 8010a88:	42a9      	cmp	r1, r5
 8010a8a:	d904      	bls.n	8010a96 <_malloc_r+0x26>
 8010a8c:	230c      	movs	r3, #12
 8010a8e:	6033      	str	r3, [r6, #0]
 8010a90:	2000      	movs	r0, #0
 8010a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b6c <_malloc_r+0xfc>
 8010a9a:	f000 f869 	bl	8010b70 <__malloc_lock>
 8010a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8010aa2:	461c      	mov	r4, r3
 8010aa4:	bb44      	cbnz	r4, 8010af8 <_malloc_r+0x88>
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	f7ff ffbf 	bl	8010a2c <sbrk_aligned>
 8010aae:	1c43      	adds	r3, r0, #1
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	d158      	bne.n	8010b66 <_malloc_r+0xf6>
 8010ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8010ab8:	4627      	mov	r7, r4
 8010aba:	2f00      	cmp	r7, #0
 8010abc:	d143      	bne.n	8010b46 <_malloc_r+0xd6>
 8010abe:	2c00      	cmp	r4, #0
 8010ac0:	d04b      	beq.n	8010b5a <_malloc_r+0xea>
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	eb04 0903 	add.w	r9, r4, r3
 8010acc:	f000 fb5a 	bl	8011184 <_sbrk_r>
 8010ad0:	4581      	cmp	r9, r0
 8010ad2:	d142      	bne.n	8010b5a <_malloc_r+0xea>
 8010ad4:	6821      	ldr	r1, [r4, #0]
 8010ad6:	1a6d      	subs	r5, r5, r1
 8010ad8:	4629      	mov	r1, r5
 8010ada:	4630      	mov	r0, r6
 8010adc:	f7ff ffa6 	bl	8010a2c <sbrk_aligned>
 8010ae0:	3001      	adds	r0, #1
 8010ae2:	d03a      	beq.n	8010b5a <_malloc_r+0xea>
 8010ae4:	6823      	ldr	r3, [r4, #0]
 8010ae6:	442b      	add	r3, r5
 8010ae8:	6023      	str	r3, [r4, #0]
 8010aea:	f8d8 3000 	ldr.w	r3, [r8]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	bb62      	cbnz	r2, 8010b4c <_malloc_r+0xdc>
 8010af2:	f8c8 7000 	str.w	r7, [r8]
 8010af6:	e00f      	b.n	8010b18 <_malloc_r+0xa8>
 8010af8:	6822      	ldr	r2, [r4, #0]
 8010afa:	1b52      	subs	r2, r2, r5
 8010afc:	d420      	bmi.n	8010b40 <_malloc_r+0xd0>
 8010afe:	2a0b      	cmp	r2, #11
 8010b00:	d917      	bls.n	8010b32 <_malloc_r+0xc2>
 8010b02:	1961      	adds	r1, r4, r5
 8010b04:	42a3      	cmp	r3, r4
 8010b06:	6025      	str	r5, [r4, #0]
 8010b08:	bf18      	it	ne
 8010b0a:	6059      	strne	r1, [r3, #4]
 8010b0c:	6863      	ldr	r3, [r4, #4]
 8010b0e:	bf08      	it	eq
 8010b10:	f8c8 1000 	streq.w	r1, [r8]
 8010b14:	5162      	str	r2, [r4, r5]
 8010b16:	604b      	str	r3, [r1, #4]
 8010b18:	4630      	mov	r0, r6
 8010b1a:	f000 f82f 	bl	8010b7c <__malloc_unlock>
 8010b1e:	f104 000b 	add.w	r0, r4, #11
 8010b22:	1d23      	adds	r3, r4, #4
 8010b24:	f020 0007 	bic.w	r0, r0, #7
 8010b28:	1ac2      	subs	r2, r0, r3
 8010b2a:	bf1c      	itt	ne
 8010b2c:	1a1b      	subne	r3, r3, r0
 8010b2e:	50a3      	strne	r3, [r4, r2]
 8010b30:	e7af      	b.n	8010a92 <_malloc_r+0x22>
 8010b32:	6862      	ldr	r2, [r4, #4]
 8010b34:	42a3      	cmp	r3, r4
 8010b36:	bf0c      	ite	eq
 8010b38:	f8c8 2000 	streq.w	r2, [r8]
 8010b3c:	605a      	strne	r2, [r3, #4]
 8010b3e:	e7eb      	b.n	8010b18 <_malloc_r+0xa8>
 8010b40:	4623      	mov	r3, r4
 8010b42:	6864      	ldr	r4, [r4, #4]
 8010b44:	e7ae      	b.n	8010aa4 <_malloc_r+0x34>
 8010b46:	463c      	mov	r4, r7
 8010b48:	687f      	ldr	r7, [r7, #4]
 8010b4a:	e7b6      	b.n	8010aba <_malloc_r+0x4a>
 8010b4c:	461a      	mov	r2, r3
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	42a3      	cmp	r3, r4
 8010b52:	d1fb      	bne.n	8010b4c <_malloc_r+0xdc>
 8010b54:	2300      	movs	r3, #0
 8010b56:	6053      	str	r3, [r2, #4]
 8010b58:	e7de      	b.n	8010b18 <_malloc_r+0xa8>
 8010b5a:	230c      	movs	r3, #12
 8010b5c:	6033      	str	r3, [r6, #0]
 8010b5e:	4630      	mov	r0, r6
 8010b60:	f000 f80c 	bl	8010b7c <__malloc_unlock>
 8010b64:	e794      	b.n	8010a90 <_malloc_r+0x20>
 8010b66:	6005      	str	r5, [r0, #0]
 8010b68:	e7d6      	b.n	8010b18 <_malloc_r+0xa8>
 8010b6a:	bf00      	nop
 8010b6c:	2000237c 	.word	0x2000237c

08010b70 <__malloc_lock>:
 8010b70:	4801      	ldr	r0, [pc, #4]	@ (8010b78 <__malloc_lock+0x8>)
 8010b72:	f7ff bf01 	b.w	8010978 <__retarget_lock_acquire_recursive>
 8010b76:	bf00      	nop
 8010b78:	20002374 	.word	0x20002374

08010b7c <__malloc_unlock>:
 8010b7c:	4801      	ldr	r0, [pc, #4]	@ (8010b84 <__malloc_unlock+0x8>)
 8010b7e:	f7ff befc 	b.w	801097a <__retarget_lock_release_recursive>
 8010b82:	bf00      	nop
 8010b84:	20002374 	.word	0x20002374

08010b88 <__ssputs_r>:
 8010b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b8c:	688e      	ldr	r6, [r1, #8]
 8010b8e:	461f      	mov	r7, r3
 8010b90:	42be      	cmp	r6, r7
 8010b92:	680b      	ldr	r3, [r1, #0]
 8010b94:	4682      	mov	sl, r0
 8010b96:	460c      	mov	r4, r1
 8010b98:	4690      	mov	r8, r2
 8010b9a:	d82d      	bhi.n	8010bf8 <__ssputs_r+0x70>
 8010b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ba0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ba4:	d026      	beq.n	8010bf4 <__ssputs_r+0x6c>
 8010ba6:	6965      	ldr	r5, [r4, #20]
 8010ba8:	6909      	ldr	r1, [r1, #16]
 8010baa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010bae:	eba3 0901 	sub.w	r9, r3, r1
 8010bb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010bb6:	1c7b      	adds	r3, r7, #1
 8010bb8:	444b      	add	r3, r9
 8010bba:	106d      	asrs	r5, r5, #1
 8010bbc:	429d      	cmp	r5, r3
 8010bbe:	bf38      	it	cc
 8010bc0:	461d      	movcc	r5, r3
 8010bc2:	0553      	lsls	r3, r2, #21
 8010bc4:	d527      	bpl.n	8010c16 <__ssputs_r+0x8e>
 8010bc6:	4629      	mov	r1, r5
 8010bc8:	f7ff ff52 	bl	8010a70 <_malloc_r>
 8010bcc:	4606      	mov	r6, r0
 8010bce:	b360      	cbz	r0, 8010c2a <__ssputs_r+0xa2>
 8010bd0:	6921      	ldr	r1, [r4, #16]
 8010bd2:	464a      	mov	r2, r9
 8010bd4:	f7ff fed2 	bl	801097c <memcpy>
 8010bd8:	89a3      	ldrh	r3, [r4, #12]
 8010bda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	6126      	str	r6, [r4, #16]
 8010be6:	6165      	str	r5, [r4, #20]
 8010be8:	444e      	add	r6, r9
 8010bea:	eba5 0509 	sub.w	r5, r5, r9
 8010bee:	6026      	str	r6, [r4, #0]
 8010bf0:	60a5      	str	r5, [r4, #8]
 8010bf2:	463e      	mov	r6, r7
 8010bf4:	42be      	cmp	r6, r7
 8010bf6:	d900      	bls.n	8010bfa <__ssputs_r+0x72>
 8010bf8:	463e      	mov	r6, r7
 8010bfa:	6820      	ldr	r0, [r4, #0]
 8010bfc:	4632      	mov	r2, r6
 8010bfe:	4641      	mov	r1, r8
 8010c00:	f000 faa6 	bl	8011150 <memmove>
 8010c04:	68a3      	ldr	r3, [r4, #8]
 8010c06:	1b9b      	subs	r3, r3, r6
 8010c08:	60a3      	str	r3, [r4, #8]
 8010c0a:	6823      	ldr	r3, [r4, #0]
 8010c0c:	4433      	add	r3, r6
 8010c0e:	6023      	str	r3, [r4, #0]
 8010c10:	2000      	movs	r0, #0
 8010c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c16:	462a      	mov	r2, r5
 8010c18:	f000 fac4 	bl	80111a4 <_realloc_r>
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	d1e0      	bne.n	8010be4 <__ssputs_r+0x5c>
 8010c22:	6921      	ldr	r1, [r4, #16]
 8010c24:	4650      	mov	r0, sl
 8010c26:	f7ff feb7 	bl	8010998 <_free_r>
 8010c2a:	230c      	movs	r3, #12
 8010c2c:	f8ca 3000 	str.w	r3, [sl]
 8010c30:	89a3      	ldrh	r3, [r4, #12]
 8010c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c36:	81a3      	strh	r3, [r4, #12]
 8010c38:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3c:	e7e9      	b.n	8010c12 <__ssputs_r+0x8a>
	...

08010c40 <_svfiprintf_r>:
 8010c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c44:	4698      	mov	r8, r3
 8010c46:	898b      	ldrh	r3, [r1, #12]
 8010c48:	061b      	lsls	r3, r3, #24
 8010c4a:	b09d      	sub	sp, #116	@ 0x74
 8010c4c:	4607      	mov	r7, r0
 8010c4e:	460d      	mov	r5, r1
 8010c50:	4614      	mov	r4, r2
 8010c52:	d510      	bpl.n	8010c76 <_svfiprintf_r+0x36>
 8010c54:	690b      	ldr	r3, [r1, #16]
 8010c56:	b973      	cbnz	r3, 8010c76 <_svfiprintf_r+0x36>
 8010c58:	2140      	movs	r1, #64	@ 0x40
 8010c5a:	f7ff ff09 	bl	8010a70 <_malloc_r>
 8010c5e:	6028      	str	r0, [r5, #0]
 8010c60:	6128      	str	r0, [r5, #16]
 8010c62:	b930      	cbnz	r0, 8010c72 <_svfiprintf_r+0x32>
 8010c64:	230c      	movs	r3, #12
 8010c66:	603b      	str	r3, [r7, #0]
 8010c68:	f04f 30ff 	mov.w	r0, #4294967295
 8010c6c:	b01d      	add	sp, #116	@ 0x74
 8010c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c72:	2340      	movs	r3, #64	@ 0x40
 8010c74:	616b      	str	r3, [r5, #20]
 8010c76:	2300      	movs	r3, #0
 8010c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c7a:	2320      	movs	r3, #32
 8010c7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c84:	2330      	movs	r3, #48	@ 0x30
 8010c86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e24 <_svfiprintf_r+0x1e4>
 8010c8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c8e:	f04f 0901 	mov.w	r9, #1
 8010c92:	4623      	mov	r3, r4
 8010c94:	469a      	mov	sl, r3
 8010c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c9a:	b10a      	cbz	r2, 8010ca0 <_svfiprintf_r+0x60>
 8010c9c:	2a25      	cmp	r2, #37	@ 0x25
 8010c9e:	d1f9      	bne.n	8010c94 <_svfiprintf_r+0x54>
 8010ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8010ca4:	d00b      	beq.n	8010cbe <_svfiprintf_r+0x7e>
 8010ca6:	465b      	mov	r3, fp
 8010ca8:	4622      	mov	r2, r4
 8010caa:	4629      	mov	r1, r5
 8010cac:	4638      	mov	r0, r7
 8010cae:	f7ff ff6b 	bl	8010b88 <__ssputs_r>
 8010cb2:	3001      	adds	r0, #1
 8010cb4:	f000 80a7 	beq.w	8010e06 <_svfiprintf_r+0x1c6>
 8010cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cba:	445a      	add	r2, fp
 8010cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f000 809f 	beq.w	8010e06 <_svfiprintf_r+0x1c6>
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f04f 32ff 	mov.w	r2, #4294967295
 8010cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cd2:	f10a 0a01 	add.w	sl, sl, #1
 8010cd6:	9304      	str	r3, [sp, #16]
 8010cd8:	9307      	str	r3, [sp, #28]
 8010cda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cde:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ce0:	4654      	mov	r4, sl
 8010ce2:	2205      	movs	r2, #5
 8010ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ce8:	484e      	ldr	r0, [pc, #312]	@ (8010e24 <_svfiprintf_r+0x1e4>)
 8010cea:	f7ef fa79 	bl	80001e0 <memchr>
 8010cee:	9a04      	ldr	r2, [sp, #16]
 8010cf0:	b9d8      	cbnz	r0, 8010d2a <_svfiprintf_r+0xea>
 8010cf2:	06d0      	lsls	r0, r2, #27
 8010cf4:	bf44      	itt	mi
 8010cf6:	2320      	movmi	r3, #32
 8010cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cfc:	0711      	lsls	r1, r2, #28
 8010cfe:	bf44      	itt	mi
 8010d00:	232b      	movmi	r3, #43	@ 0x2b
 8010d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d06:	f89a 3000 	ldrb.w	r3, [sl]
 8010d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d0c:	d015      	beq.n	8010d3a <_svfiprintf_r+0xfa>
 8010d0e:	9a07      	ldr	r2, [sp, #28]
 8010d10:	4654      	mov	r4, sl
 8010d12:	2000      	movs	r0, #0
 8010d14:	f04f 0c0a 	mov.w	ip, #10
 8010d18:	4621      	mov	r1, r4
 8010d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d1e:	3b30      	subs	r3, #48	@ 0x30
 8010d20:	2b09      	cmp	r3, #9
 8010d22:	d94b      	bls.n	8010dbc <_svfiprintf_r+0x17c>
 8010d24:	b1b0      	cbz	r0, 8010d54 <_svfiprintf_r+0x114>
 8010d26:	9207      	str	r2, [sp, #28]
 8010d28:	e014      	b.n	8010d54 <_svfiprintf_r+0x114>
 8010d2a:	eba0 0308 	sub.w	r3, r0, r8
 8010d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8010d32:	4313      	orrs	r3, r2
 8010d34:	9304      	str	r3, [sp, #16]
 8010d36:	46a2      	mov	sl, r4
 8010d38:	e7d2      	b.n	8010ce0 <_svfiprintf_r+0xa0>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	1d19      	adds	r1, r3, #4
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	9103      	str	r1, [sp, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bfbb      	ittet	lt
 8010d46:	425b      	neglt	r3, r3
 8010d48:	f042 0202 	orrlt.w	r2, r2, #2
 8010d4c:	9307      	strge	r3, [sp, #28]
 8010d4e:	9307      	strlt	r3, [sp, #28]
 8010d50:	bfb8      	it	lt
 8010d52:	9204      	strlt	r2, [sp, #16]
 8010d54:	7823      	ldrb	r3, [r4, #0]
 8010d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d58:	d10a      	bne.n	8010d70 <_svfiprintf_r+0x130>
 8010d5a:	7863      	ldrb	r3, [r4, #1]
 8010d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d5e:	d132      	bne.n	8010dc6 <_svfiprintf_r+0x186>
 8010d60:	9b03      	ldr	r3, [sp, #12]
 8010d62:	1d1a      	adds	r2, r3, #4
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	9203      	str	r2, [sp, #12]
 8010d68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d6c:	3402      	adds	r4, #2
 8010d6e:	9305      	str	r3, [sp, #20]
 8010d70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010e34 <_svfiprintf_r+0x1f4>
 8010d74:	7821      	ldrb	r1, [r4, #0]
 8010d76:	2203      	movs	r2, #3
 8010d78:	4650      	mov	r0, sl
 8010d7a:	f7ef fa31 	bl	80001e0 <memchr>
 8010d7e:	b138      	cbz	r0, 8010d90 <_svfiprintf_r+0x150>
 8010d80:	9b04      	ldr	r3, [sp, #16]
 8010d82:	eba0 000a 	sub.w	r0, r0, sl
 8010d86:	2240      	movs	r2, #64	@ 0x40
 8010d88:	4082      	lsls	r2, r0
 8010d8a:	4313      	orrs	r3, r2
 8010d8c:	3401      	adds	r4, #1
 8010d8e:	9304      	str	r3, [sp, #16]
 8010d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d94:	4824      	ldr	r0, [pc, #144]	@ (8010e28 <_svfiprintf_r+0x1e8>)
 8010d96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d9a:	2206      	movs	r2, #6
 8010d9c:	f7ef fa20 	bl	80001e0 <memchr>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d036      	beq.n	8010e12 <_svfiprintf_r+0x1d2>
 8010da4:	4b21      	ldr	r3, [pc, #132]	@ (8010e2c <_svfiprintf_r+0x1ec>)
 8010da6:	bb1b      	cbnz	r3, 8010df0 <_svfiprintf_r+0x1b0>
 8010da8:	9b03      	ldr	r3, [sp, #12]
 8010daa:	3307      	adds	r3, #7
 8010dac:	f023 0307 	bic.w	r3, r3, #7
 8010db0:	3308      	adds	r3, #8
 8010db2:	9303      	str	r3, [sp, #12]
 8010db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010db6:	4433      	add	r3, r6
 8010db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dba:	e76a      	b.n	8010c92 <_svfiprintf_r+0x52>
 8010dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	2001      	movs	r0, #1
 8010dc4:	e7a8      	b.n	8010d18 <_svfiprintf_r+0xd8>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	3401      	adds	r4, #1
 8010dca:	9305      	str	r3, [sp, #20]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	f04f 0c0a 	mov.w	ip, #10
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dd8:	3a30      	subs	r2, #48	@ 0x30
 8010dda:	2a09      	cmp	r2, #9
 8010ddc:	d903      	bls.n	8010de6 <_svfiprintf_r+0x1a6>
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d0c6      	beq.n	8010d70 <_svfiprintf_r+0x130>
 8010de2:	9105      	str	r1, [sp, #20]
 8010de4:	e7c4      	b.n	8010d70 <_svfiprintf_r+0x130>
 8010de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dea:	4604      	mov	r4, r0
 8010dec:	2301      	movs	r3, #1
 8010dee:	e7f0      	b.n	8010dd2 <_svfiprintf_r+0x192>
 8010df0:	ab03      	add	r3, sp, #12
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	462a      	mov	r2, r5
 8010df6:	4b0e      	ldr	r3, [pc, #56]	@ (8010e30 <_svfiprintf_r+0x1f0>)
 8010df8:	a904      	add	r1, sp, #16
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	f3af 8000 	nop.w
 8010e00:	1c42      	adds	r2, r0, #1
 8010e02:	4606      	mov	r6, r0
 8010e04:	d1d6      	bne.n	8010db4 <_svfiprintf_r+0x174>
 8010e06:	89ab      	ldrh	r3, [r5, #12]
 8010e08:	065b      	lsls	r3, r3, #25
 8010e0a:	f53f af2d 	bmi.w	8010c68 <_svfiprintf_r+0x28>
 8010e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e10:	e72c      	b.n	8010c6c <_svfiprintf_r+0x2c>
 8010e12:	ab03      	add	r3, sp, #12
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	462a      	mov	r2, r5
 8010e18:	4b05      	ldr	r3, [pc, #20]	@ (8010e30 <_svfiprintf_r+0x1f0>)
 8010e1a:	a904      	add	r1, sp, #16
 8010e1c:	4638      	mov	r0, r7
 8010e1e:	f000 f879 	bl	8010f14 <_printf_i>
 8010e22:	e7ed      	b.n	8010e00 <_svfiprintf_r+0x1c0>
 8010e24:	08012430 	.word	0x08012430
 8010e28:	0801243a 	.word	0x0801243a
 8010e2c:	00000000 	.word	0x00000000
 8010e30:	08010b89 	.word	0x08010b89
 8010e34:	08012436 	.word	0x08012436

08010e38 <_printf_common>:
 8010e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	4698      	mov	r8, r3
 8010e40:	688a      	ldr	r2, [r1, #8]
 8010e42:	690b      	ldr	r3, [r1, #16]
 8010e44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	bfb8      	it	lt
 8010e4c:	4613      	movlt	r3, r2
 8010e4e:	6033      	str	r3, [r6, #0]
 8010e50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e54:	4607      	mov	r7, r0
 8010e56:	460c      	mov	r4, r1
 8010e58:	b10a      	cbz	r2, 8010e5e <_printf_common+0x26>
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	6033      	str	r3, [r6, #0]
 8010e5e:	6823      	ldr	r3, [r4, #0]
 8010e60:	0699      	lsls	r1, r3, #26
 8010e62:	bf42      	ittt	mi
 8010e64:	6833      	ldrmi	r3, [r6, #0]
 8010e66:	3302      	addmi	r3, #2
 8010e68:	6033      	strmi	r3, [r6, #0]
 8010e6a:	6825      	ldr	r5, [r4, #0]
 8010e6c:	f015 0506 	ands.w	r5, r5, #6
 8010e70:	d106      	bne.n	8010e80 <_printf_common+0x48>
 8010e72:	f104 0a19 	add.w	sl, r4, #25
 8010e76:	68e3      	ldr	r3, [r4, #12]
 8010e78:	6832      	ldr	r2, [r6, #0]
 8010e7a:	1a9b      	subs	r3, r3, r2
 8010e7c:	42ab      	cmp	r3, r5
 8010e7e:	dc26      	bgt.n	8010ece <_printf_common+0x96>
 8010e80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e84:	6822      	ldr	r2, [r4, #0]
 8010e86:	3b00      	subs	r3, #0
 8010e88:	bf18      	it	ne
 8010e8a:	2301      	movne	r3, #1
 8010e8c:	0692      	lsls	r2, r2, #26
 8010e8e:	d42b      	bmi.n	8010ee8 <_printf_common+0xb0>
 8010e90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e94:	4641      	mov	r1, r8
 8010e96:	4638      	mov	r0, r7
 8010e98:	47c8      	blx	r9
 8010e9a:	3001      	adds	r0, #1
 8010e9c:	d01e      	beq.n	8010edc <_printf_common+0xa4>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	6922      	ldr	r2, [r4, #16]
 8010ea2:	f003 0306 	and.w	r3, r3, #6
 8010ea6:	2b04      	cmp	r3, #4
 8010ea8:	bf02      	ittt	eq
 8010eaa:	68e5      	ldreq	r5, [r4, #12]
 8010eac:	6833      	ldreq	r3, [r6, #0]
 8010eae:	1aed      	subeq	r5, r5, r3
 8010eb0:	68a3      	ldr	r3, [r4, #8]
 8010eb2:	bf0c      	ite	eq
 8010eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010eb8:	2500      	movne	r5, #0
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	bfc4      	itt	gt
 8010ebe:	1a9b      	subgt	r3, r3, r2
 8010ec0:	18ed      	addgt	r5, r5, r3
 8010ec2:	2600      	movs	r6, #0
 8010ec4:	341a      	adds	r4, #26
 8010ec6:	42b5      	cmp	r5, r6
 8010ec8:	d11a      	bne.n	8010f00 <_printf_common+0xc8>
 8010eca:	2000      	movs	r0, #0
 8010ecc:	e008      	b.n	8010ee0 <_printf_common+0xa8>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	4641      	mov	r1, r8
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	47c8      	blx	r9
 8010ed8:	3001      	adds	r0, #1
 8010eda:	d103      	bne.n	8010ee4 <_printf_common+0xac>
 8010edc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee4:	3501      	adds	r5, #1
 8010ee6:	e7c6      	b.n	8010e76 <_printf_common+0x3e>
 8010ee8:	18e1      	adds	r1, r4, r3
 8010eea:	1c5a      	adds	r2, r3, #1
 8010eec:	2030      	movs	r0, #48	@ 0x30
 8010eee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010ef2:	4422      	add	r2, r4
 8010ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ef8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010efc:	3302      	adds	r3, #2
 8010efe:	e7c7      	b.n	8010e90 <_printf_common+0x58>
 8010f00:	2301      	movs	r3, #1
 8010f02:	4622      	mov	r2, r4
 8010f04:	4641      	mov	r1, r8
 8010f06:	4638      	mov	r0, r7
 8010f08:	47c8      	blx	r9
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	d0e6      	beq.n	8010edc <_printf_common+0xa4>
 8010f0e:	3601      	adds	r6, #1
 8010f10:	e7d9      	b.n	8010ec6 <_printf_common+0x8e>
	...

08010f14 <_printf_i>:
 8010f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f18:	7e0f      	ldrb	r7, [r1, #24]
 8010f1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f1c:	2f78      	cmp	r7, #120	@ 0x78
 8010f1e:	4691      	mov	r9, r2
 8010f20:	4680      	mov	r8, r0
 8010f22:	460c      	mov	r4, r1
 8010f24:	469a      	mov	sl, r3
 8010f26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f2a:	d807      	bhi.n	8010f3c <_printf_i+0x28>
 8010f2c:	2f62      	cmp	r7, #98	@ 0x62
 8010f2e:	d80a      	bhi.n	8010f46 <_printf_i+0x32>
 8010f30:	2f00      	cmp	r7, #0
 8010f32:	f000 80d1 	beq.w	80110d8 <_printf_i+0x1c4>
 8010f36:	2f58      	cmp	r7, #88	@ 0x58
 8010f38:	f000 80b8 	beq.w	80110ac <_printf_i+0x198>
 8010f3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010f44:	e03a      	b.n	8010fbc <_printf_i+0xa8>
 8010f46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010f4a:	2b15      	cmp	r3, #21
 8010f4c:	d8f6      	bhi.n	8010f3c <_printf_i+0x28>
 8010f4e:	a101      	add	r1, pc, #4	@ (adr r1, 8010f54 <_printf_i+0x40>)
 8010f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f54:	08010fad 	.word	0x08010fad
 8010f58:	08010fc1 	.word	0x08010fc1
 8010f5c:	08010f3d 	.word	0x08010f3d
 8010f60:	08010f3d 	.word	0x08010f3d
 8010f64:	08010f3d 	.word	0x08010f3d
 8010f68:	08010f3d 	.word	0x08010f3d
 8010f6c:	08010fc1 	.word	0x08010fc1
 8010f70:	08010f3d 	.word	0x08010f3d
 8010f74:	08010f3d 	.word	0x08010f3d
 8010f78:	08010f3d 	.word	0x08010f3d
 8010f7c:	08010f3d 	.word	0x08010f3d
 8010f80:	080110bf 	.word	0x080110bf
 8010f84:	08010feb 	.word	0x08010feb
 8010f88:	08011079 	.word	0x08011079
 8010f8c:	08010f3d 	.word	0x08010f3d
 8010f90:	08010f3d 	.word	0x08010f3d
 8010f94:	080110e1 	.word	0x080110e1
 8010f98:	08010f3d 	.word	0x08010f3d
 8010f9c:	08010feb 	.word	0x08010feb
 8010fa0:	08010f3d 	.word	0x08010f3d
 8010fa4:	08010f3d 	.word	0x08010f3d
 8010fa8:	08011081 	.word	0x08011081
 8010fac:	6833      	ldr	r3, [r6, #0]
 8010fae:	1d1a      	adds	r2, r3, #4
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6032      	str	r2, [r6, #0]
 8010fb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e09c      	b.n	80110fa <_printf_i+0x1e6>
 8010fc0:	6833      	ldr	r3, [r6, #0]
 8010fc2:	6820      	ldr	r0, [r4, #0]
 8010fc4:	1d19      	adds	r1, r3, #4
 8010fc6:	6031      	str	r1, [r6, #0]
 8010fc8:	0606      	lsls	r6, r0, #24
 8010fca:	d501      	bpl.n	8010fd0 <_printf_i+0xbc>
 8010fcc:	681d      	ldr	r5, [r3, #0]
 8010fce:	e003      	b.n	8010fd8 <_printf_i+0xc4>
 8010fd0:	0645      	lsls	r5, r0, #25
 8010fd2:	d5fb      	bpl.n	8010fcc <_printf_i+0xb8>
 8010fd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010fd8:	2d00      	cmp	r5, #0
 8010fda:	da03      	bge.n	8010fe4 <_printf_i+0xd0>
 8010fdc:	232d      	movs	r3, #45	@ 0x2d
 8010fde:	426d      	negs	r5, r5
 8010fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010fe4:	4858      	ldr	r0, [pc, #352]	@ (8011148 <_printf_i+0x234>)
 8010fe6:	230a      	movs	r3, #10
 8010fe8:	e011      	b.n	801100e <_printf_i+0xfa>
 8010fea:	6821      	ldr	r1, [r4, #0]
 8010fec:	6833      	ldr	r3, [r6, #0]
 8010fee:	0608      	lsls	r0, r1, #24
 8010ff0:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ff4:	d402      	bmi.n	8010ffc <_printf_i+0xe8>
 8010ff6:	0649      	lsls	r1, r1, #25
 8010ff8:	bf48      	it	mi
 8010ffa:	b2ad      	uxthmi	r5, r5
 8010ffc:	2f6f      	cmp	r7, #111	@ 0x6f
 8010ffe:	4852      	ldr	r0, [pc, #328]	@ (8011148 <_printf_i+0x234>)
 8011000:	6033      	str	r3, [r6, #0]
 8011002:	bf14      	ite	ne
 8011004:	230a      	movne	r3, #10
 8011006:	2308      	moveq	r3, #8
 8011008:	2100      	movs	r1, #0
 801100a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801100e:	6866      	ldr	r6, [r4, #4]
 8011010:	60a6      	str	r6, [r4, #8]
 8011012:	2e00      	cmp	r6, #0
 8011014:	db05      	blt.n	8011022 <_printf_i+0x10e>
 8011016:	6821      	ldr	r1, [r4, #0]
 8011018:	432e      	orrs	r6, r5
 801101a:	f021 0104 	bic.w	r1, r1, #4
 801101e:	6021      	str	r1, [r4, #0]
 8011020:	d04b      	beq.n	80110ba <_printf_i+0x1a6>
 8011022:	4616      	mov	r6, r2
 8011024:	fbb5 f1f3 	udiv	r1, r5, r3
 8011028:	fb03 5711 	mls	r7, r3, r1, r5
 801102c:	5dc7      	ldrb	r7, [r0, r7]
 801102e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011032:	462f      	mov	r7, r5
 8011034:	42bb      	cmp	r3, r7
 8011036:	460d      	mov	r5, r1
 8011038:	d9f4      	bls.n	8011024 <_printf_i+0x110>
 801103a:	2b08      	cmp	r3, #8
 801103c:	d10b      	bne.n	8011056 <_printf_i+0x142>
 801103e:	6823      	ldr	r3, [r4, #0]
 8011040:	07df      	lsls	r7, r3, #31
 8011042:	d508      	bpl.n	8011056 <_printf_i+0x142>
 8011044:	6923      	ldr	r3, [r4, #16]
 8011046:	6861      	ldr	r1, [r4, #4]
 8011048:	4299      	cmp	r1, r3
 801104a:	bfde      	ittt	le
 801104c:	2330      	movle	r3, #48	@ 0x30
 801104e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011052:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011056:	1b92      	subs	r2, r2, r6
 8011058:	6122      	str	r2, [r4, #16]
 801105a:	f8cd a000 	str.w	sl, [sp]
 801105e:	464b      	mov	r3, r9
 8011060:	aa03      	add	r2, sp, #12
 8011062:	4621      	mov	r1, r4
 8011064:	4640      	mov	r0, r8
 8011066:	f7ff fee7 	bl	8010e38 <_printf_common>
 801106a:	3001      	adds	r0, #1
 801106c:	d14a      	bne.n	8011104 <_printf_i+0x1f0>
 801106e:	f04f 30ff 	mov.w	r0, #4294967295
 8011072:	b004      	add	sp, #16
 8011074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011078:	6823      	ldr	r3, [r4, #0]
 801107a:	f043 0320 	orr.w	r3, r3, #32
 801107e:	6023      	str	r3, [r4, #0]
 8011080:	4832      	ldr	r0, [pc, #200]	@ (801114c <_printf_i+0x238>)
 8011082:	2778      	movs	r7, #120	@ 0x78
 8011084:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	6831      	ldr	r1, [r6, #0]
 801108c:	061f      	lsls	r7, r3, #24
 801108e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011092:	d402      	bmi.n	801109a <_printf_i+0x186>
 8011094:	065f      	lsls	r7, r3, #25
 8011096:	bf48      	it	mi
 8011098:	b2ad      	uxthmi	r5, r5
 801109a:	6031      	str	r1, [r6, #0]
 801109c:	07d9      	lsls	r1, r3, #31
 801109e:	bf44      	itt	mi
 80110a0:	f043 0320 	orrmi.w	r3, r3, #32
 80110a4:	6023      	strmi	r3, [r4, #0]
 80110a6:	b11d      	cbz	r5, 80110b0 <_printf_i+0x19c>
 80110a8:	2310      	movs	r3, #16
 80110aa:	e7ad      	b.n	8011008 <_printf_i+0xf4>
 80110ac:	4826      	ldr	r0, [pc, #152]	@ (8011148 <_printf_i+0x234>)
 80110ae:	e7e9      	b.n	8011084 <_printf_i+0x170>
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	f023 0320 	bic.w	r3, r3, #32
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	e7f6      	b.n	80110a8 <_printf_i+0x194>
 80110ba:	4616      	mov	r6, r2
 80110bc:	e7bd      	b.n	801103a <_printf_i+0x126>
 80110be:	6833      	ldr	r3, [r6, #0]
 80110c0:	6825      	ldr	r5, [r4, #0]
 80110c2:	6961      	ldr	r1, [r4, #20]
 80110c4:	1d18      	adds	r0, r3, #4
 80110c6:	6030      	str	r0, [r6, #0]
 80110c8:	062e      	lsls	r6, r5, #24
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	d501      	bpl.n	80110d2 <_printf_i+0x1be>
 80110ce:	6019      	str	r1, [r3, #0]
 80110d0:	e002      	b.n	80110d8 <_printf_i+0x1c4>
 80110d2:	0668      	lsls	r0, r5, #25
 80110d4:	d5fb      	bpl.n	80110ce <_printf_i+0x1ba>
 80110d6:	8019      	strh	r1, [r3, #0]
 80110d8:	2300      	movs	r3, #0
 80110da:	6123      	str	r3, [r4, #16]
 80110dc:	4616      	mov	r6, r2
 80110de:	e7bc      	b.n	801105a <_printf_i+0x146>
 80110e0:	6833      	ldr	r3, [r6, #0]
 80110e2:	1d1a      	adds	r2, r3, #4
 80110e4:	6032      	str	r2, [r6, #0]
 80110e6:	681e      	ldr	r6, [r3, #0]
 80110e8:	6862      	ldr	r2, [r4, #4]
 80110ea:	2100      	movs	r1, #0
 80110ec:	4630      	mov	r0, r6
 80110ee:	f7ef f877 	bl	80001e0 <memchr>
 80110f2:	b108      	cbz	r0, 80110f8 <_printf_i+0x1e4>
 80110f4:	1b80      	subs	r0, r0, r6
 80110f6:	6060      	str	r0, [r4, #4]
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	6123      	str	r3, [r4, #16]
 80110fc:	2300      	movs	r3, #0
 80110fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011102:	e7aa      	b.n	801105a <_printf_i+0x146>
 8011104:	6923      	ldr	r3, [r4, #16]
 8011106:	4632      	mov	r2, r6
 8011108:	4649      	mov	r1, r9
 801110a:	4640      	mov	r0, r8
 801110c:	47d0      	blx	sl
 801110e:	3001      	adds	r0, #1
 8011110:	d0ad      	beq.n	801106e <_printf_i+0x15a>
 8011112:	6823      	ldr	r3, [r4, #0]
 8011114:	079b      	lsls	r3, r3, #30
 8011116:	d413      	bmi.n	8011140 <_printf_i+0x22c>
 8011118:	68e0      	ldr	r0, [r4, #12]
 801111a:	9b03      	ldr	r3, [sp, #12]
 801111c:	4298      	cmp	r0, r3
 801111e:	bfb8      	it	lt
 8011120:	4618      	movlt	r0, r3
 8011122:	e7a6      	b.n	8011072 <_printf_i+0x15e>
 8011124:	2301      	movs	r3, #1
 8011126:	4632      	mov	r2, r6
 8011128:	4649      	mov	r1, r9
 801112a:	4640      	mov	r0, r8
 801112c:	47d0      	blx	sl
 801112e:	3001      	adds	r0, #1
 8011130:	d09d      	beq.n	801106e <_printf_i+0x15a>
 8011132:	3501      	adds	r5, #1
 8011134:	68e3      	ldr	r3, [r4, #12]
 8011136:	9903      	ldr	r1, [sp, #12]
 8011138:	1a5b      	subs	r3, r3, r1
 801113a:	42ab      	cmp	r3, r5
 801113c:	dcf2      	bgt.n	8011124 <_printf_i+0x210>
 801113e:	e7eb      	b.n	8011118 <_printf_i+0x204>
 8011140:	2500      	movs	r5, #0
 8011142:	f104 0619 	add.w	r6, r4, #25
 8011146:	e7f5      	b.n	8011134 <_printf_i+0x220>
 8011148:	08012441 	.word	0x08012441
 801114c:	08012452 	.word	0x08012452

08011150 <memmove>:
 8011150:	4288      	cmp	r0, r1
 8011152:	b510      	push	{r4, lr}
 8011154:	eb01 0402 	add.w	r4, r1, r2
 8011158:	d902      	bls.n	8011160 <memmove+0x10>
 801115a:	4284      	cmp	r4, r0
 801115c:	4623      	mov	r3, r4
 801115e:	d807      	bhi.n	8011170 <memmove+0x20>
 8011160:	1e43      	subs	r3, r0, #1
 8011162:	42a1      	cmp	r1, r4
 8011164:	d008      	beq.n	8011178 <memmove+0x28>
 8011166:	f811 2b01 	ldrb.w	r2, [r1], #1
 801116a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801116e:	e7f8      	b.n	8011162 <memmove+0x12>
 8011170:	4402      	add	r2, r0
 8011172:	4601      	mov	r1, r0
 8011174:	428a      	cmp	r2, r1
 8011176:	d100      	bne.n	801117a <memmove+0x2a>
 8011178:	bd10      	pop	{r4, pc}
 801117a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801117e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011182:	e7f7      	b.n	8011174 <memmove+0x24>

08011184 <_sbrk_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d06      	ldr	r5, [pc, #24]	@ (80111a0 <_sbrk_r+0x1c>)
 8011188:	2300      	movs	r3, #0
 801118a:	4604      	mov	r4, r0
 801118c:	4608      	mov	r0, r1
 801118e:	602b      	str	r3, [r5, #0]
 8011190:	f7f2 fc4e 	bl	8003a30 <_sbrk>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_sbrk_r+0x1a>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_sbrk_r+0x1a>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	20002370 	.word	0x20002370

080111a4 <_realloc_r>:
 80111a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a8:	4607      	mov	r7, r0
 80111aa:	4614      	mov	r4, r2
 80111ac:	460d      	mov	r5, r1
 80111ae:	b921      	cbnz	r1, 80111ba <_realloc_r+0x16>
 80111b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b4:	4611      	mov	r1, r2
 80111b6:	f7ff bc5b 	b.w	8010a70 <_malloc_r>
 80111ba:	b92a      	cbnz	r2, 80111c8 <_realloc_r+0x24>
 80111bc:	f7ff fbec 	bl	8010998 <_free_r>
 80111c0:	4625      	mov	r5, r4
 80111c2:	4628      	mov	r0, r5
 80111c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c8:	f000 f81a 	bl	8011200 <_malloc_usable_size_r>
 80111cc:	4284      	cmp	r4, r0
 80111ce:	4606      	mov	r6, r0
 80111d0:	d802      	bhi.n	80111d8 <_realloc_r+0x34>
 80111d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111d6:	d8f4      	bhi.n	80111c2 <_realloc_r+0x1e>
 80111d8:	4621      	mov	r1, r4
 80111da:	4638      	mov	r0, r7
 80111dc:	f7ff fc48 	bl	8010a70 <_malloc_r>
 80111e0:	4680      	mov	r8, r0
 80111e2:	b908      	cbnz	r0, 80111e8 <_realloc_r+0x44>
 80111e4:	4645      	mov	r5, r8
 80111e6:	e7ec      	b.n	80111c2 <_realloc_r+0x1e>
 80111e8:	42b4      	cmp	r4, r6
 80111ea:	4622      	mov	r2, r4
 80111ec:	4629      	mov	r1, r5
 80111ee:	bf28      	it	cs
 80111f0:	4632      	movcs	r2, r6
 80111f2:	f7ff fbc3 	bl	801097c <memcpy>
 80111f6:	4629      	mov	r1, r5
 80111f8:	4638      	mov	r0, r7
 80111fa:	f7ff fbcd 	bl	8010998 <_free_r>
 80111fe:	e7f1      	b.n	80111e4 <_realloc_r+0x40>

08011200 <_malloc_usable_size_r>:
 8011200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011204:	1f18      	subs	r0, r3, #4
 8011206:	2b00      	cmp	r3, #0
 8011208:	bfbc      	itt	lt
 801120a:	580b      	ldrlt	r3, [r1, r0]
 801120c:	18c0      	addlt	r0, r0, r3
 801120e:	4770      	bx	lr

08011210 <_init>:
 8011210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011212:	bf00      	nop
 8011214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011216:	bc08      	pop	{r3}
 8011218:	469e      	mov	lr, r3
 801121a:	4770      	bx	lr

0801121c <_fini>:
 801121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801121e:	bf00      	nop
 8011220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011222:	bc08      	pop	{r3}
 8011224:	469e      	mov	lr, r3
 8011226:	4770      	bx	lr
