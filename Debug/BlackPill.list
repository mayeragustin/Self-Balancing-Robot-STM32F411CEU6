
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011188  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001248  08011328  08011328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012570  08012570  00014164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012570  08012570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012578  08012578  00014164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012578  08012578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801257c  0801257c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08012580  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a4  20000164  080126e4  00014164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002308  080126e4  00014308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec61  00000000  00000000  00014194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b30  00000000  00000000  00032df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001510  00000000  00000000  00039460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c798  00000000  00000000  0003a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024426  00000000  00000000  00057108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26c5  00000000  00000000  0007b52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dbf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007700  00000000  00000000  0011dc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00125338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011310 	.word	0x08011310

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	08011310 	.word	0x08011310

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003c0 	.word	0x200003c0
 8000670:	200003d2 	.word	0x200003d2
 8000674:	20000180 	.word	0x20000180

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003e0 	.word	0x200003e0
 80007a0:	200003d4 	.word	0x200003d4

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003e0 	.word	0x200003e0
 8000808:	200003d4 	.word	0x200003d4

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d4 	.word	0x200003d4

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e4 	.word	0x200003e4
 8000898:	200003e8 	.word	0x200003e8

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b099      	sub	sp, #100	@ 0x64
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MPU6050_Init+0x13c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	d174      	bne.n	80009ca <MPU6050_Init+0x12e>
		data = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MPU6050_Init+0x140>)
 80008e8:	681c      	ldr	r4, [r3, #0]
 80008ea:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	216b      	movs	r1, #107	@ 0x6b
 80008fc:	20d0      	movs	r0, #208	@ 0xd0
 80008fe:	47a0      	blx	r4

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000900:	2307      	movs	r3, #7
 8000902:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MPU6050_Init+0x140>)
 8000908:	681c      	ldr	r4, [r3, #0]
 800090a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800090e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000912:	9201      	str	r2, [sp, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	2119      	movs	r1, #25
 800091c:	20d0      	movs	r0, #208	@ 0xd0
 800091e:	47a0      	blx	r4

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MPU6050_Init+0x140>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	211c      	movs	r1, #28
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MPU6050_Init+0x140>)
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	211b      	movs	r1, #27
 800095c:	20d0      	movs	r0, #208	@ 0xd0
 800095e:	47a0      	blx	r4

		// Set Digital Low Pass Filter
		data = 0x03;
 8000960:	2303      	movs	r3, #3
 8000962:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MPU6050_Init+0x140>)
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800096e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	211a      	movs	r1, #26
 800097c:	20d0      	movs	r0, #208	@ 0xd0
 800097e:	47a0      	blx	r4
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	2348      	movs	r3, #72	@ 0x48
 8000986:	461a      	mov	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f010 f843 	bl	8010a14 <memset>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			.Angle = {0, 0, 0},
			.dataReady = 0,
			.isInit = 1
		};

		for(uint8_t i=0; i<14; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800099c:	e00b      	b.n	80009b6 <MPU6050_Init+0x11a>
			mpu->data[i] = 0;
 800099e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		for(uint8_t i=0; i<14; i++){
 80009ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009b0:	3301      	adds	r3, #1
 80009b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80009b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ba:	2b0d      	cmp	r3, #13
 80009bc:	d9ef      	bls.n	800099e <MPU6050_Init+0x102>
		}

		if(status != SYS_OK){
 80009be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <MPU6050_Init+0x132>
			return SYS_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e002      	b.n	80009d0 <MPU6050_Init+0x134>
		}


	}else{
		return SYS_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <MPU6050_Init+0x134>
	}
	return SYS_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	375c      	adds	r7, #92	@ 0x5c
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200003e8 	.word	0x200003e8
 80009dc:	200003e4 	.word	0x200003e4

080009e0 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
 80009ec:	e075      	b.n	8000ada <MPU6050_Calibrate+0xfa>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->data, 14, MPU_TIMEOUT);
 80009ee:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <MPU6050_Calibrate+0x15c>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3336      	adds	r3, #54	@ 0x36
 80009f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	220e      	movs	r2, #14
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	213b      	movs	r1, #59	@ 0x3b
 8000a04:	20d0      	movs	r0, #208	@ 0xd0
 8000a06:	47a0      	blx	r4
		mpu->Acc.raw.x += (int16_t)((mpu->data[0] << 8) | mpu->data[1]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8000a12:	b212      	sxth	r2, r2
 8000a14:	0212      	lsls	r2, r2, #8
 8000a16:	b211      	sxth	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000a1e:	b212      	sxth	r2, r2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	b212      	sxth	r2, r2
 8000a24:	441a      	add	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]
		mpu->Acc.raw.y += (int16_t)((mpu->data[2] << 8) | mpu->data[3]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a34:	b212      	sxth	r2, r2
 8000a36:	0212      	lsls	r2, r2, #8
 8000a38:	b211      	sxth	r1, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000a40:	b212      	sxth	r2, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	b212      	sxth	r2, r2
 8000a46:	441a      	add	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
		mpu->Acc.raw.z += (int16_t)((mpu->data[4] << 8) | mpu->data[5]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8000a56:	b212      	sxth	r2, r2
 8000a58:	0212      	lsls	r2, r2, #8
 8000a5a:	b211      	sxth	r1, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000a62:	b212      	sxth	r2, r2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	b212      	sxth	r2, r2
 8000a68:	441a      	add	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]

		mpu->Gyro.raw.x += (int16_t)((mpu->data[8 ] << 8) | mpu->data[9 ]);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 8000a78:	b212      	sxth	r2, r2
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	b211      	sxth	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000a84:	b212      	sxth	r2, r2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	b212      	sxth	r2, r2
 8000a8a:	441a      	add	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
		mpu->Gyro.raw.y += (int16_t)((mpu->data[10] << 8) | mpu->data[11]);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	0212      	lsls	r2, r2, #8
 8000a9e:	b211      	sxth	r1, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000aa6:	b212      	sxth	r2, r2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	b212      	sxth	r2, r2
 8000aac:	441a      	add	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
		mpu->Gyro.raw.z += (int16_t)((mpu->data[12] << 8) | mpu->data[13]);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8000abc:	b212      	sxth	r2, r2
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	b211      	sxth	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000ac8:	b212      	sxth	r2, r2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	b212      	sxth	r2, r2
 8000ace:	441a      	add	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ae0:	d385      	bcc.n	80009ee <MPU6050_Calibrate+0xe>
	}
    mpu->Acc.offset.x = (int16_t)(mpu->Acc.raw.x >> NUM_SAMPLES_BITS);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	131b      	asrs	r3, r3, #12
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(mpu->Acc.raw.y >> NUM_SAMPLES_BITS);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	131b      	asrs	r3, r3, #12
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(mpu->Acc.raw.z >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(mpu->Gyro.raw.x >> NUM_SAMPLES_BITS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	83da      	strh	r2, [r3, #30]
	mpu->Gyro.offset.y = (int16_t)(mpu->Gyro.raw.y >> NUM_SAMPLES_BITS);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	841a      	strh	r2, [r3, #32]
	mpu->Gyro.offset.z = (int16_t)(mpu->Gyro.raw.z >> NUM_SAMPLES_BITS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2a:	131b      	asrs	r3, r3, #12
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003e8 	.word	0x200003e8

08000b40 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->Acc.raw.x = (((mpu->data[0] << 8) | mpu->data[1]));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	mpu->Acc.raw.y = (((mpu->data[2] << 8) | mpu->data[3]));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
	mpu->Acc.raw.z = (((mpu->data[4] << 8) | mpu->data[5]));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
	// ACC: CALCULATE TRUE ACCELERATION
	mpu->Acc.x = mpu->Acc.raw.x - mpu->Acc.offset.x;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	801a      	strh	r2, [r3, #0]
	mpu->Acc.y = mpu->Acc.raw.y - mpu->Acc.offset.y;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	805a      	strh	r2, [r3, #2]
	mpu->Acc.z = mpu->Acc.raw.z - mpu->Acc.offset.z;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	809a      	strh	r2, [r3, #4]

	// GYR: GET RAW INFORMATION
	mpu->Gyro.raw.x = (((mpu->data[8 ] << 8) | mpu->data[9 ]));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->Gyro.raw.y = (((mpu->data[10] << 8) | mpu->data[11]));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->Gyro.raw.z = (((mpu->data[12] << 8) | mpu->data[13]));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	// GYR: CALCULATE TRUE ACCELERATION
	mpu->Gyro.x = mpu->Gyro.raw.x - mpu->Gyro.offset.x;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	831a      	strh	r2, [r3, #24]
	mpu->Gyro.y = mpu->Gyro.raw.y - mpu->Gyro.offset.y;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	835a      	strh	r2, [r3, #26]
	mpu->Gyro.z = mpu->Gyro.raw.z - mpu->Gyro.offset.z;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	839a      	strh	r2, [r3, #28]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <Display_Set_I2C_Master_Transmit+0x24>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <Display_Set_I2C_Master_Transmit+0x28>)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200003f4 	.word	0x200003f4
 8000c84:	200003f8 	.word	0x200003f8

08000c88 <Display_Init>:

e_system Display_Init(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000c92:	22ae      	movs	r2, #174	@ 0xae
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	@ 0x78
 8000c98:	f000 f94a 	bl	8000f30 <ssd1306_I2C_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	@ 0x78
 8000cac:	f000 f940 	bl	8000f30 <ssd1306_I2C_Write>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cba:	2210      	movs	r2, #16
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	@ 0x78
 8000cc0:	f000 f936 	bl	8000f30 <ssd1306_I2C_Write>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4413      	add	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000cce:	22b0      	movs	r2, #176	@ 0xb0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	@ 0x78
 8000cd4:	f000 f92c 	bl	8000f30 <ssd1306_I2C_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000ce2:	22c8      	movs	r2, #200	@ 0xc8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	@ 0x78
 8000ce8:	f000 f922 	bl	8000f30 <ssd1306_I2C_Write>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 f918 	bl	8000f30 <ssd1306_I2C_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4413      	add	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	@ 0x78
 8000d10:	f000 f90e 	bl	8000f30 <ssd1306_I2C_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	@ 0x78
 8000d24:	f000 f904 	bl	8000f30 <ssd1306_I2C_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4413      	add	r3, r2
 8000d30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000d32:	2281      	movs	r2, #129	@ 0x81
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 f8fa 	bl	8000f30 <ssd1306_I2C_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4413      	add	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 f8f0 	bl	8000f30 <ssd1306_I2C_Write>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4413      	add	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000d5a:	22a1      	movs	r2, #161	@ 0xa1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 f8e6 	bl	8000f30 <ssd1306_I2C_Write>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000d6e:	22a6      	movs	r2, #166	@ 0xa6
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	@ 0x78
 8000d74:	f000 f8dc 	bl	8000f30 <ssd1306_I2C_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4413      	add	r3, r2
 8000d80:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000d82:	22a8      	movs	r2, #168	@ 0xa8
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 f8d2 	bl	8000f30 <ssd1306_I2C_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4413      	add	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000d96:	223f      	movs	r2, #63	@ 0x3f
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 f8c8 	bl	8000f30 <ssd1306_I2C_Write>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4413      	add	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000daa:	22a4      	movs	r2, #164	@ 0xa4
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 f8be 	bl	8000f30 <ssd1306_I2C_Write>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4413      	add	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000dbe:	22d3      	movs	r2, #211	@ 0xd3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 f8b4 	bl	8000f30 <ssd1306_I2C_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4413      	add	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 f8aa 	bl	8000f30 <ssd1306_I2C_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4413      	add	r3, r2
 8000de4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000de6:	22d5      	movs	r2, #213	@ 0xd5
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 f8a0 	bl	8000f30 <ssd1306_I2C_Write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4413      	add	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000dfa:	22f0      	movs	r2, #240	@ 0xf0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 f896 	bl	8000f30 <ssd1306_I2C_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000e0e:	22d9      	movs	r2, #217	@ 0xd9
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 f88c 	bl	8000f30 <ssd1306_I2C_Write>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4413      	add	r3, r2
 8000e20:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000e22:	2222      	movs	r2, #34	@ 0x22
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	@ 0x78
 8000e28:	f000 f882 	bl	8000f30 <ssd1306_I2C_Write>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4413      	add	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000e36:	22da      	movs	r2, #218	@ 0xda
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	@ 0x78
 8000e3c:	f000 f878 	bl	8000f30 <ssd1306_I2C_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	@ 0x78
 8000e50:	f000 f86e 	bl	8000f30 <ssd1306_I2C_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000e5e:	22db      	movs	r2, #219	@ 0xdb
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 f864 	bl	8000f30 <ssd1306_I2C_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 f85a 	bl	8000f30 <ssd1306_I2C_Write>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4413      	add	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000e86:	228d      	movs	r2, #141	@ 0x8d
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 f850 	bl	8000f30 <ssd1306_I2C_Write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4413      	add	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 f846 	bl	8000f30 <ssd1306_I2C_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4413      	add	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000eae:	22af      	movs	r2, #175	@ 0xaf
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 f83c 	bl	8000f30 <ssd1306_I2C_Write>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 f832 	bl	8000f30 <ssd1306_I2C_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8ec 	bl	80010b4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <Display_Init+0x2a0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <Display_Init+0x2a0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <Display_Init+0x2a0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <Display_Init+0x2a4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <Display_Init+0x2a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <Display_Init+0x2a4>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	3b50      	subs	r3, #80	@ 0x50
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <Display_Init+0x2a4>)
 8000f10:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <Display_Init+0x2a4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <Display_Init+0x2a4>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003ec 	.word	0x200003ec
 8000f2c:	200007fc 	.word	0x200007fc

08000f30 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <ssd1306_I2C_Write+0x38>)
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	b298      	uxth	r0, r3
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	230a      	movs	r3, #10
 8000f58:	2202      	movs	r2, #2
 8000f5a:	47a0      	blx	r4
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003f8 	.word	0x200003f8

08000f6c <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 8000f6c:	b598      	push	{r3, r4, r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d057      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d053      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <Display_UpdateScreen_Task+0xc8>)
 8000f82:	795b      	ldrb	r3, [r3, #5]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d04f      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>

		switch(Update.state){
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <Display_UpdateScreen_Task+0x2a>
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d01f      	beq.n	8000fd4 <Display_UpdateScreen_Task+0x68>
 8000f94:	e03b      	b.n	800100e <Display_UpdateScreen_Task+0xa2>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	3b50      	subs	r3, #80	@ 0x50
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa0:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fb0:	681c      	ldr	r4, [r3, #0]
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <Display_UpdateScreen_Task+0xd0>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	@ 0x78
 8000fba:	47a0      	blx	r4
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <Display_UpdateScreen_Task+0x64>
				Update.state = DATA;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000fce:	e021      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e02a      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <Display_UpdateScreen_Task+0xd4>)
 8000fe0:	441a      	add	r2, r3
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <Display_UpdateScreen_Task+0x9e>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffa:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001008:	e004      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00d      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001010:	2208      	movs	r2, #8
 8001012:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b07      	cmp	r3, #7
 800101a:	d905      	bls.n	8001028 <Display_UpdateScreen_Task+0xbc>
			Update.Page = 0;
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001022:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd98      	pop	{r3, r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	200007fc 	.word	0x200007fc
 8001034:	200003ec 	.word	0x200003ec
 8001038:	200003f4 	.word	0x200003f4
 800103c:	20000800 	.word	0x20000800
 8001040:	200003fc 	.word	0x200003fc

08001044 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <Display_I2C_DMA_Ready+0x1c>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	7053      	strb	r3, [r2, #1]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200007fc 	.word	0x200007fc

08001064 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <Display_I2C_Refresh_Ready+0x1c>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	7013      	strb	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200007fc 	.word	0x200007fc

08001084 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <Display_SetCursor+0x2c>)
 800109a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <Display_SetCursor+0x2c>)
 80010a2:	805a      	strh	r2, [r3, #2]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	200003ec 	.word	0x200003ec

080010b4 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00d      	b.n	80010e0 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <Display_Fill+0x1a>
 80010ca:	2100      	movs	r1, #0
 80010cc:	e000      	b.n	80010d0 <Display_Fill+0x1c>
 80010ce:	21ff      	movs	r1, #255	@ 0xff
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <Display_Fill+0x44>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e6:	d3ed      	bcc.n	80010c4 <Display_Fill+0x10>
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200003fc 	.word	0x200003fc

080010fc <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	70fb      	strb	r3, [r7, #3]
	if (
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b7f      	cmp	r3, #127	@ 0x7f
 8001112:	d848      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b3f      	cmp	r3, #63	@ 0x3f
 8001118:	d845      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <Display_DrawPixel+0xb8>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11a      	bne.n	800116c <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b298      	uxth	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b259      	sxtb	r1, r3
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e01d      	b.n	80011a8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b298      	uxth	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <Display_DrawPixel+0xbc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b25a      	sxtb	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	b259      	sxtb	r1, r3
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <Display_DrawPixel+0xbc>)
 80011a2:	54d1      	strb	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <Display_DrawPixel+0xac>
		return;
 80011a6:	bf00      	nop
	}
}
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200003ec 	.word	0x200003ec
 80011b8:	200003fc 	.word	0x200003fc

080011bc <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	460b      	mov	r3, r1
 80011cc:	81bb      	strh	r3, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	3307      	adds	r3, #7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da00      	bge.n	80011de <Display_DrawBitmap+0x22>
 80011dc:	3307      	adds	r3, #7
 80011de:	10db      	asrs	r3, r3, #3
 80011e0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	82bb      	strh	r3, [r7, #20]
 80011ea:	e044      	b.n	8001276 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	827b      	strh	r3, [r7, #18]
 80011f0:	e02f      	b.n	8001252 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e012      	b.n	800122a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800120c:	fb03 f202 	mul.w	r2, r3, r2
 8001210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <Display_DrawBitmap+0x5e>
 8001218:	3307      	adds	r3, #7
 800121a:	10db      	asrs	r3, r3, #3
 800121c:	b21b      	sxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800122a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da09      	bge.n	8001246 <Display_DrawBitmap+0x8a>
 8001232:	89fa      	ldrh	r2, [r7, #14]
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	89b9      	ldrh	r1, [r7, #12]
 800123c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5b 	bl	80010fc <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	827b      	strh	r3, [r7, #18]
 8001252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbc9      	blt.n	80011f2 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800125e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	82bb      	strh	r3, [r7, #20]
 800126a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	81bb      	strh	r3, [r7, #12]
 8001276:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800127a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbb4      	blt.n	80011ec <Display_DrawBitmap+0x30>
        }
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	1d38      	adds	r0, r7, #4
 8001296:	e880 0006 	stmia.w	r0, {r1, r2}
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	4613      	mov	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012a4:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <Display_WriteChar+0xf4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b0:	dc06      	bgt.n	80012c0 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <Display_WriteChar+0xf4>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012be:	dd01      	ble.n	80012c4 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 80012c0:	2300      	movs	r3, #0
 80012c2:	e058      	b.n	8001376 <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e048      	b.n	800135c <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	3b20      	subs	r3, #32
 80012d0:	7979      	ldrb	r1, [r7, #5]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	440b      	add	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e030      	b.n	800134c <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <Display_WriteChar+0xf4>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b298      	uxth	r0, r3
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <Display_WriteChar+0xf4>)
 8001308:	885a      	ldrh	r2, [r3, #2]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fef1 	bl	80010fc <Display_DrawPixel>
 800131a:	e014      	b.n	8001346 <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <Display_WriteChar+0xf4>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b298      	uxth	r0, r3
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <Display_WriteChar+0xf4>)
 800132a:	885a      	ldrh	r2, [r3, #2]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b299      	uxth	r1, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f7ff fedb 	bl	80010fc <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	793b      	ldrb	r3, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4293      	cmp	r3, r2
 8001354:	d3c9      	bcc.n	80012ea <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	461a      	mov	r2, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4293      	cmp	r3, r2
 8001364:	d3b1      	bcc.n	80012ca <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <Display_WriteChar+0xf4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	793a      	ldrb	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <Display_WriteChar+0xf4>)
 8001372:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	bf00      	nop
 8001380:	200003ec 	.word	0x200003ec

08001384 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001392:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001394:	e012      	b.n	80013bc <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	ca06      	ldmia	r2, {r1, r2}
 80013a0:	f7ff ff74 	bl	800128c <Display_WriteChar>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d002      	beq.n	80013b6 <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	e008      	b.n	80013c8 <Display_WriteString+0x44>

        str++;	// Next char
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    while (*str){
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d004      	beq.n	8001400 <Display_DrawLine+0x30>
 80013f6:	88ba      	ldrh	r2, [r7, #4]
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8090 	bne.w	8001520 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b7f      	cmp	r3, #127	@ 0x7f
 8001404:	d901      	bls.n	800140a <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001406:	237f      	movs	r3, #127	@ 0x7f
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	2b7f      	cmp	r3, #127	@ 0x7f
 800140e:	d901      	bls.n	8001414 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001410:	237f      	movs	r3, #127	@ 0x7f
 8001412:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2b3f      	cmp	r3, #63	@ 0x3f
 8001418:	d901      	bls.n	800141e <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 800141a:	233f      	movs	r3, #63	@ 0x3f
 800141c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	2b3f      	cmp	r3, #63	@ 0x3f
 8001422:	d901      	bls.n	8001428 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001424:	233f      	movs	r3, #63	@ 0x3f
 8001426:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	429a      	cmp	r2, r3
 800142e:	d205      	bcs.n	800143c <Display_DrawLine+0x6c>
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21b      	sxth	r3, r3
 800143a:	e004      	b.n	8001446 <Display_DrawLine+0x76>
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d205      	bcs.n	800145c <Display_DrawLine+0x8c>
 8001450:	883a      	ldrh	r2, [r7, #0]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21b      	sxth	r3, r3
 800145a:	e004      	b.n	8001466 <Display_DrawLine+0x96>
 800145c:	88ba      	ldrh	r2, [r7, #4]
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d129      	bne.n	80014c4 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001470:	883a      	ldrh	r2, [r7, #0]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d205      	bcs.n	8001484 <Display_DrawLine+0xb4>
			tmp = y1;
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001480:	893b      	ldrh	r3, [r7, #8]
 8001482:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d205      	bcs.n	8001498 <Display_DrawLine+0xc8>
			tmp = x1;
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	e00c      	b.n	80014b8 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 800149e:	89f9      	ldrh	r1, [r7, #14]
 80014a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe28 	bl	80010fc <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014bc:	883b      	ldrh	r3, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dded      	ble.n	800149e <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 80014c2:	e030      	b.n	8001526 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <Display_DrawLine+0x154>
		if (y1 < y0) {
 80014cc:	883a      	ldrh	r2, [r7, #0]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d205      	bcs.n	80014e0 <Display_DrawLine+0x110>
			tmp = y1;
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d205      	bcs.n	80014f4 <Display_DrawLine+0x124>
			tmp = x1;
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	81fb      	strh	r3, [r7, #14]
 80014f8:	e00c      	b.n	8001514 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001500:	88b9      	ldrh	r1, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdfa 	bl	80010fc <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	429a      	cmp	r2, r3
 800151c:	dded      	ble.n	80014fa <Display_DrawLine+0x12a>
		}
	}
	return;
 800151e:	e001      	b.n	8001524 <Display_DrawLine+0x154>
		return;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <Display_DrawLine+0x156>
	return;
 8001524:	bf00      	nop
}
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af02      	add	r7, sp, #8
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d836      	bhi.n	80015be <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	2b3f      	cmp	r3, #63	@ 0x3f
 8001554:	d833      	bhi.n	80015be <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4413      	add	r3, r2
 800155c:	2b7f      	cmp	r3, #127	@ 0x7f
 800155e:	dd03      	ble.n	8001568 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001566:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001568:	88ba      	ldrh	r2, [r7, #4]
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001570:	dd03      	ble.n	800157a <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001578:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e018      	b.n	80015b2 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b29a      	uxth	r2, r3
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	b299      	uxth	r1, r3
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4413      	add	r3, r2
 8001590:	b29c      	uxth	r4, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	b29a      	uxth	r2, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	88f8      	ldrh	r0, [r7, #6]
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	4622      	mov	r2, r4
 80015a8:	f7ff ff12 	bl	80013d0 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	883a      	ldrh	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d2e1      	bcs.n	8001580 <Display_DrawFilledRectangle+0x54>
 80015bc:	e000      	b.n	80015c0 <Display_DrawFilledRectangle+0x94>
		return;
 80015be:	bf00      	nop
	}
}
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}

080015c6 <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	729a      	strb	r2, [r3, #10]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10e      	bne.n	800163e <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	88da      	ldrh	r2, [r3, #6]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a9b      	ldrb	r3, [r3, #10]
 8001642:	3b01      	subs	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a9b      	ldrb	r3, [r3, #10]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <Encoder_Task+0x54>
		enc->pps = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	811a      	strh	r2, [r3, #8]
	}
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	889b      	ldrh	r3, [r3, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	809a      	strh	r2, [r3, #4]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	88da      	ldrh	r2, [r3, #6]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	80da      	strh	r2, [r3, #6]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(e_direction dir), uint16_t max_value){
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	819a      	strh	r2, [r3, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <Motor_Set_PER_Speed>:
		motor->setPins(FREE_WHEEL);
		motor->setPWM(0);
	}
}

void Motor_Set_PER_Speed(s_motor *motor, int8_t speed){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL || motor->setPWM == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d054      	beq.n	80017a2 <Motor_Set_PER_Speed+0xbe>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d050      	beq.n	80017a2 <Motor_Set_PER_Speed+0xbe>
		return;
	if(speed > 100)
 8001700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001704:	2b64      	cmp	r3, #100	@ 0x64
 8001706:	dd01      	ble.n	800170c <Motor_Set_PER_Speed+0x28>
		speed = 100;
 8001708:	2364      	movs	r3, #100	@ 0x64
 800170a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800170c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001710:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001714:	da01      	bge.n	800171a <Motor_Set_PER_Speed+0x36>
		speed = -100;
 8001716:	239c      	movs	r3, #156	@ 0x9c
 8001718:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800171a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	d03f      	beq.n	80017a6 <Motor_Set_PER_Speed+0xc2>
		return;

	motor->vel = speed * 600;
 8001726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8001736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dd10      	ble.n	8001760 <Motor_Set_PER_Speed+0x7c>
		motor->direction = FORWARD;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	701a      	strb	r2, [r3, #0]
		motor->setPins(FORWARD);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2002      	movs	r0, #2
 800174a:	4798      	blx	r3
		motor->setPWM((uint16_t)motor->vel-1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6892      	ldr	r2, [r2, #8]
 8001754:	b292      	uxth	r2, r2
 8001756:	3a01      	subs	r2, #1
 8001758:	b292      	uxth	r2, r2
 800175a:	4610      	mov	r0, r2
 800175c:	4798      	blx	r3
 800175e:	e023      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
	}else if(speed < 0){
 8001760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da10      	bge.n	800178a <Motor_Set_PER_Speed+0xa6>
		motor->direction = BACKWARD;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	701a      	strb	r2, [r3, #0]
		motor->setPins(BACKWARD);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2003      	movs	r0, #3
 8001774:	4798      	blx	r3
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6892      	ldr	r2, [r2, #8]
 800177e:	b292      	uxth	r2, r2
 8001780:	43d2      	mvns	r2, r2
 8001782:	b292      	uxth	r2, r2
 8001784:	4610      	mov	r0, r2
 8001786:	4798      	blx	r3
 8001788:	e00e      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
	}else{
		motor->direction = FREE_WHEEL;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
		motor->setPins(FREE_WHEEL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2001      	movs	r0, #1
 8001796:	4798      	blx	r3
		motor->setPWM(0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	2000      	movs	r0, #0
 800179e:	4798      	blx	r3
 80017a0:	e002      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
		return;
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
		return;
 80017a6:	bf00      	nop
	}
}
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	motor->setPins(BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d10c      	bne.n	80017d8 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	899b      	ldrh	r3, [r3, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	899b      	ldrh	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
	}
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <Comm_Task>:

void Comm_Task(s_commData* comm){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001860:	429a      	cmp	r2, r3
 8001862:	d002      	beq.n	800186a <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f819 	bl	800189c <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	789a      	ldrb	r2, [r3, #2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	429a      	cmp	r2, r3
 8001874:	d00e      	beq.n	8001894 <Comm_Task+0x48>
		if(!comm->isESP01){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <Comm_Task+0x48>
				comm->dataWriter(comm);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80018aa:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 80018ac:	e11b      	b.n	8001ae6 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	f200 810e 	bhi.w	8001ad6 <decodeProtocol+0x23a>
 80018ba:	a201      	add	r2, pc, #4	@ (adr r2, 80018c0 <decodeProtocol+0x24>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018dd 	.word	0x080018dd
 80018c4:	0800190f 	.word	0x0800190f
 80018c8:	08001951 	.word	0x08001951
 80018cc:	08001993 	.word	0x08001993
 80018d0:	080019d5 	.word	0x080019d5
 80018d4:	08001a07 	.word	0x08001a07
 80018d8:	08001a59 	.word	0x08001a59
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	b2d1      	uxtb	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80018f6:	2b55      	cmp	r3, #85	@ 0x55
 80018f8:	f040 80f2 	bne.w	8001ae0 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 800190c:	e0e8      	b.n	8001ae0 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	b2d1      	uxtb	r1, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001928:	2b4e      	cmp	r3, #78	@ 0x4e
 800192a:	d104      	bne.n	8001936 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001934:	e0d7      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800193c:	3b01      	subs	r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800194e:	e0ca      	b.n	8001ae6 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	b2d1      	uxtb	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800196a:	2b45      	cmp	r3, #69	@ 0x45
 800196c:	d104      	bne.n	8001978 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001976:	e0b6      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800197e:	3b01      	subs	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001990:	e0a9      	b.n	8001ae6 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	b2d1      	uxtb	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80019ac:	2b52      	cmp	r3, #82	@ 0x52
 80019ae:	d104      	bne.n	80019ba <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80019b8:	e095      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80019d2:	e088      	b.n	8001ae6 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	b2d1      	uxtb	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <decodeProtocol+0x264>)
 80019fa:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a04:	e06f      	b.n	8001ae6 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	b2d1      	uxtb	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a20:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a22:	d10c      	bne.n	8001a3e <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2206      	movs	r2, #6
 8001a28:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <decodeProtocol+0x264>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001a3c:	e053      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a56:	e046      	b.n	8001ae6 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001a58:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <decodeProtocol+0x264>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d914      	bls.n	8001a8a <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	b2d1      	uxtb	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a70:	461a      	mov	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001a80:	4053      	eors	r3, r2
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <decodeProtocol+0x264>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <decodeProtocol+0x264>)
 8001a94:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <decodeProtocol+0x264>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d122      	bne.n	8001ae4 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d111      	bne.n	8001ae4 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
				}
			}
			break;
 8001ad4:	e006      	b.n	8001ae4 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001ade:	e002      	b.n	8001ae6 <decodeProtocol+0x24a>
			break;
 8001ae0:	bf00      	nop
 8001ae2:	e000      	b.n	8001ae6 <decodeProtocol+0x24a>
			break;
 8001ae4:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f47f aedd 	bne.w	80018ae <decodeProtocol+0x12>
		}
	}
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000829 	.word	0x20000829

08001b04 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	72fb      	strb	r3, [r7, #11]
 8001b14:	4613      	mov	r3, r2
 8001b16:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001b18:	4b62      	ldr	r3, [pc, #392]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001b1e:	4b62      	ldr	r3, [pc, #392]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001b24:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	b2d1      	uxtb	r1, r2
 8001b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b2e:	7011      	strb	r1, [r2, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b34:	2155      	movs	r1, #85	@ 0x55
 8001b36:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001b38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	4a59      	ldr	r2, [pc, #356]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b42:	7011      	strb	r1, [r2, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b48:	214e      	movs	r1, #78	@ 0x4e
 8001b4a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001b4c:	4b56      	ldr	r3, [pc, #344]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	b2d1      	uxtb	r1, r2
 8001b54:	4a54      	ldr	r2, [pc, #336]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b56:	7011      	strb	r1, [r2, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b5c:	2145      	movs	r1, #69	@ 0x45
 8001b5e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001b60:	4b51      	ldr	r3, [pc, #324]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	b2d1      	uxtb	r1, r2
 8001b68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b6a:	7011      	strb	r1, [r2, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b70:	2152      	movs	r1, #82	@ 0x52
 8001b72:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001b74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <comm_sendCMD+0x1ac>)
 8001b7a:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	b2d1      	uxtb	r1, r2
 8001b84:	4a48      	ldr	r2, [pc, #288]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b86:	7011      	strb	r1, [r2, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001b90:	4b45      	ldr	r3, [pc, #276]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	4a43      	ldr	r2, [pc, #268]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b9a:	7011      	strb	r1, [r2, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001ba0:	213a      	movs	r1, #58	@ 0x3a
 8001ba2:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	b2d1      	uxtb	r1, r2
 8001bac:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bae:	7011      	strb	r1, [r2, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	2bb1      	cmp	r3, #177	@ 0xb1
 8001bbc:	d002      	beq.n	8001bc4 <comm_sendCMD+0xc0>
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	2bee      	cmp	r3, #238	@ 0xee
 8001bc2:	d109      	bne.n	8001bd8 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001bc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	b2d1      	uxtb	r1, r2
 8001bcc:	4a36      	ldr	r2, [pc, #216]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bce:	7011      	strb	r1, [r2, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d013      	beq.n	8001c06 <comm_sendCMD+0x102>
 8001bde:	7abb      	ldrb	r3, [r7, #10]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001be4:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001bec:	4413      	add	r3, r2
 8001bee:	7aba      	ldrb	r2, [r7, #10]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00e ff42 	bl	8010a7c <memcpy>
        auxIndex += len;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	7abb      	ldrb	r3, [r7, #10]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001c04:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001c06:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <comm_sendCMD+0x1ac>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <comm_sendCMD+0x1b0>)
 8001c18:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <comm_sendCMD+0x1ac>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <comm_sendCMD+0x1b0>)
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001c26:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e01f      	b.n	8001c76 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001c3e:	5c9a      	ldrb	r2, [r3, r2]
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4053      	eors	r3, r2
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c4a:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	78db      	ldrb	r3, [r3, #3]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	b2d1      	uxtb	r1, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	70d1      	strb	r1, [r2, #3]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001c62:	5c1a      	ldrb	r2, [r3, r0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	440b      	add	r3, r1
 8001c68:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3d9      	bcc.n	8001c36 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	78db      	ldrb	r3, [r3, #3]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	b2d1      	uxtb	r1, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	70d1      	strb	r1, [r2, #3]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	440b      	add	r3, r1
 8001c98:	711a      	strb	r2, [r3, #4]
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000806 	.word	0x20000806
 8001ca8:	20000807 	.word	0x20000807
 8001cac:	20000808 	.word	0x20000808
 8001cb0:	20000826 	.word	0x20000826
 8001cb4:	20000827 	.word	0x20000827
 8001cb8:	20000828 	.word	0x20000828

08001cbc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
void Init_Timing();
void Init_MPU6050();
void Init_Display();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x2c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d107      	bne.n	8001cde <HAL_UART_RxCpltCallback+0x22>
		//dataTx = dataRx;
		HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4906      	ldr	r1, [pc, #24]	@ (8001cec <HAL_UART_RxCpltCallback+0x30>)
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x34>)
 8001cd4:	f009 fec2 	bl	800ba5c <HAL_UART_Receive_IT>
		dataRx = 0;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <HAL_UART_RxCpltCallback+0x30>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
	}
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	200011cd 	.word	0x200011cd
 8001cf0:	20000a78 	.word	0x20000a78

08001cf4 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8001cfa:	4ba6      	ldr	r3, [pc, #664]	@ (8001f94 <OLED_Print_Data_Task+0x2a0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8130 	beq.w	8001f64 <OLED_Print_Data_Task+0x270>
		switch(Display.state){
 8001d04:	4ba3      	ldr	r3, [pc, #652]	@ (8001f94 <OLED_Print_Data_Task+0x2a0>)
 8001d06:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d023      	beq.n	8001d56 <OLED_Print_Data_Task+0x62>
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f300 8128 	bgt.w	8001f64 <OLED_Print_Data_Task+0x270>
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <OLED_Print_Data_Task+0x28>
 8001d18:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001d1a:	e123      	b.n	8001f64 <OLED_Print_Data_Task+0x270>
			if(HAL_GetTick() - Display.timer > 2000){
 8001d1c:	f001 ff8a 	bl	8003c34 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b9c      	ldr	r3, [pc, #624]	@ (8001f94 <OLED_Print_Data_Task+0x2a0>)
 8001d24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d2e:	f240 8116 	bls.w	8001f5e <OLED_Print_Data_Task+0x26a>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff f9be 	bl	80010b4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2340      	movs	r3, #64	@ 0x40
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	4a95      	ldr	r2, [pc, #596]	@ (8001f98 <OLED_Print_Data_Task+0x2a4>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff fa38 	bl	80011bc <Display_DrawBitmap>
				Display.state = INPUTS;
 8001d4c:	4b91      	ldr	r3, [pc, #580]	@ (8001f94 <OLED_Print_Data_Task+0x2a0>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001d54:	e103      	b.n	8001f5e <OLED_Print_Data_Task+0x26a>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8001d56:	2300      	movs	r3, #0
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	232c      	movs	r3, #44	@ 0x2c
 8001d5c:	9300      	str	r3, [sp, #0]
 8001d5e:	2325      	movs	r3, #37	@ 0x25
 8001d60:	4a8e      	ldr	r2, [pc, #568]	@ (8001f9c <OLED_Print_Data_Task+0x2a8>)
 8001d62:	2111      	movs	r1, #17
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff fa29 	bl	80011bc <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e044      	b.n	8001dfa <OLED_Print_Data_Task+0x106>
				for(uint8_t j = 0; j < 45; j++){
 8001d70:	2300      	movs	r3, #0
 8001d72:	71bb      	strb	r3, [r7, #6]
 8001d74:	e03b      	b.n	8001dee <OLED_Print_Data_Task+0xfa>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	4a89      	ldr	r2, [pc, #548]	@ (8001fa0 <OLED_Print_Data_Task+0x2ac>)
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	885a      	ldrh	r2, [r3, #2]
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	4987      	ldr	r1, [pc, #540]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001d86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d82c      	bhi.n	8001de8 <OLED_Print_Data_Task+0xf4>
						pepe = 2 + i * 3;
 8001d8e:	79fa      	ldrb	r2, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	3302      	adds	r3, #2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b83      	ldr	r3, [pc, #524]	@ (8001fa8 <OLED_Print_Data_Task+0x2b4>)
 8001d9c:	601a      	str	r2, [r3, #0]
						Display_DrawLine(pepe, 61,  pepe, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001d9e:	4b82      	ldr	r3, [pc, #520]	@ (8001fa8 <OLED_Print_Data_Task+0x2b4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b298      	uxth	r0, r3
 8001da4:	4b80      	ldr	r3, [pc, #512]	@ (8001fa8 <OLED_Print_Data_Task+0x2b4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	497f      	ldr	r1, [pc, #508]	@ (8001fac <OLED_Print_Data_Task+0x2b8>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	4619      	mov	r1, r3
 8001db2:	2301      	movs	r3, #1
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	213d      	movs	r1, #61	@ 0x3d
 8001dba:	f7ff fb09 	bl	80013d0 <Display_DrawLine>
						Display_DrawLine(pepe+1, 61,  pepe+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa8 <OLED_Print_Data_Task+0x2b4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	4b77      	ldr	r3, [pc, #476]	@ (8001fa8 <OLED_Print_Data_Task+0x2b4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	4975      	ldr	r1, [pc, #468]	@ (8001fac <OLED_Print_Data_Task+0x2b8>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	460b      	mov	r3, r1
 8001de0:	213d      	movs	r1, #61	@ 0x3d
 8001de2:	f7ff faf5 	bl	80013d0 <Display_DrawLine>
						break;
 8001de6:	e005      	b.n	8001df4 <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001de8:	79bb      	ldrb	r3, [r7, #6]
 8001dea:	3301      	adds	r3, #1
 8001dec:	71bb      	strb	r3, [r7, #6]
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	2b2c      	cmp	r3, #44	@ 0x2c
 8001df2:	d9c0      	bls.n	8001d76 <OLED_Print_Data_Task+0x82>
			for(uint8_t i = 0; i < 8; i++){
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	3301      	adds	r3, #1
 8001df8:	71fb      	strb	r3, [r7, #7]
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b07      	cmp	r3, #7
 8001dfe:	d9b7      	bls.n	8001d70 <OLED_Print_Data_Task+0x7c>
					}
				}
			}


			if(MPU6050.isInit){
 8001e00:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 80ab 	beq.w	8001f62 <OLED_Print_Data_Task+0x26e>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8001e0c:	4b68      	ldr	r3, [pc, #416]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	139b      	asrs	r3, r3, #14
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001fb4 <OLED_Print_Data_Task+0x2c0>
 8001e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e2a:	ee17 3a90 	vmov	r3, s15
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e32:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8001e34:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e3a:	139b      	asrs	r3, r3, #14
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001fb4 <OLED_Print_Data_Task+0x2c0>
 8001e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 3a90 	vmov	r3, s15
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	4b55      	ldr	r3, [pc, #340]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e5a:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8001e5c:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e62:	139b      	asrs	r3, r3, #14
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001fb4 <OLED_Print_Data_Task+0x2c0>
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7a:	ee17 3a90 	vmov	r3, s15
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e82:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8001e84:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	494a      	ldr	r1, [pc, #296]	@ (8001fb8 <OLED_Print_Data_Task+0x2c4>)
 8001e8e:	484b      	ldr	r0, [pc, #300]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001e90:	f00e fd9e 	bl	80109d0 <siprintf>
				Display_SetCursor(25, 17);
 8001e94:	2111      	movs	r1, #17
 8001e96:	2019      	movs	r0, #25
 8001e98:	f7ff f8f4 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001e9c:	4a48      	ldr	r2, [pc, #288]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	ca06      	ldmia	r2, {r1, r2}
 8001ea2:	4846      	ldr	r0, [pc, #280]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001ea4:	f7ff fa6e 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8001ea8:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001eaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4944      	ldr	r1, [pc, #272]	@ (8001fc4 <OLED_Print_Data_Task+0x2d0>)
 8001eb2:	4842      	ldr	r0, [pc, #264]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001eb4:	f00e fd8c 	bl	80109d0 <siprintf>
				Display_SetCursor(25, 34);
 8001eb8:	2122      	movs	r1, #34	@ 0x22
 8001eba:	2019      	movs	r0, #25
 8001ebc:	f7ff f8e2 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001ec0:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	ca06      	ldmia	r2, {r1, r2}
 8001ec6:	483d      	ldr	r0, [pc, #244]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001ec8:	f7ff fa5c 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8001ecc:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001ece:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	493c      	ldr	r1, [pc, #240]	@ (8001fc8 <OLED_Print_Data_Task+0x2d4>)
 8001ed6:	4839      	ldr	r0, [pc, #228]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001ed8:	f00e fd7a 	bl	80109d0 <siprintf>
				Display_SetCursor(25, 51);
 8001edc:	2133      	movs	r1, #51	@ 0x33
 8001ede:	2019      	movs	r0, #25
 8001ee0:	f7ff f8d0 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001ee4:	4a36      	ldr	r2, [pc, #216]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	ca06      	ldmia	r2, {r1, r2}
 8001eea:	4834      	ldr	r0, [pc, #208]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001eec:	f7ff fa4a 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8001ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001ef2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4934      	ldr	r1, [pc, #208]	@ (8001fcc <OLED_Print_Data_Task+0x2d8>)
 8001efa:	4830      	ldr	r0, [pc, #192]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001efc:	f00e fd68 	bl	80109d0 <siprintf>
				Display_SetCursor(73, 17);
 8001f00:	2111      	movs	r1, #17
 8001f02:	2049      	movs	r0, #73	@ 0x49
 8001f04:	f7ff f8be 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f08:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	ca06      	ldmia	r2, {r1, r2}
 8001f0e:	482b      	ldr	r0, [pc, #172]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001f10:	f7ff fa38 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f16:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	492c      	ldr	r1, [pc, #176]	@ (8001fd0 <OLED_Print_Data_Task+0x2dc>)
 8001f1e:	4827      	ldr	r0, [pc, #156]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001f20:	f00e fd56 	bl	80109d0 <siprintf>
				Display_SetCursor(73, 34);
 8001f24:	2122      	movs	r1, #34	@ 0x22
 8001f26:	2049      	movs	r0, #73	@ 0x49
 8001f28:	f7ff f8ac 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f2c:	4a24      	ldr	r2, [pc, #144]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001f2e:	2301      	movs	r3, #1
 8001f30:	ca06      	ldmia	r2, {r1, r2}
 8001f32:	4822      	ldr	r0, [pc, #136]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001f34:	f7ff fa26 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f3a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4924      	ldr	r1, [pc, #144]	@ (8001fd4 <OLED_Print_Data_Task+0x2e0>)
 8001f42:	481e      	ldr	r0, [pc, #120]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001f44:	f00e fd44 	bl	80109d0 <siprintf>
				Display_SetCursor(73, 51);
 8001f48:	2133      	movs	r1, #51	@ 0x33
 8001f4a:	2049      	movs	r0, #73	@ 0x49
 8001f4c:	f7ff f89a 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f50:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001f52:	2301      	movs	r3, #1
 8001f54:	ca06      	ldmia	r2, {r1, r2}
 8001f56:	4819      	ldr	r0, [pc, #100]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001f58:	f7ff fa14 	bl	8001384 <Display_WriteString>
			}

			break;
 8001f5c:	e001      	b.n	8001f62 <OLED_Print_Data_Task+0x26e>
			break;
 8001f5e:	bf00      	nop
 8001f60:	e000      	b.n	8001f64 <OLED_Print_Data_Task+0x270>
			break;
 8001f62:	bf00      	nop
		}
	}

	is30s--;
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <OLED_Print_Data_Task+0x2e4>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd8 <OLED_Print_Data_Task+0x2e4>)
 8001f6e:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <OLED_Print_Data_Task+0x2e4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d105      	bne.n	8001f84 <OLED_Print_Data_Task+0x290>
		is30s = 300;
 8001f78:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <OLED_Print_Data_Task+0x2e4>)
 8001f7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f7e:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 8001f80:	f000 f82c 	bl	8001fdc <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff f86d 	bl	8001064 <Display_I2C_Refresh_Ready>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000b60 	.word	0x20000b60
 8001f98:	080119b0 	.word	0x080119b0
 8001f9c:	080114d4 	.word	0x080114d4
 8001fa0:	20000f74 	.word	0x20000f74
 8001fa4:	08011478 	.word	0x08011478
 8001fa8:	20000ac0 	.word	0x20000ac0
 8001fac:	08011448 	.word	0x08011448
 8001fb0:	20000b18 	.word	0x20000b18
 8001fb4:	411ccccd 	.word	0x411ccccd
 8001fb8:	08011328 	.word	0x08011328
 8001fbc:	20000f68 	.word	0x20000f68
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	08011330 	.word	0x08011330
 8001fc8:	08011338 	.word	0x08011338
 8001fcc:	08011340 	.word	0x08011340
 8001fd0:	08011348 	.word	0x08011348
 8001fd4:	08011350 	.word	0x08011350
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <BateryLevel_Set>:

void BateryLevel_Set(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	2206      	movs	r2, #6
 8001fea:	2104      	movs	r1, #4
 8001fec:	2003      	movs	r0, #3
 8001fee:	f7ff fa9d 	bl	800152c <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <BateryLevel_Set+0x94>)
 8001ff4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001ff6:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d908      	bls.n	8002010 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8001ffe:	2301      	movs	r3, #1
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2309      	movs	r3, #9
 8002004:	2206      	movs	r2, #6
 8002006:	2104      	movs	r1, #4
 8002008:	2003      	movs	r0, #3
 800200a:	f7ff fa8f 	bl	800152c <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 800200e:	e02b      	b.n	8002068 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <BateryLevel_Set+0x94>)
 8002012:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002014:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002018:	4293      	cmp	r3, r2
 800201a:	d908      	bls.n	800202e <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 800201c:	2301      	movs	r3, #1
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2307      	movs	r3, #7
 8002022:	2206      	movs	r2, #6
 8002024:	2106      	movs	r1, #6
 8002026:	2003      	movs	r0, #3
 8002028:	f7ff fa80 	bl	800152c <Display_DrawFilledRectangle>
}
 800202c:	e01c      	b.n	8002068 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <BateryLevel_Set+0x94>)
 8002030:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002032:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002036:	4293      	cmp	r3, r2
 8002038:	d908      	bls.n	800204c <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 800203a:	2301      	movs	r3, #1
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2305      	movs	r3, #5
 8002040:	2206      	movs	r2, #6
 8002042:	2108      	movs	r1, #8
 8002044:	2003      	movs	r0, #3
 8002046:	f7ff fa71 	bl	800152c <Display_DrawFilledRectangle>
}
 800204a:	e00d      	b.n	8002068 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <BateryLevel_Set+0x94>)
 800204e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002050:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8002054:	4293      	cmp	r3, r2
 8002056:	d907      	bls.n	8002068 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8002058:	2301      	movs	r3, #1
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2302      	movs	r3, #2
 800205e:	2206      	movs	r2, #6
 8002060:	210b      	movs	r1, #11
 8002062:	2003      	movs	r0, #3
 8002064:	f7ff fa62 	bl	800152c <Display_DrawFilledRectangle>
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000f74 	.word	0x20000f74

08002074 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	3302      	adds	r3, #2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800208a:	2bf1      	cmp	r3, #241	@ 0xf1
 800208c:	f000 81c9 	beq.w	8002422 <decodeOn_USB+0x3ae>
 8002090:	2bf1      	cmp	r3, #241	@ 0xf1
 8002092:	f300 81bf 	bgt.w	8002414 <decodeOn_USB+0x3a0>
 8002096:	2bf0      	cmp	r3, #240	@ 0xf0
 8002098:	d036      	beq.n	8002108 <decodeOn_USB+0x94>
 800209a:	2bf0      	cmp	r3, #240	@ 0xf0
 800209c:	f300 81ba 	bgt.w	8002414 <decodeOn_USB+0x3a0>
 80020a0:	2bb1      	cmp	r3, #177	@ 0xb1
 80020a2:	dc2d      	bgt.n	8002100 <decodeOn_USB+0x8c>
 80020a4:	2ba0      	cmp	r3, #160	@ 0xa0
 80020a6:	f2c0 81b5 	blt.w	8002414 <decodeOn_USB+0x3a0>
 80020aa:	3ba0      	subs	r3, #160	@ 0xa0
 80020ac:	2b11      	cmp	r3, #17
 80020ae:	f200 81b1 	bhi.w	8002414 <decodeOn_USB+0x3a0>
 80020b2:	a201      	add	r2, pc, #4	@ (adr r2, 80020b8 <decodeOn_USB+0x44>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002123 	.word	0x08002123
 80020bc:	08002199 	.word	0x08002199
 80020c0:	080021f3 	.word	0x080021f3
 80020c4:	0800227f 	.word	0x0800227f
 80020c8:	0800231d 	.word	0x0800231d
 80020cc:	08002415 	.word	0x08002415
 80020d0:	08002415 	.word	0x08002415
 80020d4:	08002415 	.word	0x08002415
 80020d8:	08002415 	.word	0x08002415
 80020dc:	08002415 	.word	0x08002415
 80020e0:	08002415 	.word	0x08002415
 80020e4:	08002415 	.word	0x08002415
 80020e8:	08002415 	.word	0x08002415
 80020ec:	08002415 	.word	0x08002415
 80020f0:	08002415 	.word	0x08002415
 80020f4:	08002415 	.word	0x08002415
 80020f8:	08002415 	.word	0x08002415
 80020fc:	08002427 	.word	0x08002427
 8002100:	2bde      	cmp	r3, #222	@ 0xde
 8002102:	f000 8192 	beq.w	800242a <decodeOn_USB+0x3b6>
 8002106:	e185      	b.n	8002414 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	220d      	movs	r2, #13
 800210c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002116:	2301      	movs	r3, #1
 8002118:	21f0      	movs	r1, #240	@ 0xf0
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fcf2 	bl	8001b04 <comm_sendCMD>
		break;
 8002120:	e184      	b.n	800242c <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	3303      	adds	r3, #3
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002130:	2b08      	cmp	r3, #8
 8002132:	d82a      	bhi.n	800218a <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	785b      	ldrb	r3, [r3, #1]
 8002138:	3303      	adds	r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002142:	4aa8      	ldr	r2, [pc, #672]	@ (80023e4 <decodeOn_USB+0x370>)
 8002144:	3308      	adds	r3, #8
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	885a      	ldrh	r2, [r3, #2]
 800214c:	4ba6      	ldr	r3, [pc, #664]	@ (80023e8 <decodeOn_USB+0x374>)
 800214e:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	785b      	ldrb	r3, [r3, #1]
 8002154:	3303      	adds	r3, #3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002164:	4ba0      	ldr	r3, [pc, #640]	@ (80023e8 <decodeOn_USB+0x374>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800216e:	4b9e      	ldr	r3, [pc, #632]	@ (80023e8 <decodeOn_USB+0x374>)
 8002170:	785a      	ldrb	r2, [r3, #1]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800217e:	2303      	movs	r3, #3
 8002180:	21a0      	movs	r1, #160	@ 0xa0
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fcbe 	bl	8001b04 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
		}
		break;
 8002188:	e150      	b.n	800242c <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
 800218a:	2306      	movs	r3, #6
 800218c:	4a97      	ldr	r2, [pc, #604]	@ (80023ec <decodeOn_USB+0x378>)
 800218e:	21ee      	movs	r1, #238	@ 0xee
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fcb7 	bl	8001b04 <comm_sendCMD>
		break;
 8002196:	e149      	b.n	800242c <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e01d      	b.n	80021da <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	4a90      	ldr	r2, [pc, #576]	@ (80023e4 <decodeOn_USB+0x370>)
 80021a2:	3308      	adds	r3, #8
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4413      	add	r3, r2
 80021a8:	885a      	ldrh	r2, [r3, #2]
 80021aa:	4b8f      	ldr	r3, [pc, #572]	@ (80023e8 <decodeOn_USB+0x374>)
 80021ac:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4a8d      	ldr	r2, [pc, #564]	@ (80023e8 <decodeOn_USB+0x374>)
 80021b4:	7811      	ldrb	r1, [r2, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	460a      	mov	r2, r1
 80021bc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a88      	ldr	r2, [pc, #544]	@ (80023e8 <decodeOn_USB+0x374>)
 80021c8:	7851      	ldrb	r1, [r2, #1]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	460a      	mov	r2, r1
 80021d0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3301      	adds	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d9de      	bls.n	800219e <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80021e6:	2311      	movs	r3, #17
 80021e8:	21a1      	movs	r1, #161	@ 0xa1
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff fc8a 	bl	8001b04 <comm_sendCMD>
		break;
 80021f0:	e11c      	b.n	800242c <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	3303      	adds	r3, #3
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002200:	2b00      	cmp	r3, #0
 8002202:	d115      	bne.n	8002230 <decodeOn_USB+0x1bc>
			Motor_Set_PER_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	3304      	adds	r3, #4
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002212:	b25b      	sxtb	r3, r3
 8002214:	4619      	mov	r1, r3
 8002216:	4876      	ldr	r0, [pc, #472]	@ (80023f0 <decodeOn_USB+0x37c>)
 8002218:	f7ff fa64 	bl	80016e4 <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 800221c:	4b75      	ldr	r3, [pc, #468]	@ (80023f4 <decodeOn_USB+0x380>)
 800221e:	220d      	movs	r2, #13
 8002220:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002224:	2301      	movs	r3, #1
 8002226:	4a74      	ldr	r2, [pc, #464]	@ (80023f8 <decodeOn_USB+0x384>)
 8002228:	21a2      	movs	r1, #162	@ 0xa2
 800222a:	4872      	ldr	r0, [pc, #456]	@ (80023f4 <decodeOn_USB+0x380>)
 800222c:	f7ff fc6a 	bl	8001b04 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	3303      	adds	r3, #3
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800223e:	2b01      	cmp	r3, #1
 8002240:	d116      	bne.n	8002270 <decodeOn_USB+0x1fc>
			Motor_Set_PER_Speed(&MotorR, RXBUF[RXCMD + 2]);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	3304      	adds	r3, #4
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002250:	b25b      	sxtb	r3, r3
 8002252:	4619      	mov	r1, r3
 8002254:	4869      	ldr	r0, [pc, #420]	@ (80023fc <decodeOn_USB+0x388>)
 8002256:	f7ff fa45 	bl	80016e4 <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 800225a:	4b66      	ldr	r3, [pc, #408]	@ (80023f4 <decodeOn_USB+0x380>)
 800225c:	220d      	movs	r2, #13
 800225e:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002262:	2301      	movs	r3, #1
 8002264:	4a64      	ldr	r2, [pc, #400]	@ (80023f8 <decodeOn_USB+0x384>)
 8002266:	21a2      	movs	r1, #162	@ 0xa2
 8002268:	4862      	ldr	r0, [pc, #392]	@ (80023f4 <decodeOn_USB+0x380>)
 800226a:	f7ff fc4b 	bl	8001b04 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 800226e:	e0dd      	b.n	800242c <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
 8002270:	2308      	movs	r3, #8
 8002272:	4a63      	ldr	r2, [pc, #396]	@ (8002400 <decodeOn_USB+0x38c>)
 8002274:	21ee      	movs	r1, #238	@ 0xee
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fc44 	bl	8001b04 <comm_sendCMD>
		break;
 800227c:	e0d6      	b.n	800242c <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	3303      	adds	r3, #3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11a      	bne.n	80022c6 <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <decodeOn_USB+0x390>)
 8002292:	891a      	ldrh	r2, [r3, #8]
 8002294:	4b54      	ldr	r3, [pc, #336]	@ (80023e8 <decodeOn_USB+0x374>)
 8002296:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80022a0:	4b51      	ldr	r3, [pc, #324]	@ (80023e8 <decodeOn_USB+0x374>)
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80022aa:	4b4f      	ldr	r3, [pc, #316]	@ (80023e8 <decodeOn_USB+0x374>)
 80022ac:	785a      	ldrb	r2, [r3, #1]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80022ba:	2303      	movs	r3, #3
 80022bc:	21a3      	movs	r1, #163	@ 0xa3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fc20 	bl	8001b04 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 80022c4:	e0b2      	b.n	800242c <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	3303      	adds	r3, #3
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d11a      	bne.n	800230e <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 80022d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002408 <decodeOn_USB+0x394>)
 80022da:	891a      	ldrh	r2, [r3, #8]
 80022dc:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <decodeOn_USB+0x374>)
 80022de:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80022e8:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <decodeOn_USB+0x374>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80022f2:	4b3d      	ldr	r3, [pc, #244]	@ (80023e8 <decodeOn_USB+0x374>)
 80022f4:	785a      	ldrb	r2, [r3, #1]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002302:	2303      	movs	r3, #3
 8002304:	21a3      	movs	r1, #163	@ 0xa3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fbfc 	bl	8001b04 <comm_sendCMD>
		break;
 800230c:	e08e      	b.n	800242c <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
 800230e:	230a      	movs	r3, #10
 8002310:	4a3e      	ldr	r2, [pc, #248]	@ (800240c <decodeOn_USB+0x398>)
 8002312:	21ee      	movs	r1, #238	@ 0xee
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff fbf5 	bl	8001b04 <comm_sendCMD>
		break;
 800231a:	e087      	b.n	800242c <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 800231c:	4b3c      	ldr	r3, [pc, #240]	@ (8002410 <decodeOn_USB+0x39c>)
 800231e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002322:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <decodeOn_USB+0x374>)
 8002324:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8002326:	4b30      	ldr	r3, [pc, #192]	@ (80023e8 <decodeOn_USB+0x374>)
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8002330:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <decodeOn_USB+0x374>)
 8002332:	785a      	ldrb	r2, [r3, #1]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 800233a:	4b35      	ldr	r3, [pc, #212]	@ (8002410 <decodeOn_USB+0x39c>)
 800233c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002340:	4b29      	ldr	r3, [pc, #164]	@ (80023e8 <decodeOn_USB+0x374>)
 8002342:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8002344:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <decodeOn_USB+0x374>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 800234e:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <decodeOn_USB+0x374>)
 8002350:	785a      	ldrb	r2, [r3, #1]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8002358:	4b2d      	ldr	r3, [pc, #180]	@ (8002410 <decodeOn_USB+0x39c>)
 800235a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800235e:	4b22      	ldr	r3, [pc, #136]	@ (80023e8 <decodeOn_USB+0x374>)
 8002360:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <decodeOn_USB+0x374>)
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 800236c:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <decodeOn_USB+0x374>)
 800236e:	785a      	ldrb	r2, [r3, #1]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8002376:	4b26      	ldr	r3, [pc, #152]	@ (8002410 <decodeOn_USB+0x39c>)
 8002378:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <decodeOn_USB+0x374>)
 800237e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8002380:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <decodeOn_USB+0x374>)
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <decodeOn_USB+0x374>)
 800238c:	785a      	ldrb	r2, [r3, #1]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8002394:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <decodeOn_USB+0x39c>)
 8002396:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <decodeOn_USB+0x374>)
 800239c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <decodeOn_USB+0x374>)
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <decodeOn_USB+0x374>)
 80023aa:	785a      	ldrb	r2, [r3, #1]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 80023b2:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <decodeOn_USB+0x39c>)
 80023b4:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <decodeOn_USB+0x374>)
 80023ba:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <decodeOn_USB+0x374>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <decodeOn_USB+0x374>)
 80023c8:	785a      	ldrb	r2, [r3, #1]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80023d6:	230c      	movs	r3, #12
 80023d8:	21a4      	movs	r1, #164	@ 0xa4
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fb92 	bl	8001b04 <comm_sendCMD>
		break;
 80023e0:	e024      	b.n	800242c <decodeOn_USB+0x3b8>
 80023e2:	bf00      	nop
 80023e4:	20000f74 	.word	0x20000f74
 80023e8:	20000ac8 	.word	0x20000ac8
 80023ec:	08011358 	.word	0x08011358
 80023f0:	20000ad0 	.word	0x20000ad0
 80023f4:	20000f98 	.word	0x20000f98
 80023f8:	200011a8 	.word	0x200011a8
 80023fc:	20000ae8 	.word	0x20000ae8
 8002400:	08011360 	.word	0x08011360
 8002404:	20000b00 	.word	0x20000b00
 8002408:	20000b0c 	.word	0x20000b0c
 800240c:	0801136c 	.word	0x0801136c
 8002410:	20000b18 	.word	0x20000b18
	default:
		comm_sendCMD(data, SYSERROR, (uint8_t*)"NO CMD", 6);
 8002414:	2306      	movs	r3, #6
 8002416:	4a07      	ldr	r2, [pc, #28]	@ (8002434 <decodeOn_USB+0x3c0>)
 8002418:	21ee      	movs	r1, #238	@ 0xee
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff fb72 	bl	8001b04 <comm_sendCMD>
		break;
 8002420:	e004      	b.n	800242c <decodeOn_USB+0x3b8>
		break;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <decodeOn_USB+0x3b8>
		break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <decodeOn_USB+0x3b8>
		break;
 800242a:	bf00      	nop
	}
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	08011378 	.word	0x08011378

08002438 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]

}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <task_10ms>:

void task_10ms(){
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

	Debouncer_Task();
 8002454:	f7fe f9da 	bl	800080c <Debouncer_Task>


	Encoder_Task(&EncoderL);
 8002458:	483c      	ldr	r0, [pc, #240]	@ (800254c <task_10ms+0xfc>)
 800245a:	f7ff f8d3 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 800245e:	483c      	ldr	r0, [pc, #240]	@ (8002550 <task_10ms+0x100>)
 8002460:	f7ff f8d0 	bl	8001604 <Encoder_Task>


	Motor_Break_Timeout(&MotorL);
 8002464:	483b      	ldr	r0, [pc, #236]	@ (8002554 <task_10ms+0x104>)
 8002466:	f7ff f9a2 	bl	80017ae <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800246a:	483b      	ldr	r0, [pc, #236]	@ (8002558 <task_10ms+0x108>)
 800246c:	f7ff f99f 	bl	80017ae <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8002470:	4836      	ldr	r0, [pc, #216]	@ (800254c <task_10ms+0xfc>)
 8002472:	f7ff f8c7 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 8002476:	4836      	ldr	r0, [pc, #216]	@ (8002550 <task_10ms+0x100>)
 8002478:	f7ff f8c4 	bl	8001604 <Encoder_Task>

	IS10MS = FALSE;
 800247c:	4a37      	ldr	r2, [pc, #220]	@ (800255c <task_10ms+0x10c>)
 800247e:	7813      	ldrb	r3, [r2, #0]
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	7013      	strb	r3, [r2, #0]


	is100ms1--;
 8002486:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <task_10ms+0x110>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	3b01      	subs	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <task_10ms+0x110>)
 8002490:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 8002492:	4b33      	ldr	r3, [pc, #204]	@ (8002560 <task_10ms+0x110>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d127      	bne.n	80024ea <task_10ms+0x9a>
		is100ms1 = 10;
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <task_10ms+0x110>)
 800249c:	220a      	movs	r2, #10
 800249e:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80024a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024a4:	482f      	ldr	r0, [pc, #188]	@ (8002564 <task_10ms+0x114>)
 80024a6:	f002 fff4 	bl	8005492 <HAL_GPIO_TogglePin>

		is1s--;
 80024aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002568 <task_10ms+0x118>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <task_10ms+0x118>)
 80024b4:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80024b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002568 <task_10ms+0x118>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <task_10ms+0x9a>
			is1s = 10;
 80024be:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <task_10ms+0x118>)
 80024c0:	220a      	movs	r2, #10
 80024c2:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 80024c4:	4821      	ldr	r0, [pc, #132]	@ (800254c <task_10ms+0xfc>)
 80024c6:	f7ff f8dd 	bl	8001684 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 80024ca:	4821      	ldr	r0, [pc, #132]	@ (8002550 <task_10ms+0x100>)
 80024cc:	f7ff f8da 	bl	8001684 <Encoder_1s_Elapsed>



			is30s--;
 80024d0:	4b26      	ldr	r3, [pc, #152]	@ (800256c <task_10ms+0x11c>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b24      	ldr	r3, [pc, #144]	@ (800256c <task_10ms+0x11c>)
 80024da:	801a      	strh	r2, [r3, #0]
			if(!is30s){
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <task_10ms+0x11c>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <task_10ms+0x9a>
				is30s = 30;
 80024e4:	4b21      	ldr	r3, [pc, #132]	@ (800256c <task_10ms+0x11c>)
 80024e6:	221e      	movs	r2, #30
 80024e8:	801a      	strh	r2, [r3, #0]
		}
	}



	Display.refreshCounter--;
 80024ea:	4b21      	ldr	r3, [pc, #132]	@ (8002570 <task_10ms+0x120>)
 80024ec:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002570 <task_10ms+0x120>)
 80024f6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter){
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <task_10ms+0x120>)
 80024fc:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <task_10ms+0xc4>
		Display.refreshCounter = Display.refreshRate;
 8002504:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <task_10ms+0x120>)
 8002506:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800250a:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <task_10ms+0x120>)
 800250c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8002510:	f7ff fbf0 	bl	8001cf4 <OLED_Print_Data_Task>
	}

	Motor_Break_Timeout(&MotorL);
 8002514:	480f      	ldr	r0, [pc, #60]	@ (8002554 <task_10ms+0x104>)
 8002516:	f7ff f94a 	bl	80017ae <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800251a:	480f      	ldr	r0, [pc, #60]	@ (8002558 <task_10ms+0x108>)
 800251c:	f7ff f947 	bl	80017ae <Motor_Break_Timeout>

	Debouncer_Task();
 8002520:	f7fe f974 	bl	800080c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 8002524:	480b      	ldr	r0, [pc, #44]	@ (8002554 <task_10ms+0x104>)
 8002526:	f7ff f942 	bl	80017ae <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800252a:	480b      	ldr	r0, [pc, #44]	@ (8002558 <task_10ms+0x108>)
 800252c:	f7ff f93f 	bl	80017ae <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8002530:	4806      	ldr	r0, [pc, #24]	@ (800254c <task_10ms+0xfc>)
 8002532:	f7ff f867 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 8002536:	4806      	ldr	r0, [pc, #24]	@ (8002550 <task_10ms+0x100>)
 8002538:	f7ff f864 	bl	8001604 <Encoder_Task>
	IS10MS = FALSE;
 800253c:	4a07      	ldr	r2, [pc, #28]	@ (800255c <task_10ms+0x10c>)
 800253e:	7813      	ldrb	r3, [r2, #0]
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	7013      	strb	r3, [r2, #0]


}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000b00 	.word	0x20000b00
 8002550:	20000b0c 	.word	0x20000b0c
 8002554:	20000ad0 	.word	0x20000ad0
 8002558:	20000ae8 	.word	0x20000ae8
 800255c:	20000ac4 	.word	0x20000ac4
 8002560:	20000008 	.word	0x20000008
 8002564:	40020800 	.word	0x40020800
 8002568:	20000009 	.word	0x20000009
 800256c:	2000000c 	.word	0x2000000c
 8002570:	20000b60 	.word	0x20000b60

08002574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800257a:	f001 faf5 	bl	8003b68 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 800257e:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <main+0x158>)
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  Display.isInit = FALSE;
 8002586:	4b52      	ldr	r3, [pc, #328]	@ (80026d0 <main+0x15c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800258c:	4b50      	ldr	r3, [pc, #320]	@ (80026d0 <main+0x15c>)
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002594:	f000 f8d2 	bl	800273c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002598:	f000 fb64 	bl	8002c64 <MX_GPIO_Init>
  MX_DMA_Init();
 800259c:	f000 fb24 	bl	8002be8 <MX_DMA_Init>
  MX_ADC1_Init();
 80025a0:	f000 f936 	bl	8002810 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80025a4:	f00d fc98 	bl	800fed8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80025a8:	f000 fa22 	bl	80029f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80025ac:	f000 f9f2 	bl	8002994 <MX_I2C1_Init>
  MX_TIM3_Init();
 80025b0:	f000 fa6e 	bl	8002a90 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80025b4:	f000 faee 	bl	8002b94 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80025b8:	4a46      	ldr	r2, [pc, #280]	@ (80026d4 <main+0x160>)
 80025ba:	4947      	ldr	r1, [pc, #284]	@ (80026d8 <main+0x164>)
 80025bc:	4847      	ldr	r0, [pc, #284]	@ (80026dc <main+0x168>)
 80025be:	f7ff f911 	bl	80017e4 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80025c2:	4847      	ldr	r0, [pc, #284]	@ (80026e0 <main+0x16c>)
 80025c4:	f00d fdda 	bl	801017c <CDC_Attach_Rx>

  HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 80025c8:	2201      	movs	r2, #1
 80025ca:	4946      	ldr	r1, [pc, #280]	@ (80026e4 <main+0x170>)
 80025cc:	4846      	ldr	r0, [pc, #280]	@ (80026e8 <main+0x174>)
 80025ce:	f009 fa45 	bl	800ba5c <HAL_UART_Receive_IT>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80025d2:	f7fe f8b3 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80025d6:	4945      	ldr	r1, [pc, #276]	@ (80026ec <main+0x178>)
 80025d8:	4845      	ldr	r0, [pc, #276]	@ (80026f0 <main+0x17c>)
 80025da:	f7fe f8e3 	bl	80007a4 <Debounce_Add>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b44      	ldr	r3, [pc, #272]	@ (80026f4 <main+0x180>)
 80025e4:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  Init_Timing();
 80025e6:	f000 fc1f 	bl	8002e28 <Init_Timing>


  Init_MPU6050();
 80025ea:	f000 fc61 	bl	8002eb0 <Init_MPU6050>
	  }
  }*/
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 80025ee:	f242 7310 	movw	r3, #10000	@ 0x2710
 80025f2:	2201      	movs	r2, #1
 80025f4:	2178      	movs	r1, #120	@ 0x78
 80025f6:	4840      	ldr	r0, [pc, #256]	@ (80026f8 <main+0x184>)
 80025f8:	f003 fff0 	bl	80065dc <HAL_I2C_IsDeviceReady>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <main+0x9c>
	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"I2C READY", 9);
 8002602:	2309      	movs	r3, #9
 8002604:	4a3d      	ldr	r2, [pc, #244]	@ (80026fc <main+0x188>)
 8002606:	21ee      	movs	r1, #238	@ 0xee
 8002608:	4834      	ldr	r0, [pc, #208]	@ (80026dc <main+0x168>)
 800260a:	f7ff fa7b 	bl	8001b04 <comm_sendCMD>
 800260e:	e022      	b.n	8002656 <main+0xe2>
  }else{
	  Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002610:	493b      	ldr	r1, [pc, #236]	@ (8002700 <main+0x18c>)
 8002612:	483c      	ldr	r0, [pc, #240]	@ (8002704 <main+0x190>)
 8002614:	f7fe fb22 	bl	8000c5c <Display_Set_I2C_Master_Transmit>
	  if(Display_Init() != SYS_OK){
 8002618:	f7fe fb36 	bl	8000c88 <Display_Init>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <main+0xbc>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002622:	2309      	movs	r3, #9
 8002624:	4a38      	ldr	r2, [pc, #224]	@ (8002708 <main+0x194>)
 8002626:	21ee      	movs	r1, #238	@ 0xee
 8002628:	482c      	ldr	r0, [pc, #176]	@ (80026dc <main+0x168>)
 800262a:	f7ff fa6b 	bl	8001b04 <comm_sendCMD>
 800262e:	e012      	b.n	8002656 <main+0xe2>
	  }else{
		  Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002630:	2301      	movs	r3, #1
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	2340      	movs	r3, #64	@ 0x40
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	4a34      	ldr	r2, [pc, #208]	@ (800270c <main+0x198>)
 800263c:	2100      	movs	r1, #0
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe fdbc 	bl	80011bc <Display_DrawBitmap>
		  Display.isInit = TRUE;
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <main+0x15c>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
		  Display.timer = HAL_GetTick();
 800264a:	f001 faf3 	bl	8003c34 <HAL_GetTick>
 800264e:	4603      	mov	r3, r0
 8002650:	4a1f      	ldr	r2, [pc, #124]	@ (80026d0 <main+0x15c>)
 8002652:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
	  }
  }
  /* FIN INICIALIZACIÓN DISPLAY */


  Init_Display();
 8002656:	f000 fc63 	bl	8002f20 <Init_Display>

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 800265a:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <main+0x19c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	b29b      	uxth	r3, r3
 8002662:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <main+0x1a0>)
 8002664:	492c      	ldr	r1, [pc, #176]	@ (8002718 <main+0x1a4>)
 8002666:	482d      	ldr	r0, [pc, #180]	@ (800271c <main+0x1a8>)
 8002668:	f7ff f81d 	bl	80016a6 <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 800266c:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <main+0x19c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	b29b      	uxth	r3, r3
 8002674:	4a2a      	ldr	r2, [pc, #168]	@ (8002720 <main+0x1ac>)
 8002676:	492b      	ldr	r1, [pc, #172]	@ (8002724 <main+0x1b0>)
 8002678:	482b      	ldr	r0, [pc, #172]	@ (8002728 <main+0x1b4>)
 800267a:	f7ff f814 	bl	80016a6 <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 800267e:	210a      	movs	r1, #10
 8002680:	482a      	ldr	r0, [pc, #168]	@ (800272c <main+0x1b8>)
 8002682:	f7fe ffa0 	bl	80015c6 <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8002686:	210a      	movs	r1, #10
 8002688:	4829      	ldr	r0, [pc, #164]	@ (8002730 <main+0x1bc>)
 800268a:	f7fe ff9c 	bl	80015c6 <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  Car.state = IDLE;
 800268e:	4b29      	ldr	r3, [pc, #164]	@ (8002734 <main+0x1c0>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 8002694:	4811      	ldr	r0, [pc, #68]	@ (80026dc <main+0x168>)
 8002696:	f7ff f8d9 	bl	800184c <Comm_Task>
	Display_UpdateScreen_Task();
 800269a:	f7fe fc67 	bl	8000f6c <Display_UpdateScreen_Task>
	  /* END USER TASK */

	if(IS10MS){
 800269e:	4b26      	ldr	r3, [pc, #152]	@ (8002738 <main+0x1c4>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <main+0x13c>
		task_10ms();
 80026ac:	f7ff fed0 	bl	8002450 <task_10ms>
	}

	switch(Car.state){
 80026b0:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <main+0x1c0>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d005      	beq.n	80026c4 <main+0x150>
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	dceb      	bgt.n	8002694 <main+0x120>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <main+0x154>
 80026c0:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 80026c2:	e002      	b.n	80026ca <main+0x156>
	case GO_FROM_TO:

		break;
 80026c4:	bf00      	nop
 80026c6:	e7e5      	b.n	8002694 <main+0x120>
		break;
 80026c8:	bf00      	nop
	Comm_Task(&USB.data);
 80026ca:	e7e3      	b.n	8002694 <main+0x120>
 80026cc:	20000b18 	.word	0x20000b18
 80026d0:	20000b60 	.word	0x20000b60
 80026d4:	08003215 	.word	0x08003215
 80026d8:	08002075 	.word	0x08002075
 80026dc:	20000f98 	.word	0x20000f98
 80026e0:	08003289 	.word	0x08003289
 80026e4:	200011cd 	.word	0x200011cd
 80026e8:	20000a78 	.word	0x20000a78
 80026ec:	08002439 	.word	0x08002439
 80026f0:	080031fd 	.word	0x080031fd
 80026f4:	20000acc 	.word	0x20000acc
 80026f8:	200008d4 	.word	0x200008d4
 80026fc:	08011380 	.word	0x08011380
 8002700:	08003149 	.word	0x08003149
 8002704:	0800310d 	.word	0x0800310d
 8002708:	0801138c 	.word	0x0801138c
 800270c:	080115b0 	.word	0x080115b0
 8002710:	20000a30 	.word	0x20000a30
 8002714:	080032e1 	.word	0x080032e1
 8002718:	08003425 	.word	0x08003425
 800271c:	20000ad0 	.word	0x20000ad0
 8002720:	08003385 	.word	0x08003385
 8002724:	08003449 	.word	0x08003449
 8002728:	20000ae8 	.word	0x20000ae8
 800272c:	20000b00 	.word	0x20000b00
 8002730:	20000b0c 	.word	0x20000b0c
 8002734:	200011cc 	.word	0x200011cc
 8002738:	20000ac4 	.word	0x20000ac4

0800273c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b094      	sub	sp, #80	@ 0x50
 8002740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002742:	f107 0320 	add.w	r3, r7, #32
 8002746:	2230      	movs	r2, #48	@ 0x30
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f00e f962 	bl	8010a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	4b28      	ldr	r3, [pc, #160]	@ (8002808 <SystemClock_Config+0xcc>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	4a27      	ldr	r2, [pc, #156]	@ (8002808 <SystemClock_Config+0xcc>)
 800276a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002770:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <SystemClock_Config+0xcc>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <SystemClock_Config+0xd0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a21      	ldr	r2, [pc, #132]	@ (800280c <SystemClock_Config+0xd0>)
 8002786:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <SystemClock_Config+0xd0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002798:	2301      	movs	r3, #1
 800279a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800279c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a2:	2302      	movs	r3, #2
 80027a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80027ac:	2319      	movs	r3, #25
 80027ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80027b0:	23c0      	movs	r3, #192	@ 0xc0
 80027b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b4:	2302      	movs	r3, #2
 80027b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027b8:	2304      	movs	r3, #4
 80027ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	4618      	mov	r0, r3
 80027c2:	f007 fcc5 	bl	800a150 <HAL_RCC_OscConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027cc:	f000 fe4e 	bl	800346c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d0:	230f      	movs	r3, #15
 80027d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d4:	2302      	movs	r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027e6:	f107 030c 	add.w	r3, r7, #12
 80027ea:	2103      	movs	r1, #3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f007 ff27 	bl	800a640 <HAL_RCC_ClockConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027f8:	f000 fe38 	bl	800346c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80027fc:	f008 f806 	bl	800a80c <HAL_RCC_EnableCSS>
}
 8002800:	bf00      	nop
 8002802:	3750      	adds	r7, #80	@ 0x50
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000

08002810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002816:	463b      	mov	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002822:	4b59      	ldr	r3, [pc, #356]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002824:	4a59      	ldr	r2, [pc, #356]	@ (800298c <MX_ADC1_Init+0x17c>)
 8002826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002828:	4b57      	ldr	r3, [pc, #348]	@ (8002988 <MX_ADC1_Init+0x178>)
 800282a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800282e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002830:	4b55      	ldr	r3, [pc, #340]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002836:	4b54      	ldr	r3, [pc, #336]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002838:	2201      	movs	r2, #1
 800283a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800283c:	4b52      	ldr	r3, [pc, #328]	@ (8002988 <MX_ADC1_Init+0x178>)
 800283e:	2200      	movs	r2, #0
 8002840:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002842:	4b51      	ldr	r3, [pc, #324]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800284a:	4b4f      	ldr	r3, [pc, #316]	@ (8002988 <MX_ADC1_Init+0x178>)
 800284c:	2200      	movs	r2, #0
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002850:	4b4d      	ldr	r3, [pc, #308]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002852:	4a4f      	ldr	r2, [pc, #316]	@ (8002990 <MX_ADC1_Init+0x180>)
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002856:	4b4c      	ldr	r3, [pc, #304]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 800285c:	4b4a      	ldr	r3, [pc, #296]	@ (8002988 <MX_ADC1_Init+0x178>)
 800285e:	2209      	movs	r2, #9
 8002860:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002862:	4b49      	ldr	r3, [pc, #292]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800286a:	4b47      	ldr	r3, [pc, #284]	@ (8002988 <MX_ADC1_Init+0x178>)
 800286c:	2201      	movs	r2, #1
 800286e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002870:	4845      	ldr	r0, [pc, #276]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002872:	f001 fa0f 	bl	8003c94 <HAL_ADC_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800287c:	f000 fdf6 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002880:	2301      	movs	r3, #1
 8002882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002888:	2303      	movs	r3, #3
 800288a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	483d      	ldr	r0, [pc, #244]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002892:	f001 fc61 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800289c:	f000 fde6 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80028a0:	2302      	movs	r3, #2
 80028a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80028a4:	2302      	movs	r3, #2
 80028a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a8:	463b      	mov	r3, r7
 80028aa:	4619      	mov	r1, r3
 80028ac:	4836      	ldr	r0, [pc, #216]	@ (8002988 <MX_ADC1_Init+0x178>)
 80028ae:	f001 fc53 	bl	8004158 <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80028b8:	f000 fdd8 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028bc:	2303      	movs	r3, #3
 80028be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80028c0:	2303      	movs	r3, #3
 80028c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028c4:	463b      	mov	r3, r7
 80028c6:	4619      	mov	r1, r3
 80028c8:	482f      	ldr	r0, [pc, #188]	@ (8002988 <MX_ADC1_Init+0x178>)
 80028ca:	f001 fc45 	bl	8004158 <HAL_ADC_ConfigChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80028d4:	f000 fdca 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028d8:	2304      	movs	r3, #4
 80028da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80028dc:	2304      	movs	r3, #4
 80028de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	4619      	mov	r1, r3
 80028e4:	4828      	ldr	r0, [pc, #160]	@ (8002988 <MX_ADC1_Init+0x178>)
 80028e6:	f001 fc37 	bl	8004158 <HAL_ADC_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80028f0:	f000 fdbc 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028f4:	2305      	movs	r3, #5
 80028f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80028f8:	2305      	movs	r3, #5
 80028fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4821      	ldr	r0, [pc, #132]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002902:	f001 fc29 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800290c:	f000 fdae 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002910:	2306      	movs	r3, #6
 8002912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002914:	2306      	movs	r3, #6
 8002916:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002918:	463b      	mov	r3, r7
 800291a:	4619      	mov	r1, r3
 800291c:	481a      	ldr	r0, [pc, #104]	@ (8002988 <MX_ADC1_Init+0x178>)
 800291e:	f001 fc1b 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002928:	f000 fda0 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800292c:	2307      	movs	r3, #7
 800292e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002930:	2307      	movs	r3, #7
 8002932:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002934:	463b      	mov	r3, r7
 8002936:	4619      	mov	r1, r3
 8002938:	4813      	ldr	r0, [pc, #76]	@ (8002988 <MX_ADC1_Init+0x178>)
 800293a:	f001 fc0d 	bl	8004158 <HAL_ADC_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002944:	f000 fd92 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002948:	2308      	movs	r3, #8
 800294a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800294c:	2308      	movs	r3, #8
 800294e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002950:	463b      	mov	r3, r7
 8002952:	4619      	mov	r1, r3
 8002954:	480c      	ldr	r0, [pc, #48]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002956:	f001 fbff 	bl	8004158 <HAL_ADC_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002960:	f000 fd84 	bl	800346c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002964:	2309      	movs	r3, #9
 8002966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002968:	2309      	movs	r3, #9
 800296a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800296c:	463b      	mov	r3, r7
 800296e:	4619      	mov	r1, r3
 8002970:	4805      	ldr	r0, [pc, #20]	@ (8002988 <MX_ADC1_Init+0x178>)
 8002972:	f001 fbf1 	bl	8004158 <HAL_ADC_ConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800297c:	f000 fd76 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000082c 	.word	0x2000082c
 800298c:	40012000 	.word	0x40012000
 8002990:	0f000001 	.word	0x0f000001

08002994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002998:	4b12      	ldr	r3, [pc, #72]	@ (80029e4 <MX_I2C1_Init+0x50>)
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <MX_I2C1_Init+0x54>)
 800299c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800299e:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029a0:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <MX_I2C1_Init+0x58>)
 80029a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029a4:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b0:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b8:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029d0:	4804      	ldr	r0, [pc, #16]	@ (80029e4 <MX_I2C1_Init+0x50>)
 80029d2:	f002 fd91 	bl	80054f8 <HAL_I2C_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029dc:	f000 fd46 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200008d4 	.word	0x200008d4
 80029e8:	40005400 	.word	0x40005400
 80029ec:	00061a80 	.word	0x00061a80

080029f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
 8002a00:	609a      	str	r2, [r3, #8]
 8002a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a04:	463b      	mov	r3, r7
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a8c <MX_TIM1_Init+0x9c>)
 8002a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a20:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a26:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a38:	4813      	ldr	r0, [pc, #76]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a3a:	f008 f808 	bl	800aa4e <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002a44:	f000 fd12 	bl	800346c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	4619      	mov	r1, r3
 8002a54:	480c      	ldr	r0, [pc, #48]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a56:	f008 fb67 	bl	800b128 <HAL_TIM_ConfigClockSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002a60:	f000 fd04 	bl	800346c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	@ (8002a88 <MX_TIM1_Init+0x98>)
 8002a72:	f008 ff21 	bl	800b8b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a7c:	f000 fcf6 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200009e8 	.word	0x200009e8
 8002a8c:	40010000 	.word	0x40010000

08002a90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	@ 0x38
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa4:	f107 0320 	add.w	r3, r7, #32
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ac0:	4b32      	ldr	r3, [pc, #200]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002ac2:	4a33      	ldr	r2, [pc, #204]	@ (8002b90 <MX_TIM3_Init+0x100>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8002ac6:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002ac8:	220f      	movs	r2, #15
 8002aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002acc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002ad4:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002ad8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ada:	4b2c      	ldr	r3, [pc, #176]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ae6:	4829      	ldr	r0, [pc, #164]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002ae8:	f007 ffb1 	bl	800aa4e <HAL_TIM_Base_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002af2:	f000 fcbb 	bl	800346c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002afc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b00:	4619      	mov	r1, r3
 8002b02:	4822      	ldr	r0, [pc, #136]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002b04:	f008 fb10 	bl	800b128 <HAL_TIM_ConfigClockSource>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002b0e:	f000 fcad 	bl	800346c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002b12:	481e      	ldr	r0, [pc, #120]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002b14:	f008 f84c 	bl	800abb0 <HAL_TIM_PWM_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002b1e:	f000 fca5 	bl	800346c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b2a:	f107 0320 	add.w	r3, r7, #32
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4816      	ldr	r0, [pc, #88]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002b32:	f008 fec1 	bl	800b8b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002b3c:	f000 fc96 	bl	800346c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b40:	2360      	movs	r3, #96	@ 0x60
 8002b42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	4619      	mov	r1, r3
 8002b56:	480d      	ldr	r0, [pc, #52]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002b58:	f008 fa24 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002b62:	f000 fc83 	bl	800346c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4807      	ldr	r0, [pc, #28]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002b6e:	f008 fa19 	bl	800afa4 <HAL_TIM_PWM_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002b78:	f000 fc78 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b7c:	4803      	ldr	r0, [pc, #12]	@ (8002b8c <MX_TIM3_Init+0xfc>)
 8002b7e:	f000 fe49 	bl	8003814 <HAL_TIM_MspPostInit>

}
 8002b82:	bf00      	nop
 8002b84:	3738      	adds	r7, #56	@ 0x38
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000a30 	.word	0x20000a30
 8002b90:	40000400 	.word	0x40000400

08002b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002b9a:	4a12      	ldr	r2, [pc, #72]	@ (8002be4 <MX_USART1_UART_Init+0x50>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bca:	4805      	ldr	r0, [pc, #20]	@ (8002be0 <MX_USART1_UART_Init+0x4c>)
 8002bcc:	f008 fef6 	bl	800b9bc <HAL_UART_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bd6:	f000 fc49 	bl	800346c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000a78 	.word	0x20000a78
 8002be4:	40011000 	.word	0x40011000

08002be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <MX_DMA_Init+0x78>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c60 <MX_DMA_Init+0x78>)
 8002bf8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <MX_DMA_Init+0x78>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_DMA_Init+0x78>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <MX_DMA_Init+0x78>)
 8002c14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_DMA_Init+0x78>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	200b      	movs	r0, #11
 8002c2c:	f001 fe29 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c30:	200b      	movs	r0, #11
 8002c32:	f001 fe42 	bl	80048ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	200c      	movs	r0, #12
 8002c3c:	f001 fe21 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c40:	200c      	movs	r0, #12
 8002c42:	f001 fe3a 	bl	80048ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2038      	movs	r0, #56	@ 0x38
 8002c4c:	f001 fe19 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c50:	2038      	movs	r0, #56	@ 0x38
 8002c52:	f001 fe32 	bl	80048ba <HAL_NVIC_EnableIRQ>

}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	4b66      	ldr	r3, [pc, #408]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a65      	ldr	r2, [pc, #404]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b58      	ldr	r3, [pc, #352]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a57      	ldr	r2, [pc, #348]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b55      	ldr	r3, [pc, #340]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	4b51      	ldr	r3, [pc, #324]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a50      	ldr	r2, [pc, #320]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b4e      	ldr	r3, [pc, #312]	@ (8002e18 <MX_GPIO_Init+0x1b4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cf0:	484a      	ldr	r0, [pc, #296]	@ (8002e1c <MX_GPIO_Init+0x1b8>)
 8002cf2:	f002 fbb5 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002cfc:	4848      	ldr	r0, [pc, #288]	@ (8002e20 <MX_GPIO_Init+0x1bc>)
 8002cfe:	f002 fbaf 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2108      	movs	r1, #8
 8002d06:	4847      	ldr	r0, [pc, #284]	@ (8002e24 <MX_GPIO_Init+0x1c0>)
 8002d08:	f002 fbaa 	bl	8005460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002d0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	483d      	ldr	r0, [pc, #244]	@ (8002e1c <MX_GPIO_Init+0x1b8>)
 8002d26:	f002 f9ff 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002d36:	f107 0314 	add.w	r3, r7, #20
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4838      	ldr	r0, [pc, #224]	@ (8002e20 <MX_GPIO_Init+0x1bc>)
 8002d3e:	f002 f9f3 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8002d42:	2304      	movs	r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	4833      	ldr	r0, [pc, #204]	@ (8002e24 <MX_GPIO_Init+0x1c0>)
 8002d56:	f002 f9e7 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002d6a:	f107 0314 	add.w	r3, r7, #20
 8002d6e:	4619      	mov	r1, r3
 8002d70:	482c      	ldr	r0, [pc, #176]	@ (8002e24 <MX_GPIO_Init+0x1c0>)
 8002d72:	f002 f9d9 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d76:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d88:	2305      	movs	r3, #5
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	4619      	mov	r1, r3
 8002d92:	4824      	ldr	r0, [pc, #144]	@ (8002e24 <MX_GPIO_Init+0x1c0>)
 8002d94:	f002 f9c8 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	4619      	mov	r1, r3
 8002dae:	481c      	ldr	r0, [pc, #112]	@ (8002e20 <MX_GPIO_Init+0x1bc>)
 8002db0:	f002 f9ba 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8002db4:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4814      	ldr	r0, [pc, #80]	@ (8002e20 <MX_GPIO_Init+0x1bc>)
 8002dce:	f002 f9ab 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dde:	2300      	movs	r3, #0
 8002de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8002de2:	f107 0314 	add.w	r3, r7, #20
 8002de6:	4619      	mov	r1, r3
 8002de8:	480e      	ldr	r0, [pc, #56]	@ (8002e24 <MX_GPIO_Init+0x1c0>)
 8002dea:	f002 f99d 	bl	8005128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2017      	movs	r0, #23
 8002df4:	f001 fd45 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002df8:	2017      	movs	r0, #23
 8002dfa:	f001 fd5e 	bl	80048ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	2028      	movs	r0, #40	@ 0x28
 8002e04:	f001 fd3d 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e08:	2028      	movs	r0, #40	@ 0x28
 8002e0a:	f001 fd56 	bl	80048ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400

08002e28 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8002e2c:	4819      	ldr	r0, [pc, #100]	@ (8002e94 <Init_Timing+0x6c>)
 8002e2e:	f007 fe5d 	bl	800aaec <HAL_TIM_Base_Start_IT>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8002e38:	2309      	movs	r3, #9
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <Init_Timing+0x70>)
 8002e3c:	21ee      	movs	r1, #238	@ 0xee
 8002e3e:	4817      	ldr	r0, [pc, #92]	@ (8002e9c <Init_Timing+0x74>)
 8002e40:	f7fe fe60 	bl	8001b04 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8002e44:	4816      	ldr	r0, [pc, #88]	@ (8002ea0 <Init_Timing+0x78>)
 8002e46:	f007 fe51 	bl	800aaec <HAL_TIM_Base_Start_IT>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002e50:	230e      	movs	r3, #14
 8002e52:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <Init_Timing+0x7c>)
 8002e54:	21ee      	movs	r1, #238	@ 0xee
 8002e56:	4811      	ldr	r0, [pc, #68]	@ (8002e9c <Init_Timing+0x74>)
 8002e58:	f7fe fe54 	bl	8001b04 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4810      	ldr	r0, [pc, #64]	@ (8002ea0 <Init_Timing+0x78>)
 8002e60:	f007 ff00 	bl	800ac64 <HAL_TIM_PWM_Start>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002e6a:	230e      	movs	r3, #14
 8002e6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea8 <Init_Timing+0x80>)
 8002e6e:	21ee      	movs	r1, #238	@ 0xee
 8002e70:	480a      	ldr	r0, [pc, #40]	@ (8002e9c <Init_Timing+0x74>)
 8002e72:	f7fe fe47 	bl	8001b04 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8002e76:	2104      	movs	r1, #4
 8002e78:	4809      	ldr	r0, [pc, #36]	@ (8002ea0 <Init_Timing+0x78>)
 8002e7a:	f007 fef3 	bl	800ac64 <HAL_TIM_PWM_Start>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8002e84:	230e      	movs	r3, #14
 8002e86:	4a09      	ldr	r2, [pc, #36]	@ (8002eac <Init_Timing+0x84>)
 8002e88:	21ee      	movs	r1, #238	@ 0xee
 8002e8a:	4804      	ldr	r0, [pc, #16]	@ (8002e9c <Init_Timing+0x74>)
 8002e8c:	f7fe fe3a 	bl	8001b04 <comm_sendCMD>
	  }
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200009e8 	.word	0x200009e8
 8002e98:	08011398 	.word	0x08011398
 8002e9c:	20000f98 	.word	0x20000f98
 8002ea0:	20000a30 	.word	0x20000a30
 8002ea4:	080113a4 	.word	0x080113a4
 8002ea8:	080113b4 	.word	0x080113b4
 8002eac:	080113c4 	.word	0x080113c4

08002eb0 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8002eb4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002eb8:	2201      	movs	r2, #1
 8002eba:	21d0      	movs	r1, #208	@ 0xd0
 8002ebc:	4811      	ldr	r0, [pc, #68]	@ (8002f04 <Init_MPU6050+0x54>)
 8002ebe:	f003 fb8d 	bl	80065dc <HAL_I2C_IsDeviceReady>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8002ec8:	230d      	movs	r3, #13
 8002eca:	4a0f      	ldr	r2, [pc, #60]	@ (8002f08 <Init_MPU6050+0x58>)
 8002ecc:	21ee      	movs	r1, #238	@ 0xee
 8002ece:	480f      	ldr	r0, [pc, #60]	@ (8002f0c <Init_MPU6050+0x5c>)
 8002ed0:	f7fe fe18 	bl	8001b04 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8002ed4:	e013      	b.n	8002efe <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 8002ed6:	490e      	ldr	r1, [pc, #56]	@ (8002f10 <Init_MPU6050+0x60>)
 8002ed8:	480e      	ldr	r0, [pc, #56]	@ (8002f14 <Init_MPU6050+0x64>)
 8002eda:	f7fd fcc9 	bl	8000870 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8002ede:	480e      	ldr	r0, [pc, #56]	@ (8002f18 <Init_MPU6050+0x68>)
 8002ee0:	f7fd fcdc 	bl	800089c <MPU6050_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8002eea:	230c      	movs	r3, #12
 8002eec:	4a0b      	ldr	r2, [pc, #44]	@ (8002f1c <Init_MPU6050+0x6c>)
 8002eee:	21ee      	movs	r1, #238	@ 0xee
 8002ef0:	4806      	ldr	r0, [pc, #24]	@ (8002f0c <Init_MPU6050+0x5c>)
 8002ef2:	f7fe fe07 	bl	8001b04 <comm_sendCMD>
}
 8002ef6:	e002      	b.n	8002efe <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8002ef8:	4807      	ldr	r0, [pc, #28]	@ (8002f18 <Init_MPU6050+0x68>)
 8002efa:	f7fd fd71 	bl	80009e0 <MPU6050_Calibrate>
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200008d4 	.word	0x200008d4
 8002f08:	080113d4 	.word	0x080113d4
 8002f0c:	20000f98 	.word	0x20000f98
 8002f10:	080031bd 	.word	0x080031bd
 8002f14:	0800317d 	.word	0x0800317d
 8002f18:	20000b18 	.word	0x20000b18
 8002f1c:	080113e4 	.word	0x080113e4

08002f20 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af02      	add	r7, sp, #8
	Display.refreshCounter = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002f26:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <Init_Display+0x78>)
 8002f28:	220a      	movs	r2, #10
 8002f2a:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002f98 <Init_Display+0x78>)
 8002f30:	220a      	movs	r2, #10
 8002f32:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8002f36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	2178      	movs	r1, #120	@ 0x78
 8002f3e:	4817      	ldr	r0, [pc, #92]	@ (8002f9c <Init_Display+0x7c>)
 8002f40:	f003 fb4c 	bl	80065dc <HAL_I2C_IsDeviceReady>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8002f4a:	230a      	movs	r3, #10
 8002f4c:	4a14      	ldr	r2, [pc, #80]	@ (8002fa0 <Init_Display+0x80>)
 8002f4e:	21ee      	movs	r1, #238	@ 0xee
 8002f50:	4814      	ldr	r0, [pc, #80]	@ (8002fa4 <Init_Display+0x84>)
 8002f52:	f7fe fdd7 	bl	8001b04 <comm_sendCMD>
		}else{
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
		}
	}
}
 8002f56:	e01c      	b.n	8002f92 <Init_Display+0x72>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002f58:	4913      	ldr	r1, [pc, #76]	@ (8002fa8 <Init_Display+0x88>)
 8002f5a:	4814      	ldr	r0, [pc, #80]	@ (8002fac <Init_Display+0x8c>)
 8002f5c:	f7fd fe7e 	bl	8000c5c <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8002f60:	f7fd fe92 	bl	8000c88 <Display_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002f6a:	2309      	movs	r3, #9
 8002f6c:	4a10      	ldr	r2, [pc, #64]	@ (8002fb0 <Init_Display+0x90>)
 8002f6e:	21ee      	movs	r1, #238	@ 0xee
 8002f70:	480c      	ldr	r0, [pc, #48]	@ (8002fa4 <Init_Display+0x84>)
 8002f72:	f7fe fdc7 	bl	8001b04 <comm_sendCMD>
}
 8002f76:	e00c      	b.n	8002f92 <Init_Display+0x72>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002f78:	2301      	movs	r3, #1
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2340      	movs	r3, #64	@ 0x40
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb4 <Init_Display+0x94>)
 8002f84:	2100      	movs	r1, #0
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fe f918 	bl	80011bc <Display_DrawBitmap>
			Display.isInit = TRUE;
 8002f8c:	4b02      	ldr	r3, [pc, #8]	@ (8002f98 <Init_Display+0x78>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000b60 	.word	0x20000b60
 8002f9c:	200008d4 	.word	0x200008d4
 8002fa0:	080113f4 	.word	0x080113f4
 8002fa4:	20000f98 	.word	0x20000f98
 8002fa8:	08003149 	.word	0x08003149
 8002fac:	0800310d 	.word	0x0800310d
 8002fb0:	0801138c 	.word	0x0801138c
 8002fb4:	080115b0 	.word	0x080115b0

08002fb8 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d123      	bne.n	8003012 <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8002fca:	2209      	movs	r2, #9
 8002fcc:	4919      	ldr	r1, [pc, #100]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002fce:	481a      	ldr	r0, [pc, #104]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002fd0:	f000 ffb4 	bl	8003f3c <HAL_ADC_Start_DMA>
		is5ms--;
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4b17      	ldr	r3, [pc, #92]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002fde:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8002fe0:	4b16      	ldr	r3, [pc, #88]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d114      	bne.n	8003012 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002fea:	2214      	movs	r2, #20
 8002fec:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8002fee:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14);
 8002ff8:	230e      	movs	r3, #14
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2301      	movs	r3, #1
 8003002:	223b      	movs	r2, #59	@ 0x3b
 8003004:	21d0      	movs	r1, #208	@ 0xd0
 8003006:	4810      	ldr	r0, [pc, #64]	@ (8003048 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003008:	f003 f958 	bl	80062bc <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fe f819 	bl	8001044 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 800301c:	4a0c      	ldr	r2, [pc, #48]	@ (8003050 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800301e:	7813      	ldrb	r3, [r2, #0]
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	7013      	strb	r3, [r2, #0]




	}
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40010000 	.word	0x40010000
 8003034:	20000f74 	.word	0x20000f74
 8003038:	2000082c 	.word	0x2000082c
 800303c:	2000000a 	.word	0x2000000a
 8003040:	20000b18 	.word	0x20000b18
 8003044:	20000b4e 	.word	0x20000b4e
 8003048:	200008d4 	.word	0x200008d4
 800304c:	40000400 	.word	0x40000400
 8003050:	20000ac4 	.word	0x20000ac4

08003054 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003060:	2b78      	cmp	r3, #120	@ 0x78
 8003062:	d102      	bne.n	800306a <HAL_I2C_MemTxCpltCallback+0x16>
		Display_I2C_DMA_Ready(TRUE);
 8003064:	2001      	movs	r0, #1
 8003066:	f7fd ffed 	bl	8001044 <Display_I2C_DMA_Ready>

	}
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	2bd0      	cmp	r3, #208	@ 0xd0
 8003082:	d105      	bne.n	8003090 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8003084:	480a      	ldr	r0, [pc, #40]	@ (80030b0 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8003086:	f7fd fd5b 	bl	8000b40 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 800308a:	2001      	movs	r0, #1
 800308c:	f7fd ffda 	bl	8001044 <Display_I2C_DMA_Ready>
	}


	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	2b78      	cmp	r3, #120	@ 0x78
 8003096:	d107      	bne.n	80030a8 <HAL_I2C_MemRxCpltCallback+0x34>
		if(!MPU6050.isInit){
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800309a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_I2C_MemRxCpltCallback+0x34>
			Display_I2C_DMA_Ready(TRUE);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fd ffce 	bl	8001044 <Display_I2C_DMA_Ready>
	}




}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000b18 	.word	0x20000b18

080030b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 80030bc:	4903      	ldr	r1, [pc, #12]	@ (80030cc <HAL_ADC_ConvCpltCallback+0x18>)
 80030be:	4804      	ldr	r0, [pc, #16]	@ (80030d0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80030c0:	f7fd fa74 	bl	80005ac <ADC_Conversion_Cplt>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000f86 	.word	0x20000f86
 80030d0:	20000f74 	.word	0x20000f74

080030d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e4:	d102      	bne.n	80030ec <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 80030e6:	4807      	ldr	r0, [pc, #28]	@ (8003104 <HAL_GPIO_EXTI_Callback+0x30>)
 80030e8:	f7fe fabc 	bl	8001664 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030f2:	d102      	bne.n	80030fa <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 80030f4:	4804      	ldr	r0, [pc, #16]	@ (8003108 <HAL_GPIO_EXTI_Callback+0x34>)
 80030f6:	f7fe fab5 	bl	8001664 <Encoder_Add_Pulse>
	}
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000b00 	.word	0x20000b00
 8003108:	20000b0c 	.word	0x20000b0c

0800310c <I2C_1_Abstract_Mem_DMA_Transmit>:
		dataRx = 0;
	}
}*/
/**************************************** END HAL CALLBACKS ***************************************/
/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	60ba      	str	r2, [r7, #8]
 8003114:	461a      	mov	r2, r3
 8003116:	4603      	mov	r3, r0
 8003118:	81fb      	strh	r3, [r7, #14]
 800311a:	460b      	mov	r3, r1
 800311c:	737b      	strb	r3, [r7, #13]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8003122:	7b7b      	ldrb	r3, [r7, #13]
 8003124:	b29a      	uxth	r2, r3
 8003126:	89f9      	ldrh	r1, [r7, #14]
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2301      	movs	r3, #1
 8003132:	4804      	ldr	r0, [pc, #16]	@ (8003144 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 8003134:	f002 ff64 	bl	8006000 <HAL_I2C_Mem_Write_DMA>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200008d4 	.word	0x200008d4

08003148 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af02      	add	r7, sp, #8
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	4603      	mov	r3, r0
 8003154:	81fb      	strh	r3, [r7, #14]
 8003156:	4613      	mov	r3, r2
 8003158:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800315a:	89ba      	ldrh	r2, [r7, #12]
 800315c:	89f9      	ldrh	r1, [r7, #14]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	4804      	ldr	r0, [pc, #16]	@ (8003178 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 8003168:	f002 fb20 	bl	80057ac <HAL_I2C_Master_Transmit>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200008d4 	.word	0x200008d4

0800317c <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af04      	add	r7, sp, #16
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4603      	mov	r3, r0
 8003186:	80fb      	strh	r3, [r7, #6]
 8003188:	460b      	mov	r3, r1
 800318a:	717b      	strb	r3, [r7, #5]
 800318c:	4613      	mov	r3, r2
 800318e:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8003190:	797b      	ldrb	r3, [r7, #5]
 8003192:	b29a      	uxth	r2, r3
 8003194:	793b      	ldrb	r3, [r7, #4]
 8003196:	b298      	uxth	r0, r3
 8003198:	88f9      	ldrh	r1, [r7, #6]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9302      	str	r3, [sp, #8]
 800319e:	8a3b      	ldrh	r3, [r7, #16]
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4603      	mov	r3, r0
 80031a8:	4803      	ldr	r0, [pc, #12]	@ (80031b8 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 80031aa:	f002 fbfd 	bl	80059a8 <HAL_I2C_Mem_Write>
 80031ae:	4603      	mov	r3, r0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	200008d4 	.word	0x200008d4

080031bc <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af04      	add	r7, sp, #16
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4603      	mov	r3, r0
 80031c6:	80fb      	strh	r3, [r7, #6]
 80031c8:	460b      	mov	r3, r1
 80031ca:	717b      	strb	r3, [r7, #5]
 80031cc:	4613      	mov	r3, r2
 80031ce:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80031d0:	797b      	ldrb	r3, [r7, #5]
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	793b      	ldrb	r3, [r7, #4]
 80031d6:	b298      	uxth	r0, r3
 80031d8:	88f9      	ldrh	r1, [r7, #6]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	9302      	str	r3, [sp, #8]
 80031de:	8a3b      	ldrh	r3, [r7, #16]
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	4603      	mov	r3, r0
 80031e8:	4803      	ldr	r0, [pc, #12]	@ (80031f8 <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 80031ea:	f002 fcd7 	bl	8005b9c <HAL_I2C_Mem_Read>
 80031ee:	4603      	mov	r3, r0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200008d4 	.word	0x200008d4

080031fc <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8003200:	2101      	movs	r1, #1
 8003202:	4803      	ldr	r0, [pc, #12]	@ (8003210 <KEY_Read_Value+0x14>)
 8003204:	f002 f914 	bl	8005430 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40020000 	.word	0x40020000

08003214 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 800321c:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <writeOn_USB+0x70>)
 800321e:	78da      	ldrb	r2, [r3, #3]
 8003220:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <writeOn_USB+0x70>)
 8003222:	789b      	ldrb	r3, [r3, #2]
 8003224:	429a      	cmp	r2, r3
 8003226:	d909      	bls.n	800323c <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 8003228:	4b16      	ldr	r3, [pc, #88]	@ (8003284 <writeOn_USB+0x70>)
 800322a:	78da      	ldrb	r2, [r3, #3]
 800322c:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <writeOn_USB+0x70>)
 800322e:	789b      	ldrb	r3, [r3, #2]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <writeOn_USB+0x70>)
 8003236:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 800323a:	e006      	b.n	800324a <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <writeOn_USB+0x70>)
 800323e:	789b      	ldrb	r3, [r3, #2]
 8003240:	425b      	negs	r3, r3
 8003242:	b2da      	uxtb	r2, r3
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <writeOn_USB+0x70>)
 8003246:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <writeOn_USB+0x70>)
 800324c:	789b      	ldrb	r3, [r3, #2]
 800324e:	461a      	mov	r2, r3
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <writeOn_USB+0x70>)
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	4a0b      	ldr	r2, [pc, #44]	@ (8003284 <writeOn_USB+0x70>)
 8003258:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f00c ff54 	bl	801010c <CDC_Transmit_FS>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <writeOn_USB+0x70>)
 800326c:	789a      	ldrb	r2, [r3, #2]
 800326e:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <writeOn_USB+0x70>)
 8003270:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 8003274:	4413      	add	r3, r2
 8003276:	b2da      	uxtb	r2, r3
 8003278:	4b02      	ldr	r3, [pc, #8]	@ (8003284 <writeOn_USB+0x70>)
 800327a:	709a      	strb	r2, [r3, #2]
	}
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000f98 	.word	0x20000f98

08003288 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01a      	beq.n	80032ce <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8003298:	2300      	movs	r3, #0
 800329a:	81fb      	strh	r3, [r7, #14]
 800329c:	e013      	b.n	80032c6 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 800329e:	89fb      	ldrh	r3, [r7, #14]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	441a      	add	r2, r3
 80032a4:	4b0d      	ldr	r3, [pc, #52]	@ (80032dc <dataRxOn_USB+0x54>)
 80032a6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	b2c8      	uxtb	r0, r1
 80032ae:	490b      	ldr	r1, [pc, #44]	@ (80032dc <dataRxOn_USB+0x54>)
 80032b0:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 80032b4:	4619      	mov	r1, r3
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <dataRxOn_USB+0x54>)
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	3301      	adds	r3, #1
 80032c4:	81fb      	strh	r3, [r7, #14]
 80032c6:	89fb      	ldrh	r3, [r7, #14]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d8e7      	bhi.n	800329e <dataRxOn_USB+0x16>
		}
	}
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000f98 	.word	0x20000f98

080032e0 <Motor_Left_SetPins>:

void Motor_Left_SetPins(e_direction direction){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d842      	bhi.n	8003376 <Motor_Left_SetPins+0x96>
 80032f0:	a201      	add	r2, pc, #4	@ (adr r2, 80032f8 <Motor_Left_SetPins+0x18>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	08003375 	.word	0x08003375
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003327 	.word	0x08003327
 8003304:	08003341 	.word	0x08003341
 8003308:	0800335b 	.word	0x0800335b
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003312:	481b      	ldr	r0, [pc, #108]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 8003314:	f002 f8a4 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 8003318:	2200      	movs	r2, #0
 800331a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800331e:	4818      	ldr	r0, [pc, #96]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 8003320:	f002 f89e 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 8003324:	e027      	b.n	8003376 <Motor_Left_SetPins+0x96>
	case FORWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 8003326:	2201      	movs	r2, #1
 8003328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800332c:	4814      	ldr	r0, [pc, #80]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 800332e:	f002 f897 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 8003332:	2200      	movs	r2, #0
 8003334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003338:	4811      	ldr	r0, [pc, #68]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 800333a:	f002 f891 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 800333e:	e01a      	b.n	8003376 <Motor_Left_SetPins+0x96>
	case BACKWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003346:	480e      	ldr	r0, [pc, #56]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 8003348:	f002 f88a 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 800334c:	2201      	movs	r2, #1
 800334e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003352:	480b      	ldr	r0, [pc, #44]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 8003354:	f002 f884 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 8003358:	e00d      	b.n	8003376 <Motor_Left_SetPins+0x96>
	case BRAKE:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 800335a:	2201      	movs	r2, #1
 800335c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003360:	4807      	ldr	r0, [pc, #28]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 8003362:	f002 f87d 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8003366:	2201      	movs	r2, #1
 8003368:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800336c:	4804      	ldr	r0, [pc, #16]	@ (8003380 <Motor_Left_SetPins+0xa0>)
 800336e:	f002 f877 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 8003372:	e000      	b.n	8003376 <Motor_Left_SetPins+0x96>
		break;
 8003374:	bf00      	nop
	}
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40020000 	.word	0x40020000

08003384 <Motor_Right_SetPins>:

void Motor_Right_SetPins(e_direction direction){
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	2b04      	cmp	r3, #4
 8003392:	d83f      	bhi.n	8003414 <Motor_Right_SetPins+0x90>
 8003394:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <Motor_Right_SetPins+0x18>)
 8003396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339a:	bf00      	nop
 800339c:	08003413 	.word	0x08003413
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033e1 	.word	0x080033e1
 80033ac:	080033fb 	.word	0x080033fb
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033b6:	4819      	ldr	r0, [pc, #100]	@ (800341c <Motor_Right_SetPins+0x98>)
 80033b8:	f002 f852 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2108      	movs	r1, #8
 80033c0:	4817      	ldr	r0, [pc, #92]	@ (8003420 <Motor_Right_SetPins+0x9c>)
 80033c2:	f002 f84d 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 80033c6:	e025      	b.n	8003414 <Motor_Right_SetPins+0x90>
	case FORWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 80033c8:	2201      	movs	r2, #1
 80033ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033ce:	4813      	ldr	r0, [pc, #76]	@ (800341c <Motor_Right_SetPins+0x98>)
 80033d0:	f002 f846 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2108      	movs	r1, #8
 80033d8:	4811      	ldr	r0, [pc, #68]	@ (8003420 <Motor_Right_SetPins+0x9c>)
 80033da:	f002 f841 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 80033de:	e019      	b.n	8003414 <Motor_Right_SetPins+0x90>
	case BACKWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033e6:	480d      	ldr	r0, [pc, #52]	@ (800341c <Motor_Right_SetPins+0x98>)
 80033e8:	f002 f83a 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M1_IN2_Pin, 1);
 80033ec:	2201      	movs	r2, #1
 80033ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80033f2:	480b      	ldr	r0, [pc, #44]	@ (8003420 <Motor_Right_SetPins+0x9c>)
 80033f4:	f002 f834 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 80033f8:	e00c      	b.n	8003414 <Motor_Right_SetPins+0x90>
	case BRAKE:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 80033fa:	2201      	movs	r2, #1
 80033fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003400:	4806      	ldr	r0, [pc, #24]	@ (800341c <Motor_Right_SetPins+0x98>)
 8003402:	f002 f82d 	bl	8005460 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 1);
 8003406:	2201      	movs	r2, #1
 8003408:	2108      	movs	r1, #8
 800340a:	4805      	ldr	r0, [pc, #20]	@ (8003420 <Motor_Right_SetPins+0x9c>)
 800340c:	f002 f828 	bl	8005460 <HAL_GPIO_WritePin>
		break;
 8003410:	e000      	b.n	8003414 <Motor_Right_SetPins+0x90>
		break;
 8003412:	bf00      	nop
	}
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400

08003424 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 800342e:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <Motor_Left_SetPWM+0x20>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	88fa      	ldrh	r2, [r7, #6]
 8003434:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20000a30 	.word	0x20000a30

08003448 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <Motor_Right_SetPWM+0x20>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000a30 	.word	0x20000a30

0800346c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
}
 8003472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <Error_Handler+0x8>

08003478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_MspInit+0x58>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <HAL_MspInit+0x58>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800348c:	6453      	str	r3, [r2, #68]	@ 0x44
 800348e:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_MspInit+0x58>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <HAL_MspInit+0x58>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	4a0b      	ldr	r2, [pc, #44]	@ (80034d0 <HAL_MspInit+0x58>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034aa:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <HAL_MspInit+0x58>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	2051      	movs	r0, #81	@ 0x51
 80034bc:	f001 f9e1 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80034c0:	2051      	movs	r0, #81	@ 0x51
 80034c2:	f001 f9fa 	bl	80048ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800

080034d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	@ 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a40      	ldr	r2, [pc, #256]	@ (80035f4 <HAL_ADC_MspInit+0x120>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d179      	bne.n	80035ea <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b3f      	ldr	r3, [pc, #252]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	4a3e      	ldr	r2, [pc, #248]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003504:	6453      	str	r3, [r2, #68]	@ 0x44
 8003506:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b38      	ldr	r3, [pc, #224]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a37      	ldr	r2, [pc, #220]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b35      	ldr	r3, [pc, #212]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	4b31      	ldr	r3, [pc, #196]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	4a30      	ldr	r2, [pc, #192]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	6313      	str	r3, [r2, #48]	@ 0x30
 800353e:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <HAL_ADC_MspInit+0x124>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	60bb      	str	r3, [r7, #8]
 8003548:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 800354a:	23fe      	movs	r3, #254	@ 0xfe
 800354c:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354e:	2303      	movs	r3, #3
 8003550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4619      	mov	r1, r3
 800355c:	4827      	ldr	r0, [pc, #156]	@ (80035fc <HAL_ADC_MspInit+0x128>)
 800355e:	f001 fde3 	bl	8005128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8003562:	2303      	movs	r3, #3
 8003564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003566:	2303      	movs	r3, #3
 8003568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	4822      	ldr	r0, [pc, #136]	@ (8003600 <HAL_ADC_MspInit+0x12c>)
 8003576:	f001 fdd7 	bl	8005128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 800357c:	4a22      	ldr	r2, [pc, #136]	@ (8003608 <HAL_ADC_MspInit+0x134>)
 800357e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003580:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 8003582:	2200      	movs	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003586:	4b1f      	ldr	r3, [pc, #124]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003592:	4b1c      	ldr	r3, [pc, #112]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 8003594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003598:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800359a:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 800359c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035a2:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80035aa:	4b16      	ldr	r3, [pc, #88]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80035b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b8:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80035be:	4811      	ldr	r0, [pc, #68]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035c0:	f001 f996 	bl	80048f0 <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80035ca:	f7ff ff4f 	bl	800346c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80035d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <HAL_ADC_MspInit+0x130>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	2012      	movs	r0, #18
 80035e0:	f001 f94f 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035e4:	2012      	movs	r0, #18
 80035e6:	f001 f968 	bl	80048ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	@ 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40012000 	.word	0x40012000
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020000 	.word	0x40020000
 8003600:	40020400 	.word	0x40020400
 8003604:	20000874 	.word	0x20000874
 8003608:	40026410 	.word	0x40026410

0800360c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a50      	ldr	r2, [pc, #320]	@ (800376c <HAL_I2C_MspInit+0x160>)
 800362a:	4293      	cmp	r3, r2
 800362c:	f040 8099 	bne.w	8003762 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <HAL_I2C_MspInit+0x164>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003638:	4a4d      	ldr	r2, [pc, #308]	@ (8003770 <HAL_I2C_MspInit+0x164>)
 800363a:	f043 0302 	orr.w	r3, r3, #2
 800363e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003640:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <HAL_I2C_MspInit+0x164>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800364c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003652:	2312      	movs	r3, #18
 8003654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365a:	2303      	movs	r3, #3
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800365e:	2304      	movs	r3, #4
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003662:	f107 0314 	add.w	r3, r7, #20
 8003666:	4619      	mov	r1, r3
 8003668:	4842      	ldr	r0, [pc, #264]	@ (8003774 <HAL_I2C_MspInit+0x168>)
 800366a:	f001 fd5d 	bl	8005128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <HAL_I2C_MspInit+0x164>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	4a3e      	ldr	r2, [pc, #248]	@ (8003770 <HAL_I2C_MspInit+0x164>)
 8003678:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800367c:	6413      	str	r3, [r2, #64]	@ 0x40
 800367e:	4b3c      	ldr	r3, [pc, #240]	@ (8003770 <HAL_I2C_MspInit+0x164>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800368a:	4b3b      	ldr	r3, [pc, #236]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 800368c:	4a3b      	ldr	r2, [pc, #236]	@ (800377c <HAL_I2C_MspInit+0x170>)
 800368e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003690:	4b39      	ldr	r3, [pc, #228]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 8003692:	2200      	movs	r2, #0
 8003694:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003696:	4b38      	ldr	r3, [pc, #224]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 8003698:	2240      	movs	r2, #64	@ 0x40
 800369a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800369c:	4b36      	ldr	r3, [pc, #216]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036a2:	4b35      	ldr	r3, [pc, #212]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036aa:	4b33      	ldr	r3, [pc, #204]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b0:	4b31      	ldr	r3, [pc, #196]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80036b6:	4b30      	ldr	r3, [pc, #192]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80036c8:	482b      	ldr	r0, [pc, #172]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036ca:	f001 f911 	bl	80048f0 <HAL_DMA_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80036d4:	f7ff feca 	bl	800346c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a27      	ldr	r2, [pc, #156]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80036de:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <HAL_I2C_MspInit+0x16c>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80036e4:	4b26      	ldr	r3, [pc, #152]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 80036e6:	4a27      	ldr	r2, [pc, #156]	@ (8003784 <HAL_I2C_MspInit+0x178>)
 80036e8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80036ea:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 80036ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036f2:	4b23      	ldr	r3, [pc, #140]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f8:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036fe:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 8003700:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003704:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 8003708:	2200      	movs	r2, #0
 800370a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800370c:	4b1c      	ldr	r3, [pc, #112]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 800370e:	2200      	movs	r2, #0
 8003710:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 8003714:	2200      	movs	r2, #0
 8003716:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 800371a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800371e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003720:	4b17      	ldr	r3, [pc, #92]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 8003722:	2200      	movs	r2, #0
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003726:	4816      	ldr	r0, [pc, #88]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 8003728:	f001 f8e2 	bl	80048f0 <HAL_DMA_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8003732:	f7ff fe9b 	bl	800346c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 800373a:	639a      	str	r2, [r3, #56]	@ 0x38
 800373c:	4a10      	ldr	r2, [pc, #64]	@ (8003780 <HAL_I2C_MspInit+0x174>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	201f      	movs	r0, #31
 8003748:	f001 f89b 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800374c:	201f      	movs	r0, #31
 800374e:	f001 f8b4 	bl	80048ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	2020      	movs	r0, #32
 8003758:	f001 f893 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800375c:	2020      	movs	r0, #32
 800375e:	f001 f8ac 	bl	80048ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003762:	bf00      	nop
 8003764:	3728      	adds	r7, #40	@ 0x28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40005400 	.word	0x40005400
 8003770:	40023800 	.word	0x40023800
 8003774:	40020400 	.word	0x40020400
 8003778:	20000928 	.word	0x20000928
 800377c:	40026028 	.word	0x40026028
 8003780:	20000988 	.word	0x20000988
 8003784:	40026010 	.word	0x40026010

08003788 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <HAL_TIM_Base_MspInit+0x80>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d116      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	4a1a      	ldr	r2, [pc, #104]	@ (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	2019      	movs	r0, #25
 80037bc:	f001 f861 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037c0:	2019      	movs	r0, #25
 80037c2:	f001 f87a 	bl	80048ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037c6:	e01a      	b.n	80037fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a10      	ldr	r2, [pc, #64]	@ (8003810 <HAL_TIM_Base_MspInit+0x88>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d115      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	201d      	movs	r0, #29
 80037f4:	f001 f845 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037f8:	201d      	movs	r0, #29
 80037fa:	f001 f85e 	bl	80048ba <HAL_NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40023800 	.word	0x40023800
 8003810:	40000400 	.word	0x40000400

08003814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	609a      	str	r2, [r3, #8]
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a12      	ldr	r2, [pc, #72]	@ (800387c <HAL_TIM_MspPostInit+0x68>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d11d      	bne.n	8003872 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_TIM_MspPostInit+0x6c>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	4a10      	ldr	r2, [pc, #64]	@ (8003880 <HAL_TIM_MspPostInit+0x6c>)
 8003840:	f043 0302 	orr.w	r3, r3, #2
 8003844:	6313      	str	r3, [r2, #48]	@ 0x30
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <HAL_TIM_MspPostInit+0x6c>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8003852:	2330      	movs	r3, #48	@ 0x30
 8003854:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003856:	2302      	movs	r3, #2
 8003858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003862:	2302      	movs	r3, #2
 8003864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	4619      	mov	r1, r3
 800386c:	4805      	ldr	r0, [pc, #20]	@ (8003884 <HAL_TIM_MspPostInit+0x70>)
 800386e:	f001 fc5b 	bl	8005128 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003872:	bf00      	nop
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40000400 	.word	0x40000400
 8003880:	40023800 	.word	0x40023800
 8003884:	40020400 	.word	0x40020400

08003888 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	@ 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <HAL_UART_MspInit+0x94>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d133      	bne.n	8003912 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038b4:	f043 0310 	orr.w	r3, r3, #16
 80038b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038d0:	f043 0302 	orr.w	r3, r3, #2
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b12      	ldr	r3, [pc, #72]	@ (8003920 <HAL_UART_MspInit+0x98>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 80038e2:	23c0      	movs	r3, #192	@ 0xc0
 80038e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e6:	2302      	movs	r3, #2
 80038e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ee:	2303      	movs	r3, #3
 80038f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80038f2:	2307      	movs	r3, #7
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f6:	f107 0314 	add.w	r3, r7, #20
 80038fa:	4619      	mov	r1, r3
 80038fc:	4809      	ldr	r0, [pc, #36]	@ (8003924 <HAL_UART_MspInit+0x9c>)
 80038fe:	f001 fc13 	bl	8005128 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2100      	movs	r1, #0
 8003906:	2025      	movs	r0, #37	@ 0x25
 8003908:	f000 ffbb 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800390c:	2025      	movs	r0, #37	@ 0x25
 800390e:	f000 ffd4 	bl	80048ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003912:	bf00      	nop
 8003914:	3728      	adds	r7, #40	@ 0x28
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40011000 	.word	0x40011000
 8003920:	40023800 	.word	0x40023800
 8003924:	40020400 	.word	0x40020400

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800392c:	f007 f874 	bl	800aa18 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003930:	bf00      	nop
 8003932:	e7fd      	b.n	8003930 <NMI_Handler+0x8>

08003934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <HardFault_Handler+0x4>

0800393c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003940:	bf00      	nop
 8003942:	e7fd      	b.n	8003940 <MemManage_Handler+0x4>

08003944 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <BusFault_Handler+0x4>

0800394c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003950:	bf00      	nop
 8003952:	e7fd      	b.n	8003950 <UsageFault_Handler+0x4>

08003954 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003982:	f000 f943 	bl	8003c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003990:	4802      	ldr	r0, [pc, #8]	@ (800399c <DMA1_Stream0_IRQHandler+0x10>)
 8003992:	f001 f945 	bl	8004c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000988 	.word	0x20000988

080039a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80039a4:	4802      	ldr	r0, [pc, #8]	@ (80039b0 <DMA1_Stream1_IRQHandler+0x10>)
 80039a6:	f001 f93b 	bl	8004c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000928 	.word	0x20000928

080039b4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039b8:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <ADC_IRQHandler+0x10>)
 80039ba:	f000 f9ae 	bl	8003d1a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000082c 	.word	0x2000082c

080039c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 80039cc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80039d0:	f001 fd7a 	bl	80054c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039dc:	4802      	ldr	r0, [pc, #8]	@ (80039e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80039de:	f007 f9f1 	bl	800adc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200009e8 	.word	0x200009e8

080039ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039f0:	4802      	ldr	r0, [pc, #8]	@ (80039fc <TIM3_IRQHandler+0x10>)
 80039f2:	f007 f9e7 	bl	800adc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000a30 	.word	0x20000a30

08003a00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a04:	4802      	ldr	r0, [pc, #8]	@ (8003a10 <I2C1_EV_IRQHandler+0x10>)
 8003a06:	f002 ff17 	bl	8006838 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200008d4 	.word	0x200008d4

08003a14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a18:	4802      	ldr	r0, [pc, #8]	@ (8003a24 <I2C1_ER_IRQHandler+0x10>)
 8003a1a:	f003 f87e 	bl	8006b1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200008d4 	.word	0x200008d4

08003a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a2c:	4802      	ldr	r0, [pc, #8]	@ (8003a38 <USART1_IRQHandler+0x10>)
 8003a2e:	f008 f83b 	bl	800baa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000a78 	.word	0x20000a78

08003a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8003a40:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003a44:	f001 fd40 	bl	80054c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a50:	4802      	ldr	r0, [pc, #8]	@ (8003a5c <DMA2_Stream0_IRQHandler+0x10>)
 8003a52:	f001 f8e5 	bl	8004c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000874 	.word	0x20000874

08003a60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a64:	4802      	ldr	r0, [pc, #8]	@ (8003a70 <OTG_FS_IRQHandler+0x10>)
 8003a66:	f005 fa64 	bl	8008f32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20001abc 	.word	0x20001abc

08003a74 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ae0 <_sbrk+0x5c>)
 8003a8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ae4 <_sbrk+0x60>)
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a98:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <_sbrk+0x64>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <_sbrk+0x64>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <_sbrk+0x68>)
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d207      	bcs.n	8003ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ab4:	f00c ffb6 	bl	8010a24 <__errno>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	220c      	movs	r2, #12
 8003abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e009      	b.n	8003ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <_sbrk+0x64>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	4a05      	ldr	r2, [pc, #20]	@ (8003ae8 <_sbrk+0x64>)
 8003ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20020000 	.word	0x20020000
 8003ae4:	00000400 	.word	0x00000400
 8003ae8:	200011d0 	.word	0x200011d0
 8003aec:	20002308 	.word	0x20002308

08003af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af4:	4b06      	ldr	r3, [pc, #24]	@ (8003b10 <SystemInit+0x20>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	4a05      	ldr	r2, [pc, #20]	@ (8003b10 <SystemInit+0x20>)
 8003afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b18:	f7ff ffea 	bl	8003af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b1c:	480c      	ldr	r0, [pc, #48]	@ (8003b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b1e:	490d      	ldr	r1, [pc, #52]	@ (8003b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b20:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b24:	e002      	b.n	8003b2c <LoopCopyDataInit>

08003b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b2a:	3304      	adds	r3, #4

08003b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b30:	d3f9      	bcc.n	8003b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b32:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b34:	4c0a      	ldr	r4, [pc, #40]	@ (8003b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b38:	e001      	b.n	8003b3e <LoopFillZerobss>

08003b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b3c:	3204      	adds	r2, #4

08003b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b40:	d3fb      	bcc.n	8003b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b42:	f00c ff75 	bl	8010a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b46:	f7fe fd15 	bl	8002574 <main>
  bx  lr    
 8003b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b54:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003b58:	08012580 	.word	0x08012580
  ldr r2, =_sbss
 8003b5c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003b60:	20002308 	.word	0x20002308

08003b64 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b64:	e7fe      	b.n	8003b64 <DMA1_Stream2_IRQHandler>
	...

08003b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba8 <HAL_Init+0x40>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <HAL_Init+0x40>)
 8003b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_Init+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba8 <HAL_Init+0x40>)
 8003b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b84:	4b08      	ldr	r3, [pc, #32]	@ (8003ba8 <HAL_Init+0x40>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a07      	ldr	r2, [pc, #28]	@ (8003ba8 <HAL_Init+0x40>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 fe6b 	bl	800486c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b96:	200f      	movs	r0, #15
 8003b98:	f000 f808 	bl	8003bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b9c:	f7ff fc6c 	bl	8003478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023c00 	.word	0x40023c00

08003bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bb4:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <HAL_InitTick+0x54>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4b12      	ldr	r3, [pc, #72]	@ (8003c04 <HAL_InitTick+0x58>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fe83 	bl	80048d6 <HAL_SYSTICK_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e00e      	b.n	8003bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0f      	cmp	r3, #15
 8003bde:	d80a      	bhi.n	8003bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be0:	2200      	movs	r2, #0
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	f000 fe4b 	bl	8004882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bec:	4a06      	ldr	r2, [pc, #24]	@ (8003c08 <HAL_InitTick+0x5c>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000010 	.word	0x20000010
 8003c04:	20000018 	.word	0x20000018
 8003c08:	20000014 	.word	0x20000014

08003c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c10:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <HAL_IncTick+0x20>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <HAL_IncTick+0x24>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	4a04      	ldr	r2, [pc, #16]	@ (8003c30 <HAL_IncTick+0x24>)
 8003c1e:	6013      	str	r3, [r2, #0]
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000018 	.word	0x20000018
 8003c30:	200011d4 	.word	0x200011d4

08003c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return uwTick;
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <HAL_GetTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	200011d4 	.word	0x200011d4

08003c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff ffee 	bl	8003c34 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d005      	beq.n	8003c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_Delay+0x44>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c72:	bf00      	nop
 8003c74:	f7ff ffde 	bl	8003c34 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f7      	bhi.n	8003c74 <HAL_Delay+0x28>
  {
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000018 	.word	0x20000018

08003c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e033      	b.n	8003d12 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fc0e 	bl	80034d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003cda:	f023 0302 	bic.w	r3, r3, #2
 8003cde:	f043 0202 	orr.w	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fb68 	bl	80043bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d02:	e001      	b.n	8003d08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d049      	beq.n	8003de4 <HAL_ADC_IRQHandler+0xca>
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d046      	beq.n	8003de4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d105      	bne.n	8003d6e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d12b      	bne.n	8003dd4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d127      	bne.n	8003dd4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d119      	bne.n	8003dd4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0220 	bic.w	r2, r2, #32
 8003dae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff f96d 	bl	80030b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f06f 0212 	mvn.w	r2, #18
 8003de2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d057      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x190>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d054      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d139      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d12b      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d124      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11d      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d119      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e74:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fc0c 	bl	80046b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 020c 	mvn.w	r2, #12
 8003ea8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d017      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x1d6>
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d014      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f925 	bl	8004130 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f06f 0201 	mvn.w	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003efe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d015      	beq.n	8003f32 <HAL_ADC_IRQHandler+0x218>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f10:	f043 0202 	orr.w	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0220 	mvn.w	r2, #32
 8003f20:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f90e 	bl	8004144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0220 	mvn.w	r2, #32
 8003f30:	601a      	str	r2, [r3, #0]
  }
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_Start_DMA+0x1e>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e0ce      	b.n	80040f8 <HAL_ADC_Start_DMA+0x1bc>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d018      	beq.n	8003fa2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f80:	4b5f      	ldr	r3, [pc, #380]	@ (8004100 <HAL_ADC_Start_DMA+0x1c4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5f      	ldr	r2, [pc, #380]	@ (8004104 <HAL_ADC_Start_DMA+0x1c8>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0c9a      	lsrs	r2, r3, #18
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f94:	e002      	b.n	8003f9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f9      	bne.n	8003f96 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb0:	d107      	bne.n	8003fc2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fc0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	f040 8086 	bne.w	80040de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ffc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004010:	d106      	bne.n	8004020 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f023 0206 	bic.w	r2, r3, #6
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
 800401e:	e002      	b.n	8004026 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800402e:	4b36      	ldr	r3, [pc, #216]	@ (8004108 <HAL_ADC_Start_DMA+0x1cc>)
 8004030:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004036:	4a35      	ldr	r2, [pc, #212]	@ (800410c <HAL_ADC_Start_DMA+0x1d0>)
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403e:	4a34      	ldr	r2, [pc, #208]	@ (8004110 <HAL_ADC_Start_DMA+0x1d4>)
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004046:	4a33      	ldr	r2, [pc, #204]	@ (8004114 <HAL_ADC_Start_DMA+0x1d8>)
 8004048:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004052:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004062:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004072:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	334c      	adds	r3, #76	@ 0x4c
 800407e:	4619      	mov	r1, r3
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f000 fce2 	bl	8004a4c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10f      	bne.n	80040b4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d129      	bne.n	80040f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	e020      	b.n	80040f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <HAL_ADC_Start_DMA+0x1dc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d11b      	bne.n	80040f6 <HAL_ADC_Start_DMA+0x1ba>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d114      	bne.n	80040f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e00b      	b.n	80040f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	f043 0210 	orr.w	r2, r3, #16
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000010 	.word	0x20000010
 8004104:	431bde83 	.word	0x431bde83
 8004108:	40012300 	.word	0x40012300
 800410c:	080045b5 	.word	0x080045b5
 8004110:	0800466f 	.word	0x0800466f
 8004114:	0800468b 	.word	0x0800468b
 8004118:	40012000 	.word	0x40012000

0800411c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e113      	b.n	800439c <HAL_ADC_ConfigChannel+0x244>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b09      	cmp	r3, #9
 8004182:	d925      	bls.n	80041d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68d9      	ldr	r1, [r3, #12]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	3b1e      	subs	r3, #30
 800419a:	2207      	movs	r2, #7
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43da      	mvns	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	400a      	ands	r2, r1
 80041a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68d9      	ldr	r1, [r3, #12]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	4618      	mov	r0, r3
 80041bc:	4603      	mov	r3, r0
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	4403      	add	r3, r0
 80041c2:	3b1e      	subs	r3, #30
 80041c4:	409a      	lsls	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	e022      	b.n	8004216 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6919      	ldr	r1, [r3, #16]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	4613      	mov	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4413      	add	r3, r2
 80041e4:	2207      	movs	r2, #7
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	400a      	ands	r2, r1
 80041f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6919      	ldr	r1, [r3, #16]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	4618      	mov	r0, r3
 8004206:	4603      	mov	r3, r0
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4403      	add	r3, r0
 800420c:	409a      	lsls	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b06      	cmp	r3, #6
 800421c:	d824      	bhi.n	8004268 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	3b05      	subs	r3, #5
 8004230:	221f      	movs	r2, #31
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	400a      	ands	r2, r1
 800423e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	4618      	mov	r0, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	3b05      	subs	r3, #5
 800425a:	fa00 f203 	lsl.w	r2, r0, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	635a      	str	r2, [r3, #52]	@ 0x34
 8004266:	e04c      	b.n	8004302 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d824      	bhi.n	80042ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	3b23      	subs	r3, #35	@ 0x23
 8004282:	221f      	movs	r2, #31
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43da      	mvns	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	400a      	ands	r2, r1
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	4618      	mov	r0, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	3b23      	subs	r3, #35	@ 0x23
 80042ac:	fa00 f203 	lsl.w	r2, r0, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b8:	e023      	b.n	8004302 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	3b41      	subs	r3, #65	@ 0x41
 80042cc:	221f      	movs	r2, #31
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	400a      	ands	r2, r1
 80042da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	4618      	mov	r0, r3
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	3b41      	subs	r3, #65	@ 0x41
 80042f6:	fa00 f203 	lsl.w	r2, r0, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <HAL_ADC_ConfigChannel+0x250>)
 8004304:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a28      	ldr	r2, [pc, #160]	@ (80043ac <HAL_ADC_ConfigChannel+0x254>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10f      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x1d8>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b12      	cmp	r3, #18
 8004316:	d10b      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_ADC_ConfigChannel+0x254>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d12b      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x23a>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_ADC_ConfigChannel+0x258>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <HAL_ADC_ConfigChannel+0x1f4>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b11      	cmp	r3, #17
 800434a:	d122      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a11      	ldr	r2, [pc, #68]	@ (80043b0 <HAL_ADC_ConfigChannel+0x258>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d111      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800436e:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <HAL_ADC_ConfigChannel+0x25c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a11      	ldr	r2, [pc, #68]	@ (80043b8 <HAL_ADC_ConfigChannel+0x260>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	0c9a      	lsrs	r2, r3, #18
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004384:	e002      	b.n	800438c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3b01      	subs	r3, #1
 800438a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f9      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40012300 	.word	0x40012300
 80043ac:	40012000 	.word	0x40012000
 80043b0:	10000012 	.word	0x10000012
 80043b4:	20000010 	.word	0x20000010
 80043b8:	431bde83 	.word	0x431bde83

080043bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043c4:	4b79      	ldr	r3, [pc, #484]	@ (80045ac <ADC_Init+0x1f0>)
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	021a      	lsls	r2, r3, #8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6899      	ldr	r1, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444e:	4a58      	ldr	r2, [pc, #352]	@ (80045b0 <ADC_Init+0x1f4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004462:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6899      	ldr	r1, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	e00f      	b.n	80044ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80044b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0202 	bic.w	r2, r2, #2
 80044c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e1b      	ldrb	r3, [r3, #24]
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004506:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	3b01      	subs	r3, #1
 8004514:	035a      	lsls	r2, r3, #13
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	e007      	b.n	8004530 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800453e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	3b01      	subs	r3, #1
 800454c:	051a      	lsls	r2, r3, #20
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6899      	ldr	r1, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004572:	025a      	lsls	r2, r3, #9
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800458a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	029a      	lsls	r2, r3, #10
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	40012300 	.word	0x40012300
 80045b0:	0f000001 	.word	0x0f000001

080045b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d13c      	bne.n	8004648 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d12b      	bne.n	8004640 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d127      	bne.n	8004640 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004608:	2b00      	cmp	r3, #0
 800460a:	d119      	bne.n	8004640 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0220 	bic.w	r2, r2, #32
 800461a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004620:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f043 0201 	orr.w	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7fe fd37 	bl	80030b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004646:	e00e      	b.n	8004666 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fd75 	bl	8004144 <HAL_ADC_ErrorCallback>
}
 800465a:	e004      	b.n	8004666 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fd4d 	bl	800411c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004696:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2240      	movs	r2, #64	@ 0x40
 800469c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f043 0204 	orr.w	r2, r3, #4
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fd4a 	bl	8004144 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004710 <__NVIC_SetPriorityGrouping+0x44>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046e8:	4013      	ands	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80046f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046fe:	4a04      	ldr	r2, [pc, #16]	@ (8004710 <__NVIC_SetPriorityGrouping+0x44>)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	60d3      	str	r3, [r2, #12]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <__NVIC_GetPriorityGrouping+0x18>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	f003 0307 	and.w	r3, r3, #7
}
 8004722:	4618      	mov	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473e:	2b00      	cmp	r3, #0
 8004740:	db0b      	blt.n	800475a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4907      	ldr	r1, [pc, #28]	@ (8004768 <__NVIC_EnableIRQ+0x38>)
 800474a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	2001      	movs	r0, #1
 8004752:	fa00 f202 	lsl.w	r2, r0, r2
 8004756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	e000e100 	.word	0xe000e100

0800476c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477c:	2b00      	cmp	r3, #0
 800477e:	db0a      	blt.n	8004796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	b2da      	uxtb	r2, r3
 8004784:	490c      	ldr	r1, [pc, #48]	@ (80047b8 <__NVIC_SetPriority+0x4c>)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	0112      	lsls	r2, r2, #4
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	440b      	add	r3, r1
 8004790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004794:	e00a      	b.n	80047ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	4908      	ldr	r1, [pc, #32]	@ (80047bc <__NVIC_SetPriority+0x50>)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	3b04      	subs	r3, #4
 80047a4:	0112      	lsls	r2, r2, #4
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	440b      	add	r3, r1
 80047aa:	761a      	strb	r2, [r3, #24]
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000e100 	.word	0xe000e100
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	@ 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f1c3 0307 	rsb	r3, r3, #7
 80047da:	2b04      	cmp	r3, #4
 80047dc:	bf28      	it	cs
 80047de:	2304      	movcs	r3, #4
 80047e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	d902      	bls.n	80047f0 <NVIC_EncodePriority+0x30>
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3b03      	subs	r3, #3
 80047ee:	e000      	b.n	80047f2 <NVIC_EncodePriority+0x32>
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f4:	f04f 32ff 	mov.w	r2, #4294967295
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	401a      	ands	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004808:	f04f 31ff 	mov.w	r1, #4294967295
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	43d9      	mvns	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004818:	4313      	orrs	r3, r2
         );
}
 800481a:	4618      	mov	r0, r3
 800481c:	3724      	adds	r7, #36	@ 0x24
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004838:	d301      	bcc.n	800483e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800483a:	2301      	movs	r3, #1
 800483c:	e00f      	b.n	800485e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800483e:	4a0a      	ldr	r2, [pc, #40]	@ (8004868 <SysTick_Config+0x40>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3b01      	subs	r3, #1
 8004844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004846:	210f      	movs	r1, #15
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	f7ff ff8e 	bl	800476c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <SysTick_Config+0x40>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004856:	4b04      	ldr	r3, [pc, #16]	@ (8004868 <SysTick_Config+0x40>)
 8004858:	2207      	movs	r2, #7
 800485a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000e010 	.word	0xe000e010

0800486c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff29 	bl	80046cc <__NVIC_SetPriorityGrouping>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	4603      	mov	r3, r0
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004894:	f7ff ff3e 	bl	8004714 <__NVIC_GetPriorityGrouping>
 8004898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f7ff ff8e 	bl	80047c0 <NVIC_EncodePriority>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff5d 	bl	800476c <__NVIC_SetPriority>
}
 80048b2:	bf00      	nop
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff31 	bl	8004730 <__NVIC_EnableIRQ>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff ffa2 	bl	8004828 <SysTick_Config>
 80048e4:	4603      	mov	r3, r0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7ff f99a 	bl	8003c34 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e099      	b.n	8004a40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800492c:	e00f      	b.n	800494e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800492e:	f7ff f981 	bl	8003c34 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b05      	cmp	r3, #5
 800493a:	d908      	bls.n	800494e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2203      	movs	r2, #3
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e078      	b.n	8004a40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e8      	bne.n	800492e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <HAL_DMA_Init+0x158>)
 8004968:	4013      	ands	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800497a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d107      	bne.n	80049b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b0:	4313      	orrs	r3, r2
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d117      	bne.n	8004a12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00e      	beq.n	8004a12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb1b 	bl	8005030 <DMA_CheckFifoParam>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2240      	movs	r2, #64	@ 0x40
 8004a04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e016      	b.n	8004a40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fad2 	bl	8004fc4 <DMA_CalcBaseAndBitshift>
 8004a20:	4603      	mov	r3, r0
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	223f      	movs	r2, #63	@ 0x3f
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	f010803f 	.word	0xf010803f

08004a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_DMA_Start_IT+0x26>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e040      	b.n	8004af4 <HAL_DMA_Start_IT+0xa8>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d12f      	bne.n	8004ae6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa64 	bl	8004f68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa4:	223f      	movs	r2, #63	@ 0x3f
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0216 	orr.w	r2, r2, #22
 8004aba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0208 	orr.w	r2, r2, #8
 8004ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e005      	b.n	8004af2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004aee:	2302      	movs	r3, #2
 8004af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b0a:	f7ff f893 	bl	8003c34 <HAL_GetTick>
 8004b0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d008      	beq.n	8004b2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2280      	movs	r2, #128	@ 0x80
 8004b20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e052      	b.n	8004bd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0216 	bic.w	r2, r2, #22
 8004b3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <HAL_DMA_Abort+0x62>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0208 	bic.w	r2, r2, #8
 8004b6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b7e:	e013      	b.n	8004ba8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b80:	f7ff f858 	bl	8003c34 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d90c      	bls.n	8004ba8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2203      	movs	r2, #3
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e015      	b.n	8004bd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e4      	bne.n	8004b80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	223f      	movs	r2, #63	@ 0x3f
 8004bbc:	409a      	lsls	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d004      	beq.n	8004bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2280      	movs	r2, #128	@ 0x80
 8004bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e00c      	b.n	8004c14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2205      	movs	r2, #5
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0201 	bic.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c2c:	4b8e      	ldr	r3, [pc, #568]	@ (8004e68 <HAL_DMA_IRQHandler+0x248>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a8e      	ldr	r2, [pc, #568]	@ (8004e6c <HAL_DMA_IRQHandler+0x24c>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0a9b      	lsrs	r3, r3, #10
 8004c38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01a      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	2208      	movs	r2, #8
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c84:	f043 0201 	orr.w	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	2201      	movs	r2, #1
 8004c92:	409a      	lsls	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d012      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cae:	2201      	movs	r2, #1
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf0:	f043 0204 	orr.w	r2, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	2210      	movs	r2, #16
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4013      	ands	r3, r2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d043      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d03c      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	2210      	movs	r2, #16
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d024      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	4798      	blx	r3
 8004d4e:	e01f      	b.n	8004d90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
 8004d60:	e016      	b.n	8004d90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0208 	bic.w	r2, r2, #8
 8004d7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	2220      	movs	r2, #32
 8004d96:	409a      	lsls	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 808f 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8087 	beq.w	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	2220      	movs	r2, #32
 8004db8:	409a      	lsls	r2, r3
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d136      	bne.n	8004e38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0216 	bic.w	r2, r2, #22
 8004dd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004de8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <HAL_DMA_IRQHandler+0x1da>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0208 	bic.w	r2, r2, #8
 8004e08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0e:	223f      	movs	r2, #63	@ 0x3f
 8004e10:	409a      	lsls	r2, r3
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d07e      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
        }
        return;
 8004e36:	e079      	b.n	8004f2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01d      	beq.n	8004e82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10d      	bne.n	8004e70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d031      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
 8004e64:	e02c      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
 8004e66:	bf00      	nop
 8004e68:	20000010 	.word	0x20000010
 8004e6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d023      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	e01e      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0210 	bic.w	r2, r2, #16
 8004e9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d032      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d022      	beq.n	8004f1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2205      	movs	r2, #5
 8004ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d307      	bcc.n	8004f08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f2      	bne.n	8004eec <HAL_DMA_IRQHandler+0x2cc>
 8004f06:	e000      	b.n	8004f0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
 8004f2a:	e000      	b.n	8004f2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f2c:	bf00      	nop
    }
  }
}
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f42:	b2db      	uxtb	r3, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b40      	cmp	r3, #64	@ 0x40
 8004f94:	d108      	bne.n	8004fa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fa6:	e007      	b.n	8004fb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3b10      	subs	r3, #16
 8004fd4:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <DMA_CalcBaseAndBitshift+0x64>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fde:	4a13      	ldr	r2, [pc, #76]	@ (800502c <DMA_CalcBaseAndBitshift+0x68>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d909      	bls.n	8005006 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	659a      	str	r2, [r3, #88]	@ 0x58
 8005004:	e007      	b.n	8005016 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	aaaaaaab 	.word	0xaaaaaaab
 800502c:	08012534 	.word	0x08012534

08005030 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11f      	bne.n	800508a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d856      	bhi.n	80050fe <DMA_CheckFifoParam+0xce>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <DMA_CheckFifoParam+0x28>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	08005069 	.word	0x08005069
 800505c:	0800507b 	.word	0x0800507b
 8005060:	08005069 	.word	0x08005069
 8005064:	080050ff 	.word	0x080050ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d046      	beq.n	8005102 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005078:	e043      	b.n	8005102 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005082:	d140      	bne.n	8005106 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005088:	e03d      	b.n	8005106 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005092:	d121      	bne.n	80050d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d837      	bhi.n	800510a <DMA_CheckFifoParam+0xda>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <DMA_CheckFifoParam+0x70>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050b7 	.word	0x080050b7
 80050a8:	080050b1 	.word	0x080050b1
 80050ac:	080050c9 	.word	0x080050c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e030      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d025      	beq.n	800510e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c6:	e022      	b.n	800510e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050d0:	d11f      	bne.n	8005112 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050d6:	e01c      	b.n	8005112 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d903      	bls.n	80050e6 <DMA_CheckFifoParam+0xb6>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d003      	beq.n	80050ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050e4:	e018      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ea:	e015      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00e      	beq.n	8005116 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e00b      	b.n	8005116 <DMA_CheckFifoParam+0xe6>
      break;
 80050fe:	bf00      	nop
 8005100:	e00a      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 8005102:	bf00      	nop
 8005104:	e008      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 8005106:	bf00      	nop
 8005108:	e006      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 800510a:	bf00      	nop
 800510c:	e004      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;   
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 8005116:	bf00      	nop
    }
  } 
  
  return status; 
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop

08005128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	@ 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e159      	b.n	80053f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005144:	2201      	movs	r2, #1
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	f040 8148 	bne.w	80053f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d005      	beq.n	800517a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005176:	2b02      	cmp	r3, #2
 8005178:	d130      	bne.n	80051dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	2203      	movs	r2, #3
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b0:	2201      	movs	r2, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 0201 	and.w	r2, r3, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d017      	beq.n	8005218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2203      	movs	r2, #3
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d123      	bne.n	800526c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	69b9      	ldr	r1, [r7, #24]
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a2 	beq.w	80053f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4b57      	ldr	r3, [pc, #348]	@ (8005410 <HAL_GPIO_Init+0x2e8>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	4a56      	ldr	r2, [pc, #344]	@ (8005410 <HAL_GPIO_Init+0x2e8>)
 80052b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80052be:	4b54      	ldr	r3, [pc, #336]	@ (8005410 <HAL_GPIO_Init+0x2e8>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ca:	4a52      	ldr	r2, [pc, #328]	@ (8005414 <HAL_GPIO_Init+0x2ec>)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a49      	ldr	r2, [pc, #292]	@ (8005418 <HAL_GPIO_Init+0x2f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d019      	beq.n	800532a <HAL_GPIO_Init+0x202>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a48      	ldr	r2, [pc, #288]	@ (800541c <HAL_GPIO_Init+0x2f4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <HAL_GPIO_Init+0x1fe>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a47      	ldr	r2, [pc, #284]	@ (8005420 <HAL_GPIO_Init+0x2f8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00d      	beq.n	8005322 <HAL_GPIO_Init+0x1fa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a46      	ldr	r2, [pc, #280]	@ (8005424 <HAL_GPIO_Init+0x2fc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <HAL_GPIO_Init+0x1f6>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a45      	ldr	r2, [pc, #276]	@ (8005428 <HAL_GPIO_Init+0x300>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <HAL_GPIO_Init+0x1f2>
 8005316:	2304      	movs	r3, #4
 8005318:	e008      	b.n	800532c <HAL_GPIO_Init+0x204>
 800531a:	2307      	movs	r3, #7
 800531c:	e006      	b.n	800532c <HAL_GPIO_Init+0x204>
 800531e:	2303      	movs	r3, #3
 8005320:	e004      	b.n	800532c <HAL_GPIO_Init+0x204>
 8005322:	2302      	movs	r3, #2
 8005324:	e002      	b.n	800532c <HAL_GPIO_Init+0x204>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_GPIO_Init+0x204>
 800532a:	2300      	movs	r3, #0
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	f002 0203 	and.w	r2, r2, #3
 8005332:	0092      	lsls	r2, r2, #2
 8005334:	4093      	lsls	r3, r2
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800533c:	4935      	ldr	r1, [pc, #212]	@ (8005414 <HAL_GPIO_Init+0x2ec>)
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	3302      	adds	r3, #2
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800534a:	4b38      	ldr	r3, [pc, #224]	@ (800542c <HAL_GPIO_Init+0x304>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	43db      	mvns	r3, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4013      	ands	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800536e:	4a2f      	ldr	r2, [pc, #188]	@ (800542c <HAL_GPIO_Init+0x304>)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005374:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <HAL_GPIO_Init+0x304>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005398:	4a24      	ldr	r2, [pc, #144]	@ (800542c <HAL_GPIO_Init+0x304>)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800539e:	4b23      	ldr	r3, [pc, #140]	@ (800542c <HAL_GPIO_Init+0x304>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053c2:	4a1a      	ldr	r2, [pc, #104]	@ (800542c <HAL_GPIO_Init+0x304>)
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053c8:	4b18      	ldr	r3, [pc, #96]	@ (800542c <HAL_GPIO_Init+0x304>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053ec:	4a0f      	ldr	r2, [pc, #60]	@ (800542c <HAL_GPIO_Init+0x304>)
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3301      	adds	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	f67f aea2 	bls.w	8005144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	3724      	adds	r7, #36	@ 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40023800 	.word	0x40023800
 8005414:	40013800 	.word	0x40013800
 8005418:	40020000 	.word	0x40020000
 800541c:	40020400 	.word	0x40020400
 8005420:	40020800 	.word	0x40020800
 8005424:	40020c00 	.word	0x40020c00
 8005428:	40021000 	.word	0x40021000
 800542c:	40013c00 	.word	0x40013c00

08005430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	4013      	ands	r3, r2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
 800544c:	e001      	b.n	8005452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544e:	2300      	movs	r3, #0
 8005450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	807b      	strh	r3, [r7, #2]
 800546c:	4613      	mov	r3, r2
 800546e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005470:	787b      	ldrb	r3, [r7, #1]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005476:	887a      	ldrh	r2, [r7, #2]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800547c:	e003      	b.n	8005486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800547e:	887b      	ldrh	r3, [r7, #2]
 8005480:	041a      	lsls	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	619a      	str	r2, [r3, #24]
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054a4:	887a      	ldrh	r2, [r7, #2]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4013      	ands	r3, r2
 80054aa:	041a      	lsls	r2, r3, #16
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	43d9      	mvns	r1, r3
 80054b0:	887b      	ldrh	r3, [r7, #2]
 80054b2:	400b      	ands	r3, r1
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	619a      	str	r2, [r3, #24]
}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054d2:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d006      	beq.n	80054ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054de:	4a05      	ldr	r2, [pc, #20]	@ (80054f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd fdf4 	bl	80030d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40013c00 	.word	0x40013c00

080054f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e12b      	b.n	8005762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fe f874 	bl	800360c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	@ 0x24
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800554a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800555a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800555c:	f005 fa34 	bl	800a9c8 <HAL_RCC_GetPCLK1Freq>
 8005560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4a81      	ldr	r2, [pc, #516]	@ (800576c <HAL_I2C_Init+0x274>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d807      	bhi.n	800557c <HAL_I2C_Init+0x84>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a80      	ldr	r2, [pc, #512]	@ (8005770 <HAL_I2C_Init+0x278>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e006      	b.n	800558a <HAL_I2C_Init+0x92>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a7d      	ldr	r2, [pc, #500]	@ (8005774 <HAL_I2C_Init+0x27c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	bf94      	ite	ls
 8005584:	2301      	movls	r3, #1
 8005586:	2300      	movhi	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0e7      	b.n	8005762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a78      	ldr	r2, [pc, #480]	@ (8005778 <HAL_I2C_Init+0x280>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a6a      	ldr	r2, [pc, #424]	@ (800576c <HAL_I2C_Init+0x274>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <HAL_I2C_Init+0xd4>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	e009      	b.n	80055e0 <HAL_I2C_Init+0xe8>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	4a69      	ldr	r2, [pc, #420]	@ (800577c <HAL_I2C_Init+0x284>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	3301      	adds	r3, #1
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	495c      	ldr	r1, [pc, #368]	@ (800576c <HAL_I2C_Init+0x274>)
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d819      	bhi.n	8005634 <HAL_I2C_Init+0x13c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e59      	subs	r1, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fbb1 f3f3 	udiv	r3, r1, r3
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005614:	400b      	ands	r3, r1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_I2C_Init+0x138>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e59      	subs	r1, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	fbb1 f3f3 	udiv	r3, r1, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	e051      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005630:	2304      	movs	r3, #4
 8005632:	e04f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d111      	bne.n	8005660 <HAL_I2C_Init+0x168>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1e58      	subs	r0, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e012      	b.n	8005686 <HAL_I2C_Init+0x18e>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	0099      	lsls	r1, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	fbb0 f3f3 	udiv	r3, r0, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Init+0x196>
 800568a:	2301      	movs	r3, #1
 800568c:	e022      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10e      	bne.n	80056b4 <HAL_I2C_Init+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1e58      	subs	r0, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056b2:	e00f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1e58      	subs	r0, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	0099      	lsls	r1, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	6809      	ldr	r1, [r1, #0]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6911      	ldr	r1, [r2, #16]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	4311      	orrs	r1, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	430b      	orrs	r3, r1
 8005716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	000186a0 	.word	0x000186a0
 8005770:	001e847f 	.word	0x001e847f
 8005774:	003d08ff 	.word	0x003d08ff
 8005778:	431bde83 	.word	0x431bde83
 800577c:	10624dd3 	.word	0x10624dd3

08005780 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005792:	2b80      	cmp	r3, #128	@ 0x80
 8005794:	d103      	bne.n	800579e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
  }
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	461a      	mov	r2, r3
 80057b8:	460b      	mov	r3, r1
 80057ba:	817b      	strh	r3, [r7, #10]
 80057bc:	4613      	mov	r3, r2
 80057be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057c0:	f7fe fa38 	bl	8003c34 <HAL_GetTick>
 80057c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	f040 80e0 	bne.w	8005994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2319      	movs	r3, #25
 80057da:	2201      	movs	r2, #1
 80057dc:	4970      	ldr	r1, [pc, #448]	@ (80059a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f002 ffe0 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80057ea:	2302      	movs	r3, #2
 80057ec:	e0d3      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_I2C_Master_Transmit+0x50>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e0cc      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1ea>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d007      	beq.n	8005822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2221      	movs	r2, #33	@ 0x21
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2210      	movs	r2, #16
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	893a      	ldrh	r2, [r7, #8]
 8005852:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005858:	b29a      	uxth	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4a50      	ldr	r2, [pc, #320]	@ (80059a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005862:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005864:	8979      	ldrh	r1, [r7, #10]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6a3a      	ldr	r2, [r7, #32]
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f002 fbd6 	bl	800801c <I2C_MasterRequestWrite>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e08d      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005890:	e066      	b.n	8005960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	6a39      	ldr	r1, [r7, #32]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f003 f89e 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d107      	bne.n	80058ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e06b      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c2:	781a      	ldrb	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d11b      	bne.n	8005934 <HAL_I2C_Master_Transmit+0x188>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d017      	beq.n	8005934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	6a39      	ldr	r1, [r7, #32]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f003 f895 	bl	8008a68 <I2C_WaitOnBTFFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00d      	beq.n	8005960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005948:	2b04      	cmp	r3, #4
 800594a:	d107      	bne.n	800595c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e01a      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	d194      	bne.n	8005892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	00100002 	.word	0x00100002
 80059a4:	ffff0000 	.word	0xffff0000

080059a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	4603      	mov	r3, r0
 80059b8:	817b      	strh	r3, [r7, #10]
 80059ba:	460b      	mov	r3, r1
 80059bc:	813b      	strh	r3, [r7, #8]
 80059be:	4613      	mov	r3, r2
 80059c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059c2:	f7fe f937 	bl	8003c34 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	f040 80d9 	bne.w	8005b88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	2319      	movs	r3, #25
 80059dc:	2201      	movs	r2, #1
 80059de:	496d      	ldr	r1, [pc, #436]	@ (8005b94 <HAL_I2C_Mem_Write+0x1ec>)
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f002 fedf 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80059ec:	2302      	movs	r3, #2
 80059ee:	e0cc      	b.n	8005b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_I2C_Mem_Write+0x56>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0c5      	b.n	8005b8a <HAL_I2C_Mem_Write+0x1e2>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d007      	beq.n	8005a24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2221      	movs	r2, #33	@ 0x21
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2240      	movs	r2, #64	@ 0x40
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a4d      	ldr	r2, [pc, #308]	@ (8005b98 <HAL_I2C_Mem_Write+0x1f0>)
 8005a64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a66:	88f8      	ldrh	r0, [r7, #6]
 8005a68:	893a      	ldrh	r2, [r7, #8]
 8005a6a:	8979      	ldrh	r1, [r7, #10]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	4603      	mov	r3, r0
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f002 fb52 	bl	8008120 <I2C_RequestMemoryWrite>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d052      	beq.n	8005b28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e081      	b.n	8005b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f002 ffa4 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d107      	bne.n	8005aae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e06b      	b.n	8005b8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d11b      	bne.n	8005b28 <HAL_I2C_Mem_Write+0x180>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d017      	beq.n	8005b28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	781a      	ldrb	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1aa      	bne.n	8005a86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f002 ff97 	bl	8008a68 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00d      	beq.n	8005b5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d107      	bne.n	8005b58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e016      	b.n	8005b8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e000      	b.n	8005b8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	00100002 	.word	0x00100002
 8005b98:	ffff0000 	.word	0xffff0000

08005b9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08c      	sub	sp, #48	@ 0x30
 8005ba0:	af02      	add	r7, sp, #8
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	4608      	mov	r0, r1
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4603      	mov	r3, r0
 8005bac:	817b      	strh	r3, [r7, #10]
 8005bae:	460b      	mov	r3, r1
 8005bb0:	813b      	strh	r3, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bb6:	f7fe f83d 	bl	8003c34 <HAL_GetTick>
 8005bba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 8214 	bne.w	8005ff2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	2319      	movs	r3, #25
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	497b      	ldr	r1, [pc, #492]	@ (8005dc0 <HAL_I2C_Mem_Read+0x224>)
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f002 fde5 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	e207      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2C_Mem_Read+0x56>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e200      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d007      	beq.n	8005c18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2222      	movs	r2, #34	@ 0x22
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2240      	movs	r2, #64	@ 0x40
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc4 <HAL_I2C_Mem_Read+0x228>)
 8005c58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c5a:	88f8      	ldrh	r0, [r7, #6]
 8005c5c:	893a      	ldrh	r2, [r7, #8]
 8005c5e:	8979      	ldrh	r1, [r7, #10]
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4603      	mov	r3, r0
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f002 faee 	bl	800824c <I2C_RequestMemoryRead>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e1bc      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d113      	bne.n	8005caa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c82:	2300      	movs	r3, #0
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	623b      	str	r3, [r7, #32]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	623b      	str	r3, [r7, #32]
 8005c96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e190      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d11b      	bne.n	8005cea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	e170      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d11b      	bne.n	8005d2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	61bb      	str	r3, [r7, #24]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	e150      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d40:	e144      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	f200 80f1 	bhi.w	8005f2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d123      	bne.n	8005d9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f002 feff 	bl	8008b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e145      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d9a:	e117      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d14e      	bne.n	8005e42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005daa:	2200      	movs	r2, #0
 8005dac:	4906      	ldr	r1, [pc, #24]	@ (8005dc8 <HAL_I2C_Mem_Read+0x22c>)
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f002 fcf8 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e11a      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
 8005dbe:	bf00      	nop
 8005dc0:	00100002 	.word	0x00100002
 8005dc4:	ffff0000 	.word	0xffff0000
 8005dc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e40:	e0c4      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	2200      	movs	r2, #0
 8005e4a:	496c      	ldr	r1, [pc, #432]	@ (8005ffc <HAL_I2C_Mem_Read+0x460>)
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f002 fca9 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0cb      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4955      	ldr	r1, [pc, #340]	@ (8005ffc <HAL_I2C_Mem_Read+0x460>)
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f002 fc7b 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e09d      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f2c:	e04e      	b.n	8005fcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f002 fe12 	bl	8008b5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e058      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d124      	bne.n	8005fcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d107      	bne.n	8005f9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f47f aeb6 	bne.w	8005d42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	@ 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	00010004 	.word	0x00010004

08006000 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	@ 0x28
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	461a      	mov	r2, r3
 800600e:	4603      	mov	r3, r0
 8006010:	817b      	strh	r3, [r7, #10]
 8006012:	460b      	mov	r3, r1
 8006014:	813b      	strh	r3, [r7, #8]
 8006016:	4613      	mov	r3, r2
 8006018:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800601e:	f7fd fe09 	bl	8003c34 <HAL_GetTick>
 8006022:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b20      	cmp	r3, #32
 800602e:	f040 8136 	bne.w	800629e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006032:	4b9d      	ldr	r3, [pc, #628]	@ (80062a8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	4a9c      	ldr	r2, [pc, #624]	@ (80062ac <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	0a1a      	lsrs	r2, r3, #8
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009a      	lsls	r2, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	3b01      	subs	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d112      	bne.n	800607e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	f043 0220 	orr.w	r2, r3, #32
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800607a:	2302      	movs	r3, #2
 800607c:	e110      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	d0df      	beq.n	800604c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_I2C_Mem_Write_DMA+0x9a>
 8006096:	2302      	movs	r3, #2
 8006098:	e102      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d007      	beq.n	80060c0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2221      	movs	r2, #33	@ 0x21
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2240      	movs	r2, #64	@ 0x40
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80060f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4a6c      	ldr	r2, [pc, #432]	@ (80062b0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8006100:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006102:	897a      	ldrh	r2, [r7, #10]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006108:	893a      	ldrh	r2, [r7, #8]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800610e:	88fa      	ldrh	r2, [r7, #6]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80a9 	beq.w	8006276 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006128:	2b00      	cmp	r3, #0
 800612a:	d02a      	beq.n	8006182 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006130:	4a60      	ldr	r2, [pc, #384]	@ (80062b4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8006132:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006138:	4a5f      	ldr	r2, [pc, #380]	@ (80062b8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800613a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006140:	2200      	movs	r2, #0
 8006142:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006148:	2200      	movs	r2, #0
 800614a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006150:	2200      	movs	r2, #0
 8006152:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006158:	2200      	movs	r2, #0
 800615a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006164:	4619      	mov	r1, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3310      	adds	r3, #16
 800616c:	461a      	mov	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006172:	f7fe fc6b 	bl	8004a4c <HAL_DMA_Start_IT>
 8006176:	4603      	mov	r3, r0
 8006178:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800617a:	7efb      	ldrb	r3, [r7, #27]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d166      	bne.n	800624e <HAL_I2C_Mem_Write_DMA+0x24e>
 8006180:	e013      	b.n	80061aa <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e07a      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80061aa:	88f8      	ldrh	r0, [r7, #6]
 80061ac:	893a      	ldrh	r2, [r7, #8]
 80061ae:	8979      	ldrh	r1, [r7, #10]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	2323      	movs	r3, #35	@ 0x23
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f001 ffb0 	bl	8008120 <I2C_RequestMemoryWrite>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d022      	beq.n	800620c <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fd06 	bl	8004bdc <HAL_DMA_Abort_IT>
 80061d0:	4603      	mov	r3, r0
 80061d2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d8:	2200      	movs	r2, #0
 80061da:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e049      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	613b      	str	r3, [r7, #16]
 8006220:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006238:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006248:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e028      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	f043 0210 	orr.w	r2, r3, #16
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e014      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	20000010 	.word	0x20000010
 80062ac:	14f8b589 	.word	0x14f8b589
 80062b0:	ffff0000 	.word	0xffff0000
 80062b4:	0800841d 	.word	0x0800841d
 80062b8:	080085db 	.word	0x080085db

080062bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08c      	sub	sp, #48	@ 0x30
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	4608      	mov	r0, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	461a      	mov	r2, r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	817b      	strh	r3, [r7, #10]
 80062ce:	460b      	mov	r3, r1
 80062d0:	813b      	strh	r3, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062d6:	f7fd fcad 	bl	8003c34 <HAL_GetTick>
 80062da:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	f040 8172 	bne.w	80065d2 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ee:	4b93      	ldr	r3, [pc, #588]	@ (800653c <HAL_I2C_Mem_Read_DMA+0x280>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	4a92      	ldr	r2, [pc, #584]	@ (8006540 <HAL_I2C_Mem_Read_DMA+0x284>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0a1a      	lsrs	r2, r3, #8
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009a      	lsls	r2, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	3b01      	subs	r3, #1
 800630c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d112      	bne.n	800633a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	e14c      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d0df      	beq.n	8006308 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_I2C_Mem_Read_DMA+0x9a>
 8006352:	2302      	movs	r3, #2
 8006354:	e13e      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d007      	beq.n	800637c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800638a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2222      	movs	r2, #34	@ 0x22
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2240      	movs	r2, #64	@ 0x40
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80063ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a62      	ldr	r2, [pc, #392]	@ (8006544 <HAL_I2C_Mem_Read_DMA+0x288>)
 80063bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80063be:	897a      	ldrh	r2, [r7, #10]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80063c4:	893a      	ldrh	r2, [r7, #8]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80cc 	beq.w	8006578 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02d      	beq.n	8006444 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	4a56      	ldr	r2, [pc, #344]	@ (8006548 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80063ee:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f4:	4a55      	ldr	r2, [pc, #340]	@ (800654c <HAL_I2C_Mem_Read_DMA+0x290>)
 80063f6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006404:	2200      	movs	r2, #0
 8006406:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	2200      	movs	r2, #0
 800640e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	2200      	movs	r2, #0
 8006416:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3310      	adds	r3, #16
 8006422:	4619      	mov	r1, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	461a      	mov	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800642e:	f7fe fb0d 	bl	8004a4c <HAL_DMA_Start_IT>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006438:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800643c:	2b00      	cmp	r3, #0
 800643e:	f040 8087 	bne.w	8006550 <HAL_I2C_Mem_Read_DMA+0x294>
 8006442:	e013      	b.n	800646c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0b3      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800646c:	88f8      	ldrh	r0, [r7, #6]
 800646e:	893a      	ldrh	r2, [r7, #8]
 8006470:	8979      	ldrh	r1, [r7, #10]
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	2323      	movs	r3, #35	@ 0x23
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f001 fee5 	bl	800824c <I2C_RequestMemoryRead>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d023      	beq.n	80064d0 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648c:	4618      	mov	r0, r3
 800648e:	f7fe fba5 	bl	8004bdc <HAL_DMA_Abort_IT>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649c:	2200      	movs	r2, #0
 800649e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e081      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d108      	bne.n	80064ea <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e007      	b.n	80064fa <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fa:	2300      	movs	r3, #0
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	61bb      	str	r3, [r7, #24]
 800650e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006526:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	e049      	b.n	80065ce <HAL_I2C_Mem_Read_DMA+0x312>
 800653a:	bf00      	nop
 800653c:	20000010 	.word	0x20000010
 8006540:	14f8b589 	.word	0x14f8b589
 8006544:	ffff0000 	.word	0xffff0000
 8006548:	0800841d 	.word	0x0800841d
 800654c:	080085db 	.word	0x080085db
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	f043 0210 	orr.w	r2, r3, #16
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e02d      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006578:	88f8      	ldrh	r0, [r7, #6]
 800657a:	893a      	ldrh	r2, [r7, #8]
 800657c:	8979      	ldrh	r1, [r7, #10]
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2323      	movs	r3, #35	@ 0x23
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4603      	mov	r3, r0
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f001 fe5f 	bl	800824c <I2C_RequestMemoryRead>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e01d      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065bc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e000      	b.n	80065d4 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	@ 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	@ 0x28
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	460b      	mov	r3, r1
 80065ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80065ec:	f7fd fb22 	bl	8003c34 <HAL_GetTick>
 80065f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b20      	cmp	r3, #32
 8006600:	f040 8111 	bne.w	8006826 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2319      	movs	r3, #25
 800660a:	2201      	movs	r2, #1
 800660c:	4988      	ldr	r1, [pc, #544]	@ (8006830 <HAL_I2C_IsDeviceReady+0x254>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f002 f8c8 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	e104      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_I2C_IsDeviceReady+0x50>
 8006628:	2302      	movs	r3, #2
 800662a:	e0fd      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d007      	beq.n	8006652 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2224      	movs	r2, #36	@ 0x24
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a70      	ldr	r2, [pc, #448]	@ (8006834 <HAL_I2C_IsDeviceReady+0x258>)
 8006674:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006684:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2200      	movs	r2, #0
 800668e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f002 f886 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00d      	beq.n	80066ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ac:	d103      	bne.n	80066b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066b4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e0b6      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ba:	897b      	ldrh	r3, [r7, #10]
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80066ca:	f7fd fab3 	bl	8003c34 <HAL_GetTick>
 80066ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066fe:	e025      	b.n	800674c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006700:	f7fd fa98 	bl	8003c34 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d302      	bcc.n	8006716 <HAL_I2C_IsDeviceReady+0x13a>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	22a0      	movs	r2, #160	@ 0xa0
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b02      	cmp	r3, #2
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006742:	bf0c      	ite	eq
 8006744:	2301      	moveq	r3, #1
 8006746:	2300      	movne	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2ba0      	cmp	r3, #160	@ 0xa0
 8006756:	d005      	beq.n	8006764 <HAL_I2C_IsDeviceReady+0x188>
 8006758:	7dfb      	ldrb	r3, [r7, #23]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <HAL_I2C_IsDeviceReady+0x188>
 800675e:	7dbb      	ldrb	r3, [r7, #22]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0cd      	beq.n	8006700 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d129      	bne.n	80067ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006788:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2319      	movs	r3, #25
 80067a6:	2201      	movs	r2, #1
 80067a8:	4921      	ldr	r1, [pc, #132]	@ (8006830 <HAL_I2C_IsDeviceReady+0x254>)
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f001 fffa 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e036      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e02c      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2319      	movs	r3, #25
 80067ee:	2201      	movs	r2, #1
 80067f0:	490f      	ldr	r1, [pc, #60]	@ (8006830 <HAL_I2C_IsDeviceReady+0x254>)
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f001 ffd6 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e012      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	3301      	adds	r3, #1
 8006806:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	429a      	cmp	r2, r3
 800680e:	f4ff af32 	bcc.w	8006676 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006826:	2302      	movs	r3, #2
  }
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	00100002 	.word	0x00100002
 8006834:	ffff0000 	.word	0xffff0000

08006838 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006858:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006860:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b10      	cmp	r3, #16
 8006866:	d003      	beq.n	8006870 <HAL_I2C_EV_IRQHandler+0x38>
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2b40      	cmp	r3, #64	@ 0x40
 800686c:	f040 80c1 	bne.w	80069f2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10d      	bne.n	80068a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006890:	d003      	beq.n	800689a <HAL_I2C_EV_IRQHandler+0x62>
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006898:	d101      	bne.n	800689e <HAL_I2C_EV_IRQHandler+0x66>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <HAL_I2C_EV_IRQHandler+0x68>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	f000 8132 	beq.w	8006b0a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00c      	beq.n	80068ca <HAL_I2C_EV_IRQHandler+0x92>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	0a5b      	lsrs	r3, r3, #9
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f002 f9d9 	bl	8008c74 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fd8b 	bl	80073de <I2C_Master_SB>
 80068c8:	e092      	b.n	80069f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_I2C_EV_IRQHandler+0xb2>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	0a5b      	lsrs	r3, r3, #9
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fe01 	bl	80074ea <I2C_Master_ADD10>
 80068e8:	e082      	b.n	80069f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <HAL_I2C_EV_IRQHandler+0xd2>
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	0a5b      	lsrs	r3, r3, #9
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fe1b 	bl	800753e <I2C_Master_ADDR>
 8006908:	e072      	b.n	80069f0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d03b      	beq.n	800698e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006924:	f000 80f3 	beq.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	09db      	lsrs	r3, r3, #7
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00f      	beq.n	8006954 <HAL_I2C_EV_IRQHandler+0x11c>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	0a9b      	lsrs	r3, r3, #10
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <HAL_I2C_EV_IRQHandler+0x11c>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d103      	bne.n	8006954 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f9df 	bl	8006d10 <I2C_MasterTransmit_TXE>
 8006952:	e04d      	b.n	80069f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80d6 	beq.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	0a5b      	lsrs	r3, r3, #9
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80cf 	beq.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006970:	7bbb      	ldrb	r3, [r7, #14]
 8006972:	2b21      	cmp	r3, #33	@ 0x21
 8006974:	d103      	bne.n	800697e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa66 	bl	8006e48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800697c:	e0c7      	b.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800697e:	7bfb      	ldrb	r3, [r7, #15]
 8006980:	2b40      	cmp	r3, #64	@ 0x40
 8006982:	f040 80c4 	bne.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fad4 	bl	8006f34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800698c:	e0bf      	b.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800699c:	f000 80b7 	beq.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00f      	beq.n	80069cc <HAL_I2C_EV_IRQHandler+0x194>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	0a9b      	lsrs	r3, r3, #10
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <HAL_I2C_EV_IRQHandler+0x194>
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	089b      	lsrs	r3, r3, #2
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb4d 	bl	8007064 <I2C_MasterReceive_RXNE>
 80069ca:	e011      	b.n	80069f0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	089b      	lsrs	r3, r3, #2
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 809a 	beq.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	0a5b      	lsrs	r3, r3, #9
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8093 	beq.w	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc03 	bl	80071f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ee:	e08e      	b.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
 80069f0:	e08d      	b.n	8006b0e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	e007      	b.n	8006a14 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d012      	beq.n	8006a46 <HAL_I2C_EV_IRQHandler+0x20e>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00c      	beq.n	8006a46 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006a3c:	69b9      	ldr	r1, [r7, #24]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 ffcc 	bl	80079dc <I2C_Slave_ADDR>
 8006a44:	e066      	b.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d009      	beq.n	8006a66 <HAL_I2C_EV_IRQHandler+0x22e>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	0a5b      	lsrs	r3, r3, #9
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 f806 	bl	8007a70 <I2C_Slave_STOPF>
 8006a64:	e056      	b.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	2b21      	cmp	r3, #33	@ 0x21
 8006a6a:	d002      	beq.n	8006a72 <HAL_I2C_EV_IRQHandler+0x23a>
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	2b29      	cmp	r3, #41	@ 0x29
 8006a70:	d125      	bne.n	8006abe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	09db      	lsrs	r3, r3, #7
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00f      	beq.n	8006a9e <HAL_I2C_EV_IRQHandler+0x266>
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	0a9b      	lsrs	r3, r3, #10
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_I2C_EV_IRQHandler+0x266>
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	089b      	lsrs	r3, r3, #2
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fee2 	bl	8007860 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a9c:	e039      	b.n	8006b12 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d033      	beq.n	8006b12 <HAL_I2C_EV_IRQHandler+0x2da>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	0a5b      	lsrs	r3, r3, #9
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d02d      	beq.n	8006b12 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 ff0f 	bl	80078da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006abc:	e029      	b.n	8006b12 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	099b      	lsrs	r3, r3, #6
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <HAL_I2C_EV_IRQHandler+0x2b2>
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	0a9b      	lsrs	r3, r3, #10
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	089b      	lsrs	r3, r3, #2
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d103      	bne.n	8006aea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 ff1a 	bl	800791c <I2C_SlaveReceive_RXNE>
 8006ae8:	e014      	b.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	089b      	lsrs	r3, r3, #2
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 ff48 	bl	8007998 <I2C_SlaveReceive_BTF>
 8006b08:	e004      	b.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08a      	sub	sp, #40	@ 0x28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	0a1b      	lsrs	r3, r3, #8
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <HAL_I2C_ER_IRQHandler+0x4e>
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	0a5b      	lsrs	r3, r3, #9
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <HAL_I2C_ER_IRQHandler+0x78>
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d008      	beq.n	8006b92 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	f043 0302 	orr.w	r3, r3, #2
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006b90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	0a9b      	lsrs	r3, r3, #10
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d03f      	beq.n	8006c1e <HAL_I2C_ER_IRQHandler+0x104>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d039      	beq.n	8006c1e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006baa:	7efb      	ldrb	r3, [r7, #27]
 8006bac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bbc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006bc4:	7ebb      	ldrb	r3, [r7, #26]
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d112      	bne.n	8006bf0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10f      	bne.n	8006bf0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006bd0:	7cfb      	ldrb	r3, [r7, #19]
 8006bd2:	2b21      	cmp	r3, #33	@ 0x21
 8006bd4:	d008      	beq.n	8006be8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006bd6:	7cfb      	ldrb	r3, [r7, #19]
 8006bd8:	2b29      	cmp	r3, #41	@ 0x29
 8006bda:	d005      	beq.n	8006be8 <HAL_I2C_ER_IRQHandler+0xce>
 8006bdc:	7cfb      	ldrb	r3, [r7, #19]
 8006bde:	2b28      	cmp	r3, #40	@ 0x28
 8006be0:	d106      	bne.n	8006bf0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b21      	cmp	r3, #33	@ 0x21
 8006be6:	d103      	bne.n	8006bf0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f871 	bl	8007cd0 <I2C_Slave_AF>
 8006bee:	e016      	b.n	8006c1e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bf8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	f043 0304 	orr.w	r3, r3, #4
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c02:	7efb      	ldrb	r3, [r7, #27]
 8006c04:	2b10      	cmp	r3, #16
 8006c06:	d002      	beq.n	8006c0e <HAL_I2C_ER_IRQHandler+0xf4>
 8006c08:	7efb      	ldrb	r3, [r7, #27]
 8006c0a:	2b40      	cmp	r3, #64	@ 0x40
 8006c0c:	d107      	bne.n	8006c1e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c1c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	0adb      	lsrs	r3, r3, #11
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <HAL_I2C_ER_IRQHandler+0x12e>
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	f043 0308 	orr.w	r3, r3, #8
 8006c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006c46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d008      	beq.n	8006c60 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 f8ac 	bl	8007db8 <I2C_ITError>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3728      	adds	r7, #40	@ 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	70fb      	strb	r3, [r7, #3]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d150      	bne.n	8006dd8 <I2C_MasterTransmit_TXE+0xc8>
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
 8006d38:	2b21      	cmp	r3, #33	@ 0x21
 8006d3a:	d14d      	bne.n	8006dd8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d01d      	beq.n	8006d7e <I2C_MasterTransmit_TXE+0x6e>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d01a      	beq.n	8006d7e <I2C_MasterTransmit_TXE+0x6e>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d4e:	d016      	beq.n	8006d7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2211      	movs	r2, #17
 8006d64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ff76 	bl	8006c68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d7c:	e060      	b.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b40      	cmp	r3, #64	@ 0x40
 8006db6:	d107      	bne.n	8006dc8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc f947 	bl	8003054 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006dc6:	e03b      	b.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff ff49 	bl	8006c68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006dd6:	e033      	b.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b21      	cmp	r3, #33	@ 0x21
 8006ddc:	d005      	beq.n	8006dea <I2C_MasterTransmit_TXE+0xda>
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	2b40      	cmp	r3, #64	@ 0x40
 8006de2:	d12d      	bne.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	2b22      	cmp	r3, #34	@ 0x22
 8006de8:	d12a      	bne.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d108      	bne.n	8006e06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006e04:	e01c      	b.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b40      	cmp	r3, #64	@ 0x40
 8006e10:	d103      	bne.n	8006e1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f88e 	bl	8006f34 <I2C_MemoryTransmit_TXE_BTF>
}
 8006e18:	e012      	b.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1e:	781a      	ldrb	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006e3e:	e7ff      	b.n	8006e40 <I2C_MasterTransmit_TXE+0x130>
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b21      	cmp	r3, #33	@ 0x21
 8006e60:	d164      	bne.n	8006f2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d012      	beq.n	8006e92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e90:	e04c      	b.n	8006f2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d01d      	beq.n	8006ed4 <I2C_MasterTransmit_BTF+0x8c>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d01a      	beq.n	8006ed4 <I2C_MasterTransmit_BTF+0x8c>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ea4:	d016      	beq.n	8006ed4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006eb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2211      	movs	r2, #17
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fecb 	bl	8006c68 <HAL_I2C_MasterTxCpltCallback>
}
 8006ed2:	e02b      	b.n	8006f2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ee2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ef2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b40      	cmp	r3, #64	@ 0x40
 8006f0c:	d107      	bne.n	8006f1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fc f89c 	bl	8003054 <HAL_I2C_MemTxCpltCallback>
}
 8006f1c:	e006      	b.n	8006f2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fe9e 	bl	8006c68 <HAL_I2C_MasterTxCpltCallback>
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d11d      	bne.n	8006f88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d10b      	bne.n	8006f6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006f6a:	e077      	b.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	121b      	asrs	r3, r3, #8
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f86:	e069      	b.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10b      	bne.n	8006fa8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006fa6:	e059      	b.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d152      	bne.n	8007056 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b22      	cmp	r3, #34	@ 0x22
 8006fb4:	d10d      	bne.n	8006fd2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fc4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006fd0:	e044      	b.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d015      	beq.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b21      	cmp	r3, #33	@ 0x21
 8006fe0:	d112      	bne.n	8007008 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	781a      	ldrb	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	b29a      	uxth	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007006:	e029      	b.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d124      	bne.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b21      	cmp	r3, #33	@ 0x21
 8007016:	d121      	bne.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007026:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007036:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fc f800 	bl	8003054 <HAL_I2C_MemTxCpltCallback>
}
 8007054:	e002      	b.n	800705c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fe fb92 	bl	8005780 <I2C_Flush_DR>
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b22      	cmp	r3, #34	@ 0x22
 8007076:	f040 80b9 	bne.w	80071ec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d921      	bls.n	80070d2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	f040 8096 	bne.w	80071ec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80070d0:	e08c      	b.n	80071ec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d07f      	beq.n	80071da <I2C_MasterReceive_RXNE+0x176>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d002      	beq.n	80070e6 <I2C_MasterReceive_RXNE+0x82>
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d179      	bne.n	80071da <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fd06 	bl	8008af8 <I2C_WaitOnSTOPRequestThroughIT>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d14c      	bne.n	800718c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007100:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007110:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b40      	cmp	r3, #64	@ 0x40
 800714a:	d10a      	bne.n	8007162 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fb ff8a 	bl	8003074 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007160:	e044      	b.n	80071ec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b08      	cmp	r3, #8
 800716e:	d002      	beq.n	8007176 <I2C_MasterReceive_RXNE+0x112>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b20      	cmp	r3, #32
 8007174:	d103      	bne.n	800717e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	631a      	str	r2, [r3, #48]	@ 0x30
 800717c:	e002      	b.n	8007184 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2212      	movs	r2, #18
 8007182:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fd79 	bl	8006c7c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800718a:	e02f      	b.n	80071ec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800719a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fd88 	bl	8006ce8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80071d8:	e008      	b.n	80071ec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071e8:	605a      	str	r2, [r3, #4]
}
 80071ea:	e7ff      	b.n	80071ec <I2C_MasterReceive_RXNE+0x188>
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007200:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b04      	cmp	r3, #4
 800720a:	d11b      	bne.n	8007244 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800721a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007238:	b29b      	uxth	r3, r3
 800723a:	3b01      	subs	r3, #1
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007242:	e0c8      	b.n	80073d6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d129      	bne.n	80072a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800725c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b04      	cmp	r3, #4
 8007262:	d00a      	beq.n	800727a <I2C_MasterReceive_BTF+0x86>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d007      	beq.n	800727a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007278:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691a      	ldr	r2, [r3, #16]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80072a0:	e099      	b.n	80073d6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	f040 8081 	bne.w	80073b0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <I2C_MasterReceive_BTF+0xc6>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d108      	bne.n	80072cc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	e019      	b.n	8007300 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d002      	beq.n	80072d8 <I2C_MasterReceive_BTF+0xe4>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d108      	bne.n	80072ea <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e00a      	b.n	8007300 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b10      	cmp	r3, #16
 80072ee:	d007      	beq.n	8007300 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29a      	uxth	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800735a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b40      	cmp	r3, #64	@ 0x40
 800736e:	d10a      	bne.n	8007386 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7fb fe78 	bl	8003074 <HAL_I2C_MemRxCpltCallback>
}
 8007384:	e027      	b.n	80073d6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b08      	cmp	r3, #8
 8007392:	d002      	beq.n	800739a <I2C_MasterReceive_BTF+0x1a6>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b20      	cmp	r3, #32
 8007398:	d103      	bne.n	80073a2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	@ 0x30
 80073a0:	e002      	b.n	80073a8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2212      	movs	r2, #18
 80073a6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff fc67 	bl	8006c7c <HAL_I2C_MasterRxCpltCallback>
}
 80073ae:	e012      	b.n	80073d6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691a      	ldr	r2, [r3, #16]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80073d6:	bf00      	nop
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b40      	cmp	r3, #64	@ 0x40
 80073f0:	d117      	bne.n	8007422 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d109      	bne.n	800740e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800740a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800740c:	e067      	b.n	80074de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	b2da      	uxtb	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	611a      	str	r2, [r3, #16]
}
 8007420:	e05d      	b.n	80074de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800742a:	d133      	bne.n	8007494 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b21      	cmp	r3, #33	@ 0x21
 8007436:	d109      	bne.n	800744c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007448:	611a      	str	r2, [r3, #16]
 800744a:	e008      	b.n	800745e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007450:	b2db      	uxtb	r3, r3
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	b2da      	uxtb	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <I2C_Master_SB+0x92>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800746a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d108      	bne.n	8007482 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	2b00      	cmp	r3, #0
 8007476:	d032      	beq.n	80074de <I2C_Master_SB+0x100>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d02d      	beq.n	80074de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007490:	605a      	str	r2, [r3, #4]
}
 8007492:	e024      	b.n	80074de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10e      	bne.n	80074ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	11db      	asrs	r3, r3, #7
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 0306 	and.w	r3, r3, #6
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	f063 030f 	orn	r3, r3, #15
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	611a      	str	r2, [r3, #16]
}
 80074b8:	e011      	b.n	80074de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10d      	bne.n	80074de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	11db      	asrs	r3, r3, #7
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	f003 0306 	and.w	r3, r3, #6
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f063 030e 	orn	r3, r3, #14
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	611a      	str	r2, [r3, #16]
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007502:	2b00      	cmp	r3, #0
 8007504:	d004      	beq.n	8007510 <I2C_Master_ADD10+0x26>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d108      	bne.n	8007522 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <I2C_Master_ADD10+0x48>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007530:	605a      	str	r2, [r3, #4]
  }
}
 8007532:	bf00      	nop
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800753e:	b480      	push	{r7}
 8007540:	b091      	sub	sp, #68	@ 0x44
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800754c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b22      	cmp	r3, #34	@ 0x22
 8007566:	f040 8169 	bne.w	800783c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10f      	bne.n	8007592 <I2C_Master_ADDR+0x54>
 8007572:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d10b      	bne.n	8007592 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757a:	2300      	movs	r3, #0
 800757c:	633b      	str	r3, [r7, #48]	@ 0x30
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	633b      	str	r3, [r7, #48]	@ 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	633b      	str	r3, [r7, #48]	@ 0x30
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	e160      	b.n	8007854 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007596:	2b00      	cmp	r3, #0
 8007598:	d11d      	bne.n	80075d6 <I2C_Master_ADDR+0x98>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80075a2:	d118      	bne.n	80075d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a4:	2300      	movs	r3, #0
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80075d4:	e13e      	b.n	8007854 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d113      	bne.n	8007608 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075e0:	2300      	movs	r3, #0
 80075e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	e115      	b.n	8007834 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	f040 808a 	bne.w	8007728 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800761a:	d137      	bne.n	800768c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800762a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007636:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800763a:	d113      	bne.n	8007664 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800764a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800764c:	2300      	movs	r3, #0
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	e0e7      	b.n	8007834 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007664:	2300      	movs	r3, #0
 8007666:	623b      	str	r3, [r7, #32]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	623b      	str	r3, [r7, #32]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	623b      	str	r3, [r7, #32]
 8007678:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e0d3      	b.n	8007834 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800768c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768e:	2b08      	cmp	r3, #8
 8007690:	d02e      	beq.n	80076f0 <I2C_Master_ADDR+0x1b2>
 8007692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007694:	2b20      	cmp	r3, #32
 8007696:	d02b      	beq.n	80076f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769a:	2b12      	cmp	r3, #18
 800769c:	d102      	bne.n	80076a4 <I2C_Master_ADDR+0x166>
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d125      	bne.n	80076f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d00e      	beq.n	80076c8 <I2C_Master_ADDR+0x18a>
 80076aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d00b      	beq.n	80076c8 <I2C_Master_ADDR+0x18a>
 80076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d008      	beq.n	80076c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	e007      	b.n	80076d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d8:	2300      	movs	r3, #0
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	e0a1      	b.n	8007834 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	61bb      	str	r3, [r7, #24]
 8007714:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e085      	b.n	8007834 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d14d      	bne.n	80077ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007734:	2b04      	cmp	r3, #4
 8007736:	d016      	beq.n	8007766 <I2C_Master_ADDR+0x228>
 8007738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800773a:	2b02      	cmp	r3, #2
 800773c:	d013      	beq.n	8007766 <I2C_Master_ADDR+0x228>
 800773e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007740:	2b10      	cmp	r3, #16
 8007742:	d010      	beq.n	8007766 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007752:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e007      	b.n	8007776 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007774:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007784:	d117      	bne.n	80077b6 <I2C_Master_ADDR+0x278>
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800778c:	d00b      	beq.n	80077a6 <I2C_Master_ADDR+0x268>
 800778e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007790:	2b01      	cmp	r3, #1
 8007792:	d008      	beq.n	80077a6 <I2C_Master_ADDR+0x268>
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	2b08      	cmp	r3, #8
 8007798:	d005      	beq.n	80077a6 <I2C_Master_ADDR+0x268>
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	2b10      	cmp	r3, #16
 800779e:	d002      	beq.n	80077a6 <I2C_Master_ADDR+0x268>
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d107      	bne.n	80077b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	e032      	b.n	8007834 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ec:	d117      	bne.n	800781e <I2C_Master_ADDR+0x2e0>
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077f4:	d00b      	beq.n	800780e <I2C_Master_ADDR+0x2d0>
 80077f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d008      	beq.n	800780e <I2C_Master_ADDR+0x2d0>
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d005      	beq.n	800780e <I2C_Master_ADDR+0x2d0>
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	2b10      	cmp	r3, #16
 8007806:	d002      	beq.n	800780e <I2C_Master_ADDR+0x2d0>
 8007808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780a:	2b20      	cmp	r3, #32
 800780c:	d107      	bne.n	800781e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800781c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800783a:	e00b      	b.n	8007854 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	60fb      	str	r3, [r7, #12]
 8007850:	68fb      	ldr	r3, [r7, #12]
}
 8007852:	e7ff      	b.n	8007854 <I2C_Master_ADDR+0x316>
 8007854:	bf00      	nop
 8007856:	3744      	adds	r7, #68	@ 0x44
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800786e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d02b      	beq.n	80078d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007894:	b29b      	uxth	r3, r3
 8007896:	3b01      	subs	r3, #1
 8007898:	b29a      	uxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d114      	bne.n	80078d2 <I2C_SlaveTransmit_TXE+0x72>
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b29      	cmp	r3, #41	@ 0x29
 80078ac:	d111      	bne.n	80078d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2221      	movs	r2, #33	@ 0x21
 80078c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2228      	movs	r2, #40	@ 0x28
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7ff f9df 	bl	8006c90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80078d2:	bf00      	nop
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d011      	beq.n	8007910 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800792a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d02c      	beq.n	8007990 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	b2d2      	uxtb	r2, r2
 8007942:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d114      	bne.n	8007990 <I2C_SlaveReceive_RXNE+0x74>
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b2a      	cmp	r3, #42	@ 0x2a
 800796a:	d111      	bne.n	8007990 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800797a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2222      	movs	r2, #34	@ 0x22
 8007980:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2228      	movs	r2, #40	@ 0x28
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff f98a 	bl	8006ca4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d012      	beq.n	80079d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80079f6:	2b28      	cmp	r3, #40	@ 0x28
 80079f8:	d127      	bne.n	8007a4a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	089b      	lsrs	r3, r3, #2
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a16:	2301      	movs	r3, #1
 8007a18:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	09db      	lsrs	r3, r3, #7
 8007a1e:	f003 0301 	and.w	r3, r3, #1
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	81bb      	strh	r3, [r7, #12]
 8007a2c:	e002      	b.n	8007a34 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007a3c:	89ba      	ldrh	r2, [r7, #12]
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff f938 	bl	8006cb8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a48:	e00e      	b.n	8007a68 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	60bb      	str	r3, [r7, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a7e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a8e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007a90:	2300      	movs	r3, #0
 8007a92:	60bb      	str	r3, [r7, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	60bb      	str	r3, [r7, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007abc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007acc:	d172      	bne.n	8007bb4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b22      	cmp	r3, #34	@ 0x22
 8007ad2:	d002      	beq.n	8007ada <I2C_Slave_STOPF+0x6a>
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad8:	d135      	bne.n	8007b46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	f043 0204 	orr.w	r2, r3, #4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fd fa0e 	bl	8004f34 <HAL_DMA_GetState>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d049      	beq.n	8007bb2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b22:	4a69      	ldr	r2, [pc, #420]	@ (8007cc8 <I2C_Slave_STOPF+0x258>)
 8007b24:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd f856 	bl	8004bdc <HAL_DMA_Abort_IT>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d03d      	beq.n	8007bb2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b44:	e035      	b.n	8007bb2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b62:	f043 0204 	orr.w	r2, r3, #4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fd f9d8 	bl	8004f34 <HAL_DMA_GetState>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d014      	beq.n	8007bb4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8e:	4a4e      	ldr	r2, [pc, #312]	@ (8007cc8 <I2C_Slave_STOPF+0x258>)
 8007b90:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fd f820 	bl	8004bdc <HAL_DMA_Abort_IT>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	e000      	b.n	8007bb4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bb2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d03e      	beq.n	8007c3c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d112      	bne.n	8007bf2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691a      	ldr	r2, [r3, #16]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfc:	2b40      	cmp	r3, #64	@ 0x40
 8007bfe:	d112      	bne.n	8007c26 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691a      	ldr	r2, [r3, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c34:	f043 0204 	orr.w	r2, r3, #4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8b7 	bl	8007db8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007c4a:	e039      	b.n	8007cc0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c50:	d109      	bne.n	8007c66 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2228      	movs	r2, #40	@ 0x28
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff f81f 	bl	8006ca4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b28      	cmp	r3, #40	@ 0x28
 8007c70:	d111      	bne.n	8007c96 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a15      	ldr	r2, [pc, #84]	@ (8007ccc <I2C_Slave_STOPF+0x25c>)
 8007c76:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2220      	movs	r2, #32
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff f820 	bl	8006cd4 <HAL_I2C_ListenCpltCallback>
}
 8007c94:	e014      	b.n	8007cc0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9a:	2b22      	cmp	r3, #34	@ 0x22
 8007c9c:	d002      	beq.n	8007ca4 <I2C_Slave_STOPF+0x234>
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b22      	cmp	r3, #34	@ 0x22
 8007ca2:	d10d      	bne.n	8007cc0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7fe fff2 	bl	8006ca4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	08008655 	.word	0x08008655
 8007ccc:	ffff0000 	.word	0xffff0000

08007cd0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cde:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d002      	beq.n	8007cf2 <I2C_Slave_AF+0x22>
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d129      	bne.n	8007d46 <I2C_Slave_AF+0x76>
 8007cf2:	7bfb      	ldrb	r3, [r7, #15]
 8007cf4:	2b28      	cmp	r3, #40	@ 0x28
 8007cf6:	d126      	bne.n	8007d46 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8007db4 <I2C_Slave_AF+0xe4>)
 8007cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d0c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d16:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d26:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fe ffc8 	bl	8006cd4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007d44:	e031      	b.n	8007daa <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	2b21      	cmp	r3, #33	@ 0x21
 8007d4a:	d129      	bne.n	8007da0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a19      	ldr	r2, [pc, #100]	@ (8007db4 <I2C_Slave_AF+0xe4>)
 8007d50:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2221      	movs	r2, #33	@ 0x21
 8007d56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d76:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d80:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d90:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fd fcf4 	bl	8005780 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe ff79 	bl	8006c90 <HAL_I2C_SlaveTxCpltCallback>
}
 8007d9e:	e004      	b.n	8007daa <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007da8:	615a      	str	r2, [r3, #20]
}
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	ffff0000 	.word	0xffff0000

08007db8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d002      	beq.n	8007ddc <I2C_ITError+0x24>
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d10a      	bne.n	8007df2 <I2C_ITError+0x3a>
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b22      	cmp	r3, #34	@ 0x22
 8007de0:	d107      	bne.n	8007df2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007df0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007df8:	2b28      	cmp	r3, #40	@ 0x28
 8007dfa:	d107      	bne.n	8007e0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2228      	movs	r2, #40	@ 0x28
 8007e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007e0a:	e015      	b.n	8007e38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e1a:	d00a      	beq.n	8007e32 <I2C_ITError+0x7a>
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	2b60      	cmp	r3, #96	@ 0x60
 8007e20:	d007      	beq.n	8007e32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e46:	d162      	bne.n	8007f0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d020      	beq.n	8007ea8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e6a:	4a6a      	ldr	r2, [pc, #424]	@ (8008014 <I2C_ITError+0x25c>)
 8007e6c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fc feb2 	bl	8004bdc <HAL_DMA_Abort_IT>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8089 	beq.w	8007f92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0201 	bic.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4798      	blx	r3
 8007ea6:	e074      	b.n	8007f92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eac:	4a59      	ldr	r2, [pc, #356]	@ (8008014 <I2C_ITError+0x25c>)
 8007eae:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fc fe91 	bl	8004bdc <HAL_DMA_Abort_IT>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d068      	beq.n	8007f92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eca:	2b40      	cmp	r3, #64	@ 0x40
 8007ecc:	d10b      	bne.n	8007ee6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2220      	movs	r2, #32
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4798      	blx	r3
 8007f0c:	e041      	b.n	8007f92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b60      	cmp	r3, #96	@ 0x60
 8007f18:	d125      	bne.n	8007f66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f32:	2b40      	cmp	r3, #64	@ 0x40
 8007f34:	d10b      	bne.n	8007f4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0201 	bic.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fe fecc 	bl	8006cfc <HAL_I2C_AbortCpltCallback>
 8007f64:	e015      	b.n	8007f92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f70:	2b40      	cmp	r3, #64	@ 0x40
 8007f72:	d10b      	bne.n	8007f8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7fe feab 	bl	8006ce8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10e      	bne.n	8007fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d104      	bne.n	8007fc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d007      	beq.n	8007fd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007fce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d113      	bne.n	800800c <I2C_ITError+0x254>
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	2b28      	cmp	r3, #40	@ 0x28
 8007fe8:	d110      	bne.n	800800c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a0a      	ldr	r2, [pc, #40]	@ (8008018 <I2C_ITError+0x260>)
 8007fee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fe fe64 	bl	8006cd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	08008655 	.word	0x08008655
 8008018:	ffff0000 	.word	0xffff0000

0800801c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	460b      	mov	r3, r1
 800802a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b08      	cmp	r3, #8
 8008036:	d006      	beq.n	8008046 <I2C_MasterRequestWrite+0x2a>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d003      	beq.n	8008046 <I2C_MasterRequestWrite+0x2a>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008044:	d108      	bne.n	8008058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e00b      	b.n	8008070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	2b12      	cmp	r3, #18
 800805e:	d107      	bne.n	8008070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800806e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fb91 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008096:	d103      	bne.n	80080a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800809e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e035      	b.n	8008110 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080ac:	d108      	bne.n	80080c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080ae:	897b      	ldrh	r3, [r7, #10]
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080bc:	611a      	str	r2, [r3, #16]
 80080be:	e01b      	b.n	80080f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080c0:	897b      	ldrh	r3, [r7, #10]
 80080c2:	11db      	asrs	r3, r3, #7
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0306 	and.w	r3, r3, #6
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f063 030f 	orn	r3, r3, #15
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	490e      	ldr	r1, [pc, #56]	@ (8008118 <I2C_MasterRequestWrite+0xfc>)
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fbda 	bl	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e010      	b.n	8008110 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080ee:	897b      	ldrh	r3, [r7, #10]
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4907      	ldr	r1, [pc, #28]	@ (800811c <I2C_MasterRequestWrite+0x100>)
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fbca 	bl	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	00010008 	.word	0x00010008
 800811c:	00010002 	.word	0x00010002

08008120 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af02      	add	r7, sp, #8
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	4608      	mov	r0, r1
 800812a:	4611      	mov	r1, r2
 800812c:	461a      	mov	r2, r3
 800812e:	4603      	mov	r3, r0
 8008130:	817b      	strh	r3, [r7, #10]
 8008132:	460b      	mov	r3, r1
 8008134:	813b      	strh	r3, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	2200      	movs	r2, #0
 8008152:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fb24 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008170:	d103      	bne.n	800817a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008178:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e05f      	b.n	800823e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800817e:	897b      	ldrh	r3, [r7, #10]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	461a      	mov	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800818c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	6a3a      	ldr	r2, [r7, #32]
 8008192:	492d      	ldr	r1, [pc, #180]	@ (8008248 <I2C_RequestMemoryWrite+0x128>)
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fb7f 	bl	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e04c      	b.n	800823e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081bc:	6a39      	ldr	r1, [r7, #32]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fc0a 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00d      	beq.n	80081e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d107      	bne.n	80081e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e02b      	b.n	800823e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d105      	bne.n	80081f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081ec:	893b      	ldrh	r3, [r7, #8]
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	611a      	str	r2, [r3, #16]
 80081f6:	e021      	b.n	800823c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081f8:	893b      	ldrh	r3, [r7, #8]
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008208:	6a39      	ldr	r1, [r7, #32]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fbe4 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821a:	2b04      	cmp	r3, #4
 800821c:	d107      	bne.n	800822e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800822c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e005      	b.n	800823e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008232:	893b      	ldrh	r3, [r7, #8]
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	00010002 	.word	0x00010002

0800824c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af02      	add	r7, sp, #8
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	4608      	mov	r0, r1
 8008256:	4611      	mov	r1, r2
 8008258:	461a      	mov	r2, r3
 800825a:	4603      	mov	r3, r0
 800825c:	817b      	strh	r3, [r7, #10]
 800825e:	460b      	mov	r3, r1
 8008260:	813b      	strh	r3, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008274:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008284:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	2200      	movs	r2, #0
 800828e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fa86 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00d      	beq.n	80082ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ac:	d103      	bne.n	80082b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e0aa      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082ba:	897b      	ldrh	r3, [r7, #10]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80082c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	4952      	ldr	r1, [pc, #328]	@ (8008418 <I2C_RequestMemoryRead+0x1cc>)
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fae1 	bl	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e097      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f8:	6a39      	ldr	r1, [r7, #32]
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fb6c 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00d      	beq.n	8008322 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830a:	2b04      	cmp	r3, #4
 800830c:	d107      	bne.n	800831e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800831c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e076      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d105      	bne.n	8008334 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008328:	893b      	ldrh	r3, [r7, #8]
 800832a:	b2da      	uxtb	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	611a      	str	r2, [r3, #16]
 8008332:	e021      	b.n	8008378 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008334:	893b      	ldrh	r3, [r7, #8]
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	b29b      	uxth	r3, r3
 800833a:	b2da      	uxtb	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008344:	6a39      	ldr	r1, [r7, #32]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 fb46 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008356:	2b04      	cmp	r3, #4
 8008358:	d107      	bne.n	800836a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008368:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e050      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800836e:	893b      	ldrh	r3, [r7, #8]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800837a:	6a39      	ldr	r1, [r7, #32]
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fb2b 	bl	80089d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00d      	beq.n	80083a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838c:	2b04      	cmp	r3, #4
 800838e:	d107      	bne.n	80083a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800839e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e035      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 f9ef 	bl	80087a4 <I2C_WaitOnFlagUntilTimeout>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00d      	beq.n	80083e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083da:	d103      	bne.n	80083e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e013      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083e8:	897b      	ldrh	r3, [r7, #10]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	f043 0301 	orr.w	r3, r3, #1
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	4906      	ldr	r1, [pc, #24]	@ (8008418 <I2C_RequestMemoryRead+0x1cc>)
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fa4a 	bl	8008898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	00010002 	.word	0x00010002

0800841c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008428:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008430:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008438:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800844e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845c:	2200      	movs	r2, #0
 800845e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846c:	2200      	movs	r2, #0
 800846e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008470:	7cfb      	ldrb	r3, [r7, #19]
 8008472:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008476:	2b21      	cmp	r3, #33	@ 0x21
 8008478:	d007      	beq.n	800848a <I2C_DMAXferCplt+0x6e>
 800847a:	7cfb      	ldrb	r3, [r7, #19]
 800847c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8008480:	2b22      	cmp	r3, #34	@ 0x22
 8008482:	d131      	bne.n	80084e8 <I2C_DMAXferCplt+0xcc>
 8008484:	7cbb      	ldrb	r3, [r7, #18]
 8008486:	2b20      	cmp	r3, #32
 8008488:	d12e      	bne.n	80084e8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008498:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80084a0:	7cfb      	ldrb	r3, [r7, #19]
 80084a2:	2b29      	cmp	r3, #41	@ 0x29
 80084a4:	d10a      	bne.n	80084bc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2221      	movs	r2, #33	@ 0x21
 80084aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	2228      	movs	r2, #40	@ 0x28
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80084b4:	6978      	ldr	r0, [r7, #20]
 80084b6:	f7fe fbeb 	bl	8006c90 <HAL_I2C_SlaveTxCpltCallback>
 80084ba:	e00c      	b.n	80084d6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80084bc:	7cfb      	ldrb	r3, [r7, #19]
 80084be:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c0:	d109      	bne.n	80084d6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2222      	movs	r2, #34	@ 0x22
 80084c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2228      	movs	r2, #40	@ 0x28
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80084d0:	6978      	ldr	r0, [r7, #20]
 80084d2:	f7fe fbe7 	bl	8006ca4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80084e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80084e6:	e074      	b.n	80085d2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d06e      	beq.n	80085d2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d107      	bne.n	800850e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800850c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800851c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008524:	d009      	beq.n	800853a <I2C_DMAXferCplt+0x11e>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b08      	cmp	r3, #8
 800852a:	d006      	beq.n	800853a <I2C_DMAXferCplt+0x11e>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008532:	d002      	beq.n	800853a <I2C_DMAXferCplt+0x11e>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b20      	cmp	r3, #32
 8008538:	d107      	bne.n	800854a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008548:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008558:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008568:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008578:	6978      	ldr	r0, [r7, #20]
 800857a:	f7fe fbb5 	bl	8006ce8 <HAL_I2C_ErrorCallback>
}
 800857e:	e028      	b.n	80085d2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b40      	cmp	r3, #64	@ 0x40
 8008592:	d10a      	bne.n	80085aa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2200      	movs	r2, #0
 80085a0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80085a2:	6978      	ldr	r0, [r7, #20]
 80085a4:	f7fa fd66 	bl	8003074 <HAL_I2C_MemRxCpltCallback>
}
 80085a8:	e013      	b.n	80085d2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d002      	beq.n	80085be <I2C_DMAXferCplt+0x1a2>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d103      	bne.n	80085c6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80085c4:	e002      	b.n	80085cc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2212      	movs	r2, #18
 80085ca:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80085cc:	6978      	ldr	r0, [r7, #20]
 80085ce:	f7fe fb55 	bl	8006c7c <HAL_I2C_MasterRxCpltCallback>
}
 80085d2:	bf00      	nop
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f4:	2200      	movs	r2, #0
 80085f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	2200      	movs	r2, #0
 8008606:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7fc fca1 	bl	8004f50 <HAL_DMA_GetError>
 800860e:	4603      	mov	r3, r0
 8008610:	2b02      	cmp	r3, #2
 8008612:	d01b      	beq.n	800864c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008622:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	f043 0210 	orr.w	r2, r3, #16
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7fe fb4e 	bl	8006ce8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008664:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800866e:	4b4b      	ldr	r3, [pc, #300]	@ (800879c <I2C_DMAAbort+0x148>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	4a4a      	ldr	r2, [pc, #296]	@ (80087a0 <I2C_DMAAbort+0x14c>)
 8008676:	fba2 2303 	umull	r2, r3, r2, r3
 800867a:	0a1a      	lsrs	r2, r3, #8
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	00da      	lsls	r2, r3, #3
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d106      	bne.n	800869c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800869a:	e00a      	b.n	80086b2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3b01      	subs	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b0:	d0ea      	beq.n	8008688 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086be:	2200      	movs	r2, #0
 80086c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ce:	2200      	movs	r2, #0
 80086d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086e0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2200      	movs	r2, #0
 80086e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f4:	2200      	movs	r2, #0
 80086f6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008704:	2200      	movs	r2, #0
 8008706:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 0201 	bic.w	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b60      	cmp	r3, #96	@ 0x60
 8008722:	d10e      	bne.n	8008742 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	2220      	movs	r2, #32
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2200      	movs	r2, #0
 8008730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2200      	movs	r2, #0
 8008738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800873a:	6978      	ldr	r0, [r7, #20]
 800873c:	f7fe fade 	bl	8006cfc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008740:	e027      	b.n	8008792 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008742:	7cfb      	ldrb	r3, [r7, #19]
 8008744:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008748:	2b28      	cmp	r3, #40	@ 0x28
 800874a:	d117      	bne.n	800877c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800876a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	2200      	movs	r2, #0
 8008770:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2228      	movs	r2, #40	@ 0x28
 8008776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800877a:	e007      	b.n	800878c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2220      	movs	r2, #32
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f7fe faab 	bl	8006ce8 <HAL_I2C_ErrorCallback>
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000010 	.word	0x20000010
 80087a0:	14f8b589 	.word	0x14f8b589

080087a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	4613      	mov	r3, r2
 80087b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087b4:	e048      	b.n	8008848 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d044      	beq.n	8008848 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087be:	f7fb fa39 	bl	8003c34 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d302      	bcc.n	80087d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d139      	bne.n	8008848 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	0c1b      	lsrs	r3, r3, #16
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d10d      	bne.n	80087fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	43da      	mvns	r2, r3
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4013      	ands	r3, r2
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bf0c      	ite	eq
 80087f0:	2301      	moveq	r3, #1
 80087f2:	2300      	movne	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	e00c      	b.n	8008814 <I2C_WaitOnFlagUntilTimeout+0x70>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	43da      	mvns	r2, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4013      	ands	r3, r2
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	bf0c      	ite	eq
 800880c:	2301      	moveq	r3, #1
 800880e:	2300      	movne	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	461a      	mov	r2, r3
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	429a      	cmp	r2, r3
 8008818:	d116      	bne.n	8008848 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2220      	movs	r2, #32
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008834:	f043 0220 	orr.w	r2, r3, #32
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e023      	b.n	8008890 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10d      	bne.n	800886e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	43da      	mvns	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4013      	ands	r3, r2
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	bf0c      	ite	eq
 8008864:	2301      	moveq	r3, #1
 8008866:	2300      	movne	r3, #0
 8008868:	b2db      	uxtb	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	e00c      	b.n	8008888 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	43da      	mvns	r2, r3
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	4013      	ands	r3, r2
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	461a      	mov	r2, r3
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	429a      	cmp	r2, r3
 800888c:	d093      	beq.n	80087b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088a6:	e071      	b.n	800898c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b6:	d123      	bne.n	8008900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	f043 0204 	orr.w	r2, r3, #4
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e067      	b.n	80089d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008906:	d041      	beq.n	800898c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008908:	f7fb f994 	bl	8003c34 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d302      	bcc.n	800891e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d136      	bne.n	800898c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	0c1b      	lsrs	r3, r3, #16
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	d10c      	bne.n	8008942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	43da      	mvns	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4013      	ands	r3, r2
 8008934:	b29b      	uxth	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	bf14      	ite	ne
 800893a:	2301      	movne	r3, #1
 800893c:	2300      	moveq	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	e00b      	b.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	43da      	mvns	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d016      	beq.n	800898c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008978:	f043 0220 	orr.w	r2, r3, #32
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e021      	b.n	80089d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b01      	cmp	r3, #1
 8008994:	d10c      	bne.n	80089b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	43da      	mvns	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	4013      	ands	r3, r2
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bf14      	ite	ne
 80089a8:	2301      	movne	r3, #1
 80089aa:	2300      	moveq	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e00b      	b.n	80089c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	43da      	mvns	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4013      	ands	r3, r2
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	bf14      	ite	ne
 80089c2:	2301      	movne	r3, #1
 80089c4:	2300      	moveq	r3, #0
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f47f af6d 	bne.w	80088a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089e4:	e034      	b.n	8008a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f915 	bl	8008c16 <I2C_IsAcknowledgeFailed>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e034      	b.n	8008a60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d028      	beq.n	8008a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fe:	f7fb f919 	bl	8003c34 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d302      	bcc.n	8008a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d11d      	bne.n	8008a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1e:	2b80      	cmp	r3, #128	@ 0x80
 8008a20:	d016      	beq.n	8008a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3c:	f043 0220 	orr.w	r2, r3, #32
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e007      	b.n	8008a60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5a:	2b80      	cmp	r3, #128	@ 0x80
 8008a5c:	d1c3      	bne.n	80089e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a74:	e034      	b.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f8cd 	bl	8008c16 <I2C_IsAcknowledgeFailed>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e034      	b.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d028      	beq.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8e:	f7fb f8d1 	bl	8003c34 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d302      	bcc.n	8008aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d11d      	bne.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	f003 0304 	and.w	r3, r3, #4
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d016      	beq.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008acc:	f043 0220 	orr.w	r2, r3, #32
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e007      	b.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d1c3      	bne.n	8008a76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008b04:	4b13      	ldr	r3, [pc, #76]	@ (8008b54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	08db      	lsrs	r3, r3, #3
 8008b0a:	4a13      	ldr	r2, [pc, #76]	@ (8008b58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b10:	0a1a      	lsrs	r2, r3, #8
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d107      	bne.n	8008b36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2a:	f043 0220 	orr.w	r2, r3, #32
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e008      	b.n	8008b48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b44:	d0e9      	beq.n	8008b1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	20000010 	.word	0x20000010
 8008b58:	14f8b589 	.word	0x14f8b589

08008b5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b68:	e049      	b.n	8008bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b10      	cmp	r3, #16
 8008b76:	d119      	bne.n	8008bac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0210 	mvn.w	r2, #16
 8008b80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e030      	b.n	8008c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bac:	f7fb f842 	bl	8003c34 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d302      	bcc.n	8008bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11d      	bne.n	8008bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bcc:	2b40      	cmp	r3, #64	@ 0x40
 8008bce:	d016      	beq.n	8008bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bea:	f043 0220 	orr.w	r2, r3, #32
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e007      	b.n	8008c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c08:	2b40      	cmp	r3, #64	@ 0x40
 8008c0a:	d1ae      	bne.n	8008b6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008c16:	b480      	push	{r7}
 8008c18:	b083      	sub	sp, #12
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c2c:	d11b      	bne.n	8008c66 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c36:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c52:	f043 0204 	orr.w	r2, r3, #4
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c80:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008c84:	d103      	bne.n	8008c8e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c8c:	e007      	b.n	8008c9e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008c96:	d102      	bne.n	8008c9e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af02      	add	r7, sp, #8
 8008cb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e101      	b.n	8008ec0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d106      	bne.n	8008cdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f007 fb70 	bl	80103bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2203      	movs	r2, #3
 8008ce0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cea:	d102      	bne.n	8008cf2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f003 feeb 	bl	800cad2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	7c1a      	ldrb	r2, [r3, #16]
 8008d04:	f88d 2000 	strb.w	r2, [sp]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d0c:	f003 fdca 	bl	800c8a4 <USB_CoreInit>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2202      	movs	r2, #2
 8008d1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e0ce      	b.n	8008ec0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2100      	movs	r1, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f003 fee3 	bl	800caf4 <USB_SetCurrentMode>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e0bf      	b.n	8008ec0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e04a      	b.n	8008ddc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008d46:	7bfa      	ldrb	r2, [r7, #15]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	3315      	adds	r3, #21
 8008d56:	2201      	movs	r2, #1
 8008d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d5a:	7bfa      	ldrb	r2, [r7, #15]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3314      	adds	r3, #20
 8008d6a:	7bfa      	ldrb	r2, [r7, #15]
 8008d6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d6e:	7bfa      	ldrb	r2, [r7, #15]
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	b298      	uxth	r0, r3
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	332e      	adds	r3, #46	@ 0x2e
 8008d82:	4602      	mov	r2, r0
 8008d84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d86:	7bfa      	ldrb	r2, [r7, #15]
 8008d88:	6879      	ldr	r1, [r7, #4]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	4413      	add	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	440b      	add	r3, r1
 8008d94:	3318      	adds	r3, #24
 8008d96:	2200      	movs	r2, #0
 8008d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d9a:	7bfa      	ldrb	r2, [r7, #15]
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	331c      	adds	r3, #28
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008dae:	7bfa      	ldrb	r2, [r7, #15]
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	3320      	adds	r3, #32
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008dc2:	7bfa      	ldrb	r2, [r7, #15]
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	00db      	lsls	r3, r3, #3
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	3324      	adds	r3, #36	@ 0x24
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	7bfa      	ldrb	r2, [r7, #15]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3af      	bcc.n	8008d46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
 8008dea:	e044      	b.n	8008e76 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008dec:	7bfa      	ldrb	r2, [r7, #15]
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008e02:	7bfa      	ldrb	r2, [r7, #15]
 8008e04:	6879      	ldr	r1, [r7, #4]
 8008e06:	4613      	mov	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	440b      	add	r3, r1
 8008e10:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008e14:	7bfa      	ldrb	r2, [r7, #15]
 8008e16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008e18:	7bfa      	ldrb	r2, [r7, #15]
 8008e1a:	6879      	ldr	r1, [r7, #4]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008e2e:	7bfa      	ldrb	r2, [r7, #15]
 8008e30:	6879      	ldr	r1, [r7, #4]
 8008e32:	4613      	mov	r3, r2
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008e44:	7bfa      	ldrb	r2, [r7, #15]
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008e56:	2200      	movs	r2, #0
 8008e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e5a:	7bfa      	ldrb	r2, [r7, #15]
 8008e5c:	6879      	ldr	r1, [r7, #4]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	00db      	lsls	r3, r3, #3
 8008e62:	4413      	add	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	440b      	add	r3, r1
 8008e68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	3301      	adds	r3, #1
 8008e74:	73fb      	strb	r3, [r7, #15]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	791b      	ldrb	r3, [r3, #4]
 8008e7a:	7bfa      	ldrb	r2, [r7, #15]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d3b5      	bcc.n	8008dec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6818      	ldr	r0, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7c1a      	ldrb	r2, [r3, #16]
 8008e88:	f88d 2000 	strb.w	r2, [sp]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e90:	f003 fe7c 	bl	800cb8c <USB_DevInit>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e00c      	b.n	8008ec0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f004 fec6 	bl	800dc4a <USB_DevDisconnect>

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_PCD_Start+0x1c>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e022      	b.n	8008f2a <HAL_PCD_Start+0x62>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d105      	bne.n	8008f0c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f003 fdcd 	bl	800cab0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f004 fe74 	bl	800dc08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008f32:	b590      	push	{r4, r7, lr}
 8008f34:	b08d      	sub	sp, #52	@ 0x34
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f004 ff32 	bl	800ddb2 <USB_GetMode>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f040 848c 	bne.w	800986e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f004 fe96 	bl	800dc8c <USB_ReadInterrupts>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 8482 	beq.w	800986c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	0a1b      	lsrs	r3, r3, #8
 8008f72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f004 fe83 	bl	800dc8c <USB_ReadInterrupts>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d107      	bne.n	8008fa0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695a      	ldr	r2, [r3, #20]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f002 0202 	and.w	r2, r2, #2
 8008f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f004 fe71 	bl	800dc8c <USB_ReadInterrupts>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	2b10      	cmp	r3, #16
 8008fb2:	d161      	bne.n	8009078 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699a      	ldr	r2, [r3, #24]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0210 	bic.w	r2, r2, #16
 8008fc2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f003 020f 	and.w	r2, r3, #15
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	4413      	add	r3, r2
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fee:	d124      	bne.n	800903a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d035      	beq.n	8009068 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	091b      	lsrs	r3, r3, #4
 8009004:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800900a:	b29b      	uxth	r3, r3
 800900c:	461a      	mov	r2, r3
 800900e:	6a38      	ldr	r0, [r7, #32]
 8009010:	f004 fca8 	bl	800d964 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009020:	441a      	add	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	695a      	ldr	r2, [r3, #20]
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	091b      	lsrs	r3, r3, #4
 800902e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009032:	441a      	add	r2, r3
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	615a      	str	r2, [r3, #20]
 8009038:	e016      	b.n	8009068 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009040:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009044:	d110      	bne.n	8009068 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800904c:	2208      	movs	r2, #8
 800904e:	4619      	mov	r1, r3
 8009050:	6a38      	ldr	r0, [r7, #32]
 8009052:	f004 fc87 	bl	800d964 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	695a      	ldr	r2, [r3, #20]
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	091b      	lsrs	r3, r3, #4
 800905e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009062:	441a      	add	r2, r3
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0210 	orr.w	r2, r2, #16
 8009076:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4618      	mov	r0, r3
 800907e:	f004 fe05 	bl	800dc8c <USB_ReadInterrupts>
 8009082:	4603      	mov	r3, r0
 8009084:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009088:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800908c:	f040 80a7 	bne.w	80091de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f004 fe0a 	bl	800dcb2 <USB_ReadDevAllOutEpInterrupt>
 800909e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80090a0:	e099      	b.n	80091d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80090a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 808e 	beq.w	80091ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090b4:	b2d2      	uxtb	r2, r2
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f004 fe2e 	bl	800dd1a <USB_ReadDevOutEPInterrupt>
 80090be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00c      	beq.n	80090e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d6:	461a      	mov	r2, r3
 80090d8:	2301      	movs	r3, #1
 80090da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80090dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fea4 	bl	8009e2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	f003 0308 	and.w	r3, r3, #8
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00c      	beq.n	8009108 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fa:	461a      	mov	r2, r3
 80090fc:	2308      	movs	r3, #8
 80090fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 ff7a 	bl	8009ffc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f003 0310 	and.w	r3, r3, #16
 800910e:	2b00      	cmp	r3, #0
 8009110:	d008      	beq.n	8009124 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911e:	461a      	mov	r2, r3
 8009120:	2310      	movs	r3, #16
 8009122:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b00      	cmp	r3, #0
 800912c:	d030      	beq.n	8009190 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009136:	2b80      	cmp	r3, #128	@ 0x80
 8009138:	d109      	bne.n	800914e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009148:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800914c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800914e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009150:	4613      	mov	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	4413      	add	r3, r2
 8009160:	3304      	adds	r3, #4
 8009162:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	78db      	ldrb	r3, [r3, #3]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d108      	bne.n	800917e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2200      	movs	r2, #0
 8009170:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009174:	b2db      	uxtb	r3, r3
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f007 fa1b 	bl	80105b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800917e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	461a      	mov	r2, r3
 800918c:	2302      	movs	r3, #2
 800918e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d008      	beq.n	80091ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a6:	461a      	mov	r2, r3
 80091a8:	2320      	movs	r3, #32
 80091aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c2:	461a      	mov	r2, r3
 80091c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80091c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	3301      	adds	r3, #1
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80091d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80091d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f af62 	bne.w	80090a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f004 fd52 	bl	800dc8c <USB_ReadInterrupts>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091f2:	f040 80db 	bne.w	80093ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f004 fd73 	bl	800dce6 <USB_ReadDevAllInEpInterrupt>
 8009200:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009206:	e0cd      	b.n	80093a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80c2 	beq.w	8009398 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	4611      	mov	r1, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f004 fd99 	bl	800dd56 <USB_ReadDevInEPInterrupt>
 8009224:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	d057      	beq.n	80092e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	2201      	movs	r2, #1
 8009238:	fa02 f303 	lsl.w	r3, r2, r3
 800923c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	43db      	mvns	r3, r3
 800924a:	69f9      	ldr	r1, [r7, #28]
 800924c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009250:	4013      	ands	r3, r2
 8009252:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	015a      	lsls	r2, r3, #5
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	4413      	add	r3, r2
 800925c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009260:	461a      	mov	r2, r3
 8009262:	2301      	movs	r3, #1
 8009264:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	799b      	ldrb	r3, [r3, #6]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d132      	bne.n	80092d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009272:	4613      	mov	r3, r2
 8009274:	00db      	lsls	r3, r3, #3
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	3320      	adds	r3, #32
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4403      	add	r3, r0
 800928e:	331c      	adds	r3, #28
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4419      	add	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009298:	4613      	mov	r3, r2
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	4413      	add	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4403      	add	r3, r0
 80092a2:	3320      	adds	r3, #32
 80092a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80092a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d113      	bne.n	80092d4 <HAL_PCD_IRQHandler+0x3a2>
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092b0:	4613      	mov	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	3324      	adds	r3, #36	@ 0x24
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d108      	bne.n	80092d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092cc:	461a      	mov	r2, r3
 80092ce:	2101      	movs	r1, #1
 80092d0:	f004 fda0 	bl	800de14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	4619      	mov	r1, r3
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f007 f8ef 	bl	80104be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d008      	beq.n	80092fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f6:	461a      	mov	r2, r3
 80092f8:	2308      	movs	r3, #8
 80092fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f003 0310 	and.w	r3, r3, #16
 8009302:	2b00      	cmp	r3, #0
 8009304:	d008      	beq.n	8009318 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009312:	461a      	mov	r2, r3
 8009314:	2310      	movs	r3, #16
 8009316:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d008      	beq.n	8009334 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800932e:	461a      	mov	r2, r3
 8009330:	2340      	movs	r3, #64	@ 0x40
 8009332:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d023      	beq.n	8009386 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800933e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009340:	6a38      	ldr	r0, [r7, #32]
 8009342:	f003 fd87 	bl	800ce54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009348:	4613      	mov	r3, r2
 800934a:	00db      	lsls	r3, r3, #3
 800934c:	4413      	add	r3, r2
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	3310      	adds	r3, #16
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	4413      	add	r3, r2
 8009356:	3304      	adds	r3, #4
 8009358:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	78db      	ldrb	r3, [r3, #3]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d108      	bne.n	8009374 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2200      	movs	r2, #0
 8009366:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936a:	b2db      	uxtb	r3, r3
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f007 f932 	bl	80105d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009380:	461a      	mov	r2, r3
 8009382:	2302      	movs	r3, #2
 8009384:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fcbd 	bl	8009d12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	3301      	adds	r3, #1
 800939c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	085b      	lsrs	r3, r3, #1
 80093a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80093a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f47f af2e 	bne.w	8009208 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f004 fc6b 	bl	800dc8c <USB_ReadInterrupts>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c0:	d122      	bne.n	8009408 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	69fa      	ldr	r2, [r7, #28]
 80093cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d108      	bne.n	80093f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80093e8:	2100      	movs	r1, #0
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fea4 	bl	800a138 <HAL_PCDEx_LPM_Callback>
 80093f0:	e002      	b.n	80093f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f007 f8d0 	bl	8010598 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695a      	ldr	r2, [r3, #20]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f004 fc3d 	bl	800dc8c <USB_ReadInterrupts>
 8009412:	4603      	mov	r3, r0
 8009414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800941c:	d112      	bne.n	8009444 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b01      	cmp	r3, #1
 800942c:	d102      	bne.n	8009434 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f007 f88c 	bl	801054c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	695a      	ldr	r2, [r3, #20]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009442:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f004 fc1f 	bl	800dc8c <USB_ReadInterrupts>
 800944e:	4603      	mov	r3, r0
 8009450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009458:	f040 80b7 	bne.w	80095ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800946a:	f023 0301 	bic.w	r3, r3, #1
 800946e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2110      	movs	r1, #16
 8009476:	4618      	mov	r0, r3
 8009478:	f003 fcec 	bl	800ce54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800947c:	2300      	movs	r3, #0
 800947e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009480:	e046      	b.n	8009510 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800948e:	461a      	mov	r2, r3
 8009490:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009494:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	69fa      	ldr	r2, [r7, #28]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80094b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094c2:	461a      	mov	r2, r3
 80094c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80094c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80094ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094da:	0151      	lsls	r1, r2, #5
 80094dc:	69fa      	ldr	r2, [r7, #28]
 80094de:	440a      	add	r2, r1
 80094e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009504:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009508:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800950a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950c:	3301      	adds	r3, #1
 800950e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	461a      	mov	r2, r3
 8009516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009518:	4293      	cmp	r3, r2
 800951a:	d3b2      	bcc.n	8009482 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800952a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800952e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7bdb      	ldrb	r3, [r3, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d016      	beq.n	8009566 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800953e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009542:	69fa      	ldr	r2, [r7, #28]
 8009544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009548:	f043 030b 	orr.w	r3, r3, #11
 800954c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800955e:	f043 030b 	orr.w	r3, r3, #11
 8009562:	6453      	str	r3, [r2, #68]	@ 0x44
 8009564:	e015      	b.n	8009592 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009574:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009578:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800957c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800958c:	f043 030b 	orr.w	r3, r3, #11
 8009590:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80095a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80095b4:	461a      	mov	r2, r3
 80095b6:	f004 fc2d 	bl	800de14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	695a      	ldr	r2, [r3, #20]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80095c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f004 fb5c 	bl	800dc8c <USB_ReadInterrupts>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095de:	d123      	bne.n	8009628 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f004 fbf2 	bl	800ddce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f003 fca9 	bl	800cf46 <USB_GetDevSpeed>
 80095f4:	4603      	mov	r3, r0
 80095f6:	461a      	mov	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681c      	ldr	r4, [r3, #0]
 8009600:	f001 f9d6 	bl	800a9b0 <HAL_RCC_GetHCLKFreq>
 8009604:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800960a:	461a      	mov	r2, r3
 800960c:	4620      	mov	r0, r4
 800960e:	f003 f9ad 	bl	800c96c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f006 ff7b 	bl	801050e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009626:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f004 fb2d 	bl	800dc8c <USB_ReadInterrupts>
 8009632:	4603      	mov	r3, r0
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d10a      	bne.n	8009652 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f006 ff58 	bl	80104f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695a      	ldr	r2, [r3, #20]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f002 0208 	and.w	r2, r2, #8
 8009650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f004 fb18 	bl	800dc8c <USB_ReadInterrupts>
 800965c:	4603      	mov	r3, r0
 800965e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009662:	2b80      	cmp	r3, #128	@ 0x80
 8009664:	d123      	bne.n	80096ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009672:	2301      	movs	r3, #1
 8009674:	627b      	str	r3, [r7, #36]	@ 0x24
 8009676:	e014      	b.n	80096a2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800967c:	4613      	mov	r3, r2
 800967e:	00db      	lsls	r3, r3, #3
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d105      	bne.n	800969c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	b2db      	uxtb	r3, r3
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fb0a 	bl	8009cb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	3301      	adds	r3, #1
 80096a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	791b      	ldrb	r3, [r3, #4]
 80096a6:	461a      	mov	r2, r3
 80096a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d3e4      	bcc.n	8009678 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f004 faea 	bl	800dc8c <USB_ReadInterrupts>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096c2:	d13c      	bne.n	800973e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096c4:	2301      	movs	r3, #1
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c8:	e02b      	b.n	8009722 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096de:	4613      	mov	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	3318      	adds	r3, #24
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d115      	bne.n	800971c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80096f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da12      	bge.n	800971c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096fa:	4613      	mov	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3317      	adds	r3, #23
 8009706:	2201      	movs	r2, #1
 8009708:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009712:	b2db      	uxtb	r3, r3
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 faca 	bl	8009cb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	3301      	adds	r3, #1
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	791b      	ldrb	r3, [r3, #4]
 8009726:	461a      	mov	r2, r3
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	4293      	cmp	r3, r2
 800972c:	d3cd      	bcc.n	80096ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800973c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4618      	mov	r0, r3
 8009744:	f004 faa2 	bl	800dc8c <USB_ReadInterrupts>
 8009748:	4603      	mov	r3, r0
 800974a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800974e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009752:	d156      	bne.n	8009802 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009754:	2301      	movs	r3, #1
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
 8009758:	e045      	b.n	80097e6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4413      	add	r3, r2
 8009762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800976e:	4613      	mov	r3, r2
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	4413      	add	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d12e      	bne.n	80097e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009782:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009784:	2b00      	cmp	r3, #0
 8009786:	da2b      	bge.n	80097e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009794:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009798:	429a      	cmp	r2, r3
 800979a:	d121      	bne.n	80097e0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	4413      	add	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80097ae:	2201      	movs	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	69fa      	ldr	r2, [r7, #28]
 80097d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097dc:	6053      	str	r3, [r2, #4]
            break;
 80097de:	e008      	b.n	80097f2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	3301      	adds	r3, #1
 80097e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	791b      	ldrb	r3, [r3, #4]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d3b3      	bcc.n	800975a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695a      	ldr	r2, [r3, #20]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f004 fa40 	bl	800dc8c <USB_ReadInterrupts>
 800980c:	4603      	mov	r3, r0
 800980e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009816:	d10a      	bne.n	800982e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f006 feef 	bl	80105fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800982c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f004 fa2a 	bl	800dc8c <USB_ReadInterrupts>
 8009838:	4603      	mov	r3, r0
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b04      	cmp	r3, #4
 8009840:	d115      	bne.n	800986e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f006 fedf 	bl	8010618 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6859      	ldr	r1, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69ba      	ldr	r2, [r7, #24]
 8009866:	430a      	orrs	r2, r1
 8009868:	605a      	str	r2, [r3, #4]
 800986a:	e000      	b.n	800986e <HAL_PCD_IRQHandler+0x93c>
      return;
 800986c:	bf00      	nop
    }
  }
}
 800986e:	3734      	adds	r7, #52	@ 0x34
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}

08009874 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_PCD_SetAddress+0x1a>
 800988a:	2302      	movs	r3, #2
 800988c:	e012      	b.n	80098b4 <HAL_PCD_SetAddress+0x40>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f004 f989 	bl	800dbbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	461a      	mov	r2, r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	70fb      	strb	r3, [r7, #3]
 80098ce:	460b      	mov	r3, r1
 80098d0:	803b      	strh	r3, [r7, #0]
 80098d2:	4613      	mov	r3, r2
 80098d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80098da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da0f      	bge.n	8009902 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	f003 020f 	and.w	r2, r3, #15
 80098e8:	4613      	mov	r3, r2
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	3310      	adds	r3, #16
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	4413      	add	r3, r2
 80098f6:	3304      	adds	r3, #4
 80098f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2201      	movs	r2, #1
 80098fe:	705a      	strb	r2, [r3, #1]
 8009900:	e00f      	b.n	8009922 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009902:	78fb      	ldrb	r3, [r7, #3]
 8009904:	f003 020f 	and.w	r2, r3, #15
 8009908:	4613      	mov	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	4413      	add	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	4413      	add	r3, r2
 8009918:	3304      	adds	r3, #4
 800991a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	f003 030f 	and.w	r3, r3, #15
 8009928:	b2da      	uxtb	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800992e:	883b      	ldrh	r3, [r7, #0]
 8009930:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	78ba      	ldrb	r2, [r7, #2]
 800993c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d004      	beq.n	8009950 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009950:	78bb      	ldrb	r3, [r7, #2]
 8009952:	2b02      	cmp	r3, #2
 8009954:	d102      	bne.n	800995c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009962:	2b01      	cmp	r3, #1
 8009964:	d101      	bne.n	800996a <HAL_PCD_EP_Open+0xae>
 8009966:	2302      	movs	r3, #2
 8009968:	e00e      	b.n	8009988 <HAL_PCD_EP_Open+0xcc>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	4618      	mov	r0, r3
 800997a:	f003 fb09 	bl	800cf90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009986:	7afb      	ldrb	r3, [r7, #11]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800999c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	da0f      	bge.n	80099c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	f003 020f 	and.w	r2, r3, #15
 80099aa:	4613      	mov	r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	3310      	adds	r3, #16
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	4413      	add	r3, r2
 80099b8:	3304      	adds	r3, #4
 80099ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2201      	movs	r2, #1
 80099c0:	705a      	strb	r2, [r3, #1]
 80099c2:	e00f      	b.n	80099e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	f003 020f 	and.w	r2, r3, #15
 80099ca:	4613      	mov	r3, r2
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	4413      	add	r3, r2
 80099da:	3304      	adds	r3, #4
 80099dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80099e4:	78fb      	ldrb	r3, [r7, #3]
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_PCD_EP_Close+0x6e>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e00e      	b.n	8009a1c <HAL_PCD_EP_Close+0x8c>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68f9      	ldr	r1, [r7, #12]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f003 fb47 	bl	800d0a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	460b      	mov	r3, r1
 8009a32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	f003 020f 	and.w	r2, r3, #15
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2200      	movs	r2, #0
 8009a64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a66:	7afb      	ldrb	r3, [r7, #11]
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	799b      	ldrb	r3, [r3, #6]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d102      	bne.n	8009a80 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6818      	ldr	r0, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	799b      	ldrb	r3, [r3, #6]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	6979      	ldr	r1, [r7, #20]
 8009a8c:	f003 fbe4 	bl	800d258 <USB_EPStartXfer>

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009aa6:	78fb      	ldrb	r3, [r7, #3]
 8009aa8:	f003 020f 	and.w	r2, r3, #15
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009abc:	681b      	ldr	r3, [r3, #0]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b086      	sub	sp, #24
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	607a      	str	r2, [r7, #4]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ada:	7afb      	ldrb	r3, [r7, #11]
 8009adc:	f003 020f 	and.w	r2, r3, #15
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	3310      	adds	r3, #16
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	3304      	adds	r3, #4
 8009af0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2200      	movs	r2, #0
 8009b02:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2201      	movs	r2, #1
 8009b08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b0a:	7afb      	ldrb	r3, [r7, #11]
 8009b0c:	f003 030f 	and.w	r3, r3, #15
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	799b      	ldrb	r3, [r3, #6]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d102      	bne.n	8009b24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	799b      	ldrb	r3, [r3, #6]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6979      	ldr	r1, [r7, #20]
 8009b30:	f003 fb92 	bl	800d258 <USB_EPStartXfer>

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009b4a:	78fb      	ldrb	r3, [r7, #3]
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7912      	ldrb	r2, [r2, #4]
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d901      	bls.n	8009b5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e04f      	b.n	8009bfc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	da0f      	bge.n	8009b84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b64:	78fb      	ldrb	r3, [r7, #3]
 8009b66:	f003 020f 	and.w	r2, r3, #15
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	3310      	adds	r3, #16
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	4413      	add	r3, r2
 8009b78:	3304      	adds	r3, #4
 8009b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	705a      	strb	r2, [r3, #1]
 8009b82:	e00d      	b.n	8009ba0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009b84:	78fa      	ldrb	r2, [r7, #3]
 8009b86:	4613      	mov	r3, r2
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4413      	add	r3, r2
 8009b96:	3304      	adds	r3, #4
 8009b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	f003 030f 	and.w	r3, r3, #15
 8009bac:	b2da      	uxtb	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_PCD_EP_SetStall+0x82>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e01d      	b.n	8009bfc <HAL_PCD_EP_SetStall+0xbe>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f003 ff20 	bl	800da14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d109      	bne.n	8009bf2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7999      	ldrb	r1, [r3, #6]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009bec:	461a      	mov	r2, r3
 8009bee:	f004 f911 	bl	800de14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	f003 030f 	and.w	r3, r3, #15
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	7912      	ldrb	r2, [r2, #4]
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d901      	bls.n	8009c22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e042      	b.n	8009ca8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da0f      	bge.n	8009c4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	f003 020f 	and.w	r2, r3, #15
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	3310      	adds	r3, #16
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3304      	adds	r3, #4
 8009c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	705a      	strb	r2, [r3, #1]
 8009c48:	e00f      	b.n	8009c6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	f003 020f 	and.w	r2, r3, #15
 8009c50:	4613      	mov	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	3304      	adds	r3, #4
 8009c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_PCD_EP_ClrStall+0x86>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e00e      	b.n	8009ca8 <HAL_PCD_EP_ClrStall+0xa4>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f003 ff29 	bl	800daf0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009cbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	da0c      	bge.n	8009cde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	f003 020f 	and.w	r2, r3, #15
 8009cca:	4613      	mov	r3, r2
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	3310      	adds	r3, #16
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	3304      	adds	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	e00c      	b.n	8009cf8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	f003 020f 	and.w	r2, r3, #15
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68f9      	ldr	r1, [r7, #12]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f003 fd48 	bl	800d794 <USB_EPStopXfer>
 8009d04:	4603      	mov	r3, r0
 8009d06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b08a      	sub	sp, #40	@ 0x28
 8009d16:	af02      	add	r7, sp, #8
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	3310      	adds	r3, #16
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	4413      	add	r3, r2
 8009d36:	3304      	adds	r3, #4
 8009d38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	695a      	ldr	r2, [r3, #20]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d901      	bls.n	8009d4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e06b      	b.n	8009e22 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	691a      	ldr	r2, [r3, #16]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d902      	bls.n	8009d66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	3303      	adds	r3, #3
 8009d6a:	089b      	lsrs	r3, r3, #2
 8009d6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d6e:	e02a      	b.n	8009dc6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	691a      	ldr	r2, [r3, #16]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	69fa      	ldr	r2, [r7, #28]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d902      	bls.n	8009d8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3303      	adds	r3, #3
 8009d90:	089b      	lsrs	r3, r3, #2
 8009d92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	68d9      	ldr	r1, [r3, #12]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	4603      	mov	r3, r0
 8009da8:	6978      	ldr	r0, [r7, #20]
 8009daa:	f003 fd9d 	bl	800d8e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	68da      	ldr	r2, [r3, #12]
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	441a      	add	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	695a      	ldr	r2, [r3, #20]
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009dd6:	69ba      	ldr	r2, [r7, #24]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d809      	bhi.n	8009df0 <PCD_WriteEmptyTxFifo+0xde>
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	695a      	ldr	r2, [r3, #20]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d203      	bcs.n	8009df0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1bf      	bne.n	8009d70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	691a      	ldr	r2, [r3, #16]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d811      	bhi.n	8009e20 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	f003 030f 	and.w	r3, r3, #15
 8009e02:	2201      	movs	r2, #1
 8009e04:	fa02 f303 	lsl.w	r3, r2, r3
 8009e08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	43db      	mvns	r3, r3
 8009e16:	6939      	ldr	r1, [r7, #16]
 8009e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3720      	adds	r7, #32
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	333c      	adds	r3, #60	@ 0x3c
 8009e44:	3304      	adds	r3, #4
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	799b      	ldrb	r3, [r3, #6]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d17b      	bne.n	8009f5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d015      	beq.n	8009e98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	4a61      	ldr	r2, [pc, #388]	@ (8009ff4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	f240 80b9 	bls.w	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 80b3 	beq.w	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8e:	461a      	mov	r2, r3
 8009e90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e94:	6093      	str	r3, [r2, #8]
 8009e96:	e0a7      	b.n	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	015a      	lsls	r2, r3, #5
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eae:	461a      	mov	r2, r3
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	6093      	str	r3, [r2, #8]
 8009eb4:	e098      	b.n	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f040 8093 	bne.w	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8009ff4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d90f      	bls.n	8009eea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ee6:	6093      	str	r3, [r2, #8]
 8009ee8:	e07e      	b.n	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	4613      	mov	r3, r2
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	4413      	add	r3, r2
 8009efc:	3304      	adds	r3, #4
 8009efe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6a1a      	ldr	r2, [r3, #32]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	0159      	lsls	r1, r3, #5
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	440b      	add	r3, r1
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f16:	1ad2      	subs	r2, r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d114      	bne.n	8009f4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d109      	bne.n	8009f3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f34:	461a      	mov	r2, r3
 8009f36:	2101      	movs	r1, #1
 8009f38:	f003 ff6c 	bl	800de14 <USB_EP0_OutStart>
 8009f3c:	e006      	b.n	8009f4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	441a      	add	r2, r3
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	4619      	mov	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f006 fa98 	bl	8010488 <HAL_PCD_DataOutStageCallback>
 8009f58:	e046      	b.n	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	4a26      	ldr	r2, [pc, #152]	@ (8009ff8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d124      	bne.n	8009fac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00a      	beq.n	8009f82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f7e:	6093      	str	r3, [r2, #8]
 8009f80:	e032      	b.n	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	f003 0320 	and.w	r3, r3, #32
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2320      	movs	r3, #32
 8009f9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f006 fa6f 	bl	8010488 <HAL_PCD_DataOutStageCallback>
 8009faa:	e01d      	b.n	8009fe8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d114      	bne.n	8009fdc <PCD_EP_OutXfrComplete_int+0x1b0>
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d108      	bne.n	8009fdc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	f003 ff1c 	bl	800de14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f006 fa50 	bl	8010488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3720      	adds	r7, #32
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	4f54300a 	.word	0x4f54300a
 8009ff8:	4f54310a 	.word	0x4f54310a

08009ffc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	333c      	adds	r3, #60	@ 0x3c
 800a014:	3304      	adds	r3, #4
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4a15      	ldr	r2, [pc, #84]	@ (800a084 <PCD_EP_OutSetupPacket_int+0x88>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d90e      	bls.n	800a050 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d009      	beq.n	800a050 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	015a      	lsls	r2, r3, #5
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	4413      	add	r3, r2
 800a044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a048:	461a      	mov	r2, r3
 800a04a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a04e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f006 fa07 	bl	8010464 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4a0a      	ldr	r2, [pc, #40]	@ (800a084 <PCD_EP_OutSetupPacket_int+0x88>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d90c      	bls.n	800a078 <PCD_EP_OutSetupPacket_int+0x7c>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	799b      	ldrb	r3, [r3, #6]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d108      	bne.n	800a078 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a070:	461a      	mov	r2, r3
 800a072:	2101      	movs	r1, #1
 800a074:	f003 fece 	bl	800de14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	4f54300a 	.word	0x4f54300a

0800a088 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
 800a094:	4613      	mov	r3, r2
 800a096:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a0a0:	78fb      	ldrb	r3, [r7, #3]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a0a6:	883b      	ldrh	r3, [r7, #0]
 800a0a8:	0419      	lsls	r1, r3, #16
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0b4:	e028      	b.n	800a108 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0bc:	0c1b      	lsrs	r3, r3, #16
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
 800a0c8:	e00d      	b.n	800a0e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	3340      	adds	r3, #64	@ 0x40
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	0c1b      	lsrs	r3, r3, #16
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	4413      	add	r3, r2
 800a0de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	73fb      	strb	r3, [r7, #15]
 800a0e6:	7bfa      	ldrb	r2, [r7, #15]
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d3ec      	bcc.n	800a0ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a0f0:	883b      	ldrh	r3, [r7, #0]
 800a0f2:	0418      	lsls	r0, r3, #16
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6819      	ldr	r1, [r3, #0]
 800a0f8:	78fb      	ldrb	r3, [r7, #3]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	4302      	orrs	r2, r0
 800a100:	3340      	adds	r3, #64	@ 0x40
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	440b      	add	r3, r1
 800a106:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	887a      	ldrh	r2, [r7, #2]
 800a128:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e267      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d075      	beq.n	800a25a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a16e:	4b88      	ldr	r3, [pc, #544]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f003 030c 	and.w	r3, r3, #12
 800a176:	2b04      	cmp	r3, #4
 800a178:	d00c      	beq.n	800a194 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a17a:	4b85      	ldr	r3, [pc, #532]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a182:	2b08      	cmp	r3, #8
 800a184:	d112      	bne.n	800a1ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a186:	4b82      	ldr	r3, [pc, #520]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a18e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a192:	d10b      	bne.n	800a1ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a194:	4b7e      	ldr	r3, [pc, #504]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d05b      	beq.n	800a258 <HAL_RCC_OscConfig+0x108>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d157      	bne.n	800a258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e242      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b4:	d106      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x74>
 800a1b6:	4b76      	ldr	r3, [pc, #472]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a75      	ldr	r2, [pc, #468]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	e01d      	b.n	800a200 <HAL_RCC_OscConfig+0xb0>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1cc:	d10c      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x98>
 800a1ce:	4b70      	ldr	r3, [pc, #448]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a6f      	ldr	r2, [pc, #444]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	4b6d      	ldr	r3, [pc, #436]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a6c      	ldr	r2, [pc, #432]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	e00b      	b.n	800a200 <HAL_RCC_OscConfig+0xb0>
 800a1e8:	4b69      	ldr	r3, [pc, #420]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a68      	ldr	r2, [pc, #416]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	4b66      	ldr	r3, [pc, #408]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a65      	ldr	r2, [pc, #404]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a1fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d013      	beq.n	800a230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a208:	f7f9 fd14 	bl	8003c34 <HAL_GetTick>
 800a20c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a210:	f7f9 fd10 	bl	8003c34 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b64      	cmp	r3, #100	@ 0x64
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e207      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a222:	4b5b      	ldr	r3, [pc, #364]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCC_OscConfig+0xc0>
 800a22e:	e014      	b.n	800a25a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a230:	f7f9 fd00 	bl	8003c34 <HAL_GetTick>
 800a234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a236:	e008      	b.n	800a24a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a238:	f7f9 fcfc 	bl	8003c34 <HAL_GetTick>
 800a23c:	4602      	mov	r2, r0
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	2b64      	cmp	r3, #100	@ 0x64
 800a244:	d901      	bls.n	800a24a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e1f3      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a24a:	4b51      	ldr	r3, [pc, #324]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f0      	bne.n	800a238 <HAL_RCC_OscConfig+0xe8>
 800a256:	e000      	b.n	800a25a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 0302 	and.w	r3, r3, #2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d063      	beq.n	800a32e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a266:	4b4a      	ldr	r3, [pc, #296]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	f003 030c 	and.w	r3, r3, #12
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00b      	beq.n	800a28a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a272:	4b47      	ldr	r3, [pc, #284]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a27a:	2b08      	cmp	r3, #8
 800a27c:	d11c      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a27e:	4b44      	ldr	r3, [pc, #272]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d116      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a28a:	4b41      	ldr	r3, [pc, #260]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d005      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x152>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d001      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e1c7      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2a2:	4b3b      	ldr	r3, [pc, #236]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	4937      	ldr	r1, [pc, #220]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2b6:	e03a      	b.n	800a32e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d020      	beq.n	800a302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2c0:	4b34      	ldr	r3, [pc, #208]	@ (800a394 <HAL_RCC_OscConfig+0x244>)
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2c6:	f7f9 fcb5 	bl	8003c34 <HAL_GetTick>
 800a2ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2cc:	e008      	b.n	800a2e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2ce:	f7f9 fcb1 	bl	8003c34 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d901      	bls.n	800a2e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e1a8      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2e0:	4b2b      	ldr	r3, [pc, #172]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0f0      	beq.n	800a2ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ec:	4b28      	ldr	r3, [pc, #160]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	4925      	ldr	r1, [pc, #148]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	600b      	str	r3, [r1, #0]
 800a300:	e015      	b.n	800a32e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a302:	4b24      	ldr	r3, [pc, #144]	@ (800a394 <HAL_RCC_OscConfig+0x244>)
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a308:	f7f9 fc94 	bl	8003c34 <HAL_GetTick>
 800a30c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a30e:	e008      	b.n	800a322 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a310:	f7f9 fc90 	bl	8003c34 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d901      	bls.n	800a322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a31e:	2303      	movs	r3, #3
 800a320:	e187      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a322:	4b1b      	ldr	r3, [pc, #108]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1f0      	bne.n	800a310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0308 	and.w	r3, r3, #8
 800a336:	2b00      	cmp	r3, #0
 800a338:	d036      	beq.n	800a3a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d016      	beq.n	800a370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a342:	4b15      	ldr	r3, [pc, #84]	@ (800a398 <HAL_RCC_OscConfig+0x248>)
 800a344:	2201      	movs	r2, #1
 800a346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a348:	f7f9 fc74 	bl	8003c34 <HAL_GetTick>
 800a34c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a34e:	e008      	b.n	800a362 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a350:	f7f9 fc70 	bl	8003c34 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e167      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a362:	4b0b      	ldr	r3, [pc, #44]	@ (800a390 <HAL_RCC_OscConfig+0x240>)
 800a364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f0      	beq.n	800a350 <HAL_RCC_OscConfig+0x200>
 800a36e:	e01b      	b.n	800a3a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a370:	4b09      	ldr	r3, [pc, #36]	@ (800a398 <HAL_RCC_OscConfig+0x248>)
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a376:	f7f9 fc5d 	bl	8003c34 <HAL_GetTick>
 800a37a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a37c:	e00e      	b.n	800a39c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a37e:	f7f9 fc59 	bl	8003c34 <HAL_GetTick>
 800a382:	4602      	mov	r2, r0
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d907      	bls.n	800a39c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e150      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
 800a390:	40023800 	.word	0x40023800
 800a394:	42470000 	.word	0x42470000
 800a398:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a39c:	4b88      	ldr	r3, [pc, #544]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a39e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1ea      	bne.n	800a37e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 8097 	beq.w	800a4e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3ba:	4b81      	ldr	r3, [pc, #516]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d10f      	bne.n	800a3e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	60bb      	str	r3, [r7, #8]
 800a3ca:	4b7d      	ldr	r3, [pc, #500]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ce:	4a7c      	ldr	r2, [pc, #496]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a3d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3d4:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3d6:	4b7a      	ldr	r3, [pc, #488]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3de:	60bb      	str	r3, [r7, #8]
 800a3e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3e6:	4b77      	ldr	r3, [pc, #476]	@ (800a5c4 <HAL_RCC_OscConfig+0x474>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d118      	bne.n	800a424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3f2:	4b74      	ldr	r3, [pc, #464]	@ (800a5c4 <HAL_RCC_OscConfig+0x474>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a73      	ldr	r2, [pc, #460]	@ (800a5c4 <HAL_RCC_OscConfig+0x474>)
 800a3f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a3fe:	f7f9 fc19 	bl	8003c34 <HAL_GetTick>
 800a402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a404:	e008      	b.n	800a418 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a406:	f7f9 fc15 	bl	8003c34 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	2b02      	cmp	r3, #2
 800a412:	d901      	bls.n	800a418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e10c      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a418:	4b6a      	ldr	r3, [pc, #424]	@ (800a5c4 <HAL_RCC_OscConfig+0x474>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0f0      	beq.n	800a406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d106      	bne.n	800a43a <HAL_RCC_OscConfig+0x2ea>
 800a42c:	4b64      	ldr	r3, [pc, #400]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a42e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a430:	4a63      	ldr	r2, [pc, #396]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	6713      	str	r3, [r2, #112]	@ 0x70
 800a438:	e01c      	b.n	800a474 <HAL_RCC_OscConfig+0x324>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	2b05      	cmp	r3, #5
 800a440:	d10c      	bne.n	800a45c <HAL_RCC_OscConfig+0x30c>
 800a442:	4b5f      	ldr	r3, [pc, #380]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a446:	4a5e      	ldr	r2, [pc, #376]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a448:	f043 0304 	orr.w	r3, r3, #4
 800a44c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a44e:	4b5c      	ldr	r3, [pc, #368]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a452:	4a5b      	ldr	r2, [pc, #364]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a454:	f043 0301 	orr.w	r3, r3, #1
 800a458:	6713      	str	r3, [r2, #112]	@ 0x70
 800a45a:	e00b      	b.n	800a474 <HAL_RCC_OscConfig+0x324>
 800a45c:	4b58      	ldr	r3, [pc, #352]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a45e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a460:	4a57      	ldr	r2, [pc, #348]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a462:	f023 0301 	bic.w	r3, r3, #1
 800a466:	6713      	str	r3, [r2, #112]	@ 0x70
 800a468:	4b55      	ldr	r3, [pc, #340]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a46a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a46c:	4a54      	ldr	r2, [pc, #336]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a46e:	f023 0304 	bic.w	r3, r3, #4
 800a472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d015      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a47c:	f7f9 fbda 	bl	8003c34 <HAL_GetTick>
 800a480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a482:	e00a      	b.n	800a49a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a484:	f7f9 fbd6 	bl	8003c34 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a492:	4293      	cmp	r3, r2
 800a494:	d901      	bls.n	800a49a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a496:	2303      	movs	r3, #3
 800a498:	e0cb      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a49a:	4b49      	ldr	r3, [pc, #292]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0ee      	beq.n	800a484 <HAL_RCC_OscConfig+0x334>
 800a4a6:	e014      	b.n	800a4d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4a8:	f7f9 fbc4 	bl	8003c34 <HAL_GetTick>
 800a4ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4ae:	e00a      	b.n	800a4c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4b0:	f7f9 fbc0 	bl	8003c34 <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d901      	bls.n	800a4c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e0b5      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4c6:	4b3e      	ldr	r3, [pc, #248]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a4c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1ee      	bne.n	800a4b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d105      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4d8:	4b39      	ldr	r3, [pc, #228]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4dc:	4a38      	ldr	r2, [pc, #224]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a4de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 80a1 	beq.w	800a630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a4ee:	4b34      	ldr	r3, [pc, #208]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 030c 	and.w	r3, r3, #12
 800a4f6:	2b08      	cmp	r3, #8
 800a4f8:	d05c      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d141      	bne.n	800a586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a502:	4b31      	ldr	r3, [pc, #196]	@ (800a5c8 <HAL_RCC_OscConfig+0x478>)
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a508:	f7f9 fb94 	bl	8003c34 <HAL_GetTick>
 800a50c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a50e:	e008      	b.n	800a522 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a510:	f7f9 fb90 	bl	8003c34 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e087      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a522:	4b27      	ldr	r3, [pc, #156]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f0      	bne.n	800a510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	69da      	ldr	r2, [r3, #28]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	431a      	orrs	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53c:	019b      	lsls	r3, r3, #6
 800a53e:	431a      	orrs	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a544:	085b      	lsrs	r3, r3, #1
 800a546:	3b01      	subs	r3, #1
 800a548:	041b      	lsls	r3, r3, #16
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a550:	061b      	lsls	r3, r3, #24
 800a552:	491b      	ldr	r1, [pc, #108]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a554:	4313      	orrs	r3, r2
 800a556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a558:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c8 <HAL_RCC_OscConfig+0x478>)
 800a55a:	2201      	movs	r2, #1
 800a55c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a55e:	f7f9 fb69 	bl	8003c34 <HAL_GetTick>
 800a562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a564:	e008      	b.n	800a578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a566:	f7f9 fb65 	bl	8003c34 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	2b02      	cmp	r3, #2
 800a572:	d901      	bls.n	800a578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e05c      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a578:	4b11      	ldr	r3, [pc, #68]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0f0      	beq.n	800a566 <HAL_RCC_OscConfig+0x416>
 800a584:	e054      	b.n	800a630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a586:	4b10      	ldr	r3, [pc, #64]	@ (800a5c8 <HAL_RCC_OscConfig+0x478>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a58c:	f7f9 fb52 	bl	8003c34 <HAL_GetTick>
 800a590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a592:	e008      	b.n	800a5a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a594:	f7f9 fb4e 	bl	8003c34 <HAL_GetTick>
 800a598:	4602      	mov	r2, r0
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	1ad3      	subs	r3, r2, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d901      	bls.n	800a5a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e045      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5a6:	4b06      	ldr	r3, [pc, #24]	@ (800a5c0 <HAL_RCC_OscConfig+0x470>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1f0      	bne.n	800a594 <HAL_RCC_OscConfig+0x444>
 800a5b2:	e03d      	b.n	800a630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d107      	bne.n	800a5cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e038      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
 800a5c0:	40023800 	.word	0x40023800
 800a5c4:	40007000 	.word	0x40007000
 800a5c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a5cc:	4b1b      	ldr	r3, [pc, #108]	@ (800a63c <HAL_RCC_OscConfig+0x4ec>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d028      	beq.n	800a62c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d121      	bne.n	800a62c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d11a      	bne.n	800a62c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a604:	4293      	cmp	r3, r2
 800a606:	d111      	bne.n	800a62c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a612:	085b      	lsrs	r3, r3, #1
 800a614:	3b01      	subs	r3, #1
 800a616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a618:	429a      	cmp	r2, r3
 800a61a:	d107      	bne.n	800a62c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a628:	429a      	cmp	r2, r3
 800a62a:	d001      	beq.n	800a630 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e000      	b.n	800a632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	40023800 	.word	0x40023800

0800a640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	e0cc      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a654:	4b68      	ldr	r3, [pc, #416]	@ (800a7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0307 	and.w	r3, r3, #7
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d90c      	bls.n	800a67c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a662:	4b65      	ldr	r3, [pc, #404]	@ (800a7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a66a:	4b63      	ldr	r3, [pc, #396]	@ (800a7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 0307 	and.w	r3, r3, #7
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d001      	beq.n	800a67c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e0b8      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d020      	beq.n	800a6ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b00      	cmp	r3, #0
 800a692:	d005      	beq.n	800a6a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a694:	4b59      	ldr	r3, [pc, #356]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	4a58      	ldr	r2, [pc, #352]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a69a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a69e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6ac:	4b53      	ldr	r3, [pc, #332]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	4a52      	ldr	r2, [pc, #328]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a6b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6b8:	4b50      	ldr	r3, [pc, #320]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	494d      	ldr	r1, [pc, #308]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d044      	beq.n	800a760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d107      	bne.n	800a6ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6de:	4b47      	ldr	r3, [pc, #284]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d119      	bne.n	800a71e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e07f      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d003      	beq.n	800a6fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a6fa:	2b03      	cmp	r3, #3
 800a6fc:	d107      	bne.n	800a70e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6fe:	4b3f      	ldr	r3, [pc, #252]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d109      	bne.n	800a71e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e06f      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a70e:	4b3b      	ldr	r3, [pc, #236]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e067      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a71e:	4b37      	ldr	r3, [pc, #220]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f023 0203 	bic.w	r2, r3, #3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	4934      	ldr	r1, [pc, #208]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a730:	f7f9 fa80 	bl	8003c34 <HAL_GetTick>
 800a734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a736:	e00a      	b.n	800a74e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a738:	f7f9 fa7c 	bl	8003c34 <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a746:	4293      	cmp	r3, r2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e04f      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a74e:	4b2b      	ldr	r3, [pc, #172]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	f003 020c 	and.w	r2, r3, #12
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d1eb      	bne.n	800a738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a760:	4b25      	ldr	r3, [pc, #148]	@ (800a7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d20c      	bcs.n	800a788 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a76e:	4b22      	ldr	r3, [pc, #136]	@ (800a7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	b2d2      	uxtb	r2, r2
 800a774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a776:	4b20      	ldr	r3, [pc, #128]	@ (800a7f8 <HAL_RCC_ClockConfig+0x1b8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	d001      	beq.n	800a788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e032      	b.n	800a7ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d008      	beq.n	800a7a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a794:	4b19      	ldr	r3, [pc, #100]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	4916      	ldr	r1, [pc, #88]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7b2:	4b12      	ldr	r3, [pc, #72]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	490e      	ldr	r1, [pc, #56]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a7c6:	f000 f82d 	bl	800a824 <HAL_RCC_GetSysClockFreq>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a7fc <HAL_RCC_ClockConfig+0x1bc>)
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	091b      	lsrs	r3, r3, #4
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	490a      	ldr	r1, [pc, #40]	@ (800a800 <HAL_RCC_ClockConfig+0x1c0>)
 800a7d8:	5ccb      	ldrb	r3, [r1, r3]
 800a7da:	fa22 f303 	lsr.w	r3, r2, r3
 800a7de:	4a09      	ldr	r2, [pc, #36]	@ (800a804 <HAL_RCC_ClockConfig+0x1c4>)
 800a7e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a7e2:	4b09      	ldr	r3, [pc, #36]	@ (800a808 <HAL_RCC_ClockConfig+0x1c8>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f9 f9e0 	bl	8003bac <HAL_InitTick>

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40023c00 	.word	0x40023c00
 800a7fc:	40023800 	.word	0x40023800
 800a800:	0801251c 	.word	0x0801251c
 800a804:	20000010 	.word	0x20000010
 800a808:	20000014 	.word	0x20000014

0800a80c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a810:	4b03      	ldr	r3, [pc, #12]	@ (800a820 <HAL_RCC_EnableCSS+0x14>)
 800a812:	2201      	movs	r2, #1
 800a814:	601a      	str	r2, [r3, #0]
}
 800a816:	bf00      	nop
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	4247004c 	.word	0x4247004c

0800a824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a828:	b090      	sub	sp, #64	@ 0x40
 800a82a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a830:	2300      	movs	r3, #0
 800a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a83c:	4b59      	ldr	r3, [pc, #356]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f003 030c 	and.w	r3, r3, #12
 800a844:	2b08      	cmp	r3, #8
 800a846:	d00d      	beq.n	800a864 <HAL_RCC_GetSysClockFreq+0x40>
 800a848:	2b08      	cmp	r3, #8
 800a84a:	f200 80a1 	bhi.w	800a990 <HAL_RCC_GetSysClockFreq+0x16c>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0x34>
 800a852:	2b04      	cmp	r3, #4
 800a854:	d003      	beq.n	800a85e <HAL_RCC_GetSysClockFreq+0x3a>
 800a856:	e09b      	b.n	800a990 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a858:	4b53      	ldr	r3, [pc, #332]	@ (800a9a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800a85a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a85c:	e09b      	b.n	800a996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a85e:	4b53      	ldr	r3, [pc, #332]	@ (800a9ac <HAL_RCC_GetSysClockFreq+0x188>)
 800a860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a862:	e098      	b.n	800a996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a864:	4b4f      	ldr	r3, [pc, #316]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a86c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a86e:	4b4d      	ldr	r3, [pc, #308]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d028      	beq.n	800a8cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a87a:	4b4a      	ldr	r3, [pc, #296]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	099b      	lsrs	r3, r3, #6
 800a880:	2200      	movs	r2, #0
 800a882:	623b      	str	r3, [r7, #32]
 800a884:	627a      	str	r2, [r7, #36]	@ 0x24
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a88c:	2100      	movs	r1, #0
 800a88e:	4b47      	ldr	r3, [pc, #284]	@ (800a9ac <HAL_RCC_GetSysClockFreq+0x188>)
 800a890:	fb03 f201 	mul.w	r2, r3, r1
 800a894:	2300      	movs	r3, #0
 800a896:	fb00 f303 	mul.w	r3, r0, r3
 800a89a:	4413      	add	r3, r2
 800a89c:	4a43      	ldr	r2, [pc, #268]	@ (800a9ac <HAL_RCC_GetSysClockFreq+0x188>)
 800a89e:	fba0 1202 	umull	r1, r2, r0, r2
 800a8a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a8a4:	460a      	mov	r2, r1
 800a8a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a8a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8aa:	4413      	add	r3, r2
 800a8ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	61bb      	str	r3, [r7, #24]
 800a8b4:	61fa      	str	r2, [r7, #28]
 800a8b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a8be:	f7f5 fcdf 	bl	8000280 <__aeabi_uldivmod>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8ca:	e053      	b.n	800a974 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8cc:	4b35      	ldr	r3, [pc, #212]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	099b      	lsrs	r3, r3, #6
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	617a      	str	r2, [r7, #20]
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a8de:	f04f 0b00 	mov.w	fp, #0
 800a8e2:	4652      	mov	r2, sl
 800a8e4:	465b      	mov	r3, fp
 800a8e6:	f04f 0000 	mov.w	r0, #0
 800a8ea:	f04f 0100 	mov.w	r1, #0
 800a8ee:	0159      	lsls	r1, r3, #5
 800a8f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8f4:	0150      	lsls	r0, r2, #5
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	ebb2 080a 	subs.w	r8, r2, sl
 800a8fe:	eb63 090b 	sbc.w	r9, r3, fp
 800a902:	f04f 0200 	mov.w	r2, #0
 800a906:	f04f 0300 	mov.w	r3, #0
 800a90a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a90e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a912:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a916:	ebb2 0408 	subs.w	r4, r2, r8
 800a91a:	eb63 0509 	sbc.w	r5, r3, r9
 800a91e:	f04f 0200 	mov.w	r2, #0
 800a922:	f04f 0300 	mov.w	r3, #0
 800a926:	00eb      	lsls	r3, r5, #3
 800a928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a92c:	00e2      	lsls	r2, r4, #3
 800a92e:	4614      	mov	r4, r2
 800a930:	461d      	mov	r5, r3
 800a932:	eb14 030a 	adds.w	r3, r4, sl
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	eb45 030b 	adc.w	r3, r5, fp
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	f04f 0200 	mov.w	r2, #0
 800a942:	f04f 0300 	mov.w	r3, #0
 800a946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a94a:	4629      	mov	r1, r5
 800a94c:	028b      	lsls	r3, r1, #10
 800a94e:	4621      	mov	r1, r4
 800a950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a954:	4621      	mov	r1, r4
 800a956:	028a      	lsls	r2, r1, #10
 800a958:	4610      	mov	r0, r2
 800a95a:	4619      	mov	r1, r3
 800a95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95e:	2200      	movs	r2, #0
 800a960:	60bb      	str	r3, [r7, #8]
 800a962:	60fa      	str	r2, [r7, #12]
 800a964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a968:	f7f5 fc8a 	bl	8000280 <__aeabi_uldivmod>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4613      	mov	r3, r2
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a974:	4b0b      	ldr	r3, [pc, #44]	@ (800a9a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	0c1b      	lsrs	r3, r3, #16
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	3301      	adds	r3, #1
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a984:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a988:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a98e:	e002      	b.n	800a996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a990:	4b05      	ldr	r3, [pc, #20]	@ (800a9a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800a992:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a994:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3740      	adds	r7, #64	@ 0x40
 800a99c:	46bd      	mov	sp, r7
 800a99e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9a2:	bf00      	nop
 800a9a4:	40023800 	.word	0x40023800
 800a9a8:	00f42400 	.word	0x00f42400
 800a9ac:	017d7840 	.word	0x017d7840

0800a9b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9b4:	4b03      	ldr	r3, [pc, #12]	@ (800a9c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000010 	.word	0x20000010

0800a9c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a9cc:	f7ff fff0 	bl	800a9b0 <HAL_RCC_GetHCLKFreq>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	0a9b      	lsrs	r3, r3, #10
 800a9d8:	f003 0307 	and.w	r3, r3, #7
 800a9dc:	4903      	ldr	r1, [pc, #12]	@ (800a9ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9de:	5ccb      	ldrb	r3, [r1, r3]
 800a9e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	40023800 	.word	0x40023800
 800a9ec:	0801252c 	.word	0x0801252c

0800a9f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a9f4:	f7ff ffdc 	bl	800a9b0 <HAL_RCC_GetHCLKFreq>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	4b05      	ldr	r3, [pc, #20]	@ (800aa10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	0b5b      	lsrs	r3, r3, #13
 800aa00:	f003 0307 	and.w	r3, r3, #7
 800aa04:	4903      	ldr	r1, [pc, #12]	@ (800aa14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa06:	5ccb      	ldrb	r3, [r1, r3]
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	40023800 	.word	0x40023800
 800aa14:	0801252c 	.word	0x0801252c

0800aa18 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800aa1c:	4b06      	ldr	r3, [pc, #24]	@ (800aa38 <HAL_RCC_NMI_IRQHandler+0x20>)
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa24:	2b80      	cmp	r3, #128	@ 0x80
 800aa26:	d104      	bne.n	800aa32 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800aa28:	f000 f80a 	bl	800aa40 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aa2c:	4b03      	ldr	r3, [pc, #12]	@ (800aa3c <HAL_RCC_NMI_IRQHandler+0x24>)
 800aa2e:	2280      	movs	r2, #128	@ 0x80
 800aa30:	701a      	strb	r2, [r3, #0]
  }
}
 800aa32:	bf00      	nop
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	40023800 	.word	0x40023800
 800aa3c:	4002380e 	.word	0x4002380e

0800aa40 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800aa44:	bf00      	nop
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr

0800aa4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e041      	b.n	800aae4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7f8 fe87 	bl	8003788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	f000 fc3b 	bl	800b308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d001      	beq.n	800ab04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e044      	b.n	800ab8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2202      	movs	r2, #2
 800ab08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0201 	orr.w	r2, r2, #1
 800ab1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a1e      	ldr	r2, [pc, #120]	@ (800ab9c <HAL_TIM_Base_Start_IT+0xb0>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d018      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x6c>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab2e:	d013      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x6c>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1a      	ldr	r2, [pc, #104]	@ (800aba0 <HAL_TIM_Base_Start_IT+0xb4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d00e      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x6c>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a19      	ldr	r2, [pc, #100]	@ (800aba4 <HAL_TIM_Base_Start_IT+0xb8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d009      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x6c>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a17      	ldr	r2, [pc, #92]	@ (800aba8 <HAL_TIM_Base_Start_IT+0xbc>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d004      	beq.n	800ab58 <HAL_TIM_Base_Start_IT+0x6c>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a16      	ldr	r2, [pc, #88]	@ (800abac <HAL_TIM_Base_Start_IT+0xc0>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d111      	bne.n	800ab7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b06      	cmp	r3, #6
 800ab68:	d010      	beq.n	800ab8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f042 0201 	orr.w	r2, r2, #1
 800ab78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7a:	e007      	b.n	800ab8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f042 0201 	orr.w	r2, r2, #1
 800ab8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	40010000 	.word	0x40010000
 800aba0:	40000400 	.word	0x40000400
 800aba4:	40000800 	.word	0x40000800
 800aba8:	40000c00 	.word	0x40000c00
 800abac:	40014000 	.word	0x40014000

0800abb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e041      	b.n	800ac46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d106      	bne.n	800abdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f839 	bl	800ac4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3304      	adds	r3, #4
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f000 fb8a 	bl	800b308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b083      	sub	sp, #12
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac56:	bf00      	nop
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
	...

0800ac64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d109      	bne.n	800ac88 <HAL_TIM_PWM_Start+0x24>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	bf14      	ite	ne
 800ac80:	2301      	movne	r3, #1
 800ac82:	2300      	moveq	r3, #0
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	e022      	b.n	800acce <HAL_TIM_PWM_Start+0x6a>
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b04      	cmp	r3, #4
 800ac8c:	d109      	bne.n	800aca2 <HAL_TIM_PWM_Start+0x3e>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	bf14      	ite	ne
 800ac9a:	2301      	movne	r3, #1
 800ac9c:	2300      	moveq	r3, #0
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	e015      	b.n	800acce <HAL_TIM_PWM_Start+0x6a>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b08      	cmp	r3, #8
 800aca6:	d109      	bne.n	800acbc <HAL_TIM_PWM_Start+0x58>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	bf14      	ite	ne
 800acb4:	2301      	movne	r3, #1
 800acb6:	2300      	moveq	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	e008      	b.n	800acce <HAL_TIM_PWM_Start+0x6a>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	bf14      	ite	ne
 800acc8:	2301      	movne	r3, #1
 800acca:	2300      	moveq	r3, #0
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e068      	b.n	800ada8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d104      	bne.n	800ace6 <HAL_TIM_PWM_Start+0x82>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2202      	movs	r2, #2
 800ace0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ace4:	e013      	b.n	800ad0e <HAL_TIM_PWM_Start+0xaa>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d104      	bne.n	800acf6 <HAL_TIM_PWM_Start+0x92>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800acf4:	e00b      	b.n	800ad0e <HAL_TIM_PWM_Start+0xaa>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b08      	cmp	r3, #8
 800acfa:	d104      	bne.n	800ad06 <HAL_TIM_PWM_Start+0xa2>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad04:	e003      	b.n	800ad0e <HAL_TIM_PWM_Start+0xaa>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2201      	movs	r2, #1
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fda8 	bl	800b86c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a23      	ldr	r2, [pc, #140]	@ (800adb0 <HAL_TIM_PWM_Start+0x14c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d107      	bne.n	800ad36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a1d      	ldr	r2, [pc, #116]	@ (800adb0 <HAL_TIM_PWM_Start+0x14c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d018      	beq.n	800ad72 <HAL_TIM_PWM_Start+0x10e>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad48:	d013      	beq.n	800ad72 <HAL_TIM_PWM_Start+0x10e>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a19      	ldr	r2, [pc, #100]	@ (800adb4 <HAL_TIM_PWM_Start+0x150>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00e      	beq.n	800ad72 <HAL_TIM_PWM_Start+0x10e>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a17      	ldr	r2, [pc, #92]	@ (800adb8 <HAL_TIM_PWM_Start+0x154>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d009      	beq.n	800ad72 <HAL_TIM_PWM_Start+0x10e>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a16      	ldr	r2, [pc, #88]	@ (800adbc <HAL_TIM_PWM_Start+0x158>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d004      	beq.n	800ad72 <HAL_TIM_PWM_Start+0x10e>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a14      	ldr	r2, [pc, #80]	@ (800adc0 <HAL_TIM_PWM_Start+0x15c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d111      	bne.n	800ad96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b06      	cmp	r3, #6
 800ad82:	d010      	beq.n	800ada6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0201 	orr.w	r2, r2, #1
 800ad92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad94:	e007      	b.n	800ada6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f042 0201 	orr.w	r2, r2, #1
 800ada4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	40010000 	.word	0x40010000
 800adb4:	40000400 	.word	0x40000400
 800adb8:	40000800 	.word	0x40000800
 800adbc:	40000c00 	.word	0x40000c00
 800adc0:	40014000 	.word	0x40014000

0800adc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d020      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f003 0302 	and.w	r3, r3, #2
 800adec:	2b00      	cmp	r3, #0
 800adee:	d01b      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f06f 0202 	mvn.w	r2, #2
 800adf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	f003 0303 	and.w	r3, r3, #3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fa5b 	bl	800b2ca <HAL_TIM_IC_CaptureCallback>
 800ae14:	e005      	b.n	800ae22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa4d 	bl	800b2b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fa5e 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f003 0304 	and.w	r3, r3, #4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d020      	beq.n	800ae74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f003 0304 	and.w	r3, r3, #4
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01b      	beq.n	800ae74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f06f 0204 	mvn.w	r2, #4
 800ae44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa35 	bl	800b2ca <HAL_TIM_IC_CaptureCallback>
 800ae60:	e005      	b.n	800ae6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fa27 	bl	800b2b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fa38 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f003 0308 	and.w	r3, r3, #8
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d020      	beq.n	800aec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f003 0308 	and.w	r3, r3, #8
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d01b      	beq.n	800aec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f06f 0208 	mvn.w	r2, #8
 800ae90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2204      	movs	r2, #4
 800ae96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	f003 0303 	and.w	r3, r3, #3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fa0f 	bl	800b2ca <HAL_TIM_IC_CaptureCallback>
 800aeac:	e005      	b.n	800aeba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa01 	bl	800b2b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fa12 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f003 0310 	and.w	r3, r3, #16
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d020      	beq.n	800af0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f003 0310 	and.w	r3, r3, #16
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01b      	beq.n	800af0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f06f 0210 	mvn.w	r2, #16
 800aedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2208      	movs	r2, #8
 800aee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f9e9 	bl	800b2ca <HAL_TIM_IC_CaptureCallback>
 800aef8:	e005      	b.n	800af06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f9db 	bl	800b2b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f9ec 	bl	800b2de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00c      	beq.n	800af30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d007      	beq.n	800af30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f06f 0201 	mvn.w	r2, #1
 800af28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f7f8 f844 	bl	8002fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00c      	beq.n	800af54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af40:	2b00      	cmp	r3, #0
 800af42:	d007      	beq.n	800af54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800af4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fd2a 	bl	800b9a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00c      	beq.n	800af78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f9bd 	bl	800b2f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f003 0320 	and.w	r3, r3, #32
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00c      	beq.n	800af9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f003 0320 	and.w	r3, r3, #32
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d007      	beq.n	800af9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f06f 0220 	mvn.w	r2, #32
 800af94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fcfc 	bl	800b994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af9c:	bf00      	nop
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d101      	bne.n	800afc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afbe:	2302      	movs	r3, #2
 800afc0:	e0ae      	b.n	800b120 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2b0c      	cmp	r3, #12
 800afce:	f200 809f 	bhi.w	800b110 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800afd2:	a201      	add	r2, pc, #4	@ (adr r2, 800afd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd8:	0800b00d 	.word	0x0800b00d
 800afdc:	0800b111 	.word	0x0800b111
 800afe0:	0800b111 	.word	0x0800b111
 800afe4:	0800b111 	.word	0x0800b111
 800afe8:	0800b04d 	.word	0x0800b04d
 800afec:	0800b111 	.word	0x0800b111
 800aff0:	0800b111 	.word	0x0800b111
 800aff4:	0800b111 	.word	0x0800b111
 800aff8:	0800b08f 	.word	0x0800b08f
 800affc:	0800b111 	.word	0x0800b111
 800b000:	0800b111 	.word	0x0800b111
 800b004:	0800b111 	.word	0x0800b111
 800b008:	0800b0cf 	.word	0x0800b0cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fa04 	bl	800b420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	699a      	ldr	r2, [r3, #24]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f042 0208 	orr.w	r2, r2, #8
 800b026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0204 	bic.w	r2, r2, #4
 800b036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6999      	ldr	r1, [r3, #24]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	619a      	str	r2, [r3, #24]
      break;
 800b04a:	e064      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68b9      	ldr	r1, [r7, #8]
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fa4a 	bl	800b4ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699a      	ldr	r2, [r3, #24]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6999      	ldr	r1, [r3, #24]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	021a      	lsls	r2, r3, #8
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	430a      	orrs	r2, r1
 800b08a:	619a      	str	r2, [r3, #24]
      break;
 800b08c:	e043      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fa95 	bl	800b5c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69da      	ldr	r2, [r3, #28]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f042 0208 	orr.w	r2, r2, #8
 800b0a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69da      	ldr	r2, [r3, #28]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f022 0204 	bic.w	r2, r2, #4
 800b0b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	69d9      	ldr	r1, [r3, #28]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	691a      	ldr	r2, [r3, #16]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	61da      	str	r2, [r3, #28]
      break;
 800b0cc:	e023      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68b9      	ldr	r1, [r7, #8]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fadf 	bl	800b698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	69da      	ldr	r2, [r3, #28]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	69da      	ldr	r2, [r3, #28]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	69d9      	ldr	r1, [r3, #28]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	021a      	lsls	r2, r3, #8
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	430a      	orrs	r2, r1
 800b10c:	61da      	str	r2, [r3, #28]
      break;
 800b10e:	e002      	b.n	800b116 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	75fb      	strb	r3, [r7, #23]
      break;
 800b114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_TIM_ConfigClockSource+0x1c>
 800b140:	2302      	movs	r3, #2
 800b142:	e0b4      	b.n	800b2ae <HAL_TIM_ConfigClockSource+0x186>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b16a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b17c:	d03e      	beq.n	800b1fc <HAL_TIM_ConfigClockSource+0xd4>
 800b17e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b182:	f200 8087 	bhi.w	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b18a:	f000 8086 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x172>
 800b18e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b192:	d87f      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b194:	2b70      	cmp	r3, #112	@ 0x70
 800b196:	d01a      	beq.n	800b1ce <HAL_TIM_ConfigClockSource+0xa6>
 800b198:	2b70      	cmp	r3, #112	@ 0x70
 800b19a:	d87b      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b19c:	2b60      	cmp	r3, #96	@ 0x60
 800b19e:	d050      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x11a>
 800b1a0:	2b60      	cmp	r3, #96	@ 0x60
 800b1a2:	d877      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1a4:	2b50      	cmp	r3, #80	@ 0x50
 800b1a6:	d03c      	beq.n	800b222 <HAL_TIM_ConfigClockSource+0xfa>
 800b1a8:	2b50      	cmp	r3, #80	@ 0x50
 800b1aa:	d873      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1ac:	2b40      	cmp	r3, #64	@ 0x40
 800b1ae:	d058      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x13a>
 800b1b0:	2b40      	cmp	r3, #64	@ 0x40
 800b1b2:	d86f      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1b4:	2b30      	cmp	r3, #48	@ 0x30
 800b1b6:	d064      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1b8:	2b30      	cmp	r3, #48	@ 0x30
 800b1ba:	d86b      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d060      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d867      	bhi.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d05c      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1c8:	2b10      	cmp	r3, #16
 800b1ca:	d05a      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x15a>
 800b1cc:	e062      	b.n	800b294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1de:	f000 fb25 	bl	800b82c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b1f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	609a      	str	r2, [r3, #8]
      break;
 800b1fa:	e04f      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b20c:	f000 fb0e 	bl	800b82c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689a      	ldr	r2, [r3, #8]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b21e:	609a      	str	r2, [r3, #8]
      break;
 800b220:	e03c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b22e:	461a      	mov	r2, r3
 800b230:	f000 fa82 	bl	800b738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2150      	movs	r1, #80	@ 0x50
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fadb 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b240:	e02c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b24e:	461a      	mov	r2, r3
 800b250:	f000 faa1 	bl	800b796 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2160      	movs	r1, #96	@ 0x60
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 facb 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b260:	e01c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b26e:	461a      	mov	r2, r3
 800b270:	f000 fa62 	bl	800b738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2140      	movs	r1, #64	@ 0x40
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fabb 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b280:	e00c      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4619      	mov	r1, r3
 800b28c:	4610      	mov	r0, r2
 800b28e:	f000 fab2 	bl	800b7f6 <TIM_ITRx_SetConfig>
      break;
 800b292:	e003      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	73fb      	strb	r3, [r7, #15]
      break;
 800b298:	e000      	b.n	800b29c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b29a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b083      	sub	sp, #12
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b2d2:	bf00      	nop
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
	...

0800b308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a3a      	ldr	r2, [pc, #232]	@ (800b404 <TIM_Base_SetConfig+0xfc>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d00f      	beq.n	800b340 <TIM_Base_SetConfig+0x38>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b326:	d00b      	beq.n	800b340 <TIM_Base_SetConfig+0x38>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a37      	ldr	r2, [pc, #220]	@ (800b408 <TIM_Base_SetConfig+0x100>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d007      	beq.n	800b340 <TIM_Base_SetConfig+0x38>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a36      	ldr	r2, [pc, #216]	@ (800b40c <TIM_Base_SetConfig+0x104>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d003      	beq.n	800b340 <TIM_Base_SetConfig+0x38>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a35      	ldr	r2, [pc, #212]	@ (800b410 <TIM_Base_SetConfig+0x108>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d108      	bne.n	800b352 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a2b      	ldr	r2, [pc, #172]	@ (800b404 <TIM_Base_SetConfig+0xfc>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d01b      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b360:	d017      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a28      	ldr	r2, [pc, #160]	@ (800b408 <TIM_Base_SetConfig+0x100>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d013      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a27      	ldr	r2, [pc, #156]	@ (800b40c <TIM_Base_SetConfig+0x104>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00f      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a26      	ldr	r2, [pc, #152]	@ (800b410 <TIM_Base_SetConfig+0x108>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d00b      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a25      	ldr	r2, [pc, #148]	@ (800b414 <TIM_Base_SetConfig+0x10c>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d007      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a24      	ldr	r2, [pc, #144]	@ (800b418 <TIM_Base_SetConfig+0x110>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d003      	beq.n	800b392 <TIM_Base_SetConfig+0x8a>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a23      	ldr	r2, [pc, #140]	@ (800b41c <TIM_Base_SetConfig+0x114>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d108      	bne.n	800b3a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689a      	ldr	r2, [r3, #8]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b404 <TIM_Base_SetConfig+0xfc>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d103      	bne.n	800b3d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d105      	bne.n	800b3f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	f023 0201 	bic.w	r2, r3, #1
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	611a      	str	r2, [r3, #16]
  }
}
 800b3f6:	bf00      	nop
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40010000 	.word	0x40010000
 800b408:	40000400 	.word	0x40000400
 800b40c:	40000800 	.word	0x40000800
 800b410:	40000c00 	.word	0x40000c00
 800b414:	40014000 	.word	0x40014000
 800b418:	40014400 	.word	0x40014400
 800b41c:	40014800 	.word	0x40014800

0800b420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a1b      	ldr	r3, [r3, #32]
 800b434:	f023 0201 	bic.w	r2, r3, #1
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 0303 	bic.w	r3, r3, #3
 800b456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f023 0302 	bic.w	r3, r3, #2
 800b468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	4313      	orrs	r3, r2
 800b472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e8 <TIM_OC1_SetConfig+0xc8>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d10c      	bne.n	800b496 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f023 0308 	bic.w	r3, r3, #8
 800b482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f023 0304 	bic.w	r3, r3, #4
 800b494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a13      	ldr	r2, [pc, #76]	@ (800b4e8 <TIM_OC1_SetConfig+0xc8>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d111      	bne.n	800b4c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	621a      	str	r2, [r3, #32]
}
 800b4dc:	bf00      	nop
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	40010000 	.word	0x40010000

0800b4ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	f023 0210 	bic.w	r2, r3, #16
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	021b      	lsls	r3, r3, #8
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f023 0320 	bic.w	r3, r3, #32
 800b536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	4313      	orrs	r3, r2
 800b542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a1e      	ldr	r2, [pc, #120]	@ (800b5c0 <TIM_OC2_SetConfig+0xd4>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d10d      	bne.n	800b568 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	011b      	lsls	r3, r3, #4
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a15      	ldr	r2, [pc, #84]	@ (800b5c0 <TIM_OC2_SetConfig+0xd4>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d113      	bne.n	800b598 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b57e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	4313      	orrs	r3, r2
 800b58a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	4313      	orrs	r3, r2
 800b596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	621a      	str	r2, [r3, #32]
}
 800b5b2:	bf00      	nop
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	40010000 	.word	0x40010000

0800b5c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b087      	sub	sp, #28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a1b      	ldr	r3, [r3, #32]
 800b5d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	69db      	ldr	r3, [r3, #28]
 800b5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b60c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a1d      	ldr	r2, [pc, #116]	@ (800b694 <TIM_OC3_SetConfig+0xd0>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d10d      	bne.n	800b63e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	021b      	lsls	r3, r3, #8
 800b630:	697a      	ldr	r2, [r7, #20]
 800b632:	4313      	orrs	r3, r2
 800b634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a14      	ldr	r2, [pc, #80]	@ (800b694 <TIM_OC3_SetConfig+0xd0>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d113      	bne.n	800b66e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b64c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	4313      	orrs	r3, r2
 800b660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	011b      	lsls	r3, r3, #4
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	621a      	str	r2, [r3, #32]
}
 800b688:	bf00      	nop
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	40010000 	.word	0x40010000

0800b698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b698:	b480      	push	{r7}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a1b      	ldr	r3, [r3, #32]
 800b6a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a1b      	ldr	r3, [r3, #32]
 800b6ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	021b      	lsls	r3, r3, #8
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	031b      	lsls	r3, r3, #12
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a10      	ldr	r2, [pc, #64]	@ (800b734 <TIM_OC4_SetConfig+0x9c>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d109      	bne.n	800b70c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	019b      	lsls	r3, r3, #6
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	4313      	orrs	r3, r2
 800b70a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	621a      	str	r2, [r3, #32]
}
 800b726:	bf00      	nop
 800b728:	371c      	adds	r7, #28
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	40010000 	.word	0x40010000

0800b738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1b      	ldr	r3, [r3, #32]
 800b748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	f023 0201 	bic.w	r2, r3, #1
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	4313      	orrs	r3, r2
 800b76c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f023 030a 	bic.w	r3, r3, #10
 800b774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b776:	697a      	ldr	r2, [r7, #20]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	693a      	ldr	r2, [r7, #16]
 800b782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	621a      	str	r2, [r3, #32]
}
 800b78a:	bf00      	nop
 800b78c:	371c      	adds	r7, #28
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b796:	b480      	push	{r7}
 800b798:	b087      	sub	sp, #28
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	60f8      	str	r0, [r7, #12]
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a1b      	ldr	r3, [r3, #32]
 800b7ac:	f023 0210 	bic.w	r2, r3, #16
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	699b      	ldr	r3, [r3, #24]
 800b7b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b7c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	031b      	lsls	r3, r3, #12
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b7d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	621a      	str	r2, [r3, #32]
}
 800b7ea:	bf00      	nop
 800b7ec:	371c      	adds	r7, #28
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr

0800b7f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b80c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b80e:	683a      	ldr	r2, [r7, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	4313      	orrs	r3, r2
 800b814:	f043 0307 	orr.w	r3, r3, #7
 800b818:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	609a      	str	r2, [r3, #8]
}
 800b820:	bf00      	nop
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b846:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	021a      	lsls	r2, r3, #8
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	431a      	orrs	r2, r3
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	4313      	orrs	r3, r2
 800b854:	697a      	ldr	r2, [r7, #20]
 800b856:	4313      	orrs	r3, r2
 800b858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	697a      	ldr	r2, [r7, #20]
 800b85e:	609a      	str	r2, [r3, #8]
}
 800b860:	bf00      	nop
 800b862:	371c      	adds	r7, #28
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	f003 031f 	and.w	r3, r3, #31
 800b87e:	2201      	movs	r2, #1
 800b880:	fa02 f303 	lsl.w	r3, r2, r3
 800b884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6a1a      	ldr	r2, [r3, #32]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	43db      	mvns	r3, r3
 800b88e:	401a      	ands	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a1a      	ldr	r2, [r3, #32]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f003 031f 	and.w	r3, r3, #31
 800b89e:	6879      	ldr	r1, [r7, #4]
 800b8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a4:	431a      	orrs	r2, r3
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	621a      	str	r2, [r3, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d101      	bne.n	800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	e050      	b.n	800b972 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a1c      	ldr	r2, [pc, #112]	@ (800b980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d018      	beq.n	800b946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b91c:	d013      	beq.n	800b946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a18      	ldr	r2, [pc, #96]	@ (800b984 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00e      	beq.n	800b946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a16      	ldr	r2, [pc, #88]	@ (800b988 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d009      	beq.n	800b946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a15      	ldr	r2, [pc, #84]	@ (800b98c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d004      	beq.n	800b946 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a13      	ldr	r2, [pc, #76]	@ (800b990 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d10c      	bne.n	800b960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b94c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	68ba      	ldr	r2, [r7, #8]
 800b954:	4313      	orrs	r3, r2
 800b956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68ba      	ldr	r2, [r7, #8]
 800b95e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	40010000 	.word	0x40010000
 800b984:	40000400 	.word	0x40000400
 800b988:	40000800 	.word	0x40000800
 800b98c:	40000c00 	.word	0x40000c00
 800b990:	40014000 	.word	0x40014000

0800b994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e042      	b.n	800ba54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7f7 ff50 	bl	8003888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2224      	movs	r2, #36	@ 0x24
 800b9ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b9fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 fcdb 	bl	800c3bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	691a      	ldr	r2, [r3, #16]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ba14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695a      	ldr	r2, [r3, #20]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ba24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68da      	ldr	r2, [r3, #12]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ba34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	60f8      	str	r0, [r7, #12]
 800ba64:	60b9      	str	r1, [r7, #8]
 800ba66:	4613      	mov	r3, r2
 800ba68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b20      	cmp	r3, #32
 800ba74:	d112      	bne.n	800ba9c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <HAL_UART_Receive_IT+0x26>
 800ba7c:	88fb      	ldrh	r3, [r7, #6]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e00b      	b.n	800ba9e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ba8c:	88fb      	ldrh	r3, [r7, #6]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	68b9      	ldr	r1, [r7, #8]
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f000 faba 	bl	800c00c <UART_Start_Receive_IT>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	e000      	b.n	800ba9e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ba9c:	2302      	movs	r3, #2
  }
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b0ba      	sub	sp, #232	@ 0xe8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bace:	2300      	movs	r3, #0
 800bad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bade:	f003 030f 	and.w	r3, r3, #15
 800bae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10f      	bne.n	800bb0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800baee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf2:	f003 0320 	and.w	r3, r3, #32
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d009      	beq.n	800bb0e <HAL_UART_IRQHandler+0x66>
 800bafa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bafe:	f003 0320 	and.w	r3, r3, #32
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fb99 	bl	800c23e <UART_Receive_IT>
      return;
 800bb0c:	e25b      	b.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bb0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f000 80de 	beq.w	800bcd4 <HAL_UART_IRQHandler+0x22c>
 800bb18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d106      	bne.n	800bb32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 80d1 	beq.w	800bcd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00b      	beq.n	800bb56 <HAL_UART_IRQHandler+0xae>
 800bb3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb4e:	f043 0201 	orr.w	r2, r3, #1
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb5a:	f003 0304 	and.w	r3, r3, #4
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00b      	beq.n	800bb7a <HAL_UART_IRQHandler+0xd2>
 800bb62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb66:	f003 0301 	and.w	r3, r3, #1
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb72:	f043 0202 	orr.w	r2, r3, #2
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb7e:	f003 0302 	and.w	r3, r3, #2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00b      	beq.n	800bb9e <HAL_UART_IRQHandler+0xf6>
 800bb86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb96:	f043 0204 	orr.w	r2, r3, #4
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d011      	beq.n	800bbce <HAL_UART_IRQHandler+0x126>
 800bbaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d105      	bne.n	800bbc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bbb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d005      	beq.n	800bbce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbc6:	f043 0208 	orr.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 81f2 	beq.w	800bfbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbdc:	f003 0320 	and.w	r3, r3, #32
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d008      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x14e>
 800bbe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fb24 	bl	800c23e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc00:	2b40      	cmp	r3, #64	@ 0x40
 800bc02:	bf0c      	ite	eq
 800bc04:	2301      	moveq	r3, #1
 800bc06:	2300      	movne	r3, #0
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc12:	f003 0308 	and.w	r3, r3, #8
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d103      	bne.n	800bc22 <HAL_UART_IRQHandler+0x17a>
 800bc1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d04f      	beq.n	800bcc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fa2c 	bl	800c080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc32:	2b40      	cmp	r3, #64	@ 0x40
 800bc34:	d141      	bne.n	800bcba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3314      	adds	r3, #20
 800bc3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bc4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3314      	adds	r3, #20
 800bc5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bc62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bc66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bc6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bc72:	e841 2300 	strex	r3, r2, [r1]
 800bc76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bc7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1d9      	bne.n	800bc36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d013      	beq.n	800bcb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc8e:	4a7e      	ldr	r2, [pc, #504]	@ (800be88 <HAL_UART_IRQHandler+0x3e0>)
 800bc90:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f8 ffa0 	bl	8004bdc <HAL_DMA_Abort_IT>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d016      	beq.n	800bcd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bcac:	4610      	mov	r0, r2
 800bcae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb0:	e00e      	b.n	800bcd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 f994 	bl	800bfe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb8:	e00a      	b.n	800bcd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 f990 	bl	800bfe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcc0:	e006      	b.n	800bcd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f98c 	bl	800bfe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bcce:	e175      	b.n	800bfbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd0:	bf00      	nop
    return;
 800bcd2:	e173      	b.n	800bfbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	f040 814f 	bne.w	800bf7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bce2:	f003 0310 	and.w	r3, r3, #16
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f000 8148 	beq.w	800bf7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bcec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcf0:	f003 0310 	and.w	r3, r3, #16
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8141 	beq.w	800bf7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60bb      	str	r3, [r7, #8]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	60bb      	str	r3, [r7, #8]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	60bb      	str	r3, [r7, #8]
 800bd0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd1a:	2b40      	cmp	r3, #64	@ 0x40
 800bd1c:	f040 80b6 	bne.w	800be8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 8145 	beq.w	800bfc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bd3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	f080 813e 	bcs.w	800bfc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bd4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd56:	f000 8088 	beq.w	800be6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	330c      	adds	r3, #12
 800bd60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bd68:	e853 3f00 	ldrex	r3, [r3]
 800bd6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bd70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	330c      	adds	r3, #12
 800bd82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bd8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1d9      	bne.n	800bd5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3314      	adds	r3, #20
 800bdac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdb0:	e853 3f00 	ldrex	r3, [r3]
 800bdb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bdb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdb8:	f023 0301 	bic.w	r3, r3, #1
 800bdbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	3314      	adds	r3, #20
 800bdc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bdca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bdce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bdd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1e1      	bne.n	800bda6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3314      	adds	r3, #20
 800bde8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdec:	e853 3f00 	ldrex	r3, [r3]
 800bdf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bdf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3314      	adds	r3, #20
 800be02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800be06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800be08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800be0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800be14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1e3      	bne.n	800bde2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2220      	movs	r2, #32
 800be1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	330c      	adds	r3, #12
 800be2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be32:	e853 3f00 	ldrex	r3, [r3]
 800be36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800be38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be3a:	f023 0310 	bic.w	r3, r3, #16
 800be3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	330c      	adds	r3, #12
 800be48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800be4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800be4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800be52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800be5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e3      	bne.n	800be28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be64:	4618      	mov	r0, r3
 800be66:	f7f8 fe49 	bl	8004afc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2202      	movs	r2, #2
 800be6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be78:	b29b      	uxth	r3, r3
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f8b7 	bl	800bff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be86:	e09b      	b.n	800bfc0 <HAL_UART_IRQHandler+0x518>
 800be88:	0800c147 	.word	0x0800c147
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be94:	b29b      	uxth	r3, r3
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f000 808e 	beq.w	800bfc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800beac:	2b00      	cmp	r3, #0
 800beae:	f000 8089 	beq.w	800bfc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	330c      	adds	r3, #12
 800beb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebc:	e853 3f00 	ldrex	r3, [r3]
 800bec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bec8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	330c      	adds	r3, #12
 800bed2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bed6:	647a      	str	r2, [r7, #68]	@ 0x44
 800bed8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bedc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bede:	e841 2300 	strex	r3, r2, [r1]
 800bee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1e3      	bne.n	800beb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3314      	adds	r3, #20
 800bef0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	e853 3f00 	ldrex	r3, [r3]
 800bef8:	623b      	str	r3, [r7, #32]
   return(result);
 800befa:	6a3b      	ldr	r3, [r7, #32]
 800befc:	f023 0301 	bic.w	r3, r3, #1
 800bf00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3314      	adds	r3, #20
 800bf0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bf0e:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf16:	e841 2300 	strex	r3, r2, [r1]
 800bf1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e3      	bne.n	800beea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	330c      	adds	r3, #12
 800bf36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	e853 3f00 	ldrex	r3, [r3]
 800bf3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f023 0310 	bic.w	r3, r3, #16
 800bf46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	330c      	adds	r3, #12
 800bf50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bf54:	61fa      	str	r2, [r7, #28]
 800bf56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	69b9      	ldr	r1, [r7, #24]
 800bf5a:	69fa      	ldr	r2, [r7, #28]
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	617b      	str	r3, [r7, #20]
   return(result);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e3      	bne.n	800bf30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f83d 	bl	800bff4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bf7a:	e023      	b.n	800bfc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d009      	beq.n	800bf9c <HAL_UART_IRQHandler+0x4f4>
 800bf88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d003      	beq.n	800bf9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 f8ea 	bl	800c16e <UART_Transmit_IT>
    return;
 800bf9a:	e014      	b.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00e      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
 800bfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d008      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f92a 	bl	800c20e <UART_EndTransmit_IT>
    return;
 800bfba:	e004      	b.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
    return;
 800bfbc:	bf00      	nop
 800bfbe:	e002      	b.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bfc0:	bf00      	nop
 800bfc2:	e000      	b.n	800bfc6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bfc4:	bf00      	nop
  }
}
 800bfc6:	37e8      	adds	r7, #232	@ 0xe8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bfe8:	bf00      	nop
 800bfea:	370c      	adds	r7, #12
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b083      	sub	sp, #12
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c000:	bf00      	nop
 800c002:	370c      	adds	r7, #12
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	88fa      	ldrh	r2, [r7, #6]
 800c024:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	88fa      	ldrh	r2, [r7, #6]
 800c02a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2222      	movs	r2, #34	@ 0x22
 800c036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d007      	beq.n	800c052 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68da      	ldr	r2, [r3, #12]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c050:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	695a      	ldr	r2, [r3, #20]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f042 0201 	orr.w	r2, r2, #1
 800c060:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68da      	ldr	r2, [r3, #12]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f042 0220 	orr.w	r2, r2, #32
 800c070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c080:	b480      	push	{r7}
 800c082:	b095      	sub	sp, #84	@ 0x54
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	330c      	adds	r3, #12
 800c08e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c09e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0a8:	643a      	str	r2, [r7, #64]	@ 0x40
 800c0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0b0:	e841 2300 	strex	r3, r2, [r1]
 800c0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1e5      	bne.n	800c088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	3314      	adds	r3, #20
 800c0c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	e853 3f00 	ldrex	r3, [r3]
 800c0ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	f023 0301 	bic.w	r3, r3, #1
 800c0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	3314      	adds	r3, #20
 800c0da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c0de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0e4:	e841 2300 	strex	r3, r2, [r1]
 800c0e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d1e5      	bne.n	800c0bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d119      	bne.n	800c12c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	330c      	adds	r3, #12
 800c0fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	60bb      	str	r3, [r7, #8]
   return(result);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f023 0310 	bic.w	r3, r3, #16
 800c10e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	330c      	adds	r3, #12
 800c116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c118:	61ba      	str	r2, [r7, #24]
 800c11a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11c:	6979      	ldr	r1, [r7, #20]
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	e841 2300 	strex	r3, r2, [r1]
 800c124:	613b      	str	r3, [r7, #16]
   return(result);
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1e5      	bne.n	800c0f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c13a:	bf00      	nop
 800c13c:	3754      	adds	r7, #84	@ 0x54
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff ff3d 	bl	800bfe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c166:	bf00      	nop
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c16e:	b480      	push	{r7}
 800c170:	b085      	sub	sp, #20
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b21      	cmp	r3, #33	@ 0x21
 800c180:	d13e      	bne.n	800c200 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c18a:	d114      	bne.n	800c1b6 <UART_Transmit_IT+0x48>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d110      	bne.n	800c1b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c1a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	1c9a      	adds	r2, r3, #2
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	621a      	str	r2, [r3, #32]
 800c1b4:	e008      	b.n	800c1c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	1c59      	adds	r1, r3, #1
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6211      	str	r1, [r2, #32]
 800c1c0:	781a      	ldrb	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d10f      	bne.n	800c1fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68da      	ldr	r2, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c1ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68da      	ldr	r2, [r3, #12]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e000      	b.n	800c202 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c200:	2302      	movs	r3, #2
  }
}
 800c202:	4618      	mov	r0, r3
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c224:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2220      	movs	r2, #32
 800c22a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7ff fecc 	bl	800bfcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b08c      	sub	sp, #48	@ 0x30
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b22      	cmp	r3, #34	@ 0x22
 800c250:	f040 80ae 	bne.w	800c3b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c25c:	d117      	bne.n	800c28e <UART_Receive_IT+0x50>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d113      	bne.n	800c28e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	b29b      	uxth	r3, r3
 800c278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c280:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c286:	1c9a      	adds	r2, r3, #2
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c28c:	e026      	b.n	800c2dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c292:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c294:	2300      	movs	r3, #0
 800c296:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2a0:	d007      	beq.n	800c2b2 <UART_Receive_IT+0x74>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10a      	bne.n	800c2c0 <UART_Receive_IT+0x82>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d106      	bne.n	800c2c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	b2da      	uxtb	r2, r3
 800c2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2bc:	701a      	strb	r2, [r3, #0]
 800c2be:	e008      	b.n	800c2d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d6:	1c5a      	adds	r2, r3, #1
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d15d      	bne.n	800c3ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68da      	ldr	r2, [r3, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 0220 	bic.w	r2, r2, #32
 800c2fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68da      	ldr	r2, [r3, #12]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c30e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	695a      	ldr	r2, [r3, #20]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 0201 	bic.w	r2, r2, #1
 800c31e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2220      	movs	r2, #32
 800c324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c332:	2b01      	cmp	r3, #1
 800c334:	d135      	bne.n	800c3a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	330c      	adds	r3, #12
 800c342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	613b      	str	r3, [r7, #16]
   return(result);
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	f023 0310 	bic.w	r3, r3, #16
 800c352:	627b      	str	r3, [r7, #36]	@ 0x24
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	330c      	adds	r3, #12
 800c35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c35c:	623a      	str	r2, [r7, #32]
 800c35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c360:	69f9      	ldr	r1, [r7, #28]
 800c362:	6a3a      	ldr	r2, [r7, #32]
 800c364:	e841 2300 	strex	r3, r2, [r1]
 800c368:	61bb      	str	r3, [r7, #24]
   return(result);
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1e5      	bne.n	800c33c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 0310 	and.w	r3, r3, #16
 800c37a:	2b10      	cmp	r3, #16
 800c37c:	d10a      	bne.n	800c394 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c37e:	2300      	movs	r3, #0
 800c380:	60fb      	str	r3, [r7, #12]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	60fb      	str	r3, [r7, #12]
 800c392:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fe2a 	bl	800bff4 <HAL_UARTEx_RxEventCallback>
 800c3a0:	e002      	b.n	800c3a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7f5 fc8a 	bl	8001cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	e002      	b.n	800c3b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e000      	b.n	800c3b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c3b0:	2302      	movs	r3, #2
  }
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3730      	adds	r7, #48	@ 0x30
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3c0:	b0c0      	sub	sp, #256	@ 0x100
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c3d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3d8:	68d9      	ldr	r1, [r3, #12]
 800c3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	ea40 0301 	orr.w	r3, r0, r1
 800c3e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3ea:	689a      	ldr	r2, [r3, #8]
 800c3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c400:	69db      	ldr	r3, [r3, #28]
 800c402:	4313      	orrs	r3, r2
 800c404:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c414:	f021 010c 	bic.w	r1, r1, #12
 800c418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c422:	430b      	orrs	r3, r1
 800c424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c436:	6999      	ldr	r1, [r3, #24]
 800c438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	ea40 0301 	orr.w	r3, r0, r1
 800c442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	4b8f      	ldr	r3, [pc, #572]	@ (800c688 <UART_SetConfig+0x2cc>)
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d005      	beq.n	800c45c <UART_SetConfig+0xa0>
 800c450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	4b8d      	ldr	r3, [pc, #564]	@ (800c68c <UART_SetConfig+0x2d0>)
 800c458:	429a      	cmp	r2, r3
 800c45a:	d104      	bne.n	800c466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c45c:	f7fe fac8 	bl	800a9f0 <HAL_RCC_GetPCLK2Freq>
 800c460:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c464:	e003      	b.n	800c46e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c466:	f7fe faaf 	bl	800a9c8 <HAL_RCC_GetPCLK1Freq>
 800c46a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c46e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c472:	69db      	ldr	r3, [r3, #28]
 800c474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c478:	f040 810c 	bne.w	800c694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c47c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c480:	2200      	movs	r2, #0
 800c482:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c486:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c48a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c48e:	4622      	mov	r2, r4
 800c490:	462b      	mov	r3, r5
 800c492:	1891      	adds	r1, r2, r2
 800c494:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c496:	415b      	adcs	r3, r3
 800c498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c49a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c49e:	4621      	mov	r1, r4
 800c4a0:	eb12 0801 	adds.w	r8, r2, r1
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	eb43 0901 	adc.w	r9, r3, r1
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c4b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c4ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c4be:	4690      	mov	r8, r2
 800c4c0:	4699      	mov	r9, r3
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	eb18 0303 	adds.w	r3, r8, r3
 800c4c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c4cc:	462b      	mov	r3, r5
 800c4ce:	eb49 0303 	adc.w	r3, r9, r3
 800c4d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c4e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c4e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	18db      	adds	r3, r3, r3
 800c4ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	eb42 0303 	adc.w	r3, r2, r3
 800c4f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c4fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c500:	f7f3 febe 	bl	8000280 <__aeabi_uldivmod>
 800c504:	4602      	mov	r2, r0
 800c506:	460b      	mov	r3, r1
 800c508:	4b61      	ldr	r3, [pc, #388]	@ (800c690 <UART_SetConfig+0x2d4>)
 800c50a:	fba3 2302 	umull	r2, r3, r3, r2
 800c50e:	095b      	lsrs	r3, r3, #5
 800c510:	011c      	lsls	r4, r3, #4
 800c512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c516:	2200      	movs	r2, #0
 800c518:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c51c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c524:	4642      	mov	r2, r8
 800c526:	464b      	mov	r3, r9
 800c528:	1891      	adds	r1, r2, r2
 800c52a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c52c:	415b      	adcs	r3, r3
 800c52e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c534:	4641      	mov	r1, r8
 800c536:	eb12 0a01 	adds.w	sl, r2, r1
 800c53a:	4649      	mov	r1, r9
 800c53c:	eb43 0b01 	adc.w	fp, r3, r1
 800c540:	f04f 0200 	mov.w	r2, #0
 800c544:	f04f 0300 	mov.w	r3, #0
 800c548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c54c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c554:	4692      	mov	sl, r2
 800c556:	469b      	mov	fp, r3
 800c558:	4643      	mov	r3, r8
 800c55a:	eb1a 0303 	adds.w	r3, sl, r3
 800c55e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c562:	464b      	mov	r3, r9
 800c564:	eb4b 0303 	adc.w	r3, fp, r3
 800c568:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	2200      	movs	r2, #0
 800c574:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c578:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c57c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c580:	460b      	mov	r3, r1
 800c582:	18db      	adds	r3, r3, r3
 800c584:	643b      	str	r3, [r7, #64]	@ 0x40
 800c586:	4613      	mov	r3, r2
 800c588:	eb42 0303 	adc.w	r3, r2, r3
 800c58c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c58e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c596:	f7f3 fe73 	bl	8000280 <__aeabi_uldivmod>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4611      	mov	r1, r2
 800c5a0:	4b3b      	ldr	r3, [pc, #236]	@ (800c690 <UART_SetConfig+0x2d4>)
 800c5a2:	fba3 2301 	umull	r2, r3, r3, r1
 800c5a6:	095b      	lsrs	r3, r3, #5
 800c5a8:	2264      	movs	r2, #100	@ 0x64
 800c5aa:	fb02 f303 	mul.w	r3, r2, r3
 800c5ae:	1acb      	subs	r3, r1, r3
 800c5b0:	00db      	lsls	r3, r3, #3
 800c5b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c5b6:	4b36      	ldr	r3, [pc, #216]	@ (800c690 <UART_SetConfig+0x2d4>)
 800c5b8:	fba3 2302 	umull	r2, r3, r3, r2
 800c5bc:	095b      	lsrs	r3, r3, #5
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c5c4:	441c      	add	r4, r3
 800c5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c5d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c5d8:	4642      	mov	r2, r8
 800c5da:	464b      	mov	r3, r9
 800c5dc:	1891      	adds	r1, r2, r2
 800c5de:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c5e0:	415b      	adcs	r3, r3
 800c5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	1851      	adds	r1, r2, r1
 800c5ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	414b      	adcs	r3, r1
 800c5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	f04f 0300 	mov.w	r3, #0
 800c5fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c600:	4659      	mov	r1, fp
 800c602:	00cb      	lsls	r3, r1, #3
 800c604:	4651      	mov	r1, sl
 800c606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c60a:	4651      	mov	r1, sl
 800c60c:	00ca      	lsls	r2, r1, #3
 800c60e:	4610      	mov	r0, r2
 800c610:	4619      	mov	r1, r3
 800c612:	4603      	mov	r3, r0
 800c614:	4642      	mov	r2, r8
 800c616:	189b      	adds	r3, r3, r2
 800c618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c61c:	464b      	mov	r3, r9
 800c61e:	460a      	mov	r2, r1
 800c620:	eb42 0303 	adc.w	r3, r2, r3
 800c624:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c634:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c63c:	460b      	mov	r3, r1
 800c63e:	18db      	adds	r3, r3, r3
 800c640:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c642:	4613      	mov	r3, r2
 800c644:	eb42 0303 	adc.w	r3, r2, r3
 800c648:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c64a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c64e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c652:	f7f3 fe15 	bl	8000280 <__aeabi_uldivmod>
 800c656:	4602      	mov	r2, r0
 800c658:	460b      	mov	r3, r1
 800c65a:	4b0d      	ldr	r3, [pc, #52]	@ (800c690 <UART_SetConfig+0x2d4>)
 800c65c:	fba3 1302 	umull	r1, r3, r3, r2
 800c660:	095b      	lsrs	r3, r3, #5
 800c662:	2164      	movs	r1, #100	@ 0x64
 800c664:	fb01 f303 	mul.w	r3, r1, r3
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	00db      	lsls	r3, r3, #3
 800c66c:	3332      	adds	r3, #50	@ 0x32
 800c66e:	4a08      	ldr	r2, [pc, #32]	@ (800c690 <UART_SetConfig+0x2d4>)
 800c670:	fba2 2303 	umull	r2, r3, r2, r3
 800c674:	095b      	lsrs	r3, r3, #5
 800c676:	f003 0207 	and.w	r2, r3, #7
 800c67a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4422      	add	r2, r4
 800c682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c684:	e106      	b.n	800c894 <UART_SetConfig+0x4d8>
 800c686:	bf00      	nop
 800c688:	40011000 	.word	0x40011000
 800c68c:	40011400 	.word	0x40011400
 800c690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c698:	2200      	movs	r2, #0
 800c69a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c69e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c6a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c6a6:	4642      	mov	r2, r8
 800c6a8:	464b      	mov	r3, r9
 800c6aa:	1891      	adds	r1, r2, r2
 800c6ac:	6239      	str	r1, [r7, #32]
 800c6ae:	415b      	adcs	r3, r3
 800c6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c6b6:	4641      	mov	r1, r8
 800c6b8:	1854      	adds	r4, r2, r1
 800c6ba:	4649      	mov	r1, r9
 800c6bc:	eb43 0501 	adc.w	r5, r3, r1
 800c6c0:	f04f 0200 	mov.w	r2, #0
 800c6c4:	f04f 0300 	mov.w	r3, #0
 800c6c8:	00eb      	lsls	r3, r5, #3
 800c6ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c6ce:	00e2      	lsls	r2, r4, #3
 800c6d0:	4614      	mov	r4, r2
 800c6d2:	461d      	mov	r5, r3
 800c6d4:	4643      	mov	r3, r8
 800c6d6:	18e3      	adds	r3, r4, r3
 800c6d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c6dc:	464b      	mov	r3, r9
 800c6de:	eb45 0303 	adc.w	r3, r5, r3
 800c6e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c6f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c6f6:	f04f 0200 	mov.w	r2, #0
 800c6fa:	f04f 0300 	mov.w	r3, #0
 800c6fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c702:	4629      	mov	r1, r5
 800c704:	008b      	lsls	r3, r1, #2
 800c706:	4621      	mov	r1, r4
 800c708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c70c:	4621      	mov	r1, r4
 800c70e:	008a      	lsls	r2, r1, #2
 800c710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c714:	f7f3 fdb4 	bl	8000280 <__aeabi_uldivmod>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4b60      	ldr	r3, [pc, #384]	@ (800c8a0 <UART_SetConfig+0x4e4>)
 800c71e:	fba3 2302 	umull	r2, r3, r3, r2
 800c722:	095b      	lsrs	r3, r3, #5
 800c724:	011c      	lsls	r4, r3, #4
 800c726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c730:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c738:	4642      	mov	r2, r8
 800c73a:	464b      	mov	r3, r9
 800c73c:	1891      	adds	r1, r2, r2
 800c73e:	61b9      	str	r1, [r7, #24]
 800c740:	415b      	adcs	r3, r3
 800c742:	61fb      	str	r3, [r7, #28]
 800c744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c748:	4641      	mov	r1, r8
 800c74a:	1851      	adds	r1, r2, r1
 800c74c:	6139      	str	r1, [r7, #16]
 800c74e:	4649      	mov	r1, r9
 800c750:	414b      	adcs	r3, r1
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	f04f 0200 	mov.w	r2, #0
 800c758:	f04f 0300 	mov.w	r3, #0
 800c75c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c760:	4659      	mov	r1, fp
 800c762:	00cb      	lsls	r3, r1, #3
 800c764:	4651      	mov	r1, sl
 800c766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c76a:	4651      	mov	r1, sl
 800c76c:	00ca      	lsls	r2, r1, #3
 800c76e:	4610      	mov	r0, r2
 800c770:	4619      	mov	r1, r3
 800c772:	4603      	mov	r3, r0
 800c774:	4642      	mov	r2, r8
 800c776:	189b      	adds	r3, r3, r2
 800c778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c77c:	464b      	mov	r3, r9
 800c77e:	460a      	mov	r2, r1
 800c780:	eb42 0303 	adc.w	r3, r2, r3
 800c784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c792:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c794:	f04f 0200 	mov.w	r2, #0
 800c798:	f04f 0300 	mov.w	r3, #0
 800c79c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	008b      	lsls	r3, r1, #2
 800c7a4:	4641      	mov	r1, r8
 800c7a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c7aa:	4641      	mov	r1, r8
 800c7ac:	008a      	lsls	r2, r1, #2
 800c7ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c7b2:	f7f3 fd65 	bl	8000280 <__aeabi_uldivmod>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4611      	mov	r1, r2
 800c7bc:	4b38      	ldr	r3, [pc, #224]	@ (800c8a0 <UART_SetConfig+0x4e4>)
 800c7be:	fba3 2301 	umull	r2, r3, r3, r1
 800c7c2:	095b      	lsrs	r3, r3, #5
 800c7c4:	2264      	movs	r2, #100	@ 0x64
 800c7c6:	fb02 f303 	mul.w	r3, r2, r3
 800c7ca:	1acb      	subs	r3, r1, r3
 800c7cc:	011b      	lsls	r3, r3, #4
 800c7ce:	3332      	adds	r3, #50	@ 0x32
 800c7d0:	4a33      	ldr	r2, [pc, #204]	@ (800c8a0 <UART_SetConfig+0x4e4>)
 800c7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7d6:	095b      	lsrs	r3, r3, #5
 800c7d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c7dc:	441c      	add	r4, r3
 800c7de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800c7e6:	677a      	str	r2, [r7, #116]	@ 0x74
 800c7e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c7ec:	4642      	mov	r2, r8
 800c7ee:	464b      	mov	r3, r9
 800c7f0:	1891      	adds	r1, r2, r2
 800c7f2:	60b9      	str	r1, [r7, #8]
 800c7f4:	415b      	adcs	r3, r3
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7fc:	4641      	mov	r1, r8
 800c7fe:	1851      	adds	r1, r2, r1
 800c800:	6039      	str	r1, [r7, #0]
 800c802:	4649      	mov	r1, r9
 800c804:	414b      	adcs	r3, r1
 800c806:	607b      	str	r3, [r7, #4]
 800c808:	f04f 0200 	mov.w	r2, #0
 800c80c:	f04f 0300 	mov.w	r3, #0
 800c810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c814:	4659      	mov	r1, fp
 800c816:	00cb      	lsls	r3, r1, #3
 800c818:	4651      	mov	r1, sl
 800c81a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c81e:	4651      	mov	r1, sl
 800c820:	00ca      	lsls	r2, r1, #3
 800c822:	4610      	mov	r0, r2
 800c824:	4619      	mov	r1, r3
 800c826:	4603      	mov	r3, r0
 800c828:	4642      	mov	r2, r8
 800c82a:	189b      	adds	r3, r3, r2
 800c82c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c82e:	464b      	mov	r3, r9
 800c830:	460a      	mov	r2, r1
 800c832:	eb42 0303 	adc.w	r3, r2, r3
 800c836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	663b      	str	r3, [r7, #96]	@ 0x60
 800c842:	667a      	str	r2, [r7, #100]	@ 0x64
 800c844:	f04f 0200 	mov.w	r2, #0
 800c848:	f04f 0300 	mov.w	r3, #0
 800c84c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c850:	4649      	mov	r1, r9
 800c852:	008b      	lsls	r3, r1, #2
 800c854:	4641      	mov	r1, r8
 800c856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c85a:	4641      	mov	r1, r8
 800c85c:	008a      	lsls	r2, r1, #2
 800c85e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c862:	f7f3 fd0d 	bl	8000280 <__aeabi_uldivmod>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a0 <UART_SetConfig+0x4e4>)
 800c86c:	fba3 1302 	umull	r1, r3, r3, r2
 800c870:	095b      	lsrs	r3, r3, #5
 800c872:	2164      	movs	r1, #100	@ 0x64
 800c874:	fb01 f303 	mul.w	r3, r1, r3
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	3332      	adds	r3, #50	@ 0x32
 800c87e:	4a08      	ldr	r2, [pc, #32]	@ (800c8a0 <UART_SetConfig+0x4e4>)
 800c880:	fba2 2303 	umull	r2, r3, r2, r3
 800c884:	095b      	lsrs	r3, r3, #5
 800c886:	f003 020f 	and.w	r2, r3, #15
 800c88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4422      	add	r2, r4
 800c892:	609a      	str	r2, [r3, #8]
}
 800c894:	bf00      	nop
 800c896:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c89a:	46bd      	mov	sp, r7
 800c89c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8a0:	51eb851f 	.word	0x51eb851f

0800c8a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	f107 001c 	add.w	r0, r7, #28
 800c8b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d123      	bne.n	800c906 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c8d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d105      	bne.n	800c8fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 fae8 	bl	800ded0 <USB_CoreReset>
 800c900:	4603      	mov	r3, r0
 800c902:	73fb      	strb	r3, [r7, #15]
 800c904:	e01b      	b.n	800c93e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f001 fadc 	bl	800ded0 <USB_CoreReset>
 800c918:	4603      	mov	r3, r0
 800c91a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c91c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c920:	2b00      	cmp	r3, #0
 800c922:	d106      	bne.n	800c932 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c928:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	639a      	str	r2, [r3, #56]	@ 0x38
 800c930:	e005      	b.n	800c93e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c936:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c93e:	7fbb      	ldrb	r3, [r7, #30]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d10b      	bne.n	800c95c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	f043 0206 	orr.w	r2, r3, #6
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	f043 0220 	orr.w	r2, r3, #32
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3710      	adds	r7, #16
 800c962:	46bd      	mov	sp, r7
 800c964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c968:	b004      	add	sp, #16
 800c96a:	4770      	bx	lr

0800c96c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b087      	sub	sp, #28
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c97a:	79fb      	ldrb	r3, [r7, #7]
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d165      	bne.n	800ca4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	4a41      	ldr	r2, [pc, #260]	@ (800ca88 <USB_SetTurnaroundTime+0x11c>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d906      	bls.n	800c996 <USB_SetTurnaroundTime+0x2a>
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	4a40      	ldr	r2, [pc, #256]	@ (800ca8c <USB_SetTurnaroundTime+0x120>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d202      	bcs.n	800c996 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c990:	230f      	movs	r3, #15
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	e062      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	4a3c      	ldr	r2, [pc, #240]	@ (800ca8c <USB_SetTurnaroundTime+0x120>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d306      	bcc.n	800c9ac <USB_SetTurnaroundTime+0x40>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	4a3b      	ldr	r2, [pc, #236]	@ (800ca90 <USB_SetTurnaroundTime+0x124>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d202      	bcs.n	800c9ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c9a6:	230e      	movs	r3, #14
 800c9a8:	617b      	str	r3, [r7, #20]
 800c9aa:	e057      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	4a38      	ldr	r2, [pc, #224]	@ (800ca90 <USB_SetTurnaroundTime+0x124>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d306      	bcc.n	800c9c2 <USB_SetTurnaroundTime+0x56>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	4a37      	ldr	r2, [pc, #220]	@ (800ca94 <USB_SetTurnaroundTime+0x128>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d202      	bcs.n	800c9c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c9bc:	230d      	movs	r3, #13
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	e04c      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	4a33      	ldr	r2, [pc, #204]	@ (800ca94 <USB_SetTurnaroundTime+0x128>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d306      	bcc.n	800c9d8 <USB_SetTurnaroundTime+0x6c>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	4a32      	ldr	r2, [pc, #200]	@ (800ca98 <USB_SetTurnaroundTime+0x12c>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d802      	bhi.n	800c9d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c9d2:	230c      	movs	r3, #12
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	e041      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	4a2f      	ldr	r2, [pc, #188]	@ (800ca98 <USB_SetTurnaroundTime+0x12c>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d906      	bls.n	800c9ee <USB_SetTurnaroundTime+0x82>
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	4a2e      	ldr	r2, [pc, #184]	@ (800ca9c <USB_SetTurnaroundTime+0x130>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d802      	bhi.n	800c9ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c9e8:	230b      	movs	r3, #11
 800c9ea:	617b      	str	r3, [r7, #20]
 800c9ec:	e036      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	4a2a      	ldr	r2, [pc, #168]	@ (800ca9c <USB_SetTurnaroundTime+0x130>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d906      	bls.n	800ca04 <USB_SetTurnaroundTime+0x98>
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	4a29      	ldr	r2, [pc, #164]	@ (800caa0 <USB_SetTurnaroundTime+0x134>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d802      	bhi.n	800ca04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c9fe:	230a      	movs	r3, #10
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e02b      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	4a26      	ldr	r2, [pc, #152]	@ (800caa0 <USB_SetTurnaroundTime+0x134>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d906      	bls.n	800ca1a <USB_SetTurnaroundTime+0xae>
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	4a25      	ldr	r2, [pc, #148]	@ (800caa4 <USB_SetTurnaroundTime+0x138>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d202      	bcs.n	800ca1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ca14:	2309      	movs	r3, #9
 800ca16:	617b      	str	r3, [r7, #20]
 800ca18:	e020      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	4a21      	ldr	r2, [pc, #132]	@ (800caa4 <USB_SetTurnaroundTime+0x138>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d306      	bcc.n	800ca30 <USB_SetTurnaroundTime+0xc4>
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	4a20      	ldr	r2, [pc, #128]	@ (800caa8 <USB_SetTurnaroundTime+0x13c>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d802      	bhi.n	800ca30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ca2a:	2308      	movs	r3, #8
 800ca2c:	617b      	str	r3, [r7, #20]
 800ca2e:	e015      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	4a1d      	ldr	r2, [pc, #116]	@ (800caa8 <USB_SetTurnaroundTime+0x13c>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d906      	bls.n	800ca46 <USB_SetTurnaroundTime+0xda>
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	4a1c      	ldr	r2, [pc, #112]	@ (800caac <USB_SetTurnaroundTime+0x140>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d202      	bcs.n	800ca46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ca40:	2307      	movs	r3, #7
 800ca42:	617b      	str	r3, [r7, #20]
 800ca44:	e00a      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ca46:	2306      	movs	r3, #6
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e007      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ca4c:	79fb      	ldrb	r3, [r7, #7]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d102      	bne.n	800ca58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ca52:	2309      	movs	r3, #9
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	e001      	b.n	800ca5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ca58:	2309      	movs	r3, #9
 800ca5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	68da      	ldr	r2, [r3, #12]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	029b      	lsls	r3, r3, #10
 800ca70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ca74:	431a      	orrs	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	371c      	adds	r7, #28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	00d8acbf 	.word	0x00d8acbf
 800ca8c:	00e4e1c0 	.word	0x00e4e1c0
 800ca90:	00f42400 	.word	0x00f42400
 800ca94:	01067380 	.word	0x01067380
 800ca98:	011a499f 	.word	0x011a499f
 800ca9c:	01312cff 	.word	0x01312cff
 800caa0:	014ca43f 	.word	0x014ca43f
 800caa4:	016e3600 	.word	0x016e3600
 800caa8:	01a6ab1f 	.word	0x01a6ab1f
 800caac:	01e84800 	.word	0x01e84800

0800cab0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f043 0201 	orr.w	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	370c      	adds	r7, #12
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cad2:	b480      	push	{r7}
 800cad4:	b083      	sub	sp, #12
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f023 0201 	bic.w	r2, r3, #1
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cb00:	2300      	movs	r3, #0
 800cb02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb10:	78fb      	ldrb	r3, [r7, #3]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d115      	bne.n	800cb42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cb22:	200a      	movs	r0, #10
 800cb24:	f7f7 f892 	bl	8003c4c <HAL_Delay>
      ms += 10U;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	330a      	adds	r3, #10
 800cb2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 f93f 	bl	800ddb2 <USB_GetMode>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d01e      	beq.n	800cb78 <USB_SetCurrentMode+0x84>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2bc7      	cmp	r3, #199	@ 0xc7
 800cb3e:	d9f0      	bls.n	800cb22 <USB_SetCurrentMode+0x2e>
 800cb40:	e01a      	b.n	800cb78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb42:	78fb      	ldrb	r3, [r7, #3]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d115      	bne.n	800cb74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cb54:	200a      	movs	r0, #10
 800cb56:	f7f7 f879 	bl	8003c4c <HAL_Delay>
      ms += 10U;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	330a      	adds	r3, #10
 800cb5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 f926 	bl	800ddb2 <USB_GetMode>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d005      	beq.n	800cb78 <USB_SetCurrentMode+0x84>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2bc7      	cmp	r3, #199	@ 0xc7
 800cb70:	d9f0      	bls.n	800cb54 <USB_SetCurrentMode+0x60>
 800cb72:	e001      	b.n	800cb78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e005      	b.n	800cb84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2bc8      	cmp	r3, #200	@ 0xc8
 800cb7c:	d101      	bne.n	800cb82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e000      	b.n	800cb84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b086      	sub	sp, #24
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
 800cb96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cb9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cba6:	2300      	movs	r3, #0
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	e009      	b.n	800cbc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3340      	adds	r3, #64	@ 0x40
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	613b      	str	r3, [r7, #16]
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	2b0e      	cmp	r3, #14
 800cbc4:	d9f2      	bls.n	800cbac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cbc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d11c      	bne.n	800cc08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cbdc:	f043 0302 	orr.w	r3, r3, #2
 800cbe0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbe6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbfe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	639a      	str	r2, [r3, #56]	@ 0x38
 800cc06:	e00b      	b.n	800cc20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc0c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc18:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cc26:	461a      	mov	r2, r3
 800cc28:	2300      	movs	r3, #0
 800cc2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d10d      	bne.n	800cc50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d104      	bne.n	800cc46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc3c:	2100      	movs	r1, #0
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f968 	bl	800cf14 <USB_SetDevSpeed>
 800cc44:	e008      	b.n	800cc58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc46:	2101      	movs	r1, #1
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f963 	bl	800cf14 <USB_SetDevSpeed>
 800cc4e:	e003      	b.n	800cc58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc50:	2103      	movs	r1, #3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f95e 	bl	800cf14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc58:	2110      	movs	r1, #16
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f8fa 	bl	800ce54 <USB_FlushTxFifo>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f924 	bl	800ceb8 <USB_FlushRxFifo>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc80:	461a      	mov	r2, r3
 800cc82:	2300      	movs	r3, #0
 800cc84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	2300      	movs	r3, #0
 800cc90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc98:	461a      	mov	r2, r3
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc9e:	2300      	movs	r3, #0
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	e043      	b.n	800cd2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	015a      	lsls	r2, r3, #5
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	4413      	add	r3, r2
 800ccac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ccba:	d118      	bne.n	800ccee <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	015a      	lsls	r2, r3, #5
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4413      	add	r3, r2
 800ccca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccce:	461a      	mov	r2, r3
 800ccd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ccd4:	6013      	str	r3, [r2, #0]
 800ccd6:	e013      	b.n	800cd00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	015a      	lsls	r2, r3, #5
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4413      	add	r3, r2
 800cce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cce4:	461a      	mov	r2, r3
 800cce6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	e008      	b.n	800cd00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd0c:	461a      	mov	r2, r3
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	015a      	lsls	r2, r3, #5
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	4413      	add	r3, r2
 800cd1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cd1e:	461a      	mov	r2, r3
 800cd20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cd24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	613b      	str	r3, [r7, #16]
 800cd2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cd30:	461a      	mov	r2, r3
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d3b5      	bcc.n	800cca4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd38:	2300      	movs	r3, #0
 800cd3a:	613b      	str	r3, [r7, #16]
 800cd3c:	e043      	b.n	800cdc6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	015a      	lsls	r2, r3, #5
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	4413      	add	r3, r2
 800cd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cd50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cd54:	d118      	bne.n	800cd88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd68:	461a      	mov	r2, r3
 800cd6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cd6e:	6013      	str	r3, [r2, #0]
 800cd70:	e013      	b.n	800cd9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	015a      	lsls	r2, r3, #5
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	4413      	add	r3, r2
 800cd7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd7e:	461a      	mov	r2, r3
 800cd80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	e008      	b.n	800cd9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	015a      	lsls	r2, r3, #5
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd94:	461a      	mov	r2, r3
 800cd96:	2300      	movs	r3, #0
 800cd98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	015a      	lsls	r2, r3, #5
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	4413      	add	r3, r2
 800cda2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cda6:	461a      	mov	r2, r3
 800cda8:	2300      	movs	r3, #0
 800cdaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	015a      	lsls	r2, r3, #5
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cdb8:	461a      	mov	r2, r3
 800cdba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cdbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	613b      	str	r3, [r7, #16]
 800cdc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cdca:	461a      	mov	r2, r3
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d3b5      	bcc.n	800cd3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdd8:	691b      	ldr	r3, [r3, #16]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cde0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cde4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800cdf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cdf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d105      	bne.n	800ce08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	699b      	ldr	r3, [r3, #24]
 800ce00:	f043 0210 	orr.w	r2, r3, #16
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	699a      	ldr	r2, [r3, #24]
 800ce0c:	4b10      	ldr	r3, [pc, #64]	@ (800ce50 <USB_DevInit+0x2c4>)
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ce14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d005      	beq.n	800ce28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	f043 0208 	orr.w	r2, r3, #8
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ce28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d107      	bne.n	800ce40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ce38:	f043 0304 	orr.w	r3, r3, #4
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce4c:	b004      	add	sp, #16
 800ce4e:	4770      	bx	lr
 800ce50:	803c3800 	.word	0x803c3800

0800ce54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce6e:	d901      	bls.n	800ce74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e01b      	b.n	800ceac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	daf2      	bge.n	800ce62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	019b      	lsls	r3, r3, #6
 800ce84:	f043 0220 	orr.w	r2, r3, #32
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce98:	d901      	bls.n	800ce9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e006      	b.n	800ceac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	2b20      	cmp	r3, #32
 800cea8:	d0f0      	beq.n	800ce8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3714      	adds	r7, #20
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cec0:	2300      	movs	r3, #0
 800cec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3301      	adds	r3, #1
 800cec8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ced0:	d901      	bls.n	800ced6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ced2:	2303      	movs	r3, #3
 800ced4:	e018      	b.n	800cf08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	daf2      	bge.n	800cec4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2210      	movs	r2, #16
 800cee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3301      	adds	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cef4:	d901      	bls.n	800cefa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cef6:	2303      	movs	r3, #3
 800cef8:	e006      	b.n	800cf08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	f003 0310 	and.w	r3, r3, #16
 800cf02:	2b10      	cmp	r3, #16
 800cf04:	d0f0      	beq.n	800cee8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	78fb      	ldrb	r3, [r7, #3]
 800cf2e:	68f9      	ldr	r1, [r7, #12]
 800cf30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf34:	4313      	orrs	r3, r2
 800cf36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf46:	b480      	push	{r7}
 800cf48:	b087      	sub	sp, #28
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	f003 0306 	and.w	r3, r3, #6
 800cf5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d102      	bne.n	800cf6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cf66:	2300      	movs	r3, #0
 800cf68:	75fb      	strb	r3, [r7, #23]
 800cf6a:	e00a      	b.n	800cf82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d002      	beq.n	800cf78 <USB_GetDevSpeed+0x32>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2b06      	cmp	r3, #6
 800cf76:	d102      	bne.n	800cf7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cf78:	2302      	movs	r3, #2
 800cf7a:	75fb      	strb	r3, [r7, #23]
 800cf7c:	e001      	b.n	800cf82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cf7e:	230f      	movs	r3, #15
 800cf80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	371c      	adds	r7, #28
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	785b      	ldrb	r3, [r3, #1]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d13a      	bne.n	800d022 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfb2:	69da      	ldr	r2, [r3, #28]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	f003 030f 	and.w	r3, r3, #15
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	68f9      	ldr	r1, [r7, #12]
 800cfc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	015a      	lsls	r2, r3, #5
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d155      	bne.n	800d090 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	015a      	lsls	r2, r3, #5
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	791b      	ldrb	r3, [r3, #4]
 800cffe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d000:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	059b      	lsls	r3, r3, #22
 800d006:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d008:	4313      	orrs	r3, r2
 800d00a:	68ba      	ldr	r2, [r7, #8]
 800d00c:	0151      	lsls	r1, r2, #5
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	440a      	add	r2, r1
 800d012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	e036      	b.n	800d090 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d028:	69da      	ldr	r2, [r3, #28]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	f003 030f 	and.w	r3, r3, #15
 800d032:	2101      	movs	r1, #1
 800d034:	fa01 f303 	lsl.w	r3, r1, r3
 800d038:	041b      	lsls	r3, r3, #16
 800d03a:	68f9      	ldr	r1, [r7, #12]
 800d03c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d040:	4313      	orrs	r3, r2
 800d042:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4413      	add	r3, r2
 800d04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d11a      	bne.n	800d090 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	015a      	lsls	r2, r3, #5
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	4413      	add	r3, r2
 800d062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	791b      	ldrb	r3, [r3, #4]
 800d074:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d076:	430b      	orrs	r3, r1
 800d078:	4313      	orrs	r3, r2
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	0151      	lsls	r1, r2, #5
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	440a      	add	r2, r1
 800d082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d08a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d08e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
	...

0800d0a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	785b      	ldrb	r3, [r3, #1]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d161      	bne.n	800d180 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	015a      	lsls	r2, r3, #5
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d0d2:	d11f      	bne.n	800d114 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	0151      	lsls	r1, r2, #5
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	440a      	add	r2, r1
 800d0ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d0ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d0f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	0151      	lsls	r1, r2, #5
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	440a      	add	r2, r1
 800d10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d10e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d11a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 030f 	and.w	r3, r3, #15
 800d124:	2101      	movs	r1, #1
 800d126:	fa01 f303 	lsl.w	r3, r1, r3
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	43db      	mvns	r3, r3
 800d12e:	68f9      	ldr	r1, [r7, #12]
 800d130:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d134:	4013      	ands	r3, r2
 800d136:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d13e:	69da      	ldr	r2, [r3, #28]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	2101      	movs	r1, #1
 800d14a:	fa01 f303 	lsl.w	r3, r1, r3
 800d14e:	b29b      	uxth	r3, r3
 800d150:	43db      	mvns	r3, r3
 800d152:	68f9      	ldr	r1, [r7, #12]
 800d154:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d158:	4013      	ands	r3, r2
 800d15a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	015a      	lsls	r2, r3, #5
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	4413      	add	r3, r2
 800d164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	0159      	lsls	r1, r3, #5
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	440b      	add	r3, r1
 800d172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d176:	4619      	mov	r1, r3
 800d178:	4b35      	ldr	r3, [pc, #212]	@ (800d250 <USB_DeactivateEndpoint+0x1b0>)
 800d17a:	4013      	ands	r3, r2
 800d17c:	600b      	str	r3, [r1, #0]
 800d17e:	e060      	b.n	800d242 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	015a      	lsls	r2, r3, #5
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d192:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d196:	d11f      	bne.n	800d1d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d1b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	0151      	lsls	r1, r2, #5
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	440a      	add	r2, r1
 800d1ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d1d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d1d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	f003 030f 	and.w	r3, r3, #15
 800d1e8:	2101      	movs	r1, #1
 800d1ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ee:	041b      	lsls	r3, r3, #16
 800d1f0:	43db      	mvns	r3, r3
 800d1f2:	68f9      	ldr	r1, [r7, #12]
 800d1f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d202:	69da      	ldr	r2, [r3, #28]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	f003 030f 	and.w	r3, r3, #15
 800d20c:	2101      	movs	r1, #1
 800d20e:	fa01 f303 	lsl.w	r3, r1, r3
 800d212:	041b      	lsls	r3, r3, #16
 800d214:	43db      	mvns	r3, r3
 800d216:	68f9      	ldr	r1, [r7, #12]
 800d218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d21c:	4013      	ands	r3, r2
 800d21e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	4413      	add	r3, r2
 800d228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	0159      	lsls	r1, r3, #5
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	440b      	add	r3, r1
 800d236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d23a:	4619      	mov	r1, r3
 800d23c:	4b05      	ldr	r3, [pc, #20]	@ (800d254 <USB_DeactivateEndpoint+0x1b4>)
 800d23e:	4013      	ands	r3, r2
 800d240:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	ec337800 	.word	0xec337800
 800d254:	eff37800 	.word	0xeff37800

0800d258 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08a      	sub	sp, #40	@ 0x28
 800d25c:	af02      	add	r7, sp, #8
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	4613      	mov	r3, r2
 800d264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	785b      	ldrb	r3, [r3, #1]
 800d274:	2b01      	cmp	r3, #1
 800d276:	f040 817f 	bne.w	800d578 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d132      	bne.n	800d2e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	69ba      	ldr	r2, [r7, #24]
 800d292:	0151      	lsls	r1, r2, #5
 800d294:	69fa      	ldr	r2, [r7, #28]
 800d296:	440a      	add	r2, r1
 800d298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d29c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d2a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d2a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	0151      	lsls	r1, r2, #5
 800d2b8:	69fa      	ldr	r2, [r7, #28]
 800d2ba:	440a      	add	r2, r1
 800d2bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	015a      	lsls	r2, r3, #5
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	69ba      	ldr	r2, [r7, #24]
 800d2d6:	0151      	lsls	r1, r2, #5
 800d2d8:	69fa      	ldr	r2, [r7, #28]
 800d2da:	440a      	add	r2, r1
 800d2dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2e0:	0cdb      	lsrs	r3, r3, #19
 800d2e2:	04db      	lsls	r3, r3, #19
 800d2e4:	6113      	str	r3, [r2, #16]
 800d2e6:	e097      	b.n	800d418 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	69ba      	ldr	r2, [r7, #24]
 800d2f8:	0151      	lsls	r1, r2, #5
 800d2fa:	69fa      	ldr	r2, [r7, #28]
 800d2fc:	440a      	add	r2, r1
 800d2fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d302:	0cdb      	lsrs	r3, r3, #19
 800d304:	04db      	lsls	r3, r3, #19
 800d306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d308:	69bb      	ldr	r3, [r7, #24]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	69ba      	ldr	r2, [r7, #24]
 800d318:	0151      	lsls	r1, r2, #5
 800d31a:	69fa      	ldr	r2, [r7, #28]
 800d31c:	440a      	add	r2, r1
 800d31e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d322:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d326:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d32a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800d32c:	69bb      	ldr	r3, [r7, #24]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d11a      	bne.n	800d368 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	691a      	ldr	r2, [r3, #16]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d903      	bls.n	800d346 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	689a      	ldr	r2, [r3, #8]
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	015a      	lsls	r2, r3, #5
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	4413      	add	r3, r2
 800d34e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	69ba      	ldr	r2, [r7, #24]
 800d356:	0151      	lsls	r1, r2, #5
 800d358:	69fa      	ldr	r2, [r7, #28]
 800d35a:	440a      	add	r2, r1
 800d35c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d364:	6113      	str	r3, [r2, #16]
 800d366:	e044      	b.n	800d3f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	691a      	ldr	r2, [r3, #16]
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	4413      	add	r3, r2
 800d372:	1e5a      	subs	r2, r3, #1
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	fbb2 f3f3 	udiv	r3, r2, r3
 800d37c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	4413      	add	r3, r2
 800d386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d38a:	691a      	ldr	r2, [r3, #16]
 800d38c:	8afb      	ldrh	r3, [r7, #22]
 800d38e:	04d9      	lsls	r1, r3, #19
 800d390:	4ba4      	ldr	r3, [pc, #656]	@ (800d624 <USB_EPStartXfer+0x3cc>)
 800d392:	400b      	ands	r3, r1
 800d394:	69b9      	ldr	r1, [r7, #24]
 800d396:	0148      	lsls	r0, r1, #5
 800d398:	69f9      	ldr	r1, [r7, #28]
 800d39a:	4401      	add	r1, r0
 800d39c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	791b      	ldrb	r3, [r3, #4]
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d122      	bne.n	800d3f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	015a      	lsls	r2, r3, #5
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3b8:	691b      	ldr	r3, [r3, #16]
 800d3ba:	69ba      	ldr	r2, [r7, #24]
 800d3bc:	0151      	lsls	r1, r2, #5
 800d3be:	69fa      	ldr	r2, [r7, #28]
 800d3c0:	440a      	add	r2, r1
 800d3c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d3ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	015a      	lsls	r2, r3, #5
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3d8:	691a      	ldr	r2, [r3, #16]
 800d3da:	8afb      	ldrh	r3, [r7, #22]
 800d3dc:	075b      	lsls	r3, r3, #29
 800d3de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d3e2:	69b9      	ldr	r1, [r7, #24]
 800d3e4:	0148      	lsls	r0, r1, #5
 800d3e6:	69f9      	ldr	r1, [r7, #28]
 800d3e8:	4401      	add	r1, r0
 800d3ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3fe:	691a      	ldr	r2, [r3, #16]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d408:	69b9      	ldr	r1, [r7, #24]
 800d40a:	0148      	lsls	r0, r1, #5
 800d40c:	69f9      	ldr	r1, [r7, #28]
 800d40e:	4401      	add	r1, r0
 800d410:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d414:	4313      	orrs	r3, r2
 800d416:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d14b      	bne.n	800d4b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	69db      	ldr	r3, [r3, #28]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d009      	beq.n	800d43a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	015a      	lsls	r2, r3, #5
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	4413      	add	r3, r2
 800d42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d432:	461a      	mov	r2, r3
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	69db      	ldr	r3, [r3, #28]
 800d438:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	791b      	ldrb	r3, [r3, #4]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d128      	bne.n	800d494 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d110      	bne.n	800d474 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	015a      	lsls	r2, r3, #5
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	4413      	add	r3, r2
 800d45a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	69ba      	ldr	r2, [r7, #24]
 800d462:	0151      	lsls	r1, r2, #5
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	440a      	add	r2, r1
 800d468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d46c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	e00f      	b.n	800d494 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	015a      	lsls	r2, r3, #5
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	4413      	add	r3, r2
 800d47c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	69ba      	ldr	r2, [r7, #24]
 800d484:	0151      	lsls	r1, r2, #5
 800d486:	69fa      	ldr	r2, [r7, #28]
 800d488:	440a      	add	r2, r1
 800d48a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d48e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d492:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	015a      	lsls	r2, r3, #5
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	4413      	add	r3, r2
 800d49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	69ba      	ldr	r2, [r7, #24]
 800d4a4:	0151      	lsls	r1, r2, #5
 800d4a6:	69fa      	ldr	r2, [r7, #28]
 800d4a8:	440a      	add	r2, r1
 800d4aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d4b2:	6013      	str	r3, [r2, #0]
 800d4b4:	e166      	b.n	800d784 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	015a      	lsls	r2, r3, #5
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	4413      	add	r3, r2
 800d4be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	69ba      	ldr	r2, [r7, #24]
 800d4c6:	0151      	lsls	r1, r2, #5
 800d4c8:	69fa      	ldr	r2, [r7, #28]
 800d4ca:	440a      	add	r2, r1
 800d4cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d4d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	791b      	ldrb	r3, [r3, #4]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d015      	beq.n	800d50a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f000 814e 	beq.w	800d784 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	f003 030f 	and.w	r3, r3, #15
 800d4f8:	2101      	movs	r1, #1
 800d4fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d4fe:	69f9      	ldr	r1, [r7, #28]
 800d500:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d504:	4313      	orrs	r3, r2
 800d506:	634b      	str	r3, [r1, #52]	@ 0x34
 800d508:	e13c      	b.n	800d784 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d516:	2b00      	cmp	r3, #0
 800d518:	d110      	bne.n	800d53c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	015a      	lsls	r2, r3, #5
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	4413      	add	r3, r2
 800d522:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	0151      	lsls	r1, r2, #5
 800d52c:	69fa      	ldr	r2, [r7, #28]
 800d52e:	440a      	add	r2, r1
 800d530:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d534:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	e00f      	b.n	800d55c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	0151      	lsls	r1, r2, #5
 800d54e:	69fa      	ldr	r2, [r7, #28]
 800d550:	440a      	add	r2, r1
 800d552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d55a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	68d9      	ldr	r1, [r3, #12]
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	781a      	ldrb	r2, [r3, #0]
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	b298      	uxth	r0, r3
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	9300      	str	r3, [sp, #0]
 800d56e:	4603      	mov	r3, r0
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f000 f9b9 	bl	800d8e8 <USB_WritePacket>
 800d576:	e105      	b.n	800d784 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	015a      	lsls	r2, r3, #5
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	4413      	add	r3, r2
 800d580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	69ba      	ldr	r2, [r7, #24]
 800d588:	0151      	lsls	r1, r2, #5
 800d58a:	69fa      	ldr	r2, [r7, #28]
 800d58c:	440a      	add	r2, r1
 800d58e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d592:	0cdb      	lsrs	r3, r3, #19
 800d594:	04db      	lsls	r3, r3, #19
 800d596:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	0151      	lsls	r1, r2, #5
 800d5aa:	69fa      	ldr	r2, [r7, #28]
 800d5ac:	440a      	add	r2, r1
 800d5ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d5b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d5ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d132      	bne.n	800d628 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d003      	beq.n	800d5d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	689a      	ldr	r2, [r3, #8]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	689a      	ldr	r2, [r3, #8]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	015a      	lsls	r2, r3, #5
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5e6:	691a      	ldr	r2, [r3, #16]
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	6a1b      	ldr	r3, [r3, #32]
 800d5ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5f0:	69b9      	ldr	r1, [r7, #24]
 800d5f2:	0148      	lsls	r0, r1, #5
 800d5f4:	69f9      	ldr	r1, [r7, #28]
 800d5f6:	4401      	add	r1, r0
 800d5f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	015a      	lsls	r2, r3, #5
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	4413      	add	r3, r2
 800d608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	0151      	lsls	r1, r2, #5
 800d612:	69fa      	ldr	r2, [r7, #28]
 800d614:	440a      	add	r2, r1
 800d616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d61a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d61e:	6113      	str	r3, [r2, #16]
 800d620:	e062      	b.n	800d6e8 <USB_EPStartXfer+0x490>
 800d622:	bf00      	nop
 800d624:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d123      	bne.n	800d678 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	015a      	lsls	r2, r3, #5
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	4413      	add	r3, r2
 800d638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d63c:	691a      	ldr	r2, [r3, #16]
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d646:	69b9      	ldr	r1, [r7, #24]
 800d648:	0148      	lsls	r0, r1, #5
 800d64a:	69f9      	ldr	r1, [r7, #28]
 800d64c:	4401      	add	r1, r0
 800d64e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d652:	4313      	orrs	r3, r2
 800d654:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	015a      	lsls	r2, r3, #5
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	4413      	add	r3, r2
 800d65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	69ba      	ldr	r2, [r7, #24]
 800d666:	0151      	lsls	r1, r2, #5
 800d668:	69fa      	ldr	r2, [r7, #28]
 800d66a:	440a      	add	r2, r1
 800d66c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d670:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d674:	6113      	str	r3, [r2, #16]
 800d676:	e037      	b.n	800d6e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	691a      	ldr	r2, [r3, #16]
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	4413      	add	r3, r2
 800d682:	1e5a      	subs	r2, r3, #1
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	fbb2 f3f3 	udiv	r3, r2, r3
 800d68c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	8afa      	ldrh	r2, [r7, #22]
 800d694:	fb03 f202 	mul.w	r2, r3, r2
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	015a      	lsls	r2, r3, #5
 800d6a0:	69fb      	ldr	r3, [r7, #28]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6a8:	691a      	ldr	r2, [r3, #16]
 800d6aa:	8afb      	ldrh	r3, [r7, #22]
 800d6ac:	04d9      	lsls	r1, r3, #19
 800d6ae:	4b38      	ldr	r3, [pc, #224]	@ (800d790 <USB_EPStartXfer+0x538>)
 800d6b0:	400b      	ands	r3, r1
 800d6b2:	69b9      	ldr	r1, [r7, #24]
 800d6b4:	0148      	lsls	r0, r1, #5
 800d6b6:	69f9      	ldr	r1, [r7, #28]
 800d6b8:	4401      	add	r1, r0
 800d6ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6ce:	691a      	ldr	r2, [r3, #16]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	6a1b      	ldr	r3, [r3, #32]
 800d6d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d6d8:	69b9      	ldr	r1, [r7, #24]
 800d6da:	0148      	lsls	r0, r1, #5
 800d6dc:	69f9      	ldr	r1, [r7, #28]
 800d6de:	4401      	add	r1, r0
 800d6e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d10d      	bne.n	800d70a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d009      	beq.n	800d70a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	68d9      	ldr	r1, [r3, #12]
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	015a      	lsls	r2, r3, #5
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d706:	460a      	mov	r2, r1
 800d708:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	791b      	ldrb	r3, [r3, #4]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d128      	bne.n	800d764 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d718:	689b      	ldr	r3, [r3, #8]
 800d71a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d110      	bne.n	800d744 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	015a      	lsls	r2, r3, #5
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	4413      	add	r3, r2
 800d72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	0151      	lsls	r1, r2, #5
 800d734:	69fa      	ldr	r2, [r7, #28]
 800d736:	440a      	add	r2, r1
 800d738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d73c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d740:	6013      	str	r3, [r2, #0]
 800d742:	e00f      	b.n	800d764 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	69ba      	ldr	r2, [r7, #24]
 800d754:	0151      	lsls	r1, r2, #5
 800d756:	69fa      	ldr	r2, [r7, #28]
 800d758:	440a      	add	r2, r1
 800d75a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d75e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d762:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	015a      	lsls	r2, r3, #5
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	4413      	add	r3, r2
 800d76c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	69ba      	ldr	r2, [r7, #24]
 800d774:	0151      	lsls	r1, r2, #5
 800d776:	69fa      	ldr	r2, [r7, #28]
 800d778:	440a      	add	r2, r1
 800d77a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d77e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	1ff80000 	.word	0x1ff80000

0800d794 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d794:	b480      	push	{r7}
 800d796:	b087      	sub	sp, #28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	785b      	ldrb	r3, [r3, #1]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d14a      	bne.n	800d848 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	015a      	lsls	r2, r3, #5
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7ca:	f040 8086 	bne.w	800d8da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	015a      	lsls	r2, r3, #5
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	683a      	ldr	r2, [r7, #0]
 800d7e0:	7812      	ldrb	r2, [r2, #0]
 800d7e2:	0151      	lsls	r1, r2, #5
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	440a      	add	r2, r1
 800d7e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d7f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	015a      	lsls	r2, r3, #5
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	7812      	ldrb	r2, [r2, #0]
 800d806:	0151      	lsls	r1, r2, #5
 800d808:	693a      	ldr	r2, [r7, #16]
 800d80a:	440a      	add	r2, r1
 800d80c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	3301      	adds	r3, #1
 800d81a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d822:	4293      	cmp	r3, r2
 800d824:	d902      	bls.n	800d82c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d826:	2301      	movs	r3, #1
 800d828:	75fb      	strb	r3, [r7, #23]
          break;
 800d82a:	e056      	b.n	800d8da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d844:	d0e7      	beq.n	800d816 <USB_EPStopXfer+0x82>
 800d846:	e048      	b.n	800d8da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	015a      	lsls	r2, r3, #5
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	4413      	add	r3, r2
 800d852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d85c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d860:	d13b      	bne.n	800d8da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	015a      	lsls	r2, r3, #5
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	683a      	ldr	r2, [r7, #0]
 800d874:	7812      	ldrb	r2, [r2, #0]
 800d876:	0151      	lsls	r1, r2, #5
 800d878:	693a      	ldr	r2, [r7, #16]
 800d87a:	440a      	add	r2, r1
 800d87c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d880:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d884:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	015a      	lsls	r2, r3, #5
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	4413      	add	r3, r2
 800d890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	683a      	ldr	r2, [r7, #0]
 800d898:	7812      	ldrb	r2, [r2, #0]
 800d89a:	0151      	lsls	r1, r2, #5
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	440a      	add	r2, r1
 800d8a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d8a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d8a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d902      	bls.n	800d8c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d8be:	e00c      	b.n	800d8da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	015a      	lsls	r2, r3, #5
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d8d8:	d0e7      	beq.n	800d8aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b089      	sub	sp, #36	@ 0x24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	71fb      	strb	r3, [r7, #7]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d906:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d123      	bne.n	800d956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d90e:	88bb      	ldrh	r3, [r7, #4]
 800d910:	3303      	adds	r3, #3
 800d912:	089b      	lsrs	r3, r3, #2
 800d914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d916:	2300      	movs	r3, #0
 800d918:	61bb      	str	r3, [r7, #24]
 800d91a:	e018      	b.n	800d94e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d91c:	79fb      	ldrb	r3, [r7, #7]
 800d91e:	031a      	lsls	r2, r3, #12
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	4413      	add	r3, r2
 800d924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d928:	461a      	mov	r2, r3
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	3301      	adds	r3, #1
 800d934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	3301      	adds	r3, #1
 800d93a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	3301      	adds	r3, #1
 800d940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	3301      	adds	r3, #1
 800d946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	3301      	adds	r3, #1
 800d94c:	61bb      	str	r3, [r7, #24]
 800d94e:	69ba      	ldr	r2, [r7, #24]
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	429a      	cmp	r2, r3
 800d954:	d3e2      	bcc.n	800d91c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3724      	adds	r7, #36	@ 0x24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d964:	b480      	push	{r7}
 800d966:	b08b      	sub	sp, #44	@ 0x2c
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	4613      	mov	r3, r2
 800d970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d97a:	88fb      	ldrh	r3, [r7, #6]
 800d97c:	089b      	lsrs	r3, r3, #2
 800d97e:	b29b      	uxth	r3, r3
 800d980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d982:	88fb      	ldrh	r3, [r7, #6]
 800d984:	f003 0303 	and.w	r3, r3, #3
 800d988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d98a:	2300      	movs	r3, #0
 800d98c:	623b      	str	r3, [r7, #32]
 800d98e:	e014      	b.n	800d9ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	3301      	adds	r3, #1
 800d9a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	623b      	str	r3, [r7, #32]
 800d9ba:	6a3a      	ldr	r2, [r7, #32]
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d3e6      	bcc.n	800d990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d9c2:	8bfb      	ldrh	r3, [r7, #30]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d01e      	beq.n	800da06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f107 0310 	add.w	r3, r7, #16
 800d9d8:	6812      	ldr	r2, [r2, #0]
 800d9da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	00db      	lsls	r3, r3, #3
 800d9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ec:	701a      	strb	r2, [r3, #0]
      i++;
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d9fa:	8bfb      	ldrh	r3, [r7, #30]
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800da00:	8bfb      	ldrh	r3, [r7, #30]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1ea      	bne.n	800d9dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800da06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da08:	4618      	mov	r0, r3
 800da0a:	372c      	adds	r7, #44	@ 0x2c
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	785b      	ldrb	r3, [r3, #1]
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d12c      	bne.n	800da8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	015a      	lsls	r2, r3, #5
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	4413      	add	r3, r2
 800da38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	db12      	blt.n	800da68 <USB_EPSetStall+0x54>
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00f      	beq.n	800da68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	015a      	lsls	r2, r3, #5
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	4413      	add	r3, r2
 800da50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	0151      	lsls	r1, r2, #5
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	440a      	add	r2, r1
 800da5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800da66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	015a      	lsls	r2, r3, #5
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	4413      	add	r3, r2
 800da70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	0151      	lsls	r1, r2, #5
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	440a      	add	r2, r1
 800da7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800da86:	6013      	str	r3, [r2, #0]
 800da88:	e02b      	b.n	800dae2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	015a      	lsls	r2, r3, #5
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	4413      	add	r3, r2
 800da92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	db12      	blt.n	800dac2 <USB_EPSetStall+0xae>
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00f      	beq.n	800dac2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	015a      	lsls	r2, r3, #5
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	4413      	add	r3, r2
 800daaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	0151      	lsls	r1, r2, #5
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	440a      	add	r2, r1
 800dab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dabc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800dac0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	0151      	lsls	r1, r2, #5
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	440a      	add	r2, r1
 800dad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dadc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	785b      	ldrb	r3, [r3, #1]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d128      	bne.n	800db5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	015a      	lsls	r2, r3, #5
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	4413      	add	r3, r2
 800db14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	0151      	lsls	r1, r2, #5
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	440a      	add	r2, r1
 800db22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800db2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	791b      	ldrb	r3, [r3, #4]
 800db30:	2b03      	cmp	r3, #3
 800db32:	d003      	beq.n	800db3c <USB_EPClearStall+0x4c>
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	791b      	ldrb	r3, [r3, #4]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d138      	bne.n	800dbae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	015a      	lsls	r2, r3, #5
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4413      	add	r3, r2
 800db44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	0151      	lsls	r1, r2, #5
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	440a      	add	r2, r1
 800db52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800db56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	e027      	b.n	800dbae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	015a      	lsls	r2, r3, #5
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	4413      	add	r3, r2
 800db66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	0151      	lsls	r1, r2, #5
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	440a      	add	r2, r1
 800db74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800db7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	791b      	ldrb	r3, [r3, #4]
 800db82:	2b03      	cmp	r3, #3
 800db84:	d003      	beq.n	800db8e <USB_EPClearStall+0x9e>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	791b      	ldrb	r3, [r3, #4]
 800db8a:	2b02      	cmp	r3, #2
 800db8c:	d10f      	bne.n	800dbae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	015a      	lsls	r2, r3, #5
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	4413      	add	r3, r2
 800db96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68ba      	ldr	r2, [r7, #8]
 800db9e:	0151      	lsls	r1, r2, #5
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	440a      	add	r2, r1
 800dba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dbac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbda:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dbde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	011b      	lsls	r3, r3, #4
 800dbec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800dbf0:	68f9      	ldr	r1, [r7, #12]
 800dbf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dbfa:	2300      	movs	r3, #0
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc22:	f023 0303 	bic.w	r3, r3, #3
 800dc26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc36:	f023 0302 	bic.w	r3, r3, #2
 800dc3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68fa      	ldr	r2, [r7, #12]
 800dc60:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc64:	f023 0303 	bic.w	r3, r3, #3
 800dc68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc78:	f043 0302 	orr.w	r3, r3, #2
 800dc7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	695b      	ldr	r3, [r3, #20]
 800dc98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	699b      	ldr	r3, [r3, #24]
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	4013      	ands	r3, r2
 800dca2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dca4:	68fb      	ldr	r3, [r7, #12]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b085      	sub	sp, #20
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcce:	69db      	ldr	r3, [r3, #28]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	4013      	ands	r3, r2
 800dcd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	0c1b      	lsrs	r3, r3, #16
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dce6:	b480      	push	{r7}
 800dce8:	b085      	sub	sp, #20
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcf8:	699b      	ldr	r3, [r3, #24]
 800dcfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	4013      	ands	r3, r2
 800dd08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	b29b      	uxth	r3, r3
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd1a:	b480      	push	{r7}
 800dd1c:	b085      	sub	sp, #20
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	6078      	str	r0, [r7, #4]
 800dd22:	460b      	mov	r3, r1
 800dd24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd2a:	78fb      	ldrb	r3, [r7, #3]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	4013      	ands	r3, r2
 800dd46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dd48:	68bb      	ldr	r3, [r7, #8]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b087      	sub	sp, #28
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	460b      	mov	r3, r1
 800dd60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	f003 030f 	and.w	r3, r3, #15
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	fa22 f303 	lsr.w	r3, r2, r3
 800dd86:	01db      	lsls	r3, r3, #7
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	693a      	ldr	r2, [r7, #16]
 800dd8c:	4313      	orrs	r3, r2
 800dd8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dd90:	78fb      	ldrb	r3, [r7, #3]
 800dd92:	015a      	lsls	r2, r3, #5
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	4413      	add	r3, r2
 800dd98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	693a      	ldr	r2, [r7, #16]
 800dda0:	4013      	ands	r3, r2
 800dda2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dda4:	68bb      	ldr	r3, [r7, #8]
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b083      	sub	sp, #12
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	f003 0301 	and.w	r3, r3, #1
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	370c      	adds	r7, #12
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b085      	sub	sp, #20
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dde8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ddec:	f023 0307 	bic.w	r3, r3, #7
 800ddf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800de00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800de14:	b480      	push	{r7}
 800de16:	b087      	sub	sp, #28
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	460b      	mov	r3, r1
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	333c      	adds	r3, #60	@ 0x3c
 800de2a:	3304      	adds	r3, #4
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	4a26      	ldr	r2, [pc, #152]	@ (800decc <USB_EP0_OutStart+0xb8>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d90a      	bls.n	800de4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800de44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800de48:	d101      	bne.n	800de4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	e037      	b.n	800debe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de54:	461a      	mov	r2, r3
 800de56:	2300      	movs	r3, #0
 800de58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	697a      	ldr	r2, [r7, #20]
 800de64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800de6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de7c:	f043 0318 	orr.w	r3, r3, #24
 800de80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	697a      	ldr	r2, [r7, #20]
 800de8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800de94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800de96:	7afb      	ldrb	r3, [r7, #11]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d10f      	bne.n	800debc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dea2:	461a      	mov	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800deb6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800deba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800debc:	2300      	movs	r3, #0
}
 800debe:	4618      	mov	r0, r3
 800dec0:	371c      	adds	r7, #28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	4f54300a 	.word	0x4f54300a

0800ded0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3301      	adds	r3, #1
 800dee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dee8:	d901      	bls.n	800deee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e01b      	b.n	800df26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	daf2      	bge.n	800dedc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	f043 0201 	orr.w	r2, r3, #1
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3301      	adds	r3, #1
 800df0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df12:	d901      	bls.n	800df18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df14:	2303      	movs	r3, #3
 800df16:	e006      	b.n	800df26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	2b01      	cmp	r3, #1
 800df22:	d0f0      	beq.n	800df06 <USB_CoreReset+0x36>

  return HAL_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3714      	adds	r7, #20
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
	...

0800df34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800df40:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800df44:	f002 fd00 	bl	8010948 <USBD_static_malloc>
 800df48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d109      	bne.n	800df64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	32b0      	adds	r2, #176	@ 0xb0
 800df5a:	2100      	movs	r1, #0
 800df5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800df60:	2302      	movs	r3, #2
 800df62:	e0d4      	b.n	800e10e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800df64:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800df68:	2100      	movs	r1, #0
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f002 fd52 	bl	8010a14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	32b0      	adds	r2, #176	@ 0xb0
 800df7a:	68f9      	ldr	r1, [r7, #12]
 800df7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	32b0      	adds	r2, #176	@ 0xb0
 800df8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	7c1b      	ldrb	r3, [r3, #16]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d138      	bne.n	800e00e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df9c:	4b5e      	ldr	r3, [pc, #376]	@ (800e118 <USBD_CDC_Init+0x1e4>)
 800df9e:	7819      	ldrb	r1, [r3, #0]
 800dfa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfa4:	2202      	movs	r2, #2
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f002 fbab 	bl	8010702 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dfac:	4b5a      	ldr	r3, [pc, #360]	@ (800e118 <USBD_CDC_Init+0x1e4>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 020f 	and.w	r2, r3, #15
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3324      	adds	r3, #36	@ 0x24
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dfc6:	4b55      	ldr	r3, [pc, #340]	@ (800e11c <USBD_CDC_Init+0x1e8>)
 800dfc8:	7819      	ldrb	r1, [r3, #0]
 800dfca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfce:	2202      	movs	r2, #2
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f002 fb96 	bl	8010702 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dfd6:	4b51      	ldr	r3, [pc, #324]	@ (800e11c <USBD_CDC_Init+0x1e8>)
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	f003 020f 	and.w	r2, r3, #15
 800dfde:	6879      	ldr	r1, [r7, #4]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	440b      	add	r3, r1
 800dfea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dfee:	2201      	movs	r2, #1
 800dff0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dff2:	4b4b      	ldr	r3, [pc, #300]	@ (800e120 <USBD_CDC_Init+0x1ec>)
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	f003 020f 	and.w	r2, r3, #15
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	440b      	add	r3, r1
 800e006:	3326      	adds	r3, #38	@ 0x26
 800e008:	2210      	movs	r2, #16
 800e00a:	801a      	strh	r2, [r3, #0]
 800e00c:	e035      	b.n	800e07a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e00e:	4b42      	ldr	r3, [pc, #264]	@ (800e118 <USBD_CDC_Init+0x1e4>)
 800e010:	7819      	ldrb	r1, [r3, #0]
 800e012:	2340      	movs	r3, #64	@ 0x40
 800e014:	2202      	movs	r2, #2
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f002 fb73 	bl	8010702 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e01c:	4b3e      	ldr	r3, [pc, #248]	@ (800e118 <USBD_CDC_Init+0x1e4>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	f003 020f 	and.w	r2, r3, #15
 800e024:	6879      	ldr	r1, [r7, #4]
 800e026:	4613      	mov	r3, r2
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	440b      	add	r3, r1
 800e030:	3324      	adds	r3, #36	@ 0x24
 800e032:	2201      	movs	r2, #1
 800e034:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e036:	4b39      	ldr	r3, [pc, #228]	@ (800e11c <USBD_CDC_Init+0x1e8>)
 800e038:	7819      	ldrb	r1, [r3, #0]
 800e03a:	2340      	movs	r3, #64	@ 0x40
 800e03c:	2202      	movs	r2, #2
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f002 fb5f 	bl	8010702 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e044:	4b35      	ldr	r3, [pc, #212]	@ (800e11c <USBD_CDC_Init+0x1e8>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	f003 020f 	and.w	r2, r3, #15
 800e04c:	6879      	ldr	r1, [r7, #4]
 800e04e:	4613      	mov	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4413      	add	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	440b      	add	r3, r1
 800e058:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e05c:	2201      	movs	r2, #1
 800e05e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e060:	4b2f      	ldr	r3, [pc, #188]	@ (800e120 <USBD_CDC_Init+0x1ec>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f003 020f 	and.w	r2, r3, #15
 800e068:	6879      	ldr	r1, [r7, #4]
 800e06a:	4613      	mov	r3, r2
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	4413      	add	r3, r2
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	440b      	add	r3, r1
 800e074:	3326      	adds	r3, #38	@ 0x26
 800e076:	2210      	movs	r2, #16
 800e078:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e07a:	4b29      	ldr	r3, [pc, #164]	@ (800e120 <USBD_CDC_Init+0x1ec>)
 800e07c:	7819      	ldrb	r1, [r3, #0]
 800e07e:	2308      	movs	r3, #8
 800e080:	2203      	movs	r2, #3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f002 fb3d 	bl	8010702 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e088:	4b25      	ldr	r3, [pc, #148]	@ (800e120 <USBD_CDC_Init+0x1ec>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	f003 020f 	and.w	r2, r3, #15
 800e090:	6879      	ldr	r1, [r7, #4]
 800e092:	4613      	mov	r3, r2
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	009b      	lsls	r3, r3, #2
 800e09a:	440b      	add	r3, r1
 800e09c:	3324      	adds	r3, #36	@ 0x24
 800e09e:	2201      	movs	r2, #1
 800e0a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	33b0      	adds	r3, #176	@ 0xb0
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	4413      	add	r3, r2
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d101      	bne.n	800e0dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e0d8:	2302      	movs	r3, #2
 800e0da:	e018      	b.n	800e10e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7c1b      	ldrb	r3, [r3, #16]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d10a      	bne.n	800e0fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e11c <USBD_CDC_Init+0x1e8>)
 800e0e6:	7819      	ldrb	r1, [r3, #0]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e0ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f002 fbf4 	bl	80108e0 <USBD_LL_PrepareReceive>
 800e0f8:	e008      	b.n	800e10c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e0fa:	4b08      	ldr	r3, [pc, #32]	@ (800e11c <USBD_CDC_Init+0x1e8>)
 800e0fc:	7819      	ldrb	r1, [r3, #0]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e104:	2340      	movs	r3, #64	@ 0x40
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f002 fbea 	bl	80108e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	200000a3 	.word	0x200000a3
 800e11c:	200000a4 	.word	0x200000a4
 800e120:	200000a5 	.word	0x200000a5

0800e124 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e130:	4b3a      	ldr	r3, [pc, #232]	@ (800e21c <USBD_CDC_DeInit+0xf8>)
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f002 fb09 	bl	801074e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e13c:	4b37      	ldr	r3, [pc, #220]	@ (800e21c <USBD_CDC_DeInit+0xf8>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 020f 	and.w	r2, r3, #15
 800e144:	6879      	ldr	r1, [r7, #4]
 800e146:	4613      	mov	r3, r2
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	440b      	add	r3, r1
 800e150:	3324      	adds	r3, #36	@ 0x24
 800e152:	2200      	movs	r2, #0
 800e154:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e156:	4b32      	ldr	r3, [pc, #200]	@ (800e220 <USBD_CDC_DeInit+0xfc>)
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f002 faf6 	bl	801074e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e162:	4b2f      	ldr	r3, [pc, #188]	@ (800e220 <USBD_CDC_DeInit+0xfc>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	f003 020f 	and.w	r2, r3, #15
 800e16a:	6879      	ldr	r1, [r7, #4]
 800e16c:	4613      	mov	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	4413      	add	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	440b      	add	r3, r1
 800e176:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e17a:	2200      	movs	r2, #0
 800e17c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e17e:	4b29      	ldr	r3, [pc, #164]	@ (800e224 <USBD_CDC_DeInit+0x100>)
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f002 fae2 	bl	801074e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e18a:	4b26      	ldr	r3, [pc, #152]	@ (800e224 <USBD_CDC_DeInit+0x100>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	f003 020f 	and.w	r2, r3, #15
 800e192:	6879      	ldr	r1, [r7, #4]
 800e194:	4613      	mov	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	4413      	add	r3, r2
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	440b      	add	r3, r1
 800e19e:	3324      	adds	r3, #36	@ 0x24
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e1a4:	4b1f      	ldr	r3, [pc, #124]	@ (800e224 <USBD_CDC_DeInit+0x100>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 020f 	and.w	r2, r3, #15
 800e1ac:	6879      	ldr	r1, [r7, #4]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	440b      	add	r3, r1
 800e1b8:	3326      	adds	r3, #38	@ 0x26
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	32b0      	adds	r2, #176	@ 0xb0
 800e1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d01f      	beq.n	800e210 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	33b0      	adds	r3, #176	@ 0xb0
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	32b0      	adds	r2, #176	@ 0xb0
 800e1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f002 fbb6 	bl	8010964 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	32b0      	adds	r2, #176	@ 0xb0
 800e202:	2100      	movs	r1, #0
 800e204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e210:	2300      	movs	r3, #0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	200000a3 	.word	0x200000a3
 800e220:	200000a4 	.word	0x200000a4
 800e224:	200000a5 	.word	0x200000a5

0800e228 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	32b0      	adds	r2, #176	@ 0xb0
 800e23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e240:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e242:	2300      	movs	r3, #0
 800e244:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e246:	2300      	movs	r3, #0
 800e248:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e254:	2303      	movs	r3, #3
 800e256:	e0bf      	b.n	800e3d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e260:	2b00      	cmp	r3, #0
 800e262:	d050      	beq.n	800e306 <USBD_CDC_Setup+0xde>
 800e264:	2b20      	cmp	r3, #32
 800e266:	f040 80af 	bne.w	800e3c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	88db      	ldrh	r3, [r3, #6]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d03a      	beq.n	800e2e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	b25b      	sxtb	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	da1b      	bge.n	800e2b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	33b0      	adds	r3, #176	@ 0xb0
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e292:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	88d2      	ldrh	r2, [r2, #6]
 800e298:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	88db      	ldrh	r3, [r3, #6]
 800e29e:	2b07      	cmp	r3, #7
 800e2a0:	bf28      	it	cs
 800e2a2:	2307      	movcs	r3, #7
 800e2a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	89fa      	ldrh	r2, [r7, #14]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f001 fd93 	bl	800fdd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e2b2:	e090      	b.n	800e3d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	785a      	ldrb	r2, [r3, #1]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	88db      	ldrh	r3, [r3, #6]
 800e2c2:	2b3f      	cmp	r3, #63	@ 0x3f
 800e2c4:	d803      	bhi.n	800e2ce <USBD_CDC_Setup+0xa6>
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	88db      	ldrh	r3, [r3, #6]
 800e2ca:	b2da      	uxtb	r2, r3
 800e2cc:	e000      	b.n	800e2d0 <USBD_CDC_Setup+0xa8>
 800e2ce:	2240      	movs	r2, #64	@ 0x40
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e2d6:	6939      	ldr	r1, [r7, #16]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e2de:	461a      	mov	r2, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f001 fda5 	bl	800fe30 <USBD_CtlPrepareRx>
      break;
 800e2e6:	e076      	b.n	800e3d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	33b0      	adds	r3, #176	@ 0xb0
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4413      	add	r3, r2
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	7850      	ldrb	r0, [r2, #1]
 800e2fe:	2200      	movs	r2, #0
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	4798      	blx	r3
      break;
 800e304:	e067      	b.n	800e3d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	785b      	ldrb	r3, [r3, #1]
 800e30a:	2b0b      	cmp	r3, #11
 800e30c:	d851      	bhi.n	800e3b2 <USBD_CDC_Setup+0x18a>
 800e30e:	a201      	add	r2, pc, #4	@ (adr r2, 800e314 <USBD_CDC_Setup+0xec>)
 800e310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e314:	0800e345 	.word	0x0800e345
 800e318:	0800e3c1 	.word	0x0800e3c1
 800e31c:	0800e3b3 	.word	0x0800e3b3
 800e320:	0800e3b3 	.word	0x0800e3b3
 800e324:	0800e3b3 	.word	0x0800e3b3
 800e328:	0800e3b3 	.word	0x0800e3b3
 800e32c:	0800e3b3 	.word	0x0800e3b3
 800e330:	0800e3b3 	.word	0x0800e3b3
 800e334:	0800e3b3 	.word	0x0800e3b3
 800e338:	0800e3b3 	.word	0x0800e3b3
 800e33c:	0800e36f 	.word	0x0800e36f
 800e340:	0800e399 	.word	0x0800e399
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b03      	cmp	r3, #3
 800e34e:	d107      	bne.n	800e360 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e350:	f107 030a 	add.w	r3, r7, #10
 800e354:	2202      	movs	r2, #2
 800e356:	4619      	mov	r1, r3
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f001 fd3d 	bl	800fdd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e35e:	e032      	b.n	800e3c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f001 fcbb 	bl	800fcde <USBD_CtlError>
            ret = USBD_FAIL;
 800e368:	2303      	movs	r3, #3
 800e36a:	75fb      	strb	r3, [r7, #23]
          break;
 800e36c:	e02b      	b.n	800e3c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b03      	cmp	r3, #3
 800e378:	d107      	bne.n	800e38a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e37a:	f107 030d 	add.w	r3, r7, #13
 800e37e:	2201      	movs	r2, #1
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f001 fd28 	bl	800fdd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e388:	e01d      	b.n	800e3c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e38a:	6839      	ldr	r1, [r7, #0]
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f001 fca6 	bl	800fcde <USBD_CtlError>
            ret = USBD_FAIL;
 800e392:	2303      	movs	r3, #3
 800e394:	75fb      	strb	r3, [r7, #23]
          break;
 800e396:	e016      	b.n	800e3c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d00f      	beq.n	800e3c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e3a4:	6839      	ldr	r1, [r7, #0]
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f001 fc99 	bl	800fcde <USBD_CtlError>
            ret = USBD_FAIL;
 800e3ac:	2303      	movs	r3, #3
 800e3ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e3b0:	e008      	b.n	800e3c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e3b2:	6839      	ldr	r1, [r7, #0]
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f001 fc92 	bl	800fcde <USBD_CtlError>
          ret = USBD_FAIL;
 800e3ba:	2303      	movs	r3, #3
 800e3bc:	75fb      	strb	r3, [r7, #23]
          break;
 800e3be:	e002      	b.n	800e3c6 <USBD_CDC_Setup+0x19e>
          break;
 800e3c0:	bf00      	nop
 800e3c2:	e008      	b.n	800e3d6 <USBD_CDC_Setup+0x1ae>
          break;
 800e3c4:	bf00      	nop
      }
      break;
 800e3c6:	e006      	b.n	800e3d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f001 fc87 	bl	800fcde <USBD_CtlError>
      ret = USBD_FAIL;
 800e3d0:	2303      	movs	r3, #3
 800e3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800e3d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800e3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	32b0      	adds	r2, #176	@ 0xb0
 800e3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e406:	2303      	movs	r3, #3
 800e408:	e065      	b.n	800e4d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	32b0      	adds	r2, #176	@ 0xb0
 800e414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e418:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	f003 020f 	and.w	r2, r3, #15
 800e420:	6879      	ldr	r1, [r7, #4]
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	440b      	add	r3, r1
 800e42c:	3318      	adds	r3, #24
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d02f      	beq.n	800e494 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e434:	78fb      	ldrb	r3, [r7, #3]
 800e436:	f003 020f 	and.w	r2, r3, #15
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	4613      	mov	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4413      	add	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	440b      	add	r3, r1
 800e446:	3318      	adds	r3, #24
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	78fb      	ldrb	r3, [r7, #3]
 800e44c:	f003 010f 	and.w	r1, r3, #15
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	460b      	mov	r3, r1
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	440b      	add	r3, r1
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4403      	add	r3, r0
 800e45c:	331c      	adds	r3, #28
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	fbb2 f1f3 	udiv	r1, r2, r3
 800e464:	fb01 f303 	mul.w	r3, r1, r3
 800e468:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d112      	bne.n	800e494 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e46e:	78fb      	ldrb	r3, [r7, #3]
 800e470:	f003 020f 	and.w	r2, r3, #15
 800e474:	6879      	ldr	r1, [r7, #4]
 800e476:	4613      	mov	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4413      	add	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	440b      	add	r3, r1
 800e480:	3318      	adds	r3, #24
 800e482:	2200      	movs	r2, #0
 800e484:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e486:	78f9      	ldrb	r1, [r7, #3]
 800e488:	2300      	movs	r3, #0
 800e48a:	2200      	movs	r2, #0
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f002 fa06 	bl	801089e <USBD_LL_Transmit>
 800e492:	e01f      	b.n	800e4d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	2200      	movs	r2, #0
 800e498:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	33b0      	adds	r3, #176	@ 0xb0
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d010      	beq.n	800e4d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	33b0      	adds	r3, #176	@ 0xb0
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	691b      	ldr	r3, [r3, #16]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e4d0:	78fa      	ldrb	r2, [r7, #3]
 800e4d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b084      	sub	sp, #16
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	32b0      	adds	r2, #176	@ 0xb0
 800e4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	32b0      	adds	r2, #176	@ 0xb0
 800e504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e50c:	2303      	movs	r3, #3
 800e50e:	e01a      	b.n	800e546 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f002 fa04 	bl	8010922 <USBD_LL_GetRxDataSize>
 800e51a:	4602      	mov	r2, r0
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	33b0      	adds	r3, #176	@ 0xb0
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e53a:	68fa      	ldr	r2, [r7, #12]
 800e53c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e540:	4611      	mov	r1, r2
 800e542:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b084      	sub	sp, #16
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	32b0      	adds	r2, #176	@ 0xb0
 800e560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e564:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d101      	bne.n	800e570 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e56c:	2303      	movs	r3, #3
 800e56e:	e024      	b.n	800e5ba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	33b0      	adds	r3, #176	@ 0xb0
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d019      	beq.n	800e5b8 <USBD_CDC_EP0_RxReady+0x6a>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e58a:	2bff      	cmp	r3, #255	@ 0xff
 800e58c:	d014      	beq.n	800e5b8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	33b0      	adds	r3, #176	@ 0xb0
 800e598:	009b      	lsls	r3, r3, #2
 800e59a:	4413      	add	r3, r2
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	689b      	ldr	r3, [r3, #8]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e5a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e5ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	22ff      	movs	r2, #255	@ 0xff
 800e5b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
	...

0800e5c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5cc:	2182      	movs	r1, #130	@ 0x82
 800e5ce:	4818      	ldr	r0, [pc, #96]	@ (800e630 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e5d0:	f000 fd4f 	bl	800f072 <USBD_GetEpDesc>
 800e5d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5d6:	2101      	movs	r1, #1
 800e5d8:	4815      	ldr	r0, [pc, #84]	@ (800e630 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e5da:	f000 fd4a 	bl	800f072 <USBD_GetEpDesc>
 800e5de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5e0:	2181      	movs	r1, #129	@ 0x81
 800e5e2:	4813      	ldr	r0, [pc, #76]	@ (800e630 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e5e4:	f000 fd45 	bl	800f072 <USBD_GetEpDesc>
 800e5e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d002      	beq.n	800e5f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2210      	movs	r2, #16
 800e5f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d006      	beq.n	800e60a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e604:	711a      	strb	r2, [r3, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d006      	beq.n	800e61e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e618:	711a      	strb	r2, [r3, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2243      	movs	r2, #67	@ 0x43
 800e622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e624:	4b02      	ldr	r3, [pc, #8]	@ (800e630 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e626:	4618      	mov	r0, r3
 800e628:	3718      	adds	r7, #24
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20000060 	.word	0x20000060

0800e634 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e63c:	2182      	movs	r1, #130	@ 0x82
 800e63e:	4818      	ldr	r0, [pc, #96]	@ (800e6a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e640:	f000 fd17 	bl	800f072 <USBD_GetEpDesc>
 800e644:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e646:	2101      	movs	r1, #1
 800e648:	4815      	ldr	r0, [pc, #84]	@ (800e6a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e64a:	f000 fd12 	bl	800f072 <USBD_GetEpDesc>
 800e64e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e650:	2181      	movs	r1, #129	@ 0x81
 800e652:	4813      	ldr	r0, [pc, #76]	@ (800e6a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e654:	f000 fd0d 	bl	800f072 <USBD_GetEpDesc>
 800e658:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d002      	beq.n	800e666 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	2210      	movs	r2, #16
 800e664:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d006      	beq.n	800e67a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	2200      	movs	r2, #0
 800e670:	711a      	strb	r2, [r3, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f042 0202 	orr.w	r2, r2, #2
 800e678:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d006      	beq.n	800e68e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2200      	movs	r2, #0
 800e684:	711a      	strb	r2, [r3, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f042 0202 	orr.w	r2, r2, #2
 800e68c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2243      	movs	r2, #67	@ 0x43
 800e692:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e694:	4b02      	ldr	r3, [pc, #8]	@ (800e6a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e696:	4618      	mov	r0, r3
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	20000060 	.word	0x20000060

0800e6a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e6ac:	2182      	movs	r1, #130	@ 0x82
 800e6ae:	4818      	ldr	r0, [pc, #96]	@ (800e710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e6b0:	f000 fcdf 	bl	800f072 <USBD_GetEpDesc>
 800e6b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	4815      	ldr	r0, [pc, #84]	@ (800e710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e6ba:	f000 fcda 	bl	800f072 <USBD_GetEpDesc>
 800e6be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e6c0:	2181      	movs	r1, #129	@ 0x81
 800e6c2:	4813      	ldr	r0, [pc, #76]	@ (800e710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e6c4:	f000 fcd5 	bl	800f072 <USBD_GetEpDesc>
 800e6c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2210      	movs	r2, #16
 800e6d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d006      	beq.n	800e6ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e6e4:	711a      	strb	r2, [r3, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d006      	beq.n	800e6fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e6f8:	711a      	strb	r2, [r3, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2243      	movs	r2, #67	@ 0x43
 800e702:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e704:	4b02      	ldr	r3, [pc, #8]	@ (800e710 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e706:	4618      	mov	r0, r3
 800e708:	3718      	adds	r7, #24
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	20000060 	.word	0x20000060

0800e714 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	220a      	movs	r2, #10
 800e720:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e722:	4b03      	ldr	r3, [pc, #12]	@ (800e730 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e724:	4618      	mov	r0, r3
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr
 800e730:	2000001c 	.word	0x2000001c

0800e734 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d101      	bne.n	800e748 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e744:	2303      	movs	r3, #3
 800e746:	e009      	b.n	800e75c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	33b0      	adds	r3, #176	@ 0xb0
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	4413      	add	r3, r2
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	370c      	adds	r7, #12
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e768:	b480      	push	{r7}
 800e76a:	b087      	sub	sp, #28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	32b0      	adds	r2, #176	@ 0xb0
 800e77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e782:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e78a:	2303      	movs	r3, #3
 800e78c:	e008      	b.n	800e7a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	371c      	adds	r7, #28
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b085      	sub	sp, #20
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	32b0      	adds	r2, #176	@ 0xb0
 800e7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d101      	bne.n	800e7d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e004      	b.n	800e7da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr
	...

0800e7e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	32b0      	adds	r2, #176	@ 0xb0
 800e7fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e800:	2301      	movs	r3, #1
 800e802:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e80a:	2303      	movs	r3, #3
 800e80c:	e025      	b.n	800e85a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e814:	2b00      	cmp	r3, #0
 800e816:	d11f      	bne.n	800e858 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	2201      	movs	r2, #1
 800e81c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e820:	4b10      	ldr	r3, [pc, #64]	@ (800e864 <USBD_CDC_TransmitPacket+0x7c>)
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	f003 020f 	and.w	r2, r3, #15
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	4613      	mov	r3, r2
 800e832:	009b      	lsls	r3, r3, #2
 800e834:	4413      	add	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4403      	add	r3, r0
 800e83a:	3318      	adds	r3, #24
 800e83c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e83e:	4b09      	ldr	r3, [pc, #36]	@ (800e864 <USBD_CDC_TransmitPacket+0x7c>)
 800e840:	7819      	ldrb	r1, [r3, #0]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f002 f825 	bl	801089e <USBD_LL_Transmit>

    ret = USBD_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e858:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	200000a3 	.word	0x200000a3

0800e868 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	32b0      	adds	r2, #176	@ 0xb0
 800e87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	32b0      	adds	r2, #176	@ 0xb0
 800e88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e892:	2303      	movs	r3, #3
 800e894:	e018      	b.n	800e8c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	7c1b      	ldrb	r3, [r3, #16]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10a      	bne.n	800e8b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e89e:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d0 <USBD_CDC_ReceivePacket+0x68>)
 800e8a0:	7819      	ldrb	r1, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e8a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f002 f817 	bl	80108e0 <USBD_LL_PrepareReceive>
 800e8b2:	e008      	b.n	800e8c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e8b4:	4b06      	ldr	r3, [pc, #24]	@ (800e8d0 <USBD_CDC_ReceivePacket+0x68>)
 800e8b6:	7819      	ldrb	r1, [r3, #0]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e8be:	2340      	movs	r3, #64	@ 0x40
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f002 f80d 	bl	80108e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	200000a4 	.word	0x200000a4

0800e8d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b086      	sub	sp, #24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e01f      	b.n	800e92c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d003      	beq.n	800e912 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	79fa      	ldrb	r2, [r7, #7]
 800e91e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f001 fe87 	bl	8010634 <USBD_LL_Init>
 800e926:	4603      	mov	r3, r0
 800e928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d101      	bne.n	800e94c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e948:	2303      	movs	r3, #3
 800e94a:	e025      	b.n	800e998 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	32ae      	adds	r2, #174	@ 0xae
 800e95e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00f      	beq.n	800e988 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	32ae      	adds	r2, #174	@ 0xae
 800e972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e978:	f107 020e 	add.w	r2, r7, #14
 800e97c:	4610      	mov	r0, r2
 800e97e:	4798      	blx	r3
 800e980:	4602      	mov	r2, r0
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 fe8f 	bl	80106cc <USBD_LL_Start>
 800e9ae:	4603      	mov	r3, r0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	370c      	adds	r7, #12
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9cc:	4770      	bx	lr

0800e9ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b084      	sub	sp, #16
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d009      	beq.n	800e9fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	78fa      	ldrb	r2, [r7, #3]
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	4798      	blx	r3
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b084      	sub	sp, #16
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea12:	2300      	movs	r3, #0
 800ea14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	78fa      	ldrb	r2, [r7, #3]
 800ea20:	4611      	mov	r1, r2
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	4798      	blx	r3
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ea30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f001 f90c 	bl	800fc6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2201      	movs	r2, #1
 800ea56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ea60:	461a      	mov	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ea6e:	f003 031f 	and.w	r3, r3, #31
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d01a      	beq.n	800eaac <USBD_LL_SetupStage+0x72>
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d822      	bhi.n	800eac0 <USBD_LL_SetupStage+0x86>
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d002      	beq.n	800ea84 <USBD_LL_SetupStage+0x4a>
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d00a      	beq.n	800ea98 <USBD_LL_SetupStage+0x5e>
 800ea82:	e01d      	b.n	800eac0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fb63 	bl	800f158 <USBD_StdDevReq>
 800ea92:	4603      	mov	r3, r0
 800ea94:	73fb      	strb	r3, [r7, #15]
      break;
 800ea96:	e020      	b.n	800eada <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 fbcb 	bl	800f23c <USBD_StdItfReq>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	73fb      	strb	r3, [r7, #15]
      break;
 800eaaa:	e016      	b.n	800eada <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eab2:	4619      	mov	r1, r3
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 fc2d 	bl	800f314 <USBD_StdEPReq>
 800eaba:	4603      	mov	r3, r0
 800eabc:	73fb      	strb	r3, [r7, #15]
      break;
 800eabe:	e00c      	b.n	800eada <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eac6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	4619      	mov	r1, r3
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f001 fe5c 	bl	801078c <USBD_LL_StallEP>
 800ead4:	4603      	mov	r3, r0
 800ead6:	73fb      	strb	r3, [r7, #15]
      break;
 800ead8:	bf00      	nop
  }

  return ret;
 800eada:	7bfb      	ldrb	r3, [r7, #15]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	460b      	mov	r3, r1
 800eaee:	607a      	str	r2, [r7, #4]
 800eaf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eaf6:	7afb      	ldrb	r3, [r7, #11]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d16e      	bne.n	800ebda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800eb02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	f040 8098 	bne.w	800ec40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	689a      	ldr	r2, [r3, #8]
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d913      	bls.n	800eb44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	689a      	ldr	r2, [r3, #8]
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	1ad2      	subs	r2, r2, r3
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	68da      	ldr	r2, [r3, #12]
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	4293      	cmp	r3, r2
 800eb34:	bf28      	it	cs
 800eb36:	4613      	movcs	r3, r2
 800eb38:	461a      	mov	r2, r3
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f001 f994 	bl	800fe6a <USBD_CtlContinueRx>
 800eb42:	e07d      	b.n	800ec40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb4a:	f003 031f 	and.w	r3, r3, #31
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d014      	beq.n	800eb7c <USBD_LL_DataOutStage+0x98>
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	d81d      	bhi.n	800eb92 <USBD_LL_DataOutStage+0xae>
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <USBD_LL_DataOutStage+0x7c>
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d003      	beq.n	800eb66 <USBD_LL_DataOutStage+0x82>
 800eb5e:	e018      	b.n	800eb92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eb60:	2300      	movs	r3, #0
 800eb62:	75bb      	strb	r3, [r7, #22]
            break;
 800eb64:	e018      	b.n	800eb98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	4619      	mov	r1, r3
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f000 fa64 	bl	800f03e <USBD_CoreFindIF>
 800eb76:	4603      	mov	r3, r0
 800eb78:	75bb      	strb	r3, [r7, #22]
            break;
 800eb7a:	e00d      	b.n	800eb98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	4619      	mov	r1, r3
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f000 fa66 	bl	800f058 <USBD_CoreFindEP>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	75bb      	strb	r3, [r7, #22]
            break;
 800eb90:	e002      	b.n	800eb98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eb92:	2300      	movs	r3, #0
 800eb94:	75bb      	strb	r3, [r7, #22]
            break;
 800eb96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eb98:	7dbb      	ldrb	r3, [r7, #22]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d119      	bne.n	800ebd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d113      	bne.n	800ebd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ebaa:	7dba      	ldrb	r2, [r7, #22]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	32ae      	adds	r2, #174	@ 0xae
 800ebb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00b      	beq.n	800ebd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ebba:	7dba      	ldrb	r2, [r7, #22]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ebc2:	7dba      	ldrb	r2, [r7, #22]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	32ae      	adds	r2, #174	@ 0xae
 800ebc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f001 f95a 	bl	800fe8c <USBD_CtlSendStatus>
 800ebd8:	e032      	b.n	800ec40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ebda:	7afb      	ldrb	r3, [r7, #11]
 800ebdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f000 fa37 	bl	800f058 <USBD_CoreFindEP>
 800ebea:	4603      	mov	r3, r0
 800ebec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebee:	7dbb      	ldrb	r3, [r7, #22]
 800ebf0:	2bff      	cmp	r3, #255	@ 0xff
 800ebf2:	d025      	beq.n	800ec40 <USBD_LL_DataOutStage+0x15c>
 800ebf4:	7dbb      	ldrb	r3, [r7, #22]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d122      	bne.n	800ec40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b03      	cmp	r3, #3
 800ec04:	d117      	bne.n	800ec36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ec06:	7dba      	ldrb	r2, [r7, #22]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	32ae      	adds	r2, #174	@ 0xae
 800ec0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec10:	699b      	ldr	r3, [r3, #24]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00f      	beq.n	800ec36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ec16:	7dba      	ldrb	r2, [r7, #22]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ec1e:	7dba      	ldrb	r2, [r7, #22]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	32ae      	adds	r2, #174	@ 0xae
 800ec24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec28:	699b      	ldr	r3, [r3, #24]
 800ec2a:	7afa      	ldrb	r2, [r7, #11]
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	4798      	blx	r3
 800ec32:	4603      	mov	r3, r0
 800ec34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ec36:	7dfb      	ldrb	r3, [r7, #23]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d001      	beq.n	800ec40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	e000      	b.n	800ec42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b086      	sub	sp, #24
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	60f8      	str	r0, [r7, #12]
 800ec52:	460b      	mov	r3, r1
 800ec54:	607a      	str	r2, [r7, #4]
 800ec56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ec58:	7afb      	ldrb	r3, [r7, #11]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d16f      	bne.n	800ed3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3314      	adds	r3, #20
 800ec62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ec6a:	2b02      	cmp	r3, #2
 800ec6c:	d15a      	bne.n	800ed24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	68db      	ldr	r3, [r3, #12]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d914      	bls.n	800eca4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	689a      	ldr	r2, [r3, #8]
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	1ad2      	subs	r2, r2, r3
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	461a      	mov	r2, r3
 800ec8e:	6879      	ldr	r1, [r7, #4]
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f001 f8bc 	bl	800fe0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec96:	2300      	movs	r3, #0
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f001 fe1f 	bl	80108e0 <USBD_LL_PrepareReceive>
 800eca2:	e03f      	b.n	800ed24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	68da      	ldr	r2, [r3, #12]
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d11c      	bne.n	800ecea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d316      	bcc.n	800ecea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d20f      	bcs.n	800ecea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ecca:	2200      	movs	r2, #0
 800eccc:	2100      	movs	r1, #0
 800ecce:	68f8      	ldr	r0, [r7, #12]
 800ecd0:	f001 f89d 	bl	800fe0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecdc:	2300      	movs	r3, #0
 800ecde:	2200      	movs	r2, #0
 800ece0:	2100      	movs	r1, #0
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f001 fdfc 	bl	80108e0 <USBD_LL_PrepareReceive>
 800ece8:	e01c      	b.n	800ed24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d10f      	bne.n	800ed16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d009      	beq.n	800ed16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed16:	2180      	movs	r1, #128	@ 0x80
 800ed18:	68f8      	ldr	r0, [r7, #12]
 800ed1a:	f001 fd37 	bl	801078c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f001 f8c7 	bl	800feb2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d03a      	beq.n	800eda4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f7ff fe42 	bl	800e9b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ed3c:	e032      	b.n	800eda4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ed3e:	7afb      	ldrb	r3, [r7, #11]
 800ed40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	4619      	mov	r1, r3
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f000 f985 	bl	800f058 <USBD_CoreFindEP>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	2bff      	cmp	r3, #255	@ 0xff
 800ed56:	d025      	beq.n	800eda4 <USBD_LL_DataInStage+0x15a>
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d122      	bne.n	800eda4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	d11c      	bne.n	800eda4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ed6a:	7dfa      	ldrb	r2, [r7, #23]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	32ae      	adds	r2, #174	@ 0xae
 800ed70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d014      	beq.n	800eda4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ed7a:	7dfa      	ldrb	r2, [r7, #23]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ed82:	7dfa      	ldrb	r2, [r7, #23]
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	32ae      	adds	r2, #174	@ 0xae
 800ed88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	7afa      	ldrb	r2, [r7, #11]
 800ed90:	4611      	mov	r1, r2
 800ed92:	68f8      	ldr	r0, [r7, #12]
 800ed94:	4798      	blx	r3
 800ed96:	4603      	mov	r3, r0
 800ed98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ed9a:	7dbb      	ldrb	r3, [r7, #22]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d001      	beq.n	800eda4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eda0:	7dbb      	ldrb	r3, [r7, #22]
 800eda2:	e000      	b.n	800eda6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b084      	sub	sp, #16
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d014      	beq.n	800ee14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00e      	beq.n	800ee14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	6852      	ldr	r2, [r2, #4]
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	4611      	mov	r1, r2
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	4798      	blx	r3
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ee10:	2303      	movs	r3, #3
 800ee12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee14:	2340      	movs	r3, #64	@ 0x40
 800ee16:	2200      	movs	r2, #0
 800ee18:	2100      	movs	r1, #0
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f001 fc71 	bl	8010702 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2240      	movs	r2, #64	@ 0x40
 800ee2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee30:	2340      	movs	r3, #64	@ 0x40
 800ee32:	2200      	movs	r2, #0
 800ee34:	2180      	movs	r1, #128	@ 0x80
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f001 fc63 	bl	8010702 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2201      	movs	r2, #1
 800ee40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2240      	movs	r2, #64	@ 0x40
 800ee46:	621a      	str	r2, [r3, #32]

  return ret;
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b083      	sub	sp, #12
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	78fa      	ldrb	r2, [r7, #3]
 800ee62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	370c      	adds	r7, #12
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee72:	b480      	push	{r7}
 800ee74:	b083      	sub	sp, #12
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b04      	cmp	r3, #4
 800ee84:	d006      	beq.n	800ee94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2204      	movs	r2, #4
 800ee98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ee9c:	2300      	movs	r3, #0
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b083      	sub	sp, #12
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	2b04      	cmp	r3, #4
 800eebc:	d106      	bne.n	800eecc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eec4:	b2da      	uxtb	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	370c      	adds	r7, #12
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b082      	sub	sp, #8
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b03      	cmp	r3, #3
 800eeec:	d110      	bne.n	800ef10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00b      	beq.n	800ef10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eefe:	69db      	ldr	r3, [r3, #28]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d005      	beq.n	800ef10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef0a:	69db      	ldr	r3, [r3, #28]
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ef10:	2300      	movs	r3, #0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3708      	adds	r7, #8
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b082      	sub	sp, #8
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	460b      	mov	r3, r1
 800ef24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	32ae      	adds	r2, #174	@ 0xae
 800ef30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	e01c      	b.n	800ef76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	2b03      	cmp	r3, #3
 800ef46:	d115      	bne.n	800ef74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	32ae      	adds	r2, #174	@ 0xae
 800ef52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef56:	6a1b      	ldr	r3, [r3, #32]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d00b      	beq.n	800ef74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	32ae      	adds	r2, #174	@ 0xae
 800ef66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef6a:	6a1b      	ldr	r3, [r3, #32]
 800ef6c:	78fa      	ldrb	r2, [r7, #3]
 800ef6e:	4611      	mov	r1, r2
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b082      	sub	sp, #8
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
 800ef86:	460b      	mov	r3, r1
 800ef88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	32ae      	adds	r2, #174	@ 0xae
 800ef94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	e01c      	b.n	800efda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	d115      	bne.n	800efd8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	32ae      	adds	r2, #174	@ 0xae
 800efb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00b      	beq.n	800efd8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	32ae      	adds	r2, #174	@ 0xae
 800efca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd0:	78fa      	ldrb	r2, [r7, #3]
 800efd2:	4611      	mov	r1, r2
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800efe2:	b480      	push	{r7}
 800efe4:	b083      	sub	sp, #12
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00e      	beq.n	800f034 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	6852      	ldr	r2, [r2, #4]
 800f022:	b2d2      	uxtb	r2, r2
 800f024:	4611      	mov	r1, r2
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	4798      	blx	r3
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d001      	beq.n	800f034 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f030:	2303      	movs	r3, #3
 800f032:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f034:	7bfb      	ldrb	r3, [r7, #15]
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}

0800f03e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f03e:	b480      	push	{r7}
 800f040:	b083      	sub	sp, #12
 800f042:	af00      	add	r7, sp, #0
 800f044:	6078      	str	r0, [r7, #4]
 800f046:	460b      	mov	r3, r1
 800f048:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f04a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr

0800f058 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f058:	b480      	push	{r7}
 800f05a:	b083      	sub	sp, #12
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f064:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f066:	4618      	mov	r0, r3
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b086      	sub	sp, #24
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
 800f07a:	460b      	mov	r3, r1
 800f07c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f086:	2300      	movs	r3, #0
 800f088:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	885b      	ldrh	r3, [r3, #2]
 800f08e:	b29b      	uxth	r3, r3
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	7812      	ldrb	r2, [r2, #0]
 800f094:	4293      	cmp	r3, r2
 800f096:	d91f      	bls.n	800f0d8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f09e:	e013      	b.n	800f0c8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f0a0:	f107 030a 	add.w	r3, r7, #10
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	6978      	ldr	r0, [r7, #20]
 800f0a8:	f000 f81b 	bl	800f0e2 <USBD_GetNextDesc>
 800f0ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	785b      	ldrb	r3, [r3, #1]
 800f0b2:	2b05      	cmp	r3, #5
 800f0b4:	d108      	bne.n	800f0c8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	789b      	ldrb	r3, [r3, #2]
 800f0be:	78fa      	ldrb	r2, [r7, #3]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d008      	beq.n	800f0d6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	885b      	ldrh	r3, [r3, #2]
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	897b      	ldrh	r3, [r7, #10]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d8e5      	bhi.n	800f0a0 <USBD_GetEpDesc+0x2e>
 800f0d4:	e000      	b.n	800f0d8 <USBD_GetEpDesc+0x66>
          break;
 800f0d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f0d8:	693b      	ldr	r3, [r7, #16]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f0e2:	b480      	push	{r7}
 800f0e4:	b085      	sub	sp, #20
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	7812      	ldrb	r2, [r2, #0]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	461a      	mov	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4413      	add	r3, r2
 800f10a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f10c:	68fb      	ldr	r3, [r7, #12]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3714      	adds	r7, #20
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f11a:	b480      	push	{r7}
 800f11c:	b087      	sub	sp, #28
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	3301      	adds	r3, #1
 800f130:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f138:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f13c:	021b      	lsls	r3, r3, #8
 800f13e:	b21a      	sxth	r2, r3
 800f140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f144:	4313      	orrs	r3, r2
 800f146:	b21b      	sxth	r3, r3
 800f148:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f14a:	89fb      	ldrh	r3, [r7, #14]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	371c      	adds	r7, #28
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f16e:	2b40      	cmp	r3, #64	@ 0x40
 800f170:	d005      	beq.n	800f17e <USBD_StdDevReq+0x26>
 800f172:	2b40      	cmp	r3, #64	@ 0x40
 800f174:	d857      	bhi.n	800f226 <USBD_StdDevReq+0xce>
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00f      	beq.n	800f19a <USBD_StdDevReq+0x42>
 800f17a:	2b20      	cmp	r3, #32
 800f17c:	d153      	bne.n	800f226 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	32ae      	adds	r2, #174	@ 0xae
 800f188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	6839      	ldr	r1, [r7, #0]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	4798      	blx	r3
 800f194:	4603      	mov	r3, r0
 800f196:	73fb      	strb	r3, [r7, #15]
      break;
 800f198:	e04a      	b.n	800f230 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	785b      	ldrb	r3, [r3, #1]
 800f19e:	2b09      	cmp	r3, #9
 800f1a0:	d83b      	bhi.n	800f21a <USBD_StdDevReq+0xc2>
 800f1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1a8 <USBD_StdDevReq+0x50>)
 800f1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a8:	0800f1fd 	.word	0x0800f1fd
 800f1ac:	0800f211 	.word	0x0800f211
 800f1b0:	0800f21b 	.word	0x0800f21b
 800f1b4:	0800f207 	.word	0x0800f207
 800f1b8:	0800f21b 	.word	0x0800f21b
 800f1bc:	0800f1db 	.word	0x0800f1db
 800f1c0:	0800f1d1 	.word	0x0800f1d1
 800f1c4:	0800f21b 	.word	0x0800f21b
 800f1c8:	0800f1f3 	.word	0x0800f1f3
 800f1cc:	0800f1e5 	.word	0x0800f1e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f1d0:	6839      	ldr	r1, [r7, #0]
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 fa3c 	bl	800f650 <USBD_GetDescriptor>
          break;
 800f1d8:	e024      	b.n	800f224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 fba1 	bl	800f924 <USBD_SetAddress>
          break;
 800f1e2:	e01f      	b.n	800f224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1e4:	6839      	ldr	r1, [r7, #0]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fbe0 	bl	800f9ac <USBD_SetConfig>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73fb      	strb	r3, [r7, #15]
          break;
 800f1f0:	e018      	b.n	800f224 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fc83 	bl	800fb00 <USBD_GetConfig>
          break;
 800f1fa:	e013      	b.n	800f224 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f1fc:	6839      	ldr	r1, [r7, #0]
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fcb4 	bl	800fb6c <USBD_GetStatus>
          break;
 800f204:	e00e      	b.n	800f224 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fce3 	bl	800fbd4 <USBD_SetFeature>
          break;
 800f20e:	e009      	b.n	800f224 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fd07 	bl	800fc26 <USBD_ClrFeature>
          break;
 800f218:	e004      	b.n	800f224 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 fd5e 	bl	800fcde <USBD_CtlError>
          break;
 800f222:	bf00      	nop
      }
      break;
 800f224:	e004      	b.n	800f230 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f226:	6839      	ldr	r1, [r7, #0]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 fd58 	bl	800fcde <USBD_CtlError>
      break;
 800f22e:	bf00      	nop
  }

  return ret;
 800f230:	7bfb      	ldrb	r3, [r7, #15]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop

0800f23c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f252:	2b40      	cmp	r3, #64	@ 0x40
 800f254:	d005      	beq.n	800f262 <USBD_StdItfReq+0x26>
 800f256:	2b40      	cmp	r3, #64	@ 0x40
 800f258:	d852      	bhi.n	800f300 <USBD_StdItfReq+0xc4>
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d001      	beq.n	800f262 <USBD_StdItfReq+0x26>
 800f25e:	2b20      	cmp	r3, #32
 800f260:	d14e      	bne.n	800f300 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	3b01      	subs	r3, #1
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d840      	bhi.n	800f2f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	889b      	ldrh	r3, [r3, #4]
 800f274:	b2db      	uxtb	r3, r3
 800f276:	2b01      	cmp	r3, #1
 800f278:	d836      	bhi.n	800f2e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	889b      	ldrh	r3, [r3, #4]
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7ff fedb 	bl	800f03e <USBD_CoreFindIF>
 800f288:	4603      	mov	r3, r0
 800f28a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f28c:	7bbb      	ldrb	r3, [r7, #14]
 800f28e:	2bff      	cmp	r3, #255	@ 0xff
 800f290:	d01d      	beq.n	800f2ce <USBD_StdItfReq+0x92>
 800f292:	7bbb      	ldrb	r3, [r7, #14]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d11a      	bne.n	800f2ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f298:	7bba      	ldrb	r2, [r7, #14]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	32ae      	adds	r2, #174	@ 0xae
 800f29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00f      	beq.n	800f2c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f2a8:	7bba      	ldrb	r2, [r7, #14]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f2b0:	7bba      	ldrb	r2, [r7, #14]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	32ae      	adds	r2, #174	@ 0xae
 800f2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	6839      	ldr	r1, [r7, #0]
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	4798      	blx	r3
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f2c6:	e004      	b.n	800f2d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f2cc:	e001      	b.n	800f2d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	88db      	ldrh	r3, [r3, #6]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d110      	bne.n	800f2fc <USBD_StdItfReq+0xc0>
 800f2da:	7bfb      	ldrb	r3, [r7, #15]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d10d      	bne.n	800f2fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fdd3 	bl	800fe8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f2e6:	e009      	b.n	800f2fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f2e8:	6839      	ldr	r1, [r7, #0]
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fcf7 	bl	800fcde <USBD_CtlError>
          break;
 800f2f0:	e004      	b.n	800f2fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f2f2:	6839      	ldr	r1, [r7, #0]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f000 fcf2 	bl	800fcde <USBD_CtlError>
          break;
 800f2fa:	e000      	b.n	800f2fe <USBD_StdItfReq+0xc2>
          break;
 800f2fc:	bf00      	nop
      }
      break;
 800f2fe:	e004      	b.n	800f30a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 fceb 	bl	800fcde <USBD_CtlError>
      break;
 800f308:	bf00      	nop
  }

  return ret;
 800f30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f31e:	2300      	movs	r3, #0
 800f320:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	889b      	ldrh	r3, [r3, #4]
 800f326:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f330:	2b40      	cmp	r3, #64	@ 0x40
 800f332:	d007      	beq.n	800f344 <USBD_StdEPReq+0x30>
 800f334:	2b40      	cmp	r3, #64	@ 0x40
 800f336:	f200 817f 	bhi.w	800f638 <USBD_StdEPReq+0x324>
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d02a      	beq.n	800f394 <USBD_StdEPReq+0x80>
 800f33e:	2b20      	cmp	r3, #32
 800f340:	f040 817a 	bne.w	800f638 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f344:	7bbb      	ldrb	r3, [r7, #14]
 800f346:	4619      	mov	r1, r3
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f7ff fe85 	bl	800f058 <USBD_CoreFindEP>
 800f34e:	4603      	mov	r3, r0
 800f350:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f352:	7b7b      	ldrb	r3, [r7, #13]
 800f354:	2bff      	cmp	r3, #255	@ 0xff
 800f356:	f000 8174 	beq.w	800f642 <USBD_StdEPReq+0x32e>
 800f35a:	7b7b      	ldrb	r3, [r7, #13]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	f040 8170 	bne.w	800f642 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f362:	7b7a      	ldrb	r2, [r7, #13]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f36a:	7b7a      	ldrb	r2, [r7, #13]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	32ae      	adds	r2, #174	@ 0xae
 800f370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 8163 	beq.w	800f642 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f37c:	7b7a      	ldrb	r2, [r7, #13]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	32ae      	adds	r2, #174	@ 0xae
 800f382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	4798      	blx	r3
 800f38e:	4603      	mov	r3, r0
 800f390:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f392:	e156      	b.n	800f642 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	785b      	ldrb	r3, [r3, #1]
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d008      	beq.n	800f3ae <USBD_StdEPReq+0x9a>
 800f39c:	2b03      	cmp	r3, #3
 800f39e:	f300 8145 	bgt.w	800f62c <USBD_StdEPReq+0x318>
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f000 809b 	beq.w	800f4de <USBD_StdEPReq+0x1ca>
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d03c      	beq.n	800f426 <USBD_StdEPReq+0x112>
 800f3ac:	e13e      	b.n	800f62c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b02      	cmp	r3, #2
 800f3b8:	d002      	beq.n	800f3c0 <USBD_StdEPReq+0xac>
 800f3ba:	2b03      	cmp	r3, #3
 800f3bc:	d016      	beq.n	800f3ec <USBD_StdEPReq+0xd8>
 800f3be:	e02c      	b.n	800f41a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3c0:	7bbb      	ldrb	r3, [r7, #14]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00d      	beq.n	800f3e2 <USBD_StdEPReq+0xce>
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
 800f3c8:	2b80      	cmp	r3, #128	@ 0x80
 800f3ca:	d00a      	beq.n	800f3e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3cc:	7bbb      	ldrb	r3, [r7, #14]
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f001 f9db 	bl	801078c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3d6:	2180      	movs	r1, #128	@ 0x80
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 f9d7 	bl	801078c <USBD_LL_StallEP>
 800f3de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3e0:	e020      	b.n	800f424 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fc7a 	bl	800fcde <USBD_CtlError>
              break;
 800f3ea:	e01b      	b.n	800f424 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	885b      	ldrh	r3, [r3, #2]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10e      	bne.n	800f412 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f3f4:	7bbb      	ldrb	r3, [r7, #14]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00b      	beq.n	800f412 <USBD_StdEPReq+0xfe>
 800f3fa:	7bbb      	ldrb	r3, [r7, #14]
 800f3fc:	2b80      	cmp	r3, #128	@ 0x80
 800f3fe:	d008      	beq.n	800f412 <USBD_StdEPReq+0xfe>
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	88db      	ldrh	r3, [r3, #6]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d104      	bne.n	800f412 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f408:	7bbb      	ldrb	r3, [r7, #14]
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f001 f9bd 	bl	801078c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 fd3a 	bl	800fe8c <USBD_CtlSendStatus>

              break;
 800f418:	e004      	b.n	800f424 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f41a:	6839      	ldr	r1, [r7, #0]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 fc5e 	bl	800fcde <USBD_CtlError>
              break;
 800f422:	bf00      	nop
          }
          break;
 800f424:	e107      	b.n	800f636 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d002      	beq.n	800f438 <USBD_StdEPReq+0x124>
 800f432:	2b03      	cmp	r3, #3
 800f434:	d016      	beq.n	800f464 <USBD_StdEPReq+0x150>
 800f436:	e04b      	b.n	800f4d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f438:	7bbb      	ldrb	r3, [r7, #14]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00d      	beq.n	800f45a <USBD_StdEPReq+0x146>
 800f43e:	7bbb      	ldrb	r3, [r7, #14]
 800f440:	2b80      	cmp	r3, #128	@ 0x80
 800f442:	d00a      	beq.n	800f45a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f444:	7bbb      	ldrb	r3, [r7, #14]
 800f446:	4619      	mov	r1, r3
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f001 f99f 	bl	801078c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f44e:	2180      	movs	r1, #128	@ 0x80
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f001 f99b 	bl	801078c <USBD_LL_StallEP>
 800f456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f458:	e040      	b.n	800f4dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f000 fc3e 	bl	800fcde <USBD_CtlError>
              break;
 800f462:	e03b      	b.n	800f4dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	885b      	ldrh	r3, [r3, #2]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d136      	bne.n	800f4da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f46c:	7bbb      	ldrb	r3, [r7, #14]
 800f46e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f472:	2b00      	cmp	r3, #0
 800f474:	d004      	beq.n	800f480 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f476:	7bbb      	ldrb	r3, [r7, #14]
 800f478:	4619      	mov	r1, r3
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f001 f9a5 	bl	80107ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fd03 	bl	800fe8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	4619      	mov	r1, r3
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7ff fde4 	bl	800f058 <USBD_CoreFindEP>
 800f490:	4603      	mov	r3, r0
 800f492:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f494:	7b7b      	ldrb	r3, [r7, #13]
 800f496:	2bff      	cmp	r3, #255	@ 0xff
 800f498:	d01f      	beq.n	800f4da <USBD_StdEPReq+0x1c6>
 800f49a:	7b7b      	ldrb	r3, [r7, #13]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d11c      	bne.n	800f4da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f4a0:	7b7a      	ldrb	r2, [r7, #13]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f4a8:	7b7a      	ldrb	r2, [r7, #13]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	32ae      	adds	r2, #174	@ 0xae
 800f4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d010      	beq.n	800f4da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f4b8:	7b7a      	ldrb	r2, [r7, #13]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	32ae      	adds	r2, #174	@ 0xae
 800f4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	6839      	ldr	r1, [r7, #0]
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	4798      	blx	r3
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f4ce:	e004      	b.n	800f4da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fc03 	bl	800fcde <USBD_CtlError>
              break;
 800f4d8:	e000      	b.n	800f4dc <USBD_StdEPReq+0x1c8>
              break;
 800f4da:	bf00      	nop
          }
          break;
 800f4dc:	e0ab      	b.n	800f636 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d002      	beq.n	800f4f0 <USBD_StdEPReq+0x1dc>
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	d032      	beq.n	800f554 <USBD_StdEPReq+0x240>
 800f4ee:	e097      	b.n	800f620 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4f0:	7bbb      	ldrb	r3, [r7, #14]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d007      	beq.n	800f506 <USBD_StdEPReq+0x1f2>
 800f4f6:	7bbb      	ldrb	r3, [r7, #14]
 800f4f8:	2b80      	cmp	r3, #128	@ 0x80
 800f4fa:	d004      	beq.n	800f506 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f4fc:	6839      	ldr	r1, [r7, #0]
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f000 fbed 	bl	800fcde <USBD_CtlError>
                break;
 800f504:	e091      	b.n	800f62a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da0b      	bge.n	800f526 <USBD_StdEPReq+0x212>
 800f50e:	7bbb      	ldrb	r3, [r7, #14]
 800f510:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	3310      	adds	r3, #16
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	4413      	add	r3, r2
 800f522:	3304      	adds	r3, #4
 800f524:	e00b      	b.n	800f53e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f526:	7bbb      	ldrb	r3, [r7, #14]
 800f528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f52c:	4613      	mov	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4413      	add	r3, r2
 800f532:	009b      	lsls	r3, r3, #2
 800f534:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4413      	add	r3, r2
 800f53c:	3304      	adds	r3, #4
 800f53e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	2200      	movs	r2, #0
 800f544:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	2202      	movs	r2, #2
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fc43 	bl	800fdd8 <USBD_CtlSendData>
              break;
 800f552:	e06a      	b.n	800f62a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	da11      	bge.n	800f580 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f55c:	7bbb      	ldrb	r3, [r7, #14]
 800f55e:	f003 020f 	and.w	r2, r3, #15
 800f562:	6879      	ldr	r1, [r7, #4]
 800f564:	4613      	mov	r3, r2
 800f566:	009b      	lsls	r3, r3, #2
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	440b      	add	r3, r1
 800f56e:	3324      	adds	r3, #36	@ 0x24
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d117      	bne.n	800f5a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f576:	6839      	ldr	r1, [r7, #0]
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 fbb0 	bl	800fcde <USBD_CtlError>
                  break;
 800f57e:	e054      	b.n	800f62a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	f003 020f 	and.w	r2, r3, #15
 800f586:	6879      	ldr	r1, [r7, #4]
 800f588:	4613      	mov	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	4413      	add	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	440b      	add	r3, r1
 800f592:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f596:	881b      	ldrh	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d104      	bne.n	800f5a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f59c:	6839      	ldr	r1, [r7, #0]
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 fb9d 	bl	800fcde <USBD_CtlError>
                  break;
 800f5a4:	e041      	b.n	800f62a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	da0b      	bge.n	800f5c6 <USBD_StdEPReq+0x2b2>
 800f5ae:	7bbb      	ldrb	r3, [r7, #14]
 800f5b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f5b4:	4613      	mov	r3, r2
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	4413      	add	r3, r2
 800f5ba:	009b      	lsls	r3, r3, #2
 800f5bc:	3310      	adds	r3, #16
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	e00b      	b.n	800f5de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f5c6:	7bbb      	ldrb	r3, [r7, #14]
 800f5c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	4413      	add	r3, r2
 800f5dc:	3304      	adds	r3, #4
 800f5de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f5e0:	7bbb      	ldrb	r3, [r7, #14]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d002      	beq.n	800f5ec <USBD_StdEPReq+0x2d8>
 800f5e6:	7bbb      	ldrb	r3, [r7, #14]
 800f5e8:	2b80      	cmp	r3, #128	@ 0x80
 800f5ea:	d103      	bne.n	800f5f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	601a      	str	r2, [r3, #0]
 800f5f2:	e00e      	b.n	800f612 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f5f4:	7bbb      	ldrb	r3, [r7, #14]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f001 f905 	bl	8010808 <USBD_LL_IsStallEP>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d003      	beq.n	800f60c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	2201      	movs	r2, #1
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	e002      	b.n	800f612 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	2200      	movs	r2, #0
 800f610:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2202      	movs	r2, #2
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fbdd 	bl	800fdd8 <USBD_CtlSendData>
              break;
 800f61e:	e004      	b.n	800f62a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f620:	6839      	ldr	r1, [r7, #0]
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 fb5b 	bl	800fcde <USBD_CtlError>
              break;
 800f628:	bf00      	nop
          }
          break;
 800f62a:	e004      	b.n	800f636 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fb55 	bl	800fcde <USBD_CtlError>
          break;
 800f634:	bf00      	nop
      }
      break;
 800f636:	e005      	b.n	800f644 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fb4f 	bl	800fcde <USBD_CtlError>
      break;
 800f640:	e000      	b.n	800f644 <USBD_StdEPReq+0x330>
      break;
 800f642:	bf00      	nop
  }

  return ret;
 800f644:	7bfb      	ldrb	r3, [r7, #15]
}
 800f646:	4618      	mov	r0, r3
 800f648:	3710      	adds	r7, #16
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
	...

0800f650 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f65a:	2300      	movs	r3, #0
 800f65c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f65e:	2300      	movs	r3, #0
 800f660:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f662:	2300      	movs	r3, #0
 800f664:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	885b      	ldrh	r3, [r3, #2]
 800f66a:	0a1b      	lsrs	r3, r3, #8
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	3b01      	subs	r3, #1
 800f670:	2b06      	cmp	r3, #6
 800f672:	f200 8128 	bhi.w	800f8c6 <USBD_GetDescriptor+0x276>
 800f676:	a201      	add	r2, pc, #4	@ (adr r2, 800f67c <USBD_GetDescriptor+0x2c>)
 800f678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f67c:	0800f699 	.word	0x0800f699
 800f680:	0800f6b1 	.word	0x0800f6b1
 800f684:	0800f6f1 	.word	0x0800f6f1
 800f688:	0800f8c7 	.word	0x0800f8c7
 800f68c:	0800f8c7 	.word	0x0800f8c7
 800f690:	0800f867 	.word	0x0800f867
 800f694:	0800f893 	.word	0x0800f893
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	7c12      	ldrb	r2, [r2, #16]
 800f6a4:	f107 0108 	add.w	r1, r7, #8
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	4798      	blx	r3
 800f6ac:	60f8      	str	r0, [r7, #12]
      break;
 800f6ae:	e112      	b.n	800f8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	7c1b      	ldrb	r3, [r3, #16]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d10d      	bne.n	800f6d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c0:	f107 0208 	add.w	r2, r7, #8
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
 800f6c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	2202      	movs	r2, #2
 800f6d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f6d2:	e100      	b.n	800f8d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6dc:	f107 0208 	add.w	r2, r7, #8
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	4798      	blx	r3
 800f6e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	2202      	movs	r2, #2
 800f6ec:	701a      	strb	r2, [r3, #0]
      break;
 800f6ee:	e0f2      	b.n	800f8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	885b      	ldrh	r3, [r3, #2]
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b05      	cmp	r3, #5
 800f6f8:	f200 80ac 	bhi.w	800f854 <USBD_GetDescriptor+0x204>
 800f6fc:	a201      	add	r2, pc, #4	@ (adr r2, 800f704 <USBD_GetDescriptor+0xb4>)
 800f6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f702:	bf00      	nop
 800f704:	0800f71d 	.word	0x0800f71d
 800f708:	0800f751 	.word	0x0800f751
 800f70c:	0800f785 	.word	0x0800f785
 800f710:	0800f7b9 	.word	0x0800f7b9
 800f714:	0800f7ed 	.word	0x0800f7ed
 800f718:	0800f821 	.word	0x0800f821
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f722:	685b      	ldr	r3, [r3, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00b      	beq.n	800f740 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	7c12      	ldrb	r2, [r2, #16]
 800f734:	f107 0108 	add.w	r1, r7, #8
 800f738:	4610      	mov	r0, r2
 800f73a:	4798      	blx	r3
 800f73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f73e:	e091      	b.n	800f864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 facb 	bl	800fcde <USBD_CtlError>
            err++;
 800f748:	7afb      	ldrb	r3, [r7, #11]
 800f74a:	3301      	adds	r3, #1
 800f74c:	72fb      	strb	r3, [r7, #11]
          break;
 800f74e:	e089      	b.n	800f864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00b      	beq.n	800f774 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	7c12      	ldrb	r2, [r2, #16]
 800f768:	f107 0108 	add.w	r1, r7, #8
 800f76c:	4610      	mov	r0, r2
 800f76e:	4798      	blx	r3
 800f770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f772:	e077      	b.n	800f864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f774:	6839      	ldr	r1, [r7, #0]
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 fab1 	bl	800fcde <USBD_CtlError>
            err++;
 800f77c:	7afb      	ldrb	r3, [r7, #11]
 800f77e:	3301      	adds	r3, #1
 800f780:	72fb      	strb	r3, [r7, #11]
          break;
 800f782:	e06f      	b.n	800f864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00b      	beq.n	800f7a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	7c12      	ldrb	r2, [r2, #16]
 800f79c:	f107 0108 	add.w	r1, r7, #8
 800f7a0:	4610      	mov	r0, r2
 800f7a2:	4798      	blx	r3
 800f7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7a6:	e05d      	b.n	800f864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7a8:	6839      	ldr	r1, [r7, #0]
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 fa97 	bl	800fcde <USBD_CtlError>
            err++;
 800f7b0:	7afb      	ldrb	r3, [r7, #11]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7b6:	e055      	b.n	800f864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7be:	691b      	ldr	r3, [r3, #16]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00b      	beq.n	800f7dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	7c12      	ldrb	r2, [r2, #16]
 800f7d0:	f107 0108 	add.w	r1, r7, #8
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	4798      	blx	r3
 800f7d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7da:	e043      	b.n	800f864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7dc:	6839      	ldr	r1, [r7, #0]
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 fa7d 	bl	800fcde <USBD_CtlError>
            err++;
 800f7e4:	7afb      	ldrb	r3, [r7, #11]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	72fb      	strb	r3, [r7, #11]
          break;
 800f7ea:	e03b      	b.n	800f864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d00b      	beq.n	800f810 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	7c12      	ldrb	r2, [r2, #16]
 800f804:	f107 0108 	add.w	r1, r7, #8
 800f808:	4610      	mov	r0, r2
 800f80a:	4798      	blx	r3
 800f80c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f80e:	e029      	b.n	800f864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 fa63 	bl	800fcde <USBD_CtlError>
            err++;
 800f818:	7afb      	ldrb	r3, [r7, #11]
 800f81a:	3301      	adds	r3, #1
 800f81c:	72fb      	strb	r3, [r7, #11]
          break;
 800f81e:	e021      	b.n	800f864 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f826:	699b      	ldr	r3, [r3, #24]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00b      	beq.n	800f844 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f832:	699b      	ldr	r3, [r3, #24]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	7c12      	ldrb	r2, [r2, #16]
 800f838:	f107 0108 	add.w	r1, r7, #8
 800f83c:	4610      	mov	r0, r2
 800f83e:	4798      	blx	r3
 800f840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f842:	e00f      	b.n	800f864 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f844:	6839      	ldr	r1, [r7, #0]
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fa49 	bl	800fcde <USBD_CtlError>
            err++;
 800f84c:	7afb      	ldrb	r3, [r7, #11]
 800f84e:	3301      	adds	r3, #1
 800f850:	72fb      	strb	r3, [r7, #11]
          break;
 800f852:	e007      	b.n	800f864 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f854:	6839      	ldr	r1, [r7, #0]
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fa41 	bl	800fcde <USBD_CtlError>
          err++;
 800f85c:	7afb      	ldrb	r3, [r7, #11]
 800f85e:	3301      	adds	r3, #1
 800f860:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f862:	bf00      	nop
      }
      break;
 800f864:	e037      	b.n	800f8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	7c1b      	ldrb	r3, [r3, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d109      	bne.n	800f882 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f876:	f107 0208 	add.w	r2, r7, #8
 800f87a:	4610      	mov	r0, r2
 800f87c:	4798      	blx	r3
 800f87e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f880:	e029      	b.n	800f8d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f882:	6839      	ldr	r1, [r7, #0]
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f000 fa2a 	bl	800fcde <USBD_CtlError>
        err++;
 800f88a:	7afb      	ldrb	r3, [r7, #11]
 800f88c:	3301      	adds	r3, #1
 800f88e:	72fb      	strb	r3, [r7, #11]
      break;
 800f890:	e021      	b.n	800f8d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7c1b      	ldrb	r3, [r3, #16]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d10d      	bne.n	800f8b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8a2:	f107 0208 	add.w	r2, r7, #8
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	4798      	blx	r3
 800f8aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	2207      	movs	r2, #7
 800f8b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8b4:	e00f      	b.n	800f8d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fa10 	bl	800fcde <USBD_CtlError>
        err++;
 800f8be:	7afb      	ldrb	r3, [r7, #11]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	72fb      	strb	r3, [r7, #11]
      break;
 800f8c4:	e007      	b.n	800f8d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f8c6:	6839      	ldr	r1, [r7, #0]
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fa08 	bl	800fcde <USBD_CtlError>
      err++;
 800f8ce:	7afb      	ldrb	r3, [r7, #11]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	72fb      	strb	r3, [r7, #11]
      break;
 800f8d4:	bf00      	nop
  }

  if (err != 0U)
 800f8d6:	7afb      	ldrb	r3, [r7, #11]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d11e      	bne.n	800f91a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	88db      	ldrh	r3, [r3, #6]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d016      	beq.n	800f912 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f8e4:	893b      	ldrh	r3, [r7, #8]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00e      	beq.n	800f908 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	88da      	ldrh	r2, [r3, #6]
 800f8ee:	893b      	ldrh	r3, [r7, #8]
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	bf28      	it	cs
 800f8f4:	4613      	movcs	r3, r2
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f8fa:	893b      	ldrh	r3, [r7, #8]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	68f9      	ldr	r1, [r7, #12]
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f000 fa69 	bl	800fdd8 <USBD_CtlSendData>
 800f906:	e009      	b.n	800f91c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f908:	6839      	ldr	r1, [r7, #0]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f9e7 	bl	800fcde <USBD_CtlError>
 800f910:	e004      	b.n	800f91c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 faba 	bl	800fe8c <USBD_CtlSendStatus>
 800f918:	e000      	b.n	800f91c <USBD_GetDescriptor+0x2cc>
    return;
 800f91a:	bf00      	nop
  }
}
 800f91c:	3710      	adds	r7, #16
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop

0800f924 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	889b      	ldrh	r3, [r3, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d131      	bne.n	800f99a <USBD_SetAddress+0x76>
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	88db      	ldrh	r3, [r3, #6]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d12d      	bne.n	800f99a <USBD_SetAddress+0x76>
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	885b      	ldrh	r3, [r3, #2]
 800f942:	2b7f      	cmp	r3, #127	@ 0x7f
 800f944:	d829      	bhi.n	800f99a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	885b      	ldrh	r3, [r3, #2]
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f950:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d104      	bne.n	800f968 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f9bc 	bl	800fcde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f966:	e01d      	b.n	800f9a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	7bfa      	ldrb	r2, [r7, #15]
 800f96c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f970:	7bfb      	ldrb	r3, [r7, #15]
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 ff73 	bl	8010860 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 fa86 	bl	800fe8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f980:	7bfb      	ldrb	r3, [r7, #15]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d004      	beq.n	800f990 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2202      	movs	r2, #2
 800f98a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f98e:	e009      	b.n	800f9a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2201      	movs	r2, #1
 800f994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f998:	e004      	b.n	800f9a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f99e 	bl	800fcde <USBD_CtlError>
  }
}
 800f9a2:	bf00      	nop
 800f9a4:	bf00      	nop
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	885b      	ldrh	r3, [r3, #2]
 800f9be:	b2da      	uxtb	r2, r3
 800f9c0:	4b4e      	ldr	r3, [pc, #312]	@ (800fafc <USBD_SetConfig+0x150>)
 800f9c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f9c4:	4b4d      	ldr	r3, [pc, #308]	@ (800fafc <USBD_SetConfig+0x150>)
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d905      	bls.n	800f9d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f985 	bl	800fcde <USBD_CtlError>
    return USBD_FAIL;
 800f9d4:	2303      	movs	r3, #3
 800f9d6:	e08c      	b.n	800faf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d002      	beq.n	800f9ea <USBD_SetConfig+0x3e>
 800f9e4:	2b03      	cmp	r3, #3
 800f9e6:	d029      	beq.n	800fa3c <USBD_SetConfig+0x90>
 800f9e8:	e075      	b.n	800fad6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f9ea:	4b44      	ldr	r3, [pc, #272]	@ (800fafc <USBD_SetConfig+0x150>)
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d020      	beq.n	800fa34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f9f2:	4b42      	ldr	r3, [pc, #264]	@ (800fafc <USBD_SetConfig+0x150>)
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f9fc:	4b3f      	ldr	r3, [pc, #252]	@ (800fafc <USBD_SetConfig+0x150>)
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7fe ffe3 	bl	800e9ce <USBD_SetClassConfig>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fa0c:	7bfb      	ldrb	r3, [r7, #15]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d008      	beq.n	800fa24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fa12:	6839      	ldr	r1, [r7, #0]
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f000 f962 	bl	800fcde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa22:	e065      	b.n	800faf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 fa31 	bl	800fe8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2203      	movs	r2, #3
 800fa2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fa32:	e05d      	b.n	800faf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 fa29 	bl	800fe8c <USBD_CtlSendStatus>
      break;
 800fa3a:	e059      	b.n	800faf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fa3c:	4b2f      	ldr	r3, [pc, #188]	@ (800fafc <USBD_SetConfig+0x150>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d112      	bne.n	800fa6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2202      	movs	r2, #2
 800fa48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fa4c:	4b2b      	ldr	r3, [pc, #172]	@ (800fafc <USBD_SetConfig+0x150>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	461a      	mov	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa56:	4b29      	ldr	r3, [pc, #164]	@ (800fafc <USBD_SetConfig+0x150>)
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7fe ffd2 	bl	800ea06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 fa12 	bl	800fe8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa68:	e042      	b.n	800faf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fa6a:	4b24      	ldr	r3, [pc, #144]	@ (800fafc <USBD_SetConfig+0x150>)
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d02a      	beq.n	800face <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	4619      	mov	r1, r3
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7fe ffc0 	bl	800ea06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa86:	4b1d      	ldr	r3, [pc, #116]	@ (800fafc <USBD_SetConfig+0x150>)
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa90:	4b1a      	ldr	r3, [pc, #104]	@ (800fafc <USBD_SetConfig+0x150>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	4619      	mov	r1, r3
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7fe ff99 	bl	800e9ce <USBD_SetClassConfig>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00f      	beq.n	800fac6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f918 	bl	800fcde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7fe ffa5 	bl	800ea06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2202      	movs	r2, #2
 800fac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fac4:	e014      	b.n	800faf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f9e0 	bl	800fe8c <USBD_CtlSendStatus>
      break;
 800facc:	e010      	b.n	800faf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f9dc 	bl	800fe8c <USBD_CtlSendStatus>
      break;
 800fad4:	e00c      	b.n	800faf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f900 	bl	800fcde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fade:	4b07      	ldr	r3, [pc, #28]	@ (800fafc <USBD_SetConfig+0x150>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	4619      	mov	r1, r3
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7fe ff8e 	bl	800ea06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800faea:	2303      	movs	r3, #3
 800faec:	73fb      	strb	r3, [r7, #15]
      break;
 800faee:	bf00      	nop
  }

  return ret;
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	200011d8 	.word	0x200011d8

0800fb00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	88db      	ldrh	r3, [r3, #6]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d004      	beq.n	800fb1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 f8e2 	bl	800fcde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb1a:	e023      	b.n	800fb64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	dc02      	bgt.n	800fb2e <USBD_GetConfig+0x2e>
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	dc03      	bgt.n	800fb34 <USBD_GetConfig+0x34>
 800fb2c:	e015      	b.n	800fb5a <USBD_GetConfig+0x5a>
 800fb2e:	2b03      	cmp	r3, #3
 800fb30:	d00b      	beq.n	800fb4a <USBD_GetConfig+0x4a>
 800fb32:	e012      	b.n	800fb5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	3308      	adds	r3, #8
 800fb3e:	2201      	movs	r2, #1
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f948 	bl	800fdd8 <USBD_CtlSendData>
        break;
 800fb48:	e00c      	b.n	800fb64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	2201      	movs	r2, #1
 800fb50:	4619      	mov	r1, r3
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f940 	bl	800fdd8 <USBD_CtlSendData>
        break;
 800fb58:	e004      	b.n	800fb64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f8be 	bl	800fcde <USBD_CtlError>
        break;
 800fb62:	bf00      	nop
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
 800fb74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	d81e      	bhi.n	800fbc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	88db      	ldrh	r3, [r3, #6]
 800fb88:	2b02      	cmp	r3, #2
 800fb8a:	d004      	beq.n	800fb96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb8c:	6839      	ldr	r1, [r7, #0]
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 f8a5 	bl	800fcde <USBD_CtlError>
        break;
 800fb94:	e01a      	b.n	800fbcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2201      	movs	r2, #1
 800fb9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d005      	beq.n	800fbb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	f043 0202 	orr.w	r2, r3, #2
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	330c      	adds	r3, #12
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	4619      	mov	r1, r3
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 f90c 	bl	800fdd8 <USBD_CtlSendData>
      break;
 800fbc0:	e004      	b.n	800fbcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fbc2:	6839      	ldr	r1, [r7, #0]
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f88a 	bl	800fcde <USBD_CtlError>
      break;
 800fbca:	bf00      	nop
  }
}
 800fbcc:	bf00      	nop
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	885b      	ldrh	r3, [r3, #2]
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d107      	bne.n	800fbf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2201      	movs	r2, #1
 800fbea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f000 f94c 	bl	800fe8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fbf4:	e013      	b.n	800fc1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	885b      	ldrh	r3, [r3, #2]
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	d10b      	bne.n	800fc16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	889b      	ldrh	r3, [r3, #4]
 800fc02:	0a1b      	lsrs	r3, r3, #8
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f93c 	bl	800fe8c <USBD_CtlSendStatus>
}
 800fc14:	e003      	b.n	800fc1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fc16:	6839      	ldr	r1, [r7, #0]
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 f860 	bl	800fcde <USBD_CtlError>
}
 800fc1e:	bf00      	nop
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b082      	sub	sp, #8
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	3b01      	subs	r3, #1
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d80b      	bhi.n	800fc56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	885b      	ldrh	r3, [r3, #2]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d10c      	bne.n	800fc60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f91c 	bl	800fe8c <USBD_CtlSendStatus>
      }
      break;
 800fc54:	e004      	b.n	800fc60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fc56:	6839      	ldr	r1, [r7, #0]
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 f840 	bl	800fcde <USBD_CtlError>
      break;
 800fc5e:	e000      	b.n	800fc62 <USBD_ClrFeature+0x3c>
      break;
 800fc60:	bf00      	nop
  }
}
 800fc62:	bf00      	nop
 800fc64:	3708      	adds	r7, #8
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}

0800fc6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	781a      	ldrb	r2, [r3, #0]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	3301      	adds	r3, #1
 800fc84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	781a      	ldrb	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3301      	adds	r3, #1
 800fc92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f7ff fa40 	bl	800f11a <SWAPBYTE>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3301      	adds	r3, #1
 800fca6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f7ff fa33 	bl	800f11a <SWAPBYTE>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f7ff fa26 	bl	800f11a <SWAPBYTE>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	80da      	strh	r2, [r3, #6]
}
 800fcd6:	bf00      	nop
 800fcd8:	3710      	adds	r7, #16
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b082      	sub	sp, #8
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fce8:	2180      	movs	r1, #128	@ 0x80
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fd4e 	bl	801078c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fd4a 	bl	801078c <USBD_LL_StallEP>
}
 800fcf8:	bf00      	nop
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d042      	beq.n	800fd9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fd1a:	6938      	ldr	r0, [r7, #16]
 800fd1c:	f000 f842 	bl	800fda4 <USBD_GetLen>
 800fd20:	4603      	mov	r3, r0
 800fd22:	3301      	adds	r3, #1
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd2a:	d808      	bhi.n	800fd3e <USBD_GetString+0x3e>
 800fd2c:	6938      	ldr	r0, [r7, #16]
 800fd2e:	f000 f839 	bl	800fda4 <USBD_GetLen>
 800fd32:	4603      	mov	r3, r0
 800fd34:	3301      	adds	r3, #1
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	005b      	lsls	r3, r3, #1
 800fd3a:	b29a      	uxth	r2, r3
 800fd3c:	e001      	b.n	800fd42 <USBD_GetString+0x42>
 800fd3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	68ba      	ldr	r2, [r7, #8]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	7812      	ldrb	r2, [r2, #0]
 800fd50:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd52:	7dfb      	ldrb	r3, [r7, #23]
 800fd54:	3301      	adds	r3, #1
 800fd56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd58:	7dfb      	ldrb	r3, [r7, #23]
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	2203      	movs	r2, #3
 800fd60:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd62:	7dfb      	ldrb	r3, [r7, #23]
 800fd64:	3301      	adds	r3, #1
 800fd66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fd68:	e013      	b.n	800fd92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	4413      	add	r3, r2
 800fd70:	693a      	ldr	r2, [r7, #16]
 800fd72:	7812      	ldrb	r2, [r2, #0]
 800fd74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	613b      	str	r3, [r7, #16]
    idx++;
 800fd7c:	7dfb      	ldrb	r3, [r7, #23]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fd82:	7dfb      	ldrb	r3, [r7, #23]
 800fd84:	68ba      	ldr	r2, [r7, #8]
 800fd86:	4413      	add	r3, r2
 800fd88:	2200      	movs	r2, #0
 800fd8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800fd8c:	7dfb      	ldrb	r3, [r7, #23]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1e7      	bne.n	800fd6a <USBD_GetString+0x6a>
 800fd9a:	e000      	b.n	800fd9e <USBD_GetString+0x9e>
    return;
 800fd9c:	bf00      	nop
  }
}
 800fd9e:	3718      	adds	r7, #24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b085      	sub	sp, #20
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fdac:	2300      	movs	r3, #0
 800fdae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fdb4:	e005      	b.n	800fdc2 <USBD_GetLen+0x1e>
  {
    len++;
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1f5      	bne.n	800fdb6 <USBD_GetLen+0x12>
  }

  return len;
 800fdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3714      	adds	r7, #20
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2202      	movs	r2, #2
 800fde8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	68ba      	ldr	r2, [r7, #8]
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	68f8      	ldr	r0, [r7, #12]
 800fe00:	f000 fd4d 	bl	801089e <USBD_LL_Transmit>

  return USBD_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b084      	sub	sp, #16
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	60f8      	str	r0, [r7, #12]
 800fe16:	60b9      	str	r1, [r7, #8]
 800fe18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	2100      	movs	r1, #0
 800fe20:	68f8      	ldr	r0, [r7, #12]
 800fe22:	f000 fd3c 	bl	801089e <USBD_LL_Transmit>

  return USBD_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3710      	adds	r7, #16
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	2203      	movs	r2, #3
 800fe40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	687a      	ldr	r2, [r7, #4]
 800fe50:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	68ba      	ldr	r2, [r7, #8]
 800fe58:	2100      	movs	r1, #0
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f000 fd40 	bl	80108e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe60:	2300      	movs	r3, #0
}
 800fe62:	4618      	mov	r0, r3
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}

0800fe6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fe6a:	b580      	push	{r7, lr}
 800fe6c:	b084      	sub	sp, #16
 800fe6e:	af00      	add	r7, sp, #0
 800fe70:	60f8      	str	r0, [r7, #12]
 800fe72:	60b9      	str	r1, [r7, #8]
 800fe74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f000 fd2f 	bl	80108e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2204      	movs	r2, #4
 800fe98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	2200      	movs	r2, #0
 800fea0:	2100      	movs	r1, #0
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fcfb 	bl	801089e <USBD_LL_Transmit>

  return USBD_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b082      	sub	sp, #8
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	2205      	movs	r2, #5
 800febe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fec2:	2300      	movs	r3, #0
 800fec4:	2200      	movs	r2, #0
 800fec6:	2100      	movs	r1, #0
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fd09 	bl	80108e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fece:	2300      	movs	r3, #0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fedc:	2200      	movs	r2, #0
 800fede:	4912      	ldr	r1, [pc, #72]	@ (800ff28 <MX_USB_DEVICE_Init+0x50>)
 800fee0:	4812      	ldr	r0, [pc, #72]	@ (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800fee2:	f7fe fcf7 	bl	800e8d4 <USBD_Init>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800feec:	f7f3 fabe 	bl	800346c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fef0:	490f      	ldr	r1, [pc, #60]	@ (800ff30 <MX_USB_DEVICE_Init+0x58>)
 800fef2:	480e      	ldr	r0, [pc, #56]	@ (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800fef4:	f7fe fd1e 	bl	800e934 <USBD_RegisterClass>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d001      	beq.n	800ff02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fefe:	f7f3 fab5 	bl	800346c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff02:	490c      	ldr	r1, [pc, #48]	@ (800ff34 <MX_USB_DEVICE_Init+0x5c>)
 800ff04:	4809      	ldr	r0, [pc, #36]	@ (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800ff06:	f7fe fc15 	bl	800e734 <USBD_CDC_RegisterInterface>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d001      	beq.n	800ff14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff10:	f7f3 faac 	bl	800346c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff14:	4805      	ldr	r0, [pc, #20]	@ (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800ff16:	f7fe fd43 	bl	800e9a0 <USBD_Start>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d001      	beq.n	800ff24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff20:	f7f3 faa4 	bl	800346c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff24:	bf00      	nop
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	200000c4 	.word	0x200000c4
 800ff2c:	200011dc 	.word	0x200011dc
 800ff30:	20000028 	.word	0x20000028
 800ff34:	200000b0 	.word	0x200000b0

0800ff38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	4905      	ldr	r1, [pc, #20]	@ (800ff54 <CDC_Init_FS+0x1c>)
 800ff40:	4805      	ldr	r0, [pc, #20]	@ (800ff58 <CDC_Init_FS+0x20>)
 800ff42:	f7fe fc11 	bl	800e768 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff46:	4905      	ldr	r1, [pc, #20]	@ (800ff5c <CDC_Init_FS+0x24>)
 800ff48:	4803      	ldr	r0, [pc, #12]	@ (800ff58 <CDC_Init_FS+0x20>)
 800ff4a:	f7fe fc2f 	bl	800e7ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	200016b8 	.word	0x200016b8
 800ff58:	200011dc 	.word	0x200011dc
 800ff5c:	200014b8 	.word	0x200014b8

0800ff60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff60:	b480      	push	{r7}
 800ff62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	71fb      	strb	r3, [r7, #7]
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ff80:	79fb      	ldrb	r3, [r7, #7]
 800ff82:	2b23      	cmp	r3, #35	@ 0x23
 800ff84:	f200 8097 	bhi.w	80100b6 <CDC_Control_FS+0x146>
 800ff88:	a201      	add	r2, pc, #4	@ (adr r2, 800ff90 <CDC_Control_FS+0x20>)
 800ff8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff8e:	bf00      	nop
 800ff90:	080100b7 	.word	0x080100b7
 800ff94:	080100b7 	.word	0x080100b7
 800ff98:	080100b7 	.word	0x080100b7
 800ff9c:	080100b7 	.word	0x080100b7
 800ffa0:	080100b7 	.word	0x080100b7
 800ffa4:	080100b7 	.word	0x080100b7
 800ffa8:	080100b7 	.word	0x080100b7
 800ffac:	080100b7 	.word	0x080100b7
 800ffb0:	080100b7 	.word	0x080100b7
 800ffb4:	080100b7 	.word	0x080100b7
 800ffb8:	080100b7 	.word	0x080100b7
 800ffbc:	080100b7 	.word	0x080100b7
 800ffc0:	080100b7 	.word	0x080100b7
 800ffc4:	080100b7 	.word	0x080100b7
 800ffc8:	080100b7 	.word	0x080100b7
 800ffcc:	080100b7 	.word	0x080100b7
 800ffd0:	080100b7 	.word	0x080100b7
 800ffd4:	080100b7 	.word	0x080100b7
 800ffd8:	080100b7 	.word	0x080100b7
 800ffdc:	080100b7 	.word	0x080100b7
 800ffe0:	080100b7 	.word	0x080100b7
 800ffe4:	080100b7 	.word	0x080100b7
 800ffe8:	080100b7 	.word	0x080100b7
 800ffec:	080100b7 	.word	0x080100b7
 800fff0:	080100b7 	.word	0x080100b7
 800fff4:	080100b7 	.word	0x080100b7
 800fff8:	080100b7 	.word	0x080100b7
 800fffc:	080100b7 	.word	0x080100b7
 8010000:	080100b7 	.word	0x080100b7
 8010004:	080100b7 	.word	0x080100b7
 8010008:	080100b7 	.word	0x080100b7
 801000c:	080100b7 	.word	0x080100b7
 8010010:	08010021 	.word	0x08010021
 8010014:	08010063 	.word	0x08010063
 8010018:	080100b7 	.word	0x080100b7
 801001c:	080100b7 	.word	0x080100b7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	461a      	mov	r2, r3
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	3301      	adds	r3, #1
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	021b      	lsls	r3, r3, #8
 801002e:	431a      	orrs	r2, r3
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	3302      	adds	r3, #2
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	041b      	lsls	r3, r3, #16
 8010038:	431a      	orrs	r2, r3
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	3303      	adds	r3, #3
 801003e:	781b      	ldrb	r3, [r3, #0]
 8010040:	061b      	lsls	r3, r3, #24
 8010042:	4313      	orrs	r3, r2
 8010044:	4a20      	ldr	r2, [pc, #128]	@ (80100c8 <CDC_Control_FS+0x158>)
 8010046:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	791a      	ldrb	r2, [r3, #4]
 801004c:	4b1e      	ldr	r3, [pc, #120]	@ (80100c8 <CDC_Control_FS+0x158>)
 801004e:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	795a      	ldrb	r2, [r3, #5]
 8010054:	4b1c      	ldr	r3, [pc, #112]	@ (80100c8 <CDC_Control_FS+0x158>)
 8010056:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	799a      	ldrb	r2, [r3, #6]
 801005c:	4b1a      	ldr	r3, [pc, #104]	@ (80100c8 <CDC_Control_FS+0x158>)
 801005e:	719a      	strb	r2, [r3, #6]
    break;
 8010060:	e02a      	b.n	80100b8 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8010062:	4b19      	ldr	r3, [pc, #100]	@ (80100c8 <CDC_Control_FS+0x158>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	b2da      	uxtb	r2, r3
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 801006c:	4b16      	ldr	r3, [pc, #88]	@ (80100c8 <CDC_Control_FS+0x158>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	0a1a      	lsrs	r2, r3, #8
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	3301      	adds	r3, #1
 8010076:	b2d2      	uxtb	r2, r2
 8010078:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 801007a:	4b13      	ldr	r3, [pc, #76]	@ (80100c8 <CDC_Control_FS+0x158>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	0c1a      	lsrs	r2, r3, #16
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	3302      	adds	r3, #2
 8010084:	b2d2      	uxtb	r2, r2
 8010086:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8010088:	4b0f      	ldr	r3, [pc, #60]	@ (80100c8 <CDC_Control_FS+0x158>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	0e1a      	lsrs	r2, r3, #24
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	3303      	adds	r3, #3
 8010092:	b2d2      	uxtb	r2, r2
 8010094:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	3304      	adds	r3, #4
 801009a:	4a0b      	ldr	r2, [pc, #44]	@ (80100c8 <CDC_Control_FS+0x158>)
 801009c:	7912      	ldrb	r2, [r2, #4]
 801009e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	3305      	adds	r3, #5
 80100a4:	4a08      	ldr	r2, [pc, #32]	@ (80100c8 <CDC_Control_FS+0x158>)
 80100a6:	7952      	ldrb	r2, [r2, #5]
 80100a8:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	3306      	adds	r3, #6
 80100ae:	4a06      	ldr	r2, [pc, #24]	@ (80100c8 <CDC_Control_FS+0x158>)
 80100b0:	7992      	ldrb	r2, [r2, #6]
 80100b2:	701a      	strb	r2, [r3, #0]
	break;
 80100b4:	e000      	b.n	80100b8 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80100b6:	bf00      	nop
  }

  return (USBD_OK);
 80100b8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	370c      	adds	r7, #12
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	200000a8 	.word	0x200000a8

080100cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b082      	sub	sp, #8
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 80100d6:	4b0b      	ldr	r3, [pc, #44]	@ (8010104 <CDC_Receive_FS+0x38>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d006      	beq.n	80100ec <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 80100de:	4b09      	ldr	r3, [pc, #36]	@ (8010104 <CDC_Receive_FS+0x38>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	6812      	ldr	r2, [r2, #0]
 80100e6:	4611      	mov	r1, r2
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4806      	ldr	r0, [pc, #24]	@ (8010108 <CDC_Receive_FS+0x3c>)
 80100f0:	f7fe fb5c 	bl	800e7ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80100f4:	4804      	ldr	r0, [pc, #16]	@ (8010108 <CDC_Receive_FS+0x3c>)
 80100f6:	f7fe fbb7 	bl	800e868 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80100fa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3708      	adds	r7, #8
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	200018b8 	.word	0x200018b8
 8010108:	200011dc 	.word	0x200011dc

0801010c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b084      	sub	sp, #16
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	460b      	mov	r3, r1
 8010116:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010118:	2300      	movs	r3, #0
 801011a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801011c:	4b0d      	ldr	r3, [pc, #52]	@ (8010154 <CDC_Transmit_FS+0x48>)
 801011e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010122:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801012a:	2b00      	cmp	r3, #0
 801012c:	d001      	beq.n	8010132 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801012e:	2301      	movs	r3, #1
 8010130:	e00b      	b.n	801014a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010132:	887b      	ldrh	r3, [r7, #2]
 8010134:	461a      	mov	r2, r3
 8010136:	6879      	ldr	r1, [r7, #4]
 8010138:	4806      	ldr	r0, [pc, #24]	@ (8010154 <CDC_Transmit_FS+0x48>)
 801013a:	f7fe fb15 	bl	800e768 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801013e:	4805      	ldr	r0, [pc, #20]	@ (8010154 <CDC_Transmit_FS+0x48>)
 8010140:	f7fe fb52 	bl	800e7e8 <USBD_CDC_TransmitPacket>
 8010144:	4603      	mov	r3, r0
 8010146:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010148:	7bfb      	ldrb	r3, [r7, #15]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	200011dc 	.word	0x200011dc

08010158 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010158:	b480      	push	{r7}
 801015a:	b087      	sub	sp, #28
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	4613      	mov	r3, r2
 8010164:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010166:	2300      	movs	r3, #0
 8010168:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801016a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801016e:	4618      	mov	r0, r3
 8010170:	371c      	adds	r7, #28
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr
	...

0801017c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 8010184:	4a04      	ldr	r2, [pc, #16]	@ (8010198 <CDC_Attach_Rx+0x1c>)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6013      	str	r3, [r2, #0]
}
 801018a:	bf00      	nop
 801018c:	370c      	adds	r7, #12
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	200018b8 	.word	0x200018b8

0801019c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801019c:	b480      	push	{r7}
 801019e:	b083      	sub	sp, #12
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	6039      	str	r1, [r7, #0]
 80101a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	2212      	movs	r2, #18
 80101ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80101ae:	4b03      	ldr	r3, [pc, #12]	@ (80101bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80101b0:	4618      	mov	r0, r3
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr
 80101bc:	200000e0 	.word	0x200000e0

080101c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	4603      	mov	r3, r0
 80101c8:	6039      	str	r1, [r7, #0]
 80101ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	2204      	movs	r2, #4
 80101d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80101d2:	4b03      	ldr	r3, [pc, #12]	@ (80101e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr
 80101e0:	200000f4 	.word	0x200000f4

080101e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	4603      	mov	r3, r0
 80101ec:	6039      	str	r1, [r7, #0]
 80101ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101f0:	79fb      	ldrb	r3, [r7, #7]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d105      	bne.n	8010202 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101f6:	683a      	ldr	r2, [r7, #0]
 80101f8:	4907      	ldr	r1, [pc, #28]	@ (8010218 <USBD_FS_ProductStrDescriptor+0x34>)
 80101fa:	4808      	ldr	r0, [pc, #32]	@ (801021c <USBD_FS_ProductStrDescriptor+0x38>)
 80101fc:	f7ff fd80 	bl	800fd00 <USBD_GetString>
 8010200:	e004      	b.n	801020c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	4904      	ldr	r1, [pc, #16]	@ (8010218 <USBD_FS_ProductStrDescriptor+0x34>)
 8010206:	4805      	ldr	r0, [pc, #20]	@ (801021c <USBD_FS_ProductStrDescriptor+0x38>)
 8010208:	f7ff fd7a 	bl	800fd00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801020c:	4b02      	ldr	r3, [pc, #8]	@ (8010218 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	200018bc 	.word	0x200018bc
 801021c:	08011400 	.word	0x08011400

08010220 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	4603      	mov	r3, r0
 8010228:	6039      	str	r1, [r7, #0]
 801022a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	4904      	ldr	r1, [pc, #16]	@ (8010240 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010230:	4804      	ldr	r0, [pc, #16]	@ (8010244 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010232:	f7ff fd65 	bl	800fd00 <USBD_GetString>
  return USBD_StrDesc;
 8010236:	4b02      	ldr	r3, [pc, #8]	@ (8010240 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	200018bc 	.word	0x200018bc
 8010244:	08011418 	.word	0x08011418

08010248 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	6039      	str	r1, [r7, #0]
 8010252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	221a      	movs	r2, #26
 8010258:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801025a:	f000 f843 	bl	80102e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801025e:	4b02      	ldr	r3, [pc, #8]	@ (8010268 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}
 8010268:	200000f8 	.word	0x200000f8

0801026c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	4603      	mov	r3, r0
 8010274:	6039      	str	r1, [r7, #0]
 8010276:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d105      	bne.n	801028a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801027e:	683a      	ldr	r2, [r7, #0]
 8010280:	4907      	ldr	r1, [pc, #28]	@ (80102a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010282:	4808      	ldr	r0, [pc, #32]	@ (80102a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010284:	f7ff fd3c 	bl	800fd00 <USBD_GetString>
 8010288:	e004      	b.n	8010294 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	4904      	ldr	r1, [pc, #16]	@ (80102a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801028e:	4805      	ldr	r0, [pc, #20]	@ (80102a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010290:	f7ff fd36 	bl	800fd00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010294:	4b02      	ldr	r3, [pc, #8]	@ (80102a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010296:	4618      	mov	r0, r3
 8010298:	3708      	adds	r7, #8
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	200018bc 	.word	0x200018bc
 80102a4:	0801142c 	.word	0x0801142c

080102a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	4603      	mov	r3, r0
 80102b0:	6039      	str	r1, [r7, #0]
 80102b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80102b4:	79fb      	ldrb	r3, [r7, #7]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d105      	bne.n	80102c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	4907      	ldr	r1, [pc, #28]	@ (80102dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80102be:	4808      	ldr	r0, [pc, #32]	@ (80102e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102c0:	f7ff fd1e 	bl	800fd00 <USBD_GetString>
 80102c4:	e004      	b.n	80102d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80102c6:	683a      	ldr	r2, [r7, #0]
 80102c8:	4904      	ldr	r1, [pc, #16]	@ (80102dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80102ca:	4805      	ldr	r0, [pc, #20]	@ (80102e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80102cc:	f7ff fd18 	bl	800fd00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102d0:	4b02      	ldr	r3, [pc, #8]	@ (80102dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	200018bc 	.word	0x200018bc
 80102e0:	08011438 	.word	0x08011438

080102e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80102ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010328 <Get_SerialNum+0x44>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80102f0:	4b0e      	ldr	r3, [pc, #56]	@ (801032c <Get_SerialNum+0x48>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80102f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010330 <Get_SerialNum+0x4c>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4413      	add	r3, r2
 8010302:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d009      	beq.n	801031e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801030a:	2208      	movs	r2, #8
 801030c:	4909      	ldr	r1, [pc, #36]	@ (8010334 <Get_SerialNum+0x50>)
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f000 f814 	bl	801033c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010314:	2204      	movs	r2, #4
 8010316:	4908      	ldr	r1, [pc, #32]	@ (8010338 <Get_SerialNum+0x54>)
 8010318:	68b8      	ldr	r0, [r7, #8]
 801031a:	f000 f80f 	bl	801033c <IntToUnicode>
  }
}
 801031e:	bf00      	nop
 8010320:	3710      	adds	r7, #16
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	1fff7a10 	.word	0x1fff7a10
 801032c:	1fff7a14 	.word	0x1fff7a14
 8010330:	1fff7a18 	.word	0x1fff7a18
 8010334:	200000fa 	.word	0x200000fa
 8010338:	2000010a 	.word	0x2000010a

0801033c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801033c:	b480      	push	{r7}
 801033e:	b087      	sub	sp, #28
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	4613      	mov	r3, r2
 8010348:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801034a:	2300      	movs	r3, #0
 801034c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801034e:	2300      	movs	r3, #0
 8010350:	75fb      	strb	r3, [r7, #23]
 8010352:	e027      	b.n	80103a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	0f1b      	lsrs	r3, r3, #28
 8010358:	2b09      	cmp	r3, #9
 801035a:	d80b      	bhi.n	8010374 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	0f1b      	lsrs	r3, r3, #28
 8010360:	b2da      	uxtb	r2, r3
 8010362:	7dfb      	ldrb	r3, [r7, #23]
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	4619      	mov	r1, r3
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	440b      	add	r3, r1
 801036c:	3230      	adds	r2, #48	@ 0x30
 801036e:	b2d2      	uxtb	r2, r2
 8010370:	701a      	strb	r2, [r3, #0]
 8010372:	e00a      	b.n	801038a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	0f1b      	lsrs	r3, r3, #28
 8010378:	b2da      	uxtb	r2, r3
 801037a:	7dfb      	ldrb	r3, [r7, #23]
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	4619      	mov	r1, r3
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	440b      	add	r3, r1
 8010384:	3237      	adds	r2, #55	@ 0x37
 8010386:	b2d2      	uxtb	r2, r2
 8010388:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	011b      	lsls	r3, r3, #4
 801038e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010390:	7dfb      	ldrb	r3, [r7, #23]
 8010392:	005b      	lsls	r3, r3, #1
 8010394:	3301      	adds	r3, #1
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	4413      	add	r3, r2
 801039a:	2200      	movs	r2, #0
 801039c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801039e:	7dfb      	ldrb	r3, [r7, #23]
 80103a0:	3301      	adds	r3, #1
 80103a2:	75fb      	strb	r3, [r7, #23]
 80103a4:	7dfa      	ldrb	r2, [r7, #23]
 80103a6:	79fb      	ldrb	r3, [r7, #7]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d3d3      	bcc.n	8010354 <IntToUnicode+0x18>
  }
}
 80103ac:	bf00      	nop
 80103ae:	bf00      	nop
 80103b0:	371c      	adds	r7, #28
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
	...

080103bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b08a      	sub	sp, #40	@ 0x28
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103c4:	f107 0314 	add.w	r3, r7, #20
 80103c8:	2200      	movs	r2, #0
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	605a      	str	r2, [r3, #4]
 80103ce:	609a      	str	r2, [r3, #8]
 80103d0:	60da      	str	r2, [r3, #12]
 80103d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80103dc:	d13a      	bne.n	8010454 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103de:	2300      	movs	r3, #0
 80103e0:	613b      	str	r3, [r7, #16]
 80103e2:	4b1e      	ldr	r3, [pc, #120]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 80103e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103e6:	4a1d      	ldr	r2, [pc, #116]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 80103e8:	f043 0301 	orr.w	r3, r3, #1
 80103ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80103ee:	4b1b      	ldr	r3, [pc, #108]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 80103f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f2:	f003 0301 	and.w	r3, r3, #1
 80103f6:	613b      	str	r3, [r7, #16]
 80103f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80103fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80103fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010400:	2302      	movs	r3, #2
 8010402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010404:	2300      	movs	r3, #0
 8010406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010408:	2303      	movs	r3, #3
 801040a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801040c:	230a      	movs	r3, #10
 801040e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010410:	f107 0314 	add.w	r3, r7, #20
 8010414:	4619      	mov	r1, r3
 8010416:	4812      	ldr	r0, [pc, #72]	@ (8010460 <HAL_PCD_MspInit+0xa4>)
 8010418:	f7f4 fe86 	bl	8005128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801041c:	4b0f      	ldr	r3, [pc, #60]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 801041e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010420:	4a0e      	ldr	r2, [pc, #56]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 8010422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010426:	6353      	str	r3, [r2, #52]	@ 0x34
 8010428:	2300      	movs	r3, #0
 801042a:	60fb      	str	r3, [r7, #12]
 801042c:	4b0b      	ldr	r3, [pc, #44]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 801042e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010430:	4a0a      	ldr	r2, [pc, #40]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 8010432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010436:	6453      	str	r3, [r2, #68]	@ 0x44
 8010438:	4b08      	ldr	r3, [pc, #32]	@ (801045c <HAL_PCD_MspInit+0xa0>)
 801043a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801043c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8010444:	2200      	movs	r2, #0
 8010446:	2100      	movs	r1, #0
 8010448:	2043      	movs	r0, #67	@ 0x43
 801044a:	f7f4 fa1a 	bl	8004882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801044e:	2043      	movs	r0, #67	@ 0x43
 8010450:	f7f4 fa33 	bl	80048ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010454:	bf00      	nop
 8010456:	3728      	adds	r7, #40	@ 0x28
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	40023800 	.word	0x40023800
 8010460:	40020000 	.word	0x40020000

08010464 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010478:	4619      	mov	r1, r3
 801047a:	4610      	mov	r0, r2
 801047c:	f7fe fadd 	bl	800ea3a <USBD_LL_SetupStage>
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	6879      	ldr	r1, [r7, #4]
 801049e:	4613      	mov	r3, r2
 80104a0:	00db      	lsls	r3, r3, #3
 80104a2:	4413      	add	r3, r2
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	440b      	add	r3, r1
 80104a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	78fb      	ldrb	r3, [r7, #3]
 80104b0:	4619      	mov	r1, r3
 80104b2:	f7fe fb17 	bl	800eae4 <USBD_LL_DataOutStage>
}
 80104b6:	bf00      	nop
 80104b8:	3708      	adds	r7, #8
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}

080104be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104be:	b580      	push	{r7, lr}
 80104c0:	b082      	sub	sp, #8
 80104c2:	af00      	add	r7, sp, #0
 80104c4:	6078      	str	r0, [r7, #4]
 80104c6:	460b      	mov	r3, r1
 80104c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80104d0:	78fa      	ldrb	r2, [r7, #3]
 80104d2:	6879      	ldr	r1, [r7, #4]
 80104d4:	4613      	mov	r3, r2
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	4413      	add	r3, r2
 80104da:	009b      	lsls	r3, r3, #2
 80104dc:	440b      	add	r3, r1
 80104de:	3320      	adds	r3, #32
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	78fb      	ldrb	r3, [r7, #3]
 80104e4:	4619      	mov	r1, r3
 80104e6:	f7fe fbb0 	bl	800ec4a <USBD_LL_DataInStage>
}
 80104ea:	bf00      	nop
 80104ec:	3708      	adds	r7, #8
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}

080104f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010500:	4618      	mov	r0, r3
 8010502:	f7fe fcea 	bl	800eeda <USBD_LL_SOF>
}
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b084      	sub	sp, #16
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010516:	2301      	movs	r3, #1
 8010518:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	79db      	ldrb	r3, [r3, #7]
 801051e:	2b02      	cmp	r3, #2
 8010520:	d001      	beq.n	8010526 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010522:	f7f2 ffa3 	bl	800346c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801052c:	7bfa      	ldrb	r2, [r7, #15]
 801052e:	4611      	mov	r1, r2
 8010530:	4618      	mov	r0, r3
 8010532:	f7fe fc8e 	bl	800ee52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801053c:	4618      	mov	r0, r3
 801053e:	f7fe fc36 	bl	800edae <USBD_LL_Reset>
}
 8010542:	bf00      	nop
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801055a:	4618      	mov	r0, r3
 801055c:	f7fe fc89 	bl	800ee72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	6812      	ldr	r2, [r2, #0]
 801056e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010572:	f043 0301 	orr.w	r3, r3, #1
 8010576:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	7adb      	ldrb	r3, [r3, #11]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d005      	beq.n	801058c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010580:	4b04      	ldr	r3, [pc, #16]	@ (8010594 <HAL_PCD_SuspendCallback+0x48>)
 8010582:	691b      	ldr	r3, [r3, #16]
 8010584:	4a03      	ldr	r2, [pc, #12]	@ (8010594 <HAL_PCD_SuspendCallback+0x48>)
 8010586:	f043 0306 	orr.w	r3, r3, #6
 801058a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	e000ed00 	.word	0xe000ed00

08010598 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fe fc7f 	bl	800eeaa <USBD_LL_Resume>
}
 80105ac:	bf00      	nop
 80105ae:	3708      	adds	r7, #8
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80105c6:	78fa      	ldrb	r2, [r7, #3]
 80105c8:	4611      	mov	r1, r2
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fe fcd7 	bl	800ef7e <USBD_LL_IsoOUTIncomplete>
}
 80105d0:	bf00      	nop
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80105ea:	78fa      	ldrb	r2, [r7, #3]
 80105ec:	4611      	mov	r1, r2
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fe fc93 	bl	800ef1a <USBD_LL_IsoINIncomplete>
}
 80105f4:	bf00      	nop
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe fce9 	bl	800efe2 <USBD_LL_DevConnected>
}
 8010610:	bf00      	nop
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010626:	4618      	mov	r0, r3
 8010628:	f7fe fce6 	bl	800eff8 <USBD_LL_DevDisconnected>
}
 801062c:	bf00      	nop
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d13c      	bne.n	80106be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010644:	4a20      	ldr	r2, [pc, #128]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4a1e      	ldr	r2, [pc, #120]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010650:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010654:	4b1c      	ldr	r3, [pc, #112]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010656:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801065a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801065c:	4b1a      	ldr	r3, [pc, #104]	@ (80106c8 <USBD_LL_Init+0x94>)
 801065e:	2204      	movs	r2, #4
 8010660:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010662:	4b19      	ldr	r3, [pc, #100]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010664:	2202      	movs	r2, #2
 8010666:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010668:	4b17      	ldr	r3, [pc, #92]	@ (80106c8 <USBD_LL_Init+0x94>)
 801066a:	2200      	movs	r2, #0
 801066c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801066e:	4b16      	ldr	r3, [pc, #88]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010670:	2202      	movs	r2, #2
 8010672:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010674:	4b14      	ldr	r3, [pc, #80]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010676:	2200      	movs	r2, #0
 8010678:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801067a:	4b13      	ldr	r3, [pc, #76]	@ (80106c8 <USBD_LL_Init+0x94>)
 801067c:	2200      	movs	r2, #0
 801067e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010680:	4b11      	ldr	r3, [pc, #68]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010682:	2200      	movs	r2, #0
 8010684:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010686:	4b10      	ldr	r3, [pc, #64]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010688:	2200      	movs	r2, #0
 801068a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801068c:	4b0e      	ldr	r3, [pc, #56]	@ (80106c8 <USBD_LL_Init+0x94>)
 801068e:	2200      	movs	r2, #0
 8010690:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010692:	480d      	ldr	r0, [pc, #52]	@ (80106c8 <USBD_LL_Init+0x94>)
 8010694:	f7f8 fb09 	bl	8008caa <HAL_PCD_Init>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801069e:	f7f2 fee5 	bl	800346c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80106a2:	2180      	movs	r1, #128	@ 0x80
 80106a4:	4808      	ldr	r0, [pc, #32]	@ (80106c8 <USBD_LL_Init+0x94>)
 80106a6:	f7f9 fd36 	bl	800a116 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80106aa:	2240      	movs	r2, #64	@ 0x40
 80106ac:	2100      	movs	r1, #0
 80106ae:	4806      	ldr	r0, [pc, #24]	@ (80106c8 <USBD_LL_Init+0x94>)
 80106b0:	f7f9 fcea 	bl	800a088 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80106b4:	2280      	movs	r2, #128	@ 0x80
 80106b6:	2101      	movs	r1, #1
 80106b8:	4803      	ldr	r0, [pc, #12]	@ (80106c8 <USBD_LL_Init+0x94>)
 80106ba:	f7f9 fce5 	bl	800a088 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80106be:	2300      	movs	r3, #0
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3708      	adds	r7, #8
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bd80      	pop	{r7, pc}
 80106c8:	20001abc 	.word	0x20001abc

080106cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106d4:	2300      	movs	r3, #0
 80106d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106d8:	2300      	movs	r3, #0
 80106da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7f8 fbf0 	bl	8008ec8 <HAL_PCD_Start>
 80106e8:	4603      	mov	r3, r0
 80106ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	4618      	mov	r0, r3
 80106f0:	f000 f942 	bl	8010978 <USBD_Get_USB_Status>
 80106f4:	4603      	mov	r3, r0
 80106f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3710      	adds	r7, #16
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	4608      	mov	r0, r1
 801070c:	4611      	mov	r1, r2
 801070e:	461a      	mov	r2, r3
 8010710:	4603      	mov	r3, r0
 8010712:	70fb      	strb	r3, [r7, #3]
 8010714:	460b      	mov	r3, r1
 8010716:	70bb      	strb	r3, [r7, #2]
 8010718:	4613      	mov	r3, r2
 801071a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801071c:	2300      	movs	r3, #0
 801071e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801072a:	78bb      	ldrb	r3, [r7, #2]
 801072c:	883a      	ldrh	r2, [r7, #0]
 801072e:	78f9      	ldrb	r1, [r7, #3]
 8010730:	f7f9 f8c4 	bl	80098bc <HAL_PCD_EP_Open>
 8010734:	4603      	mov	r3, r0
 8010736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f91c 	bl	8010978 <USBD_Get_USB_Status>
 8010740:	4603      	mov	r3, r0
 8010742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010744:	7bbb      	ldrb	r3, [r7, #14]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801074e:	b580      	push	{r7, lr}
 8010750:	b084      	sub	sp, #16
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
 8010756:	460b      	mov	r3, r1
 8010758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801075a:	2300      	movs	r3, #0
 801075c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010768:	78fa      	ldrb	r2, [r7, #3]
 801076a:	4611      	mov	r1, r2
 801076c:	4618      	mov	r0, r3
 801076e:	f7f9 f90f 	bl	8009990 <HAL_PCD_EP_Close>
 8010772:	4603      	mov	r3, r0
 8010774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	4618      	mov	r0, r3
 801077a:	f000 f8fd 	bl	8010978 <USBD_Get_USB_Status>
 801077e:	4603      	mov	r3, r0
 8010780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010782:	7bbb      	ldrb	r3, [r7, #14]
}
 8010784:	4618      	mov	r0, r3
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	460b      	mov	r3, r1
 8010796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010798:	2300      	movs	r3, #0
 801079a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107a6:	78fa      	ldrb	r2, [r7, #3]
 80107a8:	4611      	mov	r1, r2
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7f9 f9c7 	bl	8009b3e <HAL_PCD_EP_SetStall>
 80107b0:	4603      	mov	r3, r0
 80107b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f000 f8de 	bl	8010978 <USBD_Get_USB_Status>
 80107bc:	4603      	mov	r3, r0
 80107be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107ca:	b580      	push	{r7, lr}
 80107cc:	b084      	sub	sp, #16
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
 80107d2:	460b      	mov	r3, r1
 80107d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107d6:	2300      	movs	r3, #0
 80107d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107da:	2300      	movs	r3, #0
 80107dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107e4:	78fa      	ldrb	r2, [r7, #3]
 80107e6:	4611      	mov	r1, r2
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7f9 fa0b 	bl	8009c04 <HAL_PCD_EP_ClrStall>
 80107ee:	4603      	mov	r3, r0
 80107f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107f2:	7bfb      	ldrb	r3, [r7, #15]
 80107f4:	4618      	mov	r0, r3
 80107f6:	f000 f8bf 	bl	8010978 <USBD_Get_USB_Status>
 80107fa:	4603      	mov	r3, r0
 80107fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3710      	adds	r7, #16
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	460b      	mov	r3, r1
 8010812:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801081a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801081c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010820:	2b00      	cmp	r3, #0
 8010822:	da0b      	bge.n	801083c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010824:	78fb      	ldrb	r3, [r7, #3]
 8010826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801082a:	68f9      	ldr	r1, [r7, #12]
 801082c:	4613      	mov	r3, r2
 801082e:	00db      	lsls	r3, r3, #3
 8010830:	4413      	add	r3, r2
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	440b      	add	r3, r1
 8010836:	3316      	adds	r3, #22
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	e00b      	b.n	8010854 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801083c:	78fb      	ldrb	r3, [r7, #3]
 801083e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010842:	68f9      	ldr	r1, [r7, #12]
 8010844:	4613      	mov	r3, r2
 8010846:	00db      	lsls	r3, r3, #3
 8010848:	4413      	add	r3, r2
 801084a:	009b      	lsls	r3, r3, #2
 801084c:	440b      	add	r3, r1
 801084e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010852:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010854:	4618      	mov	r0, r3
 8010856:	3714      	adds	r7, #20
 8010858:	46bd      	mov	sp, r7
 801085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085e:	4770      	bx	lr

08010860 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	460b      	mov	r3, r1
 801086a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801086c:	2300      	movs	r3, #0
 801086e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010870:	2300      	movs	r3, #0
 8010872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801087a:	78fa      	ldrb	r2, [r7, #3]
 801087c:	4611      	mov	r1, r2
 801087e:	4618      	mov	r0, r3
 8010880:	f7f8 fff8 	bl	8009874 <HAL_PCD_SetAddress>
 8010884:	4603      	mov	r3, r0
 8010886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010888:	7bfb      	ldrb	r3, [r7, #15]
 801088a:	4618      	mov	r0, r3
 801088c:	f000 f874 	bl	8010978 <USBD_Get_USB_Status>
 8010890:	4603      	mov	r3, r0
 8010892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010894:	7bbb      	ldrb	r3, [r7, #14]
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801089e:	b580      	push	{r7, lr}
 80108a0:	b086      	sub	sp, #24
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	60f8      	str	r0, [r7, #12]
 80108a6:	607a      	str	r2, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
 80108aa:	460b      	mov	r3, r1
 80108ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108bc:	7af9      	ldrb	r1, [r7, #11]
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	f7f9 f902 	bl	8009aca <HAL_PCD_EP_Transmit>
 80108c6:	4603      	mov	r3, r0
 80108c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108ca:	7dfb      	ldrb	r3, [r7, #23]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 f853 	bl	8010978 <USBD_Get_USB_Status>
 80108d2:	4603      	mov	r3, r0
 80108d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3718      	adds	r7, #24
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	607a      	str	r2, [r7, #4]
 80108ea:	603b      	str	r3, [r7, #0]
 80108ec:	460b      	mov	r3, r1
 80108ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108f4:	2300      	movs	r3, #0
 80108f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108fe:	7af9      	ldrb	r1, [r7, #11]
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	f7f9 f88e 	bl	8009a24 <HAL_PCD_EP_Receive>
 8010908:	4603      	mov	r3, r0
 801090a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801090c:	7dfb      	ldrb	r3, [r7, #23]
 801090e:	4618      	mov	r0, r3
 8010910:	f000 f832 	bl	8010978 <USBD_Get_USB_Status>
 8010914:	4603      	mov	r3, r0
 8010916:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010918:	7dbb      	ldrb	r3, [r7, #22]
}
 801091a:	4618      	mov	r0, r3
 801091c:	3718      	adds	r7, #24
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010922:	b580      	push	{r7, lr}
 8010924:	b082      	sub	sp, #8
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
 801092a:	460b      	mov	r3, r1
 801092c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010934:	78fa      	ldrb	r2, [r7, #3]
 8010936:	4611      	mov	r1, r2
 8010938:	4618      	mov	r0, r3
 801093a:	f7f9 f8ae 	bl	8009a9a <HAL_PCD_EP_GetRxCount>
 801093e:	4603      	mov	r3, r0
}
 8010940:	4618      	mov	r0, r3
 8010942:	3708      	adds	r7, #8
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}

08010948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010950:	4b03      	ldr	r3, [pc, #12]	@ (8010960 <USBD_static_malloc+0x18>)
}
 8010952:	4618      	mov	r0, r3
 8010954:	370c      	adds	r7, #12
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	20001fa0 	.word	0x20001fa0

08010964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]

}
 801096c:	bf00      	nop
 801096e:	370c      	adds	r7, #12
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr

08010978 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010978:	b480      	push	{r7}
 801097a:	b085      	sub	sp, #20
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010986:	79fb      	ldrb	r3, [r7, #7]
 8010988:	2b03      	cmp	r3, #3
 801098a:	d817      	bhi.n	80109bc <USBD_Get_USB_Status+0x44>
 801098c:	a201      	add	r2, pc, #4	@ (adr r2, 8010994 <USBD_Get_USB_Status+0x1c>)
 801098e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010992:	bf00      	nop
 8010994:	080109a5 	.word	0x080109a5
 8010998:	080109ab 	.word	0x080109ab
 801099c:	080109b1 	.word	0x080109b1
 80109a0:	080109b7 	.word	0x080109b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80109a4:	2300      	movs	r3, #0
 80109a6:	73fb      	strb	r3, [r7, #15]
    break;
 80109a8:	e00b      	b.n	80109c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109aa:	2303      	movs	r3, #3
 80109ac:	73fb      	strb	r3, [r7, #15]
    break;
 80109ae:	e008      	b.n	80109c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80109b0:	2301      	movs	r3, #1
 80109b2:	73fb      	strb	r3, [r7, #15]
    break;
 80109b4:	e005      	b.n	80109c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80109b6:	2303      	movs	r3, #3
 80109b8:	73fb      	strb	r3, [r7, #15]
    break;
 80109ba:	e002      	b.n	80109c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80109bc:	2303      	movs	r3, #3
 80109be:	73fb      	strb	r3, [r7, #15]
    break;
 80109c0:	bf00      	nop
  }
  return usb_status;
 80109c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <siprintf>:
 80109d0:	b40e      	push	{r1, r2, r3}
 80109d2:	b510      	push	{r4, lr}
 80109d4:	b09d      	sub	sp, #116	@ 0x74
 80109d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80109d8:	9002      	str	r0, [sp, #8]
 80109da:	9006      	str	r0, [sp, #24]
 80109dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80109e0:	480a      	ldr	r0, [pc, #40]	@ (8010a0c <siprintf+0x3c>)
 80109e2:	9107      	str	r1, [sp, #28]
 80109e4:	9104      	str	r1, [sp, #16]
 80109e6:	490a      	ldr	r1, [pc, #40]	@ (8010a10 <siprintf+0x40>)
 80109e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ec:	9105      	str	r1, [sp, #20]
 80109ee:	2400      	movs	r4, #0
 80109f0:	a902      	add	r1, sp, #8
 80109f2:	6800      	ldr	r0, [r0, #0]
 80109f4:	9301      	str	r3, [sp, #4]
 80109f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80109f8:	f000 f9a2 	bl	8010d40 <_svfiprintf_r>
 80109fc:	9b02      	ldr	r3, [sp, #8]
 80109fe:	701c      	strb	r4, [r3, #0]
 8010a00:	b01d      	add	sp, #116	@ 0x74
 8010a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a06:	b003      	add	sp, #12
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	20000114 	.word	0x20000114
 8010a10:	ffff0208 	.word	0xffff0208

08010a14 <memset>:
 8010a14:	4402      	add	r2, r0
 8010a16:	4603      	mov	r3, r0
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d100      	bne.n	8010a1e <memset+0xa>
 8010a1c:	4770      	bx	lr
 8010a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8010a22:	e7f9      	b.n	8010a18 <memset+0x4>

08010a24 <__errno>:
 8010a24:	4b01      	ldr	r3, [pc, #4]	@ (8010a2c <__errno+0x8>)
 8010a26:	6818      	ldr	r0, [r3, #0]
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop
 8010a2c:	20000114 	.word	0x20000114

08010a30 <__libc_init_array>:
 8010a30:	b570      	push	{r4, r5, r6, lr}
 8010a32:	4d0d      	ldr	r5, [pc, #52]	@ (8010a68 <__libc_init_array+0x38>)
 8010a34:	4c0d      	ldr	r4, [pc, #52]	@ (8010a6c <__libc_init_array+0x3c>)
 8010a36:	1b64      	subs	r4, r4, r5
 8010a38:	10a4      	asrs	r4, r4, #2
 8010a3a:	2600      	movs	r6, #0
 8010a3c:	42a6      	cmp	r6, r4
 8010a3e:	d109      	bne.n	8010a54 <__libc_init_array+0x24>
 8010a40:	4d0b      	ldr	r5, [pc, #44]	@ (8010a70 <__libc_init_array+0x40>)
 8010a42:	4c0c      	ldr	r4, [pc, #48]	@ (8010a74 <__libc_init_array+0x44>)
 8010a44:	f000 fc64 	bl	8011310 <_init>
 8010a48:	1b64      	subs	r4, r4, r5
 8010a4a:	10a4      	asrs	r4, r4, #2
 8010a4c:	2600      	movs	r6, #0
 8010a4e:	42a6      	cmp	r6, r4
 8010a50:	d105      	bne.n	8010a5e <__libc_init_array+0x2e>
 8010a52:	bd70      	pop	{r4, r5, r6, pc}
 8010a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a58:	4798      	blx	r3
 8010a5a:	3601      	adds	r6, #1
 8010a5c:	e7ee      	b.n	8010a3c <__libc_init_array+0xc>
 8010a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a62:	4798      	blx	r3
 8010a64:	3601      	adds	r6, #1
 8010a66:	e7f2      	b.n	8010a4e <__libc_init_array+0x1e>
 8010a68:	08012578 	.word	0x08012578
 8010a6c:	08012578 	.word	0x08012578
 8010a70:	08012578 	.word	0x08012578
 8010a74:	0801257c 	.word	0x0801257c

08010a78 <__retarget_lock_acquire_recursive>:
 8010a78:	4770      	bx	lr

08010a7a <__retarget_lock_release_recursive>:
 8010a7a:	4770      	bx	lr

08010a7c <memcpy>:
 8010a7c:	440a      	add	r2, r1
 8010a7e:	4291      	cmp	r1, r2
 8010a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8010a84:	d100      	bne.n	8010a88 <memcpy+0xc>
 8010a86:	4770      	bx	lr
 8010a88:	b510      	push	{r4, lr}
 8010a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a92:	4291      	cmp	r1, r2
 8010a94:	d1f9      	bne.n	8010a8a <memcpy+0xe>
 8010a96:	bd10      	pop	{r4, pc}

08010a98 <_free_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4605      	mov	r5, r0
 8010a9c:	2900      	cmp	r1, #0
 8010a9e:	d041      	beq.n	8010b24 <_free_r+0x8c>
 8010aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aa4:	1f0c      	subs	r4, r1, #4
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	bfb8      	it	lt
 8010aaa:	18e4      	addlt	r4, r4, r3
 8010aac:	f000 f8e0 	bl	8010c70 <__malloc_lock>
 8010ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8010b28 <_free_r+0x90>)
 8010ab2:	6813      	ldr	r3, [r2, #0]
 8010ab4:	b933      	cbnz	r3, 8010ac4 <_free_r+0x2c>
 8010ab6:	6063      	str	r3, [r4, #4]
 8010ab8:	6014      	str	r4, [r2, #0]
 8010aba:	4628      	mov	r0, r5
 8010abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ac0:	f000 b8dc 	b.w	8010c7c <__malloc_unlock>
 8010ac4:	42a3      	cmp	r3, r4
 8010ac6:	d908      	bls.n	8010ada <_free_r+0x42>
 8010ac8:	6820      	ldr	r0, [r4, #0]
 8010aca:	1821      	adds	r1, r4, r0
 8010acc:	428b      	cmp	r3, r1
 8010ace:	bf01      	itttt	eq
 8010ad0:	6819      	ldreq	r1, [r3, #0]
 8010ad2:	685b      	ldreq	r3, [r3, #4]
 8010ad4:	1809      	addeq	r1, r1, r0
 8010ad6:	6021      	streq	r1, [r4, #0]
 8010ad8:	e7ed      	b.n	8010ab6 <_free_r+0x1e>
 8010ada:	461a      	mov	r2, r3
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	b10b      	cbz	r3, 8010ae4 <_free_r+0x4c>
 8010ae0:	42a3      	cmp	r3, r4
 8010ae2:	d9fa      	bls.n	8010ada <_free_r+0x42>
 8010ae4:	6811      	ldr	r1, [r2, #0]
 8010ae6:	1850      	adds	r0, r2, r1
 8010ae8:	42a0      	cmp	r0, r4
 8010aea:	d10b      	bne.n	8010b04 <_free_r+0x6c>
 8010aec:	6820      	ldr	r0, [r4, #0]
 8010aee:	4401      	add	r1, r0
 8010af0:	1850      	adds	r0, r2, r1
 8010af2:	4283      	cmp	r3, r0
 8010af4:	6011      	str	r1, [r2, #0]
 8010af6:	d1e0      	bne.n	8010aba <_free_r+0x22>
 8010af8:	6818      	ldr	r0, [r3, #0]
 8010afa:	685b      	ldr	r3, [r3, #4]
 8010afc:	6053      	str	r3, [r2, #4]
 8010afe:	4408      	add	r0, r1
 8010b00:	6010      	str	r0, [r2, #0]
 8010b02:	e7da      	b.n	8010aba <_free_r+0x22>
 8010b04:	d902      	bls.n	8010b0c <_free_r+0x74>
 8010b06:	230c      	movs	r3, #12
 8010b08:	602b      	str	r3, [r5, #0]
 8010b0a:	e7d6      	b.n	8010aba <_free_r+0x22>
 8010b0c:	6820      	ldr	r0, [r4, #0]
 8010b0e:	1821      	adds	r1, r4, r0
 8010b10:	428b      	cmp	r3, r1
 8010b12:	bf04      	itt	eq
 8010b14:	6819      	ldreq	r1, [r3, #0]
 8010b16:	685b      	ldreq	r3, [r3, #4]
 8010b18:	6063      	str	r3, [r4, #4]
 8010b1a:	bf04      	itt	eq
 8010b1c:	1809      	addeq	r1, r1, r0
 8010b1e:	6021      	streq	r1, [r4, #0]
 8010b20:	6054      	str	r4, [r2, #4]
 8010b22:	e7ca      	b.n	8010aba <_free_r+0x22>
 8010b24:	bd38      	pop	{r3, r4, r5, pc}
 8010b26:	bf00      	nop
 8010b28:	20002304 	.word	0x20002304

08010b2c <sbrk_aligned>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	4e0f      	ldr	r6, [pc, #60]	@ (8010b6c <sbrk_aligned+0x40>)
 8010b30:	460c      	mov	r4, r1
 8010b32:	6831      	ldr	r1, [r6, #0]
 8010b34:	4605      	mov	r5, r0
 8010b36:	b911      	cbnz	r1, 8010b3e <sbrk_aligned+0x12>
 8010b38:	f000 fba4 	bl	8011284 <_sbrk_r>
 8010b3c:	6030      	str	r0, [r6, #0]
 8010b3e:	4621      	mov	r1, r4
 8010b40:	4628      	mov	r0, r5
 8010b42:	f000 fb9f 	bl	8011284 <_sbrk_r>
 8010b46:	1c43      	adds	r3, r0, #1
 8010b48:	d103      	bne.n	8010b52 <sbrk_aligned+0x26>
 8010b4a:	f04f 34ff 	mov.w	r4, #4294967295
 8010b4e:	4620      	mov	r0, r4
 8010b50:	bd70      	pop	{r4, r5, r6, pc}
 8010b52:	1cc4      	adds	r4, r0, #3
 8010b54:	f024 0403 	bic.w	r4, r4, #3
 8010b58:	42a0      	cmp	r0, r4
 8010b5a:	d0f8      	beq.n	8010b4e <sbrk_aligned+0x22>
 8010b5c:	1a21      	subs	r1, r4, r0
 8010b5e:	4628      	mov	r0, r5
 8010b60:	f000 fb90 	bl	8011284 <_sbrk_r>
 8010b64:	3001      	adds	r0, #1
 8010b66:	d1f2      	bne.n	8010b4e <sbrk_aligned+0x22>
 8010b68:	e7ef      	b.n	8010b4a <sbrk_aligned+0x1e>
 8010b6a:	bf00      	nop
 8010b6c:	20002300 	.word	0x20002300

08010b70 <_malloc_r>:
 8010b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b74:	1ccd      	adds	r5, r1, #3
 8010b76:	f025 0503 	bic.w	r5, r5, #3
 8010b7a:	3508      	adds	r5, #8
 8010b7c:	2d0c      	cmp	r5, #12
 8010b7e:	bf38      	it	cc
 8010b80:	250c      	movcc	r5, #12
 8010b82:	2d00      	cmp	r5, #0
 8010b84:	4606      	mov	r6, r0
 8010b86:	db01      	blt.n	8010b8c <_malloc_r+0x1c>
 8010b88:	42a9      	cmp	r1, r5
 8010b8a:	d904      	bls.n	8010b96 <_malloc_r+0x26>
 8010b8c:	230c      	movs	r3, #12
 8010b8e:	6033      	str	r3, [r6, #0]
 8010b90:	2000      	movs	r0, #0
 8010b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c6c <_malloc_r+0xfc>
 8010b9a:	f000 f869 	bl	8010c70 <__malloc_lock>
 8010b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba2:	461c      	mov	r4, r3
 8010ba4:	bb44      	cbnz	r4, 8010bf8 <_malloc_r+0x88>
 8010ba6:	4629      	mov	r1, r5
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f7ff ffbf 	bl	8010b2c <sbrk_aligned>
 8010bae:	1c43      	adds	r3, r0, #1
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	d158      	bne.n	8010c66 <_malloc_r+0xf6>
 8010bb4:	f8d8 4000 	ldr.w	r4, [r8]
 8010bb8:	4627      	mov	r7, r4
 8010bba:	2f00      	cmp	r7, #0
 8010bbc:	d143      	bne.n	8010c46 <_malloc_r+0xd6>
 8010bbe:	2c00      	cmp	r4, #0
 8010bc0:	d04b      	beq.n	8010c5a <_malloc_r+0xea>
 8010bc2:	6823      	ldr	r3, [r4, #0]
 8010bc4:	4639      	mov	r1, r7
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	eb04 0903 	add.w	r9, r4, r3
 8010bcc:	f000 fb5a 	bl	8011284 <_sbrk_r>
 8010bd0:	4581      	cmp	r9, r0
 8010bd2:	d142      	bne.n	8010c5a <_malloc_r+0xea>
 8010bd4:	6821      	ldr	r1, [r4, #0]
 8010bd6:	1a6d      	subs	r5, r5, r1
 8010bd8:	4629      	mov	r1, r5
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f7ff ffa6 	bl	8010b2c <sbrk_aligned>
 8010be0:	3001      	adds	r0, #1
 8010be2:	d03a      	beq.n	8010c5a <_malloc_r+0xea>
 8010be4:	6823      	ldr	r3, [r4, #0]
 8010be6:	442b      	add	r3, r5
 8010be8:	6023      	str	r3, [r4, #0]
 8010bea:	f8d8 3000 	ldr.w	r3, [r8]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	bb62      	cbnz	r2, 8010c4c <_malloc_r+0xdc>
 8010bf2:	f8c8 7000 	str.w	r7, [r8]
 8010bf6:	e00f      	b.n	8010c18 <_malloc_r+0xa8>
 8010bf8:	6822      	ldr	r2, [r4, #0]
 8010bfa:	1b52      	subs	r2, r2, r5
 8010bfc:	d420      	bmi.n	8010c40 <_malloc_r+0xd0>
 8010bfe:	2a0b      	cmp	r2, #11
 8010c00:	d917      	bls.n	8010c32 <_malloc_r+0xc2>
 8010c02:	1961      	adds	r1, r4, r5
 8010c04:	42a3      	cmp	r3, r4
 8010c06:	6025      	str	r5, [r4, #0]
 8010c08:	bf18      	it	ne
 8010c0a:	6059      	strne	r1, [r3, #4]
 8010c0c:	6863      	ldr	r3, [r4, #4]
 8010c0e:	bf08      	it	eq
 8010c10:	f8c8 1000 	streq.w	r1, [r8]
 8010c14:	5162      	str	r2, [r4, r5]
 8010c16:	604b      	str	r3, [r1, #4]
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f000 f82f 	bl	8010c7c <__malloc_unlock>
 8010c1e:	f104 000b 	add.w	r0, r4, #11
 8010c22:	1d23      	adds	r3, r4, #4
 8010c24:	f020 0007 	bic.w	r0, r0, #7
 8010c28:	1ac2      	subs	r2, r0, r3
 8010c2a:	bf1c      	itt	ne
 8010c2c:	1a1b      	subne	r3, r3, r0
 8010c2e:	50a3      	strne	r3, [r4, r2]
 8010c30:	e7af      	b.n	8010b92 <_malloc_r+0x22>
 8010c32:	6862      	ldr	r2, [r4, #4]
 8010c34:	42a3      	cmp	r3, r4
 8010c36:	bf0c      	ite	eq
 8010c38:	f8c8 2000 	streq.w	r2, [r8]
 8010c3c:	605a      	strne	r2, [r3, #4]
 8010c3e:	e7eb      	b.n	8010c18 <_malloc_r+0xa8>
 8010c40:	4623      	mov	r3, r4
 8010c42:	6864      	ldr	r4, [r4, #4]
 8010c44:	e7ae      	b.n	8010ba4 <_malloc_r+0x34>
 8010c46:	463c      	mov	r4, r7
 8010c48:	687f      	ldr	r7, [r7, #4]
 8010c4a:	e7b6      	b.n	8010bba <_malloc_r+0x4a>
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	42a3      	cmp	r3, r4
 8010c52:	d1fb      	bne.n	8010c4c <_malloc_r+0xdc>
 8010c54:	2300      	movs	r3, #0
 8010c56:	6053      	str	r3, [r2, #4]
 8010c58:	e7de      	b.n	8010c18 <_malloc_r+0xa8>
 8010c5a:	230c      	movs	r3, #12
 8010c5c:	6033      	str	r3, [r6, #0]
 8010c5e:	4630      	mov	r0, r6
 8010c60:	f000 f80c 	bl	8010c7c <__malloc_unlock>
 8010c64:	e794      	b.n	8010b90 <_malloc_r+0x20>
 8010c66:	6005      	str	r5, [r0, #0]
 8010c68:	e7d6      	b.n	8010c18 <_malloc_r+0xa8>
 8010c6a:	bf00      	nop
 8010c6c:	20002304 	.word	0x20002304

08010c70 <__malloc_lock>:
 8010c70:	4801      	ldr	r0, [pc, #4]	@ (8010c78 <__malloc_lock+0x8>)
 8010c72:	f7ff bf01 	b.w	8010a78 <__retarget_lock_acquire_recursive>
 8010c76:	bf00      	nop
 8010c78:	200022fc 	.word	0x200022fc

08010c7c <__malloc_unlock>:
 8010c7c:	4801      	ldr	r0, [pc, #4]	@ (8010c84 <__malloc_unlock+0x8>)
 8010c7e:	f7ff befc 	b.w	8010a7a <__retarget_lock_release_recursive>
 8010c82:	bf00      	nop
 8010c84:	200022fc 	.word	0x200022fc

08010c88 <__ssputs_r>:
 8010c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c8c:	688e      	ldr	r6, [r1, #8]
 8010c8e:	461f      	mov	r7, r3
 8010c90:	42be      	cmp	r6, r7
 8010c92:	680b      	ldr	r3, [r1, #0]
 8010c94:	4682      	mov	sl, r0
 8010c96:	460c      	mov	r4, r1
 8010c98:	4690      	mov	r8, r2
 8010c9a:	d82d      	bhi.n	8010cf8 <__ssputs_r+0x70>
 8010c9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ca0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ca4:	d026      	beq.n	8010cf4 <__ssputs_r+0x6c>
 8010ca6:	6965      	ldr	r5, [r4, #20]
 8010ca8:	6909      	ldr	r1, [r1, #16]
 8010caa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cae:	eba3 0901 	sub.w	r9, r3, r1
 8010cb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cb6:	1c7b      	adds	r3, r7, #1
 8010cb8:	444b      	add	r3, r9
 8010cba:	106d      	asrs	r5, r5, #1
 8010cbc:	429d      	cmp	r5, r3
 8010cbe:	bf38      	it	cc
 8010cc0:	461d      	movcc	r5, r3
 8010cc2:	0553      	lsls	r3, r2, #21
 8010cc4:	d527      	bpl.n	8010d16 <__ssputs_r+0x8e>
 8010cc6:	4629      	mov	r1, r5
 8010cc8:	f7ff ff52 	bl	8010b70 <_malloc_r>
 8010ccc:	4606      	mov	r6, r0
 8010cce:	b360      	cbz	r0, 8010d2a <__ssputs_r+0xa2>
 8010cd0:	6921      	ldr	r1, [r4, #16]
 8010cd2:	464a      	mov	r2, r9
 8010cd4:	f7ff fed2 	bl	8010a7c <memcpy>
 8010cd8:	89a3      	ldrh	r3, [r4, #12]
 8010cda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ce2:	81a3      	strh	r3, [r4, #12]
 8010ce4:	6126      	str	r6, [r4, #16]
 8010ce6:	6165      	str	r5, [r4, #20]
 8010ce8:	444e      	add	r6, r9
 8010cea:	eba5 0509 	sub.w	r5, r5, r9
 8010cee:	6026      	str	r6, [r4, #0]
 8010cf0:	60a5      	str	r5, [r4, #8]
 8010cf2:	463e      	mov	r6, r7
 8010cf4:	42be      	cmp	r6, r7
 8010cf6:	d900      	bls.n	8010cfa <__ssputs_r+0x72>
 8010cf8:	463e      	mov	r6, r7
 8010cfa:	6820      	ldr	r0, [r4, #0]
 8010cfc:	4632      	mov	r2, r6
 8010cfe:	4641      	mov	r1, r8
 8010d00:	f000 faa6 	bl	8011250 <memmove>
 8010d04:	68a3      	ldr	r3, [r4, #8]
 8010d06:	1b9b      	subs	r3, r3, r6
 8010d08:	60a3      	str	r3, [r4, #8]
 8010d0a:	6823      	ldr	r3, [r4, #0]
 8010d0c:	4433      	add	r3, r6
 8010d0e:	6023      	str	r3, [r4, #0]
 8010d10:	2000      	movs	r0, #0
 8010d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d16:	462a      	mov	r2, r5
 8010d18:	f000 fac4 	bl	80112a4 <_realloc_r>
 8010d1c:	4606      	mov	r6, r0
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	d1e0      	bne.n	8010ce4 <__ssputs_r+0x5c>
 8010d22:	6921      	ldr	r1, [r4, #16]
 8010d24:	4650      	mov	r0, sl
 8010d26:	f7ff feb7 	bl	8010a98 <_free_r>
 8010d2a:	230c      	movs	r3, #12
 8010d2c:	f8ca 3000 	str.w	r3, [sl]
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d36:	81a3      	strh	r3, [r4, #12]
 8010d38:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3c:	e7e9      	b.n	8010d12 <__ssputs_r+0x8a>
	...

08010d40 <_svfiprintf_r>:
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	4698      	mov	r8, r3
 8010d46:	898b      	ldrh	r3, [r1, #12]
 8010d48:	061b      	lsls	r3, r3, #24
 8010d4a:	b09d      	sub	sp, #116	@ 0x74
 8010d4c:	4607      	mov	r7, r0
 8010d4e:	460d      	mov	r5, r1
 8010d50:	4614      	mov	r4, r2
 8010d52:	d510      	bpl.n	8010d76 <_svfiprintf_r+0x36>
 8010d54:	690b      	ldr	r3, [r1, #16]
 8010d56:	b973      	cbnz	r3, 8010d76 <_svfiprintf_r+0x36>
 8010d58:	2140      	movs	r1, #64	@ 0x40
 8010d5a:	f7ff ff09 	bl	8010b70 <_malloc_r>
 8010d5e:	6028      	str	r0, [r5, #0]
 8010d60:	6128      	str	r0, [r5, #16]
 8010d62:	b930      	cbnz	r0, 8010d72 <_svfiprintf_r+0x32>
 8010d64:	230c      	movs	r3, #12
 8010d66:	603b      	str	r3, [r7, #0]
 8010d68:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6c:	b01d      	add	sp, #116	@ 0x74
 8010d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d72:	2340      	movs	r3, #64	@ 0x40
 8010d74:	616b      	str	r3, [r5, #20]
 8010d76:	2300      	movs	r3, #0
 8010d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d7a:	2320      	movs	r3, #32
 8010d7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d84:	2330      	movs	r3, #48	@ 0x30
 8010d86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010f24 <_svfiprintf_r+0x1e4>
 8010d8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d8e:	f04f 0901 	mov.w	r9, #1
 8010d92:	4623      	mov	r3, r4
 8010d94:	469a      	mov	sl, r3
 8010d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d9a:	b10a      	cbz	r2, 8010da0 <_svfiprintf_r+0x60>
 8010d9c:	2a25      	cmp	r2, #37	@ 0x25
 8010d9e:	d1f9      	bne.n	8010d94 <_svfiprintf_r+0x54>
 8010da0:	ebba 0b04 	subs.w	fp, sl, r4
 8010da4:	d00b      	beq.n	8010dbe <_svfiprintf_r+0x7e>
 8010da6:	465b      	mov	r3, fp
 8010da8:	4622      	mov	r2, r4
 8010daa:	4629      	mov	r1, r5
 8010dac:	4638      	mov	r0, r7
 8010dae:	f7ff ff6b 	bl	8010c88 <__ssputs_r>
 8010db2:	3001      	adds	r0, #1
 8010db4:	f000 80a7 	beq.w	8010f06 <_svfiprintf_r+0x1c6>
 8010db8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dba:	445a      	add	r2, fp
 8010dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f000 809f 	beq.w	8010f06 <_svfiprintf_r+0x1c6>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	f04f 32ff 	mov.w	r2, #4294967295
 8010dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dd2:	f10a 0a01 	add.w	sl, sl, #1
 8010dd6:	9304      	str	r3, [sp, #16]
 8010dd8:	9307      	str	r3, [sp, #28]
 8010dda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010dde:	931a      	str	r3, [sp, #104]	@ 0x68
 8010de0:	4654      	mov	r4, sl
 8010de2:	2205      	movs	r2, #5
 8010de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010de8:	484e      	ldr	r0, [pc, #312]	@ (8010f24 <_svfiprintf_r+0x1e4>)
 8010dea:	f7ef f9f9 	bl	80001e0 <memchr>
 8010dee:	9a04      	ldr	r2, [sp, #16]
 8010df0:	b9d8      	cbnz	r0, 8010e2a <_svfiprintf_r+0xea>
 8010df2:	06d0      	lsls	r0, r2, #27
 8010df4:	bf44      	itt	mi
 8010df6:	2320      	movmi	r3, #32
 8010df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dfc:	0711      	lsls	r1, r2, #28
 8010dfe:	bf44      	itt	mi
 8010e00:	232b      	movmi	r3, #43	@ 0x2b
 8010e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010e06:	f89a 3000 	ldrb.w	r3, [sl]
 8010e0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e0c:	d015      	beq.n	8010e3a <_svfiprintf_r+0xfa>
 8010e0e:	9a07      	ldr	r2, [sp, #28]
 8010e10:	4654      	mov	r4, sl
 8010e12:	2000      	movs	r0, #0
 8010e14:	f04f 0c0a 	mov.w	ip, #10
 8010e18:	4621      	mov	r1, r4
 8010e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e1e:	3b30      	subs	r3, #48	@ 0x30
 8010e20:	2b09      	cmp	r3, #9
 8010e22:	d94b      	bls.n	8010ebc <_svfiprintf_r+0x17c>
 8010e24:	b1b0      	cbz	r0, 8010e54 <_svfiprintf_r+0x114>
 8010e26:	9207      	str	r2, [sp, #28]
 8010e28:	e014      	b.n	8010e54 <_svfiprintf_r+0x114>
 8010e2a:	eba0 0308 	sub.w	r3, r0, r8
 8010e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8010e32:	4313      	orrs	r3, r2
 8010e34:	9304      	str	r3, [sp, #16]
 8010e36:	46a2      	mov	sl, r4
 8010e38:	e7d2      	b.n	8010de0 <_svfiprintf_r+0xa0>
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	1d19      	adds	r1, r3, #4
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	9103      	str	r1, [sp, #12]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bfbb      	ittet	lt
 8010e46:	425b      	neglt	r3, r3
 8010e48:	f042 0202 	orrlt.w	r2, r2, #2
 8010e4c:	9307      	strge	r3, [sp, #28]
 8010e4e:	9307      	strlt	r3, [sp, #28]
 8010e50:	bfb8      	it	lt
 8010e52:	9204      	strlt	r2, [sp, #16]
 8010e54:	7823      	ldrb	r3, [r4, #0]
 8010e56:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e58:	d10a      	bne.n	8010e70 <_svfiprintf_r+0x130>
 8010e5a:	7863      	ldrb	r3, [r4, #1]
 8010e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e5e:	d132      	bne.n	8010ec6 <_svfiprintf_r+0x186>
 8010e60:	9b03      	ldr	r3, [sp, #12]
 8010e62:	1d1a      	adds	r2, r3, #4
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	9203      	str	r2, [sp, #12]
 8010e68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e6c:	3402      	adds	r4, #2
 8010e6e:	9305      	str	r3, [sp, #20]
 8010e70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f34 <_svfiprintf_r+0x1f4>
 8010e74:	7821      	ldrb	r1, [r4, #0]
 8010e76:	2203      	movs	r2, #3
 8010e78:	4650      	mov	r0, sl
 8010e7a:	f7ef f9b1 	bl	80001e0 <memchr>
 8010e7e:	b138      	cbz	r0, 8010e90 <_svfiprintf_r+0x150>
 8010e80:	9b04      	ldr	r3, [sp, #16]
 8010e82:	eba0 000a 	sub.w	r0, r0, sl
 8010e86:	2240      	movs	r2, #64	@ 0x40
 8010e88:	4082      	lsls	r2, r0
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	3401      	adds	r4, #1
 8010e8e:	9304      	str	r3, [sp, #16]
 8010e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e94:	4824      	ldr	r0, [pc, #144]	@ (8010f28 <_svfiprintf_r+0x1e8>)
 8010e96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e9a:	2206      	movs	r2, #6
 8010e9c:	f7ef f9a0 	bl	80001e0 <memchr>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d036      	beq.n	8010f12 <_svfiprintf_r+0x1d2>
 8010ea4:	4b21      	ldr	r3, [pc, #132]	@ (8010f2c <_svfiprintf_r+0x1ec>)
 8010ea6:	bb1b      	cbnz	r3, 8010ef0 <_svfiprintf_r+0x1b0>
 8010ea8:	9b03      	ldr	r3, [sp, #12]
 8010eaa:	3307      	adds	r3, #7
 8010eac:	f023 0307 	bic.w	r3, r3, #7
 8010eb0:	3308      	adds	r3, #8
 8010eb2:	9303      	str	r3, [sp, #12]
 8010eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010eb6:	4433      	add	r3, r6
 8010eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eba:	e76a      	b.n	8010d92 <_svfiprintf_r+0x52>
 8010ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ec0:	460c      	mov	r4, r1
 8010ec2:	2001      	movs	r0, #1
 8010ec4:	e7a8      	b.n	8010e18 <_svfiprintf_r+0xd8>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	3401      	adds	r4, #1
 8010eca:	9305      	str	r3, [sp, #20]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	f04f 0c0a 	mov.w	ip, #10
 8010ed2:	4620      	mov	r0, r4
 8010ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ed8:	3a30      	subs	r2, #48	@ 0x30
 8010eda:	2a09      	cmp	r2, #9
 8010edc:	d903      	bls.n	8010ee6 <_svfiprintf_r+0x1a6>
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d0c6      	beq.n	8010e70 <_svfiprintf_r+0x130>
 8010ee2:	9105      	str	r1, [sp, #20]
 8010ee4:	e7c4      	b.n	8010e70 <_svfiprintf_r+0x130>
 8010ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010eea:	4604      	mov	r4, r0
 8010eec:	2301      	movs	r3, #1
 8010eee:	e7f0      	b.n	8010ed2 <_svfiprintf_r+0x192>
 8010ef0:	ab03      	add	r3, sp, #12
 8010ef2:	9300      	str	r3, [sp, #0]
 8010ef4:	462a      	mov	r2, r5
 8010ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8010f30 <_svfiprintf_r+0x1f0>)
 8010ef8:	a904      	add	r1, sp, #16
 8010efa:	4638      	mov	r0, r7
 8010efc:	f3af 8000 	nop.w
 8010f00:	1c42      	adds	r2, r0, #1
 8010f02:	4606      	mov	r6, r0
 8010f04:	d1d6      	bne.n	8010eb4 <_svfiprintf_r+0x174>
 8010f06:	89ab      	ldrh	r3, [r5, #12]
 8010f08:	065b      	lsls	r3, r3, #25
 8010f0a:	f53f af2d 	bmi.w	8010d68 <_svfiprintf_r+0x28>
 8010f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f10:	e72c      	b.n	8010d6c <_svfiprintf_r+0x2c>
 8010f12:	ab03      	add	r3, sp, #12
 8010f14:	9300      	str	r3, [sp, #0]
 8010f16:	462a      	mov	r2, r5
 8010f18:	4b05      	ldr	r3, [pc, #20]	@ (8010f30 <_svfiprintf_r+0x1f0>)
 8010f1a:	a904      	add	r1, sp, #16
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f000 f879 	bl	8011014 <_printf_i>
 8010f22:	e7ed      	b.n	8010f00 <_svfiprintf_r+0x1c0>
 8010f24:	0801253c 	.word	0x0801253c
 8010f28:	08012546 	.word	0x08012546
 8010f2c:	00000000 	.word	0x00000000
 8010f30:	08010c89 	.word	0x08010c89
 8010f34:	08012542 	.word	0x08012542

08010f38 <_printf_common>:
 8010f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f3c:	4616      	mov	r6, r2
 8010f3e:	4698      	mov	r8, r3
 8010f40:	688a      	ldr	r2, [r1, #8]
 8010f42:	690b      	ldr	r3, [r1, #16]
 8010f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	bfb8      	it	lt
 8010f4c:	4613      	movlt	r3, r2
 8010f4e:	6033      	str	r3, [r6, #0]
 8010f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f54:	4607      	mov	r7, r0
 8010f56:	460c      	mov	r4, r1
 8010f58:	b10a      	cbz	r2, 8010f5e <_printf_common+0x26>
 8010f5a:	3301      	adds	r3, #1
 8010f5c:	6033      	str	r3, [r6, #0]
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	0699      	lsls	r1, r3, #26
 8010f62:	bf42      	ittt	mi
 8010f64:	6833      	ldrmi	r3, [r6, #0]
 8010f66:	3302      	addmi	r3, #2
 8010f68:	6033      	strmi	r3, [r6, #0]
 8010f6a:	6825      	ldr	r5, [r4, #0]
 8010f6c:	f015 0506 	ands.w	r5, r5, #6
 8010f70:	d106      	bne.n	8010f80 <_printf_common+0x48>
 8010f72:	f104 0a19 	add.w	sl, r4, #25
 8010f76:	68e3      	ldr	r3, [r4, #12]
 8010f78:	6832      	ldr	r2, [r6, #0]
 8010f7a:	1a9b      	subs	r3, r3, r2
 8010f7c:	42ab      	cmp	r3, r5
 8010f7e:	dc26      	bgt.n	8010fce <_printf_common+0x96>
 8010f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f84:	6822      	ldr	r2, [r4, #0]
 8010f86:	3b00      	subs	r3, #0
 8010f88:	bf18      	it	ne
 8010f8a:	2301      	movne	r3, #1
 8010f8c:	0692      	lsls	r2, r2, #26
 8010f8e:	d42b      	bmi.n	8010fe8 <_printf_common+0xb0>
 8010f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f94:	4641      	mov	r1, r8
 8010f96:	4638      	mov	r0, r7
 8010f98:	47c8      	blx	r9
 8010f9a:	3001      	adds	r0, #1
 8010f9c:	d01e      	beq.n	8010fdc <_printf_common+0xa4>
 8010f9e:	6823      	ldr	r3, [r4, #0]
 8010fa0:	6922      	ldr	r2, [r4, #16]
 8010fa2:	f003 0306 	and.w	r3, r3, #6
 8010fa6:	2b04      	cmp	r3, #4
 8010fa8:	bf02      	ittt	eq
 8010faa:	68e5      	ldreq	r5, [r4, #12]
 8010fac:	6833      	ldreq	r3, [r6, #0]
 8010fae:	1aed      	subeq	r5, r5, r3
 8010fb0:	68a3      	ldr	r3, [r4, #8]
 8010fb2:	bf0c      	ite	eq
 8010fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fb8:	2500      	movne	r5, #0
 8010fba:	4293      	cmp	r3, r2
 8010fbc:	bfc4      	itt	gt
 8010fbe:	1a9b      	subgt	r3, r3, r2
 8010fc0:	18ed      	addgt	r5, r5, r3
 8010fc2:	2600      	movs	r6, #0
 8010fc4:	341a      	adds	r4, #26
 8010fc6:	42b5      	cmp	r5, r6
 8010fc8:	d11a      	bne.n	8011000 <_printf_common+0xc8>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e008      	b.n	8010fe0 <_printf_common+0xa8>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	4652      	mov	r2, sl
 8010fd2:	4641      	mov	r1, r8
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	47c8      	blx	r9
 8010fd8:	3001      	adds	r0, #1
 8010fda:	d103      	bne.n	8010fe4 <_printf_common+0xac>
 8010fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe4:	3501      	adds	r5, #1
 8010fe6:	e7c6      	b.n	8010f76 <_printf_common+0x3e>
 8010fe8:	18e1      	adds	r1, r4, r3
 8010fea:	1c5a      	adds	r2, r3, #1
 8010fec:	2030      	movs	r0, #48	@ 0x30
 8010fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010ff2:	4422      	add	r2, r4
 8010ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010ffc:	3302      	adds	r3, #2
 8010ffe:	e7c7      	b.n	8010f90 <_printf_common+0x58>
 8011000:	2301      	movs	r3, #1
 8011002:	4622      	mov	r2, r4
 8011004:	4641      	mov	r1, r8
 8011006:	4638      	mov	r0, r7
 8011008:	47c8      	blx	r9
 801100a:	3001      	adds	r0, #1
 801100c:	d0e6      	beq.n	8010fdc <_printf_common+0xa4>
 801100e:	3601      	adds	r6, #1
 8011010:	e7d9      	b.n	8010fc6 <_printf_common+0x8e>
	...

08011014 <_printf_i>:
 8011014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011018:	7e0f      	ldrb	r7, [r1, #24]
 801101a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801101c:	2f78      	cmp	r7, #120	@ 0x78
 801101e:	4691      	mov	r9, r2
 8011020:	4680      	mov	r8, r0
 8011022:	460c      	mov	r4, r1
 8011024:	469a      	mov	sl, r3
 8011026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801102a:	d807      	bhi.n	801103c <_printf_i+0x28>
 801102c:	2f62      	cmp	r7, #98	@ 0x62
 801102e:	d80a      	bhi.n	8011046 <_printf_i+0x32>
 8011030:	2f00      	cmp	r7, #0
 8011032:	f000 80d1 	beq.w	80111d8 <_printf_i+0x1c4>
 8011036:	2f58      	cmp	r7, #88	@ 0x58
 8011038:	f000 80b8 	beq.w	80111ac <_printf_i+0x198>
 801103c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011044:	e03a      	b.n	80110bc <_printf_i+0xa8>
 8011046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801104a:	2b15      	cmp	r3, #21
 801104c:	d8f6      	bhi.n	801103c <_printf_i+0x28>
 801104e:	a101      	add	r1, pc, #4	@ (adr r1, 8011054 <_printf_i+0x40>)
 8011050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011054:	080110ad 	.word	0x080110ad
 8011058:	080110c1 	.word	0x080110c1
 801105c:	0801103d 	.word	0x0801103d
 8011060:	0801103d 	.word	0x0801103d
 8011064:	0801103d 	.word	0x0801103d
 8011068:	0801103d 	.word	0x0801103d
 801106c:	080110c1 	.word	0x080110c1
 8011070:	0801103d 	.word	0x0801103d
 8011074:	0801103d 	.word	0x0801103d
 8011078:	0801103d 	.word	0x0801103d
 801107c:	0801103d 	.word	0x0801103d
 8011080:	080111bf 	.word	0x080111bf
 8011084:	080110eb 	.word	0x080110eb
 8011088:	08011179 	.word	0x08011179
 801108c:	0801103d 	.word	0x0801103d
 8011090:	0801103d 	.word	0x0801103d
 8011094:	080111e1 	.word	0x080111e1
 8011098:	0801103d 	.word	0x0801103d
 801109c:	080110eb 	.word	0x080110eb
 80110a0:	0801103d 	.word	0x0801103d
 80110a4:	0801103d 	.word	0x0801103d
 80110a8:	08011181 	.word	0x08011181
 80110ac:	6833      	ldr	r3, [r6, #0]
 80110ae:	1d1a      	adds	r2, r3, #4
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	6032      	str	r2, [r6, #0]
 80110b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80110bc:	2301      	movs	r3, #1
 80110be:	e09c      	b.n	80111fa <_printf_i+0x1e6>
 80110c0:	6833      	ldr	r3, [r6, #0]
 80110c2:	6820      	ldr	r0, [r4, #0]
 80110c4:	1d19      	adds	r1, r3, #4
 80110c6:	6031      	str	r1, [r6, #0]
 80110c8:	0606      	lsls	r6, r0, #24
 80110ca:	d501      	bpl.n	80110d0 <_printf_i+0xbc>
 80110cc:	681d      	ldr	r5, [r3, #0]
 80110ce:	e003      	b.n	80110d8 <_printf_i+0xc4>
 80110d0:	0645      	lsls	r5, r0, #25
 80110d2:	d5fb      	bpl.n	80110cc <_printf_i+0xb8>
 80110d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80110d8:	2d00      	cmp	r5, #0
 80110da:	da03      	bge.n	80110e4 <_printf_i+0xd0>
 80110dc:	232d      	movs	r3, #45	@ 0x2d
 80110de:	426d      	negs	r5, r5
 80110e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110e4:	4858      	ldr	r0, [pc, #352]	@ (8011248 <_printf_i+0x234>)
 80110e6:	230a      	movs	r3, #10
 80110e8:	e011      	b.n	801110e <_printf_i+0xfa>
 80110ea:	6821      	ldr	r1, [r4, #0]
 80110ec:	6833      	ldr	r3, [r6, #0]
 80110ee:	0608      	lsls	r0, r1, #24
 80110f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80110f4:	d402      	bmi.n	80110fc <_printf_i+0xe8>
 80110f6:	0649      	lsls	r1, r1, #25
 80110f8:	bf48      	it	mi
 80110fa:	b2ad      	uxthmi	r5, r5
 80110fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80110fe:	4852      	ldr	r0, [pc, #328]	@ (8011248 <_printf_i+0x234>)
 8011100:	6033      	str	r3, [r6, #0]
 8011102:	bf14      	ite	ne
 8011104:	230a      	movne	r3, #10
 8011106:	2308      	moveq	r3, #8
 8011108:	2100      	movs	r1, #0
 801110a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801110e:	6866      	ldr	r6, [r4, #4]
 8011110:	60a6      	str	r6, [r4, #8]
 8011112:	2e00      	cmp	r6, #0
 8011114:	db05      	blt.n	8011122 <_printf_i+0x10e>
 8011116:	6821      	ldr	r1, [r4, #0]
 8011118:	432e      	orrs	r6, r5
 801111a:	f021 0104 	bic.w	r1, r1, #4
 801111e:	6021      	str	r1, [r4, #0]
 8011120:	d04b      	beq.n	80111ba <_printf_i+0x1a6>
 8011122:	4616      	mov	r6, r2
 8011124:	fbb5 f1f3 	udiv	r1, r5, r3
 8011128:	fb03 5711 	mls	r7, r3, r1, r5
 801112c:	5dc7      	ldrb	r7, [r0, r7]
 801112e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011132:	462f      	mov	r7, r5
 8011134:	42bb      	cmp	r3, r7
 8011136:	460d      	mov	r5, r1
 8011138:	d9f4      	bls.n	8011124 <_printf_i+0x110>
 801113a:	2b08      	cmp	r3, #8
 801113c:	d10b      	bne.n	8011156 <_printf_i+0x142>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	07df      	lsls	r7, r3, #31
 8011142:	d508      	bpl.n	8011156 <_printf_i+0x142>
 8011144:	6923      	ldr	r3, [r4, #16]
 8011146:	6861      	ldr	r1, [r4, #4]
 8011148:	4299      	cmp	r1, r3
 801114a:	bfde      	ittt	le
 801114c:	2330      	movle	r3, #48	@ 0x30
 801114e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011152:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011156:	1b92      	subs	r2, r2, r6
 8011158:	6122      	str	r2, [r4, #16]
 801115a:	f8cd a000 	str.w	sl, [sp]
 801115e:	464b      	mov	r3, r9
 8011160:	aa03      	add	r2, sp, #12
 8011162:	4621      	mov	r1, r4
 8011164:	4640      	mov	r0, r8
 8011166:	f7ff fee7 	bl	8010f38 <_printf_common>
 801116a:	3001      	adds	r0, #1
 801116c:	d14a      	bne.n	8011204 <_printf_i+0x1f0>
 801116e:	f04f 30ff 	mov.w	r0, #4294967295
 8011172:	b004      	add	sp, #16
 8011174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011178:	6823      	ldr	r3, [r4, #0]
 801117a:	f043 0320 	orr.w	r3, r3, #32
 801117e:	6023      	str	r3, [r4, #0]
 8011180:	4832      	ldr	r0, [pc, #200]	@ (801124c <_printf_i+0x238>)
 8011182:	2778      	movs	r7, #120	@ 0x78
 8011184:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011188:	6823      	ldr	r3, [r4, #0]
 801118a:	6831      	ldr	r1, [r6, #0]
 801118c:	061f      	lsls	r7, r3, #24
 801118e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011192:	d402      	bmi.n	801119a <_printf_i+0x186>
 8011194:	065f      	lsls	r7, r3, #25
 8011196:	bf48      	it	mi
 8011198:	b2ad      	uxthmi	r5, r5
 801119a:	6031      	str	r1, [r6, #0]
 801119c:	07d9      	lsls	r1, r3, #31
 801119e:	bf44      	itt	mi
 80111a0:	f043 0320 	orrmi.w	r3, r3, #32
 80111a4:	6023      	strmi	r3, [r4, #0]
 80111a6:	b11d      	cbz	r5, 80111b0 <_printf_i+0x19c>
 80111a8:	2310      	movs	r3, #16
 80111aa:	e7ad      	b.n	8011108 <_printf_i+0xf4>
 80111ac:	4826      	ldr	r0, [pc, #152]	@ (8011248 <_printf_i+0x234>)
 80111ae:	e7e9      	b.n	8011184 <_printf_i+0x170>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	f023 0320 	bic.w	r3, r3, #32
 80111b6:	6023      	str	r3, [r4, #0]
 80111b8:	e7f6      	b.n	80111a8 <_printf_i+0x194>
 80111ba:	4616      	mov	r6, r2
 80111bc:	e7bd      	b.n	801113a <_printf_i+0x126>
 80111be:	6833      	ldr	r3, [r6, #0]
 80111c0:	6825      	ldr	r5, [r4, #0]
 80111c2:	6961      	ldr	r1, [r4, #20]
 80111c4:	1d18      	adds	r0, r3, #4
 80111c6:	6030      	str	r0, [r6, #0]
 80111c8:	062e      	lsls	r6, r5, #24
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	d501      	bpl.n	80111d2 <_printf_i+0x1be>
 80111ce:	6019      	str	r1, [r3, #0]
 80111d0:	e002      	b.n	80111d8 <_printf_i+0x1c4>
 80111d2:	0668      	lsls	r0, r5, #25
 80111d4:	d5fb      	bpl.n	80111ce <_printf_i+0x1ba>
 80111d6:	8019      	strh	r1, [r3, #0]
 80111d8:	2300      	movs	r3, #0
 80111da:	6123      	str	r3, [r4, #16]
 80111dc:	4616      	mov	r6, r2
 80111de:	e7bc      	b.n	801115a <_printf_i+0x146>
 80111e0:	6833      	ldr	r3, [r6, #0]
 80111e2:	1d1a      	adds	r2, r3, #4
 80111e4:	6032      	str	r2, [r6, #0]
 80111e6:	681e      	ldr	r6, [r3, #0]
 80111e8:	6862      	ldr	r2, [r4, #4]
 80111ea:	2100      	movs	r1, #0
 80111ec:	4630      	mov	r0, r6
 80111ee:	f7ee fff7 	bl	80001e0 <memchr>
 80111f2:	b108      	cbz	r0, 80111f8 <_printf_i+0x1e4>
 80111f4:	1b80      	subs	r0, r0, r6
 80111f6:	6060      	str	r0, [r4, #4]
 80111f8:	6863      	ldr	r3, [r4, #4]
 80111fa:	6123      	str	r3, [r4, #16]
 80111fc:	2300      	movs	r3, #0
 80111fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011202:	e7aa      	b.n	801115a <_printf_i+0x146>
 8011204:	6923      	ldr	r3, [r4, #16]
 8011206:	4632      	mov	r2, r6
 8011208:	4649      	mov	r1, r9
 801120a:	4640      	mov	r0, r8
 801120c:	47d0      	blx	sl
 801120e:	3001      	adds	r0, #1
 8011210:	d0ad      	beq.n	801116e <_printf_i+0x15a>
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	079b      	lsls	r3, r3, #30
 8011216:	d413      	bmi.n	8011240 <_printf_i+0x22c>
 8011218:	68e0      	ldr	r0, [r4, #12]
 801121a:	9b03      	ldr	r3, [sp, #12]
 801121c:	4298      	cmp	r0, r3
 801121e:	bfb8      	it	lt
 8011220:	4618      	movlt	r0, r3
 8011222:	e7a6      	b.n	8011172 <_printf_i+0x15e>
 8011224:	2301      	movs	r3, #1
 8011226:	4632      	mov	r2, r6
 8011228:	4649      	mov	r1, r9
 801122a:	4640      	mov	r0, r8
 801122c:	47d0      	blx	sl
 801122e:	3001      	adds	r0, #1
 8011230:	d09d      	beq.n	801116e <_printf_i+0x15a>
 8011232:	3501      	adds	r5, #1
 8011234:	68e3      	ldr	r3, [r4, #12]
 8011236:	9903      	ldr	r1, [sp, #12]
 8011238:	1a5b      	subs	r3, r3, r1
 801123a:	42ab      	cmp	r3, r5
 801123c:	dcf2      	bgt.n	8011224 <_printf_i+0x210>
 801123e:	e7eb      	b.n	8011218 <_printf_i+0x204>
 8011240:	2500      	movs	r5, #0
 8011242:	f104 0619 	add.w	r6, r4, #25
 8011246:	e7f5      	b.n	8011234 <_printf_i+0x220>
 8011248:	0801254d 	.word	0x0801254d
 801124c:	0801255e 	.word	0x0801255e

08011250 <memmove>:
 8011250:	4288      	cmp	r0, r1
 8011252:	b510      	push	{r4, lr}
 8011254:	eb01 0402 	add.w	r4, r1, r2
 8011258:	d902      	bls.n	8011260 <memmove+0x10>
 801125a:	4284      	cmp	r4, r0
 801125c:	4623      	mov	r3, r4
 801125e:	d807      	bhi.n	8011270 <memmove+0x20>
 8011260:	1e43      	subs	r3, r0, #1
 8011262:	42a1      	cmp	r1, r4
 8011264:	d008      	beq.n	8011278 <memmove+0x28>
 8011266:	f811 2b01 	ldrb.w	r2, [r1], #1
 801126a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801126e:	e7f8      	b.n	8011262 <memmove+0x12>
 8011270:	4402      	add	r2, r0
 8011272:	4601      	mov	r1, r0
 8011274:	428a      	cmp	r2, r1
 8011276:	d100      	bne.n	801127a <memmove+0x2a>
 8011278:	bd10      	pop	{r4, pc}
 801127a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801127e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011282:	e7f7      	b.n	8011274 <memmove+0x24>

08011284 <_sbrk_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4d06      	ldr	r5, [pc, #24]	@ (80112a0 <_sbrk_r+0x1c>)
 8011288:	2300      	movs	r3, #0
 801128a:	4604      	mov	r4, r0
 801128c:	4608      	mov	r0, r1
 801128e:	602b      	str	r3, [r5, #0]
 8011290:	f7f2 fbf8 	bl	8003a84 <_sbrk>
 8011294:	1c43      	adds	r3, r0, #1
 8011296:	d102      	bne.n	801129e <_sbrk_r+0x1a>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	b103      	cbz	r3, 801129e <_sbrk_r+0x1a>
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	200022f8 	.word	0x200022f8

080112a4 <_realloc_r>:
 80112a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112a8:	4607      	mov	r7, r0
 80112aa:	4614      	mov	r4, r2
 80112ac:	460d      	mov	r5, r1
 80112ae:	b921      	cbnz	r1, 80112ba <_realloc_r+0x16>
 80112b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112b4:	4611      	mov	r1, r2
 80112b6:	f7ff bc5b 	b.w	8010b70 <_malloc_r>
 80112ba:	b92a      	cbnz	r2, 80112c8 <_realloc_r+0x24>
 80112bc:	f7ff fbec 	bl	8010a98 <_free_r>
 80112c0:	4625      	mov	r5, r4
 80112c2:	4628      	mov	r0, r5
 80112c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c8:	f000 f81a 	bl	8011300 <_malloc_usable_size_r>
 80112cc:	4284      	cmp	r4, r0
 80112ce:	4606      	mov	r6, r0
 80112d0:	d802      	bhi.n	80112d8 <_realloc_r+0x34>
 80112d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80112d6:	d8f4      	bhi.n	80112c2 <_realloc_r+0x1e>
 80112d8:	4621      	mov	r1, r4
 80112da:	4638      	mov	r0, r7
 80112dc:	f7ff fc48 	bl	8010b70 <_malloc_r>
 80112e0:	4680      	mov	r8, r0
 80112e2:	b908      	cbnz	r0, 80112e8 <_realloc_r+0x44>
 80112e4:	4645      	mov	r5, r8
 80112e6:	e7ec      	b.n	80112c2 <_realloc_r+0x1e>
 80112e8:	42b4      	cmp	r4, r6
 80112ea:	4622      	mov	r2, r4
 80112ec:	4629      	mov	r1, r5
 80112ee:	bf28      	it	cs
 80112f0:	4632      	movcs	r2, r6
 80112f2:	f7ff fbc3 	bl	8010a7c <memcpy>
 80112f6:	4629      	mov	r1, r5
 80112f8:	4638      	mov	r0, r7
 80112fa:	f7ff fbcd 	bl	8010a98 <_free_r>
 80112fe:	e7f1      	b.n	80112e4 <_realloc_r+0x40>

08011300 <_malloc_usable_size_r>:
 8011300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011304:	1f18      	subs	r0, r3, #4
 8011306:	2b00      	cmp	r3, #0
 8011308:	bfbc      	itt	lt
 801130a:	580b      	ldrlt	r3, [r1, r0]
 801130c:	18c0      	addlt	r0, r0, r3
 801130e:	4770      	bx	lr

08011310 <_init>:
 8011310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011312:	bf00      	nop
 8011314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011316:	bc08      	pop	{r3}
 8011318:	469e      	mov	lr, r3
 801131a:	4770      	bx	lr

0801131c <_fini>:
 801131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131e:	bf00      	nop
 8011320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011322:	bc08      	pop	{r3}
 8011324:	469e      	mov	lr, r3
 8011326:	4770      	bx	lr
