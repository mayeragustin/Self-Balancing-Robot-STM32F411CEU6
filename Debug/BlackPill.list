
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014264  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c10  08014404  08014404  00015404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016014  08016014  00018170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016014  08016014  00017014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801601c  0801601c  00018170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801601c  0801601c  0001701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016020  08016020  00017020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08016024  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002830  20000170  08016194  00018170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200029a0  08016194  000189a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002072d  00000000  00000000  000181a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000501a  00000000  00000000  000388cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf0  00000000  00000000  0003d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001657  00000000  00000000  0003f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d615  00000000  00000000  00040c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024de3  00000000  00000000  0005e244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5c7f  00000000  00000000  00083027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128ca6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008640  00000000  00000000  00128cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  0013132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080143ec 	.word	0x080143ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	080143ec 	.word	0x080143ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b988 	b.w	8000da4 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	468e      	mov	lr, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	4688      	mov	r8, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	d962      	bls.n	8000b88 <__udivmoddi4+0xdc>
 8000ac2:	fab2 f682 	clz	r6, r2
 8000ac6:	b14e      	cbz	r6, 8000adc <__udivmoddi4+0x30>
 8000ac8:	f1c6 0320 	rsb	r3, r6, #32
 8000acc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ad0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad4:	40b7      	lsls	r7, r6
 8000ad6:	ea43 0808 	orr.w	r8, r3, r8
 8000ada:	40b4      	lsls	r4, r6
 8000adc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae0:	fa1f fc87 	uxth.w	ip, r7
 8000ae4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000af2:	fb01 f20c 	mul.w	r2, r1, ip
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d909      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b00:	f080 80ea 	bcs.w	8000cd8 <__udivmoddi4+0x22c>
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f240 80e7 	bls.w	8000cd8 <__udivmoddi4+0x22c>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	443b      	add	r3, r7
 8000b0e:	1a9a      	subs	r2, r3, r2
 8000b10:	b2a3      	uxth	r3, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b22:	459c      	cmp	ip, r3
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0x8e>
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	f080 80d6 	bcs.w	8000cdc <__udivmoddi4+0x230>
 8000b30:	459c      	cmp	ip, r3
 8000b32:	f240 80d3 	bls.w	8000cdc <__udivmoddi4+0x230>
 8000b36:	443b      	add	r3, r7
 8000b38:	3802      	subs	r0, #2
 8000b3a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b3e:	eba3 030c 	sub.w	r3, r3, ip
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11d      	cbz	r5, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40f3      	lsrs	r3, r6
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d905      	bls.n	8000b62 <__udivmoddi4+0xb6>
 8000b56:	b10d      	cbz	r5, 8000b5c <__udivmoddi4+0xb0>
 8000b58:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e7f5      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b62:	fab3 f183 	clz	r1, r3
 8000b66:	2900      	cmp	r1, #0
 8000b68:	d146      	bne.n	8000bf8 <__udivmoddi4+0x14c>
 8000b6a:	4573      	cmp	r3, lr
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0xc8>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 8105 	bhi.w	8000d7e <__udivmoddi4+0x2d2>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e5      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b82:	e9c5 4800 	strd	r4, r8, [r5]
 8000b86:	e7e2      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f000 8090 	beq.w	8000cae <__udivmoddi4+0x202>
 8000b8e:	fab2 f682 	clz	r6, r2
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f040 80a4 	bne.w	8000ce0 <__udivmoddi4+0x234>
 8000b98:	1a8a      	subs	r2, r1, r2
 8000b9a:	0c03      	lsrs	r3, r0, #16
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000baa:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x11e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x11c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 80e0 	bhi.w	8000d88 <__udivmoddi4+0x2dc>
 8000bc8:	46c4      	mov	ip, r8
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bd0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bd4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bd8:	fb02 f404 	mul.w	r4, r2, r4
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x144>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x142>
 8000be8:	429c      	cmp	r4, r3
 8000bea:	f200 80ca 	bhi.w	8000d82 <__udivmoddi4+0x2d6>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	1b1b      	subs	r3, r3, r4
 8000bf2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bf6:	e7a5      	b.n	8000b44 <__udivmoddi4+0x98>
 8000bf8:	f1c1 0620 	rsb	r6, r1, #32
 8000bfc:	408b      	lsls	r3, r1
 8000bfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000c02:	431f      	orrs	r7, r3
 8000c04:	fa0e f401 	lsl.w	r4, lr, r1
 8000c08:	fa20 f306 	lsr.w	r3, r0, r6
 8000c0c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c10:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c14:	4323      	orrs	r3, r4
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	fa1f fc87 	uxth.w	ip, r7
 8000c1e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c22:	0c1c      	lsrs	r4, r3, #16
 8000c24:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c2c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c30:	45a6      	cmp	lr, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x1a0>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c3e:	f080 809c 	bcs.w	8000d7a <__udivmoddi4+0x2ce>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8099 	bls.w	8000d7a <__udivmoddi4+0x2ce>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 040e 	sub.w	r4, r4, lr
 8000c50:	fa1f fe83 	uxth.w	lr, r3
 8000c54:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c58:	fb09 4413 	mls	r4, r9, r3, r4
 8000c5c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c60:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x1ce>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c6e:	f080 8082 	bcs.w	8000d76 <__udivmoddi4+0x2ca>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	d97f      	bls.n	8000d76 <__udivmoddi4+0x2ca>
 8000c76:	3b02      	subs	r3, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c7e:	eba4 040c 	sub.w	r4, r4, ip
 8000c82:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c86:	4564      	cmp	r4, ip
 8000c88:	4673      	mov	r3, lr
 8000c8a:	46e1      	mov	r9, ip
 8000c8c:	d362      	bcc.n	8000d54 <__udivmoddi4+0x2a8>
 8000c8e:	d05f      	beq.n	8000d50 <__udivmoddi4+0x2a4>
 8000c90:	b15d      	cbz	r5, 8000caa <__udivmoddi4+0x1fe>
 8000c92:	ebb8 0203 	subs.w	r2, r8, r3
 8000c96:	eb64 0409 	sbc.w	r4, r4, r9
 8000c9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000ca2:	431e      	orrs	r6, r3
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	e9c5 6400 	strd	r6, r4, [r5]
 8000caa:	2100      	movs	r1, #0
 8000cac:	e74f      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000cae:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cb2:	0c01      	lsrs	r1, r0, #16
 8000cb4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	463c      	mov	r4, r7
 8000cc4:	46b8      	mov	r8, r7
 8000cc6:	46be      	mov	lr, r7
 8000cc8:	2620      	movs	r6, #32
 8000cca:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cce:	eba2 0208 	sub.w	r2, r2, r8
 8000cd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cd6:	e766      	b.n	8000ba6 <__udivmoddi4+0xfa>
 8000cd8:	4601      	mov	r1, r0
 8000cda:	e718      	b.n	8000b0e <__udivmoddi4+0x62>
 8000cdc:	4610      	mov	r0, r2
 8000cde:	e72c      	b.n	8000b3a <__udivmoddi4+0x8e>
 8000ce0:	f1c6 0220 	rsb	r2, r6, #32
 8000ce4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ce8:	40b7      	lsls	r7, r6
 8000cea:	40b1      	lsls	r1, r6
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cfa:	b2bc      	uxth	r4, r7
 8000cfc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb08 f904 	mul.w	r9, r8, r4
 8000d0a:	40b0      	lsls	r0, r6
 8000d0c:	4589      	cmp	r9, r1
 8000d0e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d12:	b280      	uxth	r0, r0
 8000d14:	d93e      	bls.n	8000d94 <__udivmoddi4+0x2e8>
 8000d16:	1879      	adds	r1, r7, r1
 8000d18:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d1c:	d201      	bcs.n	8000d22 <__udivmoddi4+0x276>
 8000d1e:	4589      	cmp	r9, r1
 8000d20:	d81f      	bhi.n	8000d62 <__udivmoddi4+0x2b6>
 8000d22:	eba1 0109 	sub.w	r1, r1, r9
 8000d26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d2a:	fb09 f804 	mul.w	r8, r9, r4
 8000d2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d32:	b292      	uxth	r2, r2
 8000d34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d38:	4542      	cmp	r2, r8
 8000d3a:	d229      	bcs.n	8000d90 <__udivmoddi4+0x2e4>
 8000d3c:	18ba      	adds	r2, r7, r2
 8000d3e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d42:	d2c4      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d44:	4542      	cmp	r2, r8
 8000d46:	d2c2      	bcs.n	8000cce <__udivmoddi4+0x222>
 8000d48:	f1a9 0102 	sub.w	r1, r9, #2
 8000d4c:	443a      	add	r2, r7
 8000d4e:	e7be      	b.n	8000cce <__udivmoddi4+0x222>
 8000d50:	45f0      	cmp	r8, lr
 8000d52:	d29d      	bcs.n	8000c90 <__udivmoddi4+0x1e4>
 8000d54:	ebbe 0302 	subs.w	r3, lr, r2
 8000d58:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	e796      	b.n	8000c90 <__udivmoddi4+0x1e4>
 8000d62:	eba7 0909 	sub.w	r9, r7, r9
 8000d66:	4449      	add	r1, r9
 8000d68:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d6c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d70:	fb09 f804 	mul.w	r8, r9, r4
 8000d74:	e7db      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d76:	4673      	mov	r3, lr
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1ce>
 8000d7a:	4650      	mov	r0, sl
 8000d7c:	e766      	b.n	8000c4c <__udivmoddi4+0x1a0>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e6fd      	b.n	8000b7e <__udivmoddi4+0xd2>
 8000d82:	443b      	add	r3, r7
 8000d84:	3a02      	subs	r2, #2
 8000d86:	e733      	b.n	8000bf0 <__udivmoddi4+0x144>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	e71c      	b.n	8000bca <__udivmoddi4+0x11e>
 8000d90:	4649      	mov	r1, r9
 8000d92:	e79c      	b.n	8000cce <__udivmoddi4+0x222>
 8000d94:	eba1 0109 	sub.w	r1, r1, r9
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fb09 f804 	mul.w	r8, r9, r4
 8000da2:	e7c4      	b.n	8000d2e <__udivmoddi4+0x282>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <ADC_Conversion_Cplt>:
static uint16_t mediaBuffer[ADC_MEDIA_SIZE][ADC_NUM_SENSORS] = {0};
static uint16_t sumData[ADC_NUM_SENSORS]= {0};
static uint8_t index = 0;


void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 8000da8:	b490      	push	{r4, r7}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e042      	b.n	8000e3e <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dbc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	4829      	ldr	r0, [pc, #164]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000dca:	4623      	mov	r3, r4
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4423      	add	r3, r4
 8000dd0:	4413      	add	r3, r2
 8000dd2:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	b291      	uxth	r1, r2
 8000ddc:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4a20      	ldr	r2, [pc, #128]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000de6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	440a      	add	r2, r1
 8000df8:	b291      	uxth	r1, r2
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	881c      	ldrh	r4, [r3, #0]
 8000e12:	4917      	ldr	r1, [pc, #92]	@ (8000e70 <ADC_Conversion_Cplt+0xc8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4403      	add	r3, r0
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <ADC_Conversion_Cplt+0xc0>)
 8000e26:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	6839      	ldr	r1, [r7, #0]
 8000e30:	440b      	add	r3, r1
 8000e32:	0952      	lsrs	r2, r2, #5
 8000e34:	b292      	uxth	r2, r2
 8000e36:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b08      	cmp	r3, #8
 8000e42:	d9b9      	bls.n	8000db8 <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000e44:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e4e:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <ADC_Conversion_Cplt+0xc4>)
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc90      	pop	{r4, r7}
 8000e66:	4770      	bx	lr
 8000e68:	200003cc 	.word	0x200003cc
 8000e6c:	200003de 	.word	0x200003de
 8000e70:	2000018c 	.word	0x2000018c

08000e74 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d849      	bhi.n	8000f18 <inputState+0xa4>
 8000e84:	a201      	add	r2, pc, #4	@ (adr r2, 8000e8c <inputState+0x18>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000ead 	.word	0x08000ead
 8000e90:	08000e9d 	.word	0x08000e9d
 8000e94:	08000eeb 	.word	0x08000eeb
 8000e98:	08000ebd 	.word	0x08000ebd
		case UP:
			if(stateInput->value == DOWN)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d13d      	bne.n	8000f20 <inputState+0xac>
				stateInput->state = FALLING;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	705a      	strb	r2, [r3, #1]
		break;
 8000eaa:	e039      	b.n	8000f20 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d137      	bne.n	8000f24 <inputState+0xb0>
				stateInput->state = RISING;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	705a      	strb	r2, [r3, #1]
		break;
 8000eba:	e033      	b.n	8000f24 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10e      	bne.n	8000ee2 <inputState+0x6e>
				stateInput->state = UP;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d027      	beq.n	8000f28 <inputState+0xb4>
					stateInput->stateChanged(RISING);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2003      	movs	r0, #3
 8000ede:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 8000ee0:	e022      	b.n	8000f28 <inputState+0xb4>
				stateInput->state = DOWN;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	705a      	strb	r2, [r3, #1]
		break;
 8000ee8:	e01e      	b.n	8000f28 <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10e      	bne.n	8000f10 <inputState+0x9c>
				stateInput->state = DOWN;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d012      	beq.n	8000f2c <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000f0e:	e00d      	b.n	8000f2c <inputState+0xb8>
				stateInput->state = UP;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	705a      	strb	r2, [r3, #1]
		break;
 8000f16:	e009      	b.n	8000f2c <inputState+0xb8>
		default:
		stateInput->state = UP;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	705a      	strb	r2, [r3, #1]
	}
}
 8000f1e:	e006      	b.n	8000f2e <inputState+0xba>
		break;
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <inputState+0xba>
		break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <inputState+0xba>
		break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <inputState+0xba>
		break;
 8000f2c:	bf00      	nop
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop

08000f38 <Debounce_Init>:

void Debounce_Init(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f3c:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <Debounce_Init+0x60>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e01d      	b.n	8000f80 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <Debounce_Init+0x60>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <Debounce_Init+0x64>)
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	440b      	add	r3, r1
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	3308      	adds	r3, #8
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <Debounce_Init+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4a0e      	ldr	r2, [pc, #56]	@ (8000f9c <Debounce_Init+0x64>)
 8000f64:	460b      	mov	r3, r1
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	440b      	add	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3304      	adds	r3, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <Debounce_Init+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <Debounce_Init+0x60>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <Debounce_Init+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0dd      	beq.n	8000f44 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 8000f88:	4b03      	ldr	r3, [pc, #12]	@ (8000f98 <Debounce_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	200003ec 	.word	0x200003ec
 8000f9c:	200003e0 	.word	0x200003e0

08000fa0 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <Debounce_Add+0x60>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <Debounce_Add+0x16>
		return 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e01d      	b.n	8000ff2 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <Debounce_Add+0x60>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4a11      	ldr	r2, [pc, #68]	@ (8001004 <Debounce_Add+0x64>)
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	440b      	add	r3, r1
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <Debounce_Add+0x60>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <Debounce_Add+0x64>)
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	440b      	add	r3, r1
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4413      	add	r3, r2
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <Debounce_Add+0x60>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	b2d1      	uxtb	r1, r2
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <Debounce_Add+0x60>)
 8000ff0:	7011      	strb	r1, [r2, #0]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200003ec 	.word	0x200003ec
 8001004:	200003e0 	.word	0x200003e0

08001008 <Debouncer_Task>:

void Debouncer_Task(){
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e021      	b.n	8001058 <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	4914      	ldr	r1, [pc, #80]	@ (8001068 <Debouncer_Task+0x60>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3308      	adds	r3, #8
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	79fc      	ldrb	r4, [r7, #7]
 8001028:	4798      	blx	r3
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <Debouncer_Task+0x60>)
 8001030:	4623      	mov	r3, r4
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4423      	add	r3, r4
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	460a      	mov	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <Debouncer_Task+0x60>)
 800104a:	4413      	add	r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff11 	bl	8000e74 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	3301      	adds	r3, #1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0da      	beq.n	8001014 <Debouncer_Task+0xc>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	200003e0 	.word	0x200003e0

0800106c <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);


void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 8001076:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <MPU6050_Set_I2C_Communication+0x24>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <MPU6050_Set_I2C_Communication+0x28>)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200003f0 	.word	0x200003f0
 8001094:	200003f4 	.word	0x200003f4

08001098 <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b0b7      	sub	sp, #220	@ 0xdc
 800109c:	af02      	add	r7, sp, #8
 800109e:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
	e_system status = SYS_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80010ac:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <MPU6050_Init+0x15c>)
 80010ae:	681c      	ldr	r4, [r3, #0]
 80010b0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	2201      	movs	r2, #1
 80010c0:	2175      	movs	r1, #117	@ 0x75
 80010c2:	20d0      	movs	r0, #208	@ 0xd0
 80010c4:	47a0      	blx	r4
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80010ce:	4413      	add	r3, r2
 80010d0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80010d4:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 80010d8:	2b68      	cmp	r3, #104	@ 0x68
 80010da:	f040 8084 	bne.w	80011e6 <MPU6050_Init+0x14e>
		data = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80010e4:	4b44      	ldr	r3, [pc, #272]	@ (80011f8 <MPU6050_Init+0x160>)
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80010ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	9200      	str	r2, [sp, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	216b      	movs	r1, #107	@ 0x6b
 80010fa:	20d0      	movs	r0, #208	@ 0xd0
 80010fc:	47a0      	blx	r4
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001106:	4413      	add	r3, r2
 8001108:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set data rate of 1 KHz (default)
		data = 0x07;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status +=I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <MPU6050_Init+0x160>)
 8001114:	681c      	ldr	r4, [r3, #0]
 8001116:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 800111a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	2119      	movs	r1, #25
 8001128:	20d0      	movs	r0, #208	@ 0xd0
 800112a:	47a0      	blx	r4
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001134:	4413      	add	r3, r2
 8001136:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8001140:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <MPU6050_Init+0x160>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	211c      	movs	r1, #28
 8001156:	20d0      	movs	r0, #208	@ 0xd0
 8001158:	47a0      	blx	r4
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001162:	4413      	add	r3, r2
 8001164:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MPU6050_Init+0x160>)
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 8001176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	2201      	movs	r2, #1
 8001182:	211b      	movs	r1, #27
 8001184:	20d0      	movs	r0, #208	@ 0xd0
 8001186:	47a0      	blx	r4
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8001190:	4413      	add	r3, r2
 8001192:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf

		// Set Digital Low Pass Filter
		data = 0x03;
 8001196:	2303      	movs	r3, #3
 8001198:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
		status += I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MPU6050_Init+0x160>)
 800119e:	681c      	ldr	r4, [r3, #0]
 80011a0:	f107 03ce 	add.w	r3, r7, #206	@ 0xce
 80011a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011a8:	9201      	str	r2, [sp, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	211a      	movs	r1, #26
 80011b2:	20d0      	movs	r0, #208	@ 0xd0
 80011b4:	47a0      	blx	r4
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011be:	4413      	add	r3, r2
 80011c0:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	23c4      	movs	r3, #196	@ 0xc4
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f012 f850 	bl	8013272 <memset>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
		    },
		    .bit_data = {0},
		    .isInit = 1
		};

		if(status != SYS_OK){
 80011da:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <MPU6050_Init+0x152>
			return SYS_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e002      	b.n	80011ec <MPU6050_Init+0x154>
		}

	}else{
		return SYS_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <MPU6050_Init+0x154>
	}
	return SYS_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	37d4      	adds	r7, #212	@ 0xd4
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	200003f4 	.word	0x200003f4
 80011f8:	200003f0 	.word	0x200003f0

080011fc <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b08d      	sub	sp, #52	@ 0x34
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	int32_t temp_raw[6] = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8001216:	2300      	movs	r3, #0
 8001218:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800121a:	e069      	b.n	80012f0 <MPU6050_Calibrate+0xf4>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->bit_data, 14, MPU_TIMEOUT);
 800121c:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <MPU6050_Calibrate+0x148>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	33b4      	adds	r3, #180	@ 0xb4
 8001224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	220e      	movs	r2, #14
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	213b      	movs	r1, #59	@ 0x3b
 8001232:	20d0      	movs	r0, #208	@ 0xd0
 8001234:	47a0      	blx	r4
		temp_raw[0] += (int16_t)((mpu->bit_data[0] << 8) | mpu->bit_data[1]);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	f892 20b4 	ldrb.w	r2, [r2, #180]	@ 0xb4
 800123e:	b212      	sxth	r2, r2
 8001240:	0212      	lsls	r2, r2, #8
 8001242:	b211      	sxth	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f892 20b5 	ldrb.w	r2, [r2, #181]	@ 0xb5
 800124a:	b212      	sxth	r2, r2
 800124c:	430a      	orrs	r2, r1
 800124e:	b212      	sxth	r2, r2
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
		temp_raw[1] += (int16_t)((mpu->bit_data[2] << 8) | mpu->bit_data[3]);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	f892 20b6 	ldrb.w	r2, [r2, #182]	@ 0xb6
 800125c:	b212      	sxth	r2, r2
 800125e:	0212      	lsls	r2, r2, #8
 8001260:	b211      	sxth	r1, r2
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	f892 20b7 	ldrb.w	r2, [r2, #183]	@ 0xb7
 8001268:	b212      	sxth	r2, r2
 800126a:	430a      	orrs	r2, r1
 800126c:	b212      	sxth	r2, r2
 800126e:	4413      	add	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
		temp_raw[2] += (int16_t)((mpu->bit_data[4] << 8) | mpu->bit_data[5]);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 800127a:	b212      	sxth	r2, r2
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	b211      	sxth	r1, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f892 20b9 	ldrb.w	r2, [r2, #185]	@ 0xb9
 8001286:	b212      	sxth	r2, r2
 8001288:	430a      	orrs	r2, r1
 800128a:	b212      	sxth	r2, r2
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

		temp_raw[3] += (int16_t)((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	f892 20bc 	ldrb.w	r2, [r2, #188]	@ 0xbc
 8001298:	b212      	sxth	r2, r2
 800129a:	0212      	lsls	r2, r2, #8
 800129c:	b211      	sxth	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	f892 20bd 	ldrb.w	r2, [r2, #189]	@ 0xbd
 80012a4:	b212      	sxth	r2, r2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	b212      	sxth	r2, r2
 80012aa:	4413      	add	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
		temp_raw[4] += (int16_t)((mpu->bit_data[10] << 8) | mpu->bit_data[11]);
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	f892 20be 	ldrb.w	r2, [r2, #190]	@ 0xbe
 80012b6:	b212      	sxth	r2, r2
 80012b8:	0212      	lsls	r2, r2, #8
 80012ba:	b211      	sxth	r1, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f892 20bf 	ldrb.w	r2, [r2, #191]	@ 0xbf
 80012c2:	b212      	sxth	r2, r2
 80012c4:	430a      	orrs	r2, r1
 80012c6:	b212      	sxth	r2, r2
 80012c8:	4413      	add	r3, r2
 80012ca:	61fb      	str	r3, [r7, #28]
		temp_raw[5] += (int16_t)((mpu->bit_data[12] << 8) | mpu->bit_data[13]);
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 80012d4:	b212      	sxth	r2, r2
 80012d6:	0212      	lsls	r2, r2, #8
 80012d8:	b211      	sxth	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	f892 20c1 	ldrb.w	r2, [r2, #193]	@ 0xc1
 80012e0:	b212      	sxth	r2, r2
 80012e2:	430a      	orrs	r2, r1
 80012e4:	b212      	sxth	r2, r2
 80012e6:	4413      	add	r3, r2
 80012e8:	623b      	str	r3, [r7, #32]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80012ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012ec:	3301      	adds	r3, #1
 80012ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80012f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80012f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f6:	d391      	bcc.n	800121c <MPU6050_Calibrate+0x20>
	}
    mpu->Acc.offset.x = (int16_t)(temp_raw[0] >> NUM_SAMPLES_BITS);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	131b      	asrs	r3, r3, #12
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(temp_raw[1] >> NUM_SAMPLES_BITS);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	131b      	asrs	r3, r3, #12
 8001306:	b21a      	sxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(temp_raw[2] >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	131b      	asrs	r3, r3, #12
 8001310:	b29b      	uxth	r3, r3
 8001312:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8001316:	b29b      	uxth	r3, r3
 8001318:	b21a      	sxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(temp_raw[3] >> NUM_SAMPLES_BITS);
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	131b      	asrs	r3, r3, #12
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	825a      	strh	r2, [r3, #18]
	mpu->Gyro.offset.y = (int16_t)(temp_raw[4] >> NUM_SAMPLES_BITS);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	131b      	asrs	r3, r3, #12
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	829a      	strh	r2, [r3, #20]
	mpu->Gyro.offset.z = (int16_t)(temp_raw[5] >> NUM_SAMPLES_BITS);
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	131b      	asrs	r3, r3, #12
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	82da      	strh	r2, [r3, #22]

	//mpu->Angle.pitch = atan2f(mpu->Acc.offset.y, sqrtf(mpu->Acc.offset.x * mpu->Acc.offset.x + mpu->Acc.offset.z * mpu->Acc.offset.z)) * 180.0f / M_PI;
	//mpu->Angle.roll  = atan2f(-mpu->Acc.offset.x, mpu->Acc.offset.z) * 180.0f / M_PI;
}
 800133c:	bf00      	nop
 800133e:	372c      	adds	r7, #44	@ 0x2c
 8001340:	46bd      	mov	sp, r7
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	200003f4 	.word	0x200003f4

08001348 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->MAF.rawData[0] = (((mpu->bit_data[0] << 8) | mpu->bit_data[1]));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 8001356:	b21b      	sxth	r3, r3
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21a      	sxth	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
	mpu->MAF.rawData[1] = (((mpu->bit_data[2] << 8) | mpu->bit_data[3]));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 30b7 	ldrb.w	r3, [r3, #183]	@ 0xb7
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
	mpu->MAF.rawData[2] = (((mpu->bit_data[4] << 8) | mpu->bit_data[5]));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8001392:	b21b      	sxth	r3, r3
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	b21a      	sxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
	// GYR: GET RAW INFORMATION
	mpu->MAF.rawData[3] = (((mpu->bit_data[8 ] << 8) | mpu->bit_data[9 ]));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
	mpu->MAF.rawData[4] = (((mpu->bit_data[10] << 8) | mpu->bit_data[11]));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80013da:	b21b      	sxth	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b21a      	sxth	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
	mpu->MAF.rawData[5] = (((mpu->bit_data[12] << 8) | mpu->bit_data[13]));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	mpu->MAF.isOn = TRUE;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <MPU6050_MAF>:

void MPU6050_MAF(s_MPU *mpu){ //Moving Average Filter
 8001418:	b490      	push	{r4, r7}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(mpu->MAF.isOn){
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b8 	beq.w	800159c <MPU6050_MAF+0x184>
		mpu->MAF.isOn = FALSE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e04e      	b.n	80014d8 <MPU6050_MAF+0xc0>
			mpu->MAF.sumData[axis] -= mpu->MAF.mediaBuffer[mpu->MAF.index][axis];
 800143a:	7bfa      	ldrb	r2, [r7, #15]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3208      	adds	r2, #8
 8001440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800144a:	461c      	mov	r4, r3
 800144c:	7bf8      	ldrb	r0, [r7, #15]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4623      	mov	r3, r4
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4423      	add	r3, r4
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	331c      	adds	r3, #28
 800145c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	1ac9      	subs	r1, r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3208      	adds	r2, #8
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.sumData[axis] += mpu->MAF.rawData[axis];
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	7bf9      	ldrb	r1, [r7, #15]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	314c      	adds	r1, #76	@ 0x4c
 800147c:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8001480:	4611      	mov	r1, r2
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	4419      	add	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mpu->MAF.mediaBuffer[mpu->MAF.index][axis] = mpu->MAF.rawData[axis];
 800148e:	7bfa      	ldrb	r2, [r7, #15]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8001496:	4618      	mov	r0, r3
 8001498:	7bf9      	ldrb	r1, [r7, #15]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	324c      	adds	r2, #76	@ 0x4c
 800149e:	f933 4012 	ldrsh.w	r4, [r3, r2, lsl #1]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4603      	mov	r3, r0
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4403      	add	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	440b      	add	r3, r1
 80014ae:	331c      	adds	r3, #28
 80014b0:	4621      	mov	r1, r4
 80014b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			mpu->MAF.filtredData[axis] = (mpu->MAF.sumData[axis] >> NUM_MAF_BITS);
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	10da      	asrs	r2, r3, #3
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	b211      	sxth	r1, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	3350      	adds	r3, #80	@ 0x50
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	460a      	mov	r2, r1
 80014d0:	809a      	strh	r2, [r3, #4]
		for(uint8_t axis = 0; axis < NUM_AXIS; axis++){
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d9ad      	bls.n	800143a <MPU6050_MAF+0x22>
		}
		mpu->MAF.index++;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
		mpu->MAF.index &= (NUM_MAF - 1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

		// ACC: CALCULATE TRUE ACCELERATION
		mpu->Acc.x = mpu->MAF.filtredData[0] - mpu->Acc.offset.x;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800150e:	b29b      	uxth	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b29b      	uxth	r3, r3
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	801a      	strh	r2, [r3, #0]
		mpu->Acc.y = mpu->MAF.filtredData[1] - mpu->Acc.offset.y;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001528:	b29b      	uxth	r3, r3
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	b21a      	sxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	805a      	strh	r2, [r3, #2]
		mpu->Acc.z = mpu->MAF.filtredData[2] - mpu->Acc.offset.z;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 800153a:	b29a      	uxth	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001542:	b29b      	uxth	r3, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	809a      	strh	r2, [r3, #4]
		// GYR: CALCULATE TRUE ACCELERATION
		mpu->Gyro.x = mpu->MAF.filtredData[3] - mpu->Gyro.offset.x;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8001554:	b29a      	uxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800155c:	b29b      	uxth	r3, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	b21a      	sxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	819a      	strh	r2, [r3, #12]
		mpu->Gyro.y = mpu->MAF.filtredData[4] - mpu->Gyro.offset.y;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21a      	sxth	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	81da      	strh	r2, [r3, #14]
		mpu->Gyro.z = mpu->MAF.filtredData[5] - mpu->Gyro.offset.z;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8001588:	b29a      	uxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001590:	b29b      	uxth	r3, r3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	821a      	strh	r2, [r3, #16]
	}
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc90      	pop	{r4, r7}
 80015a4:	4770      	bx	lr
	...

080015a8 <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 80015b2:	4a06      	ldr	r2, [pc, #24]	@ (80015cc <Display_Set_I2C_Master_Transmit+0x24>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 80015b8:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <Display_Set_I2C_Master_Transmit+0x28>)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	6013      	str	r3, [r2, #0]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000400 	.word	0x20000400
 80015d0:	20000404 	.word	0x20000404

080015d4 <Display_Init>:

e_system Display_Init(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 80015de:	22ae      	movs	r2, #174	@ 0xae
 80015e0:	2100      	movs	r1, #0
 80015e2:	2078      	movs	r0, #120	@ 0x78
 80015e4:	f000 f94a 	bl	800187c <ssd1306_I2C_Write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	@ 0x78
 80015f8:	f000 f940 	bl	800187c <ssd1306_I2C_Write>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4413      	add	r3, r2
 8001604:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001606:	2210      	movs	r2, #16
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	@ 0x78
 800160c:	f000 f936 	bl	800187c <ssd1306_I2C_Write>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4413      	add	r3, r2
 8001618:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 800161a:	22b0      	movs	r2, #176	@ 0xb0
 800161c:	2100      	movs	r1, #0
 800161e:	2078      	movs	r0, #120	@ 0x78
 8001620:	f000 f92c 	bl	800187c <ssd1306_I2C_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4413      	add	r3, r2
 800162c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 800162e:	22c8      	movs	r2, #200	@ 0xc8
 8001630:	2100      	movs	r1, #0
 8001632:	2078      	movs	r0, #120	@ 0x78
 8001634:	f000 f922 	bl	800187c <ssd1306_I2C_Write>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4413      	add	r3, r2
 8001640:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2078      	movs	r0, #120	@ 0x78
 8001648:	f000 f918 	bl	800187c <ssd1306_I2C_Write>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4413      	add	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8001656:	2210      	movs	r2, #16
 8001658:	2100      	movs	r1, #0
 800165a:	2078      	movs	r0, #120	@ 0x78
 800165c:	f000 f90e 	bl	800187c <ssd1306_I2C_Write>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4413      	add	r3, r2
 8001668:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 800166a:	2240      	movs	r2, #64	@ 0x40
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	@ 0x78
 8001670:	f000 f904 	bl	800187c <ssd1306_I2C_Write>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4413      	add	r3, r2
 800167c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 800167e:	2281      	movs	r2, #129	@ 0x81
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	@ 0x78
 8001684:	f000 f8fa 	bl	800187c <ssd1306_I2C_Write>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4413      	add	r3, r2
 8001690:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	@ 0x78
 8001698:	f000 f8f0 	bl	800187c <ssd1306_I2C_Write>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	4413      	add	r3, r2
 80016a4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 80016a6:	22a1      	movs	r2, #161	@ 0xa1
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	@ 0x78
 80016ac:	f000 f8e6 	bl	800187c <ssd1306_I2C_Write>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4413      	add	r3, r2
 80016b8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 80016ba:	22a6      	movs	r2, #166	@ 0xa6
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	@ 0x78
 80016c0:	f000 f8dc 	bl	800187c <ssd1306_I2C_Write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4413      	add	r3, r2
 80016cc:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 80016ce:	22a8      	movs	r2, #168	@ 0xa8
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	@ 0x78
 80016d4:	f000 f8d2 	bl	800187c <ssd1306_I2C_Write>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4413      	add	r3, r2
 80016e0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 80016e2:	223f      	movs	r2, #63	@ 0x3f
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	@ 0x78
 80016e8:	f000 f8c8 	bl	800187c <ssd1306_I2C_Write>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4413      	add	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016f6:	22a4      	movs	r2, #164	@ 0xa4
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	@ 0x78
 80016fc:	f000 f8be 	bl	800187c <ssd1306_I2C_Write>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4413      	add	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 800170a:	22d3      	movs	r2, #211	@ 0xd3
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	@ 0x78
 8001710:	f000 f8b4 	bl	800187c <ssd1306_I2C_Write>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4413      	add	r3, r2
 800171c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 f8aa 	bl	800187c <ssd1306_I2C_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4413      	add	r3, r2
 8001730:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8001732:	22d5      	movs	r2, #213	@ 0xd5
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 f8a0 	bl	800187c <ssd1306_I2C_Write>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4413      	add	r3, r2
 8001744:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8001746:	22f0      	movs	r2, #240	@ 0xf0
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	@ 0x78
 800174c:	f000 f896 	bl	800187c <ssd1306_I2C_Write>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4413      	add	r3, r2
 8001758:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 800175a:	22d9      	movs	r2, #217	@ 0xd9
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	@ 0x78
 8001760:	f000 f88c 	bl	800187c <ssd1306_I2C_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4413      	add	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 800176e:	2222      	movs	r2, #34	@ 0x22
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	@ 0x78
 8001774:	f000 f882 	bl	800187c <ssd1306_I2C_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4413      	add	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8001782:	22da      	movs	r2, #218	@ 0xda
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	f000 f878 	bl	800187c <ssd1306_I2C_Write>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4413      	add	r3, r2
 8001794:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8001796:	2212      	movs	r2, #18
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	@ 0x78
 800179c:	f000 f86e 	bl	800187c <ssd1306_I2C_Write>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4413      	add	r3, r2
 80017a8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 80017aa:	22db      	movs	r2, #219	@ 0xdb
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f000 f864 	bl	800187c <ssd1306_I2C_Write>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4413      	add	r3, r2
 80017bc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	@ 0x78
 80017c4:	f000 f85a 	bl	800187c <ssd1306_I2C_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4413      	add	r3, r2
 80017d0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 80017d2:	228d      	movs	r2, #141	@ 0x8d
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	@ 0x78
 80017d8:	f000 f850 	bl	800187c <ssd1306_I2C_Write>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4413      	add	r3, r2
 80017e4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 80017e6:	2214      	movs	r2, #20
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	@ 0x78
 80017ec:	f000 f846 	bl	800187c <ssd1306_I2C_Write>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4413      	add	r3, r2
 80017f8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 80017fa:	22af      	movs	r2, #175	@ 0xaf
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	@ 0x78
 8001800:	f000 f83c 	bl	800187c <ssd1306_I2C_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4413      	add	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800180e:	222e      	movs	r2, #46	@ 0x2e
 8001810:	2100      	movs	r1, #0
 8001812:	2078      	movs	r0, #120	@ 0x78
 8001814:	f000 f832 	bl	800187c <ssd1306_I2C_Write>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4413      	add	r3, r2
 8001820:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f8e8 	bl	80019f8 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <Display_Init+0x2a0>)
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <Display_Init+0x2a0>)
 8001830:	2200      	movs	r2, #0
 8001832:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <Display_Init+0x2a0>)
 8001836:	2201      	movs	r2, #1
 8001838:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <Display_Init+0x2a4>)
 800183c:	2200      	movs	r2, #0
 800183e:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <Display_Init+0x2a4>)
 8001842:	2200      	movs	r2, #0
 8001844:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <Display_Init+0x2a4>)
 8001848:	2201      	movs	r2, #1
 800184a:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <Display_Init+0x2a4>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8001852:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <Display_Init+0x2a4>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	3b50      	subs	r3, #80	@ 0x50
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <Display_Init+0x2a4>)
 800185c:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <Display_Init+0x2a4>)
 8001860:	2200      	movs	r2, #0
 8001862:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <Display_Init+0x2a4>)
 8001866:	2210      	movs	r2, #16
 8001868:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 800186a:	79fb      	ldrb	r3, [r7, #7]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200003f8 	.word	0x200003f8
 8001878:	20000808 	.word	0x20000808

0800187c <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	460b      	mov	r3, r1
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	4613      	mov	r3, r2
 800188c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <ssd1306_I2C_Write+0x38>)
 8001898:	681c      	ldr	r4, [r3, #0]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	b298      	uxth	r0, r3
 800189e:	f107 010c 	add.w	r1, r7, #12
 80018a2:	230a      	movs	r3, #10
 80018a4:	2202      	movs	r2, #2
 80018a6:	47a0      	blx	r4
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000404 	.word	0x20000404

080018b8 <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 80018b8:	b598      	push	{r3, r4, r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d054      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d050      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>
 80018cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <Display_UpdateScreen_Task+0xc0>)
 80018ce:	795b      	ldrb	r3, [r3, #5]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d04c      	beq.n	800196e <Display_UpdateScreen_Task+0xb6>

		switch(Update.state){
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <Display_UpdateScreen_Task+0x2a>
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d01c      	beq.n	800191a <Display_UpdateScreen_Task+0x62>
 80018e0:	e038      	b.n	8001954 <Display_UpdateScreen_Task+0x9c>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	3b50      	subs	r3, #80	@ 0x50
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018ec:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 80018ee:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 80018fc:	681c      	ldr	r4, [r3, #0]
 80018fe:	2303      	movs	r3, #3
 8001900:	4a1f      	ldr	r2, [pc, #124]	@ (8001980 <Display_UpdateScreen_Task+0xc8>)
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	@ 0x78
 8001906:	47a0      	blx	r4
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <Display_UpdateScreen_Task+0x5e>
				Update.state = DATA;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001910:	2201      	movs	r2, #1
 8001912:	70da      	strb	r2, [r3, #3]
				//Update.Ready_DMA = FALSE;     //< LO DESACTIVO PARA QUE PAGE Y DATA SE HAGA DE UNA SOLA PASADA
			}else{
				return SYS_ERROR;
			}
			break;
 8001914:	e021      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e02a      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <Display_UpdateScreen_Task+0xc4>)
 800191c:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001920:	789b      	ldrb	r3, [r3, #2]
 8001922:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <Display_UpdateScreen_Task+0xcc>)
 8001926:	441a      	add	r2, r3
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	2140      	movs	r1, #64	@ 0x40
 800192c:	2078      	movs	r0, #120	@ 0x78
 800192e:	47a0      	blx	r4
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <Display_UpdateScreen_Task+0x98>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001938:	789b      	ldrb	r3, [r3, #2]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001940:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001944:	2200      	movs	r2, #0
 8001946:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 800194e:	e004      	b.n	800195a <Display_UpdateScreen_Task+0xa2>
				return SYS_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00d      	b.n	8001970 <Display_UpdateScreen_Task+0xb8>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001956:	2208      	movs	r2, #8
 8001958:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d905      	bls.n	800196e <Display_UpdateScreen_Task+0xb6>
			Update.Page = 0;
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001968:	4b02      	ldr	r3, [pc, #8]	@ (8001974 <Display_UpdateScreen_Task+0xbc>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	bd98      	pop	{r3, r4, r7, pc}
 8001974:	20000808 	.word	0x20000808
 8001978:	200003f8 	.word	0x200003f8
 800197c:	20000400 	.word	0x20000400
 8001980:	2000080c 	.word	0x2000080c
 8001984:	20000408 	.word	0x20000408

08001988 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <Display_I2C_DMA_Ready+0x1c>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	7053      	strb	r3, [r2, #1]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	20000808 	.word	0x20000808

080019a8 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 80019b2:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <Display_I2C_Refresh_Ready+0x1c>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	7013      	strb	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	20000808 	.word	0x20000808

080019c8 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80019e0:	79bb      	ldrb	r3, [r7, #6]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <Display_SetCursor+0x2c>)
 80019e6:	805a      	strh	r2, [r3, #2]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	200003f8 	.word	0x200003f8

080019f8 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e00d      	b.n	8001a24 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <Display_Fill+0x1a>
 8001a0e:	2100      	movs	r1, #0
 8001a10:	e000      	b.n	8001a14 <Display_Fill+0x1c>
 8001a12:	21ff      	movs	r1, #255	@ 0xff
 8001a14:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <Display_Fill+0x44>)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4413      	add	r3, r2
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2a:	d3ed      	bcc.n	8001a08 <Display_Fill+0x10>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000408 	.word	0x20000408

08001a40 <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	70fb      	strb	r3, [r7, #3]
	if (
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a56:	d848      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5c:	d845      	bhi.n	8001aea <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <Display_DrawPixel+0xb8>)
 8001a60:	791b      	ldrb	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d11a      	bne.n	8001ab0 <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	b298      	uxth	r0, r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	01db      	lsls	r3, r3, #7
 8001a86:	4413      	add	r3, r2
 8001a88:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001a8a:	5cd3      	ldrb	r3, [r2, r3]
 8001a8c:	b25a      	sxtb	r2, r3
 8001a8e:	88bb      	ldrh	r3, [r7, #4]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	b25b      	sxtb	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b259      	sxtb	r1, r3
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	01db      	lsls	r3, r3, #7
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b2c9      	uxtb	r1, r1
 8001aaa:	4a14      	ldr	r2, [pc, #80]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001aac:	54d1      	strb	r1, [r2, r3]
 8001aae:	e01d      	b.n	8001aec <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	08db      	lsrs	r3, r3, #3
 8001ab6:	b298      	uxth	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	01db      	lsls	r3, r3, #7
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	b25a      	sxtb	r2, r3
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	b259      	sxtb	r1, r3
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	4603      	mov	r3, r0
 8001ade:	01db      	lsls	r3, r3, #7
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2c9      	uxtb	r1, r1
 8001ae4:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <Display_DrawPixel+0xbc>)
 8001ae6:	54d1      	strb	r1, [r2, r3]
 8001ae8:	e000      	b.n	8001aec <Display_DrawPixel+0xac>
		return;
 8001aea:	bf00      	nop
	}
}
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200003f8 	.word	0x200003f8
 8001afc:	20000408 	.word	0x20000408

08001b00 <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60ba      	str	r2, [r7, #8]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	81bb      	strh	r3, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da00      	bge.n	8001b22 <Display_DrawBitmap+0x22>
 8001b20:	3307      	adds	r3, #7
 8001b22:	10db      	asrs	r3, r3, #3
 8001b24:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	82bb      	strh	r3, [r7, #20]
 8001b2e:	e044      	b.n	8001bba <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	827b      	strh	r3, [r7, #18]
 8001b34:	e02f      	b.n	8001b96 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 8001b36:	8a7b      	ldrh	r3, [r7, #18]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	e012      	b.n	8001b6e <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001b48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b4c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b50:	fb03 f202 	mul.w	r2, r3, r2
 8001b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	da00      	bge.n	8001b5e <Display_DrawBitmap+0x5e>
 8001b5c:	3307      	adds	r3, #7
 8001b5e:	10db      	asrs	r3, r3, #3
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 8001b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	da09      	bge.n	8001b8a <Display_DrawBitmap+0x8a>
 8001b76:	89fa      	ldrh	r2, [r7, #14]
 8001b78:	8a7b      	ldrh	r3, [r7, #18]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	89b9      	ldrh	r1, [r7, #12]
 8001b80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff5b 	bl	8001a40 <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	827b      	strh	r3, [r7, #18]
 8001b96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbc9      	blt.n	8001b36 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8001ba2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	82bb      	strh	r3, [r7, #20]
 8001bae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	81bb      	strh	r3, [r7, #12]
 8001bba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbb4      	blt.n	8001b30 <Display_DrawBitmap+0x30>
        }
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b089      	sub	sp, #36	@ 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	1d38      	adds	r0, r7, #4
 8001bda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001bde:	461a      	mov	r2, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	4613      	mov	r3, r2
 8001be6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001be8:	4b36      	ldr	r3, [pc, #216]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bf4:	dc06      	bgt.n	8001c04 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001bf6:	4b33      	ldr	r3, [pc, #204]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001bf8:	885b      	ldrh	r3, [r3, #2]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c00:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c02:	dd01      	ble.n	8001c08 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 8001c04:	2300      	movs	r3, #0
 8001c06:	e058      	b.n	8001cba <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	e048      	b.n	8001ca0 <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3b20      	subs	r3, #32
 8001c14:	7979      	ldrb	r1, [r7, #5]
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	440b      	add	r3, r1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	e030      	b.n	8001c90 <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001c3e:	4b21      	ldr	r3, [pc, #132]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b298      	uxth	r0, r3
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c4c:	885a      	ldrh	r2, [r3, #2]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	7bba      	ldrb	r2, [r7, #14]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7ff fef1 	bl	8001a40 <Display_DrawPixel>
 8001c5e:	e014      	b.n	8001c8a <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001c6e:	885a      	ldrh	r2, [r3, #2]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b299      	uxth	r1, r3
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bf0c      	ite	eq
 8001c7e:	2301      	moveq	r3, #1
 8001c80:	2300      	movne	r3, #0
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	f7ff fedb 	bl	8001a40 <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	793b      	ldrb	r3, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d3c9      	bcc.n	8001c2e <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	61fb      	str	r3, [r7, #28]
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d3b1      	bcc.n	8001c0e <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	793a      	ldrb	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b03      	ldr	r3, [pc, #12]	@ (8001cc4 <Display_WriteChar+0xf4>)
 8001cb6:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200003f8 	.word	0x200003f8

08001cc8 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	1d38      	adds	r0, r7, #4
 8001cd2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001cd6:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001cd8:	e012      	b.n	8001d00 <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	1d3a      	adds	r2, r7, #4
 8001ce2:	ca06      	ldmia	r2, {r1, r2}
 8001ce4:	f7ff ff74 	bl	8001bd0 <Display_WriteChar>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d002      	beq.n	8001cfa <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	e008      	b.n	8001d0c <Display_WriteString+0x44>

        str++;	// Next char
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
    while (*str){
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e8      	bne.n	8001cda <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	80fb      	strh	r3, [r7, #6]
 8001d26:	4603      	mov	r3, r0
 8001d28:	80bb      	strh	r3, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	807b      	strh	r3, [r7, #2]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 8001d32:	88fa      	ldrh	r2, [r7, #6]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d004      	beq.n	8001d44 <Display_DrawLine+0x30>
 8001d3a:	88ba      	ldrh	r2, [r7, #4]
 8001d3c:	883b      	ldrh	r3, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	f040 8090 	bne.w	8001e64 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d48:	d901      	bls.n	8001d4e <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001d4a:	237f      	movs	r3, #127	@ 0x7f
 8001d4c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d52:	d901      	bls.n	8001d58 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001d54:	237f      	movs	r3, #127	@ 0x7f
 8001d56:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001d58:	88bb      	ldrh	r3, [r7, #4]
 8001d5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d5c:	d901      	bls.n	8001d62 <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 8001d5e:	233f      	movs	r3, #63	@ 0x3f
 8001d60:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001d62:	883b      	ldrh	r3, [r7, #0]
 8001d64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d66:	d901      	bls.n	8001d6c <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001d68:	233f      	movs	r3, #63	@ 0x3f
 8001d6a:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d205      	bcs.n	8001d80 <Display_DrawLine+0x6c>
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	e004      	b.n	8001d8a <Display_DrawLine+0x76>
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001d8c:	88ba      	ldrh	r2, [r7, #4]
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d205      	bcs.n	8001da0 <Display_DrawLine+0x8c>
 8001d94:	883a      	ldrh	r2, [r7, #0]
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	e004      	b.n	8001daa <Display_DrawLine+0x96>
 8001da0:	88ba      	ldrh	r2, [r7, #4]
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001dac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d129      	bne.n	8001e08 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	88bb      	ldrh	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d205      	bcs.n	8001dc8 <Display_DrawLine+0xb4>
			tmp = y1;
 8001dbc:	883b      	ldrh	r3, [r7, #0]
 8001dbe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001dc0:	88bb      	ldrh	r3, [r7, #4]
 8001dc2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d205      	bcs.n	8001ddc <Display_DrawLine+0xc8>
			tmp = x1;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001dd8:	893b      	ldrh	r3, [r7, #8]
 8001dda:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001ddc:	88bb      	ldrh	r3, [r7, #4]
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	e00c      	b.n	8001dfc <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 8001de2:	89f9      	ldrh	r1, [r7, #14]
 8001de4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe28 	bl	8001a40 <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001df0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	81fb      	strh	r3, [r7, #14]
 8001dfc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e00:	883b      	ldrh	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	dded      	ble.n	8001de2 <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 8001e06:	e030      	b.n	8001e6a <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 8001e08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d12b      	bne.n	8001e68 <Display_DrawLine+0x154>
		if (y1 < y0) {
 8001e10:	883a      	ldrh	r2, [r7, #0]
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d205      	bcs.n	8001e24 <Display_DrawLine+0x110>
			tmp = y1;
 8001e18:	883b      	ldrh	r3, [r7, #0]
 8001e1a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d205      	bcs.n	8001e38 <Display_DrawLine+0x124>
			tmp = x1;
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	81fb      	strh	r3, [r7, #14]
 8001e3c:	e00c      	b.n	8001e58 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e44:	88b9      	ldrh	r1, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdfa 	bl	8001a40 <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	81fb      	strh	r3, [r7, #14]
 8001e58:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dded      	ble.n	8001e3e <Display_DrawLine+0x12a>
		}
	}
	return;
 8001e62:	e001      	b.n	8001e68 <Display_DrawLine+0x154>
		return;
 8001e64:	bf00      	nop
 8001e66:	e000      	b.n	8001e6a <Display_DrawLine+0x156>
	return;
 8001e68:	bf00      	nop
}
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	80fb      	strh	r3, [r7, #6]
 8001e82:	4603      	mov	r3, r0
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e92:	d836      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e98:	d833      	bhi.n	8001f02 <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea2:	dd03      	ble.n	8001eac <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001eaa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001eac:	88ba      	ldrh	r2, [r7, #4]
 8001eae:	883b      	ldrh	r3, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eb4:	dd03      	ble.n	8001ebe <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001eb6:	88bb      	ldrh	r3, [r7, #4]
 8001eb8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001ebc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e018      	b.n	8001ef6 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	887b      	ldrh	r3, [r7, #2]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	88f8      	ldrh	r0, [r7, #6]
 8001ee2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	4622      	mov	r2, r4
 8001eec:	f7ff ff12 	bl	8001d14 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d2e1      	bcs.n	8001ec4 <Display_DrawFilledRectangle+0x54>
 8001f00:	e000      	b.n	8001f04 <Display_DrawFilledRectangle+0x94>
		return;
 8001f02:	bf00      	nop
	}
}
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd90      	pop	{r4, r7, pc}

08001f0a <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	729a      	strb	r2, [r3, #10]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	885b      	ldrh	r3, [r3, #2]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10e      	bne.n	8001f82 <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	88da      	ldrh	r2, [r3, #6]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	889b      	ldrh	r3, [r3, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	881a      	ldrh	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a9b      	ldrb	r3, [r3, #10]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <Encoder_Task+0x54>
		enc->pps = 0;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	811a      	strh	r2, [r3, #8]
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	889b      	ldrh	r3, [r3, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	809a      	strh	r2, [r3, #4]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	88da      	ldrh	r2, [r3, #6]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	80da      	strh	r2, [r3, #6]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value / 100;
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <Motor_Init+0x4c>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	819a      	strh	r2, [r3, #12]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	51eb851f 	.word	0x51eb851f

0800203c <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
	if(motor->setPWM == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d04f      	beq.n	80020f0 <Motor_Set_Speed+0xb4>
		return;
	if(speed > 100)
 8002050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002054:	2b64      	cmp	r3, #100	@ 0x64
 8002056:	dd01      	ble.n	800205c <Motor_Set_Speed+0x20>
		speed = 100;
 8002058:	2364      	movs	r3, #100	@ 0x64
 800205a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002064:	da01      	bge.n	800206a <Motor_Set_Speed+0x2e>
		speed = -100;
 8002066:	239c      	movs	r3, #156	@ 0x9c
 8002068:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800206a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d03e      	beq.n	80020f4 <Motor_Set_Speed+0xb8>
		return;

	motor->vel = speed * motor->maxValue;
 8002076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6852      	ldr	r2, [r2, #4]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd0e      	ble.n	80020ae <Motor_Set_Speed+0x72>
		motor->direction = FORWARD;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 8002096:	2102      	movs	r1, #2
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f82f 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6892      	ldr	r2, [r2, #8]
 80020a6:	b292      	uxth	r2, r2
 80020a8:	4610      	mov	r0, r2
 80020aa:	4798      	blx	r3
 80020ac:	e023      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else if(speed < 0){
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da10      	bge.n	80020d8 <Motor_Set_Speed+0x9c>
		motor->direction = BACKWARD;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 80020bc:	2103      	movs	r1, #3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f81c 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6892      	ldr	r2, [r2, #8]
 80020cc:	b292      	uxth	r2, r2
 80020ce:	4252      	negs	r2, r2
 80020d0:	b292      	uxth	r2, r2
 80020d2:	4610      	mov	r0, r2
 80020d4:	4798      	blx	r3
 80020d6:	e00e      	b.n	80020f6 <Motor_Set_Speed+0xba>
	}else{
		motor->direction = FREE_WHEEL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 80020de:	2101      	movs	r1, #1
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f80b 	bl	80020fc <Motor_Set_Direction>
		motor->setPWM(0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2000      	movs	r0, #0
 80020ec:	4798      	blx	r3
 80020ee:	e002      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <Motor_Set_Speed+0xba>
		return;
 80020f4:	bf00      	nop
	}
}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d027      	beq.n	8002160 <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d825      	bhi.n	8002162 <Motor_Set_Direction+0x66>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <Motor_Set_Direction+0x20>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002163 	.word	0x08002163
 8002120:	08002131 	.word	0x08002131
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002149 	.word	0x08002149
 800212c:	08002155 	.word	0x08002155
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	4798      	blx	r3
			break;
 800213a:	e012      	b.n	8002162 <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2100      	movs	r1, #0
 8002142:	2001      	movs	r0, #1
 8002144:	4798      	blx	r3
			break;
 8002146:	e00c      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2101      	movs	r1, #1
 800214e:	2000      	movs	r0, #0
 8002150:	4798      	blx	r3
			break;
 8002152:	e006      	b.n	8002162 <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2101      	movs	r1, #1
 800215a:	2001      	movs	r0, #1
 800215c:	4798      	blx	r3
			break;
 800215e:	e000      	b.n	8002162 <Motor_Set_Direction+0x66>
		return;
 8002160:	bf00      	nop
	}
}
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d10c      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	899b      	ldrh	r3, [r3, #12]
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	899b      	ldrh	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
	}
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <Motor_Set_MaxValue>:

void Motor_Set_MaxValue(s_motor *motor, uint32_t value){
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	motor->maxValue = value / 100;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <Motor_Set_MaxValue+0x24>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	095a      	lsrs	r2, r3, #5
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	51eb851f 	.word	0x51eb851f

080021c8 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <Comm_Task>:

void Comm_Task(s_commData* comm){
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002244:	429a      	cmp	r2, r3
 8002246:	d002      	beq.n	800224e <Comm_Task+0x1e>
		decodeProtocol(comm);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f815 	bl	8002278 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	789a      	ldrb	r2, [r3, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	429a      	cmp	r2, r3
 8002258:	d009      	beq.n	800226e <Comm_Task+0x3e>
		if(comm->dataWriter != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <Comm_Task+0x3e>
			comm->dataWriter(comm);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
	}
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8002286:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8002288:	e11b      	b.n	80024c2 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 8002290:	2b06      	cmp	r3, #6
 8002292:	f200 810e 	bhi.w	80024b2 <decodeProtocol+0x23a>
 8002296:	a201      	add	r2, pc, #4	@ (adr r2, 800229c <decodeProtocol+0x24>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022eb 	.word	0x080022eb
 80022a4:	0800232d 	.word	0x0800232d
 80022a8:	0800236f 	.word	0x0800236f
 80022ac:	080023b1 	.word	0x080023b1
 80022b0:	080023e3 	.word	0x080023e3
 80022b4:	08002435 	.word	0x08002435
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	b2d1      	uxtb	r1, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022c8:	461a      	mov	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022d2:	2b55      	cmp	r3, #85	@ 0x55
 80022d4:	f040 80f2 	bne.w	80024bc <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 80022e8:	e0e8      	b.n	80024bc <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	b2d1      	uxtb	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80022fa:	461a      	mov	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002304:	2b4e      	cmp	r3, #78	@ 0x4e
 8002306:	d104      	bne.n	8002312 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002310:	e0d7      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002318:	3b01      	subs	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800232a:	e0ca      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	b2d1      	uxtb	r1, r2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002346:	2b45      	cmp	r3, #69	@ 0x45
 8002348:	d104      	bne.n	8002354 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2203      	movs	r2, #3
 800234e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002352:	e0b6      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800235a:	3b01      	subs	r3, #1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800236c:	e0a9      	b.n	80024c2 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	b2d1      	uxtb	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002388:	2b52      	cmp	r3, #82	@ 0x52
 800238a:	d104      	bne.n	8002396 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2204      	movs	r2, #4
 8002390:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002394:	e095      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800239c:	3b01      	subs	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023ae:	e088      	b.n	80024c2 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	b2d1      	uxtb	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80023d4:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <decodeProtocol+0x264>)
 80023d6:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2205      	movs	r2, #5
 80023dc:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80023e0:	e06f      	b.n	80024c2 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	b2d1      	uxtb	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80023fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80023fe:	d10c      	bne.n	800241a <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2206      	movs	r2, #6
 8002404:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <decodeProtocol+0x264>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8002418:	e053      	b.n	80024c2 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002420:	3b01      	subs	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8002432:	e046      	b.n	80024c2 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8002434:	4b29      	ldr	r3, [pc, #164]	@ (80024dc <decodeProtocol+0x264>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d914      	bls.n	8002466 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	b2d1      	uxtb	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800244c:	461a      	mov	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 800245c:	4053      	eors	r3, r2
 800245e:	b2da      	uxtb	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <decodeProtocol+0x264>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	3b01      	subs	r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <decodeProtocol+0x264>)
 8002470:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <decodeProtocol+0x264>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d122      	bne.n	80024c0 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800248e:	4619      	mov	r1, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	440b      	add	r3, r1
 8002494:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002498:	429a      	cmp	r2, r3
 800249a:	d111      	bne.n	80024c0 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
				}
			}
			break;
 80024b0:	e006      	b.n	80024c0 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80024ba:	e002      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024bc:	bf00      	nop
 80024be:	e000      	b.n	80024c2 <decodeProtocol+0x24a>
			break;
 80024c0:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	f47f aedd 	bne.w	800228a <decodeProtocol+0x12>
		}
	}
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000835 	.word	0x20000835

080024e0 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
 80024f0:	4613      	mov	r3, r2
 80024f2:	72bb      	strb	r3, [r7, #10]
    i = 0;
 80024f4:	4b62      	ldr	r3, [pc, #392]	@ (8002680 <comm_sendCMD+0x1a0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 80024fa:	4b62      	ldr	r3, [pc, #392]	@ (8002684 <comm_sendCMD+0x1a4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8002500:	4b60      	ldr	r3, [pc, #384]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	b2d1      	uxtb	r1, r2
 8002508:	4a5e      	ldr	r2, [pc, #376]	@ (8002684 <comm_sendCMD+0x1a4>)
 800250a:	7011      	strb	r1, [r2, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b5e      	ldr	r3, [pc, #376]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002510:	2155      	movs	r1, #85	@ 0x55
 8002512:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8002514:	4b5b      	ldr	r3, [pc, #364]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	b2d1      	uxtb	r1, r2
 800251c:	4a59      	ldr	r2, [pc, #356]	@ (8002684 <comm_sendCMD+0x1a4>)
 800251e:	7011      	strb	r1, [r2, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002524:	214e      	movs	r1, #78	@ 0x4e
 8002526:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8002528:	4b56      	ldr	r3, [pc, #344]	@ (8002684 <comm_sendCMD+0x1a4>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	b2d1      	uxtb	r1, r2
 8002530:	4a54      	ldr	r2, [pc, #336]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002532:	7011      	strb	r1, [r2, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002538:	2145      	movs	r1, #69	@ 0x45
 800253a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 800253c:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <comm_sendCMD+0x1a4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	b2d1      	uxtb	r1, r2
 8002544:	4a4f      	ldr	r2, [pc, #316]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002546:	7011      	strb	r1, [r2, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <comm_sendCMD+0x1a8>)
 800254c:	2152      	movs	r1, #82	@ 0x52
 800254e:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8002550:	4b4c      	ldr	r3, [pc, #304]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	4b4d      	ldr	r3, [pc, #308]	@ (800268c <comm_sendCMD+0x1ac>)
 8002556:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <comm_sendCMD+0x1a4>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	b2d1      	uxtb	r1, r2
 8002560:	4a48      	ldr	r2, [pc, #288]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002562:	7011      	strb	r1, [r2, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 800256c:	4b45      	ldr	r3, [pc, #276]	@ (8002684 <comm_sendCMD+0x1a4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	b2d1      	uxtb	r1, r2
 8002574:	4a43      	ldr	r2, [pc, #268]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002576:	7011      	strb	r1, [r2, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b43      	ldr	r3, [pc, #268]	@ (8002688 <comm_sendCMD+0x1a8>)
 800257c:	213a      	movs	r1, #58	@ 0x3a
 800257e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8002580:	4b40      	ldr	r3, [pc, #256]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	b2d1      	uxtb	r1, r2
 8002588:	4a3e      	ldr	r2, [pc, #248]	@ (8002684 <comm_sendCMD+0x1a4>)
 800258a:	7011      	strb	r1, [r2, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4a3e      	ldr	r2, [pc, #248]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	2bb1      	cmp	r3, #177	@ 0xb1
 8002598:	d002      	beq.n	80025a0 <comm_sendCMD+0xc0>
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	2bee      	cmp	r3, #238	@ 0xee
 800259e:	d109      	bne.n	80025b4 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 80025a0:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	b2d1      	uxtb	r1, r2
 80025a8:	4a36      	ldr	r2, [pc, #216]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025aa:	7011      	strb	r1, [r2, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4a36      	ldr	r2, [pc, #216]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025b0:	7abb      	ldrb	r3, [r7, #10]
 80025b2:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d013      	beq.n	80025e2 <comm_sendCMD+0x102>
 80025ba:	7abb      	ldrb	r3, [r7, #10]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d010      	beq.n	80025e2 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 80025c0:	4b30      	ldr	r3, [pc, #192]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <comm_sendCMD+0x1a8>)
 80025c8:	4413      	add	r3, r2
 80025ca:	7aba      	ldrb	r2, [r7, #10]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 ff39 	bl	8013446 <memcpy>
        auxIndex += len;
 80025d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	7abb      	ldrb	r3, [r7, #10]
 80025da:	4413      	add	r3, r2
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4b29      	ldr	r3, [pc, #164]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e0:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 80025e2:	4b28      	ldr	r3, [pc, #160]	@ (8002684 <comm_sendCMD+0x1a4>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <comm_sendCMD+0x1ac>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025f4:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 80025f6:	4b25      	ldr	r3, [pc, #148]	@ (800268c <comm_sendCMD+0x1ac>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <comm_sendCMD+0x1b0>)
 80025fe:	7819      	ldrb	r1, [r3, #0]
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <comm_sendCMD+0x1a8>)
 8002602:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8002604:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 800260a:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <comm_sendCMD+0x1a0>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e01f      	b.n	8002652 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <comm_sendCMD+0x1a8>)
 800261a:	5c9a      	ldrb	r2, [r3, r2]
 800261c:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <comm_sendCMD+0x1b4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4053      	eors	r3, r2
 8002622:	b2da      	uxtb	r2, r3
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <comm_sendCMD+0x1b4>)
 8002626:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8002628:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <comm_sendCMD+0x1a0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	b2d1      	uxtb	r1, r2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	70d1      	strb	r1, [r2, #3]
 800263a:	4619      	mov	r1, r3
 800263c:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <comm_sendCMD+0x1a8>)
 800263e:	5c1a      	ldrb	r2, [r3, r0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	440b      	add	r3, r1
 8002644:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <comm_sendCMD+0x1a0>)
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <comm_sendCMD+0x1a4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3d9      	bcc.n	8002612 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	b2d1      	uxtb	r1, r2
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	70d1      	strb	r1, [r2, #3]
 800266a:	4619      	mov	r1, r3
 800266c:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <comm_sendCMD+0x1b4>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	440b      	add	r3, r1
 8002674:	711a      	strb	r2, [r3, #4]
}
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000812 	.word	0x20000812
 8002684:	20000813 	.word	0x20000813
 8002688:	20000814 	.word	0x20000814
 800268c:	20000832 	.word	0x20000832
 8002690:	20000833 	.word	0x20000833
 8002694:	20000834 	.word	0x20000834

08002698 <ESP01_SetWIFI>:
//const char CIFSRAPMAC[] = "+CIFSR:APMAC\r";
//const char CIFSRSTAIP[] = "+CIFSR:STAIP\r";
//const char CIFSRSTAMAC[] = "+CIFSR:STAMAC\r";


void ESP01_SetWIFI(const char *ssid, const char *password){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	esp01ATState = ESP01ATIDLE;
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <ESP01_SetWIFI+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	esp01Flags.byte = 0;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <ESP01_SetWIFI+0x50>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]

	strncpy(esp01SSID, ssid, 64);
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	480e      	ldr	r0, [pc, #56]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026b4:	f010 fde5 	bl	8013282 <strncpy>
	esp01SSID[63] = '\0';
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <ESP01_SetWIFI+0x54>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	strncpy(esp01PASSWORD, password, 32);
 80026c0:	2220      	movs	r2, #32
 80026c2:	6839      	ldr	r1, [r7, #0]
 80026c4:	480a      	ldr	r0, [pc, #40]	@ (80026f0 <ESP01_SetWIFI+0x58>)
 80026c6:	f010 fddc 	bl	8013282 <strncpy>
	esp01PASSWORD[31] = '\0';
 80026ca:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <ESP01_SetWIFI+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	77da      	strb	r2, [r3, #31]

	esp01TimeoutTask = 50;
 80026d0:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <ESP01_SetWIFI+0x5c>)
 80026d2:	2232      	movs	r2, #50	@ 0x32
 80026d4:	601a      	str	r2, [r3, #0]
	//esp01ATState = ESP01ATHARDRST0;

	esp01TriesAT = 0;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <ESP01_SetWIFI+0x60>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]

}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000836 	.word	0x20000836
 80026e8:	20000838 	.word	0x20000838
 80026ec:	20000850 	.word	0x20000850
 80026f0:	20000890 	.word	0x20000890
 80026f4:	2000083c 	.word	0x2000083c
 80026f8:	20000b6c 	.word	0x20000b6c

080026fc <ESP01_StartUDP>:


_eESP01STATUS ESP01_StartUDP(const char *RemoteIP, uint16_t RemotePORT, uint16_t LocalPORT){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	803b      	strh	r3, [r7, #0]
	if(esp01Handle.WriteUSARTByte == NULL)
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <ESP01_StartUDP+0x80>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <ESP01_StartUDP+0x1e>
		return ESP01_NOT_INIT;
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	e02c      	b.n	8002774 <ESP01_StartUDP+0x78>

	if(LocalPORT == 0)
 800271a:	883b      	ldrh	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <ESP01_StartUDP+0x2a>
		LocalPORT = 30000;
 8002720:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002724:	803b      	strh	r3, [r7, #0]

	strcpy(esp01PROTO, "UDP");
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <ESP01_StartUDP+0x84>)
 8002728:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <ESP01_StartUDP+0x88>)
 800272a:	601a      	str	r2, [r3, #0]

	strncpy(esp01RemoteIP, RemoteIP, 15);
 800272c:	220f      	movs	r2, #15
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4815      	ldr	r0, [pc, #84]	@ (8002788 <ESP01_StartUDP+0x8c>)
 8002732:	f010 fda6 	bl	8013282 <strncpy>
	esp01RemoteIP[15] = '\0';
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <ESP01_StartUDP+0x8c>)
 8002738:	2200      	movs	r2, #0
 800273a:	73da      	strb	r2, [r3, #15]

	itoa(RemotePORT, esp01RemotePORT, 10);
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	220a      	movs	r2, #10
 8002740:	4912      	ldr	r1, [pc, #72]	@ (800278c <ESP01_StartUDP+0x90>)
 8002742:	4618      	mov	r0, r3
 8002744:	f010 fba6 	bl	8012e94 <itoa>
	itoa(LocalPORT, esp01LocalPORT, 10);
 8002748:	883b      	ldrh	r3, [r7, #0]
 800274a:	220a      	movs	r2, #10
 800274c:	4910      	ldr	r1, [pc, #64]	@ (8002790 <ESP01_StartUDP+0x94>)
 800274e:	4618      	mov	r0, r3
 8002750:	f010 fba0 	bl	8012e94 <itoa>

	if(esp01SSID[0] == '\0')
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <ESP01_StartUDP+0x98>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <ESP01_StartUDP+0x64>
		return ESP01_WIFI_NOT_SETED;
 800275c:	2301      	movs	r3, #1
 800275e:	e009      	b.n	8002774 <ESP01_StartUDP+0x78>

	if(esp01Flags.bit.WIFICONNECTED == 0)
 8002760:	4b0d      	ldr	r3, [pc, #52]	@ (8002798 <ESP01_StartUDP+0x9c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <ESP01_StartUDP+0x76>
		return ESP01_WIFI_DISCONNECTED;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <ESP01_StartUDP+0x78>

	//esp01ATState = ESP01ATCIPCLOSE;

	return ESP01_UDPTCP_CONNECTING;
 8002772:	2306      	movs	r3, #6
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000b70 	.word	0x20000b70
 8002780:	20000008 	.word	0x20000008
 8002784:	00504455 	.word	0x00504455
 8002788:	200008b0 	.word	0x200008b0
 800278c:	200008c0 	.word	0x200008c0
 8002790:	200008d8 	.word	0x200008d8
 8002794:	20000850 	.word	0x20000850
 8002798:	20000838 	.word	0x20000838

0800279c <ESP01_StateWIFI>:
		return;

	esp01ATState = ESP01ATCIPCLOSE;
}

_eESP01STATUS ESP01_StateWIFI(){
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
	if(esp01Handle.WriteUSARTByte == NULL)
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <ESP01_StateWIFI+0x30>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <ESP01_StateWIFI+0x12>
		return ESP01_NOT_INIT;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	e009      	b.n	80027c2 <ESP01_StateWIFI+0x26>

	if(esp01Flags.bit.WIFICONNECTED)
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <ESP01_StateWIFI+0x34>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <ESP01_StateWIFI+0x24>
		return ESP01_WIFI_CONNECTED;
 80027bc:	2303      	movs	r3, #3
 80027be:	e000      	b.n	80027c2 <ESP01_StateWIFI+0x26>
	else
		return ESP01_WIFI_DISCONNECTED;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	20000b70 	.word	0x20000b70
 80027d0:	20000838 	.word	0x20000838

080027d4 <ESP01_WriteRX>:
	else
		return ESP01_UDPTCP_DISCONNECTED;
}


void ESP01_WriteRX(uint8_t value){
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
//	if(esp01Handle.bufRX == NULL)
//		return;
	esp01RXATBuf[esp01iwRXAT++] = value;
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <ESP01_WriteRX+0x38>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	b291      	uxth	r1, r2
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <ESP01_WriteRX+0x38>)
 80027e8:	8011      	strh	r1, [r2, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4a08      	ldr	r2, [pc, #32]	@ (8002810 <ESP01_WriteRX+0x3c>)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	5453      	strb	r3, [r2, r1]
	if(esp01iwRXAT == ESP01RXBUFAT)
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <ESP01_WriteRX+0x38>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	2b80      	cmp	r3, #128	@ 0x80
 80027f8:	d102      	bne.n	8002800 <ESP01_WriteRX+0x2c>
		esp01iwRXAT = 0;
 80027fa:	4b04      	ldr	r3, [pc, #16]	@ (800280c <ESP01_WriteRX+0x38>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	801a      	strh	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	20000b64 	.word	0x20000b64
 8002810:	200008e4 	.word	0x200008e4

08002814 <ESP01_Send>:

_eESP01STATUS ESP01_Send(uint8_t *buf, uint16_t irRingBuf, uint16_t length, uint16_t sizeRingBuf){
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	817b      	strh	r3, [r7, #10]
 8002826:	460b      	mov	r3, r1
 8002828:	813b      	strh	r3, [r7, #8]
 800282a:	4613      	mov	r3, r2
 800282c:	80fb      	strh	r3, [r7, #6]
	if(esp01Handle.WriteUSARTByte == NULL)
 800282e:	4b46      	ldr	r3, [pc, #280]	@ (8002948 <ESP01_Send+0x134>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <ESP01_Send+0x28>
		return ESP01_NOT_INIT;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e081      	b.n	8002940 <ESP01_Send+0x12c>

	if(esp01Flags.bit.UDPTCPCONNECTED == 0)
 800283c:	4b43      	ldr	r3, [pc, #268]	@ (800294c <ESP01_Send+0x138>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <ESP01_Send+0x3a>
		return ESP01_UDPTCP_DISCONNECTED;
 800284a:	2305      	movs	r3, #5
 800284c:	e078      	b.n	8002940 <ESP01_Send+0x12c>

	if(esp01Flags.bit.SENDINGDATA == 0){
 800284e:	4b3f      	ldr	r3, [pc, #252]	@ (800294c <ESP01_Send+0x138>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d168      	bne.n	800292e <ESP01_Send+0x11a>
		char strInt[10];
		uint8_t l = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	777b      	strb	r3, [r7, #29]

		itoa(length, strInt, 10);
 8002860:	893b      	ldrh	r3, [r7, #8]
 8002862:	f107 0110 	add.w	r1, r7, #16
 8002866:	220a      	movs	r2, #10
 8002868:	4618      	mov	r0, r3
 800286a:	f010 fb13 	bl	8012e94 <itoa>
		l = strlen(strInt);
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fcb4 	bl	80001e0 <strlen>
 8002878:	4603      	mov	r3, r0
 800287a:	777b      	strb	r3, [r7, #29]
		if(l>4 || l==0)
 800287c:	7f7b      	ldrb	r3, [r7, #29]
 800287e:	2b04      	cmp	r3, #4
 8002880:	d802      	bhi.n	8002888 <ESP01_Send+0x74>
 8002882:	7f7b      	ldrb	r3, [r7, #29]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <ESP01_Send+0x78>
			return ESP01_SEND_ERROR;
 8002888:	230b      	movs	r3, #11
 800288a:	e059      	b.n	8002940 <ESP01_Send+0x12c>
		ESP01StrToBufTX(ATCIPSEND);
 800288c:	4830      	ldr	r0, [pc, #192]	@ (8002950 <ESP01_Send+0x13c>)
 800288e:	f001 fa79 	bl	8003d84 <ESP01StrToBufTX>
		ESP01StrToBufTX(strInt);
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fa74 	bl	8003d84 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 800289c:	482d      	ldr	r0, [pc, #180]	@ (8002954 <ESP01_Send+0x140>)
 800289e:	f001 fa71 	bl	8003d84 <ESP01StrToBufTX>
		for(uint16_t i=0; i<length; i++){
 80028a2:	2300      	movs	r3, #0
 80028a4:	83fb      	strh	r3, [r7, #30]
 80028a6:	e020      	b.n	80028ea <ESP01_Send+0xd6>
			esp01TXATBuf[esp01iwTX++] = buf[irRingBuf++];
 80028a8:	897b      	ldrh	r3, [r7, #10]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	817a      	strh	r2, [r7, #10]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	441a      	add	r2, r3
 80028b4:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <ESP01_Send+0x144>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	1c59      	adds	r1, r3, #1
 80028ba:	b288      	uxth	r0, r1
 80028bc:	4926      	ldr	r1, [pc, #152]	@ (8002958 <ESP01_Send+0x144>)
 80028be:	8008      	strh	r0, [r1, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <ESP01_Send+0x148>)
 80028c6:	545a      	strb	r2, [r3, r1]
			if(esp01iwTX == ESP01TXBUFAT)
 80028c8:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <ESP01_Send+0x144>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028d0:	d102      	bne.n	80028d8 <ESP01_Send+0xc4>
				esp01iwTX = 0;
 80028d2:	4b21      	ldr	r3, [pc, #132]	@ (8002958 <ESP01_Send+0x144>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	801a      	strh	r2, [r3, #0]
			if(irRingBuf == sizeRingBuf)
 80028d8:	897a      	ldrh	r2, [r7, #10]
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d101      	bne.n	80028e4 <ESP01_Send+0xd0>
				irRingBuf = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	817b      	strh	r3, [r7, #10]
		for(uint16_t i=0; i<length; i++){
 80028e4:	8bfb      	ldrh	r3, [r7, #30]
 80028e6:	3301      	adds	r3, #1
 80028e8:	83fb      	strh	r3, [r7, #30]
 80028ea:	8bfa      	ldrh	r2, [r7, #30]
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d3da      	bcc.n	80028a8 <ESP01_Send+0x94>
		}
		esp01Flags.bit.TXCIPSEND = 1;
 80028f2:	4a16      	ldr	r2, [pc, #88]	@ (800294c <ESP01_Send+0x138>)
 80028f4:	7813      	ldrb	r3, [r2, #0]
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 80028fc:	4a13      	ldr	r2, [pc, #76]	@ (800294c <ESP01_Send+0x138>)
 80028fe:	7813      	ldrb	r3, [r2, #0]
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	7013      	strb	r3, [r2, #0]
		if(ESP01DbgStr != NULL){
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <ESP01_Send+0x14c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00d      	beq.n	800292a <ESP01_Send+0x116>
			ESP01DbgStr("+&DBGSENDING DATA ");
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <ESP01_Send+0x14c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4814      	ldr	r0, [pc, #80]	@ (8002964 <ESP01_Send+0x150>)
 8002914:	4798      	blx	r3
			ESP01DbgStr(strInt);
 8002916:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <ESP01_Send+0x14c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f107 0210 	add.w	r2, r7, #16
 800291e:	4610      	mov	r0, r2
 8002920:	4798      	blx	r3
			ESP01DbgStr("\n");
 8002922:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <ESP01_Send+0x14c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4810      	ldr	r0, [pc, #64]	@ (8002968 <ESP01_Send+0x154>)
 8002928:	4798      	blx	r3
		}
		return ESP01_SEND_READY;
 800292a:	2309      	movs	r3, #9
 800292c:	e008      	b.n	8002940 <ESP01_Send+0x12c>
	}
	if(ESP01DbgStr != NULL)
 800292e:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <ESP01_Send+0x14c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <ESP01_Send+0x12a>
		ESP01DbgStr("+&DBGSENDING DATA BUSY\n");
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <ESP01_Send+0x14c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	480c      	ldr	r0, [pc, #48]	@ (800296c <ESP01_Send+0x158>)
 800293c:	4798      	blx	r3
	return ESP01_SEND_BUSY;
 800293e:	2308      	movs	r3, #8
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000b70 	.word	0x20000b70
 800294c:	20000838 	.word	0x20000838
 8002950:	08015ac4 	.word	0x08015ac4
 8002954:	08014404 	.word	0x08014404
 8002958:	20000b6a 	.word	0x20000b6a
 800295c:	20000964 	.word	0x20000964
 8002960:	2000084c 	.word	0x2000084c
 8002964:	08014408 	.word	0x08014408
 8002968:	0801441c 	.word	0x0801441c
 800296c:	08014420 	.word	0x08014420

08002970 <ESP01_Init>:


void ESP01_Init(_sESP01Handle *hESP01){
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 8002978:	220c      	movs	r2, #12
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4810      	ldr	r0, [pc, #64]	@ (80029c0 <ESP01_Init+0x50>)
 800297e:	f010 fd62 	bl	8013446 <memcpy>

	esp01ATState = ESP01ATIDLE;
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <ESP01_Init+0x54>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <ESP01_Init+0x58>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 800298e:	4b0f      	ldr	r3, [pc, #60]	@ (80029cc <ESP01_Init+0x5c>)
 8002990:	2200      	movs	r2, #0
 8002992:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8002994:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <ESP01_Init+0x60>)
 8002996:	2200      	movs	r2, #0
 8002998:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 800299a:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <ESP01_Init+0x64>)
 800299c:	2200      	movs	r2, #0
 800299e:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <ESP01_Init+0x68>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 80029a6:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <ESP01_Init+0x6c>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <ESP01_Init+0x70>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <ESP01_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000b70 	.word	0x20000b70
 80029c4:	20000836 	.word	0x20000836
 80029c8:	200008de 	.word	0x200008de
 80029cc:	20000b68 	.word	0x20000b68
 80029d0:	20000b6a 	.word	0x20000b6a
 80029d4:	20000b66 	.word	0x20000b66
 80029d8:	20000b64 	.word	0x20000b64
 80029dc:	20000838 	.word	0x20000838
 80029e0:	20000848 	.word	0x20000848
 80029e4:	2000084c 	.word	0x2000084c

080029e8 <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <ESP01_Timeout10ms+0x54>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 80029f4:	4b11      	ldr	r3, [pc, #68]	@ (8002a3c <ESP01_Timeout10ms+0x54>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <ESP01_Timeout10ms+0x54>)
 80029fc:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <ESP01_Timeout10ms+0x58>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	@ (8002a40 <ESP01_Timeout10ms+0x58>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a40 <ESP01_Timeout10ms+0x58>)
 8002a0e:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <ESP01_Timeout10ms+0x58>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <ESP01_Timeout10ms+0x5c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <ESP01_Timeout10ms+0x60>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8002a26:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <ESP01_Timeout10ms+0x60>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4a06      	ldr	r2, [pc, #24]	@ (8002a48 <ESP01_Timeout10ms+0x60>)
 8002a2e:	6013      	str	r3, [r2, #0]
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000083c 	.word	0x2000083c
 8002a40:	20000840 	.word	0x20000840
 8002a44:	200008de 	.word	0x200008de
 8002a48:	20000844 	.word	0x20000844

08002a4c <ESP01_Task>:

void ESP01_Task(){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	if(esp01irRXAT != esp01iwRXAT)
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <ESP01_Task+0x28>)
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <ESP01_Task+0x2c>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <ESP01_Task+0x14>
		ESP01ATDecode();
 8002a5c:	f000 f820 	bl	8002aa0 <ESP01ATDecode>

	if(!esp01TimeoutTask)
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <ESP01_Task+0x30>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <ESP01_Task+0x20>
		ESP01DOConnection();
 8002a68:	f000 fd3a 	bl	80034e0 <ESP01DOConnection>

	ESP01SENDData();
 8002a6c:	f001 f90e 	bl	8003c8c <ESP01SENDData>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000b66 	.word	0x20000b66
 8002a78:	20000b64 	.word	0x20000b64
 8002a7c:	2000083c 	.word	0x2000083c

08002a80 <ESP01_AttachDebugStr>:

void ESP01_AttachChangeState(void (*aESP01ChangeState)(_eESP01STATUS esp01State)){
	ESP01ChangeState = aESP01ChangeState;
}

void ESP01_AttachDebugStr(void (*aESP01DbgStr)(const char *dbgStr)){
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	ESP01DbgStr = aESP01DbgStr;
 8002a88:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <ESP01_AttachDebugStr+0x1c>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6013      	str	r3, [r2, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000084c 	.word	0x2000084c

08002aa0 <ESP01ATDecode>:
		return 1;
	return 0;
}

/* Private Functions */
static void ESP01ATDecode(){
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
	uint16_t i;
	uint8_t value;
	if(esp01ATState==ESP01ATHARDRST0 || esp01ATState==ESP01ATHARDRST1 ||
 8002aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8002cd0 <ESP01ATDecode+0x230>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b19      	cmp	r3, #25
 8002aac:	d007      	beq.n	8002abe <ESP01ATDecode+0x1e>
 8002aae:	4b88      	ldr	r3, [pc, #544]	@ (8002cd0 <ESP01ATDecode+0x230>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b1a      	cmp	r3, #26
 8002ab4:	d003      	beq.n	8002abe <ESP01ATDecode+0x1e>
	   esp01ATState==ESP01ATHARDRSTSTOP){
 8002ab6:	4b86      	ldr	r3, [pc, #536]	@ (8002cd0 <ESP01ATDecode+0x230>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
	if(esp01ATState==ESP01ATHARDRST0 || esp01ATState==ESP01ATHARDRST1 ||
 8002aba:	2b1b      	cmp	r3, #27
 8002abc:	d105      	bne.n	8002aca <ESP01ATDecode+0x2a>
		esp01irRXAT = esp01iwRXAT;
 8002abe:	4b85      	ldr	r3, [pc, #532]	@ (8002cd4 <ESP01ATDecode+0x234>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	4b85      	ldr	r3, [pc, #532]	@ (8002cd8 <ESP01ATDecode+0x238>)
 8002ac4:	801a      	strh	r2, [r3, #0]
		return;
 8002ac6:	f000 bcd2 	b.w	800346e <ESP01ATDecode+0x9ce>
	}
	i = esp01iwRXAT;
 8002aca:	4b82      	ldr	r3, [pc, #520]	@ (8002cd4 <ESP01ATDecode+0x234>)
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	80fb      	strh	r3, [r7, #6]
	esp01TimeoutDataRx = 2;
 8002ad0:	4b82      	ldr	r3, [pc, #520]	@ (8002cdc <ESP01ATDecode+0x23c>)
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	601a      	str	r2, [r3, #0]
	while(esp01irRXAT != i){
 8002ad6:	f000 bcc4 	b.w	8003462 <ESP01ATDecode+0x9c2>
		value = esp01RXATBuf[esp01irRXAT];
 8002ada:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd8 <ESP01ATDecode+0x238>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <ESP01ATDecode+0x240>)
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	717b      	strb	r3, [r7, #5]
		switch(esp01HState){
 8002ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b16      	cmp	r3, #22
 8002aec:	f200 8498 	bhi.w	8003420 <ESP01ATDecode+0x980>
 8002af0:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <ESP01ATDecode+0x58>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b55 	.word	0x08002b55
 8002afc:	08002c47 	.word	0x08002c47
 8002b00:	08002e27 	.word	0x08002e27
 8002b04:	08003421 	.word	0x08003421
 8002b08:	08003421 	.word	0x08003421
 8002b0c:	08003009 	.word	0x08003009
 8002b10:	0800304f 	.word	0x0800304f
 8002b14:	08003065 	.word	0x08003065
 8002b18:	08003091 	.word	0x08003091
 8002b1c:	08003421 	.word	0x08003421
 8002b20:	080030df 	.word	0x080030df
 8002b24:	08003107 	.word	0x08003107
 8002b28:	0800315d 	.word	0x0800315d
 8002b2c:	0800319f 	.word	0x0800319f
 8002b30:	08003259 	.word	0x08003259
 8002b34:	08003421 	.word	0x08003421
 8002b38:	08003421 	.word	0x08003421
 8002b3c:	08003421 	.word	0x08003421
 8002b40:	08003421 	.word	0x08003421
 8002b44:	08003421 	.word	0x08003421
 8002b48:	0800329f 	.word	0x0800329f
 8002b4c:	08003309 	.word	0x08003309
 8002b50:	08003373 	.word	0x08003373
		case 0:
            indexResponse = 0;
 8002b54:	4b64      	ldr	r3, [pc, #400]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
            indexResponseChar = 4;
 8002b5a:	4b64      	ldr	r3, [pc, #400]	@ (8002cec <ESP01ATDecode+0x24c>)
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002b60:	e03e      	b.n	8002be0 <ESP01ATDecode+0x140>
                if(value == responses[indexResponse][indexResponseChar]){ // todos los ocmandos de respuesta tienen una cabecer
 8002b62:	4b61      	ldr	r3, [pc, #388]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b61      	ldr	r3, [pc, #388]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cec <ESP01ATDecode+0x24c>)
 8002b70:	7812      	ldrb	r2, [r2, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	797a      	ldrb	r2, [r7, #5]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d12b      	bne.n	8002bd4 <ESP01ATDecode+0x134>
                    esp01nBytes = (responses[indexResponse][0] - '0');			// aca saca los primeros dos numero que guarda la cantidad de bytes de la cabecera hace el *10 pq pone el primer byte en las decenas  y al otro lo suma así nomas
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b5b      	ldr	r3, [pc, #364]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	3b30      	subs	r3, #48	@ 0x30
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b59      	ldr	r3, [pc, #356]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002b90:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002b92:	4b58      	ldr	r3, [pc, #352]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	4b54      	ldr	r3, [pc, #336]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002ba2:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002ba4:	4b50      	ldr	r3, [pc, #320]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b51      	ldr	r3, [pc, #324]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b30      	subs	r3, #48	@ 0x30
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002bc4:	801a      	strh	r2, [r3, #0]
                    esp01nBytes--;
 8002bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b49      	ldr	r3, [pc, #292]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002bd0:	801a      	strh	r2, [r3, #0]
                    break;
 8002bd2:	e00d      	b.n	8002bf0 <ESP01ATDecode+0x150>
                }
                indexResponse++;
 8002bd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b42      	ldr	r3, [pc, #264]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002bde:	701a      	strb	r2, [r3, #0]
            while(responses[indexResponse] != NULL){
 8002be0:	4b41      	ldr	r3, [pc, #260]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b42      	ldr	r3, [pc, #264]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1b8      	bne.n	8002b62 <ESP01ATDecode+0xc2>
            }
            if(responses[indexResponse] != NULL){
 8002bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <ESP01ATDecode+0x176>
                esp01HState = 1;
 8002c00:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
                indexResponseChar++;
 8002c06:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <ESP01ATDecode+0x24c>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <ESP01ATDecode+0x24c>)
 8002c10:	701a      	strb	r2, [r3, #0]
						esp01Flags.bit.WAITINGSYMBOL = 0;
						esp01TimeoutTxSymbol = 0;
					}
				}
			}
			break;
 8002c12:	f000 bc0c 	b.w	800342e <ESP01ATDecode+0x98e>
				esp01TimeoutDataRx = 0;
 8002c16:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <ESP01ATDecode+0x23c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
				if(esp01Flags.bit.WAITINGSYMBOL){
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <ESP01ATDecode+0x258>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 8401 	beq.w	800342e <ESP01ATDecode+0x98e>
					if(value == '>'){
 8002c2c:	797b      	ldrb	r3, [r7, #5]
 8002c2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8002c30:	f040 83fd 	bne.w	800342e <ESP01ATDecode+0x98e>
						esp01Flags.bit.WAITINGSYMBOL = 0;
 8002c34:	4a30      	ldr	r2, [pc, #192]	@ (8002cf8 <ESP01ATDecode+0x258>)
 8002c36:	7813      	ldrb	r3, [r2, #0]
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	7013      	strb	r3, [r2, #0]
						esp01TimeoutTxSymbol = 0;
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <ESP01ATDecode+0x25c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
			break;
 8002c44:	e3f3      	b.n	800342e <ESP01ATDecode+0x98e>
		case 1:
            if(value == responses[indexResponse][indexResponseChar]){
 8002c46:	4b28      	ldr	r3, [pc, #160]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c52:	4a26      	ldr	r2, [pc, #152]	@ (8002cec <ESP01ATDecode+0x24c>)
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	797a      	ldrb	r2, [r7, #5]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d133      	bne.n	8002cc8 <ESP01ATDecode+0x228>
                esp01nBytes--;
 8002c60:	4b24      	ldr	r3, [pc, #144]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002c6a:	801a      	strh	r2, [r3, #0]
                if(!esp01nBytes || value=='\r'){
 8002c6c:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <ESP01ATDecode+0x254>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <ESP01ATDecode+0x1dc>
 8002c74:	797b      	ldrb	r3, [r7, #5]
 8002c76:	2b0d      	cmp	r3, #13
 8002c78:	f040 80ce 	bne.w	8002e18 <ESP01ATDecode+0x378>
                    esp01HState = (responses[indexResponse][2] - '0');
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	3b30      	subs	r3, #48	@ 0x30
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002c92:	701a      	strb	r2, [r3, #0]
                    esp01HState *= 10;
 8002c94:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b10      	ldr	r3, [pc, #64]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002ca4:	701a      	strb	r2, [r3, #0]
                    esp01HState += (responses[indexResponse][3] - '0');
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <ESP01ATDecode+0x250>)
 8002cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb2:	3303      	adds	r3, #3
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	3b30      	subs	r3, #48	@ 0x30
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <ESP01ATDecode+0x244>)
 8002cc4:	701a      	strb	r2, [r3, #0]
                    break;
 8002cc6:	e3bf      	b.n	8003448 <ESP01ATDecode+0x9a8>
                }
            }
            else{
                indexResponse = 0;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <ESP01ATDecode+0x248>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002cce:	e087      	b.n	8002de0 <ESP01ATDecode+0x340>
 8002cd0:	20000836 	.word	0x20000836
 8002cd4:	20000b64 	.word	0x20000b64
 8002cd8:	20000b66 	.word	0x20000b66
 8002cdc:	20000840 	.word	0x20000840
 8002ce0:	200008e4 	.word	0x200008e4
 8002ce4:	200008de 	.word	0x200008de
 8002ce8:	20000b7c 	.word	0x20000b7c
 8002cec:	20000b7d 	.word	0x20000b7d
 8002cf0:	08015d90 	.word	0x08015d90
 8002cf4:	200008e0 	.word	0x200008e0
 8002cf8:	20000838 	.word	0x20000838
 8002cfc:	20000844 	.word	0x20000844
                    esp01nBytes = (responses[indexResponse][0] - '0');
 8002d00:	4ba5      	ldr	r3, [pc, #660]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4ba5      	ldr	r3, [pc, #660]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	3b30      	subs	r3, #48	@ 0x30
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4ba3      	ldr	r3, [pc, #652]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d14:	801a      	strh	r2, [r3, #0]
                    esp01nBytes *= 10;
 8002d16:	4ba2      	ldr	r3, [pc, #648]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	4b9e      	ldr	r3, [pc, #632]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d26:	801a      	strh	r2, [r3, #0]
                    esp01nBytes += (responses[indexResponse][1] - '0');
 8002d28:	4b9b      	ldr	r3, [pc, #620]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b9b      	ldr	r3, [pc, #620]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	3301      	adds	r3, #1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b99      	ldr	r3, [pc, #612]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b30      	subs	r3, #48	@ 0x30
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	4b96      	ldr	r3, [pc, #600]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d48:	801a      	strh	r2, [r3, #0]
                    esp01nBytes -= (indexResponseChar-3);
 8002d4a:	4b95      	ldr	r3, [pc, #596]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	4a95      	ldr	r2, [pc, #596]	@ (8002fa4 <ESP01ATDecode+0x504>)
 8002d50:	7812      	ldrb	r2, [r2, #0]
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3303      	adds	r3, #3
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b91      	ldr	r3, [pc, #580]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d5c:	801a      	strh	r2, [r3, #0]
                    if(esp01nBytes<128 && value==responses[indexResponse][indexResponseChar]){
 8002d5e:	4b90      	ldr	r3, [pc, #576]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d64:	d836      	bhi.n	8002dd4 <ESP01ATDecode+0x334>
 8002d66:	4b8c      	ldr	r3, [pc, #560]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d72:	4a8c      	ldr	r2, [pc, #560]	@ (8002fa4 <ESP01ATDecode+0x504>)
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	797a      	ldrb	r2, [r7, #5]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d129      	bne.n	8002dd4 <ESP01ATDecode+0x334>
                        if(esp01nBytes == 0){
 8002d80:	4b87      	ldr	r3, [pc, #540]	@ (8002fa0 <ESP01ATDecode+0x500>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d134      	bne.n	8002df2 <ESP01ATDecode+0x352>
                            esp01HState = (responses[indexResponse][2] - '0');
 8002d88:	4b83      	ldr	r3, [pc, #524]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b83      	ldr	r3, [pc, #524]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	3302      	adds	r3, #2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3b30      	subs	r3, #48	@ 0x30
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b82      	ldr	r3, [pc, #520]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002d9e:	701a      	strb	r2, [r3, #0]
                            esp01HState *= 10;
 8002da0:	4b81      	ldr	r3, [pc, #516]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002db0:	701a      	strb	r2, [r3, #0]
                            esp01HState += (responses[indexResponse][3] - '0');
 8002db2:	4b79      	ldr	r3, [pc, #484]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b78      	ldr	r3, [pc, #480]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dbe:	3303      	adds	r3, #3
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	4b79      	ldr	r3, [pc, #484]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3b30      	subs	r3, #48	@ 0x30
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4b76      	ldr	r3, [pc, #472]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002dd0:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8002dd2:	e00e      	b.n	8002df2 <ESP01ATDecode+0x352>
                    }
                    indexResponse++;
 8002dd4:	4b70      	ldr	r3, [pc, #448]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b6e      	ldr	r3, [pc, #440]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002dde:	701a      	strb	r2, [r3, #0]
                while(responses[indexResponse] != NULL){
 8002de0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d187      	bne.n	8002d00 <ESP01ATDecode+0x260>
 8002df0:	e000      	b.n	8002df4 <ESP01ATDecode+0x354>
                        break;
 8002df2:	bf00      	nop
                }
                if(responses[indexResponse] == NULL){
 8002df4:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b68      	ldr	r3, [pc, #416]	@ (8002f9c <ESP01ATDecode+0x4fc>)
 8002dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d109      	bne.n	8002e18 <ESP01ATDecode+0x378>
                    esp01HState = 0;
 8002e04:	4b68      	ldr	r3, [pc, #416]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
                    esp01irRXAT--;
 8002e0a:	4b68      	ldr	r3, [pc, #416]	@ (8002fac <ESP01ATDecode+0x50c>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	4b66      	ldr	r3, [pc, #408]	@ (8002fac <ESP01ATDecode+0x50c>)
 8002e14:	801a      	strh	r2, [r3, #0]
                    break;
 8002e16:	e317      	b.n	8003448 <ESP01ATDecode+0x9a8>
                }
            }
			indexResponseChar++;
 8002e18:	4b62      	ldr	r3, [pc, #392]	@ (8002fa4 <ESP01ATDecode+0x504>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b60      	ldr	r3, [pc, #384]	@ (8002fa4 <ESP01ATDecode+0x504>)
 8002e22:	701a      	strb	r2, [r3, #0]
			break;
 8002e24:	e310      	b.n	8003448 <ESP01ATDecode+0x9a8>
		case 2:
			if(value == '\n'){
 8002e26:	797b      	ldrb	r3, [r7, #5]
 8002e28:	2b0a      	cmp	r3, #10
 8002e2a:	f040 8302 	bne.w	8003432 <ESP01ATDecode+0x992>
				esp01HState = 0;
 8002e2e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa8 <ESP01ATDecode+0x508>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
				switch(indexResponse){
 8002e34:	4b58      	ldr	r3, [pc, #352]	@ (8002f98 <ESP01ATDecode+0x4f8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b11      	cmp	r3, #17
 8002e3a:	f200 82fa 	bhi.w	8003432 <ESP01ATDecode+0x992>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <ESP01ATDecode+0x3a4>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ff1 	.word	0x08002ff1
 8002e48:	08002ff1 	.word	0x08002ff1
 8002e4c:	08002e8d 	.word	0x08002e8d
 8002e50:	08002ea9 	.word	0x08002ea9
 8002e54:	08002ff1 	.word	0x08002ff1
 8002e58:	08002ff1 	.word	0x08002ff1
 8002e5c:	08002ed7 	.word	0x08002ed7
 8002e60:	08002ed7 	.word	0x08002ed7
 8002e64:	08002f0b 	.word	0x08002f0b
 8002e68:	08002f17 	.word	0x08002f17
 8002e6c:	08002f33 	.word	0x08002f33
 8002e70:	08002f77 	.word	0x08002f77
 8002e74:	08003433 	.word	0x08003433
 8002e78:	08002f83 	.word	0x08002f83
 8002e7c:	08003433 	.word	0x08003433
 8002e80:	08002fd5 	.word	0x08002fd5
 8002e84:	08002ff1 	.word	0x08002ff1
 8002e88:	08002ff1 	.word	0x08002ff1
				case 0://AT
				case 1:
					break;
				case 2://OK
					if(esp01ATState == ESP01ATRESPONSE){
 8002e8c:	4b48      	ldr	r3, [pc, #288]	@ (8002fb0 <ESP01ATDecode+0x510>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	f040 80af 	bne.w	8002ff4 <ESP01ATDecode+0x554>
						esp01TimeoutTask = 0;
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <ESP01ATDecode+0x514>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002e9c:	4a46      	ldr	r2, [pc, #280]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002e9e:	7813      	ldrb	r3, [r2, #0]
 8002ea0:	f043 0320 	orr.w	r3, r3, #32
 8002ea4:	7013      	strb	r3, [r2, #0]
					}
					break;
 8002ea6:	e0a5      	b.n	8002ff4 <ESP01ATDecode+0x554>
				case 3://ERROR
					if(esp01Flags.bit.SENDINGDATA){
 8002ea8:	4b43      	ldr	r3, [pc, #268]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 80a0 	beq.w	8002ff8 <ESP01ATDecode+0x558>
						esp01Flags.bit.SENDINGDATA = 0;
 8002eb8:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002eba:	7813      	ldrb	r3, [r2, #0]
 8002ebc:	f023 0308 	bic.w	r3, r3, #8
 8002ec0:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002ec2:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002ec4:	7813      	ldrb	r3, [r2, #0]
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eca:	7013      	strb	r3, [r2, #0]
						esp01irTX = esp01iwTX;
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fbc <ESP01ATDecode+0x51c>)
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <ESP01ATDecode+0x520>)
 8002ed2:	801a      	strh	r2, [r3, #0]
					}
					break;
 8002ed4:	e090      	b.n	8002ff8 <ESP01ATDecode+0x558>
					break;
				case 5://WIFI CONNECTED
					break;
				case 6://WIFI DISCONNECT
				case 7://WIFI DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002ed6:	4a38      	ldr	r2, [pc, #224]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002ed8:	7813      	ldrb	r3, [r2, #0]
 8002eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ede:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002ee0:	4a35      	ldr	r2, [pc, #212]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002ee2:	7813      	ldrb	r3, [r2, #0]
 8002ee4:	f023 0302 	bic.w	r3, r3, #2
 8002ee8:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002eea:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <ESP01ATDecode+0x524>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <ESP01ATDecode+0x45a>
						ESP01ChangeState(ESP01_WIFI_DISCONNECTED);
 8002ef2:	4b34      	ldr	r3, [pc, #208]	@ (8002fc4 <ESP01ATDecode+0x524>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	4798      	blx	r3
					if(esp01ATState == ESP01CWJAPRESPONSE)
 8002efa:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb0 <ESP01ATDecode+0x510>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d07c      	beq.n	8002ffc <ESP01ATDecode+0x55c>
						break;
					esp01ATState = ESP01ATHARDRSTSTOP;
 8002f02:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <ESP01ATDecode+0x510>)
 8002f04:	221b      	movs	r2, #27
 8002f06:	701a      	strb	r2, [r3, #0]
					break;
 8002f08:	e07d      	b.n	8003006 <ESP01ATDecode+0x566>
				case 8://DISCONNECTED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f0c:	7813      	ldrb	r3, [r2, #0]
 8002f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f12:	7013      	strb	r3, [r2, #0]
					break;
 8002f14:	e077      	b.n	8003006 <ESP01ATDecode+0x566>
				case 9://SEND OK
					esp01Flags.bit.SENDINGDATA = 0;
 8002f16:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f18:	7813      	ldrb	r3, [r2, #0]
 8002f1a:	f023 0308 	bic.w	r3, r3, #8
 8002f1e:	7013      	strb	r3, [r2, #0]
					if(ESP01ChangeState != NULL)
 8002f20:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <ESP01ATDecode+0x524>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d06b      	beq.n	8003000 <ESP01ATDecode+0x560>
						ESP01ChangeState(ESP01_SEND_OK);
 8002f28:	4b26      	ldr	r3, [pc, #152]	@ (8002fc4 <ESP01ATDecode+0x524>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	200a      	movs	r0, #10
 8002f2e:	4798      	blx	r3
					break;
 8002f30:	e066      	b.n	8003000 <ESP01ATDecode+0x560>
				case 10://CONNECT
					if(mode == CONNECTWIFI){
 8002f32:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <ESP01ATDecode+0x528>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d164      	bne.n	8003004 <ESP01ATDecode+0x564>
						esp01TimeoutTask = 0;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <ESP01ATDecode+0x514>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
						esp01Flags.bit.ATRESPONSEOK = 1;
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f42:	7813      	ldrb	r3, [r2, #0]
 8002f44:	f043 0320 	orr.w	r3, r3, #32
 8002f48:	7013      	strb	r3, [r2, #0]
						esp01Flags.bit.UDPTCPCONNECTED = 1;
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f4c:	7813      	ldrb	r3, [r2, #0]
 8002f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f52:	7013      	strb	r3, [r2, #0]
						if(ESP01DbgStr != NULL)
 8002f54:	4b1d      	ldr	r3, [pc, #116]	@ (8002fcc <ESP01ATDecode+0x52c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <ESP01ATDecode+0x4c4>
								ESP01DbgStr("+&UDPTCPCONNECTED=1\n");
 8002f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fcc <ESP01ATDecode+0x52c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	481b      	ldr	r0, [pc, #108]	@ (8002fd0 <ESP01ATDecode+0x530>)
 8002f62:	4798      	blx	r3
						if(ESP01ChangeState != NULL)
 8002f64:	4b17      	ldr	r3, [pc, #92]	@ (8002fc4 <ESP01ATDecode+0x524>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d04b      	beq.n	8003004 <ESP01ATDecode+0x564>
							ESP01ChangeState(ESP01_UDPTCP_CONNECTED);
 8002f6c:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <ESP01ATDecode+0x524>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2007      	movs	r0, #7
 8002f72:	4798      	blx	r3
					}
					break;
 8002f74:	e046      	b.n	8003004 <ESP01ATDecode+0x564>
				case 11://CLOSED
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f76:	4a10      	ldr	r2, [pc, #64]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f78:	7813      	ldrb	r3, [r2, #0]
 8002f7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f7e:	7013      	strb	r3, [r2, #0]
					break;
 8002f80:	e041      	b.n	8003006 <ESP01ATDecode+0x566>
				case 13://busy
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002f82:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f84:	7813      	ldrb	r3, [r2, #0]
 8002f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f8a:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb8 <ESP01ATDecode+0x518>)
 8002f8e:	7813      	ldrb	r3, [r2, #0]
 8002f90:	f023 0302 	bic.w	r3, r3, #2
 8002f94:	7013      	strb	r3, [r2, #0]
					break;
 8002f96:	e036      	b.n	8003006 <ESP01ATDecode+0x566>
 8002f98:	20000b7c 	.word	0x20000b7c
 8002f9c:	08015d90 	.word	0x08015d90
 8002fa0:	200008e0 	.word	0x200008e0
 8002fa4:	20000b7d 	.word	0x20000b7d
 8002fa8:	200008de 	.word	0x200008de
 8002fac:	20000b66 	.word	0x20000b66
 8002fb0:	20000836 	.word	0x20000836
 8002fb4:	2000083c 	.word	0x2000083c
 8002fb8:	20000838 	.word	0x20000838
 8002fbc:	20000b6a 	.word	0x20000b6a
 8002fc0:	20000b68 	.word	0x20000b68
 8002fc4:	20000848 	.word	0x20000848
 8002fc8:	20000b7e 	.word	0x20000b7e
 8002fcc:	2000084c 	.word	0x2000084c
 8002fd0:	08014438 	.word	0x08014438
				case 15://ready
					esp01Flags.bit.UDPTCPCONNECTED = 0;
 8002fd4:	4a8f      	ldr	r2, [pc, #572]	@ (8003214 <ESP01ATDecode+0x774>)
 8002fd6:	7813      	ldrb	r3, [r2, #0]
 8002fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fdc:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WIFICONNECTED = 0;
 8002fde:	4a8d      	ldr	r2, [pc, #564]	@ (8003214 <ESP01ATDecode+0x774>)
 8002fe0:	7813      	ldrb	r3, [r2, #0]
 8002fe2:	f023 0302 	bic.w	r3, r3, #2
 8002fe6:	7013      	strb	r3, [r2, #0]
					esp01ATState = ESP01ATHARDRSTSTOP;
 8002fe8:	4b8b      	ldr	r3, [pc, #556]	@ (8003218 <ESP01ATDecode+0x778>)
 8002fea:	221b      	movs	r2, #27
 8002fec:	701a      	strb	r2, [r3, #0]
					break;
 8002fee:	e00a      	b.n	8003006 <ESP01ATDecode+0x566>
					break;
 8002ff0:	bf00      	nop
 8002ff2:	e21e      	b.n	8003432 <ESP01ATDecode+0x992>
					break;
 8002ff4:	bf00      	nop
 8002ff6:	e21c      	b.n	8003432 <ESP01ATDecode+0x992>
					break;
 8002ff8:	bf00      	nop
 8002ffa:	e21a      	b.n	8003432 <ESP01ATDecode+0x992>
						break;
 8002ffc:	bf00      	nop
 8002ffe:	e218      	b.n	8003432 <ESP01ATDecode+0x992>
					break;
 8003000:	bf00      	nop
 8003002:	e216      	b.n	8003432 <ESP01ATDecode+0x992>
					break;
 8003004:	bf00      	nop
					break;
				case 17://busy s
					break;
				}
			}
			break;
 8003006:	e214      	b.n	8003432 <ESP01ATDecode+0x992>
		case 5://CIFR,STAIP
			if(value == ','){
 8003008:	797b      	ldrb	r3, [r7, #5]
 800300a:	2b2c      	cmp	r3, #44	@ 0x2c
 800300c:	d10c      	bne.n	8003028 <ESP01ATDecode+0x588>
				esp01HState = 6;
 800300e:	4b83      	ldr	r3, [pc, #524]	@ (800321c <ESP01ATDecode+0x77c>)
 8003010:	2206      	movs	r2, #6
 8003012:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 8003014:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <ESP01ATDecode+0x780>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 820c 	beq.w	8003436 <ESP01ATDecode+0x996>
					ESP01DbgStr("+&DBGRESPONSE CIFSR\n");
 800301e:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <ESP01ATDecode+0x780>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4880      	ldr	r0, [pc, #512]	@ (8003224 <ESP01ATDecode+0x784>)
 8003024:	4798      	blx	r3
				esp01HState = 0;
				esp01irRXAT--;
				if(ESP01DbgStr != NULL)
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
			}
			break;
 8003026:	e206      	b.n	8003436 <ESP01ATDecode+0x996>
				esp01HState = 0;
 8003028:	4b7c      	ldr	r3, [pc, #496]	@ (800321c <ESP01ATDecode+0x77c>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 800302e:	4b7e      	ldr	r3, [pc, #504]	@ (8003228 <ESP01ATDecode+0x788>)
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	4b7c      	ldr	r3, [pc, #496]	@ (8003228 <ESP01ATDecode+0x788>)
 8003038:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 800303a:	4b79      	ldr	r3, [pc, #484]	@ (8003220 <ESP01ATDecode+0x780>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 81f9 	beq.w	8003436 <ESP01ATDecode+0x996>
					ESP01DbgStr("+&DBGERROR CIFSR 5\n");
 8003044:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <ESP01ATDecode+0x780>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4878      	ldr	r0, [pc, #480]	@ (800322c <ESP01ATDecode+0x78c>)
 800304a:	4798      	blx	r3
			break;
 800304c:	e1f3      	b.n	8003436 <ESP01ATDecode+0x996>
		case 6:
			if(value == '\"'){
 800304e:	797b      	ldrb	r3, [r7, #5]
 8003050:	2b22      	cmp	r3, #34	@ 0x22
 8003052:	f040 81f2 	bne.w	800343a <ESP01ATDecode+0x99a>
				esp01HState = 7;
 8003056:	4b71      	ldr	r3, [pc, #452]	@ (800321c <ESP01ATDecode+0x77c>)
 8003058:	2207      	movs	r2, #7
 800305a:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 800305c:	4b74      	ldr	r3, [pc, #464]	@ (8003230 <ESP01ATDecode+0x790>)
 800305e:	2200      	movs	r2, #0
 8003060:	801a      	strh	r2, [r3, #0]
			}
			break;
 8003062:	e1ea      	b.n	800343a <ESP01ATDecode+0x99a>
		case 7:
			if(value == '\"' || esp01nBytes==16)
 8003064:	797b      	ldrb	r3, [r7, #5]
 8003066:	2b22      	cmp	r3, #34	@ 0x22
 8003068:	d003      	beq.n	8003072 <ESP01ATDecode+0x5d2>
 800306a:	4b71      	ldr	r3, [pc, #452]	@ (8003230 <ESP01ATDecode+0x790>)
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d103      	bne.n	800307a <ESP01ATDecode+0x5da>
				esp01HState = 8;
 8003072:	4b6a      	ldr	r3, [pc, #424]	@ (800321c <ESP01ATDecode+0x77c>)
 8003074:	2208      	movs	r2, #8
 8003076:	701a      	strb	r2, [r3, #0]
			else
				esp01LocalIP[esp01nBytes++] = value;
			break;
 8003078:	e1e6      	b.n	8003448 <ESP01ATDecode+0x9a8>
				esp01LocalIP[esp01nBytes++] = value;
 800307a:	4b6d      	ldr	r3, [pc, #436]	@ (8003230 <ESP01ATDecode+0x790>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	b291      	uxth	r1, r2
 8003082:	4a6b      	ldr	r2, [pc, #428]	@ (8003230 <ESP01ATDecode+0x790>)
 8003084:	8011      	strh	r1, [r2, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	4a6a      	ldr	r2, [pc, #424]	@ (8003234 <ESP01ATDecode+0x794>)
 800308a:	797b      	ldrb	r3, [r7, #5]
 800308c:	5453      	strb	r3, [r2, r1]
			break;
 800308e:	e1db      	b.n	8003448 <ESP01ATDecode+0x9a8>
		case 8:
			if(value == '\n'){
 8003090:	797b      	ldrb	r3, [r7, #5]
 8003092:	2b0a      	cmp	r3, #10
 8003094:	f040 81d3 	bne.w	800343e <ESP01ATDecode+0x99e>
				esp01HState = 0;
 8003098:	4b60      	ldr	r3, [pc, #384]	@ (800321c <ESP01ATDecode+0x77c>)
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
				if(esp01nBytes < 16){
 800309e:	4b64      	ldr	r3, [pc, #400]	@ (8003230 <ESP01ATDecode+0x790>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d80e      	bhi.n	80030c4 <ESP01ATDecode+0x624>
					esp01LocalIP[esp01nBytes] = '\0';
 80030a6:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <ESP01ATDecode+0x790>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b61      	ldr	r3, [pc, #388]	@ (8003234 <ESP01ATDecode+0x794>)
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]
					esp01Flags.bit.ATRESPONSEOK = 1;
 80030b2:	4a58      	ldr	r2, [pc, #352]	@ (8003214 <ESP01ATDecode+0x774>)
 80030b4:	7813      	ldrb	r3, [r2, #0]
 80030b6:	f043 0320 	orr.w	r3, r3, #32
 80030ba:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTask = 0;
 80030bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003238 <ESP01ATDecode+0x798>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e002      	b.n	80030ca <ESP01ATDecode+0x62a>
				}
				else
					esp01LocalIP[0] = '\0';
 80030c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003234 <ESP01ATDecode+0x794>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
				if(ESP01ChangeState != NULL)
 80030ca:	4b5c      	ldr	r3, [pc, #368]	@ (800323c <ESP01ATDecode+0x79c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 81b5 	beq.w	800343e <ESP01ATDecode+0x99e>
					ESP01ChangeState(ESP01_WIFI_NEW_IP);
 80030d4:	4b59      	ldr	r3, [pc, #356]	@ (800323c <ESP01ATDecode+0x79c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2004      	movs	r0, #4
 80030da:	4798      	blx	r3
			}
			break;
 80030dc:	e1af      	b.n	800343e <ESP01ATDecode+0x99e>
		case 10://IPD
			if(value == ','){
 80030de:	797b      	ldrb	r3, [r7, #5]
 80030e0:	2b2c      	cmp	r3, #44	@ 0x2c
 80030e2:	d106      	bne.n	80030f2 <ESP01ATDecode+0x652>
				esp01HState = 11;
 80030e4:	4b4d      	ldr	r3, [pc, #308]	@ (800321c <ESP01ATDecode+0x77c>)
 80030e6:	220b      	movs	r2, #11
 80030e8:	701a      	strb	r2, [r3, #0]
				esp01nBytes = 0;
 80030ea:	4b51      	ldr	r3, [pc, #324]	@ (8003230 <ESP01ATDecode+0x790>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	801a      	strh	r2, [r3, #0]
			}
			else{
				esp01HState = 0;
				esp01irRXAT--;
			}
			break;
 80030f0:	e1aa      	b.n	8003448 <ESP01ATDecode+0x9a8>
				esp01HState = 0;
 80030f2:	4b4a      	ldr	r3, [pc, #296]	@ (800321c <ESP01ATDecode+0x77c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80030f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003228 <ESP01ATDecode+0x788>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b49      	ldr	r3, [pc, #292]	@ (8003228 <ESP01ATDecode+0x788>)
 8003102:	801a      	strh	r2, [r3, #0]
			break;
 8003104:	e1a0      	b.n	8003448 <ESP01ATDecode+0x9a8>
		case 11:
			if(value == ':')
 8003106:	797b      	ldrb	r3, [r7, #5]
 8003108:	2b3a      	cmp	r3, #58	@ 0x3a
 800310a:	d103      	bne.n	8003114 <ESP01ATDecode+0x674>
				esp01HState = 12;
 800310c:	4b43      	ldr	r3, [pc, #268]	@ (800321c <ESP01ATDecode+0x77c>)
 800310e:	220c      	movs	r2, #12
 8003110:	701a      	strb	r2, [r3, #0]
						esp01nBytes *= 10;
						esp01nBytes += (value - '0');
					//}
				}
			}
			break;
 8003112:	e199      	b.n	8003448 <ESP01ATDecode+0x9a8>
				if(value<'0' || value>'9'){
 8003114:	797b      	ldrb	r3, [r7, #5]
 8003116:	2b2f      	cmp	r3, #47	@ 0x2f
 8003118:	d902      	bls.n	8003120 <ESP01ATDecode+0x680>
 800311a:	797b      	ldrb	r3, [r7, #5]
 800311c:	2b39      	cmp	r3, #57	@ 0x39
 800311e:	d909      	bls.n	8003134 <ESP01ATDecode+0x694>
					esp01HState = 0;
 8003120:	4b3e      	ldr	r3, [pc, #248]	@ (800321c <ESP01ATDecode+0x77c>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
					esp01irRXAT--;
 8003126:	4b40      	ldr	r3, [pc, #256]	@ (8003228 <ESP01ATDecode+0x788>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <ESP01ATDecode+0x788>)
 8003130:	801a      	strh	r2, [r3, #0]
			break;
 8003132:	e189      	b.n	8003448 <ESP01ATDecode+0x9a8>
						esp01nBytes *= 10;
 8003134:	4b3e      	ldr	r3, [pc, #248]	@ (8003230 <ESP01ATDecode+0x790>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4413      	add	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <ESP01ATDecode+0x790>)
 8003144:	801a      	strh	r2, [r3, #0]
						esp01nBytes += (value - '0');
 8003146:	797b      	ldrb	r3, [r7, #5]
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b39      	ldr	r3, [pc, #228]	@ (8003230 <ESP01ATDecode+0x790>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	4413      	add	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b30      	subs	r3, #48	@ 0x30
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b36      	ldr	r3, [pc, #216]	@ (8003230 <ESP01ATDecode+0x790>)
 8003158:	801a      	strh	r2, [r3, #0]
			break;
 800315a:	e175      	b.n	8003448 <ESP01ATDecode+0x9a8>
		case 12:
			if(esp01Handle.WriteByteToBufRX != NULL)
 800315c:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <ESP01ATDecode+0x7a0>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d004      	beq.n	800316e <ESP01ATDecode+0x6ce>
				esp01Handle.WriteByteToBufRX(value);
 8003164:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <ESP01ATDecode+0x7a0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	797a      	ldrb	r2, [r7, #5]
 800316a:	4610      	mov	r0, r2
 800316c:	4798      	blx	r3
			esp01nBytes--;
 800316e:	4b30      	ldr	r3, [pc, #192]	@ (8003230 <ESP01ATDecode+0x790>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b2e      	ldr	r3, [pc, #184]	@ (8003230 <ESP01ATDecode+0x790>)
 8003178:	801a      	strh	r2, [r3, #0]
			if(!esp01nBytes){
 800317a:	4b2d      	ldr	r3, [pc, #180]	@ (8003230 <ESP01ATDecode+0x790>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 815f 	bne.w	8003442 <ESP01ATDecode+0x9a2>
				esp01HState = 0;
 8003184:	4b25      	ldr	r3, [pc, #148]	@ (800321c <ESP01ATDecode+0x77c>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL)
 800318a:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <ESP01ATDecode+0x780>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8157 	beq.w	8003442 <ESP01ATDecode+0x9a2>
					ESP01DbgStr("+&DBGRESPONSE IPD\n");
 8003194:	4b22      	ldr	r3, [pc, #136]	@ (8003220 <ESP01ATDecode+0x780>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	482a      	ldr	r0, [pc, #168]	@ (8003244 <ESP01ATDecode+0x7a4>)
 800319a:	4798      	blx	r3
			}
			break;
 800319c:	e151      	b.n	8003442 <ESP01ATDecode+0x9a2>
		case 13:
			if(esp01ATState == ESP01_WAITING_CONNECTION){
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <ESP01ATDecode+0x778>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b13      	cmp	r3, #19
 80031a4:	d115      	bne.n	80031d2 <ESP01ATDecode+0x732>
				esp01userConnected = 1;
 80031a6:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <ESP01ATDecode+0x7a8>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
				esp01Link = esp01RXATBuf[esp01irRXAT-16];
 80031ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <ESP01ATDecode+0x788>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	3b10      	subs	r3, #16
 80031b2:	4a26      	ldr	r2, [pc, #152]	@ (800324c <ESP01ATDecode+0x7ac>)
 80031b4:	5cd2      	ldrb	r2, [r2, r3]
 80031b6:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <ESP01ATDecode+0x7b0>)
 80031b8:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL){
 80031ba:	4b19      	ldr	r3, [pc, #100]	@ (8003220 <ESP01ATDecode+0x780>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <ESP01ATDecode+0x732>
					ESP01DbgStr("+&DBGLINKED");
 80031c2:	4b17      	ldr	r3, [pc, #92]	@ (8003220 <ESP01ATDecode+0x780>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4823      	ldr	r0, [pc, #140]	@ (8003254 <ESP01ATDecode+0x7b4>)
 80031c8:	4798      	blx	r3
					ESP01DbgStr(&esp01Link);
 80031ca:	4b15      	ldr	r3, [pc, #84]	@ (8003220 <ESP01ATDecode+0x780>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4820      	ldr	r0, [pc, #128]	@ (8003250 <ESP01ATDecode+0x7b0>)
 80031d0:	4798      	blx	r3
				}
			}
			if(esp01ATState == ESP01ATWAITSERVERDATA){
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <ESP01ATDecode+0x778>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b18      	cmp	r3, #24
 80031d8:	d118      	bne.n	800320c <ESP01ATDecode+0x76c>
				esp01userConnected = 1;
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <ESP01ATDecode+0x7a8>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
				esp01Link = esp01RXATBuf[esp01irRXAT-16];
 80031e0:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <ESP01ATDecode+0x788>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	3b10      	subs	r3, #16
 80031e6:	4a19      	ldr	r2, [pc, #100]	@ (800324c <ESP01ATDecode+0x7ac>)
 80031e8:	5cd2      	ldrb	r2, [r2, r3]
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <ESP01ATDecode+0x7b0>)
 80031ec:	701a      	strb	r2, [r3, #0]
				if(ESP01DbgStr != NULL){
 80031ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <ESP01ATDecode+0x780>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <ESP01ATDecode+0x766>
					ESP01DbgStr("+&DBGLINKED");
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <ESP01ATDecode+0x780>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4816      	ldr	r0, [pc, #88]	@ (8003254 <ESP01ATDecode+0x7b4>)
 80031fc:	4798      	blx	r3
					ESP01DbgStr(&esp01Link);
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <ESP01ATDecode+0x780>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4813      	ldr	r0, [pc, #76]	@ (8003250 <ESP01ATDecode+0x7b0>)
 8003204:	4798      	blx	r3
				}
				esp01ATState = ESP01_WAITING_CONNECTION;
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <ESP01ATDecode+0x778>)
 8003208:	2213      	movs	r2, #19
 800320a:	701a      	strb	r2, [r3, #0]
			}
			esp01HState = 0;
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <ESP01ATDecode+0x77c>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
			break;
 8003212:	e119      	b.n	8003448 <ESP01ATDecode+0x9a8>
 8003214:	20000838 	.word	0x20000838
 8003218:	20000836 	.word	0x20000836
 800321c:	200008de 	.word	0x200008de
 8003220:	2000084c 	.word	0x2000084c
 8003224:	08014450 	.word	0x08014450
 8003228:	20000b66 	.word	0x20000b66
 800322c:	08014468 	.word	0x08014468
 8003230:	200008e0 	.word	0x200008e0
 8003234:	200008c8 	.word	0x200008c8
 8003238:	2000083c 	.word	0x2000083c
 800323c:	20000848 	.word	0x20000848
 8003240:	20000b70 	.word	0x20000b70
 8003244:	0801447c 	.word	0x0801447c
 8003248:	20000b7f 	.word	0x20000b7f
 800324c:	200008e4 	.word	0x200008e4
 8003250:	20000b80 	.word	0x20000b80
 8003254:	08014490 	.word	0x08014490
		case 14:
			esp01TimeoutTask = 0;
 8003258:	4b86      	ldr	r3, [pc, #536]	@ (8003474 <ESP01ATDecode+0x9d4>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
			if(esp01ATState == ESP01CWJAPRESPONSE)
 800325e:	4b86      	ldr	r3, [pc, #536]	@ (8003478 <ESP01ATDecode+0x9d8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b08      	cmp	r3, #8
 8003264:	d104      	bne.n	8003270 <ESP01ATDecode+0x7d0>
				esp01Flags.bit.ATRESPONSEOK = 1;
 8003266:	4a85      	ldr	r2, [pc, #532]	@ (800347c <ESP01ATDecode+0x9dc>)
 8003268:	7813      	ldrb	r3, [r2, #0]
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	7013      	strb	r3, [r2, #0]
			esp01Flags.bit.WIFICONNECTED = 1;
 8003270:	4a82      	ldr	r2, [pc, #520]	@ (800347c <ESP01ATDecode+0x9dc>)
 8003272:	7813      	ldrb	r3, [r2, #0]
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	7013      	strb	r3, [r2, #0]
			if(ESP01ChangeState != NULL)
 800327a:	4b81      	ldr	r3, [pc, #516]	@ (8003480 <ESP01ATDecode+0x9e0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <ESP01ATDecode+0x7ea>
				ESP01ChangeState(ESP01_WIFI_CONNECTED);
 8003282:	4b7f      	ldr	r3, [pc, #508]	@ (8003480 <ESP01ATDecode+0x9e0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2003      	movs	r0, #3
 8003288:	4798      	blx	r3
			if(ESP01DbgStr != NULL)
 800328a:	4b7e      	ldr	r3, [pc, #504]	@ (8003484 <ESP01ATDecode+0x9e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80d9 	beq.w	8003446 <ESP01ATDecode+0x9a6>
				ESP01DbgStr("+&DBGESP01GOTIP");
 8003294:	4b7b      	ldr	r3, [pc, #492]	@ (8003484 <ESP01ATDecode+0x9e4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	487b      	ldr	r0, [pc, #492]	@ (8003488 <ESP01ATDecode+0x9e8>)
 800329a:	4798      	blx	r3
			break;
 800329c:	e0d3      	b.n	8003446 <ESP01ATDecode+0x9a6>
		case 20: //SSID
			if (value == '&' || value == '\r' || ssid_idx >= MAX_SSID_LEN-1) {
 800329e:	797b      	ldrb	r3, [r7, #5]
 80032a0:	2b26      	cmp	r3, #38	@ 0x26
 80032a2:	d006      	beq.n	80032b2 <ESP01ATDecode+0x812>
 80032a4:	797b      	ldrb	r3, [r7, #5]
 80032a6:	2b0d      	cmp	r3, #13
 80032a8:	d003      	beq.n	80032b2 <ESP01ATDecode+0x812>
 80032aa:	4b78      	ldr	r3, [pc, #480]	@ (800348c <ESP01ATDecode+0x9ec>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b1e      	cmp	r3, #30
 80032b0:	d91e      	bls.n	80032f0 <ESP01ATDecode+0x850>
				// fin de SSID
				ssid_buffer[ssid_idx] = '\0';
 80032b2:	4b76      	ldr	r3, [pc, #472]	@ (800348c <ESP01ATDecode+0x9ec>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b75      	ldr	r3, [pc, #468]	@ (8003490 <ESP01ATDecode+0x9f0>)
 80032ba:	2100      	movs	r1, #0
 80032bc:	5499      	strb	r1, [r3, r2]
				ssid_idx = 0;
 80032be:	4b73      	ldr	r3, [pc, #460]	@ (800348c <ESP01ATDecode+0x9ec>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 80032c4:	4b73      	ldr	r3, [pc, #460]	@ (8003494 <ESP01ATDecode+0x9f4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80032ca:	4b73      	ldr	r3, [pc, #460]	@ (8003498 <ESP01ATDecode+0x9f8>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	4b71      	ldr	r3, [pc, #452]	@ (8003498 <ESP01ATDecode+0x9f8>)
 80032d4:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL){
 80032d6:	4b6b      	ldr	r3, [pc, #428]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d013      	beq.n	8003306 <ESP01ATDecode+0x866>
					ESP01DbgStr("SSID:");
 80032de:	4b69      	ldr	r3, [pc, #420]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	486e      	ldr	r0, [pc, #440]	@ (800349c <ESP01ATDecode+0x9fc>)
 80032e4:	4798      	blx	r3
					ESP01DbgStr(ssid_buffer);
 80032e6:	4b67      	ldr	r3, [pc, #412]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4869      	ldr	r0, [pc, #420]	@ (8003490 <ESP01ATDecode+0x9f0>)
 80032ec:	4798      	blx	r3
				if(ESP01DbgStr != NULL){
 80032ee:	e00a      	b.n	8003306 <ESP01ATDecode+0x866>
				}
			} else {
				ssid_buffer[ssid_idx++] = value;
 80032f0:	4b66      	ldr	r3, [pc, #408]	@ (800348c <ESP01ATDecode+0x9ec>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	b2d1      	uxtb	r1, r2
 80032f8:	4a64      	ldr	r2, [pc, #400]	@ (800348c <ESP01ATDecode+0x9ec>)
 80032fa:	7011      	strb	r1, [r2, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4a64      	ldr	r2, [pc, #400]	@ (8003490 <ESP01ATDecode+0x9f0>)
 8003300:	797b      	ldrb	r3, [r7, #5]
 8003302:	5453      	strb	r3, [r2, r1]
			}
			break;
 8003304:	e0a0      	b.n	8003448 <ESP01ATDecode+0x9a8>
 8003306:	e09f      	b.n	8003448 <ESP01ATDecode+0x9a8>
		case 21: //PASS
			if (value == '&' || value == '\r' || pass_idx >= MAX_PASS_LEN-1) {
 8003308:	797b      	ldrb	r3, [r7, #5]
 800330a:	2b26      	cmp	r3, #38	@ 0x26
 800330c:	d006      	beq.n	800331c <ESP01ATDecode+0x87c>
 800330e:	797b      	ldrb	r3, [r7, #5]
 8003310:	2b0d      	cmp	r3, #13
 8003312:	d003      	beq.n	800331c <ESP01ATDecode+0x87c>
 8003314:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <ESP01ATDecode+0xa00>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b3d      	cmp	r3, #61	@ 0x3d
 800331a:	d91e      	bls.n	800335a <ESP01ATDecode+0x8ba>
				// fin de PASS
				pass_buffer[pass_idx] = '\0';
 800331c:	4b60      	ldr	r3, [pc, #384]	@ (80034a0 <ESP01ATDecode+0xa00>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <ESP01ATDecode+0xa04>)
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]
				pass_idx = 0;
 8003328:	4b5d      	ldr	r3, [pc, #372]	@ (80034a0 <ESP01ATDecode+0xa00>)
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 800332e:	4b59      	ldr	r3, [pc, #356]	@ (8003494 <ESP01ATDecode+0x9f4>)
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 8003334:	4b58      	ldr	r3, [pc, #352]	@ (8003498 <ESP01ATDecode+0x9f8>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	4b56      	ldr	r3, [pc, #344]	@ (8003498 <ESP01ATDecode+0x9f8>)
 800333e:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL){
 8003340:	4b50      	ldr	r3, [pc, #320]	@ (8003484 <ESP01ATDecode+0x9e4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <ESP01ATDecode+0x8d0>
					ESP01DbgStr("PASS:");
 8003348:	4b4e      	ldr	r3, [pc, #312]	@ (8003484 <ESP01ATDecode+0x9e4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4856      	ldr	r0, [pc, #344]	@ (80034a8 <ESP01ATDecode+0xa08>)
 800334e:	4798      	blx	r3
					ESP01DbgStr(pass_buffer);
 8003350:	4b4c      	ldr	r3, [pc, #304]	@ (8003484 <ESP01ATDecode+0x9e4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4853      	ldr	r0, [pc, #332]	@ (80034a4 <ESP01ATDecode+0xa04>)
 8003356:	4798      	blx	r3
				if(ESP01DbgStr != NULL){
 8003358:	e00a      	b.n	8003370 <ESP01ATDecode+0x8d0>
				}
				//LLAMAR A UN CONTROLADOR DE CONTRASEÑAS Y SSID
				//ESP01_Check_Credentials(&ssid_buffer, pass_buffer);

			} else {
				pass_buffer[pass_idx++] = value;
 800335a:	4b51      	ldr	r3, [pc, #324]	@ (80034a0 <ESP01ATDecode+0xa00>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	b2d1      	uxtb	r1, r2
 8003362:	4a4f      	ldr	r2, [pc, #316]	@ (80034a0 <ESP01ATDecode+0xa00>)
 8003364:	7011      	strb	r1, [r2, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4a4e      	ldr	r2, [pc, #312]	@ (80034a4 <ESP01ATDecode+0xa04>)
 800336a:	797b      	ldrb	r3, [r7, #5]
 800336c:	5453      	strb	r3, [r2, r1]
			}
			break;
 800336e:	e06b      	b.n	8003448 <ESP01ATDecode+0x9a8>
 8003370:	e06a      	b.n	8003448 <ESP01ATDecode+0x9a8>
		case 22:
			if (value == '&' || value == ' ' || value == '\r' || pass_idx >= MAX_IP_LEN-1) {
 8003372:	797b      	ldrb	r3, [r7, #5]
 8003374:	2b26      	cmp	r3, #38	@ 0x26
 8003376:	d009      	beq.n	800338c <ESP01ATDecode+0x8ec>
 8003378:	797b      	ldrb	r3, [r7, #5]
 800337a:	2b20      	cmp	r3, #32
 800337c:	d006      	beq.n	800338c <ESP01ATDecode+0x8ec>
 800337e:	797b      	ldrb	r3, [r7, #5]
 8003380:	2b0d      	cmp	r3, #13
 8003382:	d003      	beq.n	800338c <ESP01ATDecode+0x8ec>
 8003384:	4b46      	ldr	r3, [pc, #280]	@ (80034a0 <ESP01ATDecode+0xa00>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b0e      	cmp	r3, #14
 800338a:	d93c      	bls.n	8003406 <ESP01ATDecode+0x966>
				// fin de PASS
				ip_buffer[ip_idx] = '\0';
 800338c:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <ESP01ATDecode+0xa0c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b47      	ldr	r3, [pc, #284]	@ (80034b0 <ESP01ATDecode+0xa10>)
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]
				ip_idx = 0;
 8003398:	4b44      	ldr	r3, [pc, #272]	@ (80034ac <ESP01ATDecode+0xa0c>)
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
				esp01HState = 0;          // volvemos a buscar respuestas
 800339e:	4b3d      	ldr	r3, [pc, #244]	@ (8003494 <ESP01ATDecode+0x9f4>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
				esp01irRXAT--;
 80033a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003498 <ESP01ATDecode+0x9f8>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <ESP01ATDecode+0x9f8>)
 80033ae:	801a      	strh	r2, [r3, #0]
				if(ESP01DbgStr != NULL){
 80033b0:	4b34      	ldr	r3, [pc, #208]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <ESP01ATDecode+0x928>
					ESP01DbgStr("IP:");
 80033b8:	4b32      	ldr	r3, [pc, #200]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	483d      	ldr	r0, [pc, #244]	@ (80034b4 <ESP01ATDecode+0xa14>)
 80033be:	4798      	blx	r3
					ESP01DbgStr(ip_buffer);
 80033c0:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	483a      	ldr	r0, [pc, #232]	@ (80034b0 <ESP01ATDecode+0xa10>)
 80033c6:	4798      	blx	r3
				}
				//LLAMAR A UN CONTROLADOR DE CONTRASEÑAS Y SSID
				isValid = ESP01_Check_Credentials(ssid_buffer, pass_buffer, ip_buffer);
 80033c8:	4a39      	ldr	r2, [pc, #228]	@ (80034b0 <ESP01ATDecode+0xa10>)
 80033ca:	4936      	ldr	r1, [pc, #216]	@ (80034a4 <ESP01ATDecode+0xa04>)
 80033cc:	4830      	ldr	r0, [pc, #192]	@ (8003490 <ESP01ATDecode+0x9f0>)
 80033ce:	f000 fd95 	bl	8003efc <ESP01_Check_Credentials>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b38      	ldr	r3, [pc, #224]	@ (80034b8 <ESP01ATDecode+0xa18>)
 80033d8:	701a      	strb	r2, [r3, #0]

				if(isValid){
 80033da:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <ESP01ATDecode+0xa18>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <ESP01ATDecode+0x954>
					if(ESP01DbgStr != NULL)
 80033e2:	4b28      	ldr	r3, [pc, #160]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <ESP01ATDecode+0x97c>
						ESP01DbgStr("+&DBG_CRED_VALIDS");
 80033ea:	4b26      	ldr	r3, [pc, #152]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4833      	ldr	r0, [pc, #204]	@ (80034bc <ESP01ATDecode+0xa1c>)
 80033f0:	4798      	blx	r3
				if(isValid){
 80033f2:	e013      	b.n	800341c <ESP01ATDecode+0x97c>
				}else{
					if(ESP01DbgStr != NULL)
 80033f4:	4b23      	ldr	r3, [pc, #140]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00f      	beq.n	800341c <ESP01ATDecode+0x97c>
						ESP01DbgStr("+&DBG_CRED_NO_VALIDS");
 80033fc:	4b21      	ldr	r3, [pc, #132]	@ (8003484 <ESP01ATDecode+0x9e4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	482f      	ldr	r0, [pc, #188]	@ (80034c0 <ESP01ATDecode+0xa20>)
 8003402:	4798      	blx	r3
				if(isValid){
 8003404:	e00a      	b.n	800341c <ESP01ATDecode+0x97c>
				}
			} else {
				ip_buffer[ip_idx++] = value;
 8003406:	4b29      	ldr	r3, [pc, #164]	@ (80034ac <ESP01ATDecode+0xa0c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	b2d1      	uxtb	r1, r2
 800340e:	4a27      	ldr	r2, [pc, #156]	@ (80034ac <ESP01ATDecode+0xa0c>)
 8003410:	7011      	strb	r1, [r2, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4a26      	ldr	r2, [pc, #152]	@ (80034b0 <ESP01ATDecode+0xa10>)
 8003416:	797b      	ldrb	r3, [r7, #5]
 8003418:	5453      	strb	r3, [r2, r1]
			}
			break;
 800341a:	e015      	b.n	8003448 <ESP01ATDecode+0x9a8>
				if(isValid){
 800341c:	bf00      	nop
			break;
 800341e:	e013      	b.n	8003448 <ESP01ATDecode+0x9a8>
		default:
			esp01HState = 0;
 8003420:	4b1c      	ldr	r3, [pc, #112]	@ (8003494 <ESP01ATDecode+0x9f4>)
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
			esp01TimeoutDataRx = 0;
 8003426:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <ESP01ATDecode+0xa24>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e00c      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 800342e:	bf00      	nop
 8003430:	e00a      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 8003432:	bf00      	nop
 8003434:	e008      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 8003436:	bf00      	nop
 8003438:	e006      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 800343a:	bf00      	nop
 800343c:	e004      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 800343e:	bf00      	nop
 8003440:	e002      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <ESP01ATDecode+0x9a8>
			break;
 8003446:	bf00      	nop
		}

		esp01irRXAT++;
 8003448:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <ESP01ATDecode+0x9f8>)
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <ESP01ATDecode+0x9f8>)
 8003452:	801a      	strh	r2, [r3, #0]
		if(esp01irRXAT == ESP01RXBUFAT)
 8003454:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <ESP01ATDecode+0x9f8>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d102      	bne.n	8003462 <ESP01ATDecode+0x9c2>
			esp01irRXAT = 0;
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <ESP01ATDecode+0x9f8>)
 800345e:	2200      	movs	r2, #0
 8003460:	801a      	strh	r2, [r3, #0]
	while(esp01irRXAT != i){
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <ESP01ATDecode+0x9f8>)
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	429a      	cmp	r2, r3
 800346a:	f47f ab36 	bne.w	8002ada <ESP01ATDecode+0x3a>
	}
}
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000083c 	.word	0x2000083c
 8003478:	20000836 	.word	0x20000836
 800347c:	20000838 	.word	0x20000838
 8003480:	20000848 	.word	0x20000848
 8003484:	2000084c 	.word	0x2000084c
 8003488:	0801449c 	.word	0x0801449c
 800348c:	20000bf4 	.word	0x20000bf4
 8003490:	20000b84 	.word	0x20000b84
 8003494:	200008de 	.word	0x200008de
 8003498:	20000b66 	.word	0x20000b66
 800349c:	080144ac 	.word	0x080144ac
 80034a0:	20000bf5 	.word	0x20000bf5
 80034a4:	20000ba4 	.word	0x20000ba4
 80034a8:	080144b4 	.word	0x080144b4
 80034ac:	20000bf6 	.word	0x20000bf6
 80034b0:	20000be4 	.word	0x20000be4
 80034b4:	080144bc 	.word	0x080144bc
 80034b8:	20000b81 	.word	0x20000b81
 80034bc:	080144c0 	.word	0x080144c0
 80034c0:	080144d4 	.word	0x080144d4
 80034c4:	20000840 	.word	0x20000840

080034c8 <ESP01_GETMODE>:

_emode ESP01_GETMODE(){
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
	return mode;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <ESP01_GETMODE+0x14>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000b7e 	.word	0x20000b7e

080034e0 <ESP01DOConnection>:

static void ESP01DOConnection(){
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
	esp01TimeoutTask = 100;
 80034e4:	4b94      	ldr	r3, [pc, #592]	@ (8003738 <ESP01DOConnection+0x258>)
 80034e6:	2264      	movs	r2, #100	@ 0x64
 80034e8:	601a      	str	r2, [r3, #0]
	switch(esp01ATState){
 80034ea:	4b94      	ldr	r3, [pc, #592]	@ (800373c <ESP01DOConnection+0x25c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b1b      	cmp	r3, #27
 80034f0:	f200 8392 	bhi.w	8003c18 <ESP01DOConnection+0x738>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <ESP01DOConnection+0x1c>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800356d 	.word	0x0800356d
 8003500:	0800357d 	.word	0x0800357d
 8003504:	08003621 	.word	0x08003621
 8003508:	08003673 	.word	0x08003673
 800350c:	08003691 	.word	0x08003691
 8003510:	080036c7 	.word	0x080036c7
 8003514:	080036e5 	.word	0x080036e5
 8003518:	08003721 	.word	0x08003721
 800351c:	08003801 	.word	0x08003801
 8003520:	08003825 	.word	0x08003825
 8003524:	08003853 	.word	0x08003853
 8003528:	0800388d 	.word	0x0800388d
 800352c:	080038b5 	.word	0x080038b5
 8003530:	08003949 	.word	0x08003949
 8003534:	08003979 	.word	0x08003979
 8003538:	080039d1 	.word	0x080039d1
 800353c:	080039f5 	.word	0x080039f5
 8003540:	08003a99 	.word	0x08003a99
 8003544:	08003ab7 	.word	0x08003ab7
 8003548:	08003b0b 	.word	0x08003b0b
 800354c:	08003adb 	.word	0x08003adb
 8003550:	08003b21 	.word	0x08003b21
 8003554:	08003b3f 	.word	0x08003b3f
 8003558:	08003b91 	.word	0x08003b91
 800355c:	08003bc1 	.word	0x08003bc1
 8003560:	080035cb 	.word	0x080035cb
 8003564:	080035eb 	.word	0x080035eb
 8003568:	08003613 	.word	0x08003613
	case ESP01ATIDLE:
		esp01TimeoutTask = 500;
 800356c:	4b72      	ldr	r3, [pc, #456]	@ (8003738 <ESP01DOConnection+0x258>)
 800356e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003572:	601a      	str	r2, [r3, #0]
		esp01ATState = ESP01ATWAITINGIP;
 8003574:	4b71      	ldr	r3, [pc, #452]	@ (800373c <ESP01DOConnection+0x25c>)
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
		break;
 800357a:	e34d      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATWAITINGIP:
		if(esp01Flags.bit.WIFICONNECTED == 1){
 800357c:	4b70      	ldr	r3, [pc, #448]	@ (8003740 <ESP01DOConnection+0x260>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00f      	beq.n	80035aa <ESP01DOConnection+0xca>
#ifdef DEMOSTRACION_REGULARIZACION
			esp01ATState = ESP01ATHARDRST0;
 800358a:	4b6c      	ldr	r3, [pc, #432]	@ (800373c <ESP01DOConnection+0x25c>)
 800358c:	2219      	movs	r2, #25
 800358e:	701a      	strb	r2, [r3, #0]
			mode = CREATEWIFI;
 8003590:	4b6c      	ldr	r3, [pc, #432]	@ (8003744 <ESP01DOConnection+0x264>)
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 8003596:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <ESP01DOConnection+0x268>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8329 	beq.w	8003bf2 <ESP01DOConnection+0x712>
				ESP01DbgStr("+&DBGESP01_DEMOSTR");
 80035a0:	4b69      	ldr	r3, [pc, #420]	@ (8003748 <ESP01DOConnection+0x268>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4869      	ldr	r0, [pc, #420]	@ (800374c <ESP01DOConnection+0x26c>)
 80035a6:	4798      	blx	r3
			esp01ATState = ESP01ATHARDRST0;
			mode = CREATEWIFI;
			if(ESP01DbgStr != NULL)
				ESP01DbgStr("+&DBGESP01_NO_RED");
		}
		break;
 80035a8:	e323      	b.n	8003bf2 <ESP01DOConnection+0x712>
			esp01ATState = ESP01ATHARDRST0;
 80035aa:	4b64      	ldr	r3, [pc, #400]	@ (800373c <ESP01DOConnection+0x25c>)
 80035ac:	2219      	movs	r2, #25
 80035ae:	701a      	strb	r2, [r3, #0]
			mode = CREATEWIFI;
 80035b0:	4b64      	ldr	r3, [pc, #400]	@ (8003744 <ESP01DOConnection+0x264>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 80035b6:	4b64      	ldr	r3, [pc, #400]	@ (8003748 <ESP01DOConnection+0x268>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8319 	beq.w	8003bf2 <ESP01DOConnection+0x712>
				ESP01DbgStr("+&DBGESP01_NO_RED");
 80035c0:	4b61      	ldr	r3, [pc, #388]	@ (8003748 <ESP01DOConnection+0x268>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4862      	ldr	r0, [pc, #392]	@ (8003750 <ESP01DOConnection+0x270>)
 80035c6:	4798      	blx	r3
		break;
 80035c8:	e313      	b.n	8003bf2 <ESP01DOConnection+0x712>
	case ESP01ATHARDRST0:
		esp01Handle.DoCHPD(0);
 80035ca:	4b62      	ldr	r3, [pc, #392]	@ (8003754 <ESP01DOConnection+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2000      	movs	r0, #0
 80035d0:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 80035d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003748 <ESP01DOConnection+0x268>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <ESP01DOConnection+0x102>
			ESP01DbgStr("+&DBGESP01HARDRESET0\n");
 80035da:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <ESP01DOConnection+0x268>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	485e      	ldr	r0, [pc, #376]	@ (8003758 <ESP01DOConnection+0x278>)
 80035e0:	4798      	blx	r3
		esp01ATState = ESP01ATHARDRST1;
 80035e2:	4b56      	ldr	r3, [pc, #344]	@ (800373c <ESP01DOConnection+0x25c>)
 80035e4:	221a      	movs	r2, #26
 80035e6:	701a      	strb	r2, [r3, #0]
		break;
 80035e8:	e316      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATHARDRST1:
		esp01Handle.DoCHPD(1);
 80035ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003754 <ESP01DOConnection+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2001      	movs	r0, #1
 80035f0:	4798      	blx	r3
		if(ESP01DbgStr != NULL)
 80035f2:	4b55      	ldr	r3, [pc, #340]	@ (8003748 <ESP01DOConnection+0x268>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <ESP01DOConnection+0x122>
			ESP01DbgStr("+&DBGESP01HARDRESET1\n");
 80035fa:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <ESP01DOConnection+0x268>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4857      	ldr	r0, [pc, #348]	@ (800375c <ESP01DOConnection+0x27c>)
 8003600:	4798      	blx	r3
		esp01ATState = ESP01ATHARDRSTSTOP;
 8003602:	4b4e      	ldr	r3, [pc, #312]	@ (800373c <ESP01DOConnection+0x25c>)
 8003604:	221b      	movs	r2, #27
 8003606:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 8003608:	4b4b      	ldr	r3, [pc, #300]	@ (8003738 <ESP01DOConnection+0x258>)
 800360a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800360e:	601a      	str	r2, [r3, #0]
		break;
 8003610:	e302      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATHARDRSTSTOP:
		esp01ATState = ESP01ATAT;
 8003612:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <ESP01DOConnection+0x25c>)
 8003614:	2202      	movs	r2, #2
 8003616:	701a      	strb	r2, [r3, #0]
		esp01TriesAT = 0;
 8003618:	4b51      	ldr	r3, [pc, #324]	@ (8003760 <ESP01DOConnection+0x280>)
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
		break;
 800361e:	e2fb      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATAT:
		if(esp01TriesAT){
 8003620:	4b4f      	ldr	r3, [pc, #316]	@ (8003760 <ESP01DOConnection+0x280>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <ESP01DOConnection+0x164>
			esp01TriesAT--;
 8003628:	4b4d      	ldr	r3, [pc, #308]	@ (8003760 <ESP01DOConnection+0x280>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b4b      	ldr	r3, [pc, #300]	@ (8003760 <ESP01DOConnection+0x280>)
 8003632:	701a      	strb	r2, [r3, #0]
			if(!esp01TriesAT){
 8003634:	4b4a      	ldr	r3, [pc, #296]	@ (8003760 <ESP01DOConnection+0x280>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d106      	bne.n	800364a <ESP01DOConnection+0x16a>
				esp01ATState = ESP01ATHARDRST0;
 800363c:	4b3f      	ldr	r3, [pc, #252]	@ (800373c <ESP01DOConnection+0x25c>)
 800363e:	2219      	movs	r2, #25
 8003640:	701a      	strb	r2, [r3, #0]
				break;
 8003642:	e2e9      	b.n	8003c18 <ESP01DOConnection+0x738>
			}
		}
		else
			esp01TriesAT = 4;
 8003644:	4b46      	ldr	r3, [pc, #280]	@ (8003760 <ESP01DOConnection+0x280>)
 8003646:	2204      	movs	r2, #4
 8003648:	701a      	strb	r2, [r3, #0]

		esp01Flags.bit.ATRESPONSEOK = 0;
 800364a:	4a3d      	ldr	r2, [pc, #244]	@ (8003740 <ESP01DOConnection+0x260>)
 800364c:	7813      	ldrb	r3, [r2, #0]
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	7013      	strb	r3, [r2, #0]
		ESP01StrToBufTX(ATAT);
 8003654:	4843      	ldr	r0, [pc, #268]	@ (8003764 <ESP01DOConnection+0x284>)
 8003656:	f000 fb95 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800365a:	4b3b      	ldr	r3, [pc, #236]	@ (8003748 <ESP01DOConnection+0x268>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <ESP01DOConnection+0x18a>
			ESP01DbgStr("+&DBGESP01AT\n");
 8003662:	4b39      	ldr	r3, [pc, #228]	@ (8003748 <ESP01DOConnection+0x268>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4840      	ldr	r0, [pc, #256]	@ (8003768 <ESP01DOConnection+0x288>)
 8003668:	4798      	blx	r3
		esp01ATState = ESP01ATRESPONSE;
 800366a:	4b34      	ldr	r3, [pc, #208]	@ (800373c <ESP01DOConnection+0x25c>)
 800366c:	2203      	movs	r2, #3
 800366e:	701a      	strb	r2, [r3, #0]
		break;
 8003670:	e2d2      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003672:	4b33      	ldr	r3, [pc, #204]	@ (8003740 <ESP01DOConnection+0x260>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <ESP01DOConnection+0x1a8>
			esp01ATState = ESP01ATCWMODE;
 8003680:	4b2e      	ldr	r3, [pc, #184]	@ (800373c <ESP01DOConnection+0x25c>)
 8003682:	2204      	movs	r2, #4
 8003684:	701a      	strb	r2, [r3, #0]
		else
			esp01ATState = ESP01ATAT;
		break;
 8003686:	e2c7      	b.n	8003c18 <ESP01DOConnection+0x738>
			esp01ATState = ESP01ATAT;
 8003688:	4b2c      	ldr	r3, [pc, #176]	@ (800373c <ESP01DOConnection+0x25c>)
 800368a:	2202      	movs	r2, #2
 800368c:	701a      	strb	r2, [r3, #0]
		break;
 800368e:	e2c3      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCWMODE:
		/* acá separamos de station a soft ap*/
		if(mode == CONNECTWIFI){
 8003690:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <ESP01DOConnection+0x264>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <ESP01DOConnection+0x1c0>
			esp01ATState = ESP01ATCIPCLOSESERVER;
 8003698:	4b28      	ldr	r3, [pc, #160]	@ (800373c <ESP01DOConnection+0x25c>)
 800369a:	2205      	movs	r2, #5
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e002      	b.n	80036a6 <ESP01DOConnection+0x1c6>
			/*ESP01StrToBufTX(ATCWMODE);
			ESP01StrToBufTX("1\r\n");
			if(ESP01DbgStr != NULL)
				ESP01DbgStr("+&DBGESP01ATCWMODE1\n");*/
		}else{
			esp01ATState = ESP01ATCIPMUX;
 80036a0:	4b26      	ldr	r3, [pc, #152]	@ (800373c <ESP01DOConnection+0x25c>)
 80036a2:	2206      	movs	r2, #6
 80036a4:	701a      	strb	r2, [r3, #0]
			/*ESP01StrToBufTX(ATCWMODE);
			ESP01StrToBufTX("2\r\n");
			if(ESP01DbgStr != NULL)
				ESP01DbgStr("+&DBGESP01ATCWMODE2\n");*/
		}
		ESP01StrToBufTX(ATCWMODE);
 80036a6:	4831      	ldr	r0, [pc, #196]	@ (800376c <ESP01DOConnection+0x28c>)
 80036a8:	f000 fb6c 	bl	8003d84 <ESP01StrToBufTX>
		ESP01StrToBufTX("3\r\n");
 80036ac:	4830      	ldr	r0, [pc, #192]	@ (8003770 <ESP01DOConnection+0x290>)
 80036ae:	f000 fb69 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80036b2:	4b25      	ldr	r3, [pc, #148]	@ (8003748 <ESP01DOConnection+0x268>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 829d 	beq.w	8003bf6 <ESP01DOConnection+0x716>
			ESP01DbgStr("+&DBGESP01ATCWMODE2\n");
 80036bc:	4b22      	ldr	r3, [pc, #136]	@ (8003748 <ESP01DOConnection+0x268>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	482c      	ldr	r0, [pc, #176]	@ (8003774 <ESP01DOConnection+0x294>)
 80036c2:	4798      	blx	r3
		break;
 80036c4:	e297      	b.n	8003bf6 <ESP01DOConnection+0x716>
	case ESP01ATCIPCLOSESERVER:
		ESP01StrToBufTX(ATCIPCLOSESERVER);
 80036c6:	482c      	ldr	r0, [pc, #176]	@ (8003778 <ESP01DOConnection+0x298>)
 80036c8:	f000 fb5c 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80036cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003748 <ESP01DOConnection+0x268>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <ESP01DOConnection+0x1fc>
			ESP01DbgStr("+&DBGATCLOSESERVER\n");
 80036d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003748 <ESP01DOConnection+0x268>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4828      	ldr	r0, [pc, #160]	@ (800377c <ESP01DOConnection+0x29c>)
 80036da:	4798      	blx	r3
		esp01ATState = ESP01ATCIPMUX;
 80036dc:	4b17      	ldr	r3, [pc, #92]	@ (800373c <ESP01DOConnection+0x25c>)
 80036de:	2206      	movs	r2, #6
 80036e0:	701a      	strb	r2, [r3, #0]
		break;
 80036e2:	e299      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCIPMUX:
		ESP01StrToBufTX(ATCIPMUX);
 80036e4:	4826      	ldr	r0, [pc, #152]	@ (8003780 <ESP01DOConnection+0x2a0>)
 80036e6:	f000 fb4d 	bl	8003d84 <ESP01StrToBufTX>

		if(mode == CONNECTWIFI){
 80036ea:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <ESP01DOConnection+0x264>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <ESP01DOConnection+0x220>
			ESP01StrToBufTX("0\r\n");
 80036f2:	4824      	ldr	r0, [pc, #144]	@ (8003784 <ESP01DOConnection+0x2a4>)
 80036f4:	f000 fb46 	bl	8003d84 <ESP01StrToBufTX>
			esp01ATState = ESP01ATCWJAP;
 80036f8:	4b10      	ldr	r3, [pc, #64]	@ (800373c <ESP01DOConnection+0x25c>)
 80036fa:	2207      	movs	r2, #7
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e005      	b.n	800370c <ESP01DOConnection+0x22c>
		}else{
			ESP01StrToBufTX("1\r\n");
 8003700:	4821      	ldr	r0, [pc, #132]	@ (8003788 <ESP01DOConnection+0x2a8>)
 8003702:	f000 fb3f 	bl	8003d84 <ESP01StrToBufTX>
			esp01ATState = ESP01ATCWQAP;
 8003706:	4b0d      	ldr	r3, [pc, #52]	@ (800373c <ESP01DOConnection+0x25c>)
 8003708:	220f      	movs	r2, #15
 800370a:	701a      	strb	r2, [r3, #0]
		}


		//esp01ATState = ESP01ATCWJAP;//COMENTAR

		if(ESP01DbgStr != NULL)
 800370c:	4b0e      	ldr	r3, [pc, #56]	@ (8003748 <ESP01DOConnection+0x268>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 8272 	beq.w	8003bfa <ESP01DOConnection+0x71a>
			ESP01DbgStr("+&DBGESP01ATCIPMUX\n");
 8003716:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <ESP01DOConnection+0x268>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	481c      	ldr	r0, [pc, #112]	@ (800378c <ESP01DOConnection+0x2ac>)
 800371c:	4798      	blx	r3
		break;
 800371e:	e26c      	b.n	8003bfa <ESP01DOConnection+0x71a>
	case ESP01ATCWJAP:
		if(esp01Flags.bit.WIFICONNECTED){
 8003720:	4b07      	ldr	r3, [pc, #28]	@ (8003740 <ESP01DOConnection+0x260>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d030      	beq.n	8003790 <ESP01DOConnection+0x2b0>
			esp01ATState = ESP01ATCIFSR;
 800372e:	4b03      	ldr	r3, [pc, #12]	@ (800373c <ESP01DOConnection+0x25c>)
 8003730:	2209      	movs	r2, #9
 8003732:	701a      	strb	r2, [r3, #0]
			break;
 8003734:	e270      	b.n	8003c18 <ESP01DOConnection+0x738>
 8003736:	bf00      	nop
 8003738:	2000083c 	.word	0x2000083c
 800373c:	20000836 	.word	0x20000836
 8003740:	20000838 	.word	0x20000838
 8003744:	20000b7e 	.word	0x20000b7e
 8003748:	2000084c 	.word	0x2000084c
 800374c:	080144ec 	.word	0x080144ec
 8003750:	08014500 	.word	0x08014500
 8003754:	20000b70 	.word	0x20000b70
 8003758:	08014514 	.word	0x08014514
 800375c:	0801452c 	.word	0x0801452c
 8003760:	20000b6c 	.word	0x20000b6c
 8003764:	08015a50 	.word	0x08015a50
 8003768:	08014544 	.word	0x08014544
 800376c:	08015a70 	.word	0x08015a70
 8003770:	08014554 	.word	0x08014554
 8003774:	08014558 	.word	0x08014558
 8003778:	08015a7c 	.word	0x08015a7c
 800377c:	08014570 	.word	0x08014570
 8003780:	08015a58 	.word	0x08015a58
 8003784:	08014584 	.word	0x08014584
 8003788:	08014588 	.word	0x08014588
 800378c:	0801458c 	.word	0x0801458c
		}
		if(esp01SSID[0] == '\0')
 8003790:	4ba5      	ldr	r3, [pc, #660]	@ (8003a28 <ESP01DOConnection+0x548>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8232 	beq.w	8003bfe <ESP01DOConnection+0x71e>
			break;
		ESP01StrToBufTX(ATCWJAP);
 800379a:	48a4      	ldr	r0, [pc, #656]	@ (8003a2c <ESP01DOConnection+0x54c>)
 800379c:	f000 faf2 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80037a0:	2022      	movs	r0, #34	@ 0x22
 80037a2:	f000 fb1f 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01SSID);
 80037a6:	48a0      	ldr	r0, [pc, #640]	@ (8003a28 <ESP01DOConnection+0x548>)
 80037a8:	f000 faec 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80037ac:	2022      	movs	r0, #34	@ 0x22
 80037ae:	f000 fb19 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 80037b2:	202c      	movs	r0, #44	@ 0x2c
 80037b4:	f000 fb16 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 80037b8:	2022      	movs	r0, #34	@ 0x22
 80037ba:	f000 fb13 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PASSWORD);
 80037be:	489c      	ldr	r0, [pc, #624]	@ (8003a30 <ESP01DOConnection+0x550>)
 80037c0:	f000 fae0 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80037c4:	2022      	movs	r0, #34	@ 0x22
 80037c6:	f000 fb0d 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 80037ca:	200d      	movs	r0, #13
 80037cc:	f000 fb0a 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 80037d0:	200a      	movs	r0, #10
 80037d2:	f000 fb07 	bl	8003de4 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 80037d6:	4b97      	ldr	r3, [pc, #604]	@ (8003a34 <ESP01DOConnection+0x554>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <ESP01DOConnection+0x306>
			ESP01DbgStr("+&DBGESP01ATCWJAP");
 80037de:	4b95      	ldr	r3, [pc, #596]	@ (8003a34 <ESP01DOConnection+0x554>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4895      	ldr	r0, [pc, #596]	@ (8003a38 <ESP01DOConnection+0x558>)
 80037e4:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 80037e6:	4a95      	ldr	r2, [pc, #596]	@ (8003a3c <ESP01DOConnection+0x55c>)
 80037e8:	7813      	ldrb	r3, [r2, #0]
 80037ea:	f023 0320 	bic.w	r3, r3, #32
 80037ee:	7013      	strb	r3, [r2, #0]
		esp01ATState = ESP01CWJAPRESPONSE;
 80037f0:	4b93      	ldr	r3, [pc, #588]	@ (8003a40 <ESP01DOConnection+0x560>)
 80037f2:	2208      	movs	r2, #8
 80037f4:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 80037f6:	4b93      	ldr	r3, [pc, #588]	@ (8003a44 <ESP01DOConnection+0x564>)
 80037f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80037fc:	601a      	str	r2, [r3, #0]
		break;
 80037fe:	e20b      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01CWJAPRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8003800:	4b8e      	ldr	r3, [pc, #568]	@ (8003a3c <ESP01DOConnection+0x55c>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <ESP01DOConnection+0x33c>
			esp01ATState = ESP01ATCIFSR;
 800380e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003810:	2209      	movs	r2, #9
 8003812:	701a      	strb	r2, [r3, #0]
			esp01TriesAT = 4;
 8003814:	4b8c      	ldr	r3, [pc, #560]	@ (8003a48 <ESP01DOConnection+0x568>)
 8003816:	2204      	movs	r2, #4
 8003818:	701a      	strb	r2, [r3, #0]
		}
		else
			esp01ATState = ESP01ATAT;
		break;
 800381a:	e1fd      	b.n	8003c18 <ESP01DOConnection+0x738>
			esp01ATState = ESP01ATAT;
 800381c:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <ESP01DOConnection+0x560>)
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
		break;
 8003822:	e1f9      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCIFSR:
		esp01LocalIP[0] = '\0';
 8003824:	4b89      	ldr	r3, [pc, #548]	@ (8003a4c <ESP01DOConnection+0x56c>)
 8003826:	2200      	movs	r2, #0
 8003828:	701a      	strb	r2, [r3, #0]
		ESP01StrToBufTX(ATCIFSR);
 800382a:	4889      	ldr	r0, [pc, #548]	@ (8003a50 <ESP01DOConnection+0x570>)
 800382c:	f000 faaa 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003830:	4b80      	ldr	r3, [pc, #512]	@ (8003a34 <ESP01DOConnection+0x554>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <ESP01DOConnection+0x360>
			ESP01DbgStr("+&DBGESP01CIFSR");
 8003838:	4b7e      	ldr	r3, [pc, #504]	@ (8003a34 <ESP01DOConnection+0x554>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4885      	ldr	r0, [pc, #532]	@ (8003a54 <ESP01DOConnection+0x574>)
 800383e:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003840:	4a7e      	ldr	r2, [pc, #504]	@ (8003a3c <ESP01DOConnection+0x55c>)
 8003842:	7813      	ldrb	r3, [r2, #0]
 8003844:	f023 0320 	bic.w	r3, r3, #32
 8003848:	7013      	strb	r3, [r2, #0]
		esp01ATState = ESP01CIFSRRESPONSE;
 800384a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a40 <ESP01DOConnection+0x560>)
 800384c:	220a      	movs	r2, #10
 800384e:	701a      	strb	r2, [r3, #0]
		break;
 8003850:	e1e2      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01CIFSRRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003852:	4b7a      	ldr	r3, [pc, #488]	@ (8003a3c <ESP01DOConnection+0x55c>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <ESP01DOConnection+0x388>
			esp01ATState = ESP01ATCIPCLOSE;
 8003860:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003862:	220b      	movs	r2, #11
 8003864:	701a      	strb	r2, [r3, #0]
				esp01ATState = ESP01ATAT;
				break;
			}
			esp01ATState = ESP01ATCIFSR;
		}
		break;
 8003866:	e1d7      	b.n	8003c18 <ESP01DOConnection+0x738>
			esp01TriesAT--;
 8003868:	4b77      	ldr	r3, [pc, #476]	@ (8003a48 <ESP01DOConnection+0x568>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b75      	ldr	r3, [pc, #468]	@ (8003a48 <ESP01DOConnection+0x568>)
 8003872:	701a      	strb	r2, [r3, #0]
			if(esp01TriesAT == 0){
 8003874:	4b74      	ldr	r3, [pc, #464]	@ (8003a48 <ESP01DOConnection+0x568>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <ESP01DOConnection+0x3a4>
				esp01ATState = ESP01ATAT;
 800387c:	4b70      	ldr	r3, [pc, #448]	@ (8003a40 <ESP01DOConnection+0x560>)
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
				break;
 8003882:	e1c9      	b.n	8003c18 <ESP01DOConnection+0x738>
			esp01ATState = ESP01ATCIFSR;
 8003884:	4b6e      	ldr	r3, [pc, #440]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003886:	2209      	movs	r2, #9
 8003888:	701a      	strb	r2, [r3, #0]
		break;
 800388a:	e1c5      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCIPCLOSE:
		if(esp01RemoteIP[0] == '\0')
 800388c:	4b72      	ldr	r3, [pc, #456]	@ (8003a58 <ESP01DOConnection+0x578>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 81b6 	beq.w	8003c02 <ESP01DOConnection+0x722>
			break;
		ESP01StrToBufTX(ATCIPCLOSE);
 8003896:	4871      	ldr	r0, [pc, #452]	@ (8003a5c <ESP01DOConnection+0x57c>)
 8003898:	f000 fa74 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 800389c:	4b65      	ldr	r3, [pc, #404]	@ (8003a34 <ESP01DOConnection+0x554>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <ESP01DOConnection+0x3cc>
			ESP01DbgStr("+&DBGESP01ATCIPCLOSE");
 80038a4:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <ESP01DOConnection+0x554>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	486d      	ldr	r0, [pc, #436]	@ (8003a60 <ESP01DOConnection+0x580>)
 80038aa:	4798      	blx	r3
		esp01ATState = ESP01ATCIPSTART;
 80038ac:	4b64      	ldr	r3, [pc, #400]	@ (8003a40 <ESP01DOConnection+0x560>)
 80038ae:	220c      	movs	r2, #12
 80038b0:	701a      	strb	r2, [r3, #0]
		break;
 80038b2:	e1b1      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCIPSTART:
		ESP01StrToBufTX(ATCIPSTART);
 80038b4:	486b      	ldr	r0, [pc, #428]	@ (8003a64 <ESP01DOConnection+0x584>)
 80038b6:	f000 fa65 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80038ba:	2022      	movs	r0, #34	@ 0x22
 80038bc:	f000 fa92 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01PROTO);
 80038c0:	4869      	ldr	r0, [pc, #420]	@ (8003a68 <ESP01DOConnection+0x588>)
 80038c2:	f000 fa5f 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80038c6:	2022      	movs	r0, #34	@ 0x22
 80038c8:	f000 fa8c 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 80038cc:	202c      	movs	r0, #44	@ 0x2c
 80038ce:	f000 fa89 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\"');
 80038d2:	2022      	movs	r0, #34	@ 0x22
 80038d4:	f000 fa86 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemoteIP);
 80038d8:	485f      	ldr	r0, [pc, #380]	@ (8003a58 <ESP01DOConnection+0x578>)
 80038da:	f000 fa53 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX('\"');
 80038de:	2022      	movs	r0, #34	@ 0x22
 80038e0:	f000 fa80 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX(',');
 80038e4:	202c      	movs	r0, #44	@ 0x2c
 80038e6:	f000 fa7d 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01RemotePORT);
 80038ea:	4860      	ldr	r0, [pc, #384]	@ (8003a6c <ESP01DOConnection+0x58c>)
 80038ec:	f000 fa4a 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 80038f0:	202c      	movs	r0, #44	@ 0x2c
 80038f2:	f000 fa77 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(esp01LocalPORT);
 80038f6:	485e      	ldr	r0, [pc, #376]	@ (8003a70 <ESP01DOConnection+0x590>)
 80038f8:	f000 fa44 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX(',');
 80038fc:	202c      	movs	r0, #44	@ 0x2c
 80038fe:	f000 fa71 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('0');
 8003902:	2030      	movs	r0, #48	@ 0x30
 8003904:	f000 fa6e 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\r');
 8003908:	200d      	movs	r0, #13
 800390a:	f000 fa6b 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01ByteToBufTX('\n');
 800390e:	200a      	movs	r0, #10
 8003910:	f000 fa68 	bl	8003de4 <ESP01ByteToBufTX>
		if(ESP01DbgStr != NULL)
 8003914:	4b47      	ldr	r3, [pc, #284]	@ (8003a34 <ESP01DOConnection+0x554>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <ESP01DOConnection+0x444>
			ESP01DbgStr("+&DBGESP01ATCIPSTART");
 800391c:	4b45      	ldr	r3, [pc, #276]	@ (8003a34 <ESP01DOConnection+0x554>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4854      	ldr	r0, [pc, #336]	@ (8003a74 <ESP01DOConnection+0x594>)
 8003922:	4798      	blx	r3
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003924:	4a45      	ldr	r2, [pc, #276]	@ (8003a3c <ESP01DOConnection+0x55c>)
 8003926:	7813      	ldrb	r3, [r2, #0]
 8003928:	f023 0320 	bic.w	r3, r3, #32
 800392c:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.UDPTCPCONNECTED = 0;
 800392e:	4a43      	ldr	r2, [pc, #268]	@ (8003a3c <ESP01DOConnection+0x55c>)
 8003930:	7813      	ldrb	r3, [r2, #0]
 8003932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003936:	7013      	strb	r3, [r2, #0]
		esp01ATState = ESP01CIPSTARTRESPONSE;
 8003938:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <ESP01DOConnection+0x560>)
 800393a:	220d      	movs	r2, #13
 800393c:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 500;
 800393e:	4b41      	ldr	r3, [pc, #260]	@ (8003a44 <ESP01DOConnection+0x564>)
 8003940:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003944:	601a      	str	r2, [r3, #0]
		break;
 8003946:	e167      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01CIPSTARTRESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK){
 8003948:	4b3c      	ldr	r3, [pc, #240]	@ (8003a3c <ESP01DOConnection+0x55c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <ESP01DOConnection+0x490>
			esp01ATState = ESP01ATCONNECTED;
 8003956:	4b3a      	ldr	r3, [pc, #232]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003958:	220e      	movs	r2, #14
 800395a:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 800395c:	4b35      	ldr	r3, [pc, #212]	@ (8003a34 <ESP01DOConnection+0x554>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8150 	beq.w	8003c06 <ESP01DOConnection+0x726>
				ESP01DbgStr("+&DBGESP01ATCONNECTED");
 8003966:	4b33      	ldr	r3, [pc, #204]	@ (8003a34 <ESP01DOConnection+0x554>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4843      	ldr	r0, [pc, #268]	@ (8003a78 <ESP01DOConnection+0x598>)
 800396c:	4798      	blx	r3
		}else
			esp01ATState = ESP01ATAT;
		break;
 800396e:	e14a      	b.n	8003c06 <ESP01DOConnection+0x726>
			esp01ATState = ESP01ATAT;
 8003970:	4b33      	ldr	r3, [pc, #204]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003972:	2202      	movs	r2, #2
 8003974:	701a      	strb	r2, [r3, #0]
		break;
 8003976:	e146      	b.n	8003c06 <ESP01DOConnection+0x726>
	case ESP01ATCONNECTED:
		if(esp01Flags.bit.WIFICONNECTED == 0){
 8003978:	4b30      	ldr	r3, [pc, #192]	@ (8003a3c <ESP01DOConnection+0x55c>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <ESP01DOConnection+0x4c0>
			esp01ATState = ESP01ATAT;
 8003986:	4b2e      	ldr	r3, [pc, #184]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003988:	2202      	movs	r2, #2
 800398a:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 800398c:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <ESP01DOConnection+0x554>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 813a 	beq.w	8003c0a <ESP01DOConnection+0x72a>
				ESP01DbgStr("+&DBGESP01desconec");
 8003996:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <ESP01DOConnection+0x554>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4838      	ldr	r0, [pc, #224]	@ (8003a7c <ESP01DOConnection+0x59c>)
 800399c:	4798      	blx	r3
			break;
 800399e:	e134      	b.n	8003c0a <ESP01DOConnection+0x72a>
		}
		if(esp01Flags.bit.UDPTCPCONNECTED == 0){
 80039a0:	4b26      	ldr	r3, [pc, #152]	@ (8003a3c <ESP01DOConnection+0x55c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <ESP01DOConnection+0x4e8>
			esp01ATState = ESP01ATCIPCLOSE;
 80039ae:	4b24      	ldr	r3, [pc, #144]	@ (8003a40 <ESP01DOConnection+0x560>)
 80039b0:	220b      	movs	r2, #11
 80039b2:	701a      	strb	r2, [r3, #0]
			if(ESP01DbgStr != NULL)
 80039b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a34 <ESP01DOConnection+0x554>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8128 	beq.w	8003c0e <ESP01DOConnection+0x72e>
				ESP01DbgStr("+&DBGESP01noudp");
 80039be:	4b1d      	ldr	r3, [pc, #116]	@ (8003a34 <ESP01DOConnection+0x554>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	482f      	ldr	r0, [pc, #188]	@ (8003a80 <ESP01DOConnection+0x5a0>)
 80039c4:	4798      	blx	r3
			break;
 80039c6:	e122      	b.n	8003c0e <ESP01DOConnection+0x72e>
		}
		esp01TimeoutTask = 0;
 80039c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <ESP01DOConnection+0x564>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
		break;
 80039ce:	e123      	b.n	8003c18 <ESP01DOConnection+0x738>
	/*********** SOFT AP STATES **********/
	case ESP01ATCWQAP:
		ESP01StrToBufTX(ATCWQAP);
 80039d0:	482c      	ldr	r0, [pc, #176]	@ (8003a84 <ESP01DOConnection+0x5a4>)
 80039d2:	f000 f9d7 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <ESP01DOConnection+0x554>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <ESP01DOConnection+0x506>
			ESP01DbgStr("+&DBGESP01CWQAP");
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <ESP01DOConnection+0x554>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4829      	ldr	r0, [pc, #164]	@ (8003a88 <ESP01DOConnection+0x5a8>)
 80039e4:	4798      	blx	r3
		esp01ATState = ESP01ATCWSAP;
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <ESP01DOConnection+0x560>)
 80039e8:	2210      	movs	r2, #16
 80039ea:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 20;
 80039ec:	4b15      	ldr	r3, [pc, #84]	@ (8003a44 <ESP01DOConnection+0x564>)
 80039ee:	2214      	movs	r2, #20
 80039f0:	601a      	str	r2, [r3, #0]

		break;
 80039f2:	e111      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCWSAP:
		ESP01StrToBufTX(ATCWSAP);
 80039f4:	4825      	ldr	r0, [pc, #148]	@ (8003a8c <ESP01DOConnection+0x5ac>)
 80039f6:	f000 f9c5 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <ESP01DOConnection+0x554>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <ESP01DOConnection+0x52a>
			ESP01DbgStr("+&DBGESP01CWSAP");
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <ESP01DOConnection+0x554>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4822      	ldr	r0, [pc, #136]	@ (8003a90 <ESP01DOConnection+0x5b0>)
 8003a08:	4798      	blx	r3
		esp01ATState = ESP01ATCWDHCP;
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <ESP01DOConnection+0x560>)
 8003a0c:	2212      	movs	r2, #18
 8003a0e:	701a      	strb	r2, [r3, #0]
		esp01TimeoutTask = 100;
 8003a10:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <ESP01DOConnection+0x564>)
 8003a12:	2264      	movs	r2, #100	@ 0x64
 8003a14:	601a      	str	r2, [r3, #0]
		esp01userConnected = 0;
 8003a16:	4b1f      	ldr	r3, [pc, #124]	@ (8003a94 <ESP01DOConnection+0x5b4>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003a1c:	4a07      	ldr	r2, [pc, #28]	@ (8003a3c <ESP01DOConnection+0x55c>)
 8003a1e:	7813      	ldrb	r3, [r2, #0]
 8003a20:	f023 0320 	bic.w	r3, r3, #32
 8003a24:	7013      	strb	r3, [r2, #0]
		//esp01Flags.bit.ATRESPONSEOK=0;
		//esp01TimeoutTask = 4000;
		break;
 8003a26:	e0f7      	b.n	8003c18 <ESP01DOConnection+0x738>
 8003a28:	20000850 	.word	0x20000850
 8003a2c:	08015a8c 	.word	0x08015a8c
 8003a30:	20000890 	.word	0x20000890
 8003a34:	2000084c 	.word	0x2000084c
 8003a38:	080145a0 	.word	0x080145a0
 8003a3c:	20000838 	.word	0x20000838
 8003a40:	20000836 	.word	0x20000836
 8003a44:	2000083c 	.word	0x2000083c
 8003a48:	20000b6c 	.word	0x20000b6c
 8003a4c:	200008c8 	.word	0x200008c8
 8003a50:	08015a98 	.word	0x08015a98
 8003a54:	080145b4 	.word	0x080145b4
 8003a58:	200008b0 	.word	0x200008b0
 8003a5c:	08015ab4 	.word	0x08015ab4
 8003a60:	080145c4 	.word	0x080145c4
 8003a64:	08015aa4 	.word	0x08015aa4
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	200008c0 	.word	0x200008c0
 8003a70:	200008d8 	.word	0x200008d8
 8003a74:	080145dc 	.word	0x080145dc
 8003a78:	080145f4 	.word	0x080145f4
 8003a7c:	0801460c 	.word	0x0801460c
 8003a80:	08014620 	.word	0x08014620
 8003a84:	08015a64 	.word	0x08015a64
 8003a88:	08014630 	.word	0x08014630
 8003a8c:	08015ad0 	.word	0x08015ad0
 8003a90:	08014640 	.word	0x08014640
 8003a94:	20000b7f 	.word	0x20000b7f
	case ESP01ATCWSAP_RESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003a98:	4b60      	ldr	r3, [pc, #384]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <ESP01DOConnection+0x5ce>
			esp01ATState = ESP01ATCWDHCP;
 8003aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003aa8:	2212      	movs	r2, #18
 8003aaa:	701a      	strb	r2, [r3, #0]
		else
			esp01ATState = ESP01ATAT;
		break;
 8003aac:	e0b4      	b.n	8003c18 <ESP01DOConnection+0x738>
			esp01ATState = ESP01ATAT;
 8003aae:	4b5c      	ldr	r3, [pc, #368]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	701a      	strb	r2, [r3, #0]
		break;
 8003ab4:	e0b0      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCWDHCP:
		ESP01StrToBufTX(ATCWDHCP);
 8003ab6:	485b      	ldr	r0, [pc, #364]	@ (8003c24 <ESP01DOConnection+0x744>)
 8003ab8:	f000 f964 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003abc:	4b5a      	ldr	r3, [pc, #360]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <ESP01DOConnection+0x5ec>
			ESP01DbgStr("+&DBGESP01CWDHCP");
 8003ac4:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4858      	ldr	r0, [pc, #352]	@ (8003c2c <ESP01DOConnection+0x74c>)
 8003aca:	4798      	blx	r3
		esp01ATState = ESP01ATCIPSERVER;
 8003acc:	4b54      	ldr	r3, [pc, #336]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003ace:	2214      	movs	r2, #20
 8003ad0:	701a      	strb	r2, [r3, #0]

		esp01TimeoutTask = 100;
 8003ad2:	4b57      	ldr	r3, [pc, #348]	@ (8003c30 <ESP01DOConnection+0x750>)
 8003ad4:	2264      	movs	r2, #100	@ 0x64
 8003ad6:	601a      	str	r2, [r3, #0]
		break;
 8003ad8:	e09e      	b.n	8003c18 <ESP01DOConnection+0x738>

	case ESP01ATCIPSERVER:
		ESP01StrToBufTX(ATCIPOPENSERVER);
 8003ada:	4856      	ldr	r0, [pc, #344]	@ (8003c34 <ESP01DOConnection+0x754>)
 8003adc:	f000 f952 	bl	8003d84 <ESP01StrToBufTX>
		if(ESP01DbgStr != NULL)
 8003ae0:	4b51      	ldr	r3, [pc, #324]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <ESP01DOConnection+0x610>
			ESP01DbgStr("+&DBGESP01CIPSERVER");
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4852      	ldr	r0, [pc, #328]	@ (8003c38 <ESP01DOConnection+0x758>)
 8003aee:	4798      	blx	r3
		esp01ATState = ESP01_WAITING_CONNECTION;
 8003af0:	4b4b      	ldr	r3, [pc, #300]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003af2:	2213      	movs	r2, #19
 8003af4:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003af6:	4a49      	ldr	r2, [pc, #292]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003af8:	7813      	ldrb	r3, [r2, #0]
 8003afa:	f023 0320 	bic.w	r3, r3, #32
 8003afe:	7013      	strb	r3, [r2, #0]
		esp01TimeoutTask = 300;
 8003b00:	4b4b      	ldr	r3, [pc, #300]	@ (8003c30 <ESP01DOConnection+0x750>)
 8003b02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b06:	601a      	str	r2, [r3, #0]
		break;
 8003b08:	e086      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01_WAITING_CONNECTION:
		if(esp01userConnected){
 8003b0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c3c <ESP01DOConnection+0x75c>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d07f      	beq.n	8003c12 <ESP01DOConnection+0x732>
			esp01ATState = ESP01ATCONFIGSERVER;
 8003b12:	4b43      	ldr	r3, [pc, #268]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003b14:	2216      	movs	r2, #22
 8003b16:	701a      	strb	r2, [r3, #0]
			esp01userConnected = 0;
 8003b18:	4b48      	ldr	r3, [pc, #288]	@ (8003c3c <ESP01DOConnection+0x75c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003b1e:	e078      	b.n	8003c12 <ESP01DOConnection+0x732>
	case ESP01ATCIPSERVER_RESPONSE:
		if(esp01Flags.bit.ATRESPONSEOK)
 8003b20:	4b3e      	ldr	r3, [pc, #248]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <ESP01DOConnection+0x656>
			esp01ATState = ESP01ATCONFIGSERVER;
 8003b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003b30:	2216      	movs	r2, #22
 8003b32:	701a      	strb	r2, [r3, #0]
		else
			esp01ATState = ESP01ATAT;
	break;
 8003b34:	e070      	b.n	8003c18 <ESP01DOConnection+0x738>
			esp01ATState = ESP01ATAT;
 8003b36:	4b3a      	ldr	r3, [pc, #232]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
	break;
 8003b3c:	e06c      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCONFIGSERVER:
		ESP01StrToBufTX(ATCIPSEND);
 8003b3e:	4840      	ldr	r0, [pc, #256]	@ (8003c40 <ESP01DOConnection+0x760>)
 8003b40:	f000 f920 	bl	8003d84 <ESP01StrToBufTX>
		ESP01ByteToBufTX(esp01Link);
 8003b44:	4b3f      	ldr	r3, [pc, #252]	@ (8003c44 <ESP01DOConnection+0x764>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f94b 	bl	8003de4 <ESP01ByteToBufTX>
		ESP01StrToBufTX(",300");
 8003b4e:	483e      	ldr	r0, [pc, #248]	@ (8003c48 <ESP01DOConnection+0x768>)
 8003b50:	f000 f918 	bl	8003d84 <ESP01StrToBufTX>
		ESP01StrToBufTX("\r>");
 8003b54:	483d      	ldr	r0, [pc, #244]	@ (8003c4c <ESP01DOConnection+0x76c>)
 8003b56:	f000 f915 	bl	8003d84 <ESP01StrToBufTX>

		esp01Flags.bit.TXCIPSEND = 1;
 8003b5a:	4a30      	ldr	r2, [pc, #192]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003b5c:	7813      	ldrb	r3, [r2, #0]
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	7013      	strb	r3, [r2, #0]
		esp01Flags.bit.SENDINGDATA = 1;
 8003b64:	4a2d      	ldr	r2, [pc, #180]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003b66:	7813      	ldrb	r3, [r2, #0]
 8003b68:	f043 0308 	orr.w	r3, r3, #8
 8003b6c:	7013      	strb	r3, [r2, #0]

		if(ESP01DbgStr != NULL)
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <ESP01DOConnection+0x69e>
			ESP01DbgStr("+&DBGESP01ATESP01ATCONFIGSERVER");
 8003b76:	4b2c      	ldr	r3, [pc, #176]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4835      	ldr	r0, [pc, #212]	@ (8003c50 <ESP01DOConnection+0x770>)
 8003b7c:	4798      	blx	r3

		esp01ATState = ESP01ATCONFIGSERVER_RESPONSE;
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003b80:	2217      	movs	r2, #23
 8003b82:	701a      	strb	r2, [r3, #0]
		esp01Flags.bit.ATRESPONSEOK = 0;
 8003b84:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003b86:	7813      	ldrb	r3, [r2, #0]
 8003b88:	f023 0320 	bic.w	r3, r3, #32
 8003b8c:	7013      	strb	r3, [r2, #0]
		//esp01TimeoutTask = 200;
	break;
 8003b8e:	e043      	b.n	8003c18 <ESP01DOConnection+0x738>
	case ESP01ATCONFIGSERVER_RESPONSE:
		if(!esp01Flags.bit.WAITINGSYMBOL){
 8003b90:	4b22      	ldr	r3, [pc, #136]	@ (8003c1c <ESP01DOConnection+0x73c>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d110      	bne.n	8003bc0 <ESP01DOConnection+0x6e0>
			ESP01StrToBufTX(CONFIGSERVER);
 8003b9e:	482d      	ldr	r0, [pc, #180]	@ (8003c54 <ESP01DOConnection+0x774>)
 8003ba0:	f000 f8f0 	bl	8003d84 <ESP01StrToBufTX>

			esp01TimeoutTask = 200;
 8003ba4:	4b22      	ldr	r3, [pc, #136]	@ (8003c30 <ESP01DOConnection+0x750>)
 8003ba6:	22c8      	movs	r2, #200	@ 0xc8
 8003ba8:	601a      	str	r2, [r3, #0]

			esp01ATState = ESP01ATWAITSERVERDATA;
 8003baa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003bac:	2218      	movs	r2, #24
 8003bae:	701a      	strb	r2, [r3, #0]

			if(ESP01DbgStr != NULL)
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <ESP01DOConnection+0x6e0>
				ESP01DbgStr("+&DBGESP01ATWAITSERVERDATA");
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <ESP01DOConnection+0x748>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4826      	ldr	r0, [pc, #152]	@ (8003c58 <ESP01DOConnection+0x778>)
 8003bbe:	4798      	blx	r3
		}
	case ESP01ATWAITSERVERDATA:
		if(isValid){
 8003bc0:	4b26      	ldr	r3, [pc, #152]	@ (8003c5c <ESP01DOConnection+0x77c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d026      	beq.n	8003c16 <ESP01DOConnection+0x736>
			ESP01_setMode(CONNECTWIFI);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f000 f84f 	bl	8003c6c <ESP01_setMode>
			ESP01_SetWIFI(ssid_buffer, pass_buffer);
 8003bce:	4924      	ldr	r1, [pc, #144]	@ (8003c60 <ESP01DOConnection+0x780>)
 8003bd0:	4824      	ldr	r0, [pc, #144]	@ (8003c64 <ESP01DOConnection+0x784>)
 8003bd2:	f7fe fd61 	bl	8002698 <ESP01_SetWIFI>
			ESP01_StartUDP(ip_buffer, 30010, 30000);
 8003bd6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003bda:	f247 513a 	movw	r1, #30010	@ 0x753a
 8003bde:	4822      	ldr	r0, [pc, #136]	@ (8003c68 <ESP01DOConnection+0x788>)
 8003be0:	f7fe fd8c 	bl	80026fc <ESP01_StartUDP>
			esp01ATState = ESP01ATHARDRST0;
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <ESP01DOConnection+0x740>)
 8003be6:	2219      	movs	r2, #25
 8003be8:	701a      	strb	r2, [r3, #0]
			isValid = 0;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <ESP01DOConnection+0x77c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
		}
	break;
 8003bf0:	e011      	b.n	8003c16 <ESP01DOConnection+0x736>
		break;
 8003bf2:	bf00      	nop
 8003bf4:	e010      	b.n	8003c18 <ESP01DOConnection+0x738>
		break;
 8003bf6:	bf00      	nop
 8003bf8:	e00e      	b.n	8003c18 <ESP01DOConnection+0x738>
		break;
 8003bfa:	bf00      	nop
 8003bfc:	e00c      	b.n	8003c18 <ESP01DOConnection+0x738>
			break;
 8003bfe:	bf00      	nop
 8003c00:	e00a      	b.n	8003c18 <ESP01DOConnection+0x738>
			break;
 8003c02:	bf00      	nop
 8003c04:	e008      	b.n	8003c18 <ESP01DOConnection+0x738>
		break;
 8003c06:	bf00      	nop
 8003c08:	e006      	b.n	8003c18 <ESP01DOConnection+0x738>
			break;
 8003c0a:	bf00      	nop
 8003c0c:	e004      	b.n	8003c18 <ESP01DOConnection+0x738>
			break;
 8003c0e:	bf00      	nop
 8003c10:	e002      	b.n	8003c18 <ESP01DOConnection+0x738>
		break;
 8003c12:	bf00      	nop
 8003c14:	e000      	b.n	8003c18 <ESP01DOConnection+0x738>
	break;
 8003c16:	bf00      	nop
	}
}
 8003c18:	bf00      	nop
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000838 	.word	0x20000838
 8003c20:	20000836 	.word	0x20000836
 8003c24:	08015af0 	.word	0x08015af0
 8003c28:	2000084c 	.word	0x2000084c
 8003c2c:	08014650 	.word	0x08014650
 8003c30:	2000083c 	.word	0x2000083c
 8003c34:	08015b04 	.word	0x08015b04
 8003c38:	08014664 	.word	0x08014664
 8003c3c:	20000b7f 	.word	0x20000b7f
 8003c40:	08015ac4 	.word	0x08015ac4
 8003c44:	20000b80 	.word	0x20000b80
 8003c48:	08014678 	.word	0x08014678
 8003c4c:	08014404 	.word	0x08014404
 8003c50:	08014680 	.word	0x08014680
 8003c54:	08015b18 	.word	0x08015b18
 8003c58:	080146a0 	.word	0x080146a0
 8003c5c:	20000b81 	.word	0x20000b81
 8003c60:	20000ba4 	.word	0x20000ba4
 8003c64:	20000b84 	.word	0x20000b84
 8003c68:	20000be4 	.word	0x20000be4

08003c6c <ESP01_setMode>:

void ESP01_setMode(_emode _mode){
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
	mode = _mode;
 8003c76:	4a04      	ldr	r2, [pc, #16]	@ (8003c88 <ESP01_setMode+0x1c>)
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	7013      	strb	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	20000b7e 	.word	0x20000b7e

08003c8c <ESP01SENDData>:

static void ESP01SENDData(){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
	uint8_t value;
	if(esp01Flags.bit.WAITINGSYMBOL){
 8003c92:	4b34      	ldr	r3, [pc, #208]	@ (8003d64 <ESP01SENDData+0xd8>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <ESP01SENDData+0x3c>
		if(!esp01TimeoutTxSymbol){
 8003ca0:	4b31      	ldr	r3, [pc, #196]	@ (8003d68 <ESP01SENDData+0xdc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d159      	bne.n	8003d5c <ESP01SENDData+0xd0>
			esp01irTX = esp01iwTX;
 8003ca8:	4b30      	ldr	r3, [pc, #192]	@ (8003d6c <ESP01SENDData+0xe0>)
 8003caa:	881a      	ldrh	r2, [r3, #0]
 8003cac:	4b30      	ldr	r3, [pc, #192]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003cae:	801a      	strh	r2, [r3, #0]
			esp01Flags.bit.WAITINGSYMBOL = 0;
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d64 <ESP01SENDData+0xd8>)
 8003cb2:	7813      	ldrb	r3, [r2, #0]
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	7013      	strb	r3, [r2, #0]
			esp01ATState = ESP01ATAT;
 8003cba:	4b2e      	ldr	r3, [pc, #184]	@ (8003d74 <ESP01SENDData+0xe8>)
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
			esp01TimeoutTask = 10;
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <ESP01SENDData+0xec>)
 8003cc2:	220a      	movs	r2, #10
 8003cc4:	601a      	str	r2, [r3, #0]
		}
		return;
 8003cc6:	e049      	b.n	8003d5c <ESP01SENDData+0xd0>
	}
	if(esp01irTX != esp01iwTX){
 8003cc8:	4b29      	ldr	r3, [pc, #164]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	4b27      	ldr	r3, [pc, #156]	@ (8003d6c <ESP01SENDData+0xe0>)
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d044      	beq.n	8003d5e <ESP01SENDData+0xd2>
		value = esp01TXATBuf[esp01irTX];
 8003cd4:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b28      	ldr	r3, [pc, #160]	@ (8003d7c <ESP01SENDData+0xf0>)
 8003cdc:	5c9b      	ldrb	r3, [r3, r2]
 8003cde:	71fb      	strb	r3, [r7, #7]
		if(esp01Flags.bit.TXCIPSEND){
 8003ce0:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <ESP01SENDData+0xd8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <ESP01SENDData+0x6c>
			if(value == '>')
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cf2:	d101      	bne.n	8003cf8 <ESP01SENDData+0x6c>
				value = '\n';
 8003cf4:	230a      	movs	r3, #10
 8003cf6:	71fb      	strb	r3, [r7, #7]
		}
		if(esp01Handle.WriteUSARTByte(value)){
 8003cf8:	4b21      	ldr	r3, [pc, #132]	@ (8003d80 <ESP01SENDData+0xf4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	79fa      	ldrb	r2, [r7, #7]
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4798      	blx	r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d02a      	beq.n	8003d5e <ESP01SENDData+0xd2>
			if(esp01Flags.bit.TXCIPSEND){
 8003d08:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <ESP01SENDData+0xd8>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <ESP01SENDData+0xb2>
				if(esp01TXATBuf[esp01irTX] == '>'){
 8003d16:	4b16      	ldr	r3, [pc, #88]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b17      	ldr	r3, [pc, #92]	@ (8003d7c <ESP01SENDData+0xf0>)
 8003d1e:	5c9b      	ldrb	r3, [r3, r2]
 8003d20:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d22:	d10c      	bne.n	8003d3e <ESP01SENDData+0xb2>
					esp01Flags.bit.TXCIPSEND = 0;
 8003d24:	4a0f      	ldr	r2, [pc, #60]	@ (8003d64 <ESP01SENDData+0xd8>)
 8003d26:	7813      	ldrb	r3, [r2, #0]
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	7013      	strb	r3, [r2, #0]
					esp01Flags.bit.WAITINGSYMBOL = 1;
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <ESP01SENDData+0xd8>)
 8003d30:	7813      	ldrb	r3, [r2, #0]
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	7013      	strb	r3, [r2, #0]
					esp01TimeoutTxSymbol = 5;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <ESP01SENDData+0xdc>)
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	601a      	str	r2, [r3, #0]
				}
			}
			esp01irTX++;
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	3301      	adds	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003d48:	801a      	strh	r2, [r3, #0]
			if(esp01irTX == ESP01TXBUFAT)
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d52:	d104      	bne.n	8003d5e <ESP01SENDData+0xd2>
				esp01irTX = 0;
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <ESP01SENDData+0xe4>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	e000      	b.n	8003d5e <ESP01SENDData+0xd2>
		return;
 8003d5c:	bf00      	nop
		}
	}
}
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000838 	.word	0x20000838
 8003d68:	20000844 	.word	0x20000844
 8003d6c:	20000b6a 	.word	0x20000b6a
 8003d70:	20000b68 	.word	0x20000b68
 8003d74:	20000836 	.word	0x20000836
 8003d78:	2000083c 	.word	0x2000083c
 8003d7c:	20000964 	.word	0x20000964
 8003d80:	20000b70 	.word	0x20000b70

08003d84 <ESP01StrToBufTX>:

static void ESP01StrToBufTX(const char *str){
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]; i++){
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e017      	b.n	8003dc2 <ESP01StrToBufTX+0x3e>
		esp01TXATBuf[esp01iwTX++] = str[i];
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	441a      	add	r2, r3
 8003d98:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <ESP01StrToBufTX+0x58>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	1c59      	adds	r1, r3, #1
 8003d9e:	b288      	uxth	r0, r1
 8003da0:	490e      	ldr	r1, [pc, #56]	@ (8003ddc <ESP01StrToBufTX+0x58>)
 8003da2:	8008      	strh	r0, [r1, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <ESP01StrToBufTX+0x5c>)
 8003daa:	545a      	strb	r2, [r3, r1]
		if(esp01iwTX == ESP01TXBUFAT)
 8003dac:	4b0b      	ldr	r3, [pc, #44]	@ (8003ddc <ESP01StrToBufTX+0x58>)
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003db4:	d102      	bne.n	8003dbc <ESP01StrToBufTX+0x38>
			esp01iwTX = 0;
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <ESP01StrToBufTX+0x58>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]
	for(int i=0; str[i]; i++){
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e1      	bne.n	8003d92 <ESP01StrToBufTX+0xe>
	}
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20000b6a 	.word	0x20000b6a
 8003de0:	20000964 	.word	0x20000964

08003de4 <ESP01ByteToBufTX>:

static void ESP01ByteToBufTX(uint8_t value){
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	esp01TXATBuf[esp01iwTX++] = value;
 8003dee:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <ESP01ByteToBufTX+0x3c>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	b291      	uxth	r1, r2
 8003df6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <ESP01ByteToBufTX+0x3c>)
 8003df8:	8011      	strh	r1, [r2, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <ESP01ByteToBufTX+0x40>)
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	5453      	strb	r3, [r2, r1]
	if(esp01iwTX == ESP01TXBUFAT)
 8003e02:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <ESP01ByteToBufTX+0x3c>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0a:	d102      	bne.n	8003e12 <ESP01ByteToBufTX+0x2e>
		esp01iwTX = 0;
 8003e0c:	4b04      	ldr	r3, [pc, #16]	@ (8003e20 <ESP01ByteToBufTX+0x3c>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	801a      	strh	r2, [r3, #0]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000b6a 	.word	0x20000b6a
 8003e24:	20000964 	.word	0x20000964

08003e28 <is_valid_ip>:

static int is_valid_ip(const char* ip) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
    if (ip == NULL) return 0;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <is_valid_ip+0x12>
 8003e36:	2300      	movs	r3, #0
 8003e38:	e057      	b.n	8003eea <is_valid_ip+0xc2>

    // Hacemos una copia local modificable para strtok
    char ip_copy[16];
    strncpy(ip_copy, ip, sizeof(ip_copy) - 1);
 8003e3a:	f107 0308 	add.w	r3, r7, #8
 8003e3e:	220f      	movs	r2, #15
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f00f fa1d 	bl	8013282 <strncpy>
    ip_copy[sizeof(ip_copy) - 1] = '\0';  // Garantizar terminación
 8003e48:	2300      	movs	r3, #0
 8003e4a:	75fb      	strb	r3, [r7, #23]

    int dots = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
    char *ptr = strtok(ip_copy, ".");
 8003e50:	f107 0308 	add.w	r3, r7, #8
 8003e54:	4927      	ldr	r1, [pc, #156]	@ (8003ef4 <is_valid_ip+0xcc>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f00f fa26 	bl	80132a8 <strtok>
 8003e5c:	6238      	str	r0, [r7, #32]

    while (ptr != NULL) {
 8003e5e:	e03b      	b.n	8003ed8 <is_valid_ip+0xb0>
        // Verificar que solo haya dígitos
        for (size_t i = 0; ptr[i]; ++i) {
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e010      	b.n	8003e88 <is_valid_ip+0x60>
            if (!isdigit((unsigned char)ptr[i])) return 0;
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	4a21      	ldr	r2, [pc, #132]	@ (8003ef8 <is_valid_ip+0xd0>)
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <is_valid_ip+0x5a>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e033      	b.n	8003eea <is_valid_ip+0xc2>
        for (size_t i = 0; ptr[i]; ++i) {
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e8      	bne.n	8003e66 <is_valid_ip+0x3e>
        }

        // Convertir a número y verificar rango
        long num = strtol(ptr, NULL, 10);
 8003e94:	220a      	movs	r2, #10
 8003e96:	2100      	movs	r1, #0
 8003e98:	6a38      	ldr	r0, [r7, #32]
 8003e9a:	f00f f877 	bl	8012f8c <strtol>
 8003e9e:	61b8      	str	r0, [r7, #24]
        if (num < 0 || num > 255) return 0;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db02      	blt.n	8003eac <is_valid_ip+0x84>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2bff      	cmp	r3, #255	@ 0xff
 8003eaa:	dd01      	ble.n	8003eb0 <is_valid_ip+0x88>
 8003eac:	2300      	movs	r3, #0
 8003eae:	e01c      	b.n	8003eea <is_valid_ip+0xc2>

        // Prevenir ceros a la izquierda (ej: "01" o "001")
        if (ptr[0] == '0' && strlen(ptr) > 1) return 0;
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d107      	bne.n	8003ec8 <is_valid_ip+0xa0>
 8003eb8:	6a38      	ldr	r0, [r7, #32]
 8003eba:	f7fc f991 	bl	80001e0 <strlen>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d901      	bls.n	8003ec8 <is_valid_ip+0xa0>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e010      	b.n	8003eea <is_valid_ip+0xc2>

        ptr = strtok(NULL, ".");
 8003ec8:	490a      	ldr	r1, [pc, #40]	@ (8003ef4 <is_valid_ip+0xcc>)
 8003eca:	2000      	movs	r0, #0
 8003ecc:	f00f f9ec 	bl	80132a8 <strtok>
 8003ed0:	6238      	str	r0, [r7, #32]
        dots++;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (ptr != NULL) {
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1c0      	bne.n	8003e60 <is_valid_ip+0x38>
    }

    return (dots == 4);
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3728      	adds	r7, #40	@ 0x28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	080146bc 	.word	0x080146bc
 8003ef8:	08015f11 	.word	0x08015f11

08003efc <ESP01_Check_Credentials>:

static uint8_t ESP01_Check_Credentials(const char* ssid, const char* password, const char* ip) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
    // Validar SSID
    if (ssid == NULL) return 0;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <ESP01_Check_Credentials+0x16>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e02b      	b.n	8003f6a <ESP01_Check_Credentials+0x6e>
    size_t ssid_len = strlen(ssid);
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7fc f964 	bl	80001e0 <strlen>
 8003f18:	6178      	str	r0, [r7, #20]
    if (ssid_len < 1 || ssid_len > 32) return 0;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <ESP01_Check_Credentials+0x2a>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	d901      	bls.n	8003f2a <ESP01_Check_Credentials+0x2e>
 8003f26:	2300      	movs	r3, #0
 8003f28:	e01f      	b.n	8003f6a <ESP01_Check_Credentials+0x6e>

    // Validar contraseña (WPA-PSK requiere entre 8 y 63 caracteres)
    if (password == NULL) return 0;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <ESP01_Check_Credentials+0x38>
 8003f30:	2300      	movs	r3, #0
 8003f32:	e01a      	b.n	8003f6a <ESP01_Check_Credentials+0x6e>
    size_t pass_len = strlen(password);
 8003f34:	68b8      	ldr	r0, [r7, #8]
 8003f36:	f7fc f953 	bl	80001e0 <strlen>
 8003f3a:	6138      	str	r0, [r7, #16]
    if (pass_len != 0 && (pass_len < 8 || pass_len > 63)) return 0;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <ESP01_Check_Credentials+0x56>
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b07      	cmp	r3, #7
 8003f46:	d902      	bls.n	8003f4e <ESP01_Check_Credentials+0x52>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f4c:	d901      	bls.n	8003f52 <ESP01_Check_Credentials+0x56>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e00b      	b.n	8003f6a <ESP01_Check_Credentials+0x6e>

    // Validar IP
    if (ip == NULL || !is_valid_ip(ip)) return 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <ESP01_Check_Credentials+0x68>
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff65 	bl	8003e28 <is_valid_ip>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <ESP01_Check_Credentials+0x6c>
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <ESP01_Check_Credentials+0x6e>

    return 1;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	0000      	movs	r0, r0
 8003f74:	0000      	movs	r0, r0
	...

08003f78 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af02      	add	r7, sp, #8
	if(Display.isInit){
 8003f7e:	4bb2      	ldr	r3, [pc, #712]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8155 	beq.w	8004232 <OLED_Print_Data_Task+0x2ba>
		switch(Display.state){
 8003f88:	4baf      	ldr	r3, [pc, #700]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8003f8a:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d023      	beq.n	8003fda <OLED_Print_Data_Task+0x62>
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	f300 814d 	bgt.w	8004232 <OLED_Print_Data_Task+0x2ba>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <OLED_Print_Data_Task+0x28>
 8003f9c:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8003f9e:	e148      	b.n	8004232 <OLED_Print_Data_Task+0x2ba>
			if(HAL_GetTick() - Display.timer > 2000){
 8003fa0:	f002 f892 	bl	80060c8 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4ba8      	ldr	r3, [pc, #672]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8003fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003fb2:	f240 813b 	bls.w	800422c <OLED_Print_Data_Task+0x2b4>
				Display_Fill(SSD1306_COLOR_BLACK);
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f7fd fd1e 	bl	80019f8 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2340      	movs	r3, #64	@ 0x40
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	4aa1      	ldr	r2, [pc, #644]	@ (800424c <OLED_Print_Data_Task+0x2d4>)
 8003fc8:	2100      	movs	r1, #0
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7fd fd98 	bl	8001b00 <Display_DrawBitmap>
				Display.state = INPUTS;
 8003fd0:	4b9d      	ldr	r3, [pc, #628]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8003fd8:	e128      	b.n	800422c <OLED_Print_Data_Task+0x2b4>
		case INPUTS:
			BateryLevel_Set();
 8003fda:	f000 f955 	bl	8004288 <BateryLevel_Set>

			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	232c      	movs	r3, #44	@ 0x2c
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2325      	movs	r3, #37	@ 0x25
 8003fe8:	4a99      	ldr	r2, [pc, #612]	@ (8004250 <OLED_Print_Data_Task+0x2d8>)
 8003fea:	2111      	movs	r1, #17
 8003fec:	2002      	movs	r0, #2
 8003fee:	f7fd fd87 	bl	8001b00 <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	71fb      	strb	r3, [r7, #7]
 8003ff6:	e049      	b.n	800408c <OLED_Print_Data_Task+0x114>
				Display.auxYPos += 5000;
				Display.auxYPos /= 10000;
				Display.auxXPos = 2 + i * 3;
				Display_DrawLine(Display.auxXPos, 61,  Display.auxXPos, Display.auxYPos, SSD1306_COLOR_WHITE);
				Display_DrawLine(Display.auxXPos+1, 61,  Display.auxXPos+1, Display.auxYPos, SSD1306_COLOR_WHITE);*/
				for(uint8_t j = 0; j < 45; j++){
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	71bb      	strb	r3, [r7, #6]
 8003ffc:	e040      	b.n	8004080 <OLED_Print_Data_Task+0x108>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	4a94      	ldr	r2, [pc, #592]	@ (8004254 <OLED_Print_Data_Task+0x2dc>)
 8004002:	3308      	adds	r3, #8
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	885a      	ldrh	r2, [r3, #2]
 800400a:	79bb      	ldrb	r3, [r7, #6]
 800400c:	4992      	ldr	r1, [pc, #584]	@ (8004258 <OLED_Print_Data_Task+0x2e0>)
 800400e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004012:	429a      	cmp	r2, r3
 8004014:	d831      	bhi.n	800407a <OLED_Print_Data_Task+0x102>
						Display.auxXPos = 2 + i * 3;
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	461a      	mov	r2, r3
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	4413      	add	r3, r2
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3302      	adds	r3, #2
 8004022:	b2da      	uxtb	r2, r3
 8004024:	4b88      	ldr	r3, [pc, #544]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8004026:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
						Display_DrawLine(Display.auxXPos, 61,  Display.auxXPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 800402a:	4b87      	ldr	r3, [pc, #540]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 800402c:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8004030:	4618      	mov	r0, r3
 8004032:	4b85      	ldr	r3, [pc, #532]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8004034:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8004038:	4619      	mov	r1, r3
 800403a:	79bb      	ldrb	r3, [r7, #6]
 800403c:	4a87      	ldr	r2, [pc, #540]	@ (800425c <OLED_Print_Data_Task+0x2e4>)
 800403e:	5cd3      	ldrb	r3, [r2, r3]
 8004040:	461a      	mov	r2, r3
 8004042:	2301      	movs	r3, #1
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	4613      	mov	r3, r2
 8004048:	460a      	mov	r2, r1
 800404a:	213d      	movs	r1, #61	@ 0x3d
 800404c:	f7fd fe62 	bl	8001d14 <Display_DrawLine>
						Display_DrawLine(Display.auxXPos+1, 61,  Display.auxXPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8004050:	4b7d      	ldr	r3, [pc, #500]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 8004052:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8004056:	3301      	adds	r3, #1
 8004058:	b298      	uxth	r0, r3
 800405a:	4b7b      	ldr	r3, [pc, #492]	@ (8004248 <OLED_Print_Data_Task+0x2d0>)
 800405c:	f893 3414 	ldrb.w	r3, [r3, #1044]	@ 0x414
 8004060:	3301      	adds	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	79bb      	ldrb	r3, [r7, #6]
 8004066:	497d      	ldr	r1, [pc, #500]	@ (800425c <OLED_Print_Data_Task+0x2e4>)
 8004068:	5ccb      	ldrb	r3, [r1, r3]
 800406a:	4619      	mov	r1, r3
 800406c:	2301      	movs	r3, #1
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	213d      	movs	r1, #61	@ 0x3d
 8004074:	f7fd fe4e 	bl	8001d14 <Display_DrawLine>
						break;
 8004078:	e005      	b.n	8004086 <OLED_Print_Data_Task+0x10e>
				for(uint8_t j = 0; j < 45; j++){
 800407a:	79bb      	ldrb	r3, [r7, #6]
 800407c:	3301      	adds	r3, #1
 800407e:	71bb      	strb	r3, [r7, #6]
 8004080:	79bb      	ldrb	r3, [r7, #6]
 8004082:	2b2c      	cmp	r3, #44	@ 0x2c
 8004084:	d9bb      	bls.n	8003ffe <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	3301      	adds	r3, #1
 800408a:	71fb      	strb	r3, [r7, #7]
 800408c:	79fb      	ldrb	r3, [r7, #7]
 800408e:	2b07      	cmp	r3, #7
 8004090:	d9b2      	bls.n	8003ff8 <OLED_Print_Data_Task+0x80>
					}
				}
			}

			if(MPU6050.isInit){
 8004092:	4b73      	ldr	r3, [pc, #460]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004094:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80c9 	beq.w	8004230 <OLED_Print_Data_Task+0x2b8>
				MPU6050.Acc.x = (MPU6050.Acc.x / 16384.0) * 9.8f;
 800409e:	4b70      	ldr	r3, [pc, #448]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 80040a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc fa45 	bl	8000534 <__aeabi_i2d>
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004264 <OLED_Print_Data_Task+0x2ec>)
 80040b0:	f7fc fbd4 	bl	800085c <__aeabi_ddiv>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	a360      	add	r3, pc, #384	@ (adr r3, 8004240 <OLED_Print_Data_Task+0x2c8>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc faa1 	bl	8000608 <__aeabi_dmul>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	f7fc fcad 	bl	8000a2c <__aeabi_d2iz>
 80040d2:	4603      	mov	r3, r0
 80040d4:	b21a      	sxth	r2, r3
 80040d6:	4b62      	ldr	r3, [pc, #392]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 80040d8:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y / 16384.0) * 9.8f;
 80040da:	4b61      	ldr	r3, [pc, #388]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 80040dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc fa27 	bl	8000534 <__aeabi_i2d>
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	4b5e      	ldr	r3, [pc, #376]	@ (8004264 <OLED_Print_Data_Task+0x2ec>)
 80040ec:	f7fc fbb6 	bl	800085c <__aeabi_ddiv>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	a351      	add	r3, pc, #324	@ (adr r3, 8004240 <OLED_Print_Data_Task+0x2c8>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc fa83 	bl	8000608 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f7fc fc8f 	bl	8000a2c <__aeabi_d2iz>
 800410e:	4603      	mov	r3, r0
 8004110:	b21a      	sxth	r2, r3
 8004112:	4b53      	ldr	r3, [pc, #332]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004114:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z / 16384.0) * 9.8f;
 8004116:	4b52      	ldr	r3, [pc, #328]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004118:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fa09 	bl	8000534 <__aeabi_i2d>
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	4b4f      	ldr	r3, [pc, #316]	@ (8004264 <OLED_Print_Data_Task+0x2ec>)
 8004128:	f7fc fb98 	bl	800085c <__aeabi_ddiv>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	a342      	add	r3, pc, #264	@ (adr r3, 8004240 <OLED_Print_Data_Task+0x2c8>)
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	f7fc fa65 	bl	8000608 <__aeabi_dmul>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4610      	mov	r0, r2
 8004144:	4619      	mov	r1, r3
 8004146:	f7fc fc71 	bl	8000a2c <__aeabi_d2iz>
 800414a:	4603      	mov	r3, r0
 800414c:	b21a      	sxth	r2, r3
 800414e:	4b44      	ldr	r3, [pc, #272]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004150:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8004152:	4b43      	ldr	r3, [pc, #268]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004158:	461a      	mov	r2, r3
 800415a:	4943      	ldr	r1, [pc, #268]	@ (8004268 <OLED_Print_Data_Task+0x2f0>)
 800415c:	4843      	ldr	r0, [pc, #268]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 800415e:	f00f f823 	bl	80131a8 <siprintf>
				Display_SetCursor(25, 17);
 8004162:	2111      	movs	r1, #17
 8004164:	2019      	movs	r0, #25
 8004166:	f7fd fc2f 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800416a:	4a41      	ldr	r2, [pc, #260]	@ (8004270 <OLED_Print_Data_Task+0x2f8>)
 800416c:	2301      	movs	r3, #1
 800416e:	ca06      	ldmia	r2, {r1, r2}
 8004170:	483e      	ldr	r0, [pc, #248]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 8004172:	f7fd fda9 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8004176:	4b3a      	ldr	r3, [pc, #232]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800417c:	461a      	mov	r2, r3
 800417e:	493d      	ldr	r1, [pc, #244]	@ (8004274 <OLED_Print_Data_Task+0x2fc>)
 8004180:	483a      	ldr	r0, [pc, #232]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 8004182:	f00f f811 	bl	80131a8 <siprintf>
				Display_SetCursor(25, 34);
 8004186:	2122      	movs	r1, #34	@ 0x22
 8004188:	2019      	movs	r0, #25
 800418a:	f7fd fc1d 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800418e:	4a38      	ldr	r2, [pc, #224]	@ (8004270 <OLED_Print_Data_Task+0x2f8>)
 8004190:	2301      	movs	r3, #1
 8004192:	ca06      	ldmia	r2, {r1, r2}
 8004194:	4835      	ldr	r0, [pc, #212]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 8004196:	f7fd fd97 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 800419a:	4b31      	ldr	r3, [pc, #196]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 800419c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4935      	ldr	r1, [pc, #212]	@ (8004278 <OLED_Print_Data_Task+0x300>)
 80041a4:	4831      	ldr	r0, [pc, #196]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 80041a6:	f00e ffff 	bl	80131a8 <siprintf>
				Display_SetCursor(25, 51);
 80041aa:	2133      	movs	r1, #51	@ 0x33
 80041ac:	2019      	movs	r0, #25
 80041ae:	f7fd fc0b 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80041b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004270 <OLED_Print_Data_Task+0x2f8>)
 80041b4:	2301      	movs	r3, #1
 80041b6:	ca06      	ldmia	r2, {r1, r2}
 80041b8:	482c      	ldr	r0, [pc, #176]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 80041ba:	f7fd fd85 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 80041be:	4b28      	ldr	r3, [pc, #160]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 80041c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80041c4:	461a      	mov	r2, r3
 80041c6:	492d      	ldr	r1, [pc, #180]	@ (800427c <OLED_Print_Data_Task+0x304>)
 80041c8:	4828      	ldr	r0, [pc, #160]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 80041ca:	f00e ffed 	bl	80131a8 <siprintf>
				Display_SetCursor(73, 17);
 80041ce:	2111      	movs	r1, #17
 80041d0:	2049      	movs	r0, #73	@ 0x49
 80041d2:	f7fd fbf9 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80041d6:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <OLED_Print_Data_Task+0x2f8>)
 80041d8:	2301      	movs	r3, #1
 80041da:	ca06      	ldmia	r2, {r1, r2}
 80041dc:	4823      	ldr	r0, [pc, #140]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 80041de:	f7fd fd73 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 80041e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 80041e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80041e8:	461a      	mov	r2, r3
 80041ea:	4925      	ldr	r1, [pc, #148]	@ (8004280 <OLED_Print_Data_Task+0x308>)
 80041ec:	481f      	ldr	r0, [pc, #124]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 80041ee:	f00e ffdb 	bl	80131a8 <siprintf>
				Display_SetCursor(73, 34);
 80041f2:	2122      	movs	r1, #34	@ 0x22
 80041f4:	2049      	movs	r0, #73	@ 0x49
 80041f6:	f7fd fbe7 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 80041fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <OLED_Print_Data_Task+0x2f8>)
 80041fc:	2301      	movs	r3, #1
 80041fe:	ca06      	ldmia	r2, {r1, r2}
 8004200:	481a      	ldr	r0, [pc, #104]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 8004202:	f7fd fd61 	bl	8001cc8 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8004206:	4b16      	ldr	r3, [pc, #88]	@ (8004260 <OLED_Print_Data_Task+0x2e8>)
 8004208:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800420c:	461a      	mov	r2, r3
 800420e:	491d      	ldr	r1, [pc, #116]	@ (8004284 <OLED_Print_Data_Task+0x30c>)
 8004210:	4816      	ldr	r0, [pc, #88]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 8004212:	f00e ffc9 	bl	80131a8 <siprintf>
				Display_SetCursor(73, 51);
 8004216:	2133      	movs	r1, #51	@ 0x33
 8004218:	2049      	movs	r0, #73	@ 0x49
 800421a:	f7fd fbd5 	bl	80019c8 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 800421e:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <OLED_Print_Data_Task+0x2f8>)
 8004220:	2301      	movs	r3, #1
 8004222:	ca06      	ldmia	r2, {r1, r2}
 8004224:	4811      	ldr	r0, [pc, #68]	@ (800426c <OLED_Print_Data_Task+0x2f4>)
 8004226:	f7fd fd4f 	bl	8001cc8 <Display_WriteString>
			}
			break;
 800422a:	e001      	b.n	8004230 <OLED_Print_Data_Task+0x2b8>
			break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <OLED_Print_Data_Task+0x2ba>
			break;
 8004230:	bf00      	nop
		}
	}

	Display_I2C_Refresh_Ready(TRUE);
 8004232:	2001      	movs	r0, #1
 8004234:	f7fd fbb8 	bl	80019a8 <Display_I2C_Refresh_Ready>
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	a0000000 	.word	0xa0000000
 8004244:	40239999 	.word	0x40239999
 8004248:	20000fa4 	.word	0x20000fa4
 800424c:	08014d7c 	.word	0x08014d7c
 8004250:	0801517c 	.word	0x0801517c
 8004254:	200013bc 	.word	0x200013bc
 8004258:	08015288 	.word	0x08015288
 800425c:	08015258 	.word	0x08015258
 8004260:	20000ee0 	.word	0x20000ee0
 8004264:	40d00000 	.word	0x40d00000
 8004268:	080146c0 	.word	0x080146c0
 800426c:	200013ac 	.word	0x200013ac
 8004270:	20000000 	.word	0x20000000
 8004274:	080146c8 	.word	0x080146c8
 8004278:	080146d0 	.word	0x080146d0
 800427c:	080146d8 	.word	0x080146d8
 8004280:	080146e0 	.word	0x080146e0
 8004284:	080146e8 	.word	0x080146e8

08004288 <BateryLevel_Set>:

void BateryLevel_Set(){
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 800428e:	2300      	movs	r3, #0
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2309      	movs	r3, #9
 8004294:	2206      	movs	r2, #6
 8004296:	2104      	movs	r1, #4
 8004298:	2003      	movs	r0, #3
 800429a:	f7fd fde9 	bl	8001e70 <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 800429e:	4b1f      	ldr	r3, [pc, #124]	@ (800431c <BateryLevel_Set+0x94>)
 80042a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80042a2:	f640 723b 	movw	r2, #3899	@ 0xf3b
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d908      	bls.n	80042bc <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 80042aa:	2301      	movs	r3, #1
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2309      	movs	r3, #9
 80042b0:	2206      	movs	r2, #6
 80042b2:	2104      	movs	r1, #4
 80042b4:	2003      	movs	r0, #3
 80042b6:	f7fd fddb 	bl	8001e70 <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 80042ba:	e02b      	b.n	8004314 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 80042bc:	4b17      	ldr	r3, [pc, #92]	@ (800431c <BateryLevel_Set+0x94>)
 80042be:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80042c0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d908      	bls.n	80042da <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 80042c8:	2301      	movs	r3, #1
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2307      	movs	r3, #7
 80042ce:	2206      	movs	r2, #6
 80042d0:	2106      	movs	r1, #6
 80042d2:	2003      	movs	r0, #3
 80042d4:	f7fd fdcc 	bl	8001e70 <Display_DrawFilledRectangle>
}
 80042d8:	e01c      	b.n	8004314 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <BateryLevel_Set+0x94>)
 80042dc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80042de:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d908      	bls.n	80042f8 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 80042e6:	2301      	movs	r3, #1
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2305      	movs	r3, #5
 80042ec:	2206      	movs	r2, #6
 80042ee:	2108      	movs	r1, #8
 80042f0:	2003      	movs	r0, #3
 80042f2:	f7fd fdbd 	bl	8001e70 <Display_DrawFilledRectangle>
}
 80042f6:	e00d      	b.n	8004314 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <BateryLevel_Set+0x94>)
 80042fa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80042fc:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8004300:	4293      	cmp	r3, r2
 8004302:	d907      	bls.n	8004314 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 8004304:	2301      	movs	r3, #1
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	2302      	movs	r3, #2
 800430a:	2206      	movs	r2, #6
 800430c:	210b      	movs	r1, #11
 800430e:	2003      	movs	r0, #3
 8004310:	f7fd fdae 	bl	8001e70 <Display_DrawFilledRectangle>
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200013bc 	.word	0x200013bc

08004320 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	3302      	adds	r3, #2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004336:	2bf1      	cmp	r3, #241	@ 0xf1
 8004338:	f000 81c8 	beq.w	80046cc <decodeOn_USB+0x3ac>
 800433c:	2bf1      	cmp	r3, #241	@ 0xf1
 800433e:	f300 81be 	bgt.w	80046be <decodeOn_USB+0x39e>
 8004342:	2bf0      	cmp	r3, #240	@ 0xf0
 8004344:	d036      	beq.n	80043b4 <decodeOn_USB+0x94>
 8004346:	2bf0      	cmp	r3, #240	@ 0xf0
 8004348:	f300 81b9 	bgt.w	80046be <decodeOn_USB+0x39e>
 800434c:	2bb1      	cmp	r3, #177	@ 0xb1
 800434e:	dc2d      	bgt.n	80043ac <decodeOn_USB+0x8c>
 8004350:	2ba0      	cmp	r3, #160	@ 0xa0
 8004352:	f2c0 81b4 	blt.w	80046be <decodeOn_USB+0x39e>
 8004356:	3ba0      	subs	r3, #160	@ 0xa0
 8004358:	2b11      	cmp	r3, #17
 800435a:	f200 81b0 	bhi.w	80046be <decodeOn_USB+0x39e>
 800435e:	a201      	add	r2, pc, #4	@ (adr r2, 8004364 <decodeOn_USB+0x44>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	080043cf 	.word	0x080043cf
 8004368:	08004445 	.word	0x08004445
 800436c:	0800449f 	.word	0x0800449f
 8004370:	08004533 	.word	0x08004533
 8004374:	080045f9 	.word	0x080045f9
 8004378:	080046bf 	.word	0x080046bf
 800437c:	080046bf 	.word	0x080046bf
 8004380:	080046bf 	.word	0x080046bf
 8004384:	080046bf 	.word	0x080046bf
 8004388:	080046bf 	.word	0x080046bf
 800438c:	080046bf 	.word	0x080046bf
 8004390:	080046bf 	.word	0x080046bf
 8004394:	080046bf 	.word	0x080046bf
 8004398:	080046bf 	.word	0x080046bf
 800439c:	080046bf 	.word	0x080046bf
 80043a0:	080046bf 	.word	0x080046bf
 80043a4:	080046bf 	.word	0x080046bf
 80043a8:	080046d1 	.word	0x080046d1
 80043ac:	2bde      	cmp	r3, #222	@ 0xde
 80043ae:	f000 8191 	beq.w	80046d4 <decodeOn_USB+0x3b4>
 80043b2:	e184      	b.n	80046be <decodeOn_USB+0x39e>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	220d      	movs	r2, #13
 80043b8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80043c2:	2301      	movs	r3, #1
 80043c4:	21f0      	movs	r1, #240	@ 0xf0
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe f88a 	bl	80024e0 <comm_sendCMD>
		break;
 80043cc:	e183      	b.n	80046d6 <decodeOn_USB+0x3b6>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	3303      	adds	r3, #3
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d82a      	bhi.n	8004436 <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	3303      	adds	r3, #3
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80043ee:	4a78      	ldr	r2, [pc, #480]	@ (80045d0 <decodeOn_USB+0x2b0>)
 80043f0:	3308      	adds	r3, #8
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	4413      	add	r3, r2
 80043f6:	885a      	ldrh	r2, [r3, #2]
 80043f8:	4b76      	ldr	r3, [pc, #472]	@ (80045d4 <decodeOn_USB+0x2b4>)
 80043fa:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	3303      	adds	r3, #3
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8004410:	4b70      	ldr	r3, [pc, #448]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800441a:	4b6e      	ldr	r3, [pc, #440]	@ (80045d4 <decodeOn_USB+0x2b4>)
 800441c:	785a      	ldrb	r2, [r3, #1]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800442a:	2303      	movs	r3, #3
 800442c:	21a0      	movs	r1, #160	@ 0xa0
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe f856 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
		}
		break;
 8004434:	e14f      	b.n	80046d6 <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ADC", 6);
 8004436:	2306      	movs	r3, #6
 8004438:	4a67      	ldr	r2, [pc, #412]	@ (80045d8 <decodeOn_USB+0x2b8>)
 800443a:	21ef      	movs	r1, #239	@ 0xef
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fe f84f 	bl	80024e0 <comm_sendCMD>
		break;
 8004442:	e148      	b.n	80046d6 <decodeOn_USB+0x3b6>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	e01d      	b.n	8004486 <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	4a60      	ldr	r2, [pc, #384]	@ (80045d0 <decodeOn_USB+0x2b0>)
 800444e:	3308      	adds	r3, #8
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	885a      	ldrh	r2, [r3, #2]
 8004456:	4b5f      	ldr	r3, [pc, #380]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004458:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4a5d      	ldr	r2, [pc, #372]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004460:	7811      	ldrb	r1, [r2, #0]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	460a      	mov	r2, r1
 8004468:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	3301      	adds	r3, #1
 8004472:	4a58      	ldr	r2, [pc, #352]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004474:	7851      	ldrb	r1, [r2, #1]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	460a      	mov	r2, r1
 800447c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	3301      	adds	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	7bfb      	ldrb	r3, [r7, #15]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d9de      	bls.n	800444a <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, data->auxBuffer, 17);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004492:	2311      	movs	r3, #17
 8004494:	21a1      	movs	r1, #161	@ 0xa1
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fe f822 	bl	80024e0 <comm_sendCMD>
		break;
 800449c:	e11b      	b.n	80046d6 <decodeOn_USB+0x3b6>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	3303      	adds	r3, #3
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d117      	bne.n	80044e0 <decodeOn_USB+0x1c0>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	3304      	adds	r3, #4
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	4619      	mov	r1, r3
 80044c2:	4846      	ldr	r0, [pc, #280]	@ (80045dc <decodeOn_USB+0x2bc>)
 80044c4:	f7fd fdba 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80044c8:	4b45      	ldr	r3, [pc, #276]	@ (80045e0 <decodeOn_USB+0x2c0>)
 80044ca:	220d      	movs	r2, #13
 80044cc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80044d6:	2301      	movs	r3, #1
 80044d8:	21a2      	movs	r1, #162	@ 0xa2
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fe f800 	bl	80024e0 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	3303      	adds	r3, #3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d118      	bne.n	8004524 <decodeOn_USB+0x204>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	785b      	ldrb	r3, [r3, #1]
 80044f6:	3304      	adds	r3, #4
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	4413      	add	r3, r2
 80044fc:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004500:	b25b      	sxtb	r3, r3
 8004502:	4619      	mov	r1, r3
 8004504:	4837      	ldr	r0, [pc, #220]	@ (80045e4 <decodeOn_USB+0x2c4>)
 8004506:	f7fd fd99 	bl	800203c <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 800450a:	4b35      	ldr	r3, [pc, #212]	@ (80045e0 <decodeOn_USB+0x2c0>)
 800450c:	220d      	movs	r2, #13
 800450e:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(data, SETMOTOR, data->auxBuffer, 1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8004518:	2301      	movs	r3, #1
 800451a:	21a2      	movs	r1, #162	@ 0xa2
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fd ffdf 	bl	80024e0 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8004522:	e0d8      	b.n	80046d6 <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO MOTOR", 8);
 8004524:	2308      	movs	r3, #8
 8004526:	4a30      	ldr	r2, [pc, #192]	@ (80045e8 <decodeOn_USB+0x2c8>)
 8004528:	21ef      	movs	r1, #239	@ 0xef
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd ffd8 	bl	80024e0 <comm_sendCMD>
		break;
 8004530:	e0d1      	b.n	80046d6 <decodeOn_USB+0x3b6>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	3303      	adds	r3, #3
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004540:	2b00      	cmp	r3, #0
 8004542:	d11a      	bne.n	800457a <decodeOn_USB+0x25a>
			decom.ui16[0] = EncoderL.pps;
 8004544:	4b29      	ldr	r3, [pc, #164]	@ (80045ec <decodeOn_USB+0x2cc>)
 8004546:	891a      	ldrh	r2, [r3, #8]
 8004548:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <decodeOn_USB+0x2b4>)
 800454a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800455e:	4b1d      	ldr	r3, [pc, #116]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004560:	785a      	ldrb	r2, [r3, #1]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800456e:	2303      	movs	r3, #3
 8004570:	21a3      	movs	r1, #163	@ 0xa3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd ffb4 	bl	80024e0 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8004578:	e0ad      	b.n	80046d6 <decodeOn_USB+0x3b6>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	3303      	adds	r3, #3
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11a      	bne.n	80045c2 <decodeOn_USB+0x2a2>
			decom.ui16[0] = EncoderR.pps;
 800458c:	4b18      	ldr	r3, [pc, #96]	@ (80045f0 <decodeOn_USB+0x2d0>)
 800458e:	891a      	ldrh	r2, [r3, #8]
 8004590:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <decodeOn_USB+0x2b4>)
 8004592:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <decodeOn_USB+0x2b4>)
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80045a6:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <decodeOn_USB+0x2b4>)
 80045a8:	785a      	ldrb	r2, [r3, #1]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80045b6:	2303      	movs	r3, #3
 80045b8:	21a3      	movs	r1, #163	@ 0xa3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd ff90 	bl	80024e0 <comm_sendCMD>
		break;
 80045c0:	e089      	b.n	80046d6 <decodeOn_USB+0x3b6>
			comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO ENCODER", 10);
 80045c2:	230a      	movs	r3, #10
 80045c4:	4a0b      	ldr	r2, [pc, #44]	@ (80045f4 <decodeOn_USB+0x2d4>)
 80045c6:	21ef      	movs	r1, #239	@ 0xef
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fd ff89 	bl	80024e0 <comm_sendCMD>
		break;
 80045ce:	e082      	b.n	80046d6 <decodeOn_USB+0x3b6>
 80045d0:	200013bc 	.word	0x200013bc
 80045d4:	20000e90 	.word	0x20000e90
 80045d8:	080146f0 	.word	0x080146f0
 80045dc:	20000e98 	.word	0x20000e98
 80045e0:	200013e0 	.word	0x200013e0
 80045e4:	20000eb0 	.word	0x20000eb0
 80045e8:	080146f8 	.word	0x080146f8
 80045ec:	20000ec8 	.word	0x20000ec8
 80045f0:	20000ed4 	.word	0x20000ed4
 80045f4:	08014704 	.word	0x08014704
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 80045f8:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <decodeOn_USB+0x3c0>)
 80045fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80045fe:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004600:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8004602:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 800460c:	4b35      	ldr	r3, [pc, #212]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800460e:	785a      	ldrb	r2, [r3, #1]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 8004616:	4b32      	ldr	r3, [pc, #200]	@ (80046e0 <decodeOn_USB+0x3c0>)
 8004618:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800461c:	4b31      	ldr	r3, [pc, #196]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800461e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 800462a:	4b2e      	ldr	r3, [pc, #184]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800462c:	785a      	ldrb	r2, [r3, #1]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 8004634:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <decodeOn_USB+0x3c0>)
 8004636:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800463a:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800463c:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 800463e:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8004648:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800464a:	785a      	ldrb	r2, [r3, #1]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 8004652:	4b23      	ldr	r3, [pc, #140]	@ (80046e0 <decodeOn_USB+0x3c0>)
 8004654:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004658:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800465a:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 800465c:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 8004666:	4b1f      	ldr	r3, [pc, #124]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004668:	785a      	ldrb	r2, [r3, #1]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8004670:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <decodeOn_USB+0x3c0>)
 8004672:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8004676:	4b1b      	ldr	r3, [pc, #108]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004678:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 800467a:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8004684:	4b17      	ldr	r3, [pc, #92]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004686:	785a      	ldrb	r2, [r3, #1]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <decodeOn_USB+0x3c0>)
 8004690:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004694:	4b13      	ldr	r3, [pc, #76]	@ (80046e4 <decodeOn_USB+0x3c4>)
 8004696:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8004698:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <decodeOn_USB+0x3c4>)
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <decodeOn_USB+0x3c4>)
 80046a4:	785a      	ldrb	r2, [r3, #1]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80046b2:	230c      	movs	r3, #12
 80046b4:	21a4      	movs	r1, #164	@ 0xa4
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd ff12 	bl	80024e0 <comm_sendCMD>
		break;
 80046bc:	e00b      	b.n	80046d6 <decodeOn_USB+0x3b6>
	default:
		comm_sendCMD(data, SYSWARNING, (uint8_t*)"NO CMD", 6);
 80046be:	2306      	movs	r3, #6
 80046c0:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <decodeOn_USB+0x3c8>)
 80046c2:	21ef      	movs	r1, #239	@ 0xef
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fd ff0b 	bl	80024e0 <comm_sendCMD>
		break;
 80046ca:	e004      	b.n	80046d6 <decodeOn_USB+0x3b6>
		break;
 80046cc:	bf00      	nop
 80046ce:	e002      	b.n	80046d6 <decodeOn_USB+0x3b6>
		break;
 80046d0:	bf00      	nop
 80046d2:	e000      	b.n	80046d6 <decodeOn_USB+0x3b6>
		break;
 80046d4:	bf00      	nop
	}
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000ee0 	.word	0x20000ee0
 80046e4:	20000e90 	.word	0x20000e90
 80046e8:	08014710 	.word	0x08014710

080046ec <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]

}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <onESP01Debug>:

    // Cast explícito también aplicado aquí
    comm_sendCMD(&USB.data, USERTEXT, USB.data.auxBuffer, strlen((char*)USB.data.auxBuffer));
}

void onESP01Debug(const char *dbgStr) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
    comm_sendCMD(&USB.data, USERTEXT, (uint8_t *)dbgStr, strlen(dbgStr));
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fb fd67 	bl	80001e0 <strlen>
 8004712:	4603      	mov	r3, r0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	21b1      	movs	r1, #177	@ 0xb1
 800471a:	4803      	ldr	r0, [pc, #12]	@ (8004728 <onESP01Debug+0x24>)
 800471c:	f7fd fee0 	bl	80024e0 <comm_sendCMD>
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	200013e0 	.word	0x200013e0

0800472c <task_10ms>:

void task_10ms(){
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 8004730:	4a41      	ldr	r2, [pc, #260]	@ (8004838 <task_10ms+0x10c>)
 8004732:	7813      	ldrb	r3, [r2, #0]
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 800473a:	4b40      	ldr	r3, [pc, #256]	@ (800483c <task_10ms+0x110>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	b2da      	uxtb	r2, r3
 8004742:	4b3e      	ldr	r3, [pc, #248]	@ (800483c <task_10ms+0x110>)
 8004744:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 8004746:	4b3d      	ldr	r3, [pc, #244]	@ (800483c <task_10ms+0x110>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d14d      	bne.n	80047ea <task_10ms+0xbe>
		is100ms1 = 10;
 800474e:	4b3b      	ldr	r3, [pc, #236]	@ (800483c <task_10ms+0x110>)
 8004750:	220a      	movs	r2, #10
 8004752:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004758:	4839      	ldr	r0, [pc, #228]	@ (8004840 <task_10ms+0x114>)
 800475a:	f003 f8e4 	bl	8007926 <HAL_GPIO_TogglePin>
		is1s--;
 800475e:	4b39      	ldr	r3, [pc, #228]	@ (8004844 <task_10ms+0x118>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	3b01      	subs	r3, #1
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <task_10ms+0x118>)
 8004768:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 800476a:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <task_10ms+0x118>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d13b      	bne.n	80047ea <task_10ms+0xbe>
			is1s = 10;
 8004772:	4b34      	ldr	r3, [pc, #208]	@ (8004844 <task_10ms+0x118>)
 8004774:	220a      	movs	r2, #10
 8004776:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 8004778:	4833      	ldr	r0, [pc, #204]	@ (8004848 <task_10ms+0x11c>)
 800477a:	f7fd fc25 	bl	8001fc8 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 800477e:	4833      	ldr	r0, [pc, #204]	@ (800484c <task_10ms+0x120>)
 8004780:	f7fd fc22 	bl	8001fc8 <Encoder_1s_Elapsed>

			/* ESTABILIZACIÓN DE PWM */
			Motor_Set_MaxValue(&MotorR, (3026/Analog.value[9]));//<! Usamos esto para independizar la salida PWM de la carga de las baterias
 8004784:	4b32      	ldr	r3, [pc, #200]	@ (8004850 <task_10ms+0x124>)
 8004786:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004788:	461a      	mov	r2, r3
 800478a:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 800478e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004792:	4619      	mov	r1, r3
 8004794:	482f      	ldr	r0, [pc, #188]	@ (8004854 <task_10ms+0x128>)
 8004796:	f7fd fd03 	bl	80021a0 <Motor_Set_MaxValue>
			Motor_Set_MaxValue(&MotorL, (3026/Analog.value[9]));
 800479a:	4b2d      	ldr	r3, [pc, #180]	@ (8004850 <task_10ms+0x124>)
 800479c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800479e:	461a      	mov	r2, r3
 80047a0:	f640 33d2 	movw	r3, #3026	@ 0xbd2
 80047a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	482b      	ldr	r0, [pc, #172]	@ (8004858 <task_10ms+0x12c>)
 80047ac:	f7fd fcf8 	bl	80021a0 <Motor_Set_MaxValue>
			/* END ESTABILIZACIÓN DE PWM */

			is20s--;
 80047b0:	4b2a      	ldr	r3, [pc, #168]	@ (800485c <task_10ms+0x130>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	4b28      	ldr	r3, [pc, #160]	@ (800485c <task_10ms+0x130>)
 80047ba:	701a      	strb	r2, [r3, #0]
			if(!is20s){
 80047bc:	4b27      	ldr	r3, [pc, #156]	@ (800485c <task_10ms+0x130>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d112      	bne.n	80047ea <task_10ms+0xbe>
				is20s = 10;
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <task_10ms+0x130>)
 80047c6:	220a      	movs	r2, #10
 80047c8:	701a      	strb	r2, [r3, #0]
				if(ESP01_StateWIFI() == ESP01_WIFI_CONNECTED && ESP01_GETMODE() == CONNECTWIFI)
 80047ca:	f7fd ffe7 	bl	800279c <ESP01_StateWIFI>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d10a      	bne.n	80047ea <task_10ms+0xbe>
 80047d4:	f7fe fe78 	bl	80034c8 <ESP01_GETMODE>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <task_10ms+0xbe>
					comm_sendCMD(&ESP.data, GETALIVE, NULL, 0);
 80047de:	2300      	movs	r3, #0
 80047e0:	2200      	movs	r2, #0
 80047e2:	21f0      	movs	r1, #240	@ 0xf0
 80047e4:	481e      	ldr	r0, [pc, #120]	@ (8004860 <task_10ms+0x134>)
 80047e6:	f7fd fe7b 	bl	80024e0 <comm_sendCMD>
			}
		}
	}

	Display.refreshCounter_10ms--;
 80047ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004864 <task_10ms+0x138>)
 80047ec:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <task_10ms+0x138>)
 80047f6:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter_10ms){ 							//Tasa de refresco variable
 80047fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004864 <task_10ms+0x138>)
 80047fc:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <task_10ms+0xe8>
		Display.refreshCounter_10ms = Display.refreshRate_10ms;
 8004804:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <task_10ms+0x138>)
 8004806:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 800480a:	4b16      	ldr	r3, [pc, #88]	@ (8004864 <task_10ms+0x138>)
 800480c:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8004810:	f7ff fbb2 	bl	8003f78 <OLED_Print_Data_Task>
	}

	ESP01_Timeout10ms();
 8004814:	f7fe f8e8 	bl	80029e8 <ESP01_Timeout10ms>

	Debouncer_Task();
 8004818:	f7fc fbf6 	bl	8001008 <Debouncer_Task>

	Motor_Break_Timeout(&MotorL);
 800481c:	480e      	ldr	r0, [pc, #56]	@ (8004858 <task_10ms+0x12c>)
 800481e:	f7fd fca3 	bl	8002168 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 8004822:	480c      	ldr	r0, [pc, #48]	@ (8004854 <task_10ms+0x128>)
 8004824:	f7fd fca0 	bl	8002168 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8004828:	4807      	ldr	r0, [pc, #28]	@ (8004848 <task_10ms+0x11c>)
 800482a:	f7fd fb8d 	bl	8001f48 <Encoder_Task>
	Encoder_Task(&EncoderR);
 800482e:	4807      	ldr	r0, [pc, #28]	@ (800484c <task_10ms+0x120>)
 8004830:	f7fd fb8a 	bl	8001f48 <Encoder_Task>
}
 8004834:	bf00      	nop
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000e8c 	.word	0x20000e8c
 800483c:	2000000c 	.word	0x2000000c
 8004840:	40020800 	.word	0x40020800
 8004844:	2000000d 	.word	0x2000000d
 8004848:	20000ec8 	.word	0x20000ec8
 800484c:	20000ed4 	.word	0x20000ed4
 8004850:	200013bc 	.word	0x200013bc
 8004854:	20000eb0 	.word	0x20000eb0
 8004858:	20000e98 	.word	0x20000e98
 800485c:	2000000f 	.word	0x2000000f
 8004860:	2000162c 	.word	0x2000162c
 8004864:	20000fa4 	.word	0x20000fa4

08004868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800486c:	f001 fbc6 	bl	8005ffc <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8004870:	4b3b      	ldr	r3, [pc, #236]	@ (8004960 <main+0xf8>)
 8004872:	2200      	movs	r2, #0
 8004874:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
  Display.isInit = FALSE;
 8004878:	4b3a      	ldr	r3, [pc, #232]	@ (8004964 <main+0xfc>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800487e:	4b39      	ldr	r3, [pc, #228]	@ (8004964 <main+0xfc>)
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004886:	f000 f895 	bl	80049b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800488a:	f000 fb27 	bl	8004edc <MX_GPIO_Init>
  MX_DMA_Init();
 800488e:	f000 fae7 	bl	8004e60 <MX_DMA_Init>
  MX_ADC1_Init();
 8004892:	f000 f8f9 	bl	8004a88 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8004896:	f00d fd69 	bl	801236c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800489a:	f000 f9e5 	bl	8004c68 <MX_TIM1_Init>
  MX_I2C1_Init();
 800489e:	f000 f9b5 	bl	8004c0c <MX_I2C1_Init>
  MX_TIM3_Init();
 80048a2:	f000 fa31 	bl	8004d08 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80048a6:	f000 fab1 	bl	8004e0c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80048aa:	4a2f      	ldr	r2, [pc, #188]	@ (8004968 <main+0x100>)
 80048ac:	492f      	ldr	r1, [pc, #188]	@ (800496c <main+0x104>)
 80048ae:	4830      	ldr	r0, [pc, #192]	@ (8004970 <main+0x108>)
 80048b0:	f7fd fc8a 	bl	80021c8 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80048b4:	482f      	ldr	r0, [pc, #188]	@ (8004974 <main+0x10c>)
 80048b6:	f00d feab 	bl	8012610 <CDC_Attach_Rx>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80048ba:	f7fc fb3d 	bl	8000f38 <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80048be:	492e      	ldr	r1, [pc, #184]	@ (8004978 <main+0x110>)
 80048c0:	482e      	ldr	r0, [pc, #184]	@ (800497c <main+0x114>)
 80048c2:	f7fc fb6d 	bl	8000fa0 <Debounce_Add>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004980 <main+0x118>)
 80048cc:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  /* INICIALIZACIÓN DE MPU6050 */
  Init_MPU6050();
 80048ce:	f000 fc25 	bl	800511c <Init_MPU6050>
  /* FIN INICIALIZACIÓN DE MPU6050 */

  /* INICIALIZACIÓN DISPLAY*/
  Init_Display();
 80048d2:	f000 fc5b 	bl	800518c <Init_Display>
  /* FIN INICIALIZACIÓN DISPLAY */

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80048d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004984 <main+0x11c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	b29b      	uxth	r3, r3
 80048de:	4a2a      	ldr	r2, [pc, #168]	@ (8004988 <main+0x120>)
 80048e0:	492a      	ldr	r1, [pc, #168]	@ (800498c <main+0x124>)
 80048e2:	482b      	ldr	r0, [pc, #172]	@ (8004990 <main+0x128>)
 80048e4:	f7fd fb82 	bl	8001fec <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 80048e8:	4b26      	ldr	r3, [pc, #152]	@ (8004984 <main+0x11c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4a28      	ldr	r2, [pc, #160]	@ (8004994 <main+0x12c>)
 80048f2:	4929      	ldr	r1, [pc, #164]	@ (8004998 <main+0x130>)
 80048f4:	4829      	ldr	r0, [pc, #164]	@ (800499c <main+0x134>)
 80048f6:	f7fd fb79 	bl	8001fec <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 80048fa:	210a      	movs	r1, #10
 80048fc:	4828      	ldr	r0, [pc, #160]	@ (80049a0 <main+0x138>)
 80048fe:	f7fd fb04 	bl	8001f0a <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8004902:	210a      	movs	r1, #10
 8004904:	4827      	ldr	r0, [pc, #156]	@ (80049a4 <main+0x13c>)
 8004906:	f7fd fb00 	bl	8001f0a <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  /* ESP01 INITIALIZATION */
  Init_WiFi();
 800490a:	f000 fc91 	bl	8005230 <Init_WiFi>
  /* END ESP01 INITIALIZATION */
  Car.state = IDLE;
 800490e:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <main+0x140>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]

  Init_Timing();
 8004914:	f000 fbbe 	bl	8005094 <Init_Timing>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 8004918:	4815      	ldr	r0, [pc, #84]	@ (8004970 <main+0x108>)
 800491a:	f7fd fc89 	bl	8002230 <Comm_Task>
	Comm_Task(&ESP.data);
 800491e:	4823      	ldr	r0, [pc, #140]	@ (80049ac <main+0x144>)
 8004920:	f7fd fc86 	bl	8002230 <Comm_Task>
	Display_UpdateScreen_Task();
 8004924:	f7fc ffc8 	bl	80018b8 <Display_UpdateScreen_Task>
	MPU6050_MAF(&MPU6050);
 8004928:	480d      	ldr	r0, [pc, #52]	@ (8004960 <main+0xf8>)
 800492a:	f7fc fd75 	bl	8001418 <MPU6050_MAF>
	ESP01_Task();
 800492e:	f7fe f88d 	bl	8002a4c <ESP01_Task>
	/* END USER TASK */

	if(IS10MS){
 8004932:	4b1f      	ldr	r3, [pc, #124]	@ (80049b0 <main+0x148>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <main+0xdc>
		task_10ms();
 8004940:	f7ff fef4 	bl	800472c <task_10ms>
	}

	switch(Car.state){
 8004944:	4b18      	ldr	r3, [pc, #96]	@ (80049a8 <main+0x140>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d005      	beq.n	8004958 <main+0xf0>
 800494c:	2b02      	cmp	r3, #2
 800494e:	dce3      	bgt.n	8004918 <main+0xb0>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <main+0xf4>
 8004954:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 8004956:	e002      	b.n	800495e <main+0xf6>
	case GO_FROM_TO:

		break;
 8004958:	bf00      	nop
 800495a:	e7dd      	b.n	8004918 <main+0xb0>
		break;
 800495c:	bf00      	nop
	Comm_Task(&USB.data);
 800495e:	e7db      	b.n	8004918 <main+0xb0>
 8004960:	20000ee0 	.word	0x20000ee0
 8004964:	20000fa4 	.word	0x20000fa4
 8004968:	08005659 	.word	0x08005659
 800496c:	08004321 	.word	0x08004321
 8004970:	200013e0 	.word	0x200013e0
 8004974:	080056cd 	.word	0x080056cd
 8004978:	080046ed 	.word	0x080046ed
 800497c:	08005641 	.word	0x08005641
 8004980:	20000e94 	.word	0x20000e94
 8004984:	20000dfc 	.word	0x20000dfc
 8004988:	08005725 	.word	0x08005725
 800498c:	08005799 	.word	0x08005799
 8004990:	20000e98 	.word	0x20000e98
 8004994:	0800575d 	.word	0x0800575d
 8004998:	080057bd 	.word	0x080057bd
 800499c:	20000eb0 	.word	0x20000eb0
 80049a0:	20000ec8 	.word	0x20000ec8
 80049a4:	20000ed4 	.word	0x20000ed4
 80049a8:	20001860 	.word	0x20001860
 80049ac:	2000162c 	.word	0x2000162c
 80049b0:	20000e8c 	.word	0x20000e8c

080049b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b094      	sub	sp, #80	@ 0x50
 80049b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049ba:	f107 0320 	add.w	r3, r7, #32
 80049be:	2230      	movs	r2, #48	@ 0x30
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f00e fc55 	bl	8013272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049c8:	f107 030c 	add.w	r3, r7, #12
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	4b28      	ldr	r3, [pc, #160]	@ (8004a80 <SystemClock_Config+0xcc>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <SystemClock_Config+0xcc>)
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80049e8:	4b25      	ldr	r3, [pc, #148]	@ (8004a80 <SystemClock_Config+0xcc>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f4:	2300      	movs	r3, #0
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	4b22      	ldr	r3, [pc, #136]	@ (8004a84 <SystemClock_Config+0xd0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a21      	ldr	r2, [pc, #132]	@ (8004a84 <SystemClock_Config+0xd0>)
 80049fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b1f      	ldr	r3, [pc, #124]	@ (8004a84 <SystemClock_Config+0xd0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004a24:	2319      	movs	r3, #25
 8004a26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004a28:	23c0      	movs	r3, #192	@ 0xc0
 8004a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004a30:	2304      	movs	r3, #4
 8004a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a34:	f107 0320 	add.w	r3, r7, #32
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f007 fdd3 	bl	800c5e4 <HAL_RCC_OscConfig>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004a44:	f000 fecc 	bl	80057e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a48:	230f      	movs	r3, #15
 8004a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	2103      	movs	r1, #3
 8004a64:	4618      	mov	r0, r3
 8004a66:	f008 f835 	bl	800cad4 <HAL_RCC_ClockConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004a70:	f000 feb6 	bl	80057e0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004a74:	f008 f914 	bl	800cca0 <HAL_RCC_EnableCSS>
}
 8004a78:	bf00      	nop
 8004a7a:	3750      	adds	r7, #80	@ 0x50
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000

08004a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004a8e:	463b      	mov	r3, r7
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004a9a:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004a9c:	4a59      	ldr	r2, [pc, #356]	@ (8004c04 <MX_ADC1_Init+0x17c>)
 8004a9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004aa0:	4b57      	ldr	r3, [pc, #348]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004aa2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004aa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004aa8:	4b55      	ldr	r3, [pc, #340]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004aae:	4b54      	ldr	r3, [pc, #336]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004ab4:	4b52      	ldr	r3, [pc, #328]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004aba:	4b51      	ldr	r3, [pc, #324]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004aca:	4a4f      	ldr	r2, [pc, #316]	@ (8004c08 <MX_ADC1_Init+0x180>)
 8004acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ace:	4b4c      	ldr	r3, [pc, #304]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004ad6:	2209      	movs	r2, #9
 8004ad8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004ada:	4b49      	ldr	r3, [pc, #292]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ae2:	4b47      	ldr	r3, [pc, #284]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ae8:	4845      	ldr	r0, [pc, #276]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004aea:	f001 fb1d 	bl	8006128 <HAL_ADC_Init>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004af4:	f000 fe74 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004afc:	2301      	movs	r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004b00:	2303      	movs	r3, #3
 8004b02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b04:	463b      	mov	r3, r7
 8004b06:	4619      	mov	r1, r3
 8004b08:	483d      	ldr	r0, [pc, #244]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004b0a:	f001 fd6f 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004b14:	f000 fe64 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b20:	463b      	mov	r3, r7
 8004b22:	4619      	mov	r1, r3
 8004b24:	4836      	ldr	r0, [pc, #216]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004b26:	f001 fd61 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004b30:	f000 fe56 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004b34:	2303      	movs	r3, #3
 8004b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4619      	mov	r1, r3
 8004b40:	482f      	ldr	r0, [pc, #188]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004b42:	f001 fd53 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8004b4c:	f000 fe48 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004b50:	2304      	movs	r3, #4
 8004b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004b54:	2304      	movs	r3, #4
 8004b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b58:	463b      	mov	r3, r7
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4828      	ldr	r0, [pc, #160]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004b5e:	f001 fd45 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8004b68:	f000 fe3a 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004b6c:	2305      	movs	r3, #5
 8004b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004b70:	2305      	movs	r3, #5
 8004b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b74:	463b      	mov	r3, r7
 8004b76:	4619      	mov	r1, r3
 8004b78:	4821      	ldr	r0, [pc, #132]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004b7a:	f001 fd37 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8004b84:	f000 fe2c 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004b88:	2306      	movs	r3, #6
 8004b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004b8c:	2306      	movs	r3, #6
 8004b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b90:	463b      	mov	r3, r7
 8004b92:	4619      	mov	r1, r3
 8004b94:	481a      	ldr	r0, [pc, #104]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004b96:	f001 fd29 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8004ba0:	f000 fe1e 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004ba8:	2307      	movs	r3, #7
 8004baa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bac:	463b      	mov	r3, r7
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4813      	ldr	r0, [pc, #76]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004bb2:	f001 fd1b 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8004bbc:	f000 fe10 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bc8:	463b      	mov	r3, r7
 8004bca:	4619      	mov	r1, r3
 8004bcc:	480c      	ldr	r0, [pc, #48]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004bce:	f001 fd0d 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8004bd8:	f000 fe02 	bl	80057e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004bdc:	2309      	movs	r3, #9
 8004bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004be0:	2309      	movs	r3, #9
 8004be2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004be4:	463b      	mov	r3, r7
 8004be6:	4619      	mov	r1, r3
 8004be8:	4805      	ldr	r0, [pc, #20]	@ (8004c00 <MX_ADC1_Init+0x178>)
 8004bea:	f001 fcff 	bl	80065ec <HAL_ADC_ConfigChannel>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8004bf4:	f000 fdf4 	bl	80057e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000bf8 	.word	0x20000bf8
 8004c04:	40012000 	.word	0x40012000
 8004c08:	0f000001 	.word	0x0f000001

08004c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c10:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c12:	4a13      	ldr	r2, [pc, #76]	@ (8004c60 <MX_I2C1_Init+0x54>)
 8004c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004c16:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c18:	4a12      	ldr	r2, [pc, #72]	@ (8004c64 <MX_I2C1_Init+0x58>)
 8004c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004c22:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c28:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c30:	4b0a      	ldr	r3, [pc, #40]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004c36:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c48:	4804      	ldr	r0, [pc, #16]	@ (8004c5c <MX_I2C1_Init+0x50>)
 8004c4a:	f002 fe9f 	bl	800798c <HAL_I2C_Init>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c54:	f000 fdc4 	bl	80057e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c58:	bf00      	nop
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000ca0 	.word	0x20000ca0
 8004c60:	40005400 	.word	0x40005400
 8004c64:	00061a80 	.word	0x00061a80

08004c68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c6e:	f107 0308 	add.w	r3, r7, #8
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c7c:	463b      	mov	r3, r7
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c84:	4b1e      	ldr	r3, [pc, #120]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004c86:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <MX_TIM1_Init+0x9c>)
 8004c88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c90:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8004c96:	4b1a      	ldr	r3, [pc, #104]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004c98:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8004c9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9e:	4b18      	ldr	r3, [pc, #96]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ca4:	4b16      	ldr	r3, [pc, #88]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004cb0:	4813      	ldr	r0, [pc, #76]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004cb2:	f008 f916 	bl	800cee2 <HAL_TIM_Base_Init>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004cbc:	f000 fd90 	bl	80057e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	4619      	mov	r1, r3
 8004ccc:	480c      	ldr	r0, [pc, #48]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004cce:	f008 fc75 	bl	800d5bc <HAL_TIM_ConfigClockSource>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004cd8:	f000 fd82 	bl	80057e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4805      	ldr	r0, [pc, #20]	@ (8004d00 <MX_TIM1_Init+0x98>)
 8004cea:	f009 f82f 	bl	800dd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004cf4:	f000 fd74 	bl	80057e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000db4 	.word	0x20000db4
 8004d04:	40010000 	.word	0x40010000

08004d08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08e      	sub	sp, #56	@ 0x38
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d1c:	f107 0320 	add.w	r3, r7, #32
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	611a      	str	r2, [r3, #16]
 8004d34:	615a      	str	r2, [r3, #20]
 8004d36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d38:	4b32      	ldr	r3, [pc, #200]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d3a:	4a33      	ldr	r2, [pc, #204]	@ (8004e08 <MX_TIM3_Init+0x100>)
 8004d3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8004d3e:	4b31      	ldr	r3, [pc, #196]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d40:	220f      	movs	r2, #15
 8004d42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d44:	4b2f      	ldr	r3, [pc, #188]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d4c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8004d50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d52:	4b2c      	ldr	r3, [pc, #176]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d58:	4b2a      	ldr	r3, [pc, #168]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d5e:	4829      	ldr	r0, [pc, #164]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d60:	f008 f8bf 	bl	800cee2 <HAL_TIM_Base_Init>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004d6a:	f000 fd39 	bl	80057e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4822      	ldr	r0, [pc, #136]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d7c:	f008 fc1e 	bl	800d5bc <HAL_TIM_ConfigClockSource>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004d86:	f000 fd2b 	bl	80057e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d8a:	481e      	ldr	r0, [pc, #120]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004d8c:	f008 f95a 	bl	800d044 <HAL_TIM_PWM_Init>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004d96:	f000 fd23 	bl	80057e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004da2:	f107 0320 	add.w	r3, r7, #32
 8004da6:	4619      	mov	r1, r3
 8004da8:	4816      	ldr	r0, [pc, #88]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004daa:	f008 ffcf 	bl	800dd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004db4:	f000 fd14 	bl	80057e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004db8:	2360      	movs	r3, #96	@ 0x60
 8004dba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4619      	mov	r1, r3
 8004dce:	480d      	ldr	r0, [pc, #52]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004dd0:	f008 fb32 	bl	800d438 <HAL_TIM_PWM_ConfigChannel>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004dda:	f000 fd01 	bl	80057e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	2204      	movs	r2, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4807      	ldr	r0, [pc, #28]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004de6:	f008 fb27 	bl	800d438 <HAL_TIM_PWM_ConfigChannel>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004df0:	f000 fcf6 	bl	80057e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004df4:	4803      	ldr	r0, [pc, #12]	@ (8004e04 <MX_TIM3_Init+0xfc>)
 8004df6:	f000 fec7 	bl	8005b88 <HAL_TIM_MspPostInit>

}
 8004dfa:	bf00      	nop
 8004dfc:	3738      	adds	r7, #56	@ 0x38
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000dfc 	.word	0x20000dfc
 8004e08:	40000400 	.word	0x40000400

08004e0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e10:	4b11      	ldr	r3, [pc, #68]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e12:	4a12      	ldr	r2, [pc, #72]	@ (8004e5c <MX_USART1_UART_Init+0x50>)
 8004e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e24:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e30:	4b09      	ldr	r3, [pc, #36]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e32:	220c      	movs	r2, #12
 8004e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e36:	4b08      	ldr	r3, [pc, #32]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e42:	4805      	ldr	r0, [pc, #20]	@ (8004e58 <MX_USART1_UART_Init+0x4c>)
 8004e44:	f009 f804 	bl	800de50 <HAL_UART_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e4e:	f000 fcc7 	bl	80057e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000e44 	.word	0x20000e44
 8004e5c:	40011000 	.word	0x40011000

08004e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <MX_DMA_Init+0x78>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <MX_DMA_Init+0x78>)
 8004e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e76:	4b18      	ldr	r3, [pc, #96]	@ (8004ed8 <MX_DMA_Init+0x78>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7e:	607b      	str	r3, [r7, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	603b      	str	r3, [r7, #0]
 8004e86:	4b14      	ldr	r3, [pc, #80]	@ (8004ed8 <MX_DMA_Init+0x78>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8a:	4a13      	ldr	r2, [pc, #76]	@ (8004ed8 <MX_DMA_Init+0x78>)
 8004e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e92:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <MX_DMA_Init+0x78>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	200b      	movs	r0, #11
 8004ea4:	f001 ff37 	bl	8006d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004ea8:	200b      	movs	r0, #11
 8004eaa:	f001 ff50 	bl	8006d4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	200c      	movs	r0, #12
 8004eb4:	f001 ff2f 	bl	8006d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004eb8:	200c      	movs	r0, #12
 8004eba:	f001 ff48 	bl	8006d4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2038      	movs	r0, #56	@ 0x38
 8004ec4:	f001 ff27 	bl	8006d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004ec8:	2038      	movs	r0, #56	@ 0x38
 8004eca:	f001 ff40 	bl	8006d4e <HAL_NVIC_EnableIRQ>

}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	@ 0x28
 8004ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	609a      	str	r2, [r3, #8]
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	4b63      	ldr	r3, [pc, #396]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	4a62      	ldr	r2, [pc, #392]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004efc:	f043 0304 	orr.w	r3, r3, #4
 8004f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f02:	4b60      	ldr	r3, [pc, #384]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	4b5c      	ldr	r3, [pc, #368]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	4a5b      	ldr	r2, [pc, #364]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f1e:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	4b55      	ldr	r3, [pc, #340]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	4a54      	ldr	r2, [pc, #336]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f3a:	4b52      	ldr	r3, [pc, #328]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	607b      	str	r3, [r7, #4]
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	4a4d      	ldr	r2, [pc, #308]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f56:	4b4b      	ldr	r3, [pc, #300]	@ (8005084 <MX_GPIO_Init+0x1a8>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8004f62:	2200      	movs	r2, #0
 8004f64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f68:	4847      	ldr	r0, [pc, #284]	@ (8005088 <MX_GPIO_Init+0x1ac>)
 8004f6a:	f002 fcc3 	bl	80078f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, GPIO_PIN_SET);
 8004f6e:	2201      	movs	r2, #1
 8004f70:	2104      	movs	r1, #4
 8004f72:	4846      	ldr	r0, [pc, #280]	@ (800508c <MX_GPIO_Init+0x1b0>)
 8004f74:	f002 fcbe 	bl	80078f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedStatus_2_Pin|M2_IN2_Pin, GPIO_PIN_RESET);
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8004f7e:	4843      	ldr	r0, [pc, #268]	@ (800508c <MX_GPIO_Init+0x1b0>)
 8004f80:	f002 fcb8 	bl	80078f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8004f84:	2200      	movs	r2, #0
 8004f86:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8004f8a:	4841      	ldr	r0, [pc, #260]	@ (8005090 <MX_GPIO_Init+0x1b4>)
 8004f8c:	f002 fcb2 	bl	80078f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8004f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4837      	ldr	r0, [pc, #220]	@ (8005088 <MX_GPIO_Init+0x1ac>)
 8004faa:	f002 fb07 	bl	80075bc <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4833      	ldr	r0, [pc, #204]	@ (8005090 <MX_GPIO_Init+0x1b4>)
 8004fc2:	f002 fafb 	bl	80075bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_EN_Pin LedStatus_2_Pin M2_IN2_Pin */
  GPIO_InitStruct.Pin = ESP_EN_Pin|LedStatus_2_Pin|M2_IN2_Pin;
 8004fc6:	f240 430c 	movw	r3, #1036	@ 0x40c
 8004fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	4619      	mov	r1, r3
 8004fde:	482b      	ldr	r0, [pc, #172]	@ (800508c <MX_GPIO_Init+0x1b0>)
 8004fe0:	f002 faec 	bl	80075bc <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8004fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4824      	ldr	r0, [pc, #144]	@ (800508c <MX_GPIO_Init+0x1b0>)
 8004ffc:	f002 fade 	bl	80075bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005000:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005006:	2302      	movs	r3, #2
 8005008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500e:	2303      	movs	r3, #3
 8005010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005012:	2305      	movs	r3, #5
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	4619      	mov	r1, r3
 800501c:	481b      	ldr	r0, [pc, #108]	@ (800508c <MX_GPIO_Init+0x1b0>)
 800501e:	f002 facd 	bl	80075bc <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8005022:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005028:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800502c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8005032:	f107 0314 	add.w	r3, r7, #20
 8005036:	4619      	mov	r1, r3
 8005038:	4815      	ldr	r0, [pc, #84]	@ (8005090 <MX_GPIO_Init+0x1b4>)
 800503a:	f002 fabf 	bl	80075bc <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 800503e:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8005042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005044:	2301      	movs	r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504c:	2300      	movs	r3, #0
 800504e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4619      	mov	r1, r3
 8005056:	480e      	ldr	r0, [pc, #56]	@ (8005090 <MX_GPIO_Init+0x1b4>)
 8005058:	f002 fab0 	bl	80075bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800505c:	2200      	movs	r2, #0
 800505e:	2100      	movs	r1, #0
 8005060:	2017      	movs	r0, #23
 8005062:	f001 fe58 	bl	8006d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005066:	2017      	movs	r0, #23
 8005068:	f001 fe71 	bl	8006d4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800506c:	2200      	movs	r2, #0
 800506e:	2100      	movs	r1, #0
 8005070:	2028      	movs	r0, #40	@ 0x28
 8005072:	f001 fe50 	bl	8006d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005076:	2028      	movs	r0, #40	@ 0x28
 8005078:	f001 fe69 	bl	8006d4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800507c:	bf00      	nop
 800507e:	3728      	adds	r7, #40	@ 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40023800 	.word	0x40023800
 8005088:	40020800 	.word	0x40020800
 800508c:	40020400 	.word	0x40020400
 8005090:	40020000 	.word	0x40020000

08005094 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8005098:	4819      	ldr	r0, [pc, #100]	@ (8005100 <Init_Timing+0x6c>)
 800509a:	f007 ff71 	bl	800cf80 <HAL_TIM_Base_Start_IT>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 80050a4:	2309      	movs	r3, #9
 80050a6:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <Init_Timing+0x70>)
 80050a8:	21ee      	movs	r1, #238	@ 0xee
 80050aa:	4817      	ldr	r0, [pc, #92]	@ (8005108 <Init_Timing+0x74>)
 80050ac:	f7fd fa18 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 80050b0:	4816      	ldr	r0, [pc, #88]	@ (800510c <Init_Timing+0x78>)
 80050b2:	f007 ff65 	bl	800cf80 <HAL_TIM_Base_Start_IT>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 80050bc:	230e      	movs	r3, #14
 80050be:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <Init_Timing+0x7c>)
 80050c0:	21ee      	movs	r1, #238	@ 0xee
 80050c2:	4811      	ldr	r0, [pc, #68]	@ (8005108 <Init_Timing+0x74>)
 80050c4:	f7fd fa0c 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 80050c8:	2100      	movs	r1, #0
 80050ca:	4810      	ldr	r0, [pc, #64]	@ (800510c <Init_Timing+0x78>)
 80050cc:	f008 f814 	bl	800d0f8 <HAL_TIM_PWM_Start>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 80050d6:	230e      	movs	r3, #14
 80050d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <Init_Timing+0x80>)
 80050da:	21ee      	movs	r1, #238	@ 0xee
 80050dc:	480a      	ldr	r0, [pc, #40]	@ (8005108 <Init_Timing+0x74>)
 80050de:	f7fd f9ff 	bl	80024e0 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 80050e2:	2104      	movs	r1, #4
 80050e4:	4809      	ldr	r0, [pc, #36]	@ (800510c <Init_Timing+0x78>)
 80050e6:	f008 f807 	bl	800d0f8 <HAL_TIM_PWM_Start>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 80050f0:	230e      	movs	r3, #14
 80050f2:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <Init_Timing+0x84>)
 80050f4:	21ee      	movs	r1, #238	@ 0xee
 80050f6:	4804      	ldr	r0, [pc, #16]	@ (8005108 <Init_Timing+0x74>)
 80050f8:	f7fd f9f2 	bl	80024e0 <comm_sendCMD>
	  }
}
 80050fc:	bf00      	nop
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20000db4 	.word	0x20000db4
 8005104:	08014890 	.word	0x08014890
 8005108:	200013e0 	.word	0x200013e0
 800510c:	20000dfc 	.word	0x20000dfc
 8005110:	0801489c 	.word	0x0801489c
 8005114:	080148ac 	.word	0x080148ac
 8005118:	080148bc 	.word	0x080148bc

0800511c <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 1000) != HAL_OK){
 8005120:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005124:	2201      	movs	r2, #1
 8005126:	21d0      	movs	r1, #208	@ 0xd0
 8005128:	4811      	ldr	r0, [pc, #68]	@ (8005170 <Init_MPU6050+0x54>)
 800512a:	f003 fca1 	bl	8008a70 <HAL_I2C_IsDeviceReady>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8005134:	230d      	movs	r3, #13
 8005136:	4a0f      	ldr	r2, [pc, #60]	@ (8005174 <Init_MPU6050+0x58>)
 8005138:	21ee      	movs	r1, #238	@ 0xee
 800513a:	480f      	ldr	r0, [pc, #60]	@ (8005178 <Init_MPU6050+0x5c>)
 800513c:	f7fd f9d0 	bl	80024e0 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8005140:	e013      	b.n	800516a <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C1_Mem_Write, &I2C1_Mem_Read);
 8005142:	490e      	ldr	r1, [pc, #56]	@ (800517c <Init_MPU6050+0x60>)
 8005144:	480e      	ldr	r0, [pc, #56]	@ (8005180 <Init_MPU6050+0x64>)
 8005146:	f7fb ff91 	bl	800106c <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 800514a:	480e      	ldr	r0, [pc, #56]	@ (8005184 <Init_MPU6050+0x68>)
 800514c:	f7fb ffa4 	bl	8001098 <MPU6050_Init>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d006      	beq.n	8005164 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8005156:	230c      	movs	r3, #12
 8005158:	4a0b      	ldr	r2, [pc, #44]	@ (8005188 <Init_MPU6050+0x6c>)
 800515a:	21ee      	movs	r1, #238	@ 0xee
 800515c:	4806      	ldr	r0, [pc, #24]	@ (8005178 <Init_MPU6050+0x5c>)
 800515e:	f7fd f9bf 	bl	80024e0 <comm_sendCMD>
}
 8005162:	e002      	b.n	800516a <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8005164:	4807      	ldr	r0, [pc, #28]	@ (8005184 <Init_MPU6050+0x68>)
 8005166:	f7fc f849 	bl	80011fc <MPU6050_Calibrate>
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000ca0 	.word	0x20000ca0
 8005174:	080148cc 	.word	0x080148cc
 8005178:	200013e0 	.word	0x200013e0
 800517c:	080055dd 	.word	0x080055dd
 8005180:	0800559d 	.word	0x0800559d
 8005184:	20000ee0 	.word	0x20000ee0
 8005188:	080148dc 	.word	0x080148dc

0800518c <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */

/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af02      	add	r7, sp, #8
	Display.refreshCounter_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 8005192:	4b1f      	ldr	r3, [pc, #124]	@ (8005210 <Init_Display+0x84>)
 8005194:	2214      	movs	r2, #20
 8005196:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate_10ms = DISPLAY_MEDIUM_REFRESH_RATE_10MS;
 800519a:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <Init_Display+0x84>)
 800519c:	2214      	movs	r2, #20
 800519e:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 1000) != HAL_OK){
 80051a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051a6:	2201      	movs	r2, #1
 80051a8:	2178      	movs	r1, #120	@ 0x78
 80051aa:	481a      	ldr	r0, [pc, #104]	@ (8005214 <Init_Display+0x88>)
 80051ac:	f003 fc60 	bl	8008a70 <HAL_I2C_IsDeviceReady>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 80051b6:	230a      	movs	r3, #10
 80051b8:	4a17      	ldr	r2, [pc, #92]	@ (8005218 <Init_Display+0x8c>)
 80051ba:	21ee      	movs	r1, #238	@ 0xee
 80051bc:	4817      	ldr	r0, [pc, #92]	@ (800521c <Init_Display+0x90>)
 80051be:	f7fd f98f 	bl	80024e0 <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 80051c2:	e022      	b.n	800520a <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C1_DMA_Mem_Write, &I2C1_Master_Transmit);
 80051c4:	4916      	ldr	r1, [pc, #88]	@ (8005220 <Init_Display+0x94>)
 80051c6:	4817      	ldr	r0, [pc, #92]	@ (8005224 <Init_Display+0x98>)
 80051c8:	f7fc f9ee 	bl	80015a8 <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 80051cc:	f7fc fa02 	bl	80015d4 <Display_Init>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 80051d6:	2309      	movs	r3, #9
 80051d8:	4a13      	ldr	r2, [pc, #76]	@ (8005228 <Init_Display+0x9c>)
 80051da:	21ee      	movs	r1, #238	@ 0xee
 80051dc:	480f      	ldr	r0, [pc, #60]	@ (800521c <Init_Display+0x90>)
 80051de:	f7fd f97f 	bl	80024e0 <comm_sendCMD>
}
 80051e2:	e012      	b.n	800520a <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 80051e4:	2301      	movs	r3, #1
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	2340      	movs	r3, #64	@ 0x40
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	4a0f      	ldr	r2, [pc, #60]	@ (800522c <Init_Display+0xa0>)
 80051f0:	2100      	movs	r1, #0
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fc fc84 	bl	8001b00 <Display_DrawBitmap>
			Display.isInit = TRUE;
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <Init_Display+0x84>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 80051fe:	f000 ff63 	bl	80060c8 <HAL_GetTick>
 8005202:	4603      	mov	r3, r0
 8005204:	4a02      	ldr	r2, [pc, #8]	@ (8005210 <Init_Display+0x84>)
 8005206:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 800520a:	bf00      	nop
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20000fa4 	.word	0x20000fa4
 8005214:	20000ca0 	.word	0x20000ca0
 8005218:	080148ec 	.word	0x080148ec
 800521c:	200013e0 	.word	0x200013e0
 8005220:	08005569 	.word	0x08005569
 8005224:	0800552d 	.word	0x0800552d
 8005228:	080148f8 	.word	0x080148f8
 800522c:	0801497c 	.word	0x0801497c

08005230 <Init_WiFi>:
/* FIN INICIALIZACIÓN DISPLAY */

/* INICIALIZACIÓN WIFI */
void Init_WiFi(){
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
	ESP.password = 	"wlan412877";
 8005234:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <Init_WiFi+0x78>)
 8005236:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <Init_WiFi+0x7c>)
 8005238:	611a      	str	r2, [r3, #16]
	ESP.ssid = 		"InternetPlus_bed788";
 800523a:	4b1b      	ldr	r3, [pc, #108]	@ (80052a8 <Init_WiFi+0x78>)
 800523c:	4a1c      	ldr	r2, [pc, #112]	@ (80052b0 <Init_WiFi+0x80>)
 800523e:	60da      	str	r2, [r3, #12]
	ESP.IP = 		"192.168.1.10";
 8005240:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <Init_WiFi+0x78>)
 8005242:	4a1c      	ldr	r2, [pc, #112]	@ (80052b4 <Init_WiFi+0x84>)
 8005244:	615a      	str	r2, [r3, #20]

	Comm_Init(&ESP.data, &decodeOn_USB, &writeOn_ESP);
 8005246:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <Init_WiFi+0x88>)
 8005248:	491c      	ldr	r1, [pc, #112]	@ (80052bc <Init_WiFi+0x8c>)
 800524a:	481d      	ldr	r0, [pc, #116]	@ (80052c0 <Init_WiFi+0x90>)
 800524c:	f7fc ffbc 	bl	80021c8 <Comm_Init>
	ESP.data.isESP01 = TRUE;
 8005250:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <Init_WiFi+0x78>)
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2247 	strb.w	r2, [r3, #583]	@ 0x247
	HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8005258:	2201      	movs	r2, #1
 800525a:	491a      	ldr	r1, [pc, #104]	@ (80052c4 <Init_WiFi+0x94>)
 800525c:	481a      	ldr	r0, [pc, #104]	@ (80052c8 <Init_WiFi+0x98>)
 800525e:	f008 fe47 	bl	800def0 <HAL_UART_Receive_IT>

	ESP.Config.DoCHPD = setESP01_CHPD;
 8005262:	4b11      	ldr	r3, [pc, #68]	@ (80052a8 <Init_WiFi+0x78>)
 8005264:	4a19      	ldr	r2, [pc, #100]	@ (80052cc <Init_WiFi+0x9c>)
 8005266:	601a      	str	r2, [r3, #0]
	ESP.Config.WriteUSARTByte = ESP01_UART_Transmit;
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <Init_WiFi+0x78>)
 800526a:	4a19      	ldr	r2, [pc, #100]	@ (80052d0 <Init_WiFi+0xa0>)
 800526c:	605a      	str	r2, [r3, #4]
	ESP.Config.WriteByteToBufRX = ESP01_Data_Recived;
 800526e:	4b0e      	ldr	r3, [pc, #56]	@ (80052a8 <Init_WiFi+0x78>)
 8005270:	4a18      	ldr	r2, [pc, #96]	@ (80052d4 <Init_WiFi+0xa4>)
 8005272:	609a      	str	r2, [r3, #8]

	ESP01_Init(&ESP.Config);
 8005274:	480c      	ldr	r0, [pc, #48]	@ (80052a8 <Init_WiFi+0x78>)
 8005276:	f7fd fb7b 	bl	8002970 <ESP01_Init>
	ESP01_SetWIFI(ESP.ssid, ESP.password);
 800527a:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <Init_WiFi+0x78>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <Init_WiFi+0x78>)
 8005280:	6912      	ldr	r2, [r2, #16]
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f7fd fa07 	bl	8002698 <ESP01_SetWIFI>
	ESP01_StartUDP("192.168.1.10", 30010, 30000);
 800528a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800528e:	f247 513a 	movw	r1, #30010	@ 0x753a
 8005292:	4808      	ldr	r0, [pc, #32]	@ (80052b4 <Init_WiFi+0x84>)
 8005294:	f7fd fa32 	bl	80026fc <ESP01_StartUDP>
	//ESP01_AttachChangeState(&onESP01ChangeState);
	ESP01_AttachDebugStr(&onESP01Debug);
 8005298:	480f      	ldr	r0, [pc, #60]	@ (80052d8 <Init_WiFi+0xa8>)
 800529a:	f7fd fbf1 	bl	8002a80 <ESP01_AttachDebugStr>

	ESP01_setMode(CREATEWIFI);
 800529e:	2001      	movs	r0, #1
 80052a0:	f7fe fce4 	bl	8003c6c <ESP01_setMode>
}
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20001614 	.word	0x20001614
 80052ac:	08014904 	.word	0x08014904
 80052b0:	08014910 	.word	0x08014910
 80052b4:	08014924 	.word	0x08014924
 80052b8:	080054d5 	.word	0x080054d5
 80052bc:	08004321 	.word	0x08004321
 80052c0:	2000162c 	.word	0x2000162c
 80052c4:	2000185c 	.word	0x2000185c
 80052c8:	20000e44 	.word	0x20000e44
 80052cc:	0800561d 	.word	0x0800561d
 80052d0:	08005465 	.word	0x08005465
 80052d4:	0800549d 	.word	0x0800549d
 80052d8:	08004705 	.word	0x08004705

080052dc <HAL_TIM_PeriodElapsedCallback>:
/* END INICIALIZACIÓN WIFI */

/************************************ END USER INIT FUNCTIONS ****************************************/
/***************************************** HAL CALLBACKS *********************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //								1/4000s
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d123      	bne.n	8005336 <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, ADC_NUM_SENSORS);
 80052ee:	2209      	movs	r2, #9
 80052f0:	4919      	ldr	r1, [pc, #100]	@ (8005358 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80052f2:	481a      	ldr	r0, [pc, #104]	@ (800535c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80052f4:	f001 f86c 	bl	80063d0 <HAL_ADC_Start_DMA>
		is5ms--;
 80052f8:	4b19      	ldr	r3, [pc, #100]	@ (8005360 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	4b17      	ldr	r3, [pc, #92]	@ (8005360 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8005302:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8005304:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d114      	bne.n	8005336 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 800530c:	4b14      	ldr	r3, [pc, #80]	@ (8005360 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800530e:	2214      	movs	r2, #20
 8005310:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8005312:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005314:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.bit_data, 14);
 800531c:	230e      	movs	r3, #14
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2301      	movs	r3, #1
 8005326:	223b      	movs	r2, #59	@ 0x3b
 8005328:	21d0      	movs	r1, #208	@ 0xd0
 800532a:	4810      	ldr	r0, [pc, #64]	@ (800536c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800532c:	f003 fa10 	bl	8008750 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8005330:	2000      	movs	r0, #0
 8005332:	f7fc fb29 	bl	8001988 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a0d      	ldr	r2, [pc, #52]	@ (8005370 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d104      	bne.n	800534a <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8005340:	4a0c      	ldr	r2, [pc, #48]	@ (8005374 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005342:	7813      	ldrb	r3, [r2, #0]
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	7013      	strb	r3, [r2, #0]
	}
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	200013bc 	.word	0x200013bc
 800535c:	20000bf8 	.word	0x20000bf8
 8005360:	2000000e 	.word	0x2000000e
 8005364:	20000ee0 	.word	0x20000ee0
 8005368:	20000f94 	.word	0x20000f94
 800536c:	20000ca0 	.word	0x20000ca0
 8005370:	40000400 	.word	0x40000400
 8005374:	20000e8c 	.word	0x20000e8c

08005378 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005384:	2b78      	cmp	r3, #120	@ 0x78
 8005386:	d107      	bne.n	8005398 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_I2C_MemTxCpltCallback+0x28>)
 800538a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 8005392:	2001      	movs	r0, #1
 8005394:	f7fc faf8 	bl	8001988 <Display_I2C_DMA_Ready>
		}
	}
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000ee0 	.word	0x20000ee0

080053a4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b0:	2bd0      	cmp	r3, #208	@ 0xd0
 80053b2:	d105      	bne.n	80053c0 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 80053b4:	4804      	ldr	r0, [pc, #16]	@ (80053c8 <HAL_I2C_MemRxCpltCallback+0x24>)
 80053b6:	f7fb ffc7 	bl	8001348 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f7fc fae4 	bl	8001988 <Display_I2C_DMA_Ready>
	}
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000ee0 	.word	0x20000ee0

080053cc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 80053d4:	4903      	ldr	r1, [pc, #12]	@ (80053e4 <HAL_ADC_ConvCpltCallback+0x18>)
 80053d6:	4804      	ldr	r0, [pc, #16]	@ (80053e8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80053d8:	f7fb fce6 	bl	8000da8 <ADC_Conversion_Cplt>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	200013ce 	.word	0x200013ce
 80053e8:	200013bc 	.word	0x200013bc

080053ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fc:	d102      	bne.n	8005404 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 80053fe:	4807      	ldr	r0, [pc, #28]	@ (800541c <HAL_GPIO_EXTI_Callback+0x30>)
 8005400:	f7fc fdd2 	bl	8001fa8 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8005404:	88fb      	ldrh	r3, [r7, #6]
 8005406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540a:	d102      	bne.n	8005412 <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 800540c:	4804      	ldr	r0, [pc, #16]	@ (8005420 <HAL_GPIO_EXTI_Callback+0x34>)
 800540e:	f7fc fdcb 	bl	8001fa8 <Encoder_Add_Pulse>
	}
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000ec8 	.word	0x20000ec8
 8005420:	20000ed4 	.word	0x20000ed4

08005424 <HAL_UART_RxCpltCallback>:
/**************************************** END HAL CALLBACKS ***************************************/

/******************************************** ESP ***********************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a08      	ldr	r2, [pc, #32]	@ (8005454 <HAL_UART_RxCpltCallback+0x30>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10a      	bne.n	800544c <HAL_UART_RxCpltCallback+0x28>
		ESP01_WriteRX(ESP.AT_Rx_data);
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <HAL_UART_RxCpltCallback+0x34>)
 8005438:	f893 3248 	ldrb.w	r3, [r3, #584]	@ 0x248
 800543c:	4618      	mov	r0, r3
 800543e:	f7fd f9c9 	bl	80027d4 <ESP01_WriteRX>
		HAL_UART_Receive_IT(&huart1, &ESP.AT_Rx_data, 1);
 8005442:	2201      	movs	r2, #1
 8005444:	4905      	ldr	r1, [pc, #20]	@ (800545c <HAL_UART_RxCpltCallback+0x38>)
 8005446:	4806      	ldr	r0, [pc, #24]	@ (8005460 <HAL_UART_RxCpltCallback+0x3c>)
 8005448:	f008 fd52 	bl	800def0 <HAL_UART_Receive_IT>
	}
}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40011000 	.word	0x40011000
 8005458:	20001614 	.word	0x20001614
 800545c:	2000185c 	.word	0x2000185c
 8005460:	20000e44 	.word	0x20000e44

08005464 <ESP01_UART_Transmit>:

int ESP01_UART_Transmit(uint8_t val){
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	71fb      	strb	r3, [r7, #7]
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)){
 800546e:	4b09      	ldr	r3, [pc, #36]	@ (8005494 <ESP01_UART_Transmit+0x30>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005478:	2b80      	cmp	r3, #128	@ 0x80
 800547a:	d104      	bne.n	8005486 <ESP01_UART_Transmit+0x22>
		USART1->DR = val;
 800547c:	4a06      	ldr	r2, [pc, #24]	@ (8005498 <ESP01_UART_Transmit+0x34>)
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	6053      	str	r3, [r2, #4]
		return 1;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <ESP01_UART_Transmit+0x24>
	}
	return 0;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	20000e44 	.word	0x20000e44
 8005498:	40011000 	.word	0x40011000

0800549c <ESP01_Data_Recived>:

void ESP01_Data_Recived(uint8_t value){
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	71fb      	strb	r3, [r7, #7]
	ESP.data.Rx.buffer[ESP.data.Rx.write++] = value;
 80054a6:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <ESP01_Data_Recived+0x34>)
 80054a8:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	b2d1      	uxtb	r1, r2
 80054b0:	4a07      	ldr	r2, [pc, #28]	@ (80054d0 <ESP01_Data_Recived+0x34>)
 80054b2:	f882 111d 	strb.w	r1, [r2, #285]	@ 0x11d
 80054b6:	461a      	mov	r2, r3
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <ESP01_Data_Recived+0x34>)
 80054ba:	4413      	add	r3, r2
 80054bc:	79fa      	ldrb	r2, [r7, #7]
 80054be:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20001614 	.word	0x20001614

080054d4 <writeOn_ESP>:

void writeOn_ESP(s_commData *data){
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	ESP.bytesToTx = data->Tx.write - data->Tx.read;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	78da      	ldrb	r2, [r3, #3]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	789b      	ldrb	r3, [r3, #2]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005528 <writeOn_ESP+0x54>)
 80054ea:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
	if(ESP01_Send(data->Tx.buffer,  data->Tx.read,  ESP.bytesToTx,  RINGBUFFLENGTH) == ESP01_SEND_READY){
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	1d18      	adds	r0, r3, #4
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	789b      	ldrb	r3, [r3, #2]
 80054f6:	4619      	mov	r1, r3
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <writeOn_ESP+0x54>)
 80054fa:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 80054fe:	461a      	mov	r2, r3
 8005500:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005504:	f7fd f986 	bl	8002814 <ESP01_Send>
 8005508:	4603      	mov	r3, r0
 800550a:	2b09      	cmp	r3, #9
 800550c:	d108      	bne.n	8005520 <writeOn_ESP+0x4c>
		data->Tx.read += ESP.bytesToTx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	789a      	ldrb	r2, [r3, #2]
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <writeOn_ESP+0x54>)
 8005514:	f893 3249 	ldrb.w	r3, [r3, #585]	@ 0x249
 8005518:	4413      	add	r3, r2
 800551a:	b2da      	uxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	709a      	strb	r2, [r3, #2]
	}
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20001614 	.word	0x20001614

0800552c <I2C1_DMA_Mem_Write>:
/******************************************** END ESP ***********************************************/

/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C1_DMA_Mem_Write(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af02      	add	r7, sp, #8
 8005532:	60ba      	str	r2, [r7, #8]
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	81fb      	strh	r3, [r7, #14]
 800553a:	460b      	mov	r3, r1
 800553c:	737b      	strb	r3, [r7, #13]
 800553e:	4613      	mov	r3, r2
 8005540:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8005542:	7b7b      	ldrb	r3, [r7, #13]
 8005544:	b29a      	uxth	r2, r3
 8005546:	89f9      	ldrh	r1, [r7, #14]
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2301      	movs	r3, #1
 8005552:	4804      	ldr	r0, [pc, #16]	@ (8005564 <I2C1_DMA_Mem_Write+0x38>)
 8005554:	f002 ff9e 	bl	8008494 <HAL_I2C_Mem_Write_DMA>
 8005558:	4603      	mov	r3, r0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000ca0 	.word	0x20000ca0

08005568 <I2C1_Master_Transmit>:

e_system I2C1_Master_Transmit(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af02      	add	r7, sp, #8
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607b      	str	r3, [r7, #4]
 8005572:	4603      	mov	r3, r0
 8005574:	81fb      	strh	r3, [r7, #14]
 8005576:	4613      	mov	r3, r2
 8005578:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 800557a:	89ba      	ldrh	r2, [r7, #12]
 800557c:	89f9      	ldrh	r1, [r7, #14]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	4804      	ldr	r0, [pc, #16]	@ (8005598 <I2C1_Master_Transmit+0x30>)
 8005588:	f002 fb5a 	bl	8007c40 <HAL_I2C_Master_Transmit>
 800558c:	4603      	mov	r3, r0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000ca0 	.word	0x20000ca0

0800559c <I2C1_Mem_Write>:

e_system I2C1_Mem_Write(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af04      	add	r7, sp, #16
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	80fb      	strh	r3, [r7, #6]
 80055a8:	460b      	mov	r3, r1
 80055aa:	717b      	strb	r3, [r7, #5]
 80055ac:	4613      	mov	r3, r2
 80055ae:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80055b0:	797b      	ldrb	r3, [r7, #5]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	793b      	ldrb	r3, [r7, #4]
 80055b6:	b298      	uxth	r0, r3
 80055b8:	88f9      	ldrh	r1, [r7, #6]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	9302      	str	r3, [sp, #8]
 80055be:	8a3b      	ldrh	r3, [r7, #16]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	4603      	mov	r3, r0
 80055c8:	4803      	ldr	r0, [pc, #12]	@ (80055d8 <I2C1_Mem_Write+0x3c>)
 80055ca:	f002 fc37 	bl	8007e3c <HAL_I2C_Mem_Write>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000ca0 	.word	0x20000ca0

080055dc <I2C1_Mem_Read>:

e_system I2C1_Mem_Read(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af04      	add	r7, sp, #16
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4603      	mov	r3, r0
 80055e6:	80fb      	strh	r3, [r7, #6]
 80055e8:	460b      	mov	r3, r1
 80055ea:	717b      	strb	r3, [r7, #5]
 80055ec:	4613      	mov	r3, r2
 80055ee:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 80055f0:	797b      	ldrb	r3, [r7, #5]
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	793b      	ldrb	r3, [r7, #4]
 80055f6:	b298      	uxth	r0, r3
 80055f8:	88f9      	ldrh	r1, [r7, #6]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	9302      	str	r3, [sp, #8]
 80055fe:	8a3b      	ldrh	r3, [r7, #16]
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4603      	mov	r3, r0
 8005608:	4803      	ldr	r0, [pc, #12]	@ (8005618 <I2C1_Mem_Read+0x3c>)
 800560a:	f002 fd11 	bl	8008030 <HAL_I2C_Mem_Read>
 800560e:	4603      	mov	r3, r0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000ca0 	.word	0x20000ca0

0800561c <setESP01_CHPD>:

void setESP01_CHPD(uint8_t val){
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ESP_EN_GPIO_Port, ESP_EN_Pin, val);
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	461a      	mov	r2, r3
 800562a:	2104      	movs	r1, #4
 800562c:	4803      	ldr	r0, [pc, #12]	@ (800563c <setESP01_CHPD+0x20>)
 800562e:	f002 f961 	bl	80078f4 <HAL_GPIO_WritePin>
}
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40020400 	.word	0x40020400

08005640 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8005644:	2101      	movs	r1, #1
 8005646:	4803      	ldr	r0, [pc, #12]	@ (8005654 <KEY_Read_Value+0x14>)
 8005648:	f002 f93c 	bl	80078c4 <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40020000 	.word	0x40020000

08005658 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8005660:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <writeOn_USB+0x70>)
 8005662:	78da      	ldrb	r2, [r3, #3]
 8005664:	4b18      	ldr	r3, [pc, #96]	@ (80056c8 <writeOn_USB+0x70>)
 8005666:	789b      	ldrb	r3, [r3, #2]
 8005668:	429a      	cmp	r2, r3
 800566a:	d909      	bls.n	8005680 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 800566c:	4b16      	ldr	r3, [pc, #88]	@ (80056c8 <writeOn_USB+0x70>)
 800566e:	78da      	ldrb	r2, [r3, #3]
 8005670:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <writeOn_USB+0x70>)
 8005672:	789b      	ldrb	r3, [r3, #2]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <writeOn_USB+0x70>)
 800567a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 800567e:	e006      	b.n	800568e <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 8005680:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <writeOn_USB+0x70>)
 8005682:	789b      	ldrb	r3, [r3, #2]
 8005684:	425b      	negs	r3, r3
 8005686:	b2da      	uxtb	r2, r3
 8005688:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <writeOn_USB+0x70>)
 800568a:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 800568e:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <writeOn_USB+0x70>)
 8005690:	789b      	ldrb	r3, [r3, #2]
 8005692:	461a      	mov	r2, r3
 8005694:	4b0c      	ldr	r3, [pc, #48]	@ (80056c8 <writeOn_USB+0x70>)
 8005696:	4413      	add	r3, r2
 8005698:	3304      	adds	r3, #4
 800569a:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <writeOn_USB+0x70>)
 800569c:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f00c ff7c 	bl	80125a0 <CDC_Transmit_FS>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d108      	bne.n	80056c0 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <writeOn_USB+0x70>)
 80056b0:	789a      	ldrb	r2, [r3, #2]
 80056b2:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <writeOn_USB+0x70>)
 80056b4:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80056b8:	4413      	add	r3, r2
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	4b02      	ldr	r3, [pc, #8]	@ (80056c8 <writeOn_USB+0x70>)
 80056be:	709a      	strb	r2, [r3, #2]
	}
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	200013e0 	.word	0x200013e0

080056cc <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01a      	beq.n	8005712 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 80056dc:	2300      	movs	r3, #0
 80056de:	81fb      	strh	r3, [r7, #14]
 80056e0:	e013      	b.n	800570a <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 80056e2:	89fb      	ldrh	r3, [r7, #14]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	441a      	add	r2, r3
 80056e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <dataRxOn_USB+0x54>)
 80056ea:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	b2c8      	uxtb	r0, r1
 80056f2:	490b      	ldr	r1, [pc, #44]	@ (8005720 <dataRxOn_USB+0x54>)
 80056f4:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 80056f8:	4619      	mov	r1, r3
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	4b08      	ldr	r3, [pc, #32]	@ (8005720 <dataRxOn_USB+0x54>)
 80056fe:	440b      	add	r3, r1
 8005700:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8005704:	89fb      	ldrh	r3, [r7, #14]
 8005706:	3301      	adds	r3, #1
 8005708:	81fb      	strh	r3, [r7, #14]
 800570a:	89fb      	ldrh	r3, [r7, #14]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d8e7      	bhi.n	80056e2 <dataRxOn_USB+0x16>
		}
	}
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	200013e0 	.word	0x200013e0

08005724 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	460a      	mov	r2, r1
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	4613      	mov	r3, r2
 8005732:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	461a      	mov	r2, r3
 8005738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800573c:	4806      	ldr	r0, [pc, #24]	@ (8005758 <Motor_Left_SetPins+0x34>)
 800573e:	f002 f8d9 	bl	80078f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 8005742:	79bb      	ldrb	r3, [r7, #6]
 8005744:	461a      	mov	r2, r3
 8005746:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800574a:	4803      	ldr	r0, [pc, #12]	@ (8005758 <Motor_Left_SetPins+0x34>)
 800574c:	f002 f8d2 	bl	80078f4 <HAL_GPIO_WritePin>
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40020000 	.word	0x40020000

0800575c <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	460a      	mov	r2, r1
 8005766:	71fb      	strb	r3, [r7, #7]
 8005768:	4613      	mov	r3, r2
 800576a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	461a      	mov	r2, r3
 8005770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005774:	4806      	ldr	r0, [pc, #24]	@ (8005790 <Motor_Right_SetPins+0x34>)
 8005776:	f002 f8bd 	bl	80078f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 800577a:	79bb      	ldrb	r3, [r7, #6]
 800577c:	461a      	mov	r2, r3
 800577e:	2108      	movs	r1, #8
 8005780:	4804      	ldr	r0, [pc, #16]	@ (8005794 <Motor_Right_SetPins+0x38>)
 8005782:	f002 f8b7 	bl	80078f4 <HAL_GPIO_WritePin>
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40020000 	.word	0x40020000
 8005794:	40020400 	.word	0x40020400

08005798 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80057a2:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <Motor_Left_SetPWM+0x20>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000dfc 	.word	0x20000dfc

080057bc <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80057c6:	4b05      	ldr	r3, [pc, #20]	@ (80057dc <Motor_Right_SetPWM+0x20>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000dfc 	.word	0x20000dfc

080057e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057e4:	b672      	cpsid	i
}
 80057e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <Error_Handler+0x8>

080057ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <HAL_MspInit+0x58>)
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	4a12      	ldr	r2, [pc, #72]	@ (8005844 <HAL_MspInit+0x58>)
 80057fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005800:	6453      	str	r3, [r2, #68]	@ 0x44
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <HAL_MspInit+0x58>)
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800580a:	607b      	str	r3, [r7, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800580e:	2300      	movs	r3, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <HAL_MspInit+0x58>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	4a0b      	ldr	r2, [pc, #44]	@ (8005844 <HAL_MspInit+0x58>)
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800581c:	6413      	str	r3, [r2, #64]	@ 0x40
 800581e:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_MspInit+0x58>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800582a:	2200      	movs	r2, #0
 800582c:	2100      	movs	r1, #0
 800582e:	2051      	movs	r0, #81	@ 0x51
 8005830:	f001 fa71 	bl	8006d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005834:	2051      	movs	r0, #81	@ 0x51
 8005836:	f001 fa8a 	bl	8006d4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800583a:	bf00      	nop
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800

08005848 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b08a      	sub	sp, #40	@ 0x28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005850:	f107 0314 	add.w	r3, r7, #20
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a40      	ldr	r2, [pc, #256]	@ (8005968 <HAL_ADC_MspInit+0x120>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d179      	bne.n	800595e <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
 800586e:	4b3f      	ldr	r3, [pc, #252]	@ (800596c <HAL_ADC_MspInit+0x124>)
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	4a3e      	ldr	r2, [pc, #248]	@ (800596c <HAL_ADC_MspInit+0x124>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005878:	6453      	str	r3, [r2, #68]	@ 0x44
 800587a:	4b3c      	ldr	r3, [pc, #240]	@ (800596c <HAL_ADC_MspInit+0x124>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4b38      	ldr	r3, [pc, #224]	@ (800596c <HAL_ADC_MspInit+0x124>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	4a37      	ldr	r2, [pc, #220]	@ (800596c <HAL_ADC_MspInit+0x124>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6313      	str	r3, [r2, #48]	@ 0x30
 8005896:	4b35      	ldr	r3, [pc, #212]	@ (800596c <HAL_ADC_MspInit+0x124>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	4b31      	ldr	r3, [pc, #196]	@ (800596c <HAL_ADC_MspInit+0x124>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	4a30      	ldr	r2, [pc, #192]	@ (800596c <HAL_ADC_MspInit+0x124>)
 80058ac:	f043 0302 	orr.w	r3, r3, #2
 80058b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b2:	4b2e      	ldr	r3, [pc, #184]	@ (800596c <HAL_ADC_MspInit+0x124>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	60bb      	str	r3, [r7, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 80058be:	23fe      	movs	r3, #254	@ 0xfe
 80058c0:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058c2:	2303      	movs	r3, #3
 80058c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ca:	f107 0314 	add.w	r3, r7, #20
 80058ce:	4619      	mov	r1, r3
 80058d0:	4827      	ldr	r0, [pc, #156]	@ (8005970 <HAL_ADC_MspInit+0x128>)
 80058d2:	f001 fe73 	bl	80075bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 80058d6:	2303      	movs	r3, #3
 80058d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058da:	2303      	movs	r3, #3
 80058dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	4619      	mov	r1, r3
 80058e8:	4822      	ldr	r0, [pc, #136]	@ (8005974 <HAL_ADC_MspInit+0x12c>)
 80058ea:	f001 fe67 	bl	80075bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80058ee:	4b22      	ldr	r3, [pc, #136]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 80058f0:	4a22      	ldr	r2, [pc, #136]	@ (800597c <HAL_ADC_MspInit+0x134>)
 80058f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80058f4:	4b20      	ldr	r3, [pc, #128]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005900:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005902:	2200      	movs	r2, #0
 8005904:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005906:	4b1c      	ldr	r3, [pc, #112]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005908:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800590c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800590e:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005910:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005914:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005916:	4b18      	ldr	r3, [pc, #96]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005918:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800591c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800591e:	4b16      	ldr	r3, [pc, #88]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005920:	2200      	movs	r2, #0
 8005922:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005924:	4b14      	ldr	r3, [pc, #80]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005926:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800592a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800592c:	4b12      	ldr	r3, [pc, #72]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 800592e:	2200      	movs	r2, #0
 8005930:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005932:	4811      	ldr	r0, [pc, #68]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005934:	f001 fa26 	bl	8006d84 <HAL_DMA_Init>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800593e:	f7ff ff4f 	bl	80057e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a0c      	ldr	r2, [pc, #48]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38
 8005948:	4a0b      	ldr	r2, [pc, #44]	@ (8005978 <HAL_ADC_MspInit+0x130>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800594e:	2200      	movs	r2, #0
 8005950:	2100      	movs	r1, #0
 8005952:	2012      	movs	r0, #18
 8005954:	f001 f9df 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005958:	2012      	movs	r0, #18
 800595a:	f001 f9f8 	bl	8006d4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800595e:	bf00      	nop
 8005960:	3728      	adds	r7, #40	@ 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40012000 	.word	0x40012000
 800596c:	40023800 	.word	0x40023800
 8005970:	40020000 	.word	0x40020000
 8005974:	40020400 	.word	0x40020400
 8005978:	20000c40 	.word	0x20000c40
 800597c:	40026410 	.word	0x40026410

08005980 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	@ 0x28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	2200      	movs	r2, #0
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	605a      	str	r2, [r3, #4]
 8005992:	609a      	str	r2, [r3, #8]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a50      	ldr	r2, [pc, #320]	@ (8005ae0 <HAL_I2C_MspInit+0x160>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	f040 8099 	bne.w	8005ad6 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	4b4e      	ldr	r3, [pc, #312]	@ (8005ae4 <HAL_I2C_MspInit+0x164>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ac:	4a4d      	ldr	r2, [pc, #308]	@ (8005ae4 <HAL_I2C_MspInit+0x164>)
 80059ae:	f043 0302 	orr.w	r3, r3, #2
 80059b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80059b4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ae4 <HAL_I2C_MspInit+0x164>)
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80059c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80059c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059c6:	2312      	movs	r3, #18
 80059c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ce:	2303      	movs	r3, #3
 80059d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059d2:	2304      	movs	r3, #4
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d6:	f107 0314 	add.w	r3, r7, #20
 80059da:	4619      	mov	r1, r3
 80059dc:	4842      	ldr	r0, [pc, #264]	@ (8005ae8 <HAL_I2C_MspInit+0x168>)
 80059de:	f001 fded 	bl	80075bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae4 <HAL_I2C_MspInit+0x164>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ea:	4a3e      	ldr	r2, [pc, #248]	@ (8005ae4 <HAL_I2C_MspInit+0x164>)
 80059ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80059f2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae4 <HAL_I2C_MspInit+0x164>)
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80059fe:	4b3b      	ldr	r3, [pc, #236]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a00:	4a3b      	ldr	r2, [pc, #236]	@ (8005af0 <HAL_I2C_MspInit+0x170>)
 8005a02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8005a04:	4b39      	ldr	r3, [pc, #228]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a0a:	4b38      	ldr	r3, [pc, #224]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a0c:	2240      	movs	r2, #64	@ 0x40
 8005a0e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a10:	4b36      	ldr	r3, [pc, #216]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a16:	4b35      	ldr	r3, [pc, #212]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a1c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a1e:	4b33      	ldr	r3, [pc, #204]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a24:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005a2a:	4b30      	ldr	r3, [pc, #192]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a30:	4b2e      	ldr	r3, [pc, #184]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a36:	4b2d      	ldr	r3, [pc, #180]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005a3c:	482b      	ldr	r0, [pc, #172]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a3e:	f001 f9a1 	bl	8006d84 <HAL_DMA_Init>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8005a48:	f7ff feca 	bl	80057e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a50:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a52:	4a26      	ldr	r2, [pc, #152]	@ (8005aec <HAL_I2C_MspInit+0x16c>)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005a58:	4b26      	ldr	r3, [pc, #152]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a5a:	4a27      	ldr	r2, [pc, #156]	@ (8005af8 <HAL_I2C_MspInit+0x178>)
 8005a5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005a5e:	4b25      	ldr	r3, [pc, #148]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a66:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6c:	4b21      	ldr	r3, [pc, #132]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a80:	4b1c      	ldr	r3, [pc, #112]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005a86:	4b1b      	ldr	r3, [pc, #108]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a8c:	4b19      	ldr	r3, [pc, #100]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005a92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a94:	4b17      	ldr	r3, [pc, #92]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005a9a:	4816      	ldr	r0, [pc, #88]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005a9c:	f001 f972 	bl	8006d84 <HAL_DMA_Init>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8005aa6:	f7ff fe9b 	bl	80057e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a11      	ldr	r2, [pc, #68]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005aae:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ab0:	4a10      	ldr	r2, [pc, #64]	@ (8005af4 <HAL_I2C_MspInit+0x174>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2100      	movs	r1, #0
 8005aba:	201f      	movs	r0, #31
 8005abc:	f001 f92b 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005ac0:	201f      	movs	r0, #31
 8005ac2:	f001 f944 	bl	8006d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2020      	movs	r0, #32
 8005acc:	f001 f923 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005ad0:	2020      	movs	r0, #32
 8005ad2:	f001 f93c 	bl	8006d4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005ad6:	bf00      	nop
 8005ad8:	3728      	adds	r7, #40	@ 0x28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	40005400 	.word	0x40005400
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	40020400 	.word	0x40020400
 8005aec:	20000cf4 	.word	0x20000cf4
 8005af0:	40026028 	.word	0x40026028
 8005af4:	20000d54 	.word	0x20000d54
 8005af8:	40026010 	.word	0x40026010

08005afc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1c      	ldr	r2, [pc, #112]	@ (8005b7c <HAL_TIM_Base_MspInit+0x80>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d116      	bne.n	8005b3c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <HAL_TIM_Base_MspInit+0x84>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	4a1a      	ldr	r2, [pc, #104]	@ (8005b80 <HAL_TIM_Base_MspInit+0x84>)
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b1e:	4b18      	ldr	r3, [pc, #96]	@ (8005b80 <HAL_TIM_Base_MspInit+0x84>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	2019      	movs	r0, #25
 8005b30:	f001 f8f1 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005b34:	2019      	movs	r0, #25
 8005b36:	f001 f90a 	bl	8006d4e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005b3a:	e01a      	b.n	8005b72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a10      	ldr	r2, [pc, #64]	@ (8005b84 <HAL_TIM_Base_MspInit+0x88>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d115      	bne.n	8005b72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b46:	2300      	movs	r3, #0
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <HAL_TIM_Base_MspInit+0x84>)
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b80 <HAL_TIM_Base_MspInit+0x84>)
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b56:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <HAL_TIM_Base_MspInit+0x84>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2100      	movs	r1, #0
 8005b66:	201d      	movs	r0, #29
 8005b68:	f001 f8d5 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005b6c:	201d      	movs	r0, #29
 8005b6e:	f001 f8ee 	bl	8006d4e <HAL_NVIC_EnableIRQ>
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40023800 	.word	0x40023800
 8005b84:	40000400 	.word	0x40000400

08005b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 030c 	add.w	r3, r7, #12
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <HAL_TIM_MspPostInit+0x68>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d11d      	bne.n	8005be6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	4b11      	ldr	r3, [pc, #68]	@ (8005bf4 <HAL_TIM_MspPostInit+0x6c>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	4a10      	ldr	r2, [pc, #64]	@ (8005bf4 <HAL_TIM_MspPostInit+0x6c>)
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bba:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf4 <HAL_TIM_MspPostInit+0x6c>)
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	60bb      	str	r3, [r7, #8]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8005bc6:	2330      	movs	r3, #48	@ 0x30
 8005bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	f107 030c 	add.w	r3, r7, #12
 8005bde:	4619      	mov	r1, r3
 8005be0:	4805      	ldr	r0, [pc, #20]	@ (8005bf8 <HAL_TIM_MspPostInit+0x70>)
 8005be2:	f001 fceb 	bl	80075bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005be6:	bf00      	nop
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40020400 	.word	0x40020400

08005bfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08a      	sub	sp, #40	@ 0x28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <HAL_UART_MspInit+0x94>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d133      	bne.n	8005c86 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	4b1c      	ldr	r3, [pc, #112]	@ (8005c94 <HAL_UART_MspInit+0x98>)
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	4a1b      	ldr	r2, [pc, #108]	@ (8005c94 <HAL_UART_MspInit+0x98>)
 8005c28:	f043 0310 	orr.w	r3, r3, #16
 8005c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c2e:	4b19      	ldr	r3, [pc, #100]	@ (8005c94 <HAL_UART_MspInit+0x98>)
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	f003 0310 	and.w	r3, r3, #16
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	4b15      	ldr	r3, [pc, #84]	@ (8005c94 <HAL_UART_MspInit+0x98>)
 8005c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c42:	4a14      	ldr	r2, [pc, #80]	@ (8005c94 <HAL_UART_MspInit+0x98>)
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c4a:	4b12      	ldr	r3, [pc, #72]	@ (8005c94 <HAL_UART_MspInit+0x98>)
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8005c56:	23c0      	movs	r3, #192	@ 0xc0
 8005c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c62:	2303      	movs	r3, #3
 8005c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c66:	2307      	movs	r3, #7
 8005c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c6a:	f107 0314 	add.w	r3, r7, #20
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4809      	ldr	r0, [pc, #36]	@ (8005c98 <HAL_UART_MspInit+0x9c>)
 8005c72:	f001 fca3 	bl	80075bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2100      	movs	r1, #0
 8005c7a:	2025      	movs	r0, #37	@ 0x25
 8005c7c:	f001 f84b 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c80:	2025      	movs	r0, #37	@ 0x25
 8005c82:	f001 f864 	bl	8006d4e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005c86:	bf00      	nop
 8005c88:	3728      	adds	r7, #40	@ 0x28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40011000 	.word	0x40011000
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40020400 	.word	0x40020400

08005c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005ca0:	f007 f904 	bl	800ceac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <NMI_Handler+0x8>

08005ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <HardFault_Handler+0x4>

08005cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <MemManage_Handler+0x4>

08005cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005cbc:	bf00      	nop
 8005cbe:	e7fd      	b.n	8005cbc <BusFault_Handler+0x4>

08005cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <UsageFault_Handler+0x4>

08005cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cf6:	f000 f9d3 	bl	80060a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005d04:	4802      	ldr	r0, [pc, #8]	@ (8005d10 <DMA1_Stream0_IRQHandler+0x10>)
 8005d06:	f001 f9d5 	bl	80070b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20000d54 	.word	0x20000d54

08005d14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005d18:	4802      	ldr	r0, [pc, #8]	@ (8005d24 <DMA1_Stream1_IRQHandler+0x10>)
 8005d1a:	f001 f9cb 	bl	80070b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000cf4 	.word	0x20000cf4

08005d28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005d2c:	4802      	ldr	r0, [pc, #8]	@ (8005d38 <ADC_IRQHandler+0x10>)
 8005d2e:	f000 fa3e 	bl	80061ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005d32:	bf00      	nop
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000bf8 	.word	0x20000bf8

08005d3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8005d40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005d44:	f001 fe0a 	bl	800795c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d50:	4802      	ldr	r0, [pc, #8]	@ (8005d5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005d52:	f007 fa81 	bl	800d258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000db4 	.word	0x20000db4

08005d60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005d64:	4802      	ldr	r0, [pc, #8]	@ (8005d70 <TIM3_IRQHandler+0x10>)
 8005d66:	f007 fa77 	bl	800d258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000dfc 	.word	0x20000dfc

08005d74 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005d78:	4802      	ldr	r0, [pc, #8]	@ (8005d84 <I2C1_EV_IRQHandler+0x10>)
 8005d7a:	f002 ffa7 	bl	8008ccc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20000ca0 	.word	0x20000ca0

08005d88 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005d8c:	4802      	ldr	r0, [pc, #8]	@ (8005d98 <I2C1_ER_IRQHandler+0x10>)
 8005d8e:	f003 f90e 	bl	8008fae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20000ca0 	.word	0x20000ca0

08005d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005da0:	4802      	ldr	r0, [pc, #8]	@ (8005dac <USART1_IRQHandler+0x10>)
 8005da2:	f008 f8cb 	bl	800df3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000e44 	.word	0x20000e44

08005db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 8005db4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005db8:	f001 fdd0 	bl	800795c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005dbc:	bf00      	nop
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005dc4:	4802      	ldr	r0, [pc, #8]	@ (8005dd0 <DMA2_Stream0_IRQHandler+0x10>)
 8005dc6:	f001 f975 	bl	80070b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005dca:	bf00      	nop
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000c40 	.word	0x20000c40

08005dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005dd8:	4802      	ldr	r0, [pc, #8]	@ (8005de4 <OTG_FS_IRQHandler+0x10>)
 8005dda:	f005 faf4 	bl	800b3c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005dde:	bf00      	nop
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20002150 	.word	0x20002150

08005de8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8005dec:	bf00      	nop
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005df6:	b480      	push	{r7}
 8005df8:	af00      	add	r7, sp, #0
  return 1;
 8005dfa:	2301      	movs	r3, #1
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <_kill>:

int _kill(int pid, int sig)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005e10:	f00d faec 	bl	80133ec <__errno>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2216      	movs	r2, #22
 8005e18:	601a      	str	r2, [r3, #0]
  return -1;
 8005e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <_exit>:

void _exit (int status)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ffe7 	bl	8005e06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <_exit+0x12>

08005e3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	e00a      	b.n	8005e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005e4e:	f3af 8000 	nop.w
 8005e52:	4601      	mov	r1, r0
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	60ba      	str	r2, [r7, #8]
 8005e5a:	b2ca      	uxtb	r2, r1
 8005e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	3301      	adds	r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	dbf0      	blt.n	8005e4e <_read+0x12>
  }

  return len;
 8005e6c:	687b      	ldr	r3, [r7, #4]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b086      	sub	sp, #24
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	e009      	b.n	8005e9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	60ba      	str	r2, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	dbf1      	blt.n	8005e88 <_write+0x12>
  }
  return len;
 8005ea4:	687b      	ldr	r3, [r7, #4]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_close>:

int _close(int file)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ed6:	605a      	str	r2, [r3, #4]
  return 0;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <_isatty>:

int _isatty(int file)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005eee:	2301      	movs	r3, #1
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005f20:	4a14      	ldr	r2, [pc, #80]	@ (8005f74 <_sbrk+0x5c>)
 8005f22:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <_sbrk+0x60>)
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005f2c:	4b13      	ldr	r3, [pc, #76]	@ (8005f7c <_sbrk+0x64>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005f34:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <_sbrk+0x64>)
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <_sbrk+0x68>)
 8005f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005f3a:	4b10      	ldr	r3, [pc, #64]	@ (8005f7c <_sbrk+0x64>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4413      	add	r3, r2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d207      	bcs.n	8005f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f48:	f00d fa50 	bl	80133ec <__errno>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	220c      	movs	r2, #12
 8005f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295
 8005f56:	e009      	b.n	8005f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f58:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <_sbrk+0x64>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f5e:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <_sbrk+0x64>)
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	4a05      	ldr	r2, [pc, #20]	@ (8005f7c <_sbrk+0x64>)
 8005f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20020000 	.word	0x20020000
 8005f78:	00000400 	.word	0x00000400
 8005f7c:	20001864 	.word	0x20001864
 8005f80:	200029a0 	.word	0x200029a0

08005f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f88:	4b06      	ldr	r3, [pc, #24]	@ (8005fa4 <SystemInit+0x20>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	4a05      	ldr	r2, [pc, #20]	@ (8005fa4 <SystemInit+0x20>)
 8005f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f98:	bf00      	nop
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	e000ed00 	.word	0xe000ed00

08005fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005fe0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005fac:	f7ff ffea 	bl	8005f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005fb0:	480c      	ldr	r0, [pc, #48]	@ (8005fe4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005fb2:	490d      	ldr	r1, [pc, #52]	@ (8005fe8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005fec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005fb8:	e002      	b.n	8005fc0 <LoopCopyDataInit>

08005fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005fbe:	3304      	adds	r3, #4

08005fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005fc4:	d3f9      	bcc.n	8005fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8005ff4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005fcc:	e001      	b.n	8005fd2 <LoopFillZerobss>

08005fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005fd0:	3204      	adds	r2, #4

08005fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005fd4:	d3fb      	bcc.n	8005fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005fd6:	f00d fa0f 	bl	80133f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005fda:	f7fe fc45 	bl	8004868 <main>
  bx  lr    
 8005fde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005fe0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fe8:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8005fec:	08016024 	.word	0x08016024
  ldr r2, =_sbss
 8005ff0:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8005ff4:	200029a0 	.word	0x200029a0

08005ff8 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ff8:	e7fe      	b.n	8005ff8 <DMA1_Stream2_IRQHandler>
	...

08005ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006000:	4b0e      	ldr	r3, [pc, #56]	@ (800603c <HAL_Init+0x40>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a0d      	ldr	r2, [pc, #52]	@ (800603c <HAL_Init+0x40>)
 8006006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800600a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800600c:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <HAL_Init+0x40>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	@ (800603c <HAL_Init+0x40>)
 8006012:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006018:	4b08      	ldr	r3, [pc, #32]	@ (800603c <HAL_Init+0x40>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a07      	ldr	r2, [pc, #28]	@ (800603c <HAL_Init+0x40>)
 800601e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006024:	2003      	movs	r0, #3
 8006026:	f000 fe6b 	bl	8006d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800602a:	200f      	movs	r0, #15
 800602c:	f000 f808 	bl	8006040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006030:	f7ff fbdc 	bl	80057ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40023c00 	.word	0x40023c00

08006040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006048:	4b12      	ldr	r3, [pc, #72]	@ (8006094 <HAL_InitTick+0x54>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b12      	ldr	r3, [pc, #72]	@ (8006098 <HAL_InitTick+0x58>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4619      	mov	r1, r3
 8006052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006056:	fbb3 f3f1 	udiv	r3, r3, r1
 800605a:	fbb2 f3f3 	udiv	r3, r2, r3
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fe83 	bl	8006d6a <HAL_SYSTICK_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e00e      	b.n	800608c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b0f      	cmp	r3, #15
 8006072:	d80a      	bhi.n	800608a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006074:	2200      	movs	r2, #0
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	f000 fe4b 	bl	8006d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006080:	4a06      	ldr	r2, [pc, #24]	@ (800609c <HAL_InitTick+0x5c>)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	e000      	b.n	800608c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000010 	.word	0x20000010
 8006098:	20000018 	.word	0x20000018
 800609c:	20000014 	.word	0x20000014

080060a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060a4:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <HAL_IncTick+0x20>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <HAL_IncTick+0x24>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4413      	add	r3, r2
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <HAL_IncTick+0x24>)
 80060b2:	6013      	str	r3, [r2, #0]
}
 80060b4:	bf00      	nop
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	20000018 	.word	0x20000018
 80060c4:	20001868 	.word	0x20001868

080060c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return uwTick;
 80060cc:	4b03      	ldr	r3, [pc, #12]	@ (80060dc <HAL_GetTick+0x14>)
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20001868 	.word	0x20001868

080060e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060e8:	f7ff ffee 	bl	80060c8 <HAL_GetTick>
 80060ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d005      	beq.n	8006106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006124 <HAL_Delay+0x44>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006106:	bf00      	nop
 8006108:	f7ff ffde 	bl	80060c8 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	429a      	cmp	r2, r3
 8006116:	d8f7      	bhi.n	8006108 <HAL_Delay+0x28>
  {
  }
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000018 	.word	0x20000018

08006128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e033      	b.n	80061a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fb7e 	bl	8005848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b00      	cmp	r3, #0
 8006164:	d118      	bne.n	8006198 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800616e:	f023 0302 	bic.w	r3, r3, #2
 8006172:	f043 0202 	orr.w	r2, r3, #2
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fb68 	bl	8006850 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	f043 0201 	orr.w	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	641a      	str	r2, [r3, #64]	@ 0x40
 8006196:	e001      	b.n	800619c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d049      	beq.n	8006278 <HAL_ADC_IRQHandler+0xca>
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d046      	beq.n	8006278 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d105      	bne.n	8006202 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d12b      	bne.n	8006268 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006214:	2b00      	cmp	r3, #0
 8006216:	d127      	bne.n	8006268 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006230:	2b00      	cmp	r3, #0
 8006232:	d119      	bne.n	8006268 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0220 	bic.w	r2, r2, #32
 8006242:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	f043 0201 	orr.w	r2, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff f8af 	bl	80053cc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f06f 0212 	mvn.w	r2, #18
 8006276:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0304 	and.w	r3, r3, #4
 800627e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006286:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d057      	beq.n	800633e <HAL_ADC_IRQHandler+0x190>
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d054      	beq.n	800633e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d139      	bne.n	800632e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d006      	beq.n	80062d6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d12b      	bne.n	800632e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d124      	bne.n	800632e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d11d      	bne.n	800632e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d119      	bne.n	800632e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006308:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fc0c 	bl	8006b4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 020c 	mvn.w	r2, #12
 800633c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_ADC_IRQHandler+0x1d6>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d014      	beq.n	8006384 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10d      	bne.n	8006384 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f925 	bl	80065c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f06f 0201 	mvn.w	r2, #1
 8006382:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006392:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d015      	beq.n	80063c6 <HAL_ADC_IRQHandler+0x218>
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d012      	beq.n	80063c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a4:	f043 0202 	orr.w	r2, r3, #2
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0220 	mvn.w	r2, #32
 80063b4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f90e 	bl	80065d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0220 	mvn.w	r2, #32
 80063c4:	601a      	str	r2, [r3, #0]
  }
}
 80063c6:	bf00      	nop
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_ADC_Start_DMA+0x1e>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0ce      	b.n	800658c <HAL_ADC_Start_DMA+0x1bc>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b01      	cmp	r3, #1
 8006402:	d018      	beq.n	8006436 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006414:	4b5f      	ldr	r3, [pc, #380]	@ (8006594 <HAL_ADC_Start_DMA+0x1c4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5f      	ldr	r2, [pc, #380]	@ (8006598 <HAL_ADC_Start_DMA+0x1c8>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	0c9a      	lsrs	r2, r3, #18
 8006420:	4613      	mov	r3, r2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4413      	add	r3, r2
 8006426:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006428:	e002      	b.n	8006430 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	3b01      	subs	r3, #1
 800642e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f9      	bne.n	800642a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006444:	d107      	bne.n	8006456 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006454:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	f040 8086 	bne.w	8006572 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006490:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a4:	d106      	bne.n	80064b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064aa:	f023 0206 	bic.w	r2, r3, #6
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80064b2:	e002      	b.n	80064ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064c2:	4b36      	ldr	r3, [pc, #216]	@ (800659c <HAL_ADC_Start_DMA+0x1cc>)
 80064c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	4a35      	ldr	r2, [pc, #212]	@ (80065a0 <HAL_ADC_Start_DMA+0x1d0>)
 80064cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	4a34      	ldr	r2, [pc, #208]	@ (80065a4 <HAL_ADC_Start_DMA+0x1d4>)
 80064d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064da:	4a33      	ldr	r2, [pc, #204]	@ (80065a8 <HAL_ADC_Start_DMA+0x1d8>)
 80064dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80064e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80064f6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006506:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	334c      	adds	r3, #76	@ 0x4c
 8006512:	4619      	mov	r1, r3
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f000 fce2 	bl	8006ee0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10f      	bne.n	8006548 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d129      	bne.n	800658a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006544:	609a      	str	r2, [r3, #8]
 8006546:	e020      	b.n	800658a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a17      	ldr	r2, [pc, #92]	@ (80065ac <HAL_ADC_Start_DMA+0x1dc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d11b      	bne.n	800658a <HAL_ADC_Start_DMA+0x1ba>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d114      	bne.n	800658a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	e00b      	b.n	800658a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	f043 0210 	orr.w	r2, r3, #16
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	f043 0201 	orr.w	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000010 	.word	0x20000010
 8006598:	431bde83 	.word	0x431bde83
 800659c:	40012300 	.word	0x40012300
 80065a0:	08006a49 	.word	0x08006a49
 80065a4:	08006b03 	.word	0x08006b03
 80065a8:	08006b1f 	.word	0x08006b1f
 80065ac:	40012000 	.word	0x40012000

080065b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_ADC_ConfigChannel+0x1c>
 8006604:	2302      	movs	r3, #2
 8006606:	e113      	b.n	8006830 <HAL_ADC_ConfigChannel+0x244>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b09      	cmp	r3, #9
 8006616:	d925      	bls.n	8006664 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	4613      	mov	r3, r2
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4413      	add	r3, r2
 800662c:	3b1e      	subs	r3, #30
 800662e:	2207      	movs	r2, #7
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43da      	mvns	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	400a      	ands	r2, r1
 800663c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68d9      	ldr	r1, [r3, #12]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	4618      	mov	r0, r3
 8006650:	4603      	mov	r3, r0
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4403      	add	r3, r0
 8006656:	3b1e      	subs	r3, #30
 8006658:	409a      	lsls	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	e022      	b.n	80066aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6919      	ldr	r1, [r3, #16]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	4613      	mov	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	4413      	add	r3, r2
 8006678:	2207      	movs	r2, #7
 800667a:	fa02 f303 	lsl.w	r3, r2, r3
 800667e:	43da      	mvns	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	400a      	ands	r2, r1
 8006686:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6919      	ldr	r1, [r3, #16]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	b29b      	uxth	r3, r3
 8006698:	4618      	mov	r0, r3
 800669a:	4603      	mov	r3, r0
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4403      	add	r3, r0
 80066a0:	409a      	lsls	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d824      	bhi.n	80066fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	3b05      	subs	r3, #5
 80066c4:	221f      	movs	r2, #31
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43da      	mvns	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	400a      	ands	r2, r1
 80066d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4618      	mov	r0, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	3b05      	subs	r3, #5
 80066ee:	fa00 f203 	lsl.w	r2, r0, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80066fa:	e04c      	b.n	8006796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	2b0c      	cmp	r3, #12
 8006702:	d824      	bhi.n	800674e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	3b23      	subs	r3, #35	@ 0x23
 8006716:	221f      	movs	r2, #31
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	43da      	mvns	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	400a      	ands	r2, r1
 8006724:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	4618      	mov	r0, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	3b23      	subs	r3, #35	@ 0x23
 8006740:	fa00 f203 	lsl.w	r2, r0, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30
 800674c:	e023      	b.n	8006796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	3b41      	subs	r3, #65	@ 0x41
 8006760:	221f      	movs	r2, #31
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43da      	mvns	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	400a      	ands	r2, r1
 800676e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	4618      	mov	r0, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	3b41      	subs	r3, #65	@ 0x41
 800678a:	fa00 f203 	lsl.w	r2, r0, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006796:	4b29      	ldr	r3, [pc, #164]	@ (800683c <HAL_ADC_ConfigChannel+0x250>)
 8006798:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a28      	ldr	r2, [pc, #160]	@ (8006840 <HAL_ADC_ConfigChannel+0x254>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d10f      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x1d8>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b12      	cmp	r3, #18
 80067aa:	d10b      	bne.n	80067c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006840 <HAL_ADC_ConfigChannel+0x254>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d12b      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x23a>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006844 <HAL_ADC_ConfigChannel+0x258>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <HAL_ADC_ConfigChannel+0x1f4>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b11      	cmp	r3, #17
 80067de:	d122      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a11      	ldr	r2, [pc, #68]	@ (8006844 <HAL_ADC_ConfigChannel+0x258>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d111      	bne.n	8006826 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006802:	4b11      	ldr	r3, [pc, #68]	@ (8006848 <HAL_ADC_ConfigChannel+0x25c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a11      	ldr	r2, [pc, #68]	@ (800684c <HAL_ADC_ConfigChannel+0x260>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	0c9a      	lsrs	r2, r3, #18
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006818:	e002      	b.n	8006820 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	3b01      	subs	r3, #1
 800681e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f9      	bne.n	800681a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40012300 	.word	0x40012300
 8006840:	40012000 	.word	0x40012000
 8006844:	10000012 	.word	0x10000012
 8006848:	20000010 	.word	0x20000010
 800684c:	431bde83 	.word	0x431bde83

08006850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006858:	4b79      	ldr	r3, [pc, #484]	@ (8006a40 <ADC_Init+0x1f0>)
 800685a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6859      	ldr	r1, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	021a      	lsls	r2, r3, #8
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6859      	ldr	r1, [r3, #4]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6899      	ldr	r1, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e2:	4a58      	ldr	r2, [pc, #352]	@ (8006a44 <ADC_Init+0x1f4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d022      	beq.n	800692e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80068f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6899      	ldr	r1, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6899      	ldr	r1, [r3, #8]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	e00f      	b.n	800694e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800693c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800694c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0202 	bic.w	r2, r2, #2
 800695c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6899      	ldr	r1, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	7e1b      	ldrb	r3, [r3, #24]
 8006968:	005a      	lsls	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800698a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800699a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	3b01      	subs	r3, #1
 80069a8:	035a      	lsls	r2, r3, #13
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
 80069b2:	e007      	b.n	80069c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80069d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	3b01      	subs	r3, #1
 80069e0:	051a      	lsls	r2, r3, #20
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80069f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6899      	ldr	r1, [r3, #8]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a06:	025a      	lsls	r2, r3, #9
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6899      	ldr	r1, [r3, #8]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	029a      	lsls	r2, r3, #10
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	609a      	str	r2, [r3, #8]
}
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	40012300 	.word	0x40012300
 8006a44:	0f000001 	.word	0x0f000001

08006a48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d13c      	bne.n	8006adc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d12b      	bne.n	8006ad4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d127      	bne.n	8006ad4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d006      	beq.n	8006aa0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d119      	bne.n	8006ad4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0220 	bic.w	r2, r2, #32
 8006aae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	f043 0201 	orr.w	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7fe fc79 	bl	80053cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ada:	e00e      	b.n	8006afa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f7ff fd75 	bl	80065d8 <HAL_ADC_ErrorCallback>
}
 8006aee:	e004      	b.n	8006afa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff fd4d 	bl	80065b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b084      	sub	sp, #16
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2240      	movs	r2, #64	@ 0x40
 8006b30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f043 0204 	orr.w	r2, r3, #4
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff fd4a 	bl	80065d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b92:	4a04      	ldr	r2, [pc, #16]	@ (8006ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	60d3      	str	r3, [r2, #12]
}
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	e000ed00 	.word	0xe000ed00

08006ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bac:	4b04      	ldr	r3, [pc, #16]	@ (8006bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	f003 0307 	and.w	r3, r3, #7
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	e000ed00 	.word	0xe000ed00

08006bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	db0b      	blt.n	8006bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	f003 021f 	and.w	r2, r3, #31
 8006bdc:	4907      	ldr	r1, [pc, #28]	@ (8006bfc <__NVIC_EnableIRQ+0x38>)
 8006bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be2:	095b      	lsrs	r3, r3, #5
 8006be4:	2001      	movs	r0, #1
 8006be6:	fa00 f202 	lsl.w	r2, r0, r2
 8006bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006bee:	bf00      	nop
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	e000e100 	.word	0xe000e100

08006c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	6039      	str	r1, [r7, #0]
 8006c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	db0a      	blt.n	8006c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	490c      	ldr	r1, [pc, #48]	@ (8006c4c <__NVIC_SetPriority+0x4c>)
 8006c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1e:	0112      	lsls	r2, r2, #4
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	440b      	add	r3, r1
 8006c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c28:	e00a      	b.n	8006c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	4908      	ldr	r1, [pc, #32]	@ (8006c50 <__NVIC_SetPriority+0x50>)
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	3b04      	subs	r3, #4
 8006c38:	0112      	lsls	r2, r2, #4
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	761a      	strb	r2, [r3, #24]
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	e000e100 	.word	0xe000e100
 8006c50:	e000ed00 	.word	0xe000ed00

08006c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b089      	sub	sp, #36	@ 0x24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f1c3 0307 	rsb	r3, r3, #7
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	bf28      	it	cs
 8006c72:	2304      	movcs	r3, #4
 8006c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	2b06      	cmp	r3, #6
 8006c7c:	d902      	bls.n	8006c84 <NVIC_EncodePriority+0x30>
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	3b03      	subs	r3, #3
 8006c82:	e000      	b.n	8006c86 <NVIC_EncodePriority+0x32>
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	43da      	mvns	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	401a      	ands	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca6:	43d9      	mvns	r1, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cac:	4313      	orrs	r3, r2
         );
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3724      	adds	r7, #36	@ 0x24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
	...

08006cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ccc:	d301      	bcc.n	8006cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e00f      	b.n	8006cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006cfc <SysTick_Config+0x40>)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cda:	210f      	movs	r1, #15
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	f7ff ff8e 	bl	8006c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ce4:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <SysTick_Config+0x40>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cea:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <SysTick_Config+0x40>)
 8006cec:	2207      	movs	r2, #7
 8006cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	e000e010 	.word	0xe000e010

08006d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff ff29 	bl	8006b60 <__NVIC_SetPriorityGrouping>
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d28:	f7ff ff3e 	bl	8006ba8 <__NVIC_GetPriorityGrouping>
 8006d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	6978      	ldr	r0, [r7, #20]
 8006d34:	f7ff ff8e 	bl	8006c54 <NVIC_EncodePriority>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff ff5d 	bl	8006c00 <__NVIC_SetPriority>
}
 8006d46:	bf00      	nop
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	4603      	mov	r3, r0
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff ff31 	bl	8006bc4 <__NVIC_EnableIRQ>
}
 8006d62:	bf00      	nop
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff ffa2 	bl	8006cbc <SysTick_Config>
 8006d78:	4603      	mov	r3, r0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d90:	f7ff f99a 	bl	80060c8 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e099      	b.n	8006ed4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0201 	bic.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dc0:	e00f      	b.n	8006de2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dc2:	f7ff f981 	bl	80060c8 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b05      	cmp	r3, #5
 8006dce:	d908      	bls.n	8006de2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2203      	movs	r2, #3
 8006dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e078      	b.n	8006ed4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e8      	bne.n	8006dc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4b38      	ldr	r3, [pc, #224]	@ (8006edc <HAL_DMA_Init+0x158>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d107      	bne.n	8006e4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e44:	4313      	orrs	r3, r2
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d117      	bne.n	8006ea6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00e      	beq.n	8006ea6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fb1b 	bl	80074c4 <DMA_CheckFifoParam>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2240      	movs	r2, #64	@ 0x40
 8006e98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e016      	b.n	8006ed4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fad2 	bl	8007458 <DMA_CalcBaseAndBitshift>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ebc:	223f      	movs	r2, #63	@ 0x3f
 8006ebe:	409a      	lsls	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	f010803f 	.word	0xf010803f

08006ee0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_DMA_Start_IT+0x26>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e040      	b.n	8006f88 <HAL_DMA_Start_IT+0xa8>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d12f      	bne.n	8006f7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fa64 	bl	80073fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f38:	223f      	movs	r2, #63	@ 0x3f
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0216 	orr.w	r2, r2, #22
 8006f4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0208 	orr.w	r2, r2, #8
 8006f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e005      	b.n	8006f86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006f82:	2302      	movs	r3, #2
 8006f84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006f9e:	f7ff f893 	bl	80060c8 <HAL_GetTick>
 8006fa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d008      	beq.n	8006fc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2280      	movs	r2, #128	@ 0x80
 8006fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e052      	b.n	8007068 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0216 	bic.w	r2, r2, #22
 8006fd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fe0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <HAL_DMA_Abort+0x62>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0208 	bic.w	r2, r2, #8
 8007000:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007012:	e013      	b.n	800703c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007014:	f7ff f858 	bl	80060c8 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b05      	cmp	r3, #5
 8007020:	d90c      	bls.n	800703c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2203      	movs	r2, #3
 800702c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e015      	b.n	8007068 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e4      	bne.n	8007014 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704e:	223f      	movs	r2, #63	@ 0x3f
 8007050:	409a      	lsls	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d004      	beq.n	800708e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2280      	movs	r2, #128	@ 0x80
 8007088:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e00c      	b.n	80070a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2205      	movs	r2, #5
 8007092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070c0:	4b8e      	ldr	r3, [pc, #568]	@ (80072fc <HAL_DMA_IRQHandler+0x248>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007300 <HAL_DMA_IRQHandler+0x24c>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	0a9b      	lsrs	r3, r3, #10
 80070cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070de:	2208      	movs	r2, #8
 80070e0:	409a      	lsls	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4013      	ands	r3, r2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01a      	beq.n	8007120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0304 	and.w	r3, r3, #4
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d013      	beq.n	8007120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0204 	bic.w	r2, r2, #4
 8007106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710c:	2208      	movs	r2, #8
 800710e:	409a      	lsls	r2, r3
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007118:	f043 0201 	orr.w	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007124:	2201      	movs	r2, #1
 8007126:	409a      	lsls	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4013      	ands	r3, r2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d012      	beq.n	8007156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007142:	2201      	movs	r2, #1
 8007144:	409a      	lsls	r2, r3
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714e:	f043 0202 	orr.w	r2, r3, #2
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800715a:	2204      	movs	r2, #4
 800715c:	409a      	lsls	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4013      	ands	r3, r2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00b      	beq.n	800718c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007178:	2204      	movs	r2, #4
 800717a:	409a      	lsls	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007184:	f043 0204 	orr.w	r2, r3, #4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007190:	2210      	movs	r2, #16
 8007192:	409a      	lsls	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d043      	beq.n	8007224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d03c      	beq.n	8007224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	2210      	movs	r2, #16
 80071b0:	409a      	lsls	r2, r3
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d108      	bne.n	80071e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d024      	beq.n	8007224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
 80071e2:	e01f      	b.n	8007224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01b      	beq.n	8007224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
 80071f4:	e016      	b.n	8007224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0208 	bic.w	r2, r2, #8
 8007212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007228:	2220      	movs	r2, #32
 800722a:	409a      	lsls	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 808f 	beq.w	8007354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8087 	beq.w	8007354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800724a:	2220      	movs	r2, #32
 800724c:	409a      	lsls	r2, r3
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b05      	cmp	r3, #5
 800725c:	d136      	bne.n	80072cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0216 	bic.w	r2, r2, #22
 800726c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695a      	ldr	r2, [r3, #20]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800727c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	d103      	bne.n	800728e <HAL_DMA_IRQHandler+0x1da>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800728a:	2b00      	cmp	r3, #0
 800728c:	d007      	beq.n	800729e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0208 	bic.w	r2, r2, #8
 800729c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a2:	223f      	movs	r2, #63	@ 0x3f
 80072a4:	409a      	lsls	r2, r3
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d07e      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4798      	blx	r3
        }
        return;
 80072ca:	e079      	b.n	80073c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d01d      	beq.n	8007316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10d      	bne.n	8007304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d031      	beq.n	8007354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
 80072f8:	e02c      	b.n	8007354 <HAL_DMA_IRQHandler+0x2a0>
 80072fa:	bf00      	nop
 80072fc:	20000010 	.word	0x20000010
 8007300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007308:	2b00      	cmp	r3, #0
 800730a:	d023      	beq.n	8007354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
 8007314:	e01e      	b.n	8007354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10f      	bne.n	8007344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0210 	bic.w	r2, r2, #16
 8007332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007358:	2b00      	cmp	r3, #0
 800735a:	d032      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d022      	beq.n	80073ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2205      	movs	r2, #5
 800736c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3301      	adds	r3, #1
 8007384:	60bb      	str	r3, [r7, #8]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	429a      	cmp	r2, r3
 800738a:	d307      	bcc.n	800739c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f2      	bne.n	8007380 <HAL_DMA_IRQHandler+0x2cc>
 800739a:	e000      	b.n	800739e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800739c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d005      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	e000      	b.n	80073c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80073c0:	bf00      	nop
    }
  }
}
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073d6:	b2db      	uxtb	r3, r3
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007418:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d108      	bne.n	800743c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800743a:	e007      	b.n	800744c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	60da      	str	r2, [r3, #12]
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	3b10      	subs	r3, #16
 8007468:	4a14      	ldr	r2, [pc, #80]	@ (80074bc <DMA_CalcBaseAndBitshift+0x64>)
 800746a:	fba2 2303 	umull	r2, r3, r2, r3
 800746e:	091b      	lsrs	r3, r3, #4
 8007470:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007472:	4a13      	ldr	r2, [pc, #76]	@ (80074c0 <DMA_CalcBaseAndBitshift+0x68>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b03      	cmp	r3, #3
 8007484:	d909      	bls.n	800749a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	659a      	str	r2, [r3, #88]	@ 0x58
 8007498:	e007      	b.n	80074aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80074a2:	f023 0303 	bic.w	r3, r3, #3
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	aaaaaaab 	.word	0xaaaaaaab
 80074c0:	08015e04 	.word	0x08015e04

080074c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11f      	bne.n	800751e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d856      	bhi.n	8007592 <DMA_CheckFifoParam+0xce>
 80074e4:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <DMA_CheckFifoParam+0x28>)
 80074e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	0800750f 	.word	0x0800750f
 80074f4:	080074fd 	.word	0x080074fd
 80074f8:	08007593 	.word	0x08007593
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d046      	beq.n	8007596 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800750c:	e043      	b.n	8007596 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007512:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007516:	d140      	bne.n	800759a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800751c:	e03d      	b.n	800759a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007526:	d121      	bne.n	800756c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d837      	bhi.n	800759e <DMA_CheckFifoParam+0xda>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <DMA_CheckFifoParam+0x70>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007545 	.word	0x08007545
 8007538:	0800754b 	.word	0x0800754b
 800753c:	08007545 	.word	0x08007545
 8007540:	0800755d 	.word	0x0800755d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
      break;
 8007548:	e030      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d025      	beq.n	80075a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800755a:	e022      	b.n	80075a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007564:	d11f      	bne.n	80075a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800756a:	e01c      	b.n	80075a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b02      	cmp	r3, #2
 8007570:	d903      	bls.n	800757a <DMA_CheckFifoParam+0xb6>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d003      	beq.n	8007580 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007578:	e018      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]
      break;
 800757e:	e015      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00e      	beq.n	80075aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	73fb      	strb	r3, [r7, #15]
      break;
 8007590:	e00b      	b.n	80075aa <DMA_CheckFifoParam+0xe6>
      break;
 8007592:	bf00      	nop
 8007594:	e00a      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      break;
 8007596:	bf00      	nop
 8007598:	e008      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      break;
 800759a:	bf00      	nop
 800759c:	e006      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      break;
 800759e:	bf00      	nop
 80075a0:	e004      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      break;
 80075a2:	bf00      	nop
 80075a4:	e002      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      break;   
 80075a6:	bf00      	nop
 80075a8:	e000      	b.n	80075ac <DMA_CheckFifoParam+0xe8>
      break;
 80075aa:	bf00      	nop
    }
  } 
  
  return status; 
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop

080075bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075bc:	b480      	push	{r7}
 80075be:	b089      	sub	sp, #36	@ 0x24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e159      	b.n	800788c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80075d8:	2201      	movs	r2, #1
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4013      	ands	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	f040 8148 	bne.w	8007886 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f003 0303 	and.w	r3, r3, #3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d005      	beq.n	800760e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800760a:	2b02      	cmp	r3, #2
 800760c:	d130      	bne.n	8007670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	2203      	movs	r2, #3
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007644:	2201      	movs	r2, #1
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	43db      	mvns	r3, r3
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	4013      	ands	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 0201 	and.w	r2, r3, #1
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	4313      	orrs	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f003 0303 	and.w	r3, r3, #3
 8007678:	2b03      	cmp	r3, #3
 800767a:	d017      	beq.n	80076ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	2203      	movs	r2, #3
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	43db      	mvns	r3, r3
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4013      	ands	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d123      	bne.n	8007700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	08da      	lsrs	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3208      	adds	r2, #8
 80076c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	220f      	movs	r2, #15
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	08da      	lsrs	r2, r3, #3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3208      	adds	r2, #8
 80076fa:	69b9      	ldr	r1, [r7, #24]
 80076fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	2203      	movs	r2, #3
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	4013      	ands	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f003 0203 	and.w	r2, r3, #3
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4313      	orrs	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80a2 	beq.w	8007886 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	4b57      	ldr	r3, [pc, #348]	@ (80078a4 <HAL_GPIO_Init+0x2e8>)
 8007748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800774a:	4a56      	ldr	r2, [pc, #344]	@ (80078a4 <HAL_GPIO_Init+0x2e8>)
 800774c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007750:	6453      	str	r3, [r2, #68]	@ 0x44
 8007752:	4b54      	ldr	r3, [pc, #336]	@ (80078a4 <HAL_GPIO_Init+0x2e8>)
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800775e:	4a52      	ldr	r2, [pc, #328]	@ (80078a8 <HAL_GPIO_Init+0x2ec>)
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	089b      	lsrs	r3, r3, #2
 8007764:	3302      	adds	r3, #2
 8007766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800776a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	220f      	movs	r2, #15
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	43db      	mvns	r3, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4013      	ands	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a49      	ldr	r2, [pc, #292]	@ (80078ac <HAL_GPIO_Init+0x2f0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d019      	beq.n	80077be <HAL_GPIO_Init+0x202>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a48      	ldr	r2, [pc, #288]	@ (80078b0 <HAL_GPIO_Init+0x2f4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <HAL_GPIO_Init+0x1fe>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a47      	ldr	r2, [pc, #284]	@ (80078b4 <HAL_GPIO_Init+0x2f8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00d      	beq.n	80077b6 <HAL_GPIO_Init+0x1fa>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a46      	ldr	r2, [pc, #280]	@ (80078b8 <HAL_GPIO_Init+0x2fc>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d007      	beq.n	80077b2 <HAL_GPIO_Init+0x1f6>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a45      	ldr	r2, [pc, #276]	@ (80078bc <HAL_GPIO_Init+0x300>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d101      	bne.n	80077ae <HAL_GPIO_Init+0x1f2>
 80077aa:	2304      	movs	r3, #4
 80077ac:	e008      	b.n	80077c0 <HAL_GPIO_Init+0x204>
 80077ae:	2307      	movs	r3, #7
 80077b0:	e006      	b.n	80077c0 <HAL_GPIO_Init+0x204>
 80077b2:	2303      	movs	r3, #3
 80077b4:	e004      	b.n	80077c0 <HAL_GPIO_Init+0x204>
 80077b6:	2302      	movs	r3, #2
 80077b8:	e002      	b.n	80077c0 <HAL_GPIO_Init+0x204>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <HAL_GPIO_Init+0x204>
 80077be:	2300      	movs	r3, #0
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	f002 0203 	and.w	r2, r2, #3
 80077c6:	0092      	lsls	r2, r2, #2
 80077c8:	4093      	lsls	r3, r2
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077d0:	4935      	ldr	r1, [pc, #212]	@ (80078a8 <HAL_GPIO_Init+0x2ec>)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	089b      	lsrs	r3, r3, #2
 80077d6:	3302      	adds	r3, #2
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077de:	4b38      	ldr	r3, [pc, #224]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	43db      	mvns	r3, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4013      	ands	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007802:	4a2f      	ldr	r2, [pc, #188]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007808:	4b2d      	ldr	r3, [pc, #180]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	43db      	mvns	r3, r3
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	4013      	ands	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800782c:	4a24      	ldr	r2, [pc, #144]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007832:	4b23      	ldr	r3, [pc, #140]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	43db      	mvns	r3, r3
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	4013      	ands	r3, r2
 8007840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007856:	4a1a      	ldr	r2, [pc, #104]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800785c:	4b18      	ldr	r3, [pc, #96]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	43db      	mvns	r3, r3
 8007866:	69ba      	ldr	r2, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007880:	4a0f      	ldr	r2, [pc, #60]	@ (80078c0 <HAL_GPIO_Init+0x304>)
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	f67f aea2 	bls.w	80075d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	3724      	adds	r7, #36	@ 0x24
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40023800 	.word	0x40023800
 80078a8:	40013800 	.word	0x40013800
 80078ac:	40020000 	.word	0x40020000
 80078b0:	40020400 	.word	0x40020400
 80078b4:	40020800 	.word	0x40020800
 80078b8:	40020c00 	.word	0x40020c00
 80078bc:	40021000 	.word	0x40021000
 80078c0:	40013c00 	.word	0x40013c00

080078c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	887b      	ldrh	r3, [r7, #2]
 80078d6:	4013      	ands	r3, r2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80078dc:	2301      	movs	r3, #1
 80078de:	73fb      	strb	r3, [r7, #15]
 80078e0:	e001      	b.n	80078e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078e2:	2300      	movs	r3, #0
 80078e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	807b      	strh	r3, [r7, #2]
 8007900:	4613      	mov	r3, r2
 8007902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007904:	787b      	ldrb	r3, [r7, #1]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800790a:	887a      	ldrh	r2, [r7, #2]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007910:	e003      	b.n	800791a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007912:	887b      	ldrh	r3, [r7, #2]
 8007914:	041a      	lsls	r2, r3, #16
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	619a      	str	r2, [r3, #24]
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007938:	887a      	ldrh	r2, [r7, #2]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4013      	ands	r3, r2
 800793e:	041a      	lsls	r2, r3, #16
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	43d9      	mvns	r1, r3
 8007944:	887b      	ldrh	r3, [r7, #2]
 8007946:	400b      	ands	r3, r1
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	619a      	str	r2, [r3, #24]
}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
	...

0800795c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007966:	4b08      	ldr	r3, [pc, #32]	@ (8007988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007968:	695a      	ldr	r2, [r3, #20]
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	4013      	ands	r3, r2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007972:	4a05      	ldr	r2, [pc, #20]	@ (8007988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd fd36 	bl	80053ec <HAL_GPIO_EXTI_Callback>
  }
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40013c00 	.word	0x40013c00

0800798c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e12b      	b.n	8007bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fd ffe4 	bl	8005980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2224      	movs	r2, #36	@ 0x24
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80079f0:	f005 fa34 	bl	800ce5c <HAL_RCC_GetPCLK1Freq>
 80079f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4a81      	ldr	r2, [pc, #516]	@ (8007c00 <HAL_I2C_Init+0x274>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d807      	bhi.n	8007a10 <HAL_I2C_Init+0x84>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4a80      	ldr	r2, [pc, #512]	@ (8007c04 <HAL_I2C_Init+0x278>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	bf94      	ite	ls
 8007a08:	2301      	movls	r3, #1
 8007a0a:	2300      	movhi	r3, #0
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	e006      	b.n	8007a1e <HAL_I2C_Init+0x92>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a7d      	ldr	r2, [pc, #500]	@ (8007c08 <HAL_I2C_Init+0x27c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	bf94      	ite	ls
 8007a18:	2301      	movls	r3, #1
 8007a1a:	2300      	movhi	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e0e7      	b.n	8007bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4a78      	ldr	r2, [pc, #480]	@ (8007c0c <HAL_I2C_Init+0x280>)
 8007a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2e:	0c9b      	lsrs	r3, r3, #18
 8007a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	4a6a      	ldr	r2, [pc, #424]	@ (8007c00 <HAL_I2C_Init+0x274>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d802      	bhi.n	8007a60 <HAL_I2C_Init+0xd4>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	e009      	b.n	8007a74 <HAL_I2C_Init+0xe8>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	4a69      	ldr	r2, [pc, #420]	@ (8007c10 <HAL_I2C_Init+0x284>)
 8007a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a70:	099b      	lsrs	r3, r3, #6
 8007a72:	3301      	adds	r3, #1
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	495c      	ldr	r1, [pc, #368]	@ (8007c00 <HAL_I2C_Init+0x274>)
 8007a90:	428b      	cmp	r3, r1
 8007a92:	d819      	bhi.n	8007ac8 <HAL_I2C_Init+0x13c>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	1e59      	subs	r1, r3, #1
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aa2:	1c59      	adds	r1, r3, #1
 8007aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007aa8:	400b      	ands	r3, r1
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_I2C_Init+0x138>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1e59      	subs	r1, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007abc:	3301      	adds	r3, #1
 8007abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ac2:	e051      	b.n	8007b68 <HAL_I2C_Init+0x1dc>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	e04f      	b.n	8007b68 <HAL_I2C_Init+0x1dc>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d111      	bne.n	8007af4 <HAL_I2C_Init+0x168>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1e58      	subs	r0, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6859      	ldr	r1, [r3, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	440b      	add	r3, r1
 8007ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf0c      	ite	eq
 8007aec:	2301      	moveq	r3, #1
 8007aee:	2300      	movne	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	e012      	b.n	8007b1a <HAL_I2C_Init+0x18e>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	1e58      	subs	r0, r3, #1
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6859      	ldr	r1, [r3, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	0099      	lsls	r1, r3, #2
 8007b04:	440b      	add	r3, r1
 8007b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	bf0c      	ite	eq
 8007b14:	2301      	moveq	r3, #1
 8007b16:	2300      	movne	r3, #0
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_I2C_Init+0x196>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e022      	b.n	8007b68 <HAL_I2C_Init+0x1dc>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10e      	bne.n	8007b48 <HAL_I2C_Init+0x1bc>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1e58      	subs	r0, r3, #1
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6859      	ldr	r1, [r3, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	440b      	add	r3, r1
 8007b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b46:	e00f      	b.n	8007b68 <HAL_I2C_Init+0x1dc>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1e58      	subs	r0, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6859      	ldr	r1, [r3, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	0099      	lsls	r1, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	6809      	ldr	r1, [r1, #0]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69da      	ldr	r2, [r3, #28]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6911      	ldr	r1, [r2, #16]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68d2      	ldr	r2, [r2, #12]
 8007ba2:	4311      	orrs	r1, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0201 	orr.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	000186a0 	.word	0x000186a0
 8007c04:	001e847f 	.word	0x001e847f
 8007c08:	003d08ff 	.word	0x003d08ff
 8007c0c:	431bde83 	.word	0x431bde83
 8007c10:	10624dd3 	.word	0x10624dd3

08007c14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c26:	2b80      	cmp	r3, #128	@ 0x80
 8007c28:	d103      	bne.n	8007c32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]
  }
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	817b      	strh	r3, [r7, #10]
 8007c50:	4613      	mov	r3, r2
 8007c52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c54:	f7fe fa38 	bl	80060c8 <HAL_GetTick>
 8007c58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	f040 80e0 	bne.w	8007e28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2319      	movs	r3, #25
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4970      	ldr	r1, [pc, #448]	@ (8007e34 <HAL_I2C_Master_Transmit+0x1f4>)
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f002 ffe0 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e0d3      	b.n	8007e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_I2C_Master_Transmit+0x50>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e0cc      	b.n	8007e2a <HAL_I2C_Master_Transmit+0x1ea>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d007      	beq.n	8007cb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0201 	orr.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007cc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2221      	movs	r2, #33	@ 0x21
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	893a      	ldrh	r2, [r7, #8]
 8007ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4a50      	ldr	r2, [pc, #320]	@ (8007e38 <HAL_I2C_Master_Transmit+0x1f8>)
 8007cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007cf8:	8979      	ldrh	r1, [r7, #10]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f002 fbd6 	bl	800a4b0 <I2C_MasterRequestWrite>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e08d      	b.n	8007e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	613b      	str	r3, [r7, #16]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	613b      	str	r3, [r7, #16]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	613b      	str	r3, [r7, #16]
 8007d22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007d24:	e066      	b.n	8007df4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	6a39      	ldr	r1, [r7, #32]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f003 f89e 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00d      	beq.n	8007d52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d107      	bne.n	8007d4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e06b      	b.n	8007e2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d62:	1c5a      	adds	r2, r3, #1
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d11b      	bne.n	8007dc8 <HAL_I2C_Master_Transmit+0x188>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	6a39      	ldr	r1, [r7, #32]
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f003 f895 	bl	800aefc <I2C_WaitOnBTFFlagUntilTimeout>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00d      	beq.n	8007df4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d107      	bne.n	8007df0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e01a      	b.n	8007e2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d194      	bne.n	8007d26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	e000      	b.n	8007e2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007e28:	2302      	movs	r3, #2
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	00100002 	.word	0x00100002
 8007e38:	ffff0000 	.word	0xffff0000

08007e3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b088      	sub	sp, #32
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	4608      	mov	r0, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	817b      	strh	r3, [r7, #10]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	813b      	strh	r3, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e56:	f7fe f937 	bl	80060c8 <HAL_GetTick>
 8007e5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	f040 80d9 	bne.w	800801c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	2319      	movs	r3, #25
 8007e70:	2201      	movs	r2, #1
 8007e72:	496d      	ldr	r1, [pc, #436]	@ (8008028 <HAL_I2C_Mem_Write+0x1ec>)
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f002 fedf 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e0cc      	b.n	800801e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d101      	bne.n	8007e92 <HAL_I2C_Mem_Write+0x56>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	e0c5      	b.n	800801e <HAL_I2C_Mem_Write+0x1e2>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d007      	beq.n	8007eb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0201 	orr.w	r2, r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ec6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2221      	movs	r2, #33	@ 0x21
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2240      	movs	r2, #64	@ 0x40
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a3a      	ldr	r2, [r7, #32]
 8007ee2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800802c <HAL_I2C_Mem_Write+0x1f0>)
 8007ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007efa:	88f8      	ldrh	r0, [r7, #6]
 8007efc:	893a      	ldrh	r2, [r7, #8]
 8007efe:	8979      	ldrh	r1, [r7, #10]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	4603      	mov	r3, r0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f002 fb52 	bl	800a5b4 <I2C_RequestMemoryWrite>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d052      	beq.n	8007fbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e081      	b.n	800801e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f002 ffa4 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00d      	beq.n	8007f46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d107      	bne.n	8007f42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e06b      	b.n	800801e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d11b      	bne.n	8007fbc <HAL_I2C_Mem_Write+0x180>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d017      	beq.n	8007fbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1aa      	bne.n	8007f1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f002 ff97 	bl	800aefc <I2C_WaitOnBTFFlagUntilTimeout>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00d      	beq.n	8007ff0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d107      	bne.n	8007fec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e016      	b.n	800801e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2220      	movs	r2, #32
 8008004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	e000      	b.n	800801e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
  }
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	00100002 	.word	0x00100002
 800802c:	ffff0000 	.word	0xffff0000

08008030 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08c      	sub	sp, #48	@ 0x30
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	4608      	mov	r0, r1
 800803a:	4611      	mov	r1, r2
 800803c:	461a      	mov	r2, r3
 800803e:	4603      	mov	r3, r0
 8008040:	817b      	strh	r3, [r7, #10]
 8008042:	460b      	mov	r3, r1
 8008044:	813b      	strh	r3, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800804a:	f7fe f83d 	bl	80060c8 <HAL_GetTick>
 800804e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b20      	cmp	r3, #32
 800805a:	f040 8214 	bne.w	8008486 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	2319      	movs	r3, #25
 8008064:	2201      	movs	r2, #1
 8008066:	497b      	ldr	r1, [pc, #492]	@ (8008254 <HAL_I2C_Mem_Read+0x224>)
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f002 fde5 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
 8008076:	e207      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800807e:	2b01      	cmp	r3, #1
 8008080:	d101      	bne.n	8008086 <HAL_I2C_Mem_Read+0x56>
 8008082:	2302      	movs	r3, #2
 8008084:	e200      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b01      	cmp	r3, #1
 800809a:	d007      	beq.n	80080ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2222      	movs	r2, #34	@ 0x22
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2240      	movs	r2, #64	@ 0x40
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80080dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4a5b      	ldr	r2, [pc, #364]	@ (8008258 <HAL_I2C_Mem_Read+0x228>)
 80080ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080ee:	88f8      	ldrh	r0, [r7, #6]
 80080f0:	893a      	ldrh	r2, [r7, #8]
 80080f2:	8979      	ldrh	r1, [r7, #10]
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4603      	mov	r3, r0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f002 faee 	bl	800a6e0 <I2C_RequestMemoryRead>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e1bc      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008112:	2b00      	cmp	r3, #0
 8008114:	d113      	bne.n	800813e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008116:	2300      	movs	r3, #0
 8008118:	623b      	str	r3, [r7, #32]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	623b      	str	r3, [r7, #32]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	623b      	str	r3, [r7, #32]
 800812a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	e190      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008142:	2b01      	cmp	r3, #1
 8008144:	d11b      	bne.n	800817e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008154:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	e170      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008182:	2b02      	cmp	r3, #2
 8008184:	d11b      	bne.n	80081be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008194:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695b      	ldr	r3, [r3, #20]
 80081b0:	61bb      	str	r3, [r7, #24]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	e150      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699b      	ldr	r3, [r3, #24]
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80081d4:	e144      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081da:	2b03      	cmp	r3, #3
 80081dc:	f200 80f1 	bhi.w	80083c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d123      	bne.n	8008230 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f002 feff 	bl	800aff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e145      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008218:	3b01      	subs	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008224:	b29b      	uxth	r3, r3
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800822e:	e117      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008234:	2b02      	cmp	r3, #2
 8008236:	d14e      	bne.n	80082d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800823e:	2200      	movs	r2, #0
 8008240:	4906      	ldr	r1, [pc, #24]	@ (800825c <HAL_I2C_Mem_Read+0x22c>)
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f002 fcf8 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d008      	beq.n	8008260 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e11a      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
 8008252:	bf00      	nop
 8008254:	00100002 	.word	0x00100002
 8008258:	ffff0000 	.word	0xffff0000
 800825c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800826e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800828c:	3b01      	subs	r3, #1
 800828e:	b29a      	uxth	r2, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ac:	b2d2      	uxtb	r2, r2
 80082ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3b01      	subs	r3, #1
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082d4:	e0c4      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082dc:	2200      	movs	r2, #0
 80082de:	496c      	ldr	r1, [pc, #432]	@ (8008490 <HAL_I2C_Mem_Read+0x460>)
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f002 fca9 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e0cb      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	b2d2      	uxtb	r2, r2
 800830c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800831c:	3b01      	subs	r3, #1
 800831e:	b29a      	uxth	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008328:	b29b      	uxth	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008338:	2200      	movs	r2, #0
 800833a:	4955      	ldr	r1, [pc, #340]	@ (8008490 <HAL_I2C_Mem_Read+0x460>)
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f002 fc7b 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e09d      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800835a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008378:	3b01      	subs	r3, #1
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b01      	subs	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	3b01      	subs	r3, #1
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083c0:	e04e      	b.n	8008460 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f002 fe12 	bl	800aff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e058      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	691a      	ldr	r2, [r3, #16]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	b2d2      	uxtb	r2, r2
 80083e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b04      	cmp	r3, #4
 8008414:	d124      	bne.n	8008460 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800841a:	2b03      	cmp	r3, #3
 800841c:	d107      	bne.n	800842e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800842c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	691a      	ldr	r2, [r3, #16]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008438:	b2d2      	uxtb	r2, r2
 800843a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008464:	2b00      	cmp	r3, #0
 8008466:	f47f aeb6 	bne.w	80081d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e000      	b.n	8008488 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008486:	2302      	movs	r3, #2
  }
}
 8008488:	4618      	mov	r0, r3
 800848a:	3728      	adds	r7, #40	@ 0x28
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	00010004 	.word	0x00010004

08008494 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	@ 0x28
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	4608      	mov	r0, r1
 800849e:	4611      	mov	r1, r2
 80084a0:	461a      	mov	r2, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	817b      	strh	r3, [r7, #10]
 80084a6:	460b      	mov	r3, r1
 80084a8:	813b      	strh	r3, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80084b2:	f7fd fe09 	bl	80060c8 <HAL_GetTick>
 80084b6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b20      	cmp	r3, #32
 80084c2:	f040 8136 	bne.w	8008732 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80084c6:	4b9d      	ldr	r3, [pc, #628]	@ (800873c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	08db      	lsrs	r3, r3, #3
 80084cc:	4a9c      	ldr	r2, [pc, #624]	@ (8008740 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	0a1a      	lsrs	r2, r3, #8
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009a      	lsls	r2, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d112      	bne.n	8008512 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2220      	movs	r2, #32
 80084f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008506:	f043 0220 	orr.w	r2, r3, #32
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800850e:	2302      	movs	r3, #2
 8008510:	e110      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b02      	cmp	r3, #2
 800851e:	d0df      	beq.n	80084e0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_I2C_Mem_Write_DMA+0x9a>
 800852a:	2302      	movs	r3, #2
 800852c:	e102      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0301 	and.w	r3, r3, #1
 8008540:	2b01      	cmp	r3, #1
 8008542:	d007      	beq.n	8008554 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0201 	orr.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2221      	movs	r2, #33	@ 0x21
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2240      	movs	r2, #64	@ 0x40
 8008570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800857e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008584:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a6c      	ldr	r2, [pc, #432]	@ (8008744 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8008594:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008596:	897a      	ldrh	r2, [r7, #10]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800859c:	893a      	ldrh	r2, [r7, #8]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80085a2:	88fa      	ldrh	r2, [r7, #6]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80a9 	beq.w	800870a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d02a      	beq.n	8008616 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c4:	4a60      	ldr	r2, [pc, #384]	@ (8008748 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80085c6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085cc:	4a5f      	ldr	r2, [pc, #380]	@ (800874c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80085ce:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d4:	2200      	movs	r2, #0
 80085d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085dc:	2200      	movs	r2, #0
 80085de:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e4:	2200      	movs	r2, #0
 80085e6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ec:	2200      	movs	r2, #0
 80085ee:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f8:	4619      	mov	r1, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3310      	adds	r3, #16
 8008600:	461a      	mov	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008606:	f7fe fc6b 	bl	8006ee0 <HAL_DMA_Start_IT>
 800860a:	4603      	mov	r3, r0
 800860c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800860e:	7efb      	ldrb	r3, [r7, #27]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d166      	bne.n	80086e2 <HAL_I2C_Mem_Write_DMA+0x24e>
 8008614:	e013      	b.n	800863e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2220      	movs	r2, #32
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e07a      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800863e:	88f8      	ldrh	r0, [r7, #6]
 8008640:	893a      	ldrh	r2, [r7, #8]
 8008642:	8979      	ldrh	r1, [r7, #10]
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	2323      	movs	r3, #35	@ 0x23
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4603      	mov	r3, r0
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f001 ffb0 	bl	800a5b4 <I2C_RequestMemoryWrite>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d022      	beq.n	80086a0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fd06 	bl	8007070 <HAL_DMA_Abort_IT>
 8008664:	4603      	mov	r3, r0
 8008666:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866c:	2200      	movs	r2, #0
 800866e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800867e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e049      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a0:	2300      	movs	r3, #0
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	613b      	str	r3, [r7, #16]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	613b      	str	r3, [r7, #16]
 80086b4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086cc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086dc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	e028      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f6:	f043 0210 	orr.w	r2, r3, #16
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e014      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2220      	movs	r2, #32
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008732:	2302      	movs	r3, #2
  }
}
 8008734:	4618      	mov	r0, r3
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000010 	.word	0x20000010
 8008740:	14f8b589 	.word	0x14f8b589
 8008744:	ffff0000 	.word	0xffff0000
 8008748:	0800a8b1 	.word	0x0800a8b1
 800874c:	0800aa6f 	.word	0x0800aa6f

08008750 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08c      	sub	sp, #48	@ 0x30
 8008754:	af02      	add	r7, sp, #8
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	4608      	mov	r0, r1
 800875a:	4611      	mov	r1, r2
 800875c:	461a      	mov	r2, r3
 800875e:	4603      	mov	r3, r0
 8008760:	817b      	strh	r3, [r7, #10]
 8008762:	460b      	mov	r3, r1
 8008764:	813b      	strh	r3, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800876a:	f7fd fcad 	bl	80060c8 <HAL_GetTick>
 800876e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b20      	cmp	r3, #32
 800877e:	f040 8172 	bne.w	8008a66 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008782:	4b93      	ldr	r3, [pc, #588]	@ (80089d0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	08db      	lsrs	r3, r3, #3
 8008788:	4a92      	ldr	r2, [pc, #584]	@ (80089d4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800878a:	fba2 2303 	umull	r2, r3, r2, r3
 800878e:	0a1a      	lsrs	r2, r3, #8
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009a      	lsls	r2, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	3b01      	subs	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d112      	bne.n	80087ce <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c2:	f043 0220 	orr.w	r2, r3, #32
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80087ca:	2302      	movs	r3, #2
 80087cc:	e14c      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d0df      	beq.n	800879c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d101      	bne.n	80087ea <HAL_I2C_Mem_Read_DMA+0x9a>
 80087e6:	2302      	movs	r3, #2
 80087e8:	e13e      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d007      	beq.n	8008810 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f042 0201 	orr.w	r2, r2, #1
 800880e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800881e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2222      	movs	r2, #34	@ 0x22
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2240      	movs	r2, #64	@ 0x40
 800882c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800883a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008846:	b29a      	uxth	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a62      	ldr	r2, [pc, #392]	@ (80089d8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8008850:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8008852:	897a      	ldrh	r2, [r7, #10]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8008858:	893a      	ldrh	r2, [r7, #8]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800885e:	88fa      	ldrh	r2, [r7, #6]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80cc 	beq.w	8008a0c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008878:	2b00      	cmp	r3, #0
 800887a:	d02d      	beq.n	80088d8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008880:	4a56      	ldr	r2, [pc, #344]	@ (80089dc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8008882:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008888:	4a55      	ldr	r2, [pc, #340]	@ (80089e0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800888a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008890:	2200      	movs	r2, #0
 8008892:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008898:	2200      	movs	r2, #0
 800889a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	2200      	movs	r2, #0
 80088a2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	2200      	movs	r2, #0
 80088aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3310      	adds	r3, #16
 80088b6:	4619      	mov	r1, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088bc:	461a      	mov	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088c2:	f7fe fb0d 	bl	8006ee0 <HAL_DMA_Start_IT>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80088cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f040 8087 	bne.w	80089e4 <HAL_I2C_Mem_Read_DMA+0x294>
 80088d6:	e013      	b.n	8008900 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e0b3      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008900:	88f8      	ldrh	r0, [r7, #6]
 8008902:	893a      	ldrh	r2, [r7, #8]
 8008904:	8979      	ldrh	r1, [r7, #10]
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	2323      	movs	r3, #35	@ 0x23
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	4603      	mov	r3, r0
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 fee5 	bl	800a6e0 <I2C_RequestMemoryRead>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d023      	beq.n	8008964 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe fba5 	bl	8007070 <HAL_DMA_Abort_IT>
 8008926:	4603      	mov	r3, r0
 8008928:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008930:	2200      	movs	r2, #0
 8008932:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008942:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e081      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008968:	2b01      	cmp	r3, #1
 800896a:	d108      	bne.n	800897e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	e007      	b.n	800898e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685a      	ldr	r2, [r3, #4]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800898c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800898e:	2300      	movs	r3, #0
 8008990:	61bb      	str	r3, [r7, #24]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089ba:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089ca:	605a      	str	r2, [r3, #4]
 80089cc:	e049      	b.n	8008a62 <HAL_I2C_Mem_Read_DMA+0x312>
 80089ce:	bf00      	nop
 80089d0:	20000010 	.word	0x20000010
 80089d4:	14f8b589 	.word	0x14f8b589
 80089d8:	ffff0000 	.word	0xffff0000
 80089dc:	0800a8b1 	.word	0x0800a8b1
 80089e0:	0800aa6f 	.word	0x0800aa6f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f8:	f043 0210 	orr.w	r2, r3, #16
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e02d      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008a0c:	88f8      	ldrh	r0, [r7, #6]
 8008a0e:	893a      	ldrh	r2, [r7, #8]
 8008a10:	8979      	ldrh	r1, [r7, #10]
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	2323      	movs	r3, #35	@ 0x23
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f001 fe5f 	bl	800a6e0 <I2C_RequestMemoryRead>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e01d      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a50:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	e000      	b.n	8008a68 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8008a66:	2302      	movs	r3, #2
  }
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3728      	adds	r7, #40	@ 0x28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08a      	sub	sp, #40	@ 0x28
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	607a      	str	r2, [r7, #4]
 8008a7a:	603b      	str	r3, [r7, #0]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008a80:	f7fd fb22 	bl	80060c8 <HAL_GetTick>
 8008a84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	f040 8111 	bne.w	8008cba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	2319      	movs	r3, #25
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4988      	ldr	r1, [pc, #544]	@ (8008cc4 <HAL_I2C_IsDeviceReady+0x254>)
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f002 f8c8 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e104      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_I2C_IsDeviceReady+0x50>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e0fd      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d007      	beq.n	8008ae6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0201 	orr.w	r2, r2, #1
 8008ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008af4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2224      	movs	r2, #36	@ 0x24
 8008afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a70      	ldr	r2, [pc, #448]	@ (8008cc8 <HAL_I2C_IsDeviceReady+0x258>)
 8008b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f002 f886 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b40:	d103      	bne.n	8008b4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b48:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e0b6      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b4e:	897b      	ldrh	r3, [r7, #10]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	461a      	mov	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008b5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008b5e:	f7fd fab3 	bl	80060c8 <HAL_GetTick>
 8008b62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	bf0c      	ite	eq
 8008b72:	2301      	moveq	r3, #1
 8008b74:	2300      	movne	r3, #0
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b88:	bf0c      	ite	eq
 8008b8a:	2301      	moveq	r3, #1
 8008b8c:	2300      	movne	r3, #0
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008b92:	e025      	b.n	8008be0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008b94:	f7fd fa98 	bl	80060c8 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d302      	bcc.n	8008baa <HAL_I2C_IsDeviceReady+0x13a>
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	22a0      	movs	r2, #160	@ 0xa0
 8008bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2ba0      	cmp	r3, #160	@ 0xa0
 8008bea:	d005      	beq.n	8008bf8 <HAL_I2C_IsDeviceReady+0x188>
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <HAL_I2C_IsDeviceReady+0x188>
 8008bf2:	7dbb      	ldrb	r3, [r7, #22]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0cd      	beq.n	8008b94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d129      	bne.n	8008c62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c1e:	2300      	movs	r3, #0
 8008c20:	613b      	str	r3, [r7, #16]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	613b      	str	r3, [r7, #16]
 8008c32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2319      	movs	r3, #25
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	4921      	ldr	r1, [pc, #132]	@ (8008cc4 <HAL_I2C_IsDeviceReady+0x254>)
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f001 fffa 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e036      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e02c      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	2319      	movs	r3, #25
 8008c82:	2201      	movs	r2, #1
 8008c84:	490f      	ldr	r1, [pc, #60]	@ (8008cc4 <HAL_I2C_IsDeviceReady+0x254>)
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f001 ffd6 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e012      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	f4ff af32 	bcc.w	8008b0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e000      	b.n	8008cbc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	00100002 	.word	0x00100002
 8008cc8:	ffff0000 	.word	0xffff0000

08008ccc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b088      	sub	sp, #32
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	d003      	beq.n	8008d04 <HAL_I2C_EV_IRQHandler+0x38>
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b40      	cmp	r3, #64	@ 0x40
 8008d00:	f040 80c1 	bne.w	8008e86 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10d      	bne.n	8008d3a <HAL_I2C_EV_IRQHandler+0x6e>
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008d24:	d003      	beq.n	8008d2e <HAL_I2C_EV_IRQHandler+0x62>
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008d2c:	d101      	bne.n	8008d32 <HAL_I2C_EV_IRQHandler+0x66>
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e000      	b.n	8008d34 <HAL_I2C_EV_IRQHandler+0x68>
 8008d32:	2300      	movs	r3, #0
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	f000 8132 	beq.w	8008f9e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00c      	beq.n	8008d5e <HAL_I2C_EV_IRQHandler+0x92>
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	0a5b      	lsrs	r3, r3, #9
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d006      	beq.n	8008d5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f002 f9d9 	bl	800b108 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fd8b 	bl	8009872 <I2C_Master_SB>
 8008d5c:	e092      	b.n	8008e84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	08db      	lsrs	r3, r3, #3
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <HAL_I2C_EV_IRQHandler+0xb2>
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	0a5b      	lsrs	r3, r3, #9
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fe01 	bl	800997e <I2C_Master_ADD10>
 8008d7c:	e082      	b.n	8008e84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d009      	beq.n	8008d9e <HAL_I2C_EV_IRQHandler+0xd2>
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	0a5b      	lsrs	r3, r3, #9
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fe1b 	bl	80099d2 <I2C_Master_ADDR>
 8008d9c:	e072      	b.n	8008e84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	089b      	lsrs	r3, r3, #2
 8008da2:	f003 0301 	and.w	r3, r3, #1
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03b      	beq.n	8008e22 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008db8:	f000 80f3 	beq.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	09db      	lsrs	r3, r3, #7
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00f      	beq.n	8008de8 <HAL_I2C_EV_IRQHandler+0x11c>
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	0a9b      	lsrs	r3, r3, #10
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d009      	beq.n	8008de8 <HAL_I2C_EV_IRQHandler+0x11c>
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d103      	bne.n	8008de8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f9df 	bl	80091a4 <I2C_MasterTransmit_TXE>
 8008de6:	e04d      	b.n	8008e84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	089b      	lsrs	r3, r3, #2
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 80d6 	beq.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	0a5b      	lsrs	r3, r3, #9
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 80cf 	beq.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b21      	cmp	r3, #33	@ 0x21
 8008e08:	d103      	bne.n	8008e12 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa66 	bl	80092dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e10:	e0c7      	b.n	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	2b40      	cmp	r3, #64	@ 0x40
 8008e16:	f040 80c4 	bne.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fad4 	bl	80093c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e20:	e0bf      	b.n	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e30:	f000 80b7 	beq.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	099b      	lsrs	r3, r3, #6
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00f      	beq.n	8008e60 <HAL_I2C_EV_IRQHandler+0x194>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	0a9b      	lsrs	r3, r3, #10
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <HAL_I2C_EV_IRQHandler+0x194>
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	089b      	lsrs	r3, r3, #2
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d103      	bne.n	8008e60 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fb4d 	bl	80094f8 <I2C_MasterReceive_RXNE>
 8008e5e:	e011      	b.n	8008e84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	089b      	lsrs	r3, r3, #2
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 809a 	beq.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	0a5b      	lsrs	r3, r3, #9
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 8093 	beq.w	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fc03 	bl	8009688 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e82:	e08e      	b.n	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8008e84:	e08d      	b.n	8008fa2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d004      	beq.n	8008e98 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	e007      	b.n	8008ea8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d012      	beq.n	8008eda <HAL_I2C_EV_IRQHandler+0x20e>
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	0a5b      	lsrs	r3, r3, #9
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00c      	beq.n	8008eda <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d003      	beq.n	8008ed0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008ed0:	69b9      	ldr	r1, [r7, #24]
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 ffcc 	bl	8009e70 <I2C_Slave_ADDR>
 8008ed8:	e066      	b.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <HAL_I2C_EV_IRQHandler+0x22e>
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	0a5b      	lsrs	r3, r3, #9
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 f806 	bl	8009f04 <I2C_Slave_STOPF>
 8008ef8:	e056      	b.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b21      	cmp	r3, #33	@ 0x21
 8008efe:	d002      	beq.n	8008f06 <HAL_I2C_EV_IRQHandler+0x23a>
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b29      	cmp	r3, #41	@ 0x29
 8008f04:	d125      	bne.n	8008f52 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	09db      	lsrs	r3, r3, #7
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00f      	beq.n	8008f32 <HAL_I2C_EV_IRQHandler+0x266>
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	0a9b      	lsrs	r3, r3, #10
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d009      	beq.n	8008f32 <HAL_I2C_EV_IRQHandler+0x266>
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	089b      	lsrs	r3, r3, #2
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fee2 	bl	8009cf4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f30:	e039      	b.n	8008fa6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	089b      	lsrs	r3, r3, #2
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d033      	beq.n	8008fa6 <HAL_I2C_EV_IRQHandler+0x2da>
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	0a5b      	lsrs	r3, r3, #9
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d02d      	beq.n	8008fa6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 ff0f 	bl	8009d6e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f50:	e029      	b.n	8008fa6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	099b      	lsrs	r3, r3, #6
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00f      	beq.n	8008f7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	0a9b      	lsrs	r3, r3, #10
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d009      	beq.n	8008f7e <HAL_I2C_EV_IRQHandler+0x2b2>
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	089b      	lsrs	r3, r3, #2
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d103      	bne.n	8008f7e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 ff1a 	bl	8009db0 <I2C_SlaveReceive_RXNE>
 8008f7c:	e014      	b.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	089b      	lsrs	r3, r3, #2
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	0a5b      	lsrs	r3, r3, #9
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d008      	beq.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 ff48 	bl	8009e2c <I2C_SlaveReceive_BTF>
 8008f9c:	e004      	b.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8008f9e:	bf00      	nop
 8008fa0:	e002      	b.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008fa6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008fa8:	3720      	adds	r7, #32
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b08a      	sub	sp, #40	@ 0x28
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008fd0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	0a1b      	lsrs	r3, r3, #8
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00e      	beq.n	8008ffc <HAL_I2C_ER_IRQHandler+0x4e>
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	0a1b      	lsrs	r3, r3, #8
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d008      	beq.n	8008ffc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	f043 0301 	orr.w	r3, r3, #1
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ffa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	0a5b      	lsrs	r3, r3, #9
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00e      	beq.n	8009026 <HAL_I2C_ER_IRQHandler+0x78>
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8009014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009016:	f043 0302 	orr.w	r3, r3, #2
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8009024:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	0a9b      	lsrs	r3, r3, #10
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d03f      	beq.n	80090b2 <HAL_I2C_ER_IRQHandler+0x104>
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	0a1b      	lsrs	r3, r3, #8
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d039      	beq.n	80090b2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800903e:	7efb      	ldrb	r3, [r7, #27]
 8009040:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009046:	b29b      	uxth	r3, r3
 8009048:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009050:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009056:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8009058:	7ebb      	ldrb	r3, [r7, #26]
 800905a:	2b20      	cmp	r3, #32
 800905c:	d112      	bne.n	8009084 <HAL_I2C_ER_IRQHandler+0xd6>
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10f      	bne.n	8009084 <HAL_I2C_ER_IRQHandler+0xd6>
 8009064:	7cfb      	ldrb	r3, [r7, #19]
 8009066:	2b21      	cmp	r3, #33	@ 0x21
 8009068:	d008      	beq.n	800907c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800906a:	7cfb      	ldrb	r3, [r7, #19]
 800906c:	2b29      	cmp	r3, #41	@ 0x29
 800906e:	d005      	beq.n	800907c <HAL_I2C_ER_IRQHandler+0xce>
 8009070:	7cfb      	ldrb	r3, [r7, #19]
 8009072:	2b28      	cmp	r3, #40	@ 0x28
 8009074:	d106      	bne.n	8009084 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b21      	cmp	r3, #33	@ 0x21
 800907a:	d103      	bne.n	8009084 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 f871 	bl	800a164 <I2C_Slave_AF>
 8009082:	e016      	b.n	80090b2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800908c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	f043 0304 	orr.w	r3, r3, #4
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009096:	7efb      	ldrb	r3, [r7, #27]
 8009098:	2b10      	cmp	r3, #16
 800909a:	d002      	beq.n	80090a2 <HAL_I2C_ER_IRQHandler+0xf4>
 800909c:	7efb      	ldrb	r3, [r7, #27]
 800909e:	2b40      	cmp	r3, #64	@ 0x40
 80090a0:	d107      	bne.n	80090b2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	0adb      	lsrs	r3, r3, #11
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00e      	beq.n	80090dc <HAL_I2C_ER_IRQHandler+0x12e>
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	0a1b      	lsrs	r3, r3, #8
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	f043 0308 	orr.w	r3, r3, #8
 80090d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80090da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80090dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d008      	beq.n	80090f4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f001 f8ac 	bl	800a24c <I2C_ITError>
  }
}
 80090f4:	bf00      	nop
 80090f6:	3728      	adds	r7, #40	@ 0x28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	70fb      	strb	r3, [r7, #3]
 8009158:	4613      	mov	r3, r2
 800915a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d150      	bne.n	800926c <I2C_MasterTransmit_TXE+0xc8>
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2b21      	cmp	r3, #33	@ 0x21
 80091ce:	d14d      	bne.n	800926c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	d01d      	beq.n	8009212 <I2C_MasterTransmit_TXE+0x6e>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d01a      	beq.n	8009212 <I2C_MasterTransmit_TXE+0x6e>
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80091e2:	d016      	beq.n	8009212 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80091f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2211      	movs	r2, #17
 80091f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2220      	movs	r2, #32
 8009206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ff76 	bl	80090fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009210:	e060      	b.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009220:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009230:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2220      	movs	r2, #32
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b40      	cmp	r3, #64	@ 0x40
 800924a:	d107      	bne.n	800925c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7fc f88f 	bl	8005378 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800925a:	e03b      	b.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7ff ff49 	bl	80090fc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800926a:	e033      	b.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b21      	cmp	r3, #33	@ 0x21
 8009270:	d005      	beq.n	800927e <I2C_MasterTransmit_TXE+0xda>
 8009272:	7bbb      	ldrb	r3, [r7, #14]
 8009274:	2b40      	cmp	r3, #64	@ 0x40
 8009276:	d12d      	bne.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	2b22      	cmp	r3, #34	@ 0x22
 800927c:	d12a      	bne.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009282:	b29b      	uxth	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	d108      	bne.n	800929a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009296:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009298:	e01c      	b.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b40      	cmp	r3, #64	@ 0x40
 80092a4:	d103      	bne.n	80092ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f88e 	bl	80093c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80092ac:	e012      	b.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80092d2:	e7ff      	b.n	80092d4 <I2C_MasterTransmit_TXE+0x130>
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b21      	cmp	r3, #33	@ 0x21
 80092f4:	d164      	bne.n	80093c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d012      	beq.n	8009326 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800931a:	b29b      	uxth	r3, r3
 800931c:	3b01      	subs	r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009324:	e04c      	b.n	80093c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b08      	cmp	r3, #8
 800932a:	d01d      	beq.n	8009368 <I2C_MasterTransmit_BTF+0x8c>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b20      	cmp	r3, #32
 8009330:	d01a      	beq.n	8009368 <I2C_MasterTransmit_BTF+0x8c>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009338:	d016      	beq.n	8009368 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009348:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2211      	movs	r2, #17
 800934e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff fecb 	bl	80090fc <HAL_I2C_MasterTxCpltCallback>
}
 8009366:	e02b      	b.n	80093c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009376:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009386:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b40      	cmp	r3, #64	@ 0x40
 80093a0:	d107      	bne.n	80093b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fb ffe4 	bl	8005378 <HAL_I2C_MemTxCpltCallback>
}
 80093b0:	e006      	b.n	80093c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff fe9e 	bl	80090fc <HAL_I2C_MasterTxCpltCallback>
}
 80093c0:	bf00      	nop
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d11d      	bne.n	800941c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d10b      	bne.n	8009400 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f8:	1c9a      	adds	r2, r3, #2
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80093fe:	e077      	b.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009404:	b29b      	uxth	r3, r3
 8009406:	121b      	asrs	r3, r3, #8
 8009408:	b2da      	uxtb	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800941a:	e069      	b.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009420:	2b01      	cmp	r3, #1
 8009422:	d10b      	bne.n	800943c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009428:	b2da      	uxtb	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800943a:	e059      	b.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009440:	2b02      	cmp	r3, #2
 8009442:	d152      	bne.n	80094ea <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	2b22      	cmp	r3, #34	@ 0x22
 8009448:	d10d      	bne.n	8009466 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009458:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009464:	e044      	b.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800946a:	b29b      	uxth	r3, r3
 800946c:	2b00      	cmp	r3, #0
 800946e:	d015      	beq.n	800949c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	2b21      	cmp	r3, #33	@ 0x21
 8009474:	d112      	bne.n	800949c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009490:	b29b      	uxth	r3, r3
 8009492:	3b01      	subs	r3, #1
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800949a:	e029      	b.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d124      	bne.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	2b21      	cmp	r3, #33	@ 0x21
 80094aa:	d121      	bne.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80094ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7fb ff48 	bl	8005378 <HAL_I2C_MemTxCpltCallback>
}
 80094e8:	e002      	b.n	80094f0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fe fb92 	bl	8007c14 <I2C_Flush_DR>
}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b22      	cmp	r3, #34	@ 0x22
 800950a:	f040 80b9 	bne.w	8009680 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009512:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009518:	b29b      	uxth	r3, r3
 800951a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b03      	cmp	r3, #3
 8009520:	d921      	bls.n	8009566 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	2b03      	cmp	r3, #3
 8009550:	f040 8096 	bne.w	8009680 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009562:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8009564:	e08c      	b.n	8009680 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956a:	2b02      	cmp	r3, #2
 800956c:	d07f      	beq.n	800966e <I2C_MasterReceive_RXNE+0x176>
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d002      	beq.n	800957a <I2C_MasterReceive_RXNE+0x82>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d179      	bne.n	800966e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 fd06 	bl	800af8c <I2C_WaitOnSTOPRequestThroughIT>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d14c      	bne.n	8009620 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009594:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80095a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b40      	cmp	r3, #64	@ 0x40
 80095de:	d10a      	bne.n	80095f6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fb fed8 	bl	80053a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80095f4:	e044      	b.n	8009680 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2b08      	cmp	r3, #8
 8009602:	d002      	beq.n	800960a <I2C_MasterReceive_RXNE+0x112>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b20      	cmp	r3, #32
 8009608:	d103      	bne.n	8009612 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009610:	e002      	b.n	8009618 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2212      	movs	r2, #18
 8009616:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff fd79 	bl	8009110 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800961e:	e02f      	b.n	8009680 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800962e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	691a      	ldr	r2, [r3, #16]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963a:	b2d2      	uxtb	r2, r2
 800963c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29a      	uxth	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff fd88 	bl	800917c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800966c:	e008      	b.n	8009680 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800967c:	605a      	str	r2, [r3, #4]
}
 800967e:	e7ff      	b.n	8009680 <I2C_MasterReceive_RXNE+0x188>
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009694:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b04      	cmp	r3, #4
 800969e:	d11b      	bne.n	80096d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80096d6:	e0c8      	b.n	800986a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d129      	bne.n	8009736 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80096f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d00a      	beq.n	800970e <I2C_MasterReceive_BTF+0x86>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d007      	beq.n	800970e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009718:	b2d2      	uxtb	r2, r2
 800971a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800972a:	b29b      	uxth	r3, r3
 800972c:	3b01      	subs	r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8009734:	e099      	b.n	800986a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800973a:	b29b      	uxth	r3, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	f040 8081 	bne.w	8009844 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d002      	beq.n	800974e <I2C_MasterReceive_BTF+0xc6>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b10      	cmp	r3, #16
 800974c:	d108      	bne.n	8009760 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e019      	b.n	8009794 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b04      	cmp	r3, #4
 8009764:	d002      	beq.n	800976c <I2C_MasterReceive_BTF+0xe4>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d108      	bne.n	800977e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800977a:	601a      	str	r2, [r3, #0]
 800977c:	e00a      	b.n	8009794 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b10      	cmp	r3, #16
 8009782:	d007      	beq.n	8009794 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009792:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	691a      	ldr	r2, [r3, #16]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c4:	b2d2      	uxtb	r2, r2
 80097c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	b29a      	uxth	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80097ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b40      	cmp	r3, #64	@ 0x40
 8009802:	d10a      	bne.n	800981a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fb fdc6 	bl	80053a4 <HAL_I2C_MemRxCpltCallback>
}
 8009818:	e027      	b.n	800986a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b08      	cmp	r3, #8
 8009826:	d002      	beq.n	800982e <I2C_MasterReceive_BTF+0x1a6>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b20      	cmp	r3, #32
 800982c:	d103      	bne.n	8009836 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	631a      	str	r2, [r3, #48]	@ 0x30
 8009834:	e002      	b.n	800983c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2212      	movs	r2, #18
 800983a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7ff fc67 	bl	8009110 <HAL_I2C_MasterRxCpltCallback>
}
 8009842:	e012      	b.n	800986a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984e:	b2d2      	uxtb	r2, r2
 8009850:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009856:	1c5a      	adds	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009860:	b29b      	uxth	r3, r3
 8009862:	3b01      	subs	r3, #1
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b40      	cmp	r3, #64	@ 0x40
 8009884:	d117      	bne.n	80098b6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009892:	b2db      	uxtb	r3, r3
 8009894:	461a      	mov	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800989e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80098a0:	e067      	b.n	8009972 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f043 0301 	orr.w	r3, r3, #1
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	611a      	str	r2, [r3, #16]
}
 80098b4:	e05d      	b.n	8009972 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098be:	d133      	bne.n	8009928 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b21      	cmp	r3, #33	@ 0x21
 80098ca:	d109      	bne.n	80098e0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	461a      	mov	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80098dc:	611a      	str	r2, [r3, #16]
 80098de:	e008      	b.n	80098f2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	f043 0301 	orr.w	r3, r3, #1
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <I2C_Master_SB+0x92>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d108      	bne.n	8009916 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009908:	2b00      	cmp	r3, #0
 800990a:	d032      	beq.n	8009972 <I2C_Master_SB+0x100>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009912:	2b00      	cmp	r3, #0
 8009914:	d02d      	beq.n	8009972 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685a      	ldr	r2, [r3, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009924:	605a      	str	r2, [r3, #4]
}
 8009926:	e024      	b.n	8009972 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10e      	bne.n	800994e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009934:	b29b      	uxth	r3, r3
 8009936:	11db      	asrs	r3, r3, #7
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 0306 	and.w	r3, r3, #6
 800993e:	b2db      	uxtb	r3, r3
 8009940:	f063 030f 	orn	r3, r3, #15
 8009944:	b2da      	uxtb	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	611a      	str	r2, [r3, #16]
}
 800994c:	e011      	b.n	8009972 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009952:	2b01      	cmp	r3, #1
 8009954:	d10d      	bne.n	8009972 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995a:	b29b      	uxth	r3, r3
 800995c:	11db      	asrs	r3, r3, #7
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f003 0306 	and.w	r3, r3, #6
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f063 030e 	orn	r3, r3, #14
 800996a:	b2da      	uxtb	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	611a      	str	r2, [r3, #16]
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800998a:	b2da      	uxtb	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009996:	2b00      	cmp	r3, #0
 8009998:	d004      	beq.n	80099a4 <I2C_Master_ADD10+0x26>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d108      	bne.n	80099b6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00c      	beq.n	80099c6 <I2C_Master_ADD10+0x48>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d007      	beq.n	80099c6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099c4:	605a      	str	r2, [r3, #4]
  }
}
 80099c6:	bf00      	nop
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b091      	sub	sp, #68	@ 0x44
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	2b22      	cmp	r3, #34	@ 0x22
 80099fa:	f040 8169 	bne.w	8009cd0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10f      	bne.n	8009a26 <I2C_Master_ADDR+0x54>
 8009a06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009a0a:	2b40      	cmp	r3, #64	@ 0x40
 8009a0c:	d10b      	bne.n	8009a26 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	e160      	b.n	8009ce8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d11d      	bne.n	8009a6a <I2C_Master_ADDR+0x98>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a36:	d118      	bne.n	8009a6a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a5c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a68:	e13e      	b.n	8009ce8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d113      	bne.n	8009a9c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a74:	2300      	movs	r3, #0
 8009a76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	e115      	b.n	8009cc8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	f040 808a 	bne.w	8009bbc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009aae:	d137      	bne.n	8009b20 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009abe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ace:	d113      	bne.n	8009af8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ade:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af6:	e0e7      	b.n	8009cc8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009af8:	2300      	movs	r3, #0
 8009afa:	623b      	str	r3, [r7, #32]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	623b      	str	r3, [r7, #32]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	623b      	str	r3, [r7, #32]
 8009b0c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	e0d3      	b.n	8009cc8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8009b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d02e      	beq.n	8009b84 <I2C_Master_ADDR+0x1b2>
 8009b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d02b      	beq.n	8009b84 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2e:	2b12      	cmp	r3, #18
 8009b30:	d102      	bne.n	8009b38 <I2C_Master_ADDR+0x166>
 8009b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d125      	bne.n	8009b84 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	d00e      	beq.n	8009b5c <I2C_Master_ADDR+0x18a>
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d00b      	beq.n	8009b5c <I2C_Master_ADDR+0x18a>
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	2b10      	cmp	r3, #16
 8009b48:	d008      	beq.n	8009b5c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	e007      	b.n	8009b6c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009b6a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	61fb      	str	r3, [r7, #28]
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	e0a1      	b.n	8009cc8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b92:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b94:	2300      	movs	r3, #0
 8009b96:	61bb      	str	r3, [r7, #24]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	61bb      	str	r3, [r7, #24]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	61bb      	str	r3, [r7, #24]
 8009ba8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e085      	b.n	8009cc8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d14d      	bne.n	8009c62 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d016      	beq.n	8009bfa <I2C_Master_ADDR+0x228>
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d013      	beq.n	8009bfa <I2C_Master_ADDR+0x228>
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd4:	2b10      	cmp	r3, #16
 8009bd6:	d010      	beq.n	8009bfa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009be6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	e007      	b.n	8009c0a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c08:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c18:	d117      	bne.n	8009c4a <I2C_Master_ADDR+0x278>
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c20:	d00b      	beq.n	8009c3a <I2C_Master_ADDR+0x268>
 8009c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d008      	beq.n	8009c3a <I2C_Master_ADDR+0x268>
 8009c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2a:	2b08      	cmp	r3, #8
 8009c2c:	d005      	beq.n	8009c3a <I2C_Master_ADDR+0x268>
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	2b10      	cmp	r3, #16
 8009c32:	d002      	beq.n	8009c3a <I2C_Master_ADDR+0x268>
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d107      	bne.n	8009c4a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	617b      	str	r3, [r7, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	617b      	str	r3, [r7, #20]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	e032      	b.n	8009cc8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c70:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c80:	d117      	bne.n	8009cb2 <I2C_Master_ADDR+0x2e0>
 8009c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c88:	d00b      	beq.n	8009ca2 <I2C_Master_ADDR+0x2d0>
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d008      	beq.n	8009ca2 <I2C_Master_ADDR+0x2d0>
 8009c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d005      	beq.n	8009ca2 <I2C_Master_ADDR+0x2d0>
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d002      	beq.n	8009ca2 <I2C_Master_ADDR+0x2d0>
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d107      	bne.n	8009cb2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cb0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	613b      	str	r3, [r7, #16]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	613b      	str	r3, [r7, #16]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	613b      	str	r3, [r7, #16]
 8009cc6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009cce:	e00b      	b.n	8009ce8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	60fb      	str	r3, [r7, #12]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
}
 8009ce6:	e7ff      	b.n	8009ce8 <I2C_Master_ADDR+0x316>
 8009ce8:	bf00      	nop
 8009cea:	3744      	adds	r7, #68	@ 0x44
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d02b      	beq.n	8009d66 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	781a      	ldrb	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d114      	bne.n	8009d66 <I2C_SlaveTransmit_TXE+0x72>
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	2b29      	cmp	r3, #41	@ 0x29
 8009d40:	d111      	bne.n	8009d66 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d50:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2221      	movs	r2, #33	@ 0x21
 8009d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2228      	movs	r2, #40	@ 0x28
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff f9df 	bl	8009124 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d011      	beq.n	8009da4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d90:	1c5a      	adds	r2, r3, #1
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d02c      	beq.n	8009e24 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691a      	ldr	r2, [r3, #16]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd4:	b2d2      	uxtb	r2, r2
 8009dd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	3b01      	subs	r3, #1
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d114      	bne.n	8009e24 <I2C_SlaveReceive_RXNE+0x74>
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfe:	d111      	bne.n	8009e24 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685a      	ldr	r2, [r3, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e0e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2222      	movs	r2, #34	@ 0x22
 8009e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2228      	movs	r2, #40	@ 0x28
 8009e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff f98a 	bl	8009138 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009e24:	bf00      	nop
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d012      	beq.n	8009e64 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e48:	b2d2      	uxtb	r2, r2
 8009e4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e50:	1c5a      	adds	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009e8a:	2b28      	cmp	r3, #40	@ 0x28
 8009e8c:	d127      	bne.n	8009ede <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e9c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	089b      	lsrs	r3, r3, #2
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	09db      	lsrs	r3, r3, #7
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d103      	bne.n	8009ec2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	81bb      	strh	r3, [r7, #12]
 8009ec0:	e002      	b.n	8009ec8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009ed0:	89ba      	ldrh	r2, [r7, #12]
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff f938 	bl	800914c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009edc:	e00e      	b.n	8009efc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	60bb      	str	r3, [r7, #8]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009efc:	bf00      	nop
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	60bb      	str	r3, [r7, #8]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f042 0201 	orr.w	r2, r2, #1
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f60:	d172      	bne.n	800a048 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	2b22      	cmp	r3, #34	@ 0x22
 8009f66:	d002      	beq.n	8009f6e <I2C_Slave_STOPF+0x6a>
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f6c:	d135      	bne.n	8009fda <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f8a:	f043 0204 	orr.w	r2, r3, #4
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fa0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fd fa0e 	bl	80073c8 <HAL_DMA_GetState>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d049      	beq.n	800a046 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb6:	4a69      	ldr	r2, [pc, #420]	@ (800a15c <I2C_Slave_STOPF+0x258>)
 8009fb8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd f856 	bl	8007070 <HAL_DMA_Abort_IT>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d03d      	beq.n	800a046 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fd8:	e035      	b.n	800a046 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff6:	f043 0204 	orr.w	r2, r3, #4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a00c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a012:	4618      	mov	r0, r3
 800a014:	f7fd f9d8 	bl	80073c8 <HAL_DMA_GetState>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d014      	beq.n	800a048 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a022:	4a4e      	ldr	r2, [pc, #312]	@ (800a15c <I2C_Slave_STOPF+0x258>)
 800a024:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fd f820 	bl	8007070 <HAL_DMA_Abort_IT>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d008      	beq.n	800a048 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	e000      	b.n	800a048 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a046:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d03e      	beq.n	800a0d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b04      	cmp	r3, #4
 800a05e:	d112      	bne.n	800a086 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	3b01      	subs	r3, #1
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a090:	2b40      	cmp	r3, #64	@ 0x40
 800a092:	d112      	bne.n	800a0ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	691a      	ldr	r2, [r3, #16]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09e:	b2d2      	uxtb	r2, r2
 800a0a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c8:	f043 0204 	orr.w	r2, r3, #4
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f8b7 	bl	800a24c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a0de:	e039      	b.n	800a154 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e4:	d109      	bne.n	800a0fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2228      	movs	r2, #40	@ 0x28
 800a0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff f81f 	bl	8009138 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b28      	cmp	r3, #40	@ 0x28
 800a104:	d111      	bne.n	800a12a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a15      	ldr	r2, [pc, #84]	@ (800a160 <I2C_Slave_STOPF+0x25c>)
 800a10a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2220      	movs	r2, #32
 800a116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff f820 	bl	8009168 <HAL_I2C_ListenCpltCallback>
}
 800a128:	e014      	b.n	800a154 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12e:	2b22      	cmp	r3, #34	@ 0x22
 800a130:	d002      	beq.n	800a138 <I2C_Slave_STOPF+0x234>
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	2b22      	cmp	r3, #34	@ 0x22
 800a136:	d10d      	bne.n	800a154 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2220      	movs	r2, #32
 800a142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7fe fff2 	bl	8009138 <HAL_I2C_SlaveRxCpltCallback>
}
 800a154:	bf00      	nop
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	0800aae9 	.word	0x0800aae9
 800a160:	ffff0000 	.word	0xffff0000

0800a164 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a172:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a178:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d002      	beq.n	800a186 <I2C_Slave_AF+0x22>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2b20      	cmp	r3, #32
 800a184:	d129      	bne.n	800a1da <I2C_Slave_AF+0x76>
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	2b28      	cmp	r3, #40	@ 0x28
 800a18a:	d126      	bne.n	800a1da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a2e      	ldr	r2, [pc, #184]	@ (800a248 <I2C_Slave_AF+0xe4>)
 800a190:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685a      	ldr	r2, [r3, #4]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a1a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a1aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7fe ffc8 	bl	8009168 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a1d8:	e031      	b.n	800a23e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
 800a1dc:	2b21      	cmp	r3, #33	@ 0x21
 800a1de:	d129      	bne.n	800a234 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a19      	ldr	r2, [pc, #100]	@ (800a248 <I2C_Slave_AF+0xe4>)
 800a1e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2221      	movs	r2, #33	@ 0x21
 800a1ea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a20a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a214:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a224:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7fd fcf4 	bl	8007c14 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7fe ff79 	bl	8009124 <HAL_I2C_SlaveTxCpltCallback>
}
 800a232:	e004      	b.n	800a23e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800a23c:	615a      	str	r2, [r3, #20]
}
 800a23e:	bf00      	nop
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	ffff0000 	.word	0xffff0000

0800a24c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a25a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a262:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	2b10      	cmp	r3, #16
 800a268:	d002      	beq.n	800a270 <I2C_ITError+0x24>
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
 800a26c:	2b40      	cmp	r3, #64	@ 0x40
 800a26e:	d10a      	bne.n	800a286 <I2C_ITError+0x3a>
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	2b22      	cmp	r3, #34	@ 0x22
 800a274:	d107      	bne.n	800a286 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a284:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a286:	7bfb      	ldrb	r3, [r7, #15]
 800a288:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a28c:	2b28      	cmp	r3, #40	@ 0x28
 800a28e:	d107      	bne.n	800a2a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2228      	movs	r2, #40	@ 0x28
 800a29a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a29e:	e015      	b.n	800a2cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2ae:	d00a      	beq.n	800a2c6 <I2C_ITError+0x7a>
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	2b60      	cmp	r3, #96	@ 0x60
 800a2b4:	d007      	beq.n	800a2c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2da:	d162      	bne.n	800a3a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d020      	beq.n	800a33c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2fe:	4a6a      	ldr	r2, [pc, #424]	@ (800a4a8 <I2C_ITError+0x25c>)
 800a300:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a306:	4618      	mov	r0, r3
 800a308:	f7fc feb2 	bl	8007070 <HAL_DMA_Abort_IT>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 8089 	beq.w	800a426 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f022 0201 	bic.w	r2, r2, #1
 800a322:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2220      	movs	r2, #32
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a336:	4610      	mov	r0, r2
 800a338:	4798      	blx	r3
 800a33a:	e074      	b.n	800a426 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a340:	4a59      	ldr	r2, [pc, #356]	@ (800a4a8 <I2C_ITError+0x25c>)
 800a342:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fc fe91 	bl	8007070 <HAL_DMA_Abort_IT>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d068      	beq.n	800a426 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a35e:	2b40      	cmp	r3, #64	@ 0x40
 800a360:	d10b      	bne.n	800a37a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	691a      	ldr	r2, [r3, #16]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36c:	b2d2      	uxtb	r2, r2
 800a36e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a374:	1c5a      	adds	r2, r3, #1
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0201 	bic.w	r2, r2, #1
 800a388:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	e041      	b.n	800a426 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b60      	cmp	r3, #96	@ 0x60
 800a3ac:	d125      	bne.n	800a3fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c6:	2b40      	cmp	r3, #64	@ 0x40
 800a3c8:	d10b      	bne.n	800a3e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	691a      	ldr	r2, [r3, #16]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d4:	b2d2      	uxtb	r2, r2
 800a3d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3dc:	1c5a      	adds	r2, r3, #1
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0201 	bic.w	r2, r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7fe fecc 	bl	8009190 <HAL_I2C_AbortCpltCallback>
 800a3f8:	e015      	b.n	800a426 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	695b      	ldr	r3, [r3, #20]
 800a400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a404:	2b40      	cmp	r3, #64	@ 0x40
 800a406:	d10b      	bne.n	800a420 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	691a      	ldr	r2, [r3, #16]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7fe feab 	bl	800917c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	f003 0301 	and.w	r3, r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10e      	bne.n	800a454 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d109      	bne.n	800a454 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a446:	2b00      	cmp	r3, #0
 800a448:	d104      	bne.n	800a454 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a450:	2b00      	cmp	r3, #0
 800a452:	d007      	beq.n	800a464 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a462:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a46a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b04      	cmp	r3, #4
 800a476:	d113      	bne.n	800a4a0 <I2C_ITError+0x254>
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	2b28      	cmp	r3, #40	@ 0x28
 800a47c:	d110      	bne.n	800a4a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a0a      	ldr	r2, [pc, #40]	@ (800a4ac <I2C_ITError+0x260>)
 800a482:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2220      	movs	r2, #32
 800a48e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fe fe64 	bl	8009168 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a4a0:	bf00      	nop
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	0800aae9 	.word	0x0800aae9
 800a4ac:	ffff0000 	.word	0xffff0000

0800a4b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	607a      	str	r2, [r7, #4]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b08      	cmp	r3, #8
 800a4ca:	d006      	beq.n	800a4da <I2C_MasterRequestWrite+0x2a>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d003      	beq.n	800a4da <I2C_MasterRequestWrite+0x2a>
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a4d8:	d108      	bne.n	800a4ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e00b      	b.n	800a504 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f0:	2b12      	cmp	r3, #18
 800a4f2:	d107      	bne.n	800a504 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f000 fb91 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00d      	beq.n	800a538 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a52a:	d103      	bne.n	800a534 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e035      	b.n	800a5a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a540:	d108      	bne.n	800a554 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a542:	897b      	ldrh	r3, [r7, #10]
 800a544:	b2db      	uxtb	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a550:	611a      	str	r2, [r3, #16]
 800a552:	e01b      	b.n	800a58c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a554:	897b      	ldrh	r3, [r7, #10]
 800a556:	11db      	asrs	r3, r3, #7
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f003 0306 	and.w	r3, r3, #6
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	f063 030f 	orn	r3, r3, #15
 800a564:	b2da      	uxtb	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	490e      	ldr	r1, [pc, #56]	@ (800a5ac <I2C_MasterRequestWrite+0xfc>)
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 fbda 	bl	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e010      	b.n	800a5a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a582:	897b      	ldrh	r3, [r7, #10]
 800a584:	b2da      	uxtb	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4907      	ldr	r1, [pc, #28]	@ (800a5b0 <I2C_MasterRequestWrite+0x100>)
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 fbca 	bl	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	00010008 	.word	0x00010008
 800a5b0:	00010002 	.word	0x00010002

0800a5b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	817b      	strh	r3, [r7, #10]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	813b      	strh	r3, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a5dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fb24 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00d      	beq.n	800a612 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a604:	d103      	bne.n	800a60e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a60c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a60e:	2303      	movs	r3, #3
 800a610:	e05f      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a612:	897b      	ldrh	r3, [r7, #10]
 800a614:	b2db      	uxtb	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a620:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	6a3a      	ldr	r2, [r7, #32]
 800a626:	492d      	ldr	r1, [pc, #180]	@ (800a6dc <I2C_RequestMemoryWrite+0x128>)
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 fb7f 	bl	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e04c      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	617b      	str	r3, [r7, #20]
 800a64c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a64e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a650:	6a39      	ldr	r1, [r7, #32]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f000 fc0a 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00d      	beq.n	800a67a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a662:	2b04      	cmp	r3, #4
 800a664:	d107      	bne.n	800a676 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a674:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e02b      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d105      	bne.n	800a68c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a680:	893b      	ldrh	r3, [r7, #8]
 800a682:	b2da      	uxtb	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	611a      	str	r2, [r3, #16]
 800a68a:	e021      	b.n	800a6d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a68c:	893b      	ldrh	r3, [r7, #8]
 800a68e:	0a1b      	lsrs	r3, r3, #8
 800a690:	b29b      	uxth	r3, r3
 800a692:	b2da      	uxtb	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a69a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a69c:	6a39      	ldr	r1, [r7, #32]
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fbe4 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00d      	beq.n	800a6c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d107      	bne.n	800a6c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e005      	b.n	800a6d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6c6:	893b      	ldrh	r3, [r7, #8]
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	00010002 	.word	0x00010002

0800a6e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af02      	add	r7, sp, #8
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	817b      	strh	r3, [r7, #10]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	813b      	strh	r3, [r7, #8]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a708:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2200      	movs	r2, #0
 800a722:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 fa86 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00d      	beq.n	800a74e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a73c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a740:	d103      	bne.n	800a74a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a748:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e0aa      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a74e:	897b      	ldrh	r3, [r7, #10]
 800a750:	b2db      	uxtb	r3, r3
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a75c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a760:	6a3a      	ldr	r2, [r7, #32]
 800a762:	4952      	ldr	r1, [pc, #328]	@ (800a8ac <I2C_RequestMemoryRead+0x1cc>)
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fae1 	bl	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e097      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a774:	2300      	movs	r3, #0
 800a776:	617b      	str	r3, [r7, #20]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	617b      	str	r3, [r7, #20]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a78a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a78c:	6a39      	ldr	r1, [r7, #32]
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 fb6c 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00d      	beq.n	800a7b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	2b04      	cmp	r3, #4
 800a7a0:	d107      	bne.n	800a7b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e076      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7b6:	88fb      	ldrh	r3, [r7, #6]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d105      	bne.n	800a7c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7bc:	893b      	ldrh	r3, [r7, #8]
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	611a      	str	r2, [r3, #16]
 800a7c6:	e021      	b.n	800a80c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7c8:	893b      	ldrh	r3, [r7, #8]
 800a7ca:	0a1b      	lsrs	r3, r3, #8
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7d8:	6a39      	ldr	r1, [r7, #32]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fb46 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00d      	beq.n	800a802 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d107      	bne.n	800a7fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e050      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a802:	893b      	ldrh	r3, [r7, #8]
 800a804:	b2da      	uxtb	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a80c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a80e:	6a39      	ldr	r1, [r7, #32]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 fb2b 	bl	800ae6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00d      	beq.n	800a838 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a820:	2b04      	cmp	r3, #4
 800a822:	d107      	bne.n	800a834 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a832:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e035      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a846:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	2200      	movs	r2, #0
 800a850:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f000 f9ef 	bl	800ac38 <I2C_WaitOnFlagUntilTimeout>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00d      	beq.n	800a87c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a86e:	d103      	bne.n	800a878 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a876:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e013      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a87c:	897b      	ldrh	r3, [r7, #10]
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	f043 0301 	orr.w	r3, r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	6a3a      	ldr	r2, [r7, #32]
 800a890:	4906      	ldr	r1, [pc, #24]	@ (800a8ac <I2C_RequestMemoryRead+0x1cc>)
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 fa4a 	bl	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	00010002 	.word	0x00010002

0800a8b0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8c4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8cc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a8e2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a900:	2200      	movs	r2, #0
 800a902:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a904:	7cfb      	ldrb	r3, [r7, #19]
 800a906:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a90a:	2b21      	cmp	r3, #33	@ 0x21
 800a90c:	d007      	beq.n	800a91e <I2C_DMAXferCplt+0x6e>
 800a90e:	7cfb      	ldrb	r3, [r7, #19]
 800a910:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800a914:	2b22      	cmp	r3, #34	@ 0x22
 800a916:	d131      	bne.n	800a97c <I2C_DMAXferCplt+0xcc>
 800a918:	7cbb      	ldrb	r3, [r7, #18]
 800a91a:	2b20      	cmp	r3, #32
 800a91c:	d12e      	bne.n	800a97c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a92c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2200      	movs	r2, #0
 800a932:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a934:	7cfb      	ldrb	r3, [r7, #19]
 800a936:	2b29      	cmp	r3, #41	@ 0x29
 800a938:	d10a      	bne.n	800a950 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2221      	movs	r2, #33	@ 0x21
 800a93e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2228      	movs	r2, #40	@ 0x28
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a948:	6978      	ldr	r0, [r7, #20]
 800a94a:	f7fe fbeb 	bl	8009124 <HAL_I2C_SlaveTxCpltCallback>
 800a94e:	e00c      	b.n	800a96a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a950:	7cfb      	ldrb	r3, [r7, #19]
 800a952:	2b2a      	cmp	r3, #42	@ 0x2a
 800a954:	d109      	bne.n	800a96a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2222      	movs	r2, #34	@ 0x22
 800a95a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2228      	movs	r2, #40	@ 0x28
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a964:	6978      	ldr	r0, [r7, #20]
 800a966:	f7fe fbe7 	bl	8009138 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800a978:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a97a:	e074      	b.n	800aa66 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b00      	cmp	r3, #0
 800a986:	d06e      	beq.n	800aa66 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d107      	bne.n	800a9a2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9a0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a9b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a9b8:	d009      	beq.n	800a9ce <I2C_DMAXferCplt+0x11e>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d006      	beq.n	800a9ce <I2C_DMAXferCplt+0x11e>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a9c6:	d002      	beq.n	800a9ce <I2C_DMAXferCplt+0x11e>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d107      	bne.n	800a9de <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9dc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685a      	ldr	r2, [r3, #4]
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a9ec:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9fc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2200      	movs	r2, #0
 800aa02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d003      	beq.n	800aa14 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800aa0c:	6978      	ldr	r0, [r7, #20]
 800aa0e:	f7fe fbb5 	bl	800917c <HAL_I2C_ErrorCallback>
}
 800aa12:	e028      	b.n	800aa66 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	2b40      	cmp	r3, #64	@ 0x40
 800aa26:	d10a      	bne.n	800aa3e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2200      	movs	r2, #0
 800aa34:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800aa36:	6978      	ldr	r0, [r7, #20]
 800aa38:	f7fa fcb4 	bl	80053a4 <HAL_I2C_MemRxCpltCallback>
}
 800aa3c:	e013      	b.n	800aa66 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b08      	cmp	r3, #8
 800aa4a:	d002      	beq.n	800aa52 <I2C_DMAXferCplt+0x1a2>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b20      	cmp	r3, #32
 800aa50:	d103      	bne.n	800aa5a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2200      	movs	r2, #0
 800aa56:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa58:	e002      	b.n	800aa60 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2212      	movs	r2, #18
 800aa5e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800aa60:	6978      	ldr	r0, [r7, #20]
 800aa62:	f7fe fb55 	bl	8009110 <HAL_I2C_MasterRxCpltCallback>
}
 800aa66:	bf00      	nop
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa88:	2200      	movs	r2, #0
 800aa8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa98:	2200      	movs	r2, #0
 800aa9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7fc fca1 	bl	80073e4 <HAL_DMA_GetError>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d01b      	beq.n	800aae0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aab6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad2:	f043 0210 	orr.w	r2, r3, #16
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f7fe fb4e 	bl	800917c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aae0:	bf00      	nop
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ab02:	4b4b      	ldr	r3, [pc, #300]	@ (800ac30 <I2C_DMAAbort+0x148>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	08db      	lsrs	r3, r3, #3
 800ab08:	4a4a      	ldr	r2, [pc, #296]	@ (800ac34 <I2C_DMAAbort+0x14c>)
 800ab0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0e:	0a1a      	lsrs	r2, r3, #8
 800ab10:	4613      	mov	r3, r2
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	00da      	lsls	r2, r3, #3
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab26:	f043 0220 	orr.w	r2, r3, #32
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800ab2e:	e00a      	b.n	800ab46 <I2C_DMAAbort+0x5e>
    }
    count--;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab44:	d0ea      	beq.n	800ab1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab52:	2200      	movs	r2, #0
 800ab54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab62:	2200      	movs	r2, #0
 800ab64:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab88:	2200      	movs	r2, #0
 800ab8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab98:	2200      	movs	r2, #0
 800ab9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f022 0201 	bic.w	r2, r2, #1
 800abaa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b60      	cmp	r3, #96	@ 0x60
 800abb6:	d10e      	bne.n	800abd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2220      	movs	r2, #32
 800abbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2200      	movs	r2, #0
 800abcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800abce:	6978      	ldr	r0, [r7, #20]
 800abd0:	f7fe fade 	bl	8009190 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800abd4:	e027      	b.n	800ac26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800abd6:	7cfb      	ldrb	r3, [r7, #19]
 800abd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800abdc:	2b28      	cmp	r3, #40	@ 0x28
 800abde:	d117      	bne.n	800ac10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f042 0201 	orr.w	r2, r2, #1
 800abee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800abfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2200      	movs	r2, #0
 800ac04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2228      	movs	r2, #40	@ 0x28
 800ac0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ac0e:	e007      	b.n	800ac20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2220      	movs	r2, #32
 800ac14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800ac20:	6978      	ldr	r0, [r7, #20]
 800ac22:	f7fe faab 	bl	800917c <HAL_I2C_ErrorCallback>
}
 800ac26:	bf00      	nop
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20000010 	.word	0x20000010
 800ac34:	14f8b589 	.word	0x14f8b589

0800ac38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	603b      	str	r3, [r7, #0]
 800ac44:	4613      	mov	r3, r2
 800ac46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac48:	e048      	b.n	800acdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	d044      	beq.n	800acdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac52:	f7fb fa39 	bl	80060c8 <HAL_GetTick>
 800ac56:	4602      	mov	r2, r0
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d302      	bcc.n	800ac68 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d139      	bne.n	800acdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	0c1b      	lsrs	r3, r3, #16
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d10d      	bne.n	800ac8e <I2C_WaitOnFlagUntilTimeout+0x56>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	43da      	mvns	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bf0c      	ite	eq
 800ac84:	2301      	moveq	r3, #1
 800ac86:	2300      	movne	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	e00c      	b.n	800aca8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	43da      	mvns	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4013      	ands	r3, r2
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	bf0c      	ite	eq
 800aca0:	2301      	moveq	r3, #1
 800aca2:	2300      	movne	r3, #0
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	79fb      	ldrb	r3, [r7, #7]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d116      	bne.n	800acdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2220      	movs	r2, #32
 800acb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc8:	f043 0220 	orr.w	r2, r3, #32
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e023      	b.n	800ad24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	0c1b      	lsrs	r3, r3, #16
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d10d      	bne.n	800ad02 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	43da      	mvns	r2, r3
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4013      	ands	r3, r2
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	bf0c      	ite	eq
 800acf8:	2301      	moveq	r3, #1
 800acfa:	2300      	movne	r3, #0
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	e00c      	b.n	800ad1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	43da      	mvns	r2, r3
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bf0c      	ite	eq
 800ad14:	2301      	moveq	r3, #1
 800ad16:	2300      	movne	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d093      	beq.n	800ac4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad3a:	e071      	b.n	800ae20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad4a:	d123      	bne.n	800ad94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2220      	movs	r2, #32
 800ad70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad80:	f043 0204 	orr.w	r2, r3, #4
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e067      	b.n	800ae64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad9a:	d041      	beq.n	800ae20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad9c:	f7fb f994 	bl	80060c8 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d302      	bcc.n	800adb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d136      	bne.n	800ae20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	0c1b      	lsrs	r3, r3, #16
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d10c      	bne.n	800add6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	43da      	mvns	r2, r3
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4013      	ands	r3, r2
 800adc8:	b29b      	uxth	r3, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	bf14      	ite	ne
 800adce:	2301      	movne	r3, #1
 800add0:	2300      	moveq	r3, #0
 800add2:	b2db      	uxtb	r3, r3
 800add4:	e00b      	b.n	800adee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	43da      	mvns	r2, r3
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	4013      	ands	r3, r2
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bf14      	ite	ne
 800ade8:	2301      	movne	r3, #1
 800adea:	2300      	moveq	r3, #0
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d016      	beq.n	800ae20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0c:	f043 0220 	orr.w	r2, r3, #32
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e021      	b.n	800ae64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d10c      	bne.n	800ae44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	43da      	mvns	r2, r3
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	4013      	ands	r3, r2
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	bf14      	ite	ne
 800ae3c:	2301      	movne	r3, #1
 800ae3e:	2300      	moveq	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	e00b      	b.n	800ae5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	43da      	mvns	r2, r3
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4013      	ands	r3, r2
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	bf14      	ite	ne
 800ae56:	2301      	movne	r3, #1
 800ae58:	2300      	moveq	r3, #0
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f47f af6d 	bne.w	800ad3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae78:	e034      	b.n	800aee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f915 	bl	800b0aa <I2C_IsAcknowledgeFailed>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e034      	b.n	800aef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae90:	d028      	beq.n	800aee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae92:	f7fb f919 	bl	80060c8 <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d302      	bcc.n	800aea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d11d      	bne.n	800aee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeb2:	2b80      	cmp	r3, #128	@ 0x80
 800aeb4:	d016      	beq.n	800aee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed0:	f043 0220 	orr.w	r2, r3, #32
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e007      	b.n	800aef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeee:	2b80      	cmp	r3, #128	@ 0x80
 800aef0:	d1c3      	bne.n	800ae7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af08:	e034      	b.n	800af74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 f8cd 	bl	800b0aa <I2C_IsAcknowledgeFailed>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	e034      	b.n	800af84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af20:	d028      	beq.n	800af74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af22:	f7fb f8d1 	bl	80060c8 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d302      	bcc.n	800af38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d11d      	bne.n	800af74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	f003 0304 	and.w	r3, r3, #4
 800af42:	2b04      	cmp	r3, #4
 800af44:	d016      	beq.n	800af74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2220      	movs	r2, #32
 800af50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af60:	f043 0220 	orr.w	r2, r3, #32
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e007      	b.n	800af84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	f003 0304 	and.w	r3, r3, #4
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d1c3      	bne.n	800af0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af94:	2300      	movs	r3, #0
 800af96:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800af98:	4b13      	ldr	r3, [pc, #76]	@ (800afe8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	08db      	lsrs	r3, r3, #3
 800af9e:	4a13      	ldr	r2, [pc, #76]	@ (800afec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800afa0:	fba2 2303 	umull	r2, r3, r2, r3
 800afa4:	0a1a      	lsrs	r2, r3, #8
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d107      	bne.n	800afca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbe:	f043 0220 	orr.w	r2, r3, #32
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e008      	b.n	800afdc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afd8:	d0e9      	beq.n	800afae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	20000010 	.word	0x20000010
 800afec:	14f8b589 	.word	0x14f8b589

0800aff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800affc:	e049      	b.n	800b092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	f003 0310 	and.w	r3, r3, #16
 800b008:	2b10      	cmp	r3, #16
 800b00a:	d119      	bne.n	800b040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0210 	mvn.w	r2, #16
 800b014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2220      	movs	r2, #32
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e030      	b.n	800b0a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b040:	f7fb f842 	bl	80060c8 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d302      	bcc.n	800b056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d11d      	bne.n	800b092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b060:	2b40      	cmp	r3, #64	@ 0x40
 800b062:	d016      	beq.n	800b092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2200      	movs	r2, #0
 800b068:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07e:	f043 0220 	orr.w	r2, r3, #32
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e007      	b.n	800b0a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b09c:	2b40      	cmp	r3, #64	@ 0x40
 800b09e:	d1ae      	bne.n	800affe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0c0:	d11b      	bne.n	800b0fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b0ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e6:	f043 0204 	orr.w	r2, r3, #4
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b114:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b118:	d103      	bne.n	800b122 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b120:	e007      	b.n	800b132 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b126:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b12a:	d102      	bne.n	800b132 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2208      	movs	r2, #8
 800b130:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b086      	sub	sp, #24
 800b142:	af02      	add	r7, sp, #8
 800b144:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e101      	b.n	800b354 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f007 fb70 	bl	8012850 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2203      	movs	r2, #3
 800b174:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b17e:	d102      	bne.n	800b186 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f003 feeb 	bl	800ef66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7c1a      	ldrb	r2, [r3, #16]
 800b198:	f88d 2000 	strb.w	r2, [sp]
 800b19c:	3304      	adds	r3, #4
 800b19e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1a0:	f003 fdca 	bl	800ed38 <USB_CoreInit>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d005      	beq.n	800b1b6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e0ce      	b.n	800b354 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f003 fee3 	bl	800ef88 <USB_SetCurrentMode>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d005      	beq.n	800b1d4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e0bf      	b.n	800b354 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]
 800b1d8:	e04a      	b.n	800b270 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b1da:	7bfa      	ldrb	r2, [r7, #15]
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	440b      	add	r3, r1
 800b1e8:	3315      	adds	r3, #21
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b1ee:	7bfa      	ldrb	r2, [r7, #15]
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	00db      	lsls	r3, r3, #3
 800b1f6:	4413      	add	r3, r2
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	440b      	add	r3, r1
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	7bfa      	ldrb	r2, [r7, #15]
 800b200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b202:	7bfa      	ldrb	r2, [r7, #15]
 800b204:	7bfb      	ldrb	r3, [r7, #15]
 800b206:	b298      	uxth	r0, r3
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	4613      	mov	r3, r2
 800b20c:	00db      	lsls	r3, r3, #3
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	440b      	add	r3, r1
 800b214:	332e      	adds	r3, #46	@ 0x2e
 800b216:	4602      	mov	r2, r0
 800b218:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b21a:	7bfa      	ldrb	r2, [r7, #15]
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4613      	mov	r3, r2
 800b220:	00db      	lsls	r3, r3, #3
 800b222:	4413      	add	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	440b      	add	r3, r1
 800b228:	3318      	adds	r3, #24
 800b22a:	2200      	movs	r2, #0
 800b22c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b22e:	7bfa      	ldrb	r2, [r7, #15]
 800b230:	6879      	ldr	r1, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	440b      	add	r3, r1
 800b23c:	331c      	adds	r3, #28
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b242:	7bfa      	ldrb	r2, [r7, #15]
 800b244:	6879      	ldr	r1, [r7, #4]
 800b246:	4613      	mov	r3, r2
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	4413      	add	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	440b      	add	r3, r1
 800b250:	3320      	adds	r3, #32
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b256:	7bfa      	ldrb	r2, [r7, #15]
 800b258:	6879      	ldr	r1, [r7, #4]
 800b25a:	4613      	mov	r3, r2
 800b25c:	00db      	lsls	r3, r3, #3
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	440b      	add	r3, r1
 800b264:	3324      	adds	r3, #36	@ 0x24
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	3301      	adds	r3, #1
 800b26e:	73fb      	strb	r3, [r7, #15]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	791b      	ldrb	r3, [r3, #4]
 800b274:	7bfa      	ldrb	r2, [r7, #15]
 800b276:	429a      	cmp	r2, r3
 800b278:	d3af      	bcc.n	800b1da <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]
 800b27e:	e044      	b.n	800b30a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b280:	7bfa      	ldrb	r2, [r7, #15]
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	4613      	mov	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	440b      	add	r3, r1
 800b28e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b292:	2200      	movs	r2, #0
 800b294:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b296:	7bfa      	ldrb	r2, [r7, #15]
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	4613      	mov	r3, r2
 800b29c:	00db      	lsls	r3, r3, #3
 800b29e:	4413      	add	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	440b      	add	r3, r1
 800b2a4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b2a8:	7bfa      	ldrb	r2, [r7, #15]
 800b2aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b2ac:	7bfa      	ldrb	r2, [r7, #15]
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	440b      	add	r3, r1
 800b2ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b2c2:	7bfa      	ldrb	r2, [r7, #15]
 800b2c4:	6879      	ldr	r1, [r7, #4]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	00db      	lsls	r3, r3, #3
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b2d8:	7bfa      	ldrb	r2, [r7, #15]
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	4613      	mov	r3, r2
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	440b      	add	r3, r1
 800b2e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b2ee:	7bfa      	ldrb	r2, [r7, #15]
 800b2f0:	6879      	ldr	r1, [r7, #4]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	00db      	lsls	r3, r3, #3
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	440b      	add	r3, r1
 800b2fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b304:	7bfb      	ldrb	r3, [r7, #15]
 800b306:	3301      	adds	r3, #1
 800b308:	73fb      	strb	r3, [r7, #15]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	791b      	ldrb	r3, [r3, #4]
 800b30e:	7bfa      	ldrb	r2, [r7, #15]
 800b310:	429a      	cmp	r2, r3
 800b312:	d3b5      	bcc.n	800b280 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6818      	ldr	r0, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	7c1a      	ldrb	r2, [r3, #16]
 800b31c:	f88d 2000 	strb.w	r2, [sp]
 800b320:	3304      	adds	r3, #4
 800b322:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b324:	f003 fe7c 	bl	800f020 <USB_DevInit>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2202      	movs	r2, #2
 800b332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e00c      	b.n	800b354 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f004 fec6 	bl	80100de <USB_DevDisconnect>

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_PCD_Start+0x1c>
 800b374:	2302      	movs	r3, #2
 800b376:	e022      	b.n	800b3be <HAL_PCD_Start+0x62>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d009      	beq.n	800b3a0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b390:	2b01      	cmp	r3, #1
 800b392:	d105      	bne.n	800b3a0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b398:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f003 fdcd 	bl	800ef44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f004 fe74 	bl	801009c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b3c6:	b590      	push	{r4, r7, lr}
 800b3c8:	b08d      	sub	sp, #52	@ 0x34
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f004 ff32 	bl	8010246 <USB_GetMode>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f040 848c 	bne.w	800bd02 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f004 fe96 	bl	8010120 <USB_ReadInterrupts>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 8482 	beq.w	800bd00 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	0a1b      	lsrs	r3, r3, #8
 800b406:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4618      	mov	r0, r3
 800b416:	f004 fe83 	bl	8010120 <USB_ReadInterrupts>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f003 0302 	and.w	r3, r3, #2
 800b420:	2b02      	cmp	r3, #2
 800b422:	d107      	bne.n	800b434 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	695a      	ldr	r2, [r3, #20]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f002 0202 	and.w	r2, r2, #2
 800b432:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f004 fe71 	bl	8010120 <USB_ReadInterrupts>
 800b43e:	4603      	mov	r3, r0
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b10      	cmp	r3, #16
 800b446:	d161      	bne.n	800b50c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699a      	ldr	r2, [r3, #24]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0210 	bic.w	r2, r2, #16
 800b456:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	6a1b      	ldr	r3, [r3, #32]
 800b45c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	f003 020f 	and.w	r2, r3, #15
 800b464:	4613      	mov	r3, r2
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	4413      	add	r3, r2
 800b474:	3304      	adds	r3, #4
 800b476:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b47e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b482:	d124      	bne.n	800b4ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b484:	69ba      	ldr	r2, [r7, #24]
 800b486:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b48a:	4013      	ands	r3, r2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d035      	beq.n	800b4fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	091b      	lsrs	r3, r3, #4
 800b498:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b49a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	6a38      	ldr	r0, [r7, #32]
 800b4a4:	f004 fca8 	bl	800fdf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	091b      	lsrs	r3, r3, #4
 800b4b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4b4:	441a      	add	r2, r3
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	695a      	ldr	r2, [r3, #20]
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	091b      	lsrs	r3, r3, #4
 800b4c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4c6:	441a      	add	r2, r3
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	615a      	str	r2, [r3, #20]
 800b4cc:	e016      	b.n	800b4fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b4d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b4d8:	d110      	bne.n	800b4fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6a38      	ldr	r0, [r7, #32]
 800b4e6:	f004 fc87 	bl	800fdf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	695a      	ldr	r2, [r3, #20]
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	091b      	lsrs	r3, r3, #4
 800b4f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4f6:	441a      	add	r2, r3
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	699a      	ldr	r2, [r3, #24]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0210 	orr.w	r2, r2, #16
 800b50a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4618      	mov	r0, r3
 800b512:	f004 fe05 	bl	8010120 <USB_ReadInterrupts>
 800b516:	4603      	mov	r3, r0
 800b518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b51c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b520:	f040 80a7 	bne.w	800b672 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b524:	2300      	movs	r3, #0
 800b526:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f004 fe0a 	bl	8010146 <USB_ReadDevAllOutEpInterrupt>
 800b532:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b534:	e099      	b.n	800b66a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 808e 	beq.w	800b65e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b548:	b2d2      	uxtb	r2, r2
 800b54a:	4611      	mov	r1, r2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f004 fe2e 	bl	80101ae <USB_ReadDevOutEPInterrupt>
 800b552:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00c      	beq.n	800b578 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	4413      	add	r3, r2
 800b566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56a:	461a      	mov	r2, r3
 800b56c:	2301      	movs	r3, #1
 800b56e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fea4 	bl	800c2c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f003 0308 	and.w	r3, r3, #8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00c      	beq.n	800b59c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b58e:	461a      	mov	r2, r3
 800b590:	2308      	movs	r3, #8
 800b592:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 ff7a 	bl	800c490 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d008      	beq.n	800b5b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	015a      	lsls	r2, r3, #5
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	2310      	movs	r3, #16
 800b5b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d030      	beq.n	800b624 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	695b      	ldr	r3, [r3, #20]
 800b5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5ca:	2b80      	cmp	r3, #128	@ 0x80
 800b5cc:	d109      	bne.n	800b5e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	69fa      	ldr	r2, [r7, #28]
 800b5d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b5e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b5e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	78db      	ldrb	r3, [r3, #3]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d108      	bne.n	800b612 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2200      	movs	r2, #0
 800b604:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	4619      	mov	r1, r3
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f007 fa1b 	bl	8012a48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	015a      	lsls	r2, r3, #5
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	4413      	add	r3, r2
 800b61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b61e:	461a      	mov	r2, r3
 800b620:	2302      	movs	r3, #2
 800b622:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	f003 0320 	and.w	r3, r3, #32
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d008      	beq.n	800b640 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63a:	461a      	mov	r2, r3
 800b63c:	2320      	movs	r3, #32
 800b63e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b646:	2b00      	cmp	r3, #0
 800b648:	d009      	beq.n	800b65e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	4413      	add	r3, r2
 800b652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b656:	461a      	mov	r2, r3
 800b658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b65c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	3301      	adds	r3, #1
 800b662:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b666:	085b      	lsrs	r3, r3, #1
 800b668:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f47f af62 	bne.w	800b536 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4618      	mov	r0, r3
 800b678:	f004 fd52 	bl	8010120 <USB_ReadInterrupts>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b682:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b686:	f040 80db 	bne.w	800b840 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f004 fd73 	bl	801017a <USB_ReadDevAllInEpInterrupt>
 800b694:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b696:	2300      	movs	r3, #0
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b69a:	e0cd      	b.n	800b838 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69e:	f003 0301 	and.w	r3, r3, #1
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 80c2 	beq.w	800b82c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f004 fd99 	bl	80101ea <USB_ReadDevInEPInterrupt>
 800b6b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d057      	beq.n	800b774 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	f003 030f 	and.w	r3, r3, #15
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	43db      	mvns	r3, r3
 800b6de:	69f9      	ldr	r1, [r7, #28]
 800b6e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	799b      	ldrb	r3, [r3, #6]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d132      	bne.n	800b768 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b706:	4613      	mov	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	3320      	adds	r3, #32
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b718:	4613      	mov	r3, r2
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	4413      	add	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4403      	add	r3, r0
 800b722:	331c      	adds	r3, #28
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4419      	add	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b72c:	4613      	mov	r3, r2
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	4413      	add	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4403      	add	r3, r0
 800b736:	3320      	adds	r3, #32
 800b738:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d113      	bne.n	800b768 <HAL_PCD_IRQHandler+0x3a2>
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b744:	4613      	mov	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	440b      	add	r3, r1
 800b74e:	3324      	adds	r3, #36	@ 0x24
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d108      	bne.n	800b768 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b760:	461a      	mov	r2, r3
 800b762:	2101      	movs	r1, #1
 800b764:	f004 fda0 	bl	80102a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f007 f8ef 	bl	8012952 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d008      	beq.n	800b790 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b78a:	461a      	mov	r2, r3
 800b78c:	2308      	movs	r3, #8
 800b78e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f003 0310 	and.w	r3, r3, #16
 800b796:	2b00      	cmp	r3, #0
 800b798:	d008      	beq.n	800b7ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	2310      	movs	r3, #16
 800b7aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d008      	beq.n	800b7c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	015a      	lsls	r2, r3, #5
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	4413      	add	r3, r2
 800b7be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	2340      	movs	r3, #64	@ 0x40
 800b7c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	f003 0302 	and.w	r3, r3, #2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d023      	beq.n	800b81a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b7d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7d4:	6a38      	ldr	r0, [r7, #32]
 800b7d6:	f003 fd87 	bl	800f2e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b7da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7dc:	4613      	mov	r3, r2
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	3310      	adds	r3, #16
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	78db      	ldrb	r3, [r3, #3]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d108      	bne.n	800b808 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f007 f932 	bl	8012a6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80a:	015a      	lsls	r2, r3, #5
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	4413      	add	r3, r2
 800b810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b814:	461a      	mov	r2, r3
 800b816:	2302      	movs	r3, #2
 800b818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b820:	2b00      	cmp	r3, #0
 800b822:	d003      	beq.n	800b82c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 fcbd 	bl	800c1a6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	3301      	adds	r3, #1
 800b830:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b834:	085b      	lsrs	r3, r3, #1
 800b836:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f47f af2e 	bne.w	800b69c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f004 fc6b 	bl	8010120 <USB_ReadInterrupts>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b854:	d122      	bne.n	800b89c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	69fa      	ldr	r2, [r7, #28]
 800b860:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b870:	2b01      	cmp	r3, #1
 800b872:	d108      	bne.n	800b886 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b87c:	2100      	movs	r1, #0
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fea4 	bl	800c5cc <HAL_PCDEx_LPM_Callback>
 800b884:	e002      	b.n	800b88c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f007 f8d0 	bl	8012a2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	695a      	ldr	r2, [r3, #20]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800b89a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f004 fc3d 	bl	8010120 <USB_ReadInterrupts>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8b0:	d112      	bne.n	800b8d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d102      	bne.n	800b8c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f007 f88c 	bl	80129e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	695a      	ldr	r2, [r3, #20]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800b8d6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f004 fc1f 	bl	8010120 <USB_ReadInterrupts>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8ec:	f040 80b7 	bne.w	800ba5e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	69fa      	ldr	r2, [r7, #28]
 800b8fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8fe:	f023 0301 	bic.w	r3, r3, #1
 800b902:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2110      	movs	r1, #16
 800b90a:	4618      	mov	r0, r3
 800b90c:	f003 fcec 	bl	800f2e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b910:	2300      	movs	r3, #0
 800b912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b914:	e046      	b.n	800b9a4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b922:	461a      	mov	r2, r3
 800b924:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b928:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	69fa      	ldr	r2, [r7, #28]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b944:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b948:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b956:	461a      	mov	r2, r3
 800b958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b95c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b960:	015a      	lsls	r2, r3, #5
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	4413      	add	r3, r2
 800b966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b96e:	0151      	lsls	r1, r2, #5
 800b970:	69fa      	ldr	r2, [r7, #28]
 800b972:	440a      	add	r2, r1
 800b974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b978:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b97c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b980:	015a      	lsls	r2, r3, #5
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	4413      	add	r3, r2
 800b986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b98e:	0151      	lsls	r1, r2, #5
 800b990:	69fa      	ldr	r2, [r7, #28]
 800b992:	440a      	add	r2, r1
 800b994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b998:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b99c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	791b      	ldrb	r3, [r3, #4]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d3b2      	bcc.n	800b916 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	69fa      	ldr	r2, [r7, #28]
 800b9ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9be:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800b9c2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	7bdb      	ldrb	r3, [r3, #15]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d016      	beq.n	800b9fa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9dc:	f043 030b 	orr.w	r3, r3, #11
 800b9e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ec:	69fa      	ldr	r2, [r7, #28]
 800b9ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9f2:	f043 030b 	orr.w	r3, r3, #11
 800b9f6:	6453      	str	r3, [r2, #68]	@ 0x44
 800b9f8:	e015      	b.n	800ba26 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	69fa      	ldr	r2, [r7, #28]
 800ba04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ba0c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800ba10:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	69fa      	ldr	r2, [r7, #28]
 800ba1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba20:	f043 030b 	orr.w	r3, r3, #11
 800ba24:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba34:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ba38:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ba48:	461a      	mov	r2, r3
 800ba4a:	f004 fc2d 	bl	80102a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	695a      	ldr	r2, [r3, #20]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ba5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f004 fb5c 	bl	8010120 <USB_ReadInterrupts>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba72:	d123      	bne.n	800babc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f004 fbf2 	bl	8010262 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f003 fca9 	bl	800f3da <USB_GetDevSpeed>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681c      	ldr	r4, [r3, #0]
 800ba94:	f001 f9d6 	bl	800ce44 <HAL_RCC_GetHCLKFreq>
 800ba98:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4620      	mov	r0, r4
 800baa2:	f003 f9ad 	bl	800ee00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f006 ff7b 	bl	80129a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695a      	ldr	r2, [r3, #20]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800baba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f004 fb2d 	bl	8010120 <USB_ReadInterrupts>
 800bac6:	4603      	mov	r3, r0
 800bac8:	f003 0308 	and.w	r3, r3, #8
 800bacc:	2b08      	cmp	r3, #8
 800bace:	d10a      	bne.n	800bae6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f006 ff58 	bl	8012986 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	695a      	ldr	r2, [r3, #20]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f002 0208 	and.w	r2, r2, #8
 800bae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f004 fb18 	bl	8010120 <USB_ReadInterrupts>
 800baf0:	4603      	mov	r3, r0
 800baf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baf6:	2b80      	cmp	r3, #128	@ 0x80
 800baf8:	d123      	bne.n	800bb42 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb06:	2301      	movs	r3, #1
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb0a:	e014      	b.n	800bb36 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb10:	4613      	mov	r3, r2
 800bb12:	00db      	lsls	r3, r3, #3
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	440b      	add	r3, r1
 800bb1a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d105      	bne.n	800bb30 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fb0a 	bl	800c144 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb32:	3301      	adds	r3, #1
 800bb34:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	791b      	ldrb	r3, [r3, #4]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d3e4      	bcc.n	800bb0c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f004 faea 	bl	8010120 <USB_ReadInterrupts>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb56:	d13c      	bne.n	800bbd2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bb58:	2301      	movs	r3, #1
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb5c:	e02b      	b.n	800bbb6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	015a      	lsls	r2, r3, #5
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	4413      	add	r3, r2
 800bb66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb72:	4613      	mov	r3, r2
 800bb74:	00db      	lsls	r3, r3, #3
 800bb76:	4413      	add	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3318      	adds	r3, #24
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d115      	bne.n	800bbb0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bb84:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	da12      	bge.n	800bbb0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bb8a:	6879      	ldr	r1, [r7, #4]
 800bb8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb8e:	4613      	mov	r3, r2
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	440b      	add	r3, r1
 800bb98:	3317      	adds	r3, #23
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	4619      	mov	r1, r3
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 faca 	bl	800c144 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	3301      	adds	r3, #1
 800bbb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	791b      	ldrb	r3, [r3, #4]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d3cd      	bcc.n	800bb5e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	695a      	ldr	r2, [r3, #20]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bbd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f004 faa2 	bl	8010120 <USB_ReadInterrupts>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bbe2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bbe6:	d156      	bne.n	800bc96 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bbe8:	2301      	movs	r3, #1
 800bbea:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbec:	e045      	b.n	800bc7a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc02:	4613      	mov	r3, r2
 800bc04:	00db      	lsls	r3, r3, #3
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	440b      	add	r3, r1
 800bc0c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d12e      	bne.n	800bc74 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bc16:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	da2b      	bge.n	800bc74 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bc28:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d121      	bne.n	800bc74 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc34:	4613      	mov	r3, r2
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	4413      	add	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	440b      	add	r3, r1
 800bc3e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bc42:	2201      	movs	r2, #1
 800bc44:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bc4e:	6a3b      	ldr	r3, [r7, #32]
 800bc50:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc70:	6053      	str	r3, [r2, #4]
            break;
 800bc72:	e008      	b.n	800bc86 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc76:	3301      	adds	r3, #1
 800bc78:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	791b      	ldrb	r3, [r3, #4]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d3b3      	bcc.n	800bbee <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	695a      	ldr	r2, [r3, #20]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bc94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f004 fa40 	bl	8010120 <USB_ReadInterrupts>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bca6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcaa:	d10a      	bne.n	800bcc2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f006 feef 	bl	8012a90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	695a      	ldr	r2, [r3, #20]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bcc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f004 fa2a 	bl	8010120 <USB_ReadInterrupts>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f003 0304 	and.w	r3, r3, #4
 800bcd2:	2b04      	cmp	r3, #4
 800bcd4:	d115      	bne.n	800bd02 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f006 fedf 	bl	8012aac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6859      	ldr	r1, [r3, #4]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	605a      	str	r2, [r3, #4]
 800bcfe:	e000      	b.n	800bd02 <HAL_PCD_IRQHandler+0x93c>
      return;
 800bd00:	bf00      	nop
    }
  }
}
 800bd02:	3734      	adds	r7, #52	@ 0x34
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd90      	pop	{r4, r7, pc}

0800bd08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d101      	bne.n	800bd22 <HAL_PCD_SetAddress+0x1a>
 800bd1e:	2302      	movs	r3, #2
 800bd20:	e012      	b.n	800bd48 <HAL_PCD_SetAddress+0x40>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	78fa      	ldrb	r2, [r7, #3]
 800bd2e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	78fa      	ldrb	r2, [r7, #3]
 800bd36:	4611      	mov	r1, r2
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f004 f989 	bl	8010050 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	4608      	mov	r0, r1
 800bd5a:	4611      	mov	r1, r2
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	4603      	mov	r3, r0
 800bd60:	70fb      	strb	r3, [r7, #3]
 800bd62:	460b      	mov	r3, r1
 800bd64:	803b      	strh	r3, [r7, #0]
 800bd66:	4613      	mov	r3, r2
 800bd68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bd6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	da0f      	bge.n	800bd96 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd76:	78fb      	ldrb	r3, [r7, #3]
 800bd78:	f003 020f 	and.w	r2, r3, #15
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	4413      	add	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	3310      	adds	r3, #16
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	4413      	add	r3, r2
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2201      	movs	r2, #1
 800bd92:	705a      	strb	r2, [r3, #1]
 800bd94:	e00f      	b.n	800bdb6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd96:	78fb      	ldrb	r3, [r7, #3]
 800bd98:	f003 020f 	and.w	r2, r3, #15
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	4413      	add	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	3304      	adds	r3, #4
 800bdae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800bdc2:	883b      	ldrh	r3, [r7, #0]
 800bdc4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	78ba      	ldrb	r2, [r7, #2]
 800bdd0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d004      	beq.n	800bde4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bde4:	78bb      	ldrb	r3, [r7, #2]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d102      	bne.n	800bdf0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d101      	bne.n	800bdfe <HAL_PCD_EP_Open+0xae>
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	e00e      	b.n	800be1c <HAL_PCD_EP_Open+0xcc>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68f9      	ldr	r1, [r7, #12]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f003 fb09 	bl	800f424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800be1a:	7afb      	ldrb	r3, [r7, #11]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800be30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be34:	2b00      	cmp	r3, #0
 800be36:	da0f      	bge.n	800be58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800be38:	78fb      	ldrb	r3, [r7, #3]
 800be3a:	f003 020f 	and.w	r2, r3, #15
 800be3e:	4613      	mov	r3, r2
 800be40:	00db      	lsls	r3, r3, #3
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	3310      	adds	r3, #16
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	4413      	add	r3, r2
 800be4c:	3304      	adds	r3, #4
 800be4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2201      	movs	r2, #1
 800be54:	705a      	strb	r2, [r3, #1]
 800be56:	e00f      	b.n	800be78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	f003 020f 	and.w	r2, r3, #15
 800be5e:	4613      	mov	r3, r2
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	3304      	adds	r3, #4
 800be70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2200      	movs	r2, #0
 800be76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	f003 030f 	and.w	r3, r3, #15
 800be7e:	b2da      	uxtb	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d101      	bne.n	800be92 <HAL_PCD_EP_Close+0x6e>
 800be8e:	2302      	movs	r3, #2
 800be90:	e00e      	b.n	800beb0 <HAL_PCD_EP_Close+0x8c>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68f9      	ldr	r1, [r7, #12]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f003 fb47 	bl	800f534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	607a      	str	r2, [r7, #4]
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	460b      	mov	r3, r1
 800bec6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bec8:	7afb      	ldrb	r3, [r7, #11]
 800beca:	f003 020f 	and.w	r2, r3, #15
 800bece:	4613      	mov	r3, r2
 800bed0:	00db      	lsls	r3, r3, #3
 800bed2:	4413      	add	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800beda:	68fa      	ldr	r2, [r7, #12]
 800bedc:	4413      	add	r3, r2
 800bede:	3304      	adds	r3, #4
 800bee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2200      	movs	r2, #0
 800bef2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	2200      	movs	r2, #0
 800bef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800befa:	7afb      	ldrb	r3, [r7, #11]
 800befc:	f003 030f 	and.w	r3, r3, #15
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	799b      	ldrb	r3, [r3, #6]
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d102      	bne.n	800bf14 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	799b      	ldrb	r3, [r3, #6]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	6979      	ldr	r1, [r7, #20]
 800bf20:	f003 fbe4 	bl	800f6ec <USB_EPStartXfer>

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	f003 020f 	and.w	r2, r3, #15
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	4613      	mov	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800bf50:	681b      	ldr	r3, [r3, #0]
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b086      	sub	sp, #24
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	f003 020f 	and.w	r2, r3, #15
 800bf74:	4613      	mov	r3, r2
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	3310      	adds	r3, #16
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	4413      	add	r3, r2
 800bf82:	3304      	adds	r3, #4
 800bf84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2200      	movs	r2, #0
 800bf96:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf9e:	7afb      	ldrb	r3, [r7, #11]
 800bfa0:	f003 030f 	and.w	r3, r3, #15
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	799b      	ldrb	r3, [r3, #6]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d102      	bne.n	800bfb8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6818      	ldr	r0, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	799b      	ldrb	r3, [r3, #6]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6979      	ldr	r1, [r7, #20]
 800bfc4:	f003 fb92 	bl	800f6ec <USB_EPStartXfer>

  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3718      	adds	r7, #24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bfde:	78fb      	ldrb	r3, [r7, #3]
 800bfe0:	f003 030f 	and.w	r3, r3, #15
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	7912      	ldrb	r2, [r2, #4]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d901      	bls.n	800bff0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e04f      	b.n	800c090 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	da0f      	bge.n	800c018 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bff8:	78fb      	ldrb	r3, [r7, #3]
 800bffa:	f003 020f 	and.w	r2, r3, #15
 800bffe:	4613      	mov	r3, r2
 800c000:	00db      	lsls	r3, r3, #3
 800c002:	4413      	add	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	3310      	adds	r3, #16
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	4413      	add	r3, r2
 800c00c:	3304      	adds	r3, #4
 800c00e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2201      	movs	r2, #1
 800c014:	705a      	strb	r2, [r3, #1]
 800c016:	e00d      	b.n	800c034 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c018:	78fa      	ldrb	r2, [r7, #3]
 800c01a:	4613      	mov	r3, r2
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	4413      	add	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	4413      	add	r3, r2
 800c02a:	3304      	adds	r3, #4
 800c02c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2200      	movs	r2, #0
 800c032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2201      	movs	r2, #1
 800c038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c03a:	78fb      	ldrb	r3, [r7, #3]
 800c03c:	f003 030f 	and.w	r3, r3, #15
 800c040:	b2da      	uxtb	r2, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d101      	bne.n	800c054 <HAL_PCD_EP_SetStall+0x82>
 800c050:	2302      	movs	r3, #2
 800c052:	e01d      	b.n	800c090 <HAL_PCD_EP_SetStall+0xbe>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68f9      	ldr	r1, [r7, #12]
 800c062:	4618      	mov	r0, r3
 800c064:	f003 ff20 	bl	800fea8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	f003 030f 	and.w	r3, r3, #15
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6818      	ldr	r0, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	7999      	ldrb	r1, [r3, #6]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c080:	461a      	mov	r2, r3
 800c082:	f004 f911 	bl	80102a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	f003 030f 	and.w	r3, r3, #15
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	7912      	ldrb	r2, [r2, #4]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d901      	bls.n	800c0b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e042      	b.n	800c13c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c0b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	da0f      	bge.n	800c0de <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0be:	78fb      	ldrb	r3, [r7, #3]
 800c0c0:	f003 020f 	and.w	r2, r3, #15
 800c0c4:	4613      	mov	r3, r2
 800c0c6:	00db      	lsls	r3, r3, #3
 800c0c8:	4413      	add	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	3310      	adds	r3, #16
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	705a      	strb	r2, [r3, #1]
 800c0dc:	e00f      	b.n	800c0fe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0de:	78fb      	ldrb	r3, [r7, #3]
 800c0e0:	f003 020f 	and.w	r2, r3, #15
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	4413      	add	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c104:	78fb      	ldrb	r3, [r7, #3]
 800c106:	f003 030f 	and.w	r3, r3, #15
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c116:	2b01      	cmp	r3, #1
 800c118:	d101      	bne.n	800c11e <HAL_PCD_EP_ClrStall+0x86>
 800c11a:	2302      	movs	r3, #2
 800c11c:	e00e      	b.n	800c13c <HAL_PCD_EP_ClrStall+0xa4>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f003 ff29 	bl	800ff84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c154:	2b00      	cmp	r3, #0
 800c156:	da0c      	bge.n	800c172 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	f003 020f 	and.w	r2, r3, #15
 800c15e:	4613      	mov	r3, r2
 800c160:	00db      	lsls	r3, r3, #3
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	3310      	adds	r3, #16
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	4413      	add	r3, r2
 800c16c:	3304      	adds	r3, #4
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e00c      	b.n	800c18c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	f003 020f 	and.w	r2, r3, #15
 800c178:	4613      	mov	r3, r2
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	4413      	add	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	4413      	add	r3, r2
 800c188:	3304      	adds	r3, #4
 800c18a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68f9      	ldr	r1, [r7, #12]
 800c192:	4618      	mov	r0, r3
 800c194:	f003 fd48 	bl	800fc28 <USB_EPStopXfer>
 800c198:	4603      	mov	r3, r0
 800c19a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c19c:	7afb      	ldrb	r3, [r7, #11]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b08a      	sub	sp, #40	@ 0x28
 800c1aa:	af02      	add	r7, sp, #8
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	3310      	adds	r3, #16
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	695a      	ldr	r2, [r3, #20]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d901      	bls.n	800c1de <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e06b      	b.n	800c2b6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	691a      	ldr	r2, [r3, #16]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	69fa      	ldr	r2, [r7, #28]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d902      	bls.n	800c1fa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	3303      	adds	r3, #3
 800c1fe:	089b      	lsrs	r3, r3, #2
 800c200:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c202:	e02a      	b.n	800c25a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	691a      	ldr	r2, [r3, #16]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	69fa      	ldr	r2, [r7, #28]
 800c216:	429a      	cmp	r2, r3
 800c218:	d902      	bls.n	800c220 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	3303      	adds	r3, #3
 800c224:	089b      	lsrs	r3, r3, #2
 800c226:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	68d9      	ldr	r1, [r3, #12]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	4603      	mov	r3, r0
 800c23c:	6978      	ldr	r0, [r7, #20]
 800c23e:	f003 fd9d 	bl	800fd7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	68da      	ldr	r2, [r3, #12]
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	441a      	add	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	695a      	ldr	r2, [r3, #20]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	441a      	add	r2, r3
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	015a      	lsls	r2, r3, #5
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	4413      	add	r3, r2
 800c262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c26a:	69ba      	ldr	r2, [r7, #24]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d809      	bhi.n	800c284 <PCD_WriteEmptyTxFifo+0xde>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	695a      	ldr	r2, [r3, #20]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c278:	429a      	cmp	r2, r3
 800c27a:	d203      	bcs.n	800c284 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1bf      	bne.n	800c204 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	691a      	ldr	r2, [r3, #16]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d811      	bhi.n	800c2b4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	f003 030f 	and.w	r3, r3, #15
 800c296:	2201      	movs	r2, #1
 800c298:	fa02 f303 	lsl.w	r3, r2, r3
 800c29c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	6939      	ldr	r1, [r7, #16]
 800c2ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3720      	adds	r7, #32
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
	...

0800c2c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b088      	sub	sp, #32
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	333c      	adds	r3, #60	@ 0x3c
 800c2d8:	3304      	adds	r3, #4
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	799b      	ldrb	r3, [r3, #6]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d17b      	bne.n	800c3ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f003 0308 	and.w	r3, r3, #8
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d015      	beq.n	800c32c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	4a61      	ldr	r2, [pc, #388]	@ (800c488 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c304:	4293      	cmp	r3, r2
 800c306:	f240 80b9 	bls.w	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 80b3 	beq.w	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	015a      	lsls	r2, r3, #5
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	4413      	add	r3, r2
 800c31e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c322:	461a      	mov	r2, r3
 800c324:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c328:	6093      	str	r3, [r2, #8]
 800c32a:	e0a7      	b.n	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	f003 0320 	and.w	r3, r3, #32
 800c332:	2b00      	cmp	r3, #0
 800c334:	d009      	beq.n	800c34a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	015a      	lsls	r2, r3, #5
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	4413      	add	r3, r2
 800c33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c342:	461a      	mov	r2, r3
 800c344:	2320      	movs	r3, #32
 800c346:	6093      	str	r3, [r2, #8]
 800c348:	e098      	b.n	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c350:	2b00      	cmp	r3, #0
 800c352:	f040 8093 	bne.w	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	4a4b      	ldr	r2, [pc, #300]	@ (800c488 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d90f      	bls.n	800c37e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c374:	461a      	mov	r2, r3
 800c376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c37a:	6093      	str	r3, [r2, #8]
 800c37c:	e07e      	b.n	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	4613      	mov	r3, r2
 800c382:	00db      	lsls	r3, r3, #3
 800c384:	4413      	add	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	4413      	add	r3, r2
 800c390:	3304      	adds	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6a1a      	ldr	r2, [r3, #32]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	0159      	lsls	r1, r3, #5
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	440b      	add	r3, r1
 800c3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3aa:	1ad2      	subs	r2, r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d114      	bne.n	800c3e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d109      	bne.n	800c3d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6818      	ldr	r0, [r3, #0]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	f003 ff6c 	bl	80102a8 <USB_EP0_OutStart>
 800c3d0:	e006      	b.n	800c3e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	68da      	ldr	r2, [r3, #12]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	441a      	add	r2, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f006 fa98 	bl	801291c <HAL_PCD_DataOutStageCallback>
 800c3ec:	e046      	b.n	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	4a26      	ldr	r2, [pc, #152]	@ (800c48c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d124      	bne.n	800c440 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00a      	beq.n	800c416 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	015a      	lsls	r2, r3, #5
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	4413      	add	r3, r2
 800c408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c40c:	461a      	mov	r2, r3
 800c40e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c412:	6093      	str	r3, [r2, #8]
 800c414:	e032      	b.n	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f003 0320 	and.w	r3, r3, #32
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d008      	beq.n	800c432 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c42c:	461a      	mov	r2, r3
 800c42e:	2320      	movs	r3, #32
 800c430:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	b2db      	uxtb	r3, r3
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f006 fa6f 	bl	801291c <HAL_PCD_DataOutStageCallback>
 800c43e:	e01d      	b.n	800c47c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d114      	bne.n	800c470 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	4613      	mov	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d108      	bne.n	800c470 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6818      	ldr	r0, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c468:	461a      	mov	r2, r3
 800c46a:	2100      	movs	r1, #0
 800c46c:	f003 ff1c 	bl	80102a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	4619      	mov	r1, r3
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f006 fa50 	bl	801291c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3720      	adds	r7, #32
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	4f54300a 	.word	0x4f54300a
 800c48c:	4f54310a 	.word	0x4f54310a

0800c490 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	333c      	adds	r3, #60	@ 0x3c
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	015a      	lsls	r2, r3, #5
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	4a15      	ldr	r2, [pc, #84]	@ (800c518 <PCD_EP_OutSetupPacket_int+0x88>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d90e      	bls.n	800c4e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d009      	beq.n	800c4e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4dc:	461a      	mov	r2, r3
 800c4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f006 fa07 	bl	80128f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c518 <PCD_EP_OutSetupPacket_int+0x88>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d90c      	bls.n	800c50c <PCD_EP_OutSetupPacket_int+0x7c>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	799b      	ldrb	r3, [r3, #6]
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d108      	bne.n	800c50c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c504:	461a      	mov	r2, r3
 800c506:	2101      	movs	r1, #1
 800c508:	f003 fece 	bl	80102a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	4f54300a 	.word	0x4f54300a

0800c51c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	460b      	mov	r3, r1
 800c526:	70fb      	strb	r3, [r7, #3]
 800c528:	4613      	mov	r3, r2
 800c52a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c532:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d107      	bne.n	800c54a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c53a:	883b      	ldrh	r3, [r7, #0]
 800c53c:	0419      	lsls	r1, r3, #16
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68ba      	ldr	r2, [r7, #8]
 800c544:	430a      	orrs	r2, r1
 800c546:	629a      	str	r2, [r3, #40]	@ 0x28
 800c548:	e028      	b.n	800c59c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c550:	0c1b      	lsrs	r3, r3, #16
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	4413      	add	r3, r2
 800c556:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
 800c55c:	e00d      	b.n	800c57a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	7bfb      	ldrb	r3, [r7, #15]
 800c564:	3340      	adds	r3, #64	@ 0x40
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	4413      	add	r3, r2
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	0c1b      	lsrs	r3, r3, #16
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	4413      	add	r3, r2
 800c572:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	3301      	adds	r3, #1
 800c578:	73fb      	strb	r3, [r7, #15]
 800c57a:	7bfa      	ldrb	r2, [r7, #15]
 800c57c:	78fb      	ldrb	r3, [r7, #3]
 800c57e:	3b01      	subs	r3, #1
 800c580:	429a      	cmp	r2, r3
 800c582:	d3ec      	bcc.n	800c55e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c584:	883b      	ldrh	r3, [r7, #0]
 800c586:	0418      	lsls	r0, r3, #16
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6819      	ldr	r1, [r3, #0]
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	3b01      	subs	r3, #1
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	4302      	orrs	r2, r0
 800c594:	3340      	adds	r3, #64	@ 0x40
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	440b      	add	r3, r1
 800c59a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b083      	sub	sp, #12
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	887a      	ldrh	r2, [r7, #2]
 800c5bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b083      	sub	sp, #12
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e267      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f003 0301 	and.w	r3, r3, #1
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d075      	beq.n	800c6ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c602:	4b88      	ldr	r3, [pc, #544]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f003 030c 	and.w	r3, r3, #12
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d00c      	beq.n	800c628 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c60e:	4b85      	ldr	r3, [pc, #532]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c616:	2b08      	cmp	r3, #8
 800c618:	d112      	bne.n	800c640 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c61a:	4b82      	ldr	r3, [pc, #520]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c626:	d10b      	bne.n	800c640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c628:	4b7e      	ldr	r3, [pc, #504]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d05b      	beq.n	800c6ec <HAL_RCC_OscConfig+0x108>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d157      	bne.n	800c6ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e242      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c648:	d106      	bne.n	800c658 <HAL_RCC_OscConfig+0x74>
 800c64a:	4b76      	ldr	r3, [pc, #472]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a75      	ldr	r2, [pc, #468]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c654:	6013      	str	r3, [r2, #0]
 800c656:	e01d      	b.n	800c694 <HAL_RCC_OscConfig+0xb0>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c660:	d10c      	bne.n	800c67c <HAL_RCC_OscConfig+0x98>
 800c662:	4b70      	ldr	r3, [pc, #448]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a6f      	ldr	r2, [pc, #444]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	4b6d      	ldr	r3, [pc, #436]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a6c      	ldr	r2, [pc, #432]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	e00b      	b.n	800c694 <HAL_RCC_OscConfig+0xb0>
 800c67c:	4b69      	ldr	r3, [pc, #420]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a68      	ldr	r2, [pc, #416]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c686:	6013      	str	r3, [r2, #0]
 800c688:	4b66      	ldr	r3, [pc, #408]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a65      	ldr	r2, [pc, #404]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c68e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d013      	beq.n	800c6c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c69c:	f7f9 fd14 	bl	80060c8 <HAL_GetTick>
 800c6a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6a2:	e008      	b.n	800c6b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6a4:	f7f9 fd10 	bl	80060c8 <HAL_GetTick>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	2b64      	cmp	r3, #100	@ 0x64
 800c6b0:	d901      	bls.n	800c6b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	e207      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c6b6:	4b5b      	ldr	r3, [pc, #364]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0f0      	beq.n	800c6a4 <HAL_RCC_OscConfig+0xc0>
 800c6c2:	e014      	b.n	800c6ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6c4:	f7f9 fd00 	bl	80060c8 <HAL_GetTick>
 800c6c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6ca:	e008      	b.n	800c6de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6cc:	f7f9 fcfc 	bl	80060c8 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b64      	cmp	r3, #100	@ 0x64
 800c6d8:	d901      	bls.n	800c6de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e1f3      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6de:	4b51      	ldr	r3, [pc, #324]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1f0      	bne.n	800c6cc <HAL_RCC_OscConfig+0xe8>
 800c6ea:	e000      	b.n	800c6ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0302 	and.w	r3, r3, #2
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d063      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c6fa:	4b4a      	ldr	r3, [pc, #296]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f003 030c 	and.w	r3, r3, #12
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00b      	beq.n	800c71e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c706:	4b47      	ldr	r3, [pc, #284]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800c70e:	2b08      	cmp	r3, #8
 800c710:	d11c      	bne.n	800c74c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c712:	4b44      	ldr	r3, [pc, #272]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d116      	bne.n	800c74c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c71e:	4b41      	ldr	r3, [pc, #260]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f003 0302 	and.w	r3, r3, #2
 800c726:	2b00      	cmp	r3, #0
 800c728:	d005      	beq.n	800c736 <HAL_RCC_OscConfig+0x152>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d001      	beq.n	800c736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e1c7      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c736:	4b3b      	ldr	r3, [pc, #236]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	4937      	ldr	r1, [pc, #220]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c746:	4313      	orrs	r3, r2
 800c748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c74a:	e03a      	b.n	800c7c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d020      	beq.n	800c796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c754:	4b34      	ldr	r3, [pc, #208]	@ (800c828 <HAL_RCC_OscConfig+0x244>)
 800c756:	2201      	movs	r2, #1
 800c758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c75a:	f7f9 fcb5 	bl	80060c8 <HAL_GetTick>
 800c75e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c760:	e008      	b.n	800c774 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c762:	f7f9 fcb1 	bl	80060c8 <HAL_GetTick>
 800c766:	4602      	mov	r2, r0
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d901      	bls.n	800c774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c770:	2303      	movs	r3, #3
 800c772:	e1a8      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c774:	4b2b      	ldr	r3, [pc, #172]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0302 	and.w	r3, r3, #2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d0f0      	beq.n	800c762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c780:	4b28      	ldr	r3, [pc, #160]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	4925      	ldr	r1, [pc, #148]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c790:	4313      	orrs	r3, r2
 800c792:	600b      	str	r3, [r1, #0]
 800c794:	e015      	b.n	800c7c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c796:	4b24      	ldr	r3, [pc, #144]	@ (800c828 <HAL_RCC_OscConfig+0x244>)
 800c798:	2200      	movs	r2, #0
 800c79a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c79c:	f7f9 fc94 	bl	80060c8 <HAL_GetTick>
 800c7a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7a2:	e008      	b.n	800c7b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7a4:	f7f9 fc90 	bl	80060c8 <HAL_GetTick>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d901      	bls.n	800c7b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e187      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c7b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0302 	and.w	r3, r3, #2
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1f0      	bne.n	800c7a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 0308 	and.w	r3, r3, #8
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d036      	beq.n	800c83c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d016      	beq.n	800c804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c7d6:	4b15      	ldr	r3, [pc, #84]	@ (800c82c <HAL_RCC_OscConfig+0x248>)
 800c7d8:	2201      	movs	r2, #1
 800c7da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7dc:	f7f9 fc74 	bl	80060c8 <HAL_GetTick>
 800c7e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7e2:	e008      	b.n	800c7f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7e4:	f7f9 fc70 	bl	80060c8 <HAL_GetTick>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	d901      	bls.n	800c7f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e167      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c824 <HAL_RCC_OscConfig+0x240>)
 800c7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0f0      	beq.n	800c7e4 <HAL_RCC_OscConfig+0x200>
 800c802:	e01b      	b.n	800c83c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c804:	4b09      	ldr	r3, [pc, #36]	@ (800c82c <HAL_RCC_OscConfig+0x248>)
 800c806:	2200      	movs	r2, #0
 800c808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c80a:	f7f9 fc5d 	bl	80060c8 <HAL_GetTick>
 800c80e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c810:	e00e      	b.n	800c830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c812:	f7f9 fc59 	bl	80060c8 <HAL_GetTick>
 800c816:	4602      	mov	r2, r0
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d907      	bls.n	800c830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e150      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
 800c824:	40023800 	.word	0x40023800
 800c828:	42470000 	.word	0x42470000
 800c82c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c830:	4b88      	ldr	r3, [pc, #544]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c834:	f003 0302 	and.w	r3, r3, #2
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d1ea      	bne.n	800c812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b00      	cmp	r3, #0
 800c846:	f000 8097 	beq.w	800c978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c84a:	2300      	movs	r3, #0
 800c84c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c84e:	4b81      	ldr	r3, [pc, #516]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10f      	bne.n	800c87a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c85a:	2300      	movs	r3, #0
 800c85c:	60bb      	str	r3, [r7, #8]
 800c85e:	4b7d      	ldr	r3, [pc, #500]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c862:	4a7c      	ldr	r2, [pc, #496]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c868:	6413      	str	r3, [r2, #64]	@ 0x40
 800c86a:	4b7a      	ldr	r3, [pc, #488]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c86e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c872:	60bb      	str	r3, [r7, #8]
 800c874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c876:	2301      	movs	r3, #1
 800c878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c87a:	4b77      	ldr	r3, [pc, #476]	@ (800ca58 <HAL_RCC_OscConfig+0x474>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c882:	2b00      	cmp	r3, #0
 800c884:	d118      	bne.n	800c8b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c886:	4b74      	ldr	r3, [pc, #464]	@ (800ca58 <HAL_RCC_OscConfig+0x474>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a73      	ldr	r2, [pc, #460]	@ (800ca58 <HAL_RCC_OscConfig+0x474>)
 800c88c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c892:	f7f9 fc19 	bl	80060c8 <HAL_GetTick>
 800c896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c898:	e008      	b.n	800c8ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c89a:	f7f9 fc15 	bl	80060c8 <HAL_GetTick>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	1ad3      	subs	r3, r2, r3
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d901      	bls.n	800c8ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c8a8:	2303      	movs	r3, #3
 800c8aa:	e10c      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c8ac:	4b6a      	ldr	r3, [pc, #424]	@ (800ca58 <HAL_RCC_OscConfig+0x474>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0f0      	beq.n	800c89a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d106      	bne.n	800c8ce <HAL_RCC_OscConfig+0x2ea>
 800c8c0:	4b64      	ldr	r3, [pc, #400]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8c4:	4a63      	ldr	r2, [pc, #396]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8c6:	f043 0301 	orr.w	r3, r3, #1
 800c8ca:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8cc:	e01c      	b.n	800c908 <HAL_RCC_OscConfig+0x324>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	2b05      	cmp	r3, #5
 800c8d4:	d10c      	bne.n	800c8f0 <HAL_RCC_OscConfig+0x30c>
 800c8d6:	4b5f      	ldr	r3, [pc, #380]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8da:	4a5e      	ldr	r2, [pc, #376]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8dc:	f043 0304 	orr.w	r3, r3, #4
 800c8e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8e2:	4b5c      	ldr	r3, [pc, #368]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8e6:	4a5b      	ldr	r2, [pc, #364]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8e8:	f043 0301 	orr.w	r3, r3, #1
 800c8ec:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8ee:	e00b      	b.n	800c908 <HAL_RCC_OscConfig+0x324>
 800c8f0:	4b58      	ldr	r3, [pc, #352]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8f4:	4a57      	ldr	r2, [pc, #348]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8f6:	f023 0301 	bic.w	r3, r3, #1
 800c8fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800c8fc:	4b55      	ldr	r3, [pc, #340]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c900:	4a54      	ldr	r2, [pc, #336]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c902:	f023 0304 	bic.w	r3, r3, #4
 800c906:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d015      	beq.n	800c93c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c910:	f7f9 fbda 	bl	80060c8 <HAL_GetTick>
 800c914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c916:	e00a      	b.n	800c92e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c918:	f7f9 fbd6 	bl	80060c8 <HAL_GetTick>
 800c91c:	4602      	mov	r2, r0
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c926:	4293      	cmp	r3, r2
 800c928:	d901      	bls.n	800c92e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	e0cb      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c92e:	4b49      	ldr	r3, [pc, #292]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c932:	f003 0302 	and.w	r3, r3, #2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0ee      	beq.n	800c918 <HAL_RCC_OscConfig+0x334>
 800c93a:	e014      	b.n	800c966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c93c:	f7f9 fbc4 	bl	80060c8 <HAL_GetTick>
 800c940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c942:	e00a      	b.n	800c95a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c944:	f7f9 fbc0 	bl	80060c8 <HAL_GetTick>
 800c948:	4602      	mov	r2, r0
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c952:	4293      	cmp	r3, r2
 800c954:	d901      	bls.n	800c95a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	e0b5      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c95a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c95e:	f003 0302 	and.w	r3, r3, #2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1ee      	bne.n	800c944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d105      	bne.n	800c978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c96c:	4b39      	ldr	r3, [pc, #228]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c970:	4a38      	ldr	r2, [pc, #224]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c976:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 80a1 	beq.w	800cac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c982:	4b34      	ldr	r3, [pc, #208]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f003 030c 	and.w	r3, r3, #12
 800c98a:	2b08      	cmp	r3, #8
 800c98c:	d05c      	beq.n	800ca48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	2b02      	cmp	r3, #2
 800c994:	d141      	bne.n	800ca1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c996:	4b31      	ldr	r3, [pc, #196]	@ (800ca5c <HAL_RCC_OscConfig+0x478>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c99c:	f7f9 fb94 	bl	80060c8 <HAL_GetTick>
 800c9a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9a4:	f7f9 fb90 	bl	80060c8 <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e087      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9b6:	4b27      	ldr	r3, [pc, #156]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1f0      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	69da      	ldr	r2, [r3, #28]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6a1b      	ldr	r3, [r3, #32]
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d0:	019b      	lsls	r3, r3, #6
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d8:	085b      	lsrs	r3, r3, #1
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	041b      	lsls	r3, r3, #16
 800c9de:	431a      	orrs	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e4:	061b      	lsls	r3, r3, #24
 800c9e6:	491b      	ldr	r1, [pc, #108]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c9ec:	4b1b      	ldr	r3, [pc, #108]	@ (800ca5c <HAL_RCC_OscConfig+0x478>)
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9f2:	f7f9 fb69 	bl	80060c8 <HAL_GetTick>
 800c9f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9f8:	e008      	b.n	800ca0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9fa:	f7f9 fb65 	bl	80060c8 <HAL_GetTick>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d901      	bls.n	800ca0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e05c      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca0c:	4b11      	ldr	r3, [pc, #68]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0f0      	beq.n	800c9fa <HAL_RCC_OscConfig+0x416>
 800ca18:	e054      	b.n	800cac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca1a:	4b10      	ldr	r3, [pc, #64]	@ (800ca5c <HAL_RCC_OscConfig+0x478>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca20:	f7f9 fb52 	bl	80060c8 <HAL_GetTick>
 800ca24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca26:	e008      	b.n	800ca3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca28:	f7f9 fb4e 	bl	80060c8 <HAL_GetTick>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	2b02      	cmp	r3, #2
 800ca34:	d901      	bls.n	800ca3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ca36:	2303      	movs	r3, #3
 800ca38:	e045      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca3a:	4b06      	ldr	r3, [pc, #24]	@ (800ca54 <HAL_RCC_OscConfig+0x470>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1f0      	bne.n	800ca28 <HAL_RCC_OscConfig+0x444>
 800ca46:	e03d      	b.n	800cac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	699b      	ldr	r3, [r3, #24]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d107      	bne.n	800ca60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e038      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
 800ca54:	40023800 	.word	0x40023800
 800ca58:	40007000 	.word	0x40007000
 800ca5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ca60:	4b1b      	ldr	r3, [pc, #108]	@ (800cad0 <HAL_RCC_OscConfig+0x4ec>)
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d028      	beq.n	800cac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d121      	bne.n	800cac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d11a      	bne.n	800cac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ca90:	4013      	ands	r3, r2
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ca96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d111      	bne.n	800cac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa6:	085b      	lsrs	r3, r3, #1
 800caa8:	3b01      	subs	r3, #1
 800caaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800caac:	429a      	cmp	r2, r3
 800caae:	d107      	bne.n	800cac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d001      	beq.n	800cac4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800cac0:	2301      	movs	r3, #1
 800cac2:	e000      	b.n	800cac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	40023800 	.word	0x40023800

0800cad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e0cc      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cae8:	4b68      	ldr	r3, [pc, #416]	@ (800cc8c <HAL_RCC_ClockConfig+0x1b8>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 0307 	and.w	r3, r3, #7
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d90c      	bls.n	800cb10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800caf6:	4b65      	ldr	r3, [pc, #404]	@ (800cc8c <HAL_RCC_ClockConfig+0x1b8>)
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	b2d2      	uxtb	r2, r2
 800cafc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cafe:	4b63      	ldr	r3, [pc, #396]	@ (800cc8c <HAL_RCC_ClockConfig+0x1b8>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0307 	and.w	r3, r3, #7
 800cb06:	683a      	ldr	r2, [r7, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d001      	beq.n	800cb10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e0b8      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f003 0302 	and.w	r3, r3, #2
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d020      	beq.n	800cb5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0304 	and.w	r3, r3, #4
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb28:	4b59      	ldr	r3, [pc, #356]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	4a58      	ldr	r2, [pc, #352]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800cb32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 0308 	and.w	r3, r3, #8
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d005      	beq.n	800cb4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cb40:	4b53      	ldr	r3, [pc, #332]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	4a52      	ldr	r2, [pc, #328]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800cb4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb4c:	4b50      	ldr	r3, [pc, #320]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	494d      	ldr	r1, [pc, #308]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d044      	beq.n	800cbf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d107      	bne.n	800cb82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb72:	4b47      	ldr	r3, [pc, #284]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d119      	bne.n	800cbb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e07f      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d003      	beq.n	800cb92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cb8e:	2b03      	cmp	r3, #3
 800cb90:	d107      	bne.n	800cba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb92:	4b3f      	ldr	r3, [pc, #252]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d109      	bne.n	800cbb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e06f      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cba2:	4b3b      	ldr	r3, [pc, #236]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 0302 	and.w	r3, r3, #2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e067      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cbb2:	4b37      	ldr	r3, [pc, #220]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f023 0203 	bic.w	r2, r3, #3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	4934      	ldr	r1, [pc, #208]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cbc4:	f7f9 fa80 	bl	80060c8 <HAL_GetTick>
 800cbc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbca:	e00a      	b.n	800cbe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbcc:	f7f9 fa7c 	bl	80060c8 <HAL_GetTick>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d901      	bls.n	800cbe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	e04f      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbe2:	4b2b      	ldr	r3, [pc, #172]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	f003 020c 	and.w	r2, r3, #12
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d1eb      	bne.n	800cbcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cbf4:	4b25      	ldr	r3, [pc, #148]	@ (800cc8c <HAL_RCC_ClockConfig+0x1b8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0307 	and.w	r3, r3, #7
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d20c      	bcs.n	800cc1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc02:	4b22      	ldr	r3, [pc, #136]	@ (800cc8c <HAL_RCC_ClockConfig+0x1b8>)
 800cc04:	683a      	ldr	r2, [r7, #0]
 800cc06:	b2d2      	uxtb	r2, r2
 800cc08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc0a:	4b20      	ldr	r3, [pc, #128]	@ (800cc8c <HAL_RCC_ClockConfig+0x1b8>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f003 0307 	and.w	r3, r3, #7
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d001      	beq.n	800cc1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	e032      	b.n	800cc82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0304 	and.w	r3, r3, #4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d008      	beq.n	800cc3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc28:	4b19      	ldr	r3, [pc, #100]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	68db      	ldr	r3, [r3, #12]
 800cc34:	4916      	ldr	r1, [pc, #88]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cc36:	4313      	orrs	r3, r2
 800cc38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0308 	and.w	r3, r3, #8
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d009      	beq.n	800cc5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc46:	4b12      	ldr	r3, [pc, #72]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cc48:	689b      	ldr	r3, [r3, #8]
 800cc4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	691b      	ldr	r3, [r3, #16]
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	490e      	ldr	r1, [pc, #56]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cc5a:	f000 f82d 	bl	800ccb8 <HAL_RCC_GetSysClockFreq>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	4b0b      	ldr	r3, [pc, #44]	@ (800cc90 <HAL_RCC_ClockConfig+0x1bc>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	091b      	lsrs	r3, r3, #4
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	490a      	ldr	r1, [pc, #40]	@ (800cc94 <HAL_RCC_ClockConfig+0x1c0>)
 800cc6c:	5ccb      	ldrb	r3, [r1, r3]
 800cc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc72:	4a09      	ldr	r2, [pc, #36]	@ (800cc98 <HAL_RCC_ClockConfig+0x1c4>)
 800cc74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800cc76:	4b09      	ldr	r3, [pc, #36]	@ (800cc9c <HAL_RCC_ClockConfig+0x1c8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7f9 f9e0 	bl	8006040 <HAL_InitTick>

  return HAL_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	40023c00 	.word	0x40023c00
 800cc90:	40023800 	.word	0x40023800
 800cc94:	08015dec 	.word	0x08015dec
 800cc98:	20000010 	.word	0x20000010
 800cc9c:	20000014 	.word	0x20000014

0800cca0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800cca0:	b480      	push	{r7}
 800cca2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800cca4:	4b03      	ldr	r3, [pc, #12]	@ (800ccb4 <HAL_RCC_EnableCSS+0x14>)
 800cca6:	2201      	movs	r2, #1
 800cca8:	601a      	str	r2, [r3, #0]
}
 800ccaa:	bf00      	nop
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	4247004c 	.word	0x4247004c

0800ccb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccbc:	b090      	sub	sp, #64	@ 0x40
 800ccbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800cccc:	2300      	movs	r3, #0
 800ccce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ccd0:	4b59      	ldr	r3, [pc, #356]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x180>)
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f003 030c 	and.w	r3, r3, #12
 800ccd8:	2b08      	cmp	r3, #8
 800ccda:	d00d      	beq.n	800ccf8 <HAL_RCC_GetSysClockFreq+0x40>
 800ccdc:	2b08      	cmp	r3, #8
 800ccde:	f200 80a1 	bhi.w	800ce24 <HAL_RCC_GetSysClockFreq+0x16c>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <HAL_RCC_GetSysClockFreq+0x34>
 800cce6:	2b04      	cmp	r3, #4
 800cce8:	d003      	beq.n	800ccf2 <HAL_RCC_GetSysClockFreq+0x3a>
 800ccea:	e09b      	b.n	800ce24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ccec:	4b53      	ldr	r3, [pc, #332]	@ (800ce3c <HAL_RCC_GetSysClockFreq+0x184>)
 800ccee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ccf0:	e09b      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ccf2:	4b53      	ldr	r3, [pc, #332]	@ (800ce40 <HAL_RCC_GetSysClockFreq+0x188>)
 800ccf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ccf6:	e098      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ccf8:	4b4f      	ldr	r3, [pc, #316]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x180>)
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd02:	4b4d      	ldr	r3, [pc, #308]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d028      	beq.n	800cd60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd0e:	4b4a      	ldr	r3, [pc, #296]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	099b      	lsrs	r3, r3, #6
 800cd14:	2200      	movs	r2, #0
 800cd16:	623b      	str	r3, [r7, #32]
 800cd18:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800cd20:	2100      	movs	r1, #0
 800cd22:	4b47      	ldr	r3, [pc, #284]	@ (800ce40 <HAL_RCC_GetSysClockFreq+0x188>)
 800cd24:	fb03 f201 	mul.w	r2, r3, r1
 800cd28:	2300      	movs	r3, #0
 800cd2a:	fb00 f303 	mul.w	r3, r0, r3
 800cd2e:	4413      	add	r3, r2
 800cd30:	4a43      	ldr	r2, [pc, #268]	@ (800ce40 <HAL_RCC_GetSysClockFreq+0x188>)
 800cd32:	fba0 1202 	umull	r1, r2, r0, r2
 800cd36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd38:	460a      	mov	r2, r1
 800cd3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cd3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd3e:	4413      	add	r3, r2
 800cd40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd44:	2200      	movs	r2, #0
 800cd46:	61bb      	str	r3, [r7, #24]
 800cd48:	61fa      	str	r2, [r7, #28]
 800cd4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cd52:	f7f3 fe93 	bl	8000a7c <__aeabi_uldivmod>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd5e:	e053      	b.n	800ce08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd60:	4b35      	ldr	r3, [pc, #212]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x180>)
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	099b      	lsrs	r3, r3, #6
 800cd66:	2200      	movs	r2, #0
 800cd68:	613b      	str	r3, [r7, #16]
 800cd6a:	617a      	str	r2, [r7, #20]
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800cd72:	f04f 0b00 	mov.w	fp, #0
 800cd76:	4652      	mov	r2, sl
 800cd78:	465b      	mov	r3, fp
 800cd7a:	f04f 0000 	mov.w	r0, #0
 800cd7e:	f04f 0100 	mov.w	r1, #0
 800cd82:	0159      	lsls	r1, r3, #5
 800cd84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cd88:	0150      	lsls	r0, r2, #5
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	ebb2 080a 	subs.w	r8, r2, sl
 800cd92:	eb63 090b 	sbc.w	r9, r3, fp
 800cd96:	f04f 0200 	mov.w	r2, #0
 800cd9a:	f04f 0300 	mov.w	r3, #0
 800cd9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800cda2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800cda6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800cdaa:	ebb2 0408 	subs.w	r4, r2, r8
 800cdae:	eb63 0509 	sbc.w	r5, r3, r9
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	00eb      	lsls	r3, r5, #3
 800cdbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cdc0:	00e2      	lsls	r2, r4, #3
 800cdc2:	4614      	mov	r4, r2
 800cdc4:	461d      	mov	r5, r3
 800cdc6:	eb14 030a 	adds.w	r3, r4, sl
 800cdca:	603b      	str	r3, [r7, #0]
 800cdcc:	eb45 030b 	adc.w	r3, r5, fp
 800cdd0:	607b      	str	r3, [r7, #4]
 800cdd2:	f04f 0200 	mov.w	r2, #0
 800cdd6:	f04f 0300 	mov.w	r3, #0
 800cdda:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cdde:	4629      	mov	r1, r5
 800cde0:	028b      	lsls	r3, r1, #10
 800cde2:	4621      	mov	r1, r4
 800cde4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cde8:	4621      	mov	r1, r4
 800cdea:	028a      	lsls	r2, r1, #10
 800cdec:	4610      	mov	r0, r2
 800cdee:	4619      	mov	r1, r3
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	60bb      	str	r3, [r7, #8]
 800cdf6:	60fa      	str	r2, [r7, #12]
 800cdf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdfc:	f7f3 fe3e 	bl	8000a7c <__aeabi_uldivmod>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4613      	mov	r3, r2
 800ce06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ce08:	4b0b      	ldr	r3, [pc, #44]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x180>)
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	0c1b      	lsrs	r3, r3, #16
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	3301      	adds	r3, #1
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ce18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ce22:	e002      	b.n	800ce2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ce24:	4b05      	ldr	r3, [pc, #20]	@ (800ce3c <HAL_RCC_GetSysClockFreq+0x184>)
 800ce26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ce28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3740      	adds	r7, #64	@ 0x40
 800ce30:	46bd      	mov	sp, r7
 800ce32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce36:	bf00      	nop
 800ce38:	40023800 	.word	0x40023800
 800ce3c:	00f42400 	.word	0x00f42400
 800ce40:	017d7840 	.word	0x017d7840

0800ce44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce44:	b480      	push	{r7}
 800ce46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce48:	4b03      	ldr	r3, [pc, #12]	@ (800ce58 <HAL_RCC_GetHCLKFreq+0x14>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	20000010 	.word	0x20000010

0800ce5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ce60:	f7ff fff0 	bl	800ce44 <HAL_RCC_GetHCLKFreq>
 800ce64:	4602      	mov	r2, r0
 800ce66:	4b05      	ldr	r3, [pc, #20]	@ (800ce7c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	0a9b      	lsrs	r3, r3, #10
 800ce6c:	f003 0307 	and.w	r3, r3, #7
 800ce70:	4903      	ldr	r1, [pc, #12]	@ (800ce80 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce72:	5ccb      	ldrb	r3, [r1, r3]
 800ce74:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	40023800 	.word	0x40023800
 800ce80:	08015dfc 	.word	0x08015dfc

0800ce84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ce88:	f7ff ffdc 	bl	800ce44 <HAL_RCC_GetHCLKFreq>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	4b05      	ldr	r3, [pc, #20]	@ (800cea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	0b5b      	lsrs	r3, r3, #13
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	4903      	ldr	r1, [pc, #12]	@ (800cea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce9a:	5ccb      	ldrb	r3, [r1, r3]
 800ce9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	40023800 	.word	0x40023800
 800cea8:	08015dfc 	.word	0x08015dfc

0800ceac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ceb0:	4b06      	ldr	r3, [pc, #24]	@ (800cecc <HAL_RCC_NMI_IRQHandler+0x20>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceb8:	2b80      	cmp	r3, #128	@ 0x80
 800ceba:	d104      	bne.n	800cec6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800cebc:	f000 f80a 	bl	800ced4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800cec0:	4b03      	ldr	r3, [pc, #12]	@ (800ced0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800cec2:	2280      	movs	r2, #128	@ 0x80
 800cec4:	701a      	strb	r2, [r3, #0]
  }
}
 800cec6:	bf00      	nop
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	40023800 	.word	0x40023800
 800ced0:	4002380e 	.word	0x4002380e

0800ced4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ced4:	b480      	push	{r7}
 800ced6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800ced8:	bf00      	nop
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b082      	sub	sp, #8
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d101      	bne.n	800cef4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e041      	b.n	800cf78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d106      	bne.n	800cf0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7f8 fdf7 	bl	8005afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2202      	movs	r2, #2
 800cf12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f000 fc3b 	bl	800d79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b085      	sub	sp, #20
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d001      	beq.n	800cf98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	e044      	b.n	800d022 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68da      	ldr	r2, [r3, #12]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f042 0201 	orr.w	r2, r2, #1
 800cfae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a1e      	ldr	r2, [pc, #120]	@ (800d030 <HAL_TIM_Base_Start_IT+0xb0>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d018      	beq.n	800cfec <HAL_TIM_Base_Start_IT+0x6c>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfc2:	d013      	beq.n	800cfec <HAL_TIM_Base_Start_IT+0x6c>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a1a      	ldr	r2, [pc, #104]	@ (800d034 <HAL_TIM_Base_Start_IT+0xb4>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d00e      	beq.n	800cfec <HAL_TIM_Base_Start_IT+0x6c>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a19      	ldr	r2, [pc, #100]	@ (800d038 <HAL_TIM_Base_Start_IT+0xb8>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d009      	beq.n	800cfec <HAL_TIM_Base_Start_IT+0x6c>
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a17      	ldr	r2, [pc, #92]	@ (800d03c <HAL_TIM_Base_Start_IT+0xbc>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d004      	beq.n	800cfec <HAL_TIM_Base_Start_IT+0x6c>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a16      	ldr	r2, [pc, #88]	@ (800d040 <HAL_TIM_Base_Start_IT+0xc0>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d111      	bne.n	800d010 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	f003 0307 	and.w	r3, r3, #7
 800cff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b06      	cmp	r3, #6
 800cffc:	d010      	beq.n	800d020 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f042 0201 	orr.w	r2, r2, #1
 800d00c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d00e:	e007      	b.n	800d020 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f042 0201 	orr.w	r2, r2, #1
 800d01e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	40010000 	.word	0x40010000
 800d034:	40000400 	.word	0x40000400
 800d038:	40000800 	.word	0x40000800
 800d03c:	40000c00 	.word	0x40000c00
 800d040:	40014000 	.word	0x40014000

0800d044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d101      	bne.n	800d056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e041      	b.n	800d0da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f839 	bl	800d0e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2202      	movs	r2, #2
 800d074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	3304      	adds	r3, #4
 800d080:	4619      	mov	r1, r3
 800d082:	4610      	mov	r0, r2
 800d084:	f000 fb8a 	bl	800d79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d0d8:	2300      	movs	r3, #0
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b083      	sub	sp, #12
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d0ea:	bf00      	nop
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
	...

0800d0f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d109      	bne.n	800d11c <HAL_TIM_PWM_Start+0x24>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b01      	cmp	r3, #1
 800d112:	bf14      	ite	ne
 800d114:	2301      	movne	r3, #1
 800d116:	2300      	moveq	r3, #0
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	e022      	b.n	800d162 <HAL_TIM_PWM_Start+0x6a>
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	2b04      	cmp	r3, #4
 800d120:	d109      	bne.n	800d136 <HAL_TIM_PWM_Start+0x3e>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	bf14      	ite	ne
 800d12e:	2301      	movne	r3, #1
 800d130:	2300      	moveq	r3, #0
 800d132:	b2db      	uxtb	r3, r3
 800d134:	e015      	b.n	800d162 <HAL_TIM_PWM_Start+0x6a>
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b08      	cmp	r3, #8
 800d13a:	d109      	bne.n	800d150 <HAL_TIM_PWM_Start+0x58>
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d142:	b2db      	uxtb	r3, r3
 800d144:	2b01      	cmp	r3, #1
 800d146:	bf14      	ite	ne
 800d148:	2301      	movne	r3, #1
 800d14a:	2300      	moveq	r3, #0
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	e008      	b.n	800d162 <HAL_TIM_PWM_Start+0x6a>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d156:	b2db      	uxtb	r3, r3
 800d158:	2b01      	cmp	r3, #1
 800d15a:	bf14      	ite	ne
 800d15c:	2301      	movne	r3, #1
 800d15e:	2300      	moveq	r3, #0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	e068      	b.n	800d23c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d104      	bne.n	800d17a <HAL_TIM_PWM_Start+0x82>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2202      	movs	r2, #2
 800d174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d178:	e013      	b.n	800d1a2 <HAL_TIM_PWM_Start+0xaa>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b04      	cmp	r3, #4
 800d17e:	d104      	bne.n	800d18a <HAL_TIM_PWM_Start+0x92>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2202      	movs	r2, #2
 800d184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d188:	e00b      	b.n	800d1a2 <HAL_TIM_PWM_Start+0xaa>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b08      	cmp	r3, #8
 800d18e:	d104      	bne.n	800d19a <HAL_TIM_PWM_Start+0xa2>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2202      	movs	r2, #2
 800d194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d198:	e003      	b.n	800d1a2 <HAL_TIM_PWM_Start+0xaa>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2202      	movs	r2, #2
 800d19e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	6839      	ldr	r1, [r7, #0]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fda8 	bl	800dd00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a23      	ldr	r2, [pc, #140]	@ (800d244 <HAL_TIM_PWM_Start+0x14c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d107      	bne.n	800d1ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d1c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a1d      	ldr	r2, [pc, #116]	@ (800d244 <HAL_TIM_PWM_Start+0x14c>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d018      	beq.n	800d206 <HAL_TIM_PWM_Start+0x10e>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1dc:	d013      	beq.n	800d206 <HAL_TIM_PWM_Start+0x10e>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a19      	ldr	r2, [pc, #100]	@ (800d248 <HAL_TIM_PWM_Start+0x150>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d00e      	beq.n	800d206 <HAL_TIM_PWM_Start+0x10e>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a17      	ldr	r2, [pc, #92]	@ (800d24c <HAL_TIM_PWM_Start+0x154>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d009      	beq.n	800d206 <HAL_TIM_PWM_Start+0x10e>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a16      	ldr	r2, [pc, #88]	@ (800d250 <HAL_TIM_PWM_Start+0x158>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d004      	beq.n	800d206 <HAL_TIM_PWM_Start+0x10e>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a14      	ldr	r2, [pc, #80]	@ (800d254 <HAL_TIM_PWM_Start+0x15c>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d111      	bne.n	800d22a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	f003 0307 	and.w	r3, r3, #7
 800d210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b06      	cmp	r3, #6
 800d216:	d010      	beq.n	800d23a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f042 0201 	orr.w	r2, r2, #1
 800d226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d228:	e007      	b.n	800d23a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f042 0201 	orr.w	r2, r2, #1
 800d238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	40010000 	.word	0x40010000
 800d248:	40000400 	.word	0x40000400
 800d24c:	40000800 	.word	0x40000800
 800d250:	40000c00 	.word	0x40000c00
 800d254:	40014000 	.word	0x40014000

0800d258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	f003 0302 	and.w	r3, r3, #2
 800d276:	2b00      	cmp	r3, #0
 800d278:	d020      	beq.n	800d2bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f003 0302 	and.w	r3, r3, #2
 800d280:	2b00      	cmp	r3, #0
 800d282:	d01b      	beq.n	800d2bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f06f 0202 	mvn.w	r2, #2
 800d28c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	f003 0303 	and.w	r3, r3, #3
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d003      	beq.n	800d2aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fa5b 	bl	800d75e <HAL_TIM_IC_CaptureCallback>
 800d2a8:	e005      	b.n	800d2b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fa4d 	bl	800d74a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fa5e 	bl	800d772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	f003 0304 	and.w	r3, r3, #4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d020      	beq.n	800d308 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f003 0304 	and.w	r3, r3, #4
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d01b      	beq.n	800d308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f06f 0204 	mvn.w	r2, #4
 800d2d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2202      	movs	r2, #2
 800d2de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d003      	beq.n	800d2f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fa35 	bl	800d75e <HAL_TIM_IC_CaptureCallback>
 800d2f4:	e005      	b.n	800d302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f000 fa27 	bl	800d74a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 fa38 	bl	800d772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	f003 0308 	and.w	r3, r3, #8
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d020      	beq.n	800d354 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01b      	beq.n	800d354 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f06f 0208 	mvn.w	r2, #8
 800d324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2204      	movs	r2, #4
 800d32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	f003 0303 	and.w	r3, r3, #3
 800d336:	2b00      	cmp	r3, #0
 800d338:	d003      	beq.n	800d342 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fa0f 	bl	800d75e <HAL_TIM_IC_CaptureCallback>
 800d340:	e005      	b.n	800d34e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fa01 	bl	800d74a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fa12 	bl	800d772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	f003 0310 	and.w	r3, r3, #16
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d020      	beq.n	800d3a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f003 0310 	and.w	r3, r3, #16
 800d364:	2b00      	cmp	r3, #0
 800d366:	d01b      	beq.n	800d3a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f06f 0210 	mvn.w	r2, #16
 800d370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2208      	movs	r2, #8
 800d376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 f9e9 	bl	800d75e <HAL_TIM_IC_CaptureCallback>
 800d38c:	e005      	b.n	800d39a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f9db 	bl	800d74a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f9ec 	bl	800d772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00c      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f003 0301 	and.w	r3, r3, #1
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f06f 0201 	mvn.w	r2, #1
 800d3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7f7 ff8c 	bl	80052dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00c      	beq.n	800d3e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d3e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fd2a 	bl	800de3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00c      	beq.n	800d40c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d007      	beq.n	800d40c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f9bd 	bl	800d786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	f003 0320 	and.w	r3, r3, #32
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00c      	beq.n	800d430 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f003 0320 	and.w	r3, r3, #32
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f06f 0220 	mvn.w	r2, #32
 800d428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fcfc 	bl	800de28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d430:	bf00      	nop
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d444:	2300      	movs	r3, #0
 800d446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d101      	bne.n	800d456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d452:	2302      	movs	r3, #2
 800d454:	e0ae      	b.n	800d5b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2201      	movs	r2, #1
 800d45a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b0c      	cmp	r3, #12
 800d462:	f200 809f 	bhi.w	800d5a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d466:	a201      	add	r2, pc, #4	@ (adr r2, 800d46c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46c:	0800d4a1 	.word	0x0800d4a1
 800d470:	0800d5a5 	.word	0x0800d5a5
 800d474:	0800d5a5 	.word	0x0800d5a5
 800d478:	0800d5a5 	.word	0x0800d5a5
 800d47c:	0800d4e1 	.word	0x0800d4e1
 800d480:	0800d5a5 	.word	0x0800d5a5
 800d484:	0800d5a5 	.word	0x0800d5a5
 800d488:	0800d5a5 	.word	0x0800d5a5
 800d48c:	0800d523 	.word	0x0800d523
 800d490:	0800d5a5 	.word	0x0800d5a5
 800d494:	0800d5a5 	.word	0x0800d5a5
 800d498:	0800d5a5 	.word	0x0800d5a5
 800d49c:	0800d563 	.word	0x0800d563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fa04 	bl	800d8b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	699a      	ldr	r2, [r3, #24]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f042 0208 	orr.w	r2, r2, #8
 800d4ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	699a      	ldr	r2, [r3, #24]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f022 0204 	bic.w	r2, r2, #4
 800d4ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6999      	ldr	r1, [r3, #24]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	691a      	ldr	r2, [r3, #16]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	430a      	orrs	r2, r1
 800d4dc:	619a      	str	r2, [r3, #24]
      break;
 800d4de:	e064      	b.n	800d5aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	68b9      	ldr	r1, [r7, #8]
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f000 fa4a 	bl	800d980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	699a      	ldr	r2, [r3, #24]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d4fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	699a      	ldr	r2, [r3, #24]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d50a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6999      	ldr	r1, [r3, #24]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	021a      	lsls	r2, r3, #8
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	619a      	str	r2, [r3, #24]
      break;
 800d520:	e043      	b.n	800d5aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 fa95 	bl	800da58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	69da      	ldr	r2, [r3, #28]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f042 0208 	orr.w	r2, r2, #8
 800d53c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	69da      	ldr	r2, [r3, #28]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f022 0204 	bic.w	r2, r2, #4
 800d54c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	69d9      	ldr	r1, [r3, #28]
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	691a      	ldr	r2, [r3, #16]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	430a      	orrs	r2, r1
 800d55e:	61da      	str	r2, [r3, #28]
      break;
 800d560:	e023      	b.n	800d5aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	4618      	mov	r0, r3
 800d56a:	f000 fadf 	bl	800db2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	69da      	ldr	r2, [r3, #28]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d57c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	69da      	ldr	r2, [r3, #28]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d58c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	69d9      	ldr	r1, [r3, #28]
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	691b      	ldr	r3, [r3, #16]
 800d598:	021a      	lsls	r2, r3, #8
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	430a      	orrs	r2, r1
 800d5a0:	61da      	str	r2, [r3, #28]
      break;
 800d5a2:	e002      	b.n	800d5aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	75fb      	strb	r3, [r7, #23]
      break;
 800d5a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	d101      	bne.n	800d5d8 <HAL_TIM_ConfigClockSource+0x1c>
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	e0b4      	b.n	800d742 <HAL_TIM_ConfigClockSource+0x186>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d5f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d610:	d03e      	beq.n	800d690 <HAL_TIM_ConfigClockSource+0xd4>
 800d612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d616:	f200 8087 	bhi.w	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d61a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d61e:	f000 8086 	beq.w	800d72e <HAL_TIM_ConfigClockSource+0x172>
 800d622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d626:	d87f      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d628:	2b70      	cmp	r3, #112	@ 0x70
 800d62a:	d01a      	beq.n	800d662 <HAL_TIM_ConfigClockSource+0xa6>
 800d62c:	2b70      	cmp	r3, #112	@ 0x70
 800d62e:	d87b      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d630:	2b60      	cmp	r3, #96	@ 0x60
 800d632:	d050      	beq.n	800d6d6 <HAL_TIM_ConfigClockSource+0x11a>
 800d634:	2b60      	cmp	r3, #96	@ 0x60
 800d636:	d877      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d638:	2b50      	cmp	r3, #80	@ 0x50
 800d63a:	d03c      	beq.n	800d6b6 <HAL_TIM_ConfigClockSource+0xfa>
 800d63c:	2b50      	cmp	r3, #80	@ 0x50
 800d63e:	d873      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d640:	2b40      	cmp	r3, #64	@ 0x40
 800d642:	d058      	beq.n	800d6f6 <HAL_TIM_ConfigClockSource+0x13a>
 800d644:	2b40      	cmp	r3, #64	@ 0x40
 800d646:	d86f      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d648:	2b30      	cmp	r3, #48	@ 0x30
 800d64a:	d064      	beq.n	800d716 <HAL_TIM_ConfigClockSource+0x15a>
 800d64c:	2b30      	cmp	r3, #48	@ 0x30
 800d64e:	d86b      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d650:	2b20      	cmp	r3, #32
 800d652:	d060      	beq.n	800d716 <HAL_TIM_ConfigClockSource+0x15a>
 800d654:	2b20      	cmp	r3, #32
 800d656:	d867      	bhi.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d05c      	beq.n	800d716 <HAL_TIM_ConfigClockSource+0x15a>
 800d65c:	2b10      	cmp	r3, #16
 800d65e:	d05a      	beq.n	800d716 <HAL_TIM_ConfigClockSource+0x15a>
 800d660:	e062      	b.n	800d728 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d672:	f000 fb25 	bl	800dcc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	609a      	str	r2, [r3, #8]
      break;
 800d68e:	e04f      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d6a0:	f000 fb0e 	bl	800dcc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	689a      	ldr	r2, [r3, #8]
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d6b2:	609a      	str	r2, [r3, #8]
      break;
 800d6b4:	e03c      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	f000 fa82 	bl	800dbcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2150      	movs	r1, #80	@ 0x50
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 fadb 	bl	800dc8a <TIM_ITRx_SetConfig>
      break;
 800d6d4:	e02c      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	f000 faa1 	bl	800dc2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2160      	movs	r1, #96	@ 0x60
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 facb 	bl	800dc8a <TIM_ITRx_SetConfig>
      break;
 800d6f4:	e01c      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d702:	461a      	mov	r2, r3
 800d704:	f000 fa62 	bl	800dbcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	2140      	movs	r1, #64	@ 0x40
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 fabb 	bl	800dc8a <TIM_ITRx_SetConfig>
      break;
 800d714:	e00c      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	4619      	mov	r1, r3
 800d720:	4610      	mov	r0, r2
 800d722:	f000 fab2 	bl	800dc8a <TIM_ITRx_SetConfig>
      break;
 800d726:	e003      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d728:	2301      	movs	r3, #1
 800d72a:	73fb      	strb	r3, [r7, #15]
      break;
 800d72c:	e000      	b.n	800d730 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d72e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d752:	bf00      	nop
 800d754:	370c      	adds	r7, #12
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d75e:	b480      	push	{r7}
 800d760:	b083      	sub	sp, #12
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d766:	bf00      	nop
 800d768:	370c      	adds	r7, #12
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr

0800d772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d772:	b480      	push	{r7}
 800d774:	b083      	sub	sp, #12
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d77a:	bf00      	nop
 800d77c:	370c      	adds	r7, #12
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d786:	b480      	push	{r7}
 800d788:	b083      	sub	sp, #12
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d78e:	bf00      	nop
 800d790:	370c      	adds	r7, #12
 800d792:	46bd      	mov	sp, r7
 800d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d798:	4770      	bx	lr
	...

0800d79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a3a      	ldr	r2, [pc, #232]	@ (800d898 <TIM_Base_SetConfig+0xfc>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d00f      	beq.n	800d7d4 <TIM_Base_SetConfig+0x38>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7ba:	d00b      	beq.n	800d7d4 <TIM_Base_SetConfig+0x38>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a37      	ldr	r2, [pc, #220]	@ (800d89c <TIM_Base_SetConfig+0x100>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d007      	beq.n	800d7d4 <TIM_Base_SetConfig+0x38>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a36      	ldr	r2, [pc, #216]	@ (800d8a0 <TIM_Base_SetConfig+0x104>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d003      	beq.n	800d7d4 <TIM_Base_SetConfig+0x38>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a35      	ldr	r2, [pc, #212]	@ (800d8a4 <TIM_Base_SetConfig+0x108>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d108      	bne.n	800d7e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a2b      	ldr	r2, [pc, #172]	@ (800d898 <TIM_Base_SetConfig+0xfc>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d01b      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7f4:	d017      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a28      	ldr	r2, [pc, #160]	@ (800d89c <TIM_Base_SetConfig+0x100>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d013      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a27      	ldr	r2, [pc, #156]	@ (800d8a0 <TIM_Base_SetConfig+0x104>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d00f      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a26      	ldr	r2, [pc, #152]	@ (800d8a4 <TIM_Base_SetConfig+0x108>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d00b      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a25      	ldr	r2, [pc, #148]	@ (800d8a8 <TIM_Base_SetConfig+0x10c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d007      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a24      	ldr	r2, [pc, #144]	@ (800d8ac <TIM_Base_SetConfig+0x110>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d003      	beq.n	800d826 <TIM_Base_SetConfig+0x8a>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a23      	ldr	r2, [pc, #140]	@ (800d8b0 <TIM_Base_SetConfig+0x114>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d108      	bne.n	800d838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d82c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	4313      	orrs	r3, r2
 800d836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	695b      	ldr	r3, [r3, #20]
 800d842:	4313      	orrs	r3, r2
 800d844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	689a      	ldr	r2, [r3, #8]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a0e      	ldr	r2, [pc, #56]	@ (800d898 <TIM_Base_SetConfig+0xfc>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d103      	bne.n	800d86c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	691a      	ldr	r2, [r3, #16]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d105      	bne.n	800d88a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	f023 0201 	bic.w	r2, r3, #1
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	611a      	str	r2, [r3, #16]
  }
}
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	40010000 	.word	0x40010000
 800d89c:	40000400 	.word	0x40000400
 800d8a0:	40000800 	.word	0x40000800
 800d8a4:	40000c00 	.word	0x40000c00
 800d8a8:	40014000 	.word	0x40014000
 800d8ac:	40014400 	.word	0x40014400
 800d8b0:	40014800 	.word	0x40014800

0800d8b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b087      	sub	sp, #28
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a1b      	ldr	r3, [r3, #32]
 800d8c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a1b      	ldr	r3, [r3, #32]
 800d8c8:	f023 0201 	bic.w	r2, r3, #1
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f023 0302 	bic.w	r3, r3, #2
 800d8fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	4313      	orrs	r3, r2
 800d906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	4a1c      	ldr	r2, [pc, #112]	@ (800d97c <TIM_OC1_SetConfig+0xc8>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d10c      	bne.n	800d92a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	f023 0308 	bic.w	r3, r3, #8
 800d916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	4313      	orrs	r3, r2
 800d920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f023 0304 	bic.w	r3, r3, #4
 800d928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	4a13      	ldr	r2, [pc, #76]	@ (800d97c <TIM_OC1_SetConfig+0xc8>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d111      	bne.n	800d956 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	4313      	orrs	r3, r2
 800d94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	4313      	orrs	r3, r2
 800d954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	621a      	str	r2, [r3, #32]
}
 800d970:	bf00      	nop
 800d972:	371c      	adds	r7, #28
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	40010000 	.word	0x40010000

0800d980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6a1b      	ldr	r3, [r3, #32]
 800d994:	f023 0210 	bic.w	r2, r3, #16
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	699b      	ldr	r3, [r3, #24]
 800d9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	021b      	lsls	r3, r3, #8
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f023 0320 	bic.w	r3, r3, #32
 800d9ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	011b      	lsls	r3, r3, #4
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a1e      	ldr	r2, [pc, #120]	@ (800da54 <TIM_OC2_SetConfig+0xd4>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d10d      	bne.n	800d9fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	011b      	lsls	r3, r3, #4
 800d9ee:	697a      	ldr	r2, [r7, #20]
 800d9f0:	4313      	orrs	r3, r2
 800d9f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a15      	ldr	r2, [pc, #84]	@ (800da54 <TIM_OC2_SetConfig+0xd4>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d113      	bne.n	800da2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800da0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800da12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	695b      	ldr	r3, [r3, #20]
 800da18:	009b      	lsls	r3, r3, #2
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	009b      	lsls	r3, r3, #2
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4313      	orrs	r3, r2
 800da2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	693a      	ldr	r2, [r7, #16]
 800da30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	685a      	ldr	r2, [r3, #4]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	697a      	ldr	r2, [r7, #20]
 800da44:	621a      	str	r2, [r3, #32]
}
 800da46:	bf00      	nop
 800da48:	371c      	adds	r7, #28
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	40010000 	.word	0x40010000

0800da58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da58:	b480      	push	{r7}
 800da5a:	b087      	sub	sp, #28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6a1b      	ldr	r3, [r3, #32]
 800da66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a1b      	ldr	r3, [r3, #32]
 800da6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	f023 0303 	bic.w	r3, r3, #3
 800da8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	4313      	orrs	r3, r2
 800da98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800daa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	021b      	lsls	r3, r3, #8
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	4313      	orrs	r3, r2
 800daac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a1d      	ldr	r2, [pc, #116]	@ (800db28 <TIM_OC3_SetConfig+0xd0>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d10d      	bne.n	800dad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dabc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	021b      	lsls	r3, r3, #8
 800dac4:	697a      	ldr	r2, [r7, #20]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a14      	ldr	r2, [pc, #80]	@ (800db28 <TIM_OC3_SetConfig+0xd0>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d113      	bne.n	800db02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	695b      	ldr	r3, [r3, #20]
 800daee:	011b      	lsls	r3, r3, #4
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	4313      	orrs	r3, r2
 800daf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	011b      	lsls	r3, r3, #4
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	4313      	orrs	r3, r2
 800db00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	621a      	str	r2, [r3, #32]
}
 800db1c:	bf00      	nop
 800db1e:	371c      	adds	r7, #28
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	40010000 	.word	0x40010000

0800db2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b087      	sub	sp, #28
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a1b      	ldr	r3, [r3, #32]
 800db3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	69db      	ldr	r3, [r3, #28]
 800db52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	021b      	lsls	r3, r3, #8
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4313      	orrs	r3, r2
 800db6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800db76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	031b      	lsls	r3, r3, #12
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	4313      	orrs	r3, r2
 800db82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a10      	ldr	r2, [pc, #64]	@ (800dbc8 <TIM_OC4_SetConfig+0x9c>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d109      	bne.n	800dba0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	695b      	ldr	r3, [r3, #20]
 800db98:	019b      	lsls	r3, r3, #6
 800db9a:	697a      	ldr	r2, [r7, #20]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	697a      	ldr	r2, [r7, #20]
 800dba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	621a      	str	r2, [r3, #32]
}
 800dbba:	bf00      	nop
 800dbbc:	371c      	adds	r7, #28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr
 800dbc6:	bf00      	nop
 800dbc8:	40010000 	.word	0x40010000

0800dbcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b087      	sub	sp, #28
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6a1b      	ldr	r3, [r3, #32]
 800dbdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	f023 0201 	bic.w	r2, r3, #1
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dbf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	011b      	lsls	r3, r3, #4
 800dbfc:	693a      	ldr	r2, [r7, #16]
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	f023 030a 	bic.w	r3, r3, #10
 800dc08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	693a      	ldr	r2, [r7, #16]
 800dc16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	697a      	ldr	r2, [r7, #20]
 800dc1c:	621a      	str	r2, [r3, #32]
}
 800dc1e:	bf00      	nop
 800dc20:	371c      	adds	r7, #28
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b087      	sub	sp, #28
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6a1b      	ldr	r3, [r3, #32]
 800dc40:	f023 0210 	bic.w	r2, r3, #16
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dc54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	031b      	lsls	r3, r3, #12
 800dc5a:	693a      	ldr	r2, [r7, #16]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dc66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	011b      	lsls	r3, r3, #4
 800dc6c:	697a      	ldr	r2, [r7, #20]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	621a      	str	r2, [r3, #32]
}
 800dc7e:	bf00      	nop
 800dc80:	371c      	adds	r7, #28
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b085      	sub	sp, #20
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	f043 0307 	orr.w	r3, r3, #7
 800dcac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	609a      	str	r2, [r3, #8]
}
 800dcb4:	bf00      	nop
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
 800dccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dcda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	021a      	lsls	r2, r3, #8
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	431a      	orrs	r2, r3
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	4313      	orrs	r3, r2
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	4313      	orrs	r3, r2
 800dcec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	697a      	ldr	r2, [r7, #20]
 800dcf2:	609a      	str	r2, [r3, #8]
}
 800dcf4:	bf00      	nop
 800dcf6:	371c      	adds	r7, #28
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	f003 031f 	and.w	r3, r3, #31
 800dd12:	2201      	movs	r2, #1
 800dd14:	fa02 f303 	lsl.w	r3, r2, r3
 800dd18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	6a1a      	ldr	r2, [r3, #32]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	43db      	mvns	r3, r3
 800dd22:	401a      	ands	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6a1a      	ldr	r2, [r3, #32]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f003 031f 	and.w	r3, r3, #31
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	fa01 f303 	lsl.w	r3, r1, r3
 800dd38:	431a      	orrs	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	621a      	str	r2, [r3, #32]
}
 800dd3e:	bf00      	nop
 800dd40:	371c      	adds	r7, #28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
	...

0800dd4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d101      	bne.n	800dd64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd60:	2302      	movs	r3, #2
 800dd62:	e050      	b.n	800de06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2202      	movs	r2, #2
 800dd70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a1c      	ldr	r2, [pc, #112]	@ (800de14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d018      	beq.n	800ddda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ddb0:	d013      	beq.n	800ddda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	4a18      	ldr	r2, [pc, #96]	@ (800de18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d00e      	beq.n	800ddda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a16      	ldr	r2, [pc, #88]	@ (800de1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d009      	beq.n	800ddda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a15      	ldr	r2, [pc, #84]	@ (800de20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d004      	beq.n	800ddda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a13      	ldr	r2, [pc, #76]	@ (800de24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d10c      	bne.n	800ddf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dde0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	68ba      	ldr	r2, [r7, #8]
 800dde8:	4313      	orrs	r3, r2
 800ddea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800de04:	2300      	movs	r3, #0
}
 800de06:	4618      	mov	r0, r3
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	40010000 	.word	0x40010000
 800de18:	40000400 	.word	0x40000400
 800de1c:	40000800 	.word	0x40000800
 800de20:	40000c00 	.word	0x40000c00
 800de24:	40014000 	.word	0x40014000

0800de28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de30:	bf00      	nop
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de44:	bf00      	nop
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d101      	bne.n	800de62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de5e:	2301      	movs	r3, #1
 800de60:	e042      	b.n	800dee8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f7f7 fec0 	bl	8005bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2224      	movs	r2, #36	@ 0x24
 800de80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	68da      	ldr	r2, [r3, #12]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800de92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 fcdb 	bl	800e850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	691a      	ldr	r2, [r3, #16]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	695a      	ldr	r2, [r3, #20]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800deb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	68da      	ldr	r2, [r3, #12]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2220      	movs	r2, #32
 800ded4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2220      	movs	r2, #32
 800dedc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	4613      	mov	r3, r2
 800defc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b20      	cmp	r3, #32
 800df08:	d112      	bne.n	800df30 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <HAL_UART_Receive_IT+0x26>
 800df10:	88fb      	ldrh	r3, [r7, #6]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800df16:	2301      	movs	r3, #1
 800df18:	e00b      	b.n	800df32 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800df20:	88fb      	ldrh	r3, [r7, #6]
 800df22:	461a      	mov	r2, r3
 800df24:	68b9      	ldr	r1, [r7, #8]
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 faba 	bl	800e4a0 <UART_Start_Receive_IT>
 800df2c:	4603      	mov	r3, r0
 800df2e:	e000      	b.n	800df32 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800df30:	2302      	movs	r3, #2
  }
}
 800df32:	4618      	mov	r0, r3
 800df34:	3710      	adds	r7, #16
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
	...

0800df3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b0ba      	sub	sp, #232	@ 0xe8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	695b      	ldr	r3, [r3, #20]
 800df5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800df62:	2300      	movs	r3, #0
 800df64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800df68:	2300      	movs	r3, #0
 800df6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800df6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df72:	f003 030f 	and.w	r3, r3, #15
 800df76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800df7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10f      	bne.n	800dfa2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800df82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df86:	f003 0320 	and.w	r3, r3, #32
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d009      	beq.n	800dfa2 <HAL_UART_IRQHandler+0x66>
 800df8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df92:	f003 0320 	and.w	r3, r3, #32
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fb99 	bl	800e6d2 <UART_Receive_IT>
      return;
 800dfa0:	e25b      	b.n	800e45a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800dfa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f000 80de 	beq.w	800e168 <HAL_UART_IRQHandler+0x22c>
 800dfac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d106      	bne.n	800dfc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dfb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f000 80d1 	beq.w	800e168 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfca:	f003 0301 	and.w	r3, r3, #1
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00b      	beq.n	800dfea <HAL_UART_IRQHandler+0xae>
 800dfd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d005      	beq.n	800dfea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfe2:	f043 0201 	orr.w	r2, r3, #1
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfee:	f003 0304 	and.w	r3, r3, #4
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00b      	beq.n	800e00e <HAL_UART_IRQHandler+0xd2>
 800dff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d005      	beq.n	800e00e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e006:	f043 0202 	orr.w	r2, r3, #2
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e012:	f003 0302 	and.w	r3, r3, #2
 800e016:	2b00      	cmp	r3, #0
 800e018:	d00b      	beq.n	800e032 <HAL_UART_IRQHandler+0xf6>
 800e01a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	2b00      	cmp	r3, #0
 800e024:	d005      	beq.n	800e032 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e02a:	f043 0204 	orr.w	r2, r3, #4
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e036:	f003 0308 	and.w	r3, r3, #8
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d011      	beq.n	800e062 <HAL_UART_IRQHandler+0x126>
 800e03e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e042:	f003 0320 	and.w	r3, r3, #32
 800e046:	2b00      	cmp	r3, #0
 800e048:	d105      	bne.n	800e056 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e04a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e04e:	f003 0301 	and.w	r3, r3, #1
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e05a:	f043 0208 	orr.w	r2, r3, #8
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e066:	2b00      	cmp	r3, #0
 800e068:	f000 81f2 	beq.w	800e450 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e070:	f003 0320 	and.w	r3, r3, #32
 800e074:	2b00      	cmp	r3, #0
 800e076:	d008      	beq.n	800e08a <HAL_UART_IRQHandler+0x14e>
 800e078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e07c:	f003 0320 	and.w	r3, r3, #32
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f000 fb24 	bl	800e6d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	695b      	ldr	r3, [r3, #20]
 800e090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e094:	2b40      	cmp	r3, #64	@ 0x40
 800e096:	bf0c      	ite	eq
 800e098:	2301      	moveq	r3, #1
 800e09a:	2300      	movne	r3, #0
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0a6:	f003 0308 	and.w	r3, r3, #8
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d103      	bne.n	800e0b6 <HAL_UART_IRQHandler+0x17a>
 800e0ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d04f      	beq.n	800e156 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 fa2c 	bl	800e514 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0c6:	2b40      	cmp	r3, #64	@ 0x40
 800e0c8:	d141      	bne.n	800e14e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3314      	adds	r3, #20
 800e0d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0d8:	e853 3f00 	ldrex	r3, [r3]
 800e0dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e0e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3314      	adds	r3, #20
 800e0f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e0f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e0fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e106:	e841 2300 	strex	r3, r2, [r1]
 800e10a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e10e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1d9      	bne.n	800e0ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d013      	beq.n	800e146 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e122:	4a7e      	ldr	r2, [pc, #504]	@ (800e31c <HAL_UART_IRQHandler+0x3e0>)
 800e124:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7f8 ffa0 	bl	8007070 <HAL_DMA_Abort_IT>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d016      	beq.n	800e164 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e140:	4610      	mov	r0, r2
 800e142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e144:	e00e      	b.n	800e164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 f994 	bl	800e474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e14c:	e00a      	b.n	800e164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f990 	bl	800e474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e154:	e006      	b.n	800e164 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f000 f98c 	bl	800e474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e162:	e175      	b.n	800e450 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e164:	bf00      	nop
    return;
 800e166:	e173      	b.n	800e450 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	f040 814f 	bne.w	800e410 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e176:	f003 0310 	and.w	r3, r3, #16
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f000 8148 	beq.w	800e410 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e184:	f003 0310 	and.w	r3, r3, #16
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 8141 	beq.w	800e410 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e18e:	2300      	movs	r3, #0
 800e190:	60bb      	str	r3, [r7, #8]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	60bb      	str	r3, [r7, #8]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	60bb      	str	r3, [r7, #8]
 800e1a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	695b      	ldr	r3, [r3, #20]
 800e1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1ae:	2b40      	cmp	r3, #64	@ 0x40
 800e1b0:	f040 80b6 	bne.w	800e320 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e1c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f000 8145 	beq.w	800e454 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e1ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	f080 813e 	bcs.w	800e454 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1ea:	f000 8088 	beq.w	800e2fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	330c      	adds	r3, #12
 800e1f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e1fc:	e853 3f00 	ldrex	r3, [r3]
 800e200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e204:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e20c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	330c      	adds	r3, #12
 800e216:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e21a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e21e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e222:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e226:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e22a:	e841 2300 	strex	r3, r2, [r1]
 800e22e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1d9      	bne.n	800e1ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	3314      	adds	r3, #20
 800e240:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e244:	e853 3f00 	ldrex	r3, [r3]
 800e248:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e24a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e24c:	f023 0301 	bic.w	r3, r3, #1
 800e250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	3314      	adds	r3, #20
 800e25a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e25e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e262:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e264:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e266:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e26a:	e841 2300 	strex	r3, r2, [r1]
 800e26e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1e1      	bne.n	800e23a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3314      	adds	r3, #20
 800e27c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e27e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e280:	e853 3f00 	ldrex	r3, [r3]
 800e284:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e28c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	3314      	adds	r3, #20
 800e296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e29a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e29c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e29e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e2a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e2a2:	e841 2300 	strex	r3, r2, [r1]
 800e2a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e2a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1e3      	bne.n	800e276 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	330c      	adds	r3, #12
 800e2c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2c6:	e853 3f00 	ldrex	r3, [r3]
 800e2ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e2cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2ce:	f023 0310 	bic.w	r3, r3, #16
 800e2d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	330c      	adds	r3, #12
 800e2dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e2e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e2e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e3      	bne.n	800e2bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7f8 fe49 	bl	8006f90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2202      	movs	r2, #2
 800e302:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	b29b      	uxth	r3, r3
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 f8b7 	bl	800e488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e31a:	e09b      	b.n	800e454 <HAL_UART_IRQHandler+0x518>
 800e31c:	0800e5db 	.word	0x0800e5db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e328:	b29b      	uxth	r3, r3
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e334:	b29b      	uxth	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 808e 	beq.w	800e458 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e33c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e340:	2b00      	cmp	r3, #0
 800e342:	f000 8089 	beq.w	800e458 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	330c      	adds	r3, #12
 800e34c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e350:	e853 3f00 	ldrex	r3, [r3]
 800e354:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e358:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e35c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	330c      	adds	r3, #12
 800e366:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e36a:	647a      	str	r2, [r7, #68]	@ 0x44
 800e36c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e36e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e372:	e841 2300 	strex	r3, r2, [r1]
 800e376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1e3      	bne.n	800e346 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3314      	adds	r3, #20
 800e384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e388:	e853 3f00 	ldrex	r3, [r3]
 800e38c:	623b      	str	r3, [r7, #32]
   return(result);
 800e38e:	6a3b      	ldr	r3, [r7, #32]
 800e390:	f023 0301 	bic.w	r3, r3, #1
 800e394:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	3314      	adds	r3, #20
 800e39e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e3a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800e3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e3a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3aa:	e841 2300 	strex	r3, r2, [r1]
 800e3ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1e3      	bne.n	800e37e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2220      	movs	r2, #32
 800e3ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	330c      	adds	r3, #12
 800e3ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	e853 3f00 	ldrex	r3, [r3]
 800e3d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f023 0310 	bic.w	r3, r3, #16
 800e3da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	330c      	adds	r3, #12
 800e3e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e3e8:	61fa      	str	r2, [r7, #28]
 800e3ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ec:	69b9      	ldr	r1, [r7, #24]
 800e3ee:	69fa      	ldr	r2, [r7, #28]
 800e3f0:	e841 2300 	strex	r3, r2, [r1]
 800e3f4:	617b      	str	r3, [r7, #20]
   return(result);
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1e3      	bne.n	800e3c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2202      	movs	r2, #2
 800e400:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e402:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f83d 	bl	800e488 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e40e:	e023      	b.n	800e458 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d009      	beq.n	800e430 <HAL_UART_IRQHandler+0x4f4>
 800e41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f8ea 	bl	800e602 <UART_Transmit_IT>
    return;
 800e42e:	e014      	b.n	800e45a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00e      	beq.n	800e45a <HAL_UART_IRQHandler+0x51e>
 800e43c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e444:	2b00      	cmp	r3, #0
 800e446:	d008      	beq.n	800e45a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 f92a 	bl	800e6a2 <UART_EndTransmit_IT>
    return;
 800e44e:	e004      	b.n	800e45a <HAL_UART_IRQHandler+0x51e>
    return;
 800e450:	bf00      	nop
 800e452:	e002      	b.n	800e45a <HAL_UART_IRQHandler+0x51e>
      return;
 800e454:	bf00      	nop
 800e456:	e000      	b.n	800e45a <HAL_UART_IRQHandler+0x51e>
      return;
 800e458:	bf00      	nop
  }
}
 800e45a:	37e8      	adds	r7, #232	@ 0xe8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	460b      	mov	r3, r1
 800e492:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e494:	bf00      	nop
 800e496:	370c      	adds	r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	68ba      	ldr	r2, [r7, #8]
 800e4b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	88fa      	ldrh	r2, [r7, #6]
 800e4b8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	88fa      	ldrh	r2, [r7, #6]
 800e4be:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2222      	movs	r2, #34	@ 0x22
 800e4ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	691b      	ldr	r3, [r3, #16]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d007      	beq.n	800e4e6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68da      	ldr	r2, [r3, #12]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e4e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	695a      	ldr	r2, [r3, #20]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f042 0201 	orr.w	r2, r2, #1
 800e4f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68da      	ldr	r2, [r3, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f042 0220 	orr.w	r2, r2, #32
 800e504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e506:	2300      	movs	r3, #0
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e514:	b480      	push	{r7}
 800e516:	b095      	sub	sp, #84	@ 0x54
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	330c      	adds	r3, #12
 800e522:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e526:	e853 3f00 	ldrex	r3, [r3]
 800e52a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	330c      	adds	r3, #12
 800e53a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e53c:	643a      	str	r2, [r7, #64]	@ 0x40
 800e53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e540:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e542:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e544:	e841 2300 	strex	r3, r2, [r1]
 800e548:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1e5      	bne.n	800e51c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3314      	adds	r3, #20
 800e556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	e853 3f00 	ldrex	r3, [r3]
 800e55e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	f023 0301 	bic.w	r3, r3, #1
 800e566:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3314      	adds	r3, #20
 800e56e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e570:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e578:	e841 2300 	strex	r3, r2, [r1]
 800e57c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1e5      	bne.n	800e550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d119      	bne.n	800e5c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	330c      	adds	r3, #12
 800e592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	e853 3f00 	ldrex	r3, [r3]
 800e59a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	f023 0310 	bic.w	r3, r3, #16
 800e5a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	330c      	adds	r3, #12
 800e5aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5ac:	61ba      	str	r2, [r7, #24]
 800e5ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b0:	6979      	ldr	r1, [r7, #20]
 800e5b2:	69ba      	ldr	r2, [r7, #24]
 800e5b4:	e841 2300 	strex	r3, r2, [r1]
 800e5b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d1e5      	bne.n	800e58c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2220      	movs	r2, #32
 800e5c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e5ce:	bf00      	nop
 800e5d0:	3754      	adds	r7, #84	@ 0x54
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b084      	sub	sp, #16
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f7ff ff3d 	bl	800e474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5fa:	bf00      	nop
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e602:	b480      	push	{r7}
 800e604:	b085      	sub	sp, #20
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b21      	cmp	r3, #33	@ 0x21
 800e614:	d13e      	bne.n	800e694 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e61e:	d114      	bne.n	800e64a <UART_Transmit_IT+0x48>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	691b      	ldr	r3, [r3, #16]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d110      	bne.n	800e64a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a1b      	ldr	r3, [r3, #32]
 800e62c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	461a      	mov	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e63c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	1c9a      	adds	r2, r3, #2
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	621a      	str	r2, [r3, #32]
 800e648:	e008      	b.n	800e65c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	1c59      	adds	r1, r3, #1
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	6211      	str	r1, [r2, #32]
 800e654:	781a      	ldrb	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e660:	b29b      	uxth	r3, r3
 800e662:	3b01      	subs	r3, #1
 800e664:	b29b      	uxth	r3, r3
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	4619      	mov	r1, r3
 800e66a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10f      	bne.n	800e690 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68da      	ldr	r2, [r3, #12]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e67e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	68da      	ldr	r2, [r3, #12]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e68e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	e000      	b.n	800e696 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e694:	2302      	movs	r3, #2
  }
}
 800e696:	4618      	mov	r0, r3
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b082      	sub	sp, #8
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	68da      	ldr	r2, [r3, #12]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e6b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2220      	movs	r2, #32
 800e6be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7ff fecc 	bl	800e460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e6c8:	2300      	movs	r3, #0
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b08c      	sub	sp, #48	@ 0x30
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	2b22      	cmp	r3, #34	@ 0x22
 800e6e4:	f040 80ae 	bne.w	800e844 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	689b      	ldr	r3, [r3, #8]
 800e6ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6f0:	d117      	bne.n	800e722 <UART_Receive_IT+0x50>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d113      	bne.n	800e722 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e702:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e710:	b29a      	uxth	r2, r3
 800e712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e714:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e71a:	1c9a      	adds	r2, r3, #2
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	629a      	str	r2, [r3, #40]	@ 0x28
 800e720:	e026      	b.n	800e770 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e726:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e734:	d007      	beq.n	800e746 <UART_Receive_IT+0x74>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10a      	bne.n	800e754 <UART_Receive_IT+0x82>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e750:	701a      	strb	r2, [r3, #0]
 800e752:	e008      	b.n	800e766 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e760:	b2da      	uxtb	r2, r3
 800e762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e764:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e774:	b29b      	uxth	r3, r3
 800e776:	3b01      	subs	r3, #1
 800e778:	b29b      	uxth	r3, r3
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	4619      	mov	r1, r3
 800e77e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800e780:	2b00      	cmp	r3, #0
 800e782:	d15d      	bne.n	800e840 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	68da      	ldr	r2, [r3, #12]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f022 0220 	bic.w	r2, r2, #32
 800e792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	68da      	ldr	r2, [r3, #12]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e7a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	695a      	ldr	r2, [r3, #20]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f022 0201 	bic.w	r2, r2, #1
 800e7b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2220      	movs	r2, #32
 800e7b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d135      	bne.n	800e836 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	330c      	adds	r3, #12
 800e7d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	e853 3f00 	ldrex	r3, [r3]
 800e7de:	613b      	str	r3, [r7, #16]
   return(result);
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	f023 0310 	bic.w	r3, r3, #16
 800e7e6:	627b      	str	r3, [r7, #36]	@ 0x24
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	330c      	adds	r3, #12
 800e7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7f0:	623a      	str	r2, [r7, #32]
 800e7f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f4:	69f9      	ldr	r1, [r7, #28]
 800e7f6:	6a3a      	ldr	r2, [r7, #32]
 800e7f8:	e841 2300 	strex	r3, r2, [r1]
 800e7fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d1e5      	bne.n	800e7d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f003 0310 	and.w	r3, r3, #16
 800e80e:	2b10      	cmp	r3, #16
 800e810:	d10a      	bne.n	800e828 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e812:	2300      	movs	r3, #0
 800e814:	60fb      	str	r3, [r7, #12]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	60fb      	str	r3, [r7, #12]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	60fb      	str	r3, [r7, #12]
 800e826:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e82c:	4619      	mov	r1, r3
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f7ff fe2a 	bl	800e488 <HAL_UARTEx_RxEventCallback>
 800e834:	e002      	b.n	800e83c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7f6 fdf4 	bl	8005424 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	e002      	b.n	800e846 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e840:	2300      	movs	r3, #0
 800e842:	e000      	b.n	800e846 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e844:	2302      	movs	r3, #2
  }
}
 800e846:	4618      	mov	r0, r3
 800e848:	3730      	adds	r7, #48	@ 0x30
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e854:	b0c0      	sub	sp, #256	@ 0x100
 800e856:	af00      	add	r7, sp, #0
 800e858:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e86c:	68d9      	ldr	r1, [r3, #12]
 800e86e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	ea40 0301 	orr.w	r3, r0, r1
 800e878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e87a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	431a      	orrs	r2, r3
 800e888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e88c:	695b      	ldr	r3, [r3, #20]
 800e88e:	431a      	orrs	r2, r3
 800e890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e894:	69db      	ldr	r3, [r3, #28]
 800e896:	4313      	orrs	r3, r2
 800e898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e8a8:	f021 010c 	bic.w	r1, r1, #12
 800e8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e8b6:	430b      	orrs	r3, r1
 800e8b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e8c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8ca:	6999      	ldr	r1, [r3, #24]
 800e8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	ea40 0301 	orr.w	r3, r0, r1
 800e8d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	4b8f      	ldr	r3, [pc, #572]	@ (800eb1c <UART_SetConfig+0x2cc>)
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d005      	beq.n	800e8f0 <UART_SetConfig+0xa0>
 800e8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	4b8d      	ldr	r3, [pc, #564]	@ (800eb20 <UART_SetConfig+0x2d0>)
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d104      	bne.n	800e8fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e8f0:	f7fe fac8 	bl	800ce84 <HAL_RCC_GetPCLK2Freq>
 800e8f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e8f8:	e003      	b.n	800e902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e8fa:	f7fe faaf 	bl	800ce5c <HAL_RCC_GetPCLK1Freq>
 800e8fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e906:	69db      	ldr	r3, [r3, #28]
 800e908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e90c:	f040 810c 	bne.w	800eb28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e914:	2200      	movs	r2, #0
 800e916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e91a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800e91e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800e922:	4622      	mov	r2, r4
 800e924:	462b      	mov	r3, r5
 800e926:	1891      	adds	r1, r2, r2
 800e928:	65b9      	str	r1, [r7, #88]	@ 0x58
 800e92a:	415b      	adcs	r3, r3
 800e92c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e92e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800e932:	4621      	mov	r1, r4
 800e934:	eb12 0801 	adds.w	r8, r2, r1
 800e938:	4629      	mov	r1, r5
 800e93a:	eb43 0901 	adc.w	r9, r3, r1
 800e93e:	f04f 0200 	mov.w	r2, #0
 800e942:	f04f 0300 	mov.w	r3, #0
 800e946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e94a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e94e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e952:	4690      	mov	r8, r2
 800e954:	4699      	mov	r9, r3
 800e956:	4623      	mov	r3, r4
 800e958:	eb18 0303 	adds.w	r3, r8, r3
 800e95c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e960:	462b      	mov	r3, r5
 800e962:	eb49 0303 	adc.w	r3, r9, r3
 800e966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e96a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e976:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800e97a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800e97e:	460b      	mov	r3, r1
 800e980:	18db      	adds	r3, r3, r3
 800e982:	653b      	str	r3, [r7, #80]	@ 0x50
 800e984:	4613      	mov	r3, r2
 800e986:	eb42 0303 	adc.w	r3, r2, r3
 800e98a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e98c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800e990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800e994:	f7f2 f872 	bl	8000a7c <__aeabi_uldivmod>
 800e998:	4602      	mov	r2, r0
 800e99a:	460b      	mov	r3, r1
 800e99c:	4b61      	ldr	r3, [pc, #388]	@ (800eb24 <UART_SetConfig+0x2d4>)
 800e99e:	fba3 2302 	umull	r2, r3, r3, r2
 800e9a2:	095b      	lsrs	r3, r3, #5
 800e9a4:	011c      	lsls	r4, r3, #4
 800e9a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e9b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800e9b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	464b      	mov	r3, r9
 800e9bc:	1891      	adds	r1, r2, r2
 800e9be:	64b9      	str	r1, [r7, #72]	@ 0x48
 800e9c0:	415b      	adcs	r3, r3
 800e9c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800e9c8:	4641      	mov	r1, r8
 800e9ca:	eb12 0a01 	adds.w	sl, r2, r1
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	eb43 0b01 	adc.w	fp, r3, r1
 800e9d4:	f04f 0200 	mov.w	r2, #0
 800e9d8:	f04f 0300 	mov.w	r3, #0
 800e9dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e9e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e9e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e9e8:	4692      	mov	sl, r2
 800e9ea:	469b      	mov	fp, r3
 800e9ec:	4643      	mov	r3, r8
 800e9ee:	eb1a 0303 	adds.w	r3, sl, r3
 800e9f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	eb4b 0303 	adc.w	r3, fp, r3
 800e9fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ea00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ea0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ea10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ea14:	460b      	mov	r3, r1
 800ea16:	18db      	adds	r3, r3, r3
 800ea18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	eb42 0303 	adc.w	r3, r2, r3
 800ea20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ea22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ea26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ea2a:	f7f2 f827 	bl	8000a7c <__aeabi_uldivmod>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4611      	mov	r1, r2
 800ea34:	4b3b      	ldr	r3, [pc, #236]	@ (800eb24 <UART_SetConfig+0x2d4>)
 800ea36:	fba3 2301 	umull	r2, r3, r3, r1
 800ea3a:	095b      	lsrs	r3, r3, #5
 800ea3c:	2264      	movs	r2, #100	@ 0x64
 800ea3e:	fb02 f303 	mul.w	r3, r2, r3
 800ea42:	1acb      	subs	r3, r1, r3
 800ea44:	00db      	lsls	r3, r3, #3
 800ea46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ea4a:	4b36      	ldr	r3, [pc, #216]	@ (800eb24 <UART_SetConfig+0x2d4>)
 800ea4c:	fba3 2302 	umull	r2, r3, r3, r2
 800ea50:	095b      	lsrs	r3, r3, #5
 800ea52:	005b      	lsls	r3, r3, #1
 800ea54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ea58:	441c      	add	r4, r3
 800ea5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea5e:	2200      	movs	r2, #0
 800ea60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ea64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ea68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ea6c:	4642      	mov	r2, r8
 800ea6e:	464b      	mov	r3, r9
 800ea70:	1891      	adds	r1, r2, r2
 800ea72:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ea74:	415b      	adcs	r3, r3
 800ea76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ea7c:	4641      	mov	r1, r8
 800ea7e:	1851      	adds	r1, r2, r1
 800ea80:	6339      	str	r1, [r7, #48]	@ 0x30
 800ea82:	4649      	mov	r1, r9
 800ea84:	414b      	adcs	r3, r1
 800ea86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea88:	f04f 0200 	mov.w	r2, #0
 800ea8c:	f04f 0300 	mov.w	r3, #0
 800ea90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ea94:	4659      	mov	r1, fp
 800ea96:	00cb      	lsls	r3, r1, #3
 800ea98:	4651      	mov	r1, sl
 800ea9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ea9e:	4651      	mov	r1, sl
 800eaa0:	00ca      	lsls	r2, r1, #3
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	4642      	mov	r2, r8
 800eaaa:	189b      	adds	r3, r3, r2
 800eaac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eab0:	464b      	mov	r3, r9
 800eab2:	460a      	mov	r2, r1
 800eab4:	eb42 0303 	adc.w	r3, r2, r3
 800eab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eabc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eac8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800eacc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ead0:	460b      	mov	r3, r1
 800ead2:	18db      	adds	r3, r3, r3
 800ead4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ead6:	4613      	mov	r3, r2
 800ead8:	eb42 0303 	adc.w	r3, r2, r3
 800eadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800eae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800eae6:	f7f1 ffc9 	bl	8000a7c <__aeabi_uldivmod>
 800eaea:	4602      	mov	r2, r0
 800eaec:	460b      	mov	r3, r1
 800eaee:	4b0d      	ldr	r3, [pc, #52]	@ (800eb24 <UART_SetConfig+0x2d4>)
 800eaf0:	fba3 1302 	umull	r1, r3, r3, r2
 800eaf4:	095b      	lsrs	r3, r3, #5
 800eaf6:	2164      	movs	r1, #100	@ 0x64
 800eaf8:	fb01 f303 	mul.w	r3, r1, r3
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	00db      	lsls	r3, r3, #3
 800eb00:	3332      	adds	r3, #50	@ 0x32
 800eb02:	4a08      	ldr	r2, [pc, #32]	@ (800eb24 <UART_SetConfig+0x2d4>)
 800eb04:	fba2 2303 	umull	r2, r3, r2, r3
 800eb08:	095b      	lsrs	r3, r3, #5
 800eb0a:	f003 0207 	and.w	r2, r3, #7
 800eb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4422      	add	r2, r4
 800eb16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800eb18:	e106      	b.n	800ed28 <UART_SetConfig+0x4d8>
 800eb1a:	bf00      	nop
 800eb1c:	40011000 	.word	0x40011000
 800eb20:	40011400 	.word	0x40011400
 800eb24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800eb28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800eb32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800eb36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800eb3a:	4642      	mov	r2, r8
 800eb3c:	464b      	mov	r3, r9
 800eb3e:	1891      	adds	r1, r2, r2
 800eb40:	6239      	str	r1, [r7, #32]
 800eb42:	415b      	adcs	r3, r3
 800eb44:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eb4a:	4641      	mov	r1, r8
 800eb4c:	1854      	adds	r4, r2, r1
 800eb4e:	4649      	mov	r1, r9
 800eb50:	eb43 0501 	adc.w	r5, r3, r1
 800eb54:	f04f 0200 	mov.w	r2, #0
 800eb58:	f04f 0300 	mov.w	r3, #0
 800eb5c:	00eb      	lsls	r3, r5, #3
 800eb5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800eb62:	00e2      	lsls	r2, r4, #3
 800eb64:	4614      	mov	r4, r2
 800eb66:	461d      	mov	r5, r3
 800eb68:	4643      	mov	r3, r8
 800eb6a:	18e3      	adds	r3, r4, r3
 800eb6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800eb70:	464b      	mov	r3, r9
 800eb72:	eb45 0303 	adc.w	r3, r5, r3
 800eb76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800eb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eb86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800eb8a:	f04f 0200 	mov.w	r2, #0
 800eb8e:	f04f 0300 	mov.w	r3, #0
 800eb92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800eb96:	4629      	mov	r1, r5
 800eb98:	008b      	lsls	r3, r1, #2
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800eba0:	4621      	mov	r1, r4
 800eba2:	008a      	lsls	r2, r1, #2
 800eba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800eba8:	f7f1 ff68 	bl	8000a7c <__aeabi_uldivmod>
 800ebac:	4602      	mov	r2, r0
 800ebae:	460b      	mov	r3, r1
 800ebb0:	4b60      	ldr	r3, [pc, #384]	@ (800ed34 <UART_SetConfig+0x4e4>)
 800ebb2:	fba3 2302 	umull	r2, r3, r3, r2
 800ebb6:	095b      	lsrs	r3, r3, #5
 800ebb8:	011c      	lsls	r4, r3, #4
 800ebba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ebc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ebc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ebcc:	4642      	mov	r2, r8
 800ebce:	464b      	mov	r3, r9
 800ebd0:	1891      	adds	r1, r2, r2
 800ebd2:	61b9      	str	r1, [r7, #24]
 800ebd4:	415b      	adcs	r3, r3
 800ebd6:	61fb      	str	r3, [r7, #28]
 800ebd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ebdc:	4641      	mov	r1, r8
 800ebde:	1851      	adds	r1, r2, r1
 800ebe0:	6139      	str	r1, [r7, #16]
 800ebe2:	4649      	mov	r1, r9
 800ebe4:	414b      	adcs	r3, r1
 800ebe6:	617b      	str	r3, [r7, #20]
 800ebe8:	f04f 0200 	mov.w	r2, #0
 800ebec:	f04f 0300 	mov.w	r3, #0
 800ebf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ebf4:	4659      	mov	r1, fp
 800ebf6:	00cb      	lsls	r3, r1, #3
 800ebf8:	4651      	mov	r1, sl
 800ebfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ebfe:	4651      	mov	r1, sl
 800ec00:	00ca      	lsls	r2, r1, #3
 800ec02:	4610      	mov	r0, r2
 800ec04:	4619      	mov	r1, r3
 800ec06:	4603      	mov	r3, r0
 800ec08:	4642      	mov	r2, r8
 800ec0a:	189b      	adds	r3, r3, r2
 800ec0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ec10:	464b      	mov	r3, r9
 800ec12:	460a      	mov	r2, r1
 800ec14:	eb42 0303 	adc.w	r3, r2, r3
 800ec18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ec1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	2200      	movs	r2, #0
 800ec24:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ec28:	f04f 0200 	mov.w	r2, #0
 800ec2c:	f04f 0300 	mov.w	r3, #0
 800ec30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ec34:	4649      	mov	r1, r9
 800ec36:	008b      	lsls	r3, r1, #2
 800ec38:	4641      	mov	r1, r8
 800ec3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ec3e:	4641      	mov	r1, r8
 800ec40:	008a      	lsls	r2, r1, #2
 800ec42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ec46:	f7f1 ff19 	bl	8000a7c <__aeabi_uldivmod>
 800ec4a:	4602      	mov	r2, r0
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	4611      	mov	r1, r2
 800ec50:	4b38      	ldr	r3, [pc, #224]	@ (800ed34 <UART_SetConfig+0x4e4>)
 800ec52:	fba3 2301 	umull	r2, r3, r3, r1
 800ec56:	095b      	lsrs	r3, r3, #5
 800ec58:	2264      	movs	r2, #100	@ 0x64
 800ec5a:	fb02 f303 	mul.w	r3, r2, r3
 800ec5e:	1acb      	subs	r3, r1, r3
 800ec60:	011b      	lsls	r3, r3, #4
 800ec62:	3332      	adds	r3, #50	@ 0x32
 800ec64:	4a33      	ldr	r2, [pc, #204]	@ (800ed34 <UART_SetConfig+0x4e4>)
 800ec66:	fba2 2303 	umull	r2, r3, r2, r3
 800ec6a:	095b      	lsrs	r3, r3, #5
 800ec6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec70:	441c      	add	r4, r3
 800ec72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ec76:	2200      	movs	r2, #0
 800ec78:	673b      	str	r3, [r7, #112]	@ 0x70
 800ec7a:	677a      	str	r2, [r7, #116]	@ 0x74
 800ec7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ec80:	4642      	mov	r2, r8
 800ec82:	464b      	mov	r3, r9
 800ec84:	1891      	adds	r1, r2, r2
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	415b      	adcs	r3, r3
 800ec8a:	60fb      	str	r3, [r7, #12]
 800ec8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ec90:	4641      	mov	r1, r8
 800ec92:	1851      	adds	r1, r2, r1
 800ec94:	6039      	str	r1, [r7, #0]
 800ec96:	4649      	mov	r1, r9
 800ec98:	414b      	adcs	r3, r1
 800ec9a:	607b      	str	r3, [r7, #4]
 800ec9c:	f04f 0200 	mov.w	r2, #0
 800eca0:	f04f 0300 	mov.w	r3, #0
 800eca4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800eca8:	4659      	mov	r1, fp
 800ecaa:	00cb      	lsls	r3, r1, #3
 800ecac:	4651      	mov	r1, sl
 800ecae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ecb2:	4651      	mov	r1, sl
 800ecb4:	00ca      	lsls	r2, r1, #3
 800ecb6:	4610      	mov	r0, r2
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4603      	mov	r3, r0
 800ecbc:	4642      	mov	r2, r8
 800ecbe:	189b      	adds	r3, r3, r2
 800ecc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ecc2:	464b      	mov	r3, r9
 800ecc4:	460a      	mov	r2, r1
 800ecc6:	eb42 0303 	adc.w	r3, r2, r3
 800ecca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	663b      	str	r3, [r7, #96]	@ 0x60
 800ecd6:	667a      	str	r2, [r7, #100]	@ 0x64
 800ecd8:	f04f 0200 	mov.w	r2, #0
 800ecdc:	f04f 0300 	mov.w	r3, #0
 800ece0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ece4:	4649      	mov	r1, r9
 800ece6:	008b      	lsls	r3, r1, #2
 800ece8:	4641      	mov	r1, r8
 800ecea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ecee:	4641      	mov	r1, r8
 800ecf0:	008a      	lsls	r2, r1, #2
 800ecf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ecf6:	f7f1 fec1 	bl	8000a7c <__aeabi_uldivmod>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	@ (800ed34 <UART_SetConfig+0x4e4>)
 800ed00:	fba3 1302 	umull	r1, r3, r3, r2
 800ed04:	095b      	lsrs	r3, r3, #5
 800ed06:	2164      	movs	r1, #100	@ 0x64
 800ed08:	fb01 f303 	mul.w	r3, r1, r3
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	011b      	lsls	r3, r3, #4
 800ed10:	3332      	adds	r3, #50	@ 0x32
 800ed12:	4a08      	ldr	r2, [pc, #32]	@ (800ed34 <UART_SetConfig+0x4e4>)
 800ed14:	fba2 2303 	umull	r2, r3, r2, r3
 800ed18:	095b      	lsrs	r3, r3, #5
 800ed1a:	f003 020f 	and.w	r2, r3, #15
 800ed1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4422      	add	r2, r4
 800ed26:	609a      	str	r2, [r3, #8]
}
 800ed28:	bf00      	nop
 800ed2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ed34:	51eb851f 	.word	0x51eb851f

0800ed38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed38:	b084      	sub	sp, #16
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
 800ed42:	f107 001c 	add.w	r0, r7, #28
 800ed46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ed4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d123      	bne.n	800ed9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ed66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68db      	ldr	r3, [r3, #12]
 800ed72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ed7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d105      	bne.n	800ed8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 fae8 	bl	8010364 <USB_CoreReset>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73fb      	strb	r3, [r7, #15]
 800ed98:	e01b      	b.n	800edd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f001 fadc 	bl	8010364 <USB_CoreReset>
 800edac:	4603      	mov	r3, r0
 800edae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800edb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d106      	bne.n	800edc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	639a      	str	r2, [r3, #56]	@ 0x38
 800edc4:	e005      	b.n	800edd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800edd2:	7fbb      	ldrb	r3, [r7, #30]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d10b      	bne.n	800edf0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f043 0206 	orr.w	r2, r3, #6
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	f043 0220 	orr.w	r2, r3, #32
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800edf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800edfc:	b004      	add	sp, #16
 800edfe:	4770      	bx	lr

0800ee00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b087      	sub	sp, #28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	2b02      	cmp	r3, #2
 800ee12:	d165      	bne.n	800eee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	4a41      	ldr	r2, [pc, #260]	@ (800ef1c <USB_SetTurnaroundTime+0x11c>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d906      	bls.n	800ee2a <USB_SetTurnaroundTime+0x2a>
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	4a40      	ldr	r2, [pc, #256]	@ (800ef20 <USB_SetTurnaroundTime+0x120>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d202      	bcs.n	800ee2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ee24:	230f      	movs	r3, #15
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	e062      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	4a3c      	ldr	r2, [pc, #240]	@ (800ef20 <USB_SetTurnaroundTime+0x120>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d306      	bcc.n	800ee40 <USB_SetTurnaroundTime+0x40>
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	4a3b      	ldr	r2, [pc, #236]	@ (800ef24 <USB_SetTurnaroundTime+0x124>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d202      	bcs.n	800ee40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ee3a:	230e      	movs	r3, #14
 800ee3c:	617b      	str	r3, [r7, #20]
 800ee3e:	e057      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	4a38      	ldr	r2, [pc, #224]	@ (800ef24 <USB_SetTurnaroundTime+0x124>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d306      	bcc.n	800ee56 <USB_SetTurnaroundTime+0x56>
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	4a37      	ldr	r2, [pc, #220]	@ (800ef28 <USB_SetTurnaroundTime+0x128>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d202      	bcs.n	800ee56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ee50:	230d      	movs	r3, #13
 800ee52:	617b      	str	r3, [r7, #20]
 800ee54:	e04c      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	4a33      	ldr	r2, [pc, #204]	@ (800ef28 <USB_SetTurnaroundTime+0x128>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d306      	bcc.n	800ee6c <USB_SetTurnaroundTime+0x6c>
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	4a32      	ldr	r2, [pc, #200]	@ (800ef2c <USB_SetTurnaroundTime+0x12c>)
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d802      	bhi.n	800ee6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ee66:	230c      	movs	r3, #12
 800ee68:	617b      	str	r3, [r7, #20]
 800ee6a:	e041      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	4a2f      	ldr	r2, [pc, #188]	@ (800ef2c <USB_SetTurnaroundTime+0x12c>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d906      	bls.n	800ee82 <USB_SetTurnaroundTime+0x82>
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	4a2e      	ldr	r2, [pc, #184]	@ (800ef30 <USB_SetTurnaroundTime+0x130>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d802      	bhi.n	800ee82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ee7c:	230b      	movs	r3, #11
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	e036      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	4a2a      	ldr	r2, [pc, #168]	@ (800ef30 <USB_SetTurnaroundTime+0x130>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d906      	bls.n	800ee98 <USB_SetTurnaroundTime+0x98>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	4a29      	ldr	r2, [pc, #164]	@ (800ef34 <USB_SetTurnaroundTime+0x134>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d802      	bhi.n	800ee98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ee92:	230a      	movs	r3, #10
 800ee94:	617b      	str	r3, [r7, #20]
 800ee96:	e02b      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	4a26      	ldr	r2, [pc, #152]	@ (800ef34 <USB_SetTurnaroundTime+0x134>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d906      	bls.n	800eeae <USB_SetTurnaroundTime+0xae>
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	4a25      	ldr	r2, [pc, #148]	@ (800ef38 <USB_SetTurnaroundTime+0x138>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d202      	bcs.n	800eeae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800eea8:	2309      	movs	r3, #9
 800eeaa:	617b      	str	r3, [r7, #20]
 800eeac:	e020      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	4a21      	ldr	r2, [pc, #132]	@ (800ef38 <USB_SetTurnaroundTime+0x138>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d306      	bcc.n	800eec4 <USB_SetTurnaroundTime+0xc4>
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	4a20      	ldr	r2, [pc, #128]	@ (800ef3c <USB_SetTurnaroundTime+0x13c>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d802      	bhi.n	800eec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800eebe:	2308      	movs	r3, #8
 800eec0:	617b      	str	r3, [r7, #20]
 800eec2:	e015      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	4a1d      	ldr	r2, [pc, #116]	@ (800ef3c <USB_SetTurnaroundTime+0x13c>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d906      	bls.n	800eeda <USB_SetTurnaroundTime+0xda>
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	4a1c      	ldr	r2, [pc, #112]	@ (800ef40 <USB_SetTurnaroundTime+0x140>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d202      	bcs.n	800eeda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800eed4:	2307      	movs	r3, #7
 800eed6:	617b      	str	r3, [r7, #20]
 800eed8:	e00a      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800eeda:	2306      	movs	r3, #6
 800eedc:	617b      	str	r3, [r7, #20]
 800eede:	e007      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800eee6:	2309      	movs	r3, #9
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	e001      	b.n	800eef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eeec:	2309      	movs	r3, #9
 800eeee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	029b      	lsls	r3, r3, #10
 800ef04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr
 800ef1c:	00d8acbf 	.word	0x00d8acbf
 800ef20:	00e4e1c0 	.word	0x00e4e1c0
 800ef24:	00f42400 	.word	0x00f42400
 800ef28:	01067380 	.word	0x01067380
 800ef2c:	011a499f 	.word	0x011a499f
 800ef30:	01312cff 	.word	0x01312cff
 800ef34:	014ca43f 	.word	0x014ca43f
 800ef38:	016e3600 	.word	0x016e3600
 800ef3c:	01a6ab1f 	.word	0x01a6ab1f
 800ef40:	01e84800 	.word	0x01e84800

0800ef44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	f043 0201 	orr.w	r2, r3, #1
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	370c      	adds	r7, #12
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef66:	b480      	push	{r7}
 800ef68:	b083      	sub	sp, #12
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	f023 0201 	bic.w	r2, r3, #1
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d115      	bne.n	800efd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800efb6:	200a      	movs	r0, #10
 800efb8:	f7f7 f892 	bl	80060e0 <HAL_Delay>
      ms += 10U;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	330a      	adds	r3, #10
 800efc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f001 f93f 	bl	8010246 <USB_GetMode>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d01e      	beq.n	800f00c <USB_SetCurrentMode+0x84>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2bc7      	cmp	r3, #199	@ 0xc7
 800efd2:	d9f0      	bls.n	800efb6 <USB_SetCurrentMode+0x2e>
 800efd4:	e01a      	b.n	800f00c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800efd6:	78fb      	ldrb	r3, [r7, #3]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d115      	bne.n	800f008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	68db      	ldr	r3, [r3, #12]
 800efe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800efe8:	200a      	movs	r0, #10
 800efea:	f7f7 f879 	bl	80060e0 <HAL_Delay>
      ms += 10U;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	330a      	adds	r3, #10
 800eff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f001 f926 	bl	8010246 <USB_GetMode>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d005      	beq.n	800f00c <USB_SetCurrentMode+0x84>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2bc7      	cmp	r3, #199	@ 0xc7
 800f004:	d9f0      	bls.n	800efe8 <USB_SetCurrentMode+0x60>
 800f006:	e001      	b.n	800f00c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f008:	2301      	movs	r3, #1
 800f00a:	e005      	b.n	800f018 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2bc8      	cmp	r3, #200	@ 0xc8
 800f010:	d101      	bne.n	800f016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	e000      	b.n	800f018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f020:	b084      	sub	sp, #16
 800f022:	b580      	push	{r7, lr}
 800f024:	b086      	sub	sp, #24
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f03a:	2300      	movs	r3, #0
 800f03c:	613b      	str	r3, [r7, #16]
 800f03e:	e009      	b.n	800f054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	3340      	adds	r3, #64	@ 0x40
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4413      	add	r3, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	3301      	adds	r3, #1
 800f052:	613b      	str	r3, [r7, #16]
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	2b0e      	cmp	r3, #14
 800f058:	d9f2      	bls.n	800f040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f05a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d11c      	bne.n	800f09c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f070:	f043 0302 	orr.w	r3, r3, #2
 800f074:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f07a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f086:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f092:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	639a      	str	r2, [r3, #56]	@ 0x38
 800f09a:	e00b      	b.n	800f0b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	2300      	movs	r3, #0
 800f0be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f0c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d10d      	bne.n	800f0e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d104      	bne.n	800f0da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f000 f968 	bl	800f3a8 <USB_SetDevSpeed>
 800f0d8:	e008      	b.n	800f0ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f0da:	2101      	movs	r1, #1
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f963 	bl	800f3a8 <USB_SetDevSpeed>
 800f0e2:	e003      	b.n	800f0ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f0e4:	2103      	movs	r1, #3
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f95e 	bl	800f3a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f0ec:	2110      	movs	r1, #16
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f8fa 	bl	800f2e8 <USB_FlushTxFifo>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f924 	bl	800f34c <USB_FlushRxFifo>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f114:	461a      	mov	r2, r3
 800f116:	2300      	movs	r3, #0
 800f118:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f120:	461a      	mov	r2, r3
 800f122:	2300      	movs	r3, #0
 800f124:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f12c:	461a      	mov	r2, r3
 800f12e:	2300      	movs	r3, #0
 800f130:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f132:	2300      	movs	r3, #0
 800f134:	613b      	str	r3, [r7, #16]
 800f136:	e043      	b.n	800f1c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	015a      	lsls	r2, r3, #5
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	4413      	add	r3, r2
 800f140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f14a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f14e:	d118      	bne.n	800f182 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d10a      	bne.n	800f16c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	015a      	lsls	r2, r3, #5
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	4413      	add	r3, r2
 800f15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f162:	461a      	mov	r2, r3
 800f164:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f168:	6013      	str	r3, [r2, #0]
 800f16a:	e013      	b.n	800f194 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	015a      	lsls	r2, r3, #5
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	4413      	add	r3, r2
 800f174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f178:	461a      	mov	r2, r3
 800f17a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f17e:	6013      	str	r3, [r2, #0]
 800f180:	e008      	b.n	800f194 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	015a      	lsls	r2, r3, #5
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	4413      	add	r3, r2
 800f18a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f18e:	461a      	mov	r2, r3
 800f190:	2300      	movs	r3, #0
 800f192:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	015a      	lsls	r2, r3, #5
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4413      	add	r3, r2
 800f19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	015a      	lsls	r2, r3, #5
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	4413      	add	r3, r2
 800f1ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f1b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	613b      	str	r3, [r7, #16]
 800f1c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f1c4:	461a      	mov	r2, r3
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d3b5      	bcc.n	800f138 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	613b      	str	r3, [r7, #16]
 800f1d0:	e043      	b.n	800f25a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	015a      	lsls	r2, r3, #5
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	4413      	add	r3, r2
 800f1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f1e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f1e8:	d118      	bne.n	800f21c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d10a      	bne.n	800f206 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	015a      	lsls	r2, r3, #5
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f202:	6013      	str	r3, [r2, #0]
 800f204:	e013      	b.n	800f22e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	015a      	lsls	r2, r3, #5
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	4413      	add	r3, r2
 800f20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f212:	461a      	mov	r2, r3
 800f214:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f218:	6013      	str	r3, [r2, #0]
 800f21a:	e008      	b.n	800f22e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	015a      	lsls	r2, r3, #5
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4413      	add	r3, r2
 800f224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f228:	461a      	mov	r2, r3
 800f22a:	2300      	movs	r3, #0
 800f22c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	015a      	lsls	r2, r3, #5
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	4413      	add	r3, r2
 800f236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f23a:	461a      	mov	r2, r3
 800f23c:	2300      	movs	r3, #0
 800f23e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	015a      	lsls	r2, r3, #5
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	4413      	add	r3, r2
 800f248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f24c:	461a      	mov	r2, r3
 800f24e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	3301      	adds	r3, #1
 800f258:	613b      	str	r3, [r7, #16]
 800f25a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f25e:	461a      	mov	r2, r3
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	4293      	cmp	r3, r2
 800f264:	d3b5      	bcc.n	800f1d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	68fa      	ldr	r2, [r7, #12]
 800f270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f278:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f286:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d105      	bne.n	800f29c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	f043 0210 	orr.w	r2, r3, #16
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	699a      	ldr	r2, [r3, #24]
 800f2a0:	4b10      	ldr	r3, [pc, #64]	@ (800f2e4 <USB_DevInit+0x2c4>)
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f2a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	699b      	ldr	r3, [r3, #24]
 800f2b4:	f043 0208 	orr.w	r2, r3, #8
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f2bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d107      	bne.n	800f2d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f2cc:	f043 0304 	orr.w	r3, r3, #4
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f2e0:	b004      	add	sp, #16
 800f2e2:	4770      	bx	lr
 800f2e4:	803c3800 	.word	0x803c3800

0800f2e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f302:	d901      	bls.n	800f308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f304:	2303      	movs	r3, #3
 800f306:	e01b      	b.n	800f340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	daf2      	bge.n	800f2f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	019b      	lsls	r3, r3, #6
 800f318:	f043 0220 	orr.w	r2, r3, #32
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	3301      	adds	r3, #1
 800f324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f32c:	d901      	bls.n	800f332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f32e:	2303      	movs	r3, #3
 800f330:	e006      	b.n	800f340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	f003 0320 	and.w	r3, r3, #32
 800f33a:	2b20      	cmp	r3, #32
 800f33c:	d0f0      	beq.n	800f320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f33e:	2300      	movs	r3, #0
}
 800f340:	4618      	mov	r0, r3
 800f342:	3714      	adds	r7, #20
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f354:	2300      	movs	r3, #0
 800f356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	3301      	adds	r3, #1
 800f35c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f364:	d901      	bls.n	800f36a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f366:	2303      	movs	r3, #3
 800f368:	e018      	b.n	800f39c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	691b      	ldr	r3, [r3, #16]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	daf2      	bge.n	800f358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f372:	2300      	movs	r3, #0
 800f374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2210      	movs	r2, #16
 800f37a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	3301      	adds	r3, #1
 800f380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f388:	d901      	bls.n	800f38e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f38a:	2303      	movs	r3, #3
 800f38c:	e006      	b.n	800f39c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	f003 0310 	and.w	r3, r3, #16
 800f396:	2b10      	cmp	r3, #16
 800f398:	d0f0      	beq.n	800f37c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f39a:	2300      	movs	r3, #0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3714      	adds	r7, #20
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	78fb      	ldrb	r3, [r7, #3]
 800f3c2:	68f9      	ldr	r1, [r7, #12]
 800f3c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f3da:	b480      	push	{r7}
 800f3dc:	b087      	sub	sp, #28
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	f003 0306 	and.w	r3, r3, #6
 800f3f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	75fb      	strb	r3, [r7, #23]
 800f3fe:	e00a      	b.n	800f416 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b02      	cmp	r3, #2
 800f404:	d002      	beq.n	800f40c <USB_GetDevSpeed+0x32>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2b06      	cmp	r3, #6
 800f40a:	d102      	bne.n	800f412 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f40c:	2302      	movs	r3, #2
 800f40e:	75fb      	strb	r3, [r7, #23]
 800f410:	e001      	b.n	800f416 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f412:	230f      	movs	r3, #15
 800f414:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f416:	7dfb      	ldrb	r3, [r7, #23]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	371c      	adds	r7, #28
 800f41c:	46bd      	mov	sp, r7
 800f41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f422:	4770      	bx	lr

0800f424 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f424:	b480      	push	{r7}
 800f426:	b085      	sub	sp, #20
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	785b      	ldrb	r3, [r3, #1]
 800f43c:	2b01      	cmp	r3, #1
 800f43e:	d13a      	bne.n	800f4b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f446:	69da      	ldr	r2, [r3, #28]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	f003 030f 	and.w	r3, r3, #15
 800f450:	2101      	movs	r1, #1
 800f452:	fa01 f303 	lsl.w	r3, r1, r3
 800f456:	b29b      	uxth	r3, r3
 800f458:	68f9      	ldr	r1, [r7, #12]
 800f45a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f45e:	4313      	orrs	r3, r2
 800f460:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	015a      	lsls	r2, r3, #5
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	4413      	add	r3, r2
 800f46a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f474:	2b00      	cmp	r3, #0
 800f476:	d155      	bne.n	800f524 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	015a      	lsls	r2, r3, #5
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	4413      	add	r3, r2
 800f480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	791b      	ldrb	r3, [r3, #4]
 800f492:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f494:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	059b      	lsls	r3, r3, #22
 800f49a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f49c:	4313      	orrs	r3, r2
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	0151      	lsls	r1, r2, #5
 800f4a2:	68fa      	ldr	r2, [r7, #12]
 800f4a4:	440a      	add	r2, r1
 800f4a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f4aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	e036      	b.n	800f524 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f4bc:	69da      	ldr	r2, [r3, #28]
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	f003 030f 	and.w	r3, r3, #15
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4cc:	041b      	lsls	r3, r3, #16
 800f4ce:	68f9      	ldr	r1, [r7, #12]
 800f4d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	015a      	lsls	r2, r3, #5
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	4413      	add	r3, r2
 800f4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d11a      	bne.n	800f524 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	015a      	lsls	r2, r3, #5
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	791b      	ldrb	r3, [r3, #4]
 800f508:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f50a:	430b      	orrs	r3, r1
 800f50c:	4313      	orrs	r3, r2
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	0151      	lsls	r1, r2, #5
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	440a      	add	r2, r1
 800f516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f51a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f51e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f522:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f524:	2300      	movs	r3, #0
}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
	...

0800f534 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f534:	b480      	push	{r7}
 800f536:	b085      	sub	sp, #20
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	785b      	ldrb	r3, [r3, #1]
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d161      	bne.n	800f614 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	015a      	lsls	r2, r3, #5
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	4413      	add	r3, r2
 800f558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f566:	d11f      	bne.n	800f5a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	015a      	lsls	r2, r3, #5
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4413      	add	r3, r2
 800f570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	68ba      	ldr	r2, [r7, #8]
 800f578:	0151      	lsls	r1, r2, #5
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	440a      	add	r2, r1
 800f57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f582:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f586:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	015a      	lsls	r2, r3, #5
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4413      	add	r3, r2
 800f590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	0151      	lsls	r1, r2, #5
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	440a      	add	r2, r1
 800f59e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f5a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f5a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	f003 030f 	and.w	r3, r3, #15
 800f5b8:	2101      	movs	r1, #1
 800f5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	43db      	mvns	r3, r3
 800f5c2:	68f9      	ldr	r1, [r7, #12]
 800f5c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f5c8:	4013      	ands	r3, r2
 800f5ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5d2:	69da      	ldr	r2, [r3, #28]
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	f003 030f 	and.w	r3, r3, #15
 800f5dc:	2101      	movs	r1, #1
 800f5de:	fa01 f303 	lsl.w	r3, r1, r3
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	43db      	mvns	r3, r3
 800f5e6:	68f9      	ldr	r1, [r7, #12]
 800f5e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	015a      	lsls	r2, r3, #5
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	0159      	lsls	r1, r3, #5
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	440b      	add	r3, r1
 800f606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f60a:	4619      	mov	r1, r3
 800f60c:	4b35      	ldr	r3, [pc, #212]	@ (800f6e4 <USB_DeactivateEndpoint+0x1b0>)
 800f60e:	4013      	ands	r3, r2
 800f610:	600b      	str	r3, [r1, #0]
 800f612:	e060      	b.n	800f6d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	015a      	lsls	r2, r3, #5
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	4413      	add	r3, r2
 800f61c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f62a:	d11f      	bne.n	800f66c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	015a      	lsls	r2, r3, #5
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	4413      	add	r3, r2
 800f634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	68ba      	ldr	r2, [r7, #8]
 800f63c:	0151      	lsls	r1, r2, #5
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	440a      	add	r2, r1
 800f642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f646:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f64a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	015a      	lsls	r2, r3, #5
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	4413      	add	r3, r2
 800f654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	0151      	lsls	r1, r2, #5
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	440a      	add	r2, r1
 800f662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f666:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f66a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	f003 030f 	and.w	r3, r3, #15
 800f67c:	2101      	movs	r1, #1
 800f67e:	fa01 f303 	lsl.w	r3, r1, r3
 800f682:	041b      	lsls	r3, r3, #16
 800f684:	43db      	mvns	r3, r3
 800f686:	68f9      	ldr	r1, [r7, #12]
 800f688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f68c:	4013      	ands	r3, r2
 800f68e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f696:	69da      	ldr	r2, [r3, #28]
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	f003 030f 	and.w	r3, r3, #15
 800f6a0:	2101      	movs	r1, #1
 800f6a2:	fa01 f303 	lsl.w	r3, r1, r3
 800f6a6:	041b      	lsls	r3, r3, #16
 800f6a8:	43db      	mvns	r3, r3
 800f6aa:	68f9      	ldr	r1, [r7, #12]
 800f6ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	015a      	lsls	r2, r3, #5
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	0159      	lsls	r1, r3, #5
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	440b      	add	r3, r1
 800f6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6ce:	4619      	mov	r1, r3
 800f6d0:	4b05      	ldr	r3, [pc, #20]	@ (800f6e8 <USB_DeactivateEndpoint+0x1b4>)
 800f6d2:	4013      	ands	r3, r2
 800f6d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3714      	adds	r7, #20
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	ec337800 	.word	0xec337800
 800f6e8:	eff37800 	.word	0xeff37800

0800f6ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08a      	sub	sp, #40	@ 0x28
 800f6f0:	af02      	add	r7, sp, #8
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	785b      	ldrb	r3, [r3, #1]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	f040 817f 	bne.w	800fa0c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	691b      	ldr	r3, [r3, #16]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d132      	bne.n	800f77c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	015a      	lsls	r2, r3, #5
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	4413      	add	r3, r2
 800f71e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f722:	691b      	ldr	r3, [r3, #16]
 800f724:	69ba      	ldr	r2, [r7, #24]
 800f726:	0151      	lsls	r1, r2, #5
 800f728:	69fa      	ldr	r2, [r7, #28]
 800f72a:	440a      	add	r2, r1
 800f72c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f730:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f734:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	015a      	lsls	r2, r3, #5
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	4413      	add	r3, r2
 800f742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f746:	691b      	ldr	r3, [r3, #16]
 800f748:	69ba      	ldr	r2, [r7, #24]
 800f74a:	0151      	lsls	r1, r2, #5
 800f74c:	69fa      	ldr	r2, [r7, #28]
 800f74e:	440a      	add	r2, r1
 800f750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f754:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	015a      	lsls	r2, r3, #5
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	4413      	add	r3, r2
 800f762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	69ba      	ldr	r2, [r7, #24]
 800f76a:	0151      	lsls	r1, r2, #5
 800f76c:	69fa      	ldr	r2, [r7, #28]
 800f76e:	440a      	add	r2, r1
 800f770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f774:	0cdb      	lsrs	r3, r3, #19
 800f776:	04db      	lsls	r3, r3, #19
 800f778:	6113      	str	r3, [r2, #16]
 800f77a:	e097      	b.n	800f8ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	015a      	lsls	r2, r3, #5
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	4413      	add	r3, r2
 800f784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f788:	691b      	ldr	r3, [r3, #16]
 800f78a:	69ba      	ldr	r2, [r7, #24]
 800f78c:	0151      	lsls	r1, r2, #5
 800f78e:	69fa      	ldr	r2, [r7, #28]
 800f790:	440a      	add	r2, r1
 800f792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f796:	0cdb      	lsrs	r3, r3, #19
 800f798:	04db      	lsls	r3, r3, #19
 800f79a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	015a      	lsls	r2, r3, #5
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7a8:	691b      	ldr	r3, [r3, #16]
 800f7aa:	69ba      	ldr	r2, [r7, #24]
 800f7ac:	0151      	lsls	r1, r2, #5
 800f7ae:	69fa      	ldr	r2, [r7, #28]
 800f7b0:	440a      	add	r2, r1
 800f7b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f7b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800f7ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800f7be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d11a      	bne.n	800f7fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	691a      	ldr	r2, [r3, #16]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d903      	bls.n	800f7da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	689a      	ldr	r2, [r3, #8]
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7e6:	691b      	ldr	r3, [r3, #16]
 800f7e8:	69ba      	ldr	r2, [r7, #24]
 800f7ea:	0151      	lsls	r1, r2, #5
 800f7ec:	69fa      	ldr	r2, [r7, #28]
 800f7ee:	440a      	add	r2, r1
 800f7f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f7f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f7f8:	6113      	str	r3, [r2, #16]
 800f7fa:	e044      	b.n	800f886 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	691a      	ldr	r2, [r3, #16]
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	4413      	add	r3, r2
 800f806:	1e5a      	subs	r2, r3, #1
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f810:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800f812:	69bb      	ldr	r3, [r7, #24]
 800f814:	015a      	lsls	r2, r3, #5
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	4413      	add	r3, r2
 800f81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f81e:	691a      	ldr	r2, [r3, #16]
 800f820:	8afb      	ldrh	r3, [r7, #22]
 800f822:	04d9      	lsls	r1, r3, #19
 800f824:	4ba4      	ldr	r3, [pc, #656]	@ (800fab8 <USB_EPStartXfer+0x3cc>)
 800f826:	400b      	ands	r3, r1
 800f828:	69b9      	ldr	r1, [r7, #24]
 800f82a:	0148      	lsls	r0, r1, #5
 800f82c:	69f9      	ldr	r1, [r7, #28]
 800f82e:	4401      	add	r1, r0
 800f830:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f834:	4313      	orrs	r3, r2
 800f836:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	791b      	ldrb	r3, [r3, #4]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d122      	bne.n	800f886 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	69ba      	ldr	r2, [r7, #24]
 800f850:	0151      	lsls	r1, r2, #5
 800f852:	69fa      	ldr	r2, [r7, #28]
 800f854:	440a      	add	r2, r1
 800f856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f85a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800f85e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	015a      	lsls	r2, r3, #5
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	4413      	add	r3, r2
 800f868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f86c:	691a      	ldr	r2, [r3, #16]
 800f86e:	8afb      	ldrh	r3, [r7, #22]
 800f870:	075b      	lsls	r3, r3, #29
 800f872:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800f876:	69b9      	ldr	r1, [r7, #24]
 800f878:	0148      	lsls	r0, r1, #5
 800f87a:	69f9      	ldr	r1, [r7, #28]
 800f87c:	4401      	add	r1, r0
 800f87e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f882:	4313      	orrs	r3, r2
 800f884:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	015a      	lsls	r2, r3, #5
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	4413      	add	r3, r2
 800f88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f892:	691a      	ldr	r2, [r3, #16]
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	691b      	ldr	r3, [r3, #16]
 800f898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f89c:	69b9      	ldr	r1, [r7, #24]
 800f89e:	0148      	lsls	r0, r1, #5
 800f8a0:	69f9      	ldr	r1, [r7, #28]
 800f8a2:	4401      	add	r1, r0
 800f8a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800f8a8:	4313      	orrs	r3, r2
 800f8aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f8ac:	79fb      	ldrb	r3, [r7, #7]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d14b      	bne.n	800f94a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d009      	beq.n	800f8ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	015a      	lsls	r2, r3, #5
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	4413      	add	r3, r2
 800f8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8c6:	461a      	mov	r2, r3
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	69db      	ldr	r3, [r3, #28]
 800f8cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	791b      	ldrb	r3, [r3, #4]
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d128      	bne.n	800f928 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8dc:	689b      	ldr	r3, [r3, #8]
 800f8de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d110      	bne.n	800f908 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f8e6:	69bb      	ldr	r3, [r7, #24]
 800f8e8:	015a      	lsls	r2, r3, #5
 800f8ea:	69fb      	ldr	r3, [r7, #28]
 800f8ec:	4413      	add	r3, r2
 800f8ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	69ba      	ldr	r2, [r7, #24]
 800f8f6:	0151      	lsls	r1, r2, #5
 800f8f8:	69fa      	ldr	r2, [r7, #28]
 800f8fa:	440a      	add	r2, r1
 800f8fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f904:	6013      	str	r3, [r2, #0]
 800f906:	e00f      	b.n	800f928 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	015a      	lsls	r2, r3, #5
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	4413      	add	r3, r2
 800f910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	69ba      	ldr	r2, [r7, #24]
 800f918:	0151      	lsls	r1, r2, #5
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	440a      	add	r2, r1
 800f91e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f926:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	69ba      	ldr	r2, [r7, #24]
 800f938:	0151      	lsls	r1, r2, #5
 800f93a:	69fa      	ldr	r2, [r7, #28]
 800f93c:	440a      	add	r2, r1
 800f93e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f942:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f946:	6013      	str	r3, [r2, #0]
 800f948:	e166      	b.n	800fc18 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	015a      	lsls	r2, r3, #5
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	4413      	add	r3, r2
 800f952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	69ba      	ldr	r2, [r7, #24]
 800f95a:	0151      	lsls	r1, r2, #5
 800f95c:	69fa      	ldr	r2, [r7, #28]
 800f95e:	440a      	add	r2, r1
 800f960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f964:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f968:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	791b      	ldrb	r3, [r3, #4]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d015      	beq.n	800f99e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	2b00      	cmp	r3, #0
 800f978:	f000 814e 	beq.w	800fc18 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	f003 030f 	and.w	r3, r3, #15
 800f98c:	2101      	movs	r1, #1
 800f98e:	fa01 f303 	lsl.w	r3, r1, r3
 800f992:	69f9      	ldr	r1, [r7, #28]
 800f994:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f998:	4313      	orrs	r3, r2
 800f99a:	634b      	str	r3, [r1, #52]	@ 0x34
 800f99c:	e13c      	b.n	800fc18 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d110      	bne.n	800f9d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	015a      	lsls	r2, r3, #5
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	69ba      	ldr	r2, [r7, #24]
 800f9be:	0151      	lsls	r1, r2, #5
 800f9c0:	69fa      	ldr	r2, [r7, #28]
 800f9c2:	440a      	add	r2, r1
 800f9c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f9cc:	6013      	str	r3, [r2, #0]
 800f9ce:	e00f      	b.n	800f9f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	015a      	lsls	r2, r3, #5
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	69ba      	ldr	r2, [r7, #24]
 800f9e0:	0151      	lsls	r1, r2, #5
 800f9e2:	69fa      	ldr	r2, [r7, #28]
 800f9e4:	440a      	add	r2, r1
 800f9e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f9ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	68d9      	ldr	r1, [r3, #12]
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	781a      	ldrb	r2, [r3, #0]
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	691b      	ldr	r3, [r3, #16]
 800f9fc:	b298      	uxth	r0, r3
 800f9fe:	79fb      	ldrb	r3, [r7, #7]
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	4603      	mov	r3, r0
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f000 f9b9 	bl	800fd7c <USB_WritePacket>
 800fa0a:	e105      	b.n	800fc18 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	015a      	lsls	r2, r3, #5
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	4413      	add	r3, r2
 800fa14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa18:	691b      	ldr	r3, [r3, #16]
 800fa1a:	69ba      	ldr	r2, [r7, #24]
 800fa1c:	0151      	lsls	r1, r2, #5
 800fa1e:	69fa      	ldr	r2, [r7, #28]
 800fa20:	440a      	add	r2, r1
 800fa22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa26:	0cdb      	lsrs	r3, r3, #19
 800fa28:	04db      	lsls	r3, r3, #19
 800fa2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	015a      	lsls	r2, r3, #5
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	4413      	add	r3, r2
 800fa34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa38:	691b      	ldr	r3, [r3, #16]
 800fa3a:	69ba      	ldr	r2, [r7, #24]
 800fa3c:	0151      	lsls	r1, r2, #5
 800fa3e:	69fa      	ldr	r2, [r7, #28]
 800fa40:	440a      	add	r2, r1
 800fa42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800fa4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800fa4e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d132      	bne.n	800fabc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	691b      	ldr	r3, [r3, #16]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d003      	beq.n	800fa66 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	689a      	ldr	r2, [r3, #8]
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	689a      	ldr	r2, [r3, #8]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	015a      	lsls	r2, r3, #5
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	4413      	add	r3, r2
 800fa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa7a:	691a      	ldr	r2, [r3, #16]
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	6a1b      	ldr	r3, [r3, #32]
 800fa80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa84:	69b9      	ldr	r1, [r7, #24]
 800fa86:	0148      	lsls	r0, r1, #5
 800fa88:	69f9      	ldr	r1, [r7, #28]
 800fa8a:	4401      	add	r1, r0
 800fa8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fa90:	4313      	orrs	r3, r2
 800fa92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	015a      	lsls	r2, r3, #5
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faa0:	691b      	ldr	r3, [r3, #16]
 800faa2:	69ba      	ldr	r2, [r7, #24]
 800faa4:	0151      	lsls	r1, r2, #5
 800faa6:	69fa      	ldr	r2, [r7, #28]
 800faa8:	440a      	add	r2, r1
 800faaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800faae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fab2:	6113      	str	r3, [r2, #16]
 800fab4:	e062      	b.n	800fb7c <USB_EPStartXfer+0x490>
 800fab6:	bf00      	nop
 800fab8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	691b      	ldr	r3, [r3, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d123      	bne.n	800fb0c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	015a      	lsls	r2, r3, #5
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	4413      	add	r3, r2
 800facc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fad0:	691a      	ldr	r2, [r3, #16]
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fada:	69b9      	ldr	r1, [r7, #24]
 800fadc:	0148      	lsls	r0, r1, #5
 800fade:	69f9      	ldr	r1, [r7, #28]
 800fae0:	4401      	add	r1, r0
 800fae2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fae6:	4313      	orrs	r3, r2
 800fae8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	015a      	lsls	r2, r3, #5
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	4413      	add	r3, r2
 800faf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	69ba      	ldr	r2, [r7, #24]
 800fafa:	0151      	lsls	r1, r2, #5
 800fafc:	69fa      	ldr	r2, [r7, #28]
 800fafe:	440a      	add	r2, r1
 800fb00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fb04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb08:	6113      	str	r3, [r2, #16]
 800fb0a:	e037      	b.n	800fb7c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	691a      	ldr	r2, [r3, #16]
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	4413      	add	r3, r2
 800fb16:	1e5a      	subs	r2, r3, #1
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	689b      	ldr	r3, [r3, #8]
 800fb1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	689b      	ldr	r3, [r3, #8]
 800fb26:	8afa      	ldrh	r2, [r7, #22]
 800fb28:	fb03 f202 	mul.w	r2, r3, r2
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fb30:	69bb      	ldr	r3, [r7, #24]
 800fb32:	015a      	lsls	r2, r3, #5
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	4413      	add	r3, r2
 800fb38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb3c:	691a      	ldr	r2, [r3, #16]
 800fb3e:	8afb      	ldrh	r3, [r7, #22]
 800fb40:	04d9      	lsls	r1, r3, #19
 800fb42:	4b38      	ldr	r3, [pc, #224]	@ (800fc24 <USB_EPStartXfer+0x538>)
 800fb44:	400b      	ands	r3, r1
 800fb46:	69b9      	ldr	r1, [r7, #24]
 800fb48:	0148      	lsls	r0, r1, #5
 800fb4a:	69f9      	ldr	r1, [r7, #28]
 800fb4c:	4401      	add	r1, r0
 800fb4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fb52:	4313      	orrs	r3, r2
 800fb54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	015a      	lsls	r2, r3, #5
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb62:	691a      	ldr	r2, [r3, #16]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	6a1b      	ldr	r3, [r3, #32]
 800fb68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb6c:	69b9      	ldr	r1, [r7, #24]
 800fb6e:	0148      	lsls	r0, r1, #5
 800fb70:	69f9      	ldr	r1, [r7, #28]
 800fb72:	4401      	add	r1, r0
 800fb74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fb78:	4313      	orrs	r3, r2
 800fb7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d10d      	bne.n	800fb9e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d009      	beq.n	800fb9e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	68d9      	ldr	r1, [r3, #12]
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	015a      	lsls	r2, r3, #5
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb9a:	460a      	mov	r2, r1
 800fb9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	791b      	ldrb	r3, [r3, #4]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d128      	bne.n	800fbf8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d110      	bne.n	800fbd8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fbb6:	69bb      	ldr	r3, [r7, #24]
 800fbb8:	015a      	lsls	r2, r3, #5
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	69ba      	ldr	r2, [r7, #24]
 800fbc6:	0151      	lsls	r1, r2, #5
 800fbc8:	69fa      	ldr	r2, [r7, #28]
 800fbca:	440a      	add	r2, r1
 800fbcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fbd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fbd4:	6013      	str	r3, [r2, #0]
 800fbd6:	e00f      	b.n	800fbf8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	015a      	lsls	r2, r3, #5
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	4413      	add	r3, r2
 800fbe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	69ba      	ldr	r2, [r7, #24]
 800fbe8:	0151      	lsls	r1, r2, #5
 800fbea:	69fa      	ldr	r2, [r7, #28]
 800fbec:	440a      	add	r2, r1
 800fbee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fbf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fbf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	015a      	lsls	r2, r3, #5
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	4413      	add	r3, r2
 800fc00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	69ba      	ldr	r2, [r7, #24]
 800fc08:	0151      	lsls	r1, r2, #5
 800fc0a:	69fa      	ldr	r2, [r7, #28]
 800fc0c:	440a      	add	r2, r1
 800fc0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fc16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3720      	adds	r7, #32
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	1ff80000 	.word	0x1ff80000

0800fc28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fc32:	2300      	movs	r3, #0
 800fc34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	785b      	ldrb	r3, [r3, #1]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d14a      	bne.n	800fcdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	015a      	lsls	r2, r3, #5
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	4413      	add	r3, r2
 800fc50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fc5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc5e:	f040 8086 	bne.w	800fd6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	015a      	lsls	r2, r3, #5
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	683a      	ldr	r2, [r7, #0]
 800fc74:	7812      	ldrb	r2, [r2, #0]
 800fc76:	0151      	lsls	r1, r2, #5
 800fc78:	693a      	ldr	r2, [r7, #16]
 800fc7a:	440a      	add	r2, r1
 800fc7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fc84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	015a      	lsls	r2, r3, #5
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	4413      	add	r3, r2
 800fc90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	7812      	ldrb	r2, [r2, #0]
 800fc9a:	0151      	lsls	r1, r2, #5
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	440a      	add	r2, r1
 800fca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3301      	adds	r3, #1
 800fcae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d902      	bls.n	800fcc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800fcba:	2301      	movs	r3, #1
 800fcbc:	75fb      	strb	r3, [r7, #23]
          break;
 800fcbe:	e056      	b.n	800fd6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	015a      	lsls	r2, r3, #5
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	4413      	add	r3, r2
 800fcca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fcd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fcd8:	d0e7      	beq.n	800fcaa <USB_EPStopXfer+0x82>
 800fcda:	e048      	b.n	800fd6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	015a      	lsls	r2, r3, #5
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	4413      	add	r3, r2
 800fce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fcf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fcf4:	d13b      	bne.n	800fd6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	015a      	lsls	r2, r3, #5
 800fcfc:	693b      	ldr	r3, [r7, #16]
 800fcfe:	4413      	add	r3, r2
 800fd00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	7812      	ldrb	r2, [r2, #0]
 800fd0a:	0151      	lsls	r1, r2, #5
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	440a      	add	r2, r1
 800fd10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fd18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	015a      	lsls	r2, r3, #5
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	4413      	add	r3, r2
 800fd24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	683a      	ldr	r2, [r7, #0]
 800fd2c:	7812      	ldrb	r2, [r2, #0]
 800fd2e:	0151      	lsls	r1, r2, #5
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	440a      	add	r2, r1
 800fd34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	3301      	adds	r3, #1
 800fd42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d902      	bls.n	800fd54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	75fb      	strb	r3, [r7, #23]
          break;
 800fd52:	e00c      	b.n	800fd6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	015a      	lsls	r2, r3, #5
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd6c:	d0e7      	beq.n	800fd3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	371c      	adds	r7, #28
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b089      	sub	sp, #36	@ 0x24
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	4611      	mov	r1, r2
 800fd88:	461a      	mov	r2, r3
 800fd8a:	460b      	mov	r3, r1
 800fd8c:	71fb      	strb	r3, [r7, #7]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fd9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d123      	bne.n	800fdea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fda2:	88bb      	ldrh	r3, [r7, #4]
 800fda4:	3303      	adds	r3, #3
 800fda6:	089b      	lsrs	r3, r3, #2
 800fda8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fdaa:	2300      	movs	r3, #0
 800fdac:	61bb      	str	r3, [r7, #24]
 800fdae:	e018      	b.n	800fde2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fdb0:	79fb      	ldrb	r3, [r7, #7]
 800fdb2:	031a      	lsls	r2, r3, #12
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	3301      	adds	r3, #1
 800fdc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	3301      	adds	r3, #1
 800fdda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	3301      	adds	r3, #1
 800fde0:	61bb      	str	r3, [r7, #24]
 800fde2:	69ba      	ldr	r2, [r7, #24]
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d3e2      	bcc.n	800fdb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3724      	adds	r7, #36	@ 0x24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr

0800fdf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b08b      	sub	sp, #44	@ 0x2c
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	4613      	mov	r3, r2
 800fe04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fe0e:	88fb      	ldrh	r3, [r7, #6]
 800fe10:	089b      	lsrs	r3, r3, #2
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fe16:	88fb      	ldrh	r3, [r7, #6]
 800fe18:	f003 0303 	and.w	r3, r3, #3
 800fe1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fe1e:	2300      	movs	r3, #0
 800fe20:	623b      	str	r3, [r7, #32]
 800fe22:	e014      	b.n	800fe4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2e:	601a      	str	r2, [r3, #0]
    pDest++;
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	3301      	adds	r3, #1
 800fe34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fe36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe38:	3301      	adds	r3, #1
 800fe3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3e:	3301      	adds	r3, #1
 800fe40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fe42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe44:	3301      	adds	r3, #1
 800fe46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800fe48:	6a3b      	ldr	r3, [r7, #32]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	623b      	str	r3, [r7, #32]
 800fe4e:	6a3a      	ldr	r2, [r7, #32]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d3e6      	bcc.n	800fe24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fe56:	8bfb      	ldrh	r3, [r7, #30]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d01e      	beq.n	800fe9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fe60:	69bb      	ldr	r3, [r7, #24]
 800fe62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe66:	461a      	mov	r2, r3
 800fe68:	f107 0310 	add.w	r3, r7, #16
 800fe6c:	6812      	ldr	r2, [r2, #0]
 800fe6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fe70:	693a      	ldr	r2, [r7, #16]
 800fe72:	6a3b      	ldr	r3, [r7, #32]
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	00db      	lsls	r3, r3, #3
 800fe78:	fa22 f303 	lsr.w	r3, r2, r3
 800fe7c:	b2da      	uxtb	r2, r3
 800fe7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe80:	701a      	strb	r2, [r3, #0]
      i++;
 800fe82:	6a3b      	ldr	r3, [r7, #32]
 800fe84:	3301      	adds	r3, #1
 800fe86:	623b      	str	r3, [r7, #32]
      pDest++;
 800fe88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800fe8e:	8bfb      	ldrh	r3, [r7, #30]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fe94:	8bfb      	ldrh	r3, [r7, #30]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d1ea      	bne.n	800fe70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	372c      	adds	r7, #44	@ 0x2c
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	785b      	ldrb	r3, [r3, #1]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d12c      	bne.n	800ff1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	015a      	lsls	r2, r3, #5
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	4413      	add	r3, r2
 800fecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	db12      	blt.n	800fefc <USB_EPSetStall+0x54>
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00f      	beq.n	800fefc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	015a      	lsls	r2, r3, #5
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	4413      	add	r3, r2
 800fee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	0151      	lsls	r1, r2, #5
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	440a      	add	r2, r1
 800fef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fefa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	015a      	lsls	r2, r3, #5
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4413      	add	r3, r2
 800ff04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	0151      	lsls	r1, r2, #5
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	440a      	add	r2, r1
 800ff12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	e02b      	b.n	800ff76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	015a      	lsls	r2, r3, #5
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	4413      	add	r3, r2
 800ff26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	db12      	blt.n	800ff56 <USB_EPSetStall+0xae>
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00f      	beq.n	800ff56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	015a      	lsls	r2, r3, #5
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	0151      	lsls	r1, r2, #5
 800ff48:	68fa      	ldr	r2, [r7, #12]
 800ff4a:	440a      	add	r2, r1
 800ff4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ff54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	015a      	lsls	r2, r3, #5
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	0151      	lsls	r1, r2, #5
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	440a      	add	r2, r1
 800ff6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ff74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3714      	adds	r7, #20
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr

0800ff84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b085      	sub	sp, #20
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	785b      	ldrb	r3, [r3, #1]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d128      	bne.n	800fff2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	015a      	lsls	r2, r3, #5
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	0151      	lsls	r1, r2, #5
 800ffb2:	68fa      	ldr	r2, [r7, #12]
 800ffb4:	440a      	add	r2, r1
 800ffb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ffbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	791b      	ldrb	r3, [r3, #4]
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	d003      	beq.n	800ffd0 <USB_EPClearStall+0x4c>
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	791b      	ldrb	r3, [r3, #4]
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d138      	bne.n	8010042 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	015a      	lsls	r2, r3, #5
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68ba      	ldr	r2, [r7, #8]
 800ffe0:	0151      	lsls	r1, r2, #5
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	440a      	add	r2, r1
 800ffe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ffee:	6013      	str	r3, [r2, #0]
 800fff0:	e027      	b.n	8010042 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	015a      	lsls	r2, r3, #5
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	4413      	add	r3, r2
 800fffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	68ba      	ldr	r2, [r7, #8]
 8010002:	0151      	lsls	r1, r2, #5
 8010004:	68fa      	ldr	r2, [r7, #12]
 8010006:	440a      	add	r2, r1
 8010008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801000c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010010:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	791b      	ldrb	r3, [r3, #4]
 8010016:	2b03      	cmp	r3, #3
 8010018:	d003      	beq.n	8010022 <USB_EPClearStall+0x9e>
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	791b      	ldrb	r3, [r3, #4]
 801001e:	2b02      	cmp	r3, #2
 8010020:	d10f      	bne.n	8010042 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	015a      	lsls	r2, r3, #5
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	4413      	add	r3, r2
 801002a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68ba      	ldr	r2, [r7, #8]
 8010032:	0151      	lsls	r1, r2, #5
 8010034:	68fa      	ldr	r2, [r7, #12]
 8010036:	440a      	add	r2, r1
 8010038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801003c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010040:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	460b      	mov	r3, r1
 801005a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68fa      	ldr	r2, [r7, #12]
 801006a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801006e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010072:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801007a:	681a      	ldr	r2, [r3, #0]
 801007c:	78fb      	ldrb	r3, [r7, #3]
 801007e:	011b      	lsls	r3, r3, #4
 8010080:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010084:	68f9      	ldr	r1, [r7, #12]
 8010086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801008a:	4313      	orrs	r3, r2
 801008c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801008e:	2300      	movs	r3, #0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3714      	adds	r7, #20
 8010094:	46bd      	mov	sp, r7
 8010096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009a:	4770      	bx	lr

0801009c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80100b6:	f023 0303 	bic.w	r3, r3, #3
 80100ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	68fa      	ldr	r2, [r7, #12]
 80100c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80100ca:	f023 0302 	bic.w	r3, r3, #2
 80100ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80100d0:	2300      	movs	r3, #0
}
 80100d2:	4618      	mov	r0, r3
 80100d4:	3714      	adds	r7, #20
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr

080100de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80100de:	b480      	push	{r7}
 80100e0:	b085      	sub	sp, #20
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80100f8:	f023 0303 	bic.w	r3, r3, #3
 80100fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801010c:	f043 0302 	orr.w	r3, r3, #2
 8010110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3714      	adds	r7, #20
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010120:	b480      	push	{r7}
 8010122:	b085      	sub	sp, #20
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	695b      	ldr	r3, [r3, #20]
 801012c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	699b      	ldr	r3, [r3, #24]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	4013      	ands	r3, r2
 8010136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010138:	68fb      	ldr	r3, [r7, #12]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3714      	adds	r7, #20
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr

08010146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010146:	b480      	push	{r7}
 8010148:	b085      	sub	sp, #20
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010158:	699b      	ldr	r3, [r3, #24]
 801015a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010162:	69db      	ldr	r3, [r3, #28]
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	4013      	ands	r3, r2
 8010168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	0c1b      	lsrs	r3, r3, #16
}
 801016e:	4618      	mov	r0, r3
 8010170:	3714      	adds	r7, #20
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr

0801017a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801017a:	b480      	push	{r7}
 801017c:	b085      	sub	sp, #20
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801018c:	699b      	ldr	r3, [r3, #24]
 801018e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010196:	69db      	ldr	r3, [r3, #28]
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	4013      	ands	r3, r2
 801019c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	b29b      	uxth	r3, r3
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3714      	adds	r7, #20
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80101ae:	b480      	push	{r7}
 80101b0:	b085      	sub	sp, #20
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	460b      	mov	r3, r1
 80101b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80101be:	78fb      	ldrb	r3, [r7, #3]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	68ba      	ldr	r2, [r7, #8]
 80101d8:	4013      	ands	r3, r2
 80101da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80101dc:	68bb      	ldr	r3, [r7, #8]
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b087      	sub	sp, #28
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	460b      	mov	r3, r1
 80101f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010200:	691b      	ldr	r3, [r3, #16]
 8010202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801020a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801020c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801020e:	78fb      	ldrb	r3, [r7, #3]
 8010210:	f003 030f 	and.w	r3, r3, #15
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	fa22 f303 	lsr.w	r3, r2, r3
 801021a:	01db      	lsls	r3, r3, #7
 801021c:	b2db      	uxtb	r3, r3
 801021e:	693a      	ldr	r2, [r7, #16]
 8010220:	4313      	orrs	r3, r2
 8010222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010224:	78fb      	ldrb	r3, [r7, #3]
 8010226:	015a      	lsls	r2, r3, #5
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	4413      	add	r3, r2
 801022c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	693a      	ldr	r2, [r7, #16]
 8010234:	4013      	ands	r3, r2
 8010236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010238:	68bb      	ldr	r3, [r7, #8]
}
 801023a:	4618      	mov	r0, r3
 801023c:	371c      	adds	r7, #28
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr

08010246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010246:	b480      	push	{r7}
 8010248:	b083      	sub	sp, #12
 801024a:	af00      	add	r7, sp, #0
 801024c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	695b      	ldr	r3, [r3, #20]
 8010252:	f003 0301 	and.w	r3, r3, #1
}
 8010256:	4618      	mov	r0, r3
 8010258:	370c      	adds	r7, #12
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr

08010262 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010262:	b480      	push	{r7}
 8010264:	b085      	sub	sp, #20
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801027c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8010280:	f023 0307 	bic.w	r3, r3, #7
 8010284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b087      	sub	sp, #28
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	460b      	mov	r3, r1
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	333c      	adds	r3, #60	@ 0x3c
 80102be:	3304      	adds	r3, #4
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	4a26      	ldr	r2, [pc, #152]	@ (8010360 <USB_EP0_OutStart+0xb8>)
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d90a      	bls.n	80102e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80102d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80102dc:	d101      	bne.n	80102e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	e037      	b.n	8010352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102e8:	461a      	mov	r2, r3
 80102ea:	2300      	movs	r3, #0
 80102ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80102f4:	691b      	ldr	r3, [r3, #16]
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80102fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010308:	691b      	ldr	r3, [r3, #16]
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010310:	f043 0318 	orr.w	r3, r3, #24
 8010314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801031c:	691b      	ldr	r3, [r3, #16]
 801031e:	697a      	ldr	r2, [r7, #20]
 8010320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010324:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801032a:	7afb      	ldrb	r3, [r7, #11]
 801032c:	2b01      	cmp	r3, #1
 801032e:	d10f      	bne.n	8010350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010336:	461a      	mov	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	697a      	ldr	r2, [r7, #20]
 8010346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801034a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801034e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010350:	2300      	movs	r3, #0
}
 8010352:	4618      	mov	r0, r3
 8010354:	371c      	adds	r7, #28
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr
 801035e:	bf00      	nop
 8010360:	4f54300a 	.word	0x4f54300a

08010364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801036c:	2300      	movs	r3, #0
 801036e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	3301      	adds	r3, #1
 8010374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801037c:	d901      	bls.n	8010382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801037e:	2303      	movs	r3, #3
 8010380:	e01b      	b.n	80103ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	daf2      	bge.n	8010370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801038a:	2300      	movs	r3, #0
 801038c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	f043 0201 	orr.w	r2, r3, #1
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	3301      	adds	r3, #1
 801039e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80103a6:	d901      	bls.n	80103ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80103a8:	2303      	movs	r3, #3
 80103aa:	e006      	b.n	80103ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	691b      	ldr	r3, [r3, #16]
 80103b0:	f003 0301 	and.w	r3, r3, #1
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d0f0      	beq.n	801039a <USB_CoreReset+0x36>

  return HAL_OK;
 80103b8:	2300      	movs	r3, #0
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
	...

080103c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80103d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80103d8:	f002 fd00 	bl	8012ddc <USBD_static_malloc>
 80103dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d109      	bne.n	80103f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	32b0      	adds	r2, #176	@ 0xb0
 80103ee:	2100      	movs	r1, #0
 80103f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80103f4:	2302      	movs	r3, #2
 80103f6:	e0d4      	b.n	80105a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80103f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80103fc:	2100      	movs	r1, #0
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f002 ff37 	bl	8013272 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	32b0      	adds	r2, #176	@ 0xb0
 801040e:	68f9      	ldr	r1, [r7, #12]
 8010410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	32b0      	adds	r2, #176	@ 0xb0
 801041e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7c1b      	ldrb	r3, [r3, #16]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d138      	bne.n	80104a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010430:	4b5e      	ldr	r3, [pc, #376]	@ (80105ac <USBD_CDC_Init+0x1e4>)
 8010432:	7819      	ldrb	r1, [r3, #0]
 8010434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010438:	2202      	movs	r2, #2
 801043a:	6878      	ldr	r0, [r7, #4]
 801043c:	f002 fbab 	bl	8012b96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010440:	4b5a      	ldr	r3, [pc, #360]	@ (80105ac <USBD_CDC_Init+0x1e4>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	f003 020f 	and.w	r2, r3, #15
 8010448:	6879      	ldr	r1, [r7, #4]
 801044a:	4613      	mov	r3, r2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	4413      	add	r3, r2
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	440b      	add	r3, r1
 8010454:	3324      	adds	r3, #36	@ 0x24
 8010456:	2201      	movs	r2, #1
 8010458:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801045a:	4b55      	ldr	r3, [pc, #340]	@ (80105b0 <USBD_CDC_Init+0x1e8>)
 801045c:	7819      	ldrb	r1, [r3, #0]
 801045e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010462:	2202      	movs	r2, #2
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f002 fb96 	bl	8012b96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801046a:	4b51      	ldr	r3, [pc, #324]	@ (80105b0 <USBD_CDC_Init+0x1e8>)
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	f003 020f 	and.w	r2, r3, #15
 8010472:	6879      	ldr	r1, [r7, #4]
 8010474:	4613      	mov	r3, r2
 8010476:	009b      	lsls	r3, r3, #2
 8010478:	4413      	add	r3, r2
 801047a:	009b      	lsls	r3, r3, #2
 801047c:	440b      	add	r3, r1
 801047e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010482:	2201      	movs	r2, #1
 8010484:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010486:	4b4b      	ldr	r3, [pc, #300]	@ (80105b4 <USBD_CDC_Init+0x1ec>)
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	f003 020f 	and.w	r2, r3, #15
 801048e:	6879      	ldr	r1, [r7, #4]
 8010490:	4613      	mov	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	4413      	add	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	440b      	add	r3, r1
 801049a:	3326      	adds	r3, #38	@ 0x26
 801049c:	2210      	movs	r2, #16
 801049e:	801a      	strh	r2, [r3, #0]
 80104a0:	e035      	b.n	801050e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80104a2:	4b42      	ldr	r3, [pc, #264]	@ (80105ac <USBD_CDC_Init+0x1e4>)
 80104a4:	7819      	ldrb	r1, [r3, #0]
 80104a6:	2340      	movs	r3, #64	@ 0x40
 80104a8:	2202      	movs	r2, #2
 80104aa:	6878      	ldr	r0, [r7, #4]
 80104ac:	f002 fb73 	bl	8012b96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80104b0:	4b3e      	ldr	r3, [pc, #248]	@ (80105ac <USBD_CDC_Init+0x1e4>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	f003 020f 	and.w	r2, r3, #15
 80104b8:	6879      	ldr	r1, [r7, #4]
 80104ba:	4613      	mov	r3, r2
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	4413      	add	r3, r2
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	440b      	add	r3, r1
 80104c4:	3324      	adds	r3, #36	@ 0x24
 80104c6:	2201      	movs	r2, #1
 80104c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80104ca:	4b39      	ldr	r3, [pc, #228]	@ (80105b0 <USBD_CDC_Init+0x1e8>)
 80104cc:	7819      	ldrb	r1, [r3, #0]
 80104ce:	2340      	movs	r3, #64	@ 0x40
 80104d0:	2202      	movs	r2, #2
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f002 fb5f 	bl	8012b96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80104d8:	4b35      	ldr	r3, [pc, #212]	@ (80105b0 <USBD_CDC_Init+0x1e8>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	f003 020f 	and.w	r2, r3, #15
 80104e0:	6879      	ldr	r1, [r7, #4]
 80104e2:	4613      	mov	r3, r2
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4413      	add	r3, r2
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	440b      	add	r3, r1
 80104ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80104f0:	2201      	movs	r2, #1
 80104f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80104f4:	4b2f      	ldr	r3, [pc, #188]	@ (80105b4 <USBD_CDC_Init+0x1ec>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f003 020f 	and.w	r2, r3, #15
 80104fc:	6879      	ldr	r1, [r7, #4]
 80104fe:	4613      	mov	r3, r2
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	4413      	add	r3, r2
 8010504:	009b      	lsls	r3, r3, #2
 8010506:	440b      	add	r3, r1
 8010508:	3326      	adds	r3, #38	@ 0x26
 801050a:	2210      	movs	r2, #16
 801050c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801050e:	4b29      	ldr	r3, [pc, #164]	@ (80105b4 <USBD_CDC_Init+0x1ec>)
 8010510:	7819      	ldrb	r1, [r3, #0]
 8010512:	2308      	movs	r3, #8
 8010514:	2203      	movs	r2, #3
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f002 fb3d 	bl	8012b96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801051c:	4b25      	ldr	r3, [pc, #148]	@ (80105b4 <USBD_CDC_Init+0x1ec>)
 801051e:	781b      	ldrb	r3, [r3, #0]
 8010520:	f003 020f 	and.w	r2, r3, #15
 8010524:	6879      	ldr	r1, [r7, #4]
 8010526:	4613      	mov	r3, r2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4413      	add	r3, r2
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	440b      	add	r3, r1
 8010530:	3324      	adds	r3, #36	@ 0x24
 8010532:	2201      	movs	r2, #1
 8010534:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2200      	movs	r2, #0
 801053a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	33b0      	adds	r3, #176	@ 0xb0
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	4413      	add	r3, r2
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	2200      	movs	r2, #0
 8010556:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2200      	movs	r2, #0
 801055e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010568:	2b00      	cmp	r3, #0
 801056a:	d101      	bne.n	8010570 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801056c:	2302      	movs	r3, #2
 801056e:	e018      	b.n	80105a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	7c1b      	ldrb	r3, [r3, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d10a      	bne.n	801058e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010578:	4b0d      	ldr	r3, [pc, #52]	@ (80105b0 <USBD_CDC_Init+0x1e8>)
 801057a:	7819      	ldrb	r1, [r3, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f002 fbf4 	bl	8012d74 <USBD_LL_PrepareReceive>
 801058c:	e008      	b.n	80105a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801058e:	4b08      	ldr	r3, [pc, #32]	@ (80105b0 <USBD_CDC_Init+0x1e8>)
 8010590:	7819      	ldrb	r1, [r3, #0]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010598:	2340      	movs	r3, #64	@ 0x40
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f002 fbea 	bl	8012d74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	200000a3 	.word	0x200000a3
 80105b0:	200000a4 	.word	0x200000a4
 80105b4:	200000a5 	.word	0x200000a5

080105b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	460b      	mov	r3, r1
 80105c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80105c4:	4b3a      	ldr	r3, [pc, #232]	@ (80106b0 <USBD_CDC_DeInit+0xf8>)
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	4619      	mov	r1, r3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f002 fb09 	bl	8012be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80105d0:	4b37      	ldr	r3, [pc, #220]	@ (80106b0 <USBD_CDC_DeInit+0xf8>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	f003 020f 	and.w	r2, r3, #15
 80105d8:	6879      	ldr	r1, [r7, #4]
 80105da:	4613      	mov	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	4413      	add	r3, r2
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	440b      	add	r3, r1
 80105e4:	3324      	adds	r3, #36	@ 0x24
 80105e6:	2200      	movs	r2, #0
 80105e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80105ea:	4b32      	ldr	r3, [pc, #200]	@ (80106b4 <USBD_CDC_DeInit+0xfc>)
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	4619      	mov	r1, r3
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f002 faf6 	bl	8012be2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80105f6:	4b2f      	ldr	r3, [pc, #188]	@ (80106b4 <USBD_CDC_DeInit+0xfc>)
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	f003 020f 	and.w	r2, r3, #15
 80105fe:	6879      	ldr	r1, [r7, #4]
 8010600:	4613      	mov	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4413      	add	r3, r2
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	440b      	add	r3, r1
 801060a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801060e:	2200      	movs	r2, #0
 8010610:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010612:	4b29      	ldr	r3, [pc, #164]	@ (80106b8 <USBD_CDC_DeInit+0x100>)
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	4619      	mov	r1, r3
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f002 fae2 	bl	8012be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801061e:	4b26      	ldr	r3, [pc, #152]	@ (80106b8 <USBD_CDC_DeInit+0x100>)
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	f003 020f 	and.w	r2, r3, #15
 8010626:	6879      	ldr	r1, [r7, #4]
 8010628:	4613      	mov	r3, r2
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4413      	add	r3, r2
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	440b      	add	r3, r1
 8010632:	3324      	adds	r3, #36	@ 0x24
 8010634:	2200      	movs	r2, #0
 8010636:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010638:	4b1f      	ldr	r3, [pc, #124]	@ (80106b8 <USBD_CDC_DeInit+0x100>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f003 020f 	and.w	r2, r3, #15
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	4613      	mov	r3, r2
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	4413      	add	r3, r2
 8010648:	009b      	lsls	r3, r3, #2
 801064a:	440b      	add	r3, r1
 801064c:	3326      	adds	r3, #38	@ 0x26
 801064e:	2200      	movs	r2, #0
 8010650:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	32b0      	adds	r2, #176	@ 0xb0
 801065c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d01f      	beq.n	80106a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801066a:	687a      	ldr	r2, [r7, #4]
 801066c:	33b0      	adds	r3, #176	@ 0xb0
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	4413      	add	r3, r2
 8010672:	685b      	ldr	r3, [r3, #4]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	32b0      	adds	r2, #176	@ 0xb0
 8010682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010686:	4618      	mov	r0, r3
 8010688:	f002 fbb6 	bl	8012df8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	32b0      	adds	r2, #176	@ 0xb0
 8010696:	2100      	movs	r1, #0
 8010698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	200000a3 	.word	0x200000a3
 80106b4:	200000a4 	.word	0x200000a4
 80106b8:	200000a5 	.word	0x200000a5

080106bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b086      	sub	sp, #24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	32b0      	adds	r2, #176	@ 0xb0
 80106d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80106d6:	2300      	movs	r3, #0
 80106d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80106da:	2300      	movs	r3, #0
 80106dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80106de:	2300      	movs	r3, #0
 80106e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d101      	bne.n	80106ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80106e8:	2303      	movs	r3, #3
 80106ea:	e0bf      	b.n	801086c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d050      	beq.n	801079a <USBD_CDC_Setup+0xde>
 80106f8:	2b20      	cmp	r3, #32
 80106fa:	f040 80af 	bne.w	801085c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	88db      	ldrh	r3, [r3, #6]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d03a      	beq.n	801077c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	b25b      	sxtb	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	da1b      	bge.n	8010748 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	33b0      	adds	r3, #176	@ 0xb0
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	689b      	ldr	r3, [r3, #8]
 8010722:	683a      	ldr	r2, [r7, #0]
 8010724:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010726:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010728:	683a      	ldr	r2, [r7, #0]
 801072a:	88d2      	ldrh	r2, [r2, #6]
 801072c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	88db      	ldrh	r3, [r3, #6]
 8010732:	2b07      	cmp	r3, #7
 8010734:	bf28      	it	cs
 8010736:	2307      	movcs	r3, #7
 8010738:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	89fa      	ldrh	r2, [r7, #14]
 801073e:	4619      	mov	r1, r3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f001 fd93 	bl	801226c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010746:	e090      	b.n	801086a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	785a      	ldrb	r2, [r3, #1]
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	88db      	ldrh	r3, [r3, #6]
 8010756:	2b3f      	cmp	r3, #63	@ 0x3f
 8010758:	d803      	bhi.n	8010762 <USBD_CDC_Setup+0xa6>
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	88db      	ldrh	r3, [r3, #6]
 801075e:	b2da      	uxtb	r2, r3
 8010760:	e000      	b.n	8010764 <USBD_CDC_Setup+0xa8>
 8010762:	2240      	movs	r2, #64	@ 0x40
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801076a:	6939      	ldr	r1, [r7, #16]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010772:	461a      	mov	r2, r3
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f001 fda5 	bl	80122c4 <USBD_CtlPrepareRx>
      break;
 801077a:	e076      	b.n	801086a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	33b0      	adds	r3, #176	@ 0xb0
 8010786:	009b      	lsls	r3, r3, #2
 8010788:	4413      	add	r3, r2
 801078a:	685b      	ldr	r3, [r3, #4]
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	7850      	ldrb	r0, [r2, #1]
 8010792:	2200      	movs	r2, #0
 8010794:	6839      	ldr	r1, [r7, #0]
 8010796:	4798      	blx	r3
      break;
 8010798:	e067      	b.n	801086a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	785b      	ldrb	r3, [r3, #1]
 801079e:	2b0b      	cmp	r3, #11
 80107a0:	d851      	bhi.n	8010846 <USBD_CDC_Setup+0x18a>
 80107a2:	a201      	add	r2, pc, #4	@ (adr r2, 80107a8 <USBD_CDC_Setup+0xec>)
 80107a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a8:	080107d9 	.word	0x080107d9
 80107ac:	08010855 	.word	0x08010855
 80107b0:	08010847 	.word	0x08010847
 80107b4:	08010847 	.word	0x08010847
 80107b8:	08010847 	.word	0x08010847
 80107bc:	08010847 	.word	0x08010847
 80107c0:	08010847 	.word	0x08010847
 80107c4:	08010847 	.word	0x08010847
 80107c8:	08010847 	.word	0x08010847
 80107cc:	08010847 	.word	0x08010847
 80107d0:	08010803 	.word	0x08010803
 80107d4:	0801082d 	.word	0x0801082d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d107      	bne.n	80107f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80107e4:	f107 030a 	add.w	r3, r7, #10
 80107e8:	2202      	movs	r2, #2
 80107ea:	4619      	mov	r1, r3
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f001 fd3d 	bl	801226c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80107f2:	e032      	b.n	801085a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80107f4:	6839      	ldr	r1, [r7, #0]
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f001 fcbb 	bl	8012172 <USBD_CtlError>
            ret = USBD_FAIL;
 80107fc:	2303      	movs	r3, #3
 80107fe:	75fb      	strb	r3, [r7, #23]
          break;
 8010800:	e02b      	b.n	801085a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010808:	b2db      	uxtb	r3, r3
 801080a:	2b03      	cmp	r3, #3
 801080c:	d107      	bne.n	801081e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801080e:	f107 030d 	add.w	r3, r7, #13
 8010812:	2201      	movs	r2, #1
 8010814:	4619      	mov	r1, r3
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f001 fd28 	bl	801226c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801081c:	e01d      	b.n	801085a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f001 fca6 	bl	8012172 <USBD_CtlError>
            ret = USBD_FAIL;
 8010826:	2303      	movs	r3, #3
 8010828:	75fb      	strb	r3, [r7, #23]
          break;
 801082a:	e016      	b.n	801085a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010832:	b2db      	uxtb	r3, r3
 8010834:	2b03      	cmp	r3, #3
 8010836:	d00f      	beq.n	8010858 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f001 fc99 	bl	8012172 <USBD_CtlError>
            ret = USBD_FAIL;
 8010840:	2303      	movs	r3, #3
 8010842:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010844:	e008      	b.n	8010858 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010846:	6839      	ldr	r1, [r7, #0]
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f001 fc92 	bl	8012172 <USBD_CtlError>
          ret = USBD_FAIL;
 801084e:	2303      	movs	r3, #3
 8010850:	75fb      	strb	r3, [r7, #23]
          break;
 8010852:	e002      	b.n	801085a <USBD_CDC_Setup+0x19e>
          break;
 8010854:	bf00      	nop
 8010856:	e008      	b.n	801086a <USBD_CDC_Setup+0x1ae>
          break;
 8010858:	bf00      	nop
      }
      break;
 801085a:	e006      	b.n	801086a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f001 fc87 	bl	8012172 <USBD_CtlError>
      ret = USBD_FAIL;
 8010864:	2303      	movs	r3, #3
 8010866:	75fb      	strb	r3, [r7, #23]
      break;
 8010868:	bf00      	nop
  }

  return (uint8_t)ret;
 801086a:	7dfb      	ldrb	r3, [r7, #23]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010886:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	32b0      	adds	r2, #176	@ 0xb0
 8010892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d101      	bne.n	801089e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801089a:	2303      	movs	r3, #3
 801089c:	e065      	b.n	801096a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	32b0      	adds	r2, #176	@ 0xb0
 80108a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80108ae:	78fb      	ldrb	r3, [r7, #3]
 80108b0:	f003 020f 	and.w	r2, r3, #15
 80108b4:	6879      	ldr	r1, [r7, #4]
 80108b6:	4613      	mov	r3, r2
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	4413      	add	r3, r2
 80108bc:	009b      	lsls	r3, r3, #2
 80108be:	440b      	add	r3, r1
 80108c0:	3318      	adds	r3, #24
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d02f      	beq.n	8010928 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80108c8:	78fb      	ldrb	r3, [r7, #3]
 80108ca:	f003 020f 	and.w	r2, r3, #15
 80108ce:	6879      	ldr	r1, [r7, #4]
 80108d0:	4613      	mov	r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	4413      	add	r3, r2
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	440b      	add	r3, r1
 80108da:	3318      	adds	r3, #24
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	78fb      	ldrb	r3, [r7, #3]
 80108e0:	f003 010f 	and.w	r1, r3, #15
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	460b      	mov	r3, r1
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	440b      	add	r3, r1
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4403      	add	r3, r0
 80108f0:	331c      	adds	r3, #28
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80108f8:	fb01 f303 	mul.w	r3, r1, r3
 80108fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d112      	bne.n	8010928 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010902:	78fb      	ldrb	r3, [r7, #3]
 8010904:	f003 020f 	and.w	r2, r3, #15
 8010908:	6879      	ldr	r1, [r7, #4]
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	3318      	adds	r3, #24
 8010916:	2200      	movs	r2, #0
 8010918:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801091a:	78f9      	ldrb	r1, [r7, #3]
 801091c:	2300      	movs	r3, #0
 801091e:	2200      	movs	r2, #0
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f002 fa06 	bl	8012d32 <USBD_LL_Transmit>
 8010926:	e01f      	b.n	8010968 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	2200      	movs	r2, #0
 801092c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	33b0      	adds	r3, #176	@ 0xb0
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	691b      	ldr	r3, [r3, #16]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d010      	beq.n	8010968 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801094c:	687a      	ldr	r2, [r7, #4]
 801094e:	33b0      	adds	r3, #176	@ 0xb0
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	4413      	add	r3, r2
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	68ba      	ldr	r2, [r7, #8]
 801095a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801095e:	68ba      	ldr	r2, [r7, #8]
 8010960:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010964:	78fa      	ldrb	r2, [r7, #3]
 8010966:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010968:	2300      	movs	r3, #0
}
 801096a:	4618      	mov	r0, r3
 801096c:	3710      	adds	r7, #16
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b084      	sub	sp, #16
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
 801097a:	460b      	mov	r3, r1
 801097c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	32b0      	adds	r2, #176	@ 0xb0
 8010988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801098c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	32b0      	adds	r2, #176	@ 0xb0
 8010998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d101      	bne.n	80109a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80109a0:	2303      	movs	r3, #3
 80109a2:	e01a      	b.n	80109da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80109a4:	78fb      	ldrb	r3, [r7, #3]
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f002 fa04 	bl	8012db6 <USBD_LL_GetRxDataSize>
 80109ae:	4602      	mov	r2, r0
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	33b0      	adds	r3, #176	@ 0xb0
 80109c0:	009b      	lsls	r3, r3, #2
 80109c2:	4413      	add	r3, r2
 80109c4:	685b      	ldr	r3, [r3, #4]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80109d4:	4611      	mov	r1, r2
 80109d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b084      	sub	sp, #16
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	32b0      	adds	r2, #176	@ 0xb0
 80109f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d101      	bne.n	8010a04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010a00:	2303      	movs	r3, #3
 8010a02:	e024      	b.n	8010a4e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a0a:	687a      	ldr	r2, [r7, #4]
 8010a0c:	33b0      	adds	r3, #176	@ 0xb0
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d019      	beq.n	8010a4c <USBD_CDC_EP0_RxReady+0x6a>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010a1e:	2bff      	cmp	r3, #255	@ 0xff
 8010a20:	d014      	beq.n	8010a4c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	33b0      	adds	r3, #176	@ 0xb0
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010a3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010a42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	22ff      	movs	r2, #255	@ 0xff
 8010a48:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3710      	adds	r7, #16
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
	...

08010a58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b086      	sub	sp, #24
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010a60:	2182      	movs	r1, #130	@ 0x82
 8010a62:	4818      	ldr	r0, [pc, #96]	@ (8010ac4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010a64:	f000 fd4f 	bl	8011506 <USBD_GetEpDesc>
 8010a68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010a6a:	2101      	movs	r1, #1
 8010a6c:	4815      	ldr	r0, [pc, #84]	@ (8010ac4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010a6e:	f000 fd4a 	bl	8011506 <USBD_GetEpDesc>
 8010a72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010a74:	2181      	movs	r1, #129	@ 0x81
 8010a76:	4813      	ldr	r0, [pc, #76]	@ (8010ac4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010a78:	f000 fd45 	bl	8011506 <USBD_GetEpDesc>
 8010a7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d002      	beq.n	8010a8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	2210      	movs	r2, #16
 8010a88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	2200      	movs	r2, #0
 8010a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010a98:	711a      	strb	r2, [r3, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d006      	beq.n	8010ab2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2200      	movs	r2, #0
 8010aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010aac:	711a      	strb	r2, [r3, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2243      	movs	r2, #67	@ 0x43
 8010ab6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010ab8:	4b02      	ldr	r3, [pc, #8]	@ (8010ac4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3718      	adds	r7, #24
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	20000060 	.word	0x20000060

08010ac8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010ad0:	2182      	movs	r1, #130	@ 0x82
 8010ad2:	4818      	ldr	r0, [pc, #96]	@ (8010b34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ad4:	f000 fd17 	bl	8011506 <USBD_GetEpDesc>
 8010ad8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010ada:	2101      	movs	r1, #1
 8010adc:	4815      	ldr	r0, [pc, #84]	@ (8010b34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ade:	f000 fd12 	bl	8011506 <USBD_GetEpDesc>
 8010ae2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010ae4:	2181      	movs	r1, #129	@ 0x81
 8010ae6:	4813      	ldr	r0, [pc, #76]	@ (8010b34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ae8:	f000 fd0d 	bl	8011506 <USBD_GetEpDesc>
 8010aec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d002      	beq.n	8010afa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	2210      	movs	r2, #16
 8010af8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d006      	beq.n	8010b0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	2200      	movs	r2, #0
 8010b04:	711a      	strb	r2, [r3, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f042 0202 	orr.w	r2, r2, #2
 8010b0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d006      	beq.n	8010b22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2200      	movs	r2, #0
 8010b18:	711a      	strb	r2, [r3, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f042 0202 	orr.w	r2, r2, #2
 8010b20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2243      	movs	r2, #67	@ 0x43
 8010b26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010b28:	4b02      	ldr	r3, [pc, #8]	@ (8010b34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	20000060 	.word	0x20000060

08010b38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b086      	sub	sp, #24
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010b40:	2182      	movs	r1, #130	@ 0x82
 8010b42:	4818      	ldr	r0, [pc, #96]	@ (8010ba4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010b44:	f000 fcdf 	bl	8011506 <USBD_GetEpDesc>
 8010b48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010b4a:	2101      	movs	r1, #1
 8010b4c:	4815      	ldr	r0, [pc, #84]	@ (8010ba4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010b4e:	f000 fcda 	bl	8011506 <USBD_GetEpDesc>
 8010b52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010b54:	2181      	movs	r1, #129	@ 0x81
 8010b56:	4813      	ldr	r0, [pc, #76]	@ (8010ba4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010b58:	f000 fcd5 	bl	8011506 <USBD_GetEpDesc>
 8010b5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d002      	beq.n	8010b6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	2210      	movs	r2, #16
 8010b68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d006      	beq.n	8010b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	2200      	movs	r2, #0
 8010b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010b78:	711a      	strb	r2, [r3, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d006      	beq.n	8010b92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2200      	movs	r2, #0
 8010b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010b8c:	711a      	strb	r2, [r3, #4]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2243      	movs	r2, #67	@ 0x43
 8010b96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010b98:	4b02      	ldr	r3, [pc, #8]	@ (8010ba4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3718      	adds	r7, #24
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	20000060 	.word	0x20000060

08010ba8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	220a      	movs	r2, #10
 8010bb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010bb6:	4b03      	ldr	r3, [pc, #12]	@ (8010bc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	370c      	adds	r7, #12
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc2:	4770      	bx	lr
 8010bc4:	2000001c 	.word	0x2000001c

08010bc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d101      	bne.n	8010bdc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	e009      	b.n	8010bf0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	33b0      	adds	r3, #176	@ 0xb0
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	683a      	ldr	r2, [r7, #0]
 8010bec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010bee:	2300      	movs	r3, #0
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	370c      	adds	r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfa:	4770      	bx	lr

08010bfc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	b087      	sub	sp, #28
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	60f8      	str	r0, [r7, #12]
 8010c04:	60b9      	str	r1, [r7, #8]
 8010c06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	32b0      	adds	r2, #176	@ 0xb0
 8010c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d101      	bne.n	8010c22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010c1e:	2303      	movs	r3, #3
 8010c20:	e008      	b.n	8010c34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	687a      	ldr	r2, [r7, #4]
 8010c2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010c32:	2300      	movs	r3, #0
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	371c      	adds	r7, #28
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr

08010c40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	32b0      	adds	r2, #176	@ 0xb0
 8010c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d101      	bne.n	8010c64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010c60:	2303      	movs	r3, #3
 8010c62:	e004      	b.n	8010c6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	683a      	ldr	r2, [r7, #0]
 8010c68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010c6c:	2300      	movs	r3, #0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
	...

08010c7c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	32b0      	adds	r2, #176	@ 0xb0
 8010c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c92:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8010c94:	2301      	movs	r3, #1
 8010c96:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d101      	bne.n	8010ca2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010c9e:	2303      	movs	r3, #3
 8010ca0:	e025      	b.n	8010cee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d11f      	bne.n	8010cec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	2201      	movs	r2, #1
 8010cb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010cb4:	4b10      	ldr	r3, [pc, #64]	@ (8010cf8 <USBD_CDC_TransmitPacket+0x7c>)
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	f003 020f 	and.w	r2, r3, #15
 8010cbc:	68bb      	ldr	r3, [r7, #8]
 8010cbe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	4413      	add	r3, r2
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4403      	add	r3, r0
 8010cce:	3318      	adds	r3, #24
 8010cd0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010cd2:	4b09      	ldr	r3, [pc, #36]	@ (8010cf8 <USBD_CDC_TransmitPacket+0x7c>)
 8010cd4:	7819      	ldrb	r1, [r3, #0]
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f002 f825 	bl	8012d32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	200000a3 	.word	0x200000a3

08010cfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	32b0      	adds	r2, #176	@ 0xb0
 8010d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	32b0      	adds	r2, #176	@ 0xb0
 8010d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d101      	bne.n	8010d2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010d26:	2303      	movs	r3, #3
 8010d28:	e018      	b.n	8010d5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	7c1b      	ldrb	r3, [r3, #16]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10a      	bne.n	8010d48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010d32:	4b0c      	ldr	r3, [pc, #48]	@ (8010d64 <USBD_CDC_ReceivePacket+0x68>)
 8010d34:	7819      	ldrb	r1, [r3, #0]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f002 f817 	bl	8012d74 <USBD_LL_PrepareReceive>
 8010d46:	e008      	b.n	8010d5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010d48:	4b06      	ldr	r3, [pc, #24]	@ (8010d64 <USBD_CDC_ReceivePacket+0x68>)
 8010d4a:	7819      	ldrb	r1, [r3, #0]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010d52:	2340      	movs	r3, #64	@ 0x40
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f002 f80d 	bl	8012d74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010d5a:	2300      	movs	r3, #0
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	200000a4 	.word	0x200000a4

08010d68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b086      	sub	sp, #24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	4613      	mov	r3, r2
 8010d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d101      	bne.n	8010d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010d7c:	2303      	movs	r3, #3
 8010d7e:	e01f      	b.n	8010dc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2200      	movs	r2, #0
 8010d84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d003      	beq.n	8010da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2201      	movs	r2, #1
 8010daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	79fa      	ldrb	r2, [r7, #7]
 8010db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f001 fe87 	bl	8012ac8 <USBD_LL_Init>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3718      	adds	r7, #24
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}

08010dc8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d101      	bne.n	8010de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010ddc:	2303      	movs	r3, #3
 8010dde:	e025      	b.n	8010e2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	683a      	ldr	r2, [r7, #0]
 8010de4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	32ae      	adds	r2, #174	@ 0xae
 8010df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00f      	beq.n	8010e1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	32ae      	adds	r2, #174	@ 0xae
 8010e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e0c:	f107 020e 	add.w	r2, r7, #14
 8010e10:	4610      	mov	r0, r2
 8010e12:	4798      	blx	r3
 8010e14:	4602      	mov	r2, r0
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010e22:	1c5a      	adds	r2, r3, #1
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f001 fe8f 	bl	8012b60 <USBD_LL_Start>
 8010e42:	4603      	mov	r3, r0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b083      	sub	sp, #12
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010e54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e62:	b580      	push	{r7, lr}
 8010e64:	b084      	sub	sp, #16
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d009      	beq.n	8010e90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	78fa      	ldrb	r2, [r7, #3]
 8010e86:	4611      	mov	r1, r2
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	4798      	blx	r3
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3710      	adds	r7, #16
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}

08010e9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010e9a:	b580      	push	{r7, lr}
 8010e9c:	b084      	sub	sp, #16
 8010e9e:	af00      	add	r7, sp, #0
 8010ea0:	6078      	str	r0, [r7, #4]
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	78fa      	ldrb	r2, [r7, #3]
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	4798      	blx	r3
 8010eba:	4603      	mov	r3, r0
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d001      	beq.n	8010ec4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010ec0:	2303      	movs	r3, #3
 8010ec2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}

08010ece <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010ece:	b580      	push	{r7, lr}
 8010ed0:	b084      	sub	sp, #16
 8010ed2:	af00      	add	r7, sp, #0
 8010ed4:	6078      	str	r0, [r7, #4]
 8010ed6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010ede:	6839      	ldr	r1, [r7, #0]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f001 f90c 	bl	80120fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010f02:	f003 031f 	and.w	r3, r3, #31
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d01a      	beq.n	8010f40 <USBD_LL_SetupStage+0x72>
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	d822      	bhi.n	8010f54 <USBD_LL_SetupStage+0x86>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d002      	beq.n	8010f18 <USBD_LL_SetupStage+0x4a>
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d00a      	beq.n	8010f2c <USBD_LL_SetupStage+0x5e>
 8010f16:	e01d      	b.n	8010f54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010f1e:	4619      	mov	r1, r3
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f000 fb63 	bl	80115ec <USBD_StdDevReq>
 8010f26:	4603      	mov	r3, r0
 8010f28:	73fb      	strb	r3, [r7, #15]
      break;
 8010f2a:	e020      	b.n	8010f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010f32:	4619      	mov	r1, r3
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 fbcb 	bl	80116d0 <USBD_StdItfReq>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8010f3e:	e016      	b.n	8010f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010f46:	4619      	mov	r1, r3
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 fc2d 	bl	80117a8 <USBD_StdEPReq>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	73fb      	strb	r3, [r7, #15]
      break;
 8010f52:	e00c      	b.n	8010f6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010f5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	4619      	mov	r1, r3
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f001 fe5c 	bl	8012c20 <USBD_LL_StallEP>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8010f6c:	bf00      	nop
  }

  return ret;
 8010f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f70:	4618      	mov	r0, r3
 8010f72:	3710      	adds	r7, #16
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	460b      	mov	r3, r1
 8010f82:	607a      	str	r2, [r7, #4]
 8010f84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010f86:	2300      	movs	r3, #0
 8010f88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010f8a:	7afb      	ldrb	r3, [r7, #11]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d16e      	bne.n	801106e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010f96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010f9e:	2b03      	cmp	r3, #3
 8010fa0:	f040 8098 	bne.w	80110d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	689a      	ldr	r2, [r3, #8]
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d913      	bls.n	8010fd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	689a      	ldr	r2, [r3, #8]
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	1ad2      	subs	r2, r2, r3
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	68da      	ldr	r2, [r3, #12]
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	bf28      	it	cs
 8010fca:	4613      	movcs	r3, r2
 8010fcc:	461a      	mov	r2, r3
 8010fce:	6879      	ldr	r1, [r7, #4]
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	f001 f994 	bl	80122fe <USBD_CtlContinueRx>
 8010fd6:	e07d      	b.n	80110d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010fde:	f003 031f 	and.w	r3, r3, #31
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	d014      	beq.n	8011010 <USBD_LL_DataOutStage+0x98>
 8010fe6:	2b02      	cmp	r3, #2
 8010fe8:	d81d      	bhi.n	8011026 <USBD_LL_DataOutStage+0xae>
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d002      	beq.n	8010ff4 <USBD_LL_DataOutStage+0x7c>
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d003      	beq.n	8010ffa <USBD_LL_DataOutStage+0x82>
 8010ff2:	e018      	b.n	8011026 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8010ff8:	e018      	b.n	801102c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011000:	b2db      	uxtb	r3, r3
 8011002:	4619      	mov	r1, r3
 8011004:	68f8      	ldr	r0, [r7, #12]
 8011006:	f000 fa64 	bl	80114d2 <USBD_CoreFindIF>
 801100a:	4603      	mov	r3, r0
 801100c:	75bb      	strb	r3, [r7, #22]
            break;
 801100e:	e00d      	b.n	801102c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011016:	b2db      	uxtb	r3, r3
 8011018:	4619      	mov	r1, r3
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f000 fa66 	bl	80114ec <USBD_CoreFindEP>
 8011020:	4603      	mov	r3, r0
 8011022:	75bb      	strb	r3, [r7, #22]
            break;
 8011024:	e002      	b.n	801102c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011026:	2300      	movs	r3, #0
 8011028:	75bb      	strb	r3, [r7, #22]
            break;
 801102a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801102c:	7dbb      	ldrb	r3, [r7, #22]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d119      	bne.n	8011066 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011038:	b2db      	uxtb	r3, r3
 801103a:	2b03      	cmp	r3, #3
 801103c:	d113      	bne.n	8011066 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801103e:	7dba      	ldrb	r2, [r7, #22]
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	32ae      	adds	r2, #174	@ 0xae
 8011044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011048:	691b      	ldr	r3, [r3, #16]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00b      	beq.n	8011066 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801104e:	7dba      	ldrb	r2, [r7, #22]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011056:	7dba      	ldrb	r2, [r7, #22]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	32ae      	adds	r2, #174	@ 0xae
 801105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f001 f95a 	bl	8012320 <USBD_CtlSendStatus>
 801106c:	e032      	b.n	80110d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801106e:	7afb      	ldrb	r3, [r7, #11]
 8011070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011074:	b2db      	uxtb	r3, r3
 8011076:	4619      	mov	r1, r3
 8011078:	68f8      	ldr	r0, [r7, #12]
 801107a:	f000 fa37 	bl	80114ec <USBD_CoreFindEP>
 801107e:	4603      	mov	r3, r0
 8011080:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011082:	7dbb      	ldrb	r3, [r7, #22]
 8011084:	2bff      	cmp	r3, #255	@ 0xff
 8011086:	d025      	beq.n	80110d4 <USBD_LL_DataOutStage+0x15c>
 8011088:	7dbb      	ldrb	r3, [r7, #22]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d122      	bne.n	80110d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011094:	b2db      	uxtb	r3, r3
 8011096:	2b03      	cmp	r3, #3
 8011098:	d117      	bne.n	80110ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801109a:	7dba      	ldrb	r2, [r7, #22]
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	32ae      	adds	r2, #174	@ 0xae
 80110a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d00f      	beq.n	80110ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80110aa:	7dba      	ldrb	r2, [r7, #22]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80110b2:	7dba      	ldrb	r2, [r7, #22]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	32ae      	adds	r2, #174	@ 0xae
 80110b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110bc:	699b      	ldr	r3, [r3, #24]
 80110be:	7afa      	ldrb	r2, [r7, #11]
 80110c0:	4611      	mov	r1, r2
 80110c2:	68f8      	ldr	r0, [r7, #12]
 80110c4:	4798      	blx	r3
 80110c6:	4603      	mov	r3, r0
 80110c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d001      	beq.n	80110d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80110d0:	7dfb      	ldrb	r3, [r7, #23]
 80110d2:	e000      	b.n	80110d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3718      	adds	r7, #24
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b086      	sub	sp, #24
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	60f8      	str	r0, [r7, #12]
 80110e6:	460b      	mov	r3, r1
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80110ec:	7afb      	ldrb	r3, [r7, #11]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d16f      	bne.n	80111d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	3314      	adds	r3, #20
 80110f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80110fe:	2b02      	cmp	r3, #2
 8011100:	d15a      	bne.n	80111b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011102:	693b      	ldr	r3, [r7, #16]
 8011104:	689a      	ldr	r2, [r3, #8]
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	429a      	cmp	r2, r3
 801110c:	d914      	bls.n	8011138 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	689a      	ldr	r2, [r3, #8]
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	1ad2      	subs	r2, r2, r3
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	461a      	mov	r2, r3
 8011122:	6879      	ldr	r1, [r7, #4]
 8011124:	68f8      	ldr	r0, [r7, #12]
 8011126:	f001 f8bc 	bl	80122a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801112a:	2300      	movs	r3, #0
 801112c:	2200      	movs	r2, #0
 801112e:	2100      	movs	r1, #0
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f001 fe1f 	bl	8012d74 <USBD_LL_PrepareReceive>
 8011136:	e03f      	b.n	80111b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	68da      	ldr	r2, [r3, #12]
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	689b      	ldr	r3, [r3, #8]
 8011140:	429a      	cmp	r2, r3
 8011142:	d11c      	bne.n	801117e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	685a      	ldr	r2, [r3, #4]
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801114c:	429a      	cmp	r2, r3
 801114e:	d316      	bcc.n	801117e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	685a      	ldr	r2, [r3, #4]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801115a:	429a      	cmp	r2, r3
 801115c:	d20f      	bcs.n	801117e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801115e:	2200      	movs	r2, #0
 8011160:	2100      	movs	r1, #0
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f001 f89d 	bl	80122a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011170:	2300      	movs	r3, #0
 8011172:	2200      	movs	r2, #0
 8011174:	2100      	movs	r1, #0
 8011176:	68f8      	ldr	r0, [r7, #12]
 8011178:	f001 fdfc 	bl	8012d74 <USBD_LL_PrepareReceive>
 801117c:	e01c      	b.n	80111b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011184:	b2db      	uxtb	r3, r3
 8011186:	2b03      	cmp	r3, #3
 8011188:	d10f      	bne.n	80111aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011190:	68db      	ldr	r3, [r3, #12]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d009      	beq.n	80111aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2200      	movs	r2, #0
 801119a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80111a4:	68db      	ldr	r3, [r3, #12]
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80111aa:	2180      	movs	r1, #128	@ 0x80
 80111ac:	68f8      	ldr	r0, [r7, #12]
 80111ae:	f001 fd37 	bl	8012c20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f001 f8c7 	bl	8012346 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d03a      	beq.n	8011238 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80111c2:	68f8      	ldr	r0, [r7, #12]
 80111c4:	f7ff fe42 	bl	8010e4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80111d0:	e032      	b.n	8011238 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80111d2:	7afb      	ldrb	r3, [r7, #11]
 80111d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	4619      	mov	r1, r3
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f000 f985 	bl	80114ec <USBD_CoreFindEP>
 80111e2:	4603      	mov	r3, r0
 80111e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80111e6:	7dfb      	ldrb	r3, [r7, #23]
 80111e8:	2bff      	cmp	r3, #255	@ 0xff
 80111ea:	d025      	beq.n	8011238 <USBD_LL_DataInStage+0x15a>
 80111ec:	7dfb      	ldrb	r3, [r7, #23]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d122      	bne.n	8011238 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	2b03      	cmp	r3, #3
 80111fc:	d11c      	bne.n	8011238 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80111fe:	7dfa      	ldrb	r2, [r7, #23]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	32ae      	adds	r2, #174	@ 0xae
 8011204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011208:	695b      	ldr	r3, [r3, #20]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d014      	beq.n	8011238 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801120e:	7dfa      	ldrb	r2, [r7, #23]
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011216:	7dfa      	ldrb	r2, [r7, #23]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	32ae      	adds	r2, #174	@ 0xae
 801121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011220:	695b      	ldr	r3, [r3, #20]
 8011222:	7afa      	ldrb	r2, [r7, #11]
 8011224:	4611      	mov	r1, r2
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	4798      	blx	r3
 801122a:	4603      	mov	r3, r0
 801122c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801122e:	7dbb      	ldrb	r3, [r7, #22]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d001      	beq.n	8011238 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011234:	7dbb      	ldrb	r3, [r7, #22]
 8011236:	e000      	b.n	801123a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011238:	2300      	movs	r3, #0
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b084      	sub	sp, #16
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801124a:	2300      	movs	r3, #0
 801124c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2201      	movs	r2, #1
 8011252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801127a:	2b00      	cmp	r3, #0
 801127c:	d014      	beq.n	80112a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00e      	beq.n	80112a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	6852      	ldr	r2, [r2, #4]
 8011296:	b2d2      	uxtb	r2, r2
 8011298:	4611      	mov	r1, r2
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	4798      	blx	r3
 801129e:	4603      	mov	r3, r0
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d001      	beq.n	80112a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80112a4:	2303      	movs	r3, #3
 80112a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80112a8:	2340      	movs	r3, #64	@ 0x40
 80112aa:	2200      	movs	r2, #0
 80112ac:	2100      	movs	r1, #0
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f001 fc71 	bl	8012b96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2240      	movs	r2, #64	@ 0x40
 80112c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80112c4:	2340      	movs	r3, #64	@ 0x40
 80112c6:	2200      	movs	r2, #0
 80112c8:	2180      	movs	r1, #128	@ 0x80
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f001 fc63 	bl	8012b96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2201      	movs	r2, #1
 80112d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2240      	movs	r2, #64	@ 0x40
 80112da:	621a      	str	r2, [r3, #32]

  return ret;
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}

080112e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80112e6:	b480      	push	{r7}
 80112e8:	b083      	sub	sp, #12
 80112ea:	af00      	add	r7, sp, #0
 80112ec:	6078      	str	r0, [r7, #4]
 80112ee:	460b      	mov	r3, r1
 80112f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	78fa      	ldrb	r2, [r7, #3]
 80112f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	370c      	adds	r7, #12
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr

08011306 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011306:	b480      	push	{r7}
 8011308:	b083      	sub	sp, #12
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011314:	b2db      	uxtb	r3, r3
 8011316:	2b04      	cmp	r3, #4
 8011318:	d006      	beq.n	8011328 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011320:	b2da      	uxtb	r2, r3
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2204      	movs	r2, #4
 801132c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011330:	2300      	movs	r3, #0
}
 8011332:	4618      	mov	r0, r3
 8011334:	370c      	adds	r7, #12
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr

0801133e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801133e:	b480      	push	{r7}
 8011340:	b083      	sub	sp, #12
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801134c:	b2db      	uxtb	r3, r3
 801134e:	2b04      	cmp	r3, #4
 8011350:	d106      	bne.n	8011360 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011358:	b2da      	uxtb	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr

0801136e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b082      	sub	sp, #8
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801137c:	b2db      	uxtb	r3, r3
 801137e:	2b03      	cmp	r3, #3
 8011380:	d110      	bne.n	80113a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00b      	beq.n	80113a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011392:	69db      	ldr	r3, [r3, #28]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d005      	beq.n	80113a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801139e:	69db      	ldr	r3, [r3, #28]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80113a4:	2300      	movs	r3, #0
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3708      	adds	r7, #8
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}

080113ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80113ae:	b580      	push	{r7, lr}
 80113b0:	b082      	sub	sp, #8
 80113b2:	af00      	add	r7, sp, #0
 80113b4:	6078      	str	r0, [r7, #4]
 80113b6:	460b      	mov	r3, r1
 80113b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	32ae      	adds	r2, #174	@ 0xae
 80113c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d101      	bne.n	80113d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80113cc:	2303      	movs	r3, #3
 80113ce:	e01c      	b.n	801140a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113d6:	b2db      	uxtb	r3, r3
 80113d8:	2b03      	cmp	r3, #3
 80113da:	d115      	bne.n	8011408 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	32ae      	adds	r2, #174	@ 0xae
 80113e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ea:	6a1b      	ldr	r3, [r3, #32]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00b      	beq.n	8011408 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	32ae      	adds	r2, #174	@ 0xae
 80113fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113fe:	6a1b      	ldr	r3, [r3, #32]
 8011400:	78fa      	ldrb	r2, [r7, #3]
 8011402:	4611      	mov	r1, r2
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3708      	adds	r7, #8
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b082      	sub	sp, #8
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
 801141a:	460b      	mov	r3, r1
 801141c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	32ae      	adds	r2, #174	@ 0xae
 8011428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d101      	bne.n	8011434 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011430:	2303      	movs	r3, #3
 8011432:	e01c      	b.n	801146e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801143a:	b2db      	uxtb	r3, r3
 801143c:	2b03      	cmp	r3, #3
 801143e:	d115      	bne.n	801146c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	32ae      	adds	r2, #174	@ 0xae
 801144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00b      	beq.n	801146c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	32ae      	adds	r2, #174	@ 0xae
 801145e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011464:	78fa      	ldrb	r2, [r7, #3]
 8011466:	4611      	mov	r1, r2
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801146c:	2300      	movs	r3, #0
}
 801146e:	4618      	mov	r0, r3
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011476:	b480      	push	{r7}
 8011478:	b083      	sub	sp, #12
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr

0801148c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011494:	2300      	movs	r3, #0
 8011496:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2201      	movs	r2, #1
 801149c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00e      	beq.n	80114c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	6852      	ldr	r2, [r2, #4]
 80114b6:	b2d2      	uxtb	r2, r2
 80114b8:	4611      	mov	r1, r2
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	4798      	blx	r3
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80114c4:	2303      	movs	r3, #3
 80114c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80114c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}

080114d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80114d2:	b480      	push	{r7}
 80114d4:	b083      	sub	sp, #12
 80114d6:	af00      	add	r7, sp, #0
 80114d8:	6078      	str	r0, [r7, #4]
 80114da:	460b      	mov	r3, r1
 80114dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80114de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr

080114ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	460b      	mov	r3, r1
 80114f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80114f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	370c      	adds	r7, #12
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr

08011506 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b086      	sub	sp, #24
 801150a:	af00      	add	r7, sp, #0
 801150c:	6078      	str	r0, [r7, #4]
 801150e:	460b      	mov	r3, r1
 8011510:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801151a:	2300      	movs	r3, #0
 801151c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	885b      	ldrh	r3, [r3, #2]
 8011522:	b29b      	uxth	r3, r3
 8011524:	68fa      	ldr	r2, [r7, #12]
 8011526:	7812      	ldrb	r2, [r2, #0]
 8011528:	4293      	cmp	r3, r2
 801152a:	d91f      	bls.n	801156c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011532:	e013      	b.n	801155c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011534:	f107 030a 	add.w	r3, r7, #10
 8011538:	4619      	mov	r1, r3
 801153a:	6978      	ldr	r0, [r7, #20]
 801153c:	f000 f81b 	bl	8011576 <USBD_GetNextDesc>
 8011540:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	785b      	ldrb	r3, [r3, #1]
 8011546:	2b05      	cmp	r3, #5
 8011548:	d108      	bne.n	801155c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	789b      	ldrb	r3, [r3, #2]
 8011552:	78fa      	ldrb	r2, [r7, #3]
 8011554:	429a      	cmp	r2, r3
 8011556:	d008      	beq.n	801156a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011558:	2300      	movs	r3, #0
 801155a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	885b      	ldrh	r3, [r3, #2]
 8011560:	b29a      	uxth	r2, r3
 8011562:	897b      	ldrh	r3, [r7, #10]
 8011564:	429a      	cmp	r2, r3
 8011566:	d8e5      	bhi.n	8011534 <USBD_GetEpDesc+0x2e>
 8011568:	e000      	b.n	801156c <USBD_GetEpDesc+0x66>
          break;
 801156a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801156c:	693b      	ldr	r3, [r7, #16]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3718      	adds	r7, #24
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011576:	b480      	push	{r7}
 8011578:	b085      	sub	sp, #20
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	7812      	ldrb	r2, [r2, #0]
 801158c:	4413      	add	r3, r2
 801158e:	b29a      	uxth	r2, r3
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	461a      	mov	r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	4413      	add	r3, r2
 801159e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80115a0:	68fb      	ldr	r3, [r7, #12]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3714      	adds	r7, #20
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr

080115ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80115ae:	b480      	push	{r7}
 80115b0:	b087      	sub	sp, #28
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	3301      	adds	r3, #1
 80115c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80115cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80115d0:	021b      	lsls	r3, r3, #8
 80115d2:	b21a      	sxth	r2, r3
 80115d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80115d8:	4313      	orrs	r3, r2
 80115da:	b21b      	sxth	r3, r3
 80115dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80115de:	89fb      	ldrh	r3, [r7, #14]
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	371c      	adds	r7, #28
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr

080115ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011602:	2b40      	cmp	r3, #64	@ 0x40
 8011604:	d005      	beq.n	8011612 <USBD_StdDevReq+0x26>
 8011606:	2b40      	cmp	r3, #64	@ 0x40
 8011608:	d857      	bhi.n	80116ba <USBD_StdDevReq+0xce>
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00f      	beq.n	801162e <USBD_StdDevReq+0x42>
 801160e:	2b20      	cmp	r3, #32
 8011610:	d153      	bne.n	80116ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	32ae      	adds	r2, #174	@ 0xae
 801161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	6839      	ldr	r1, [r7, #0]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	4798      	blx	r3
 8011628:	4603      	mov	r3, r0
 801162a:	73fb      	strb	r3, [r7, #15]
      break;
 801162c:	e04a      	b.n	80116c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	785b      	ldrb	r3, [r3, #1]
 8011632:	2b09      	cmp	r3, #9
 8011634:	d83b      	bhi.n	80116ae <USBD_StdDevReq+0xc2>
 8011636:	a201      	add	r2, pc, #4	@ (adr r2, 801163c <USBD_StdDevReq+0x50>)
 8011638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163c:	08011691 	.word	0x08011691
 8011640:	080116a5 	.word	0x080116a5
 8011644:	080116af 	.word	0x080116af
 8011648:	0801169b 	.word	0x0801169b
 801164c:	080116af 	.word	0x080116af
 8011650:	0801166f 	.word	0x0801166f
 8011654:	08011665 	.word	0x08011665
 8011658:	080116af 	.word	0x080116af
 801165c:	08011687 	.word	0x08011687
 8011660:	08011679 	.word	0x08011679
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011664:	6839      	ldr	r1, [r7, #0]
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f000 fa3c 	bl	8011ae4 <USBD_GetDescriptor>
          break;
 801166c:	e024      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 fba1 	bl	8011db8 <USBD_SetAddress>
          break;
 8011676:	e01f      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 fbe0 	bl	8011e40 <USBD_SetConfig>
 8011680:	4603      	mov	r3, r0
 8011682:	73fb      	strb	r3, [r7, #15]
          break;
 8011684:	e018      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011686:	6839      	ldr	r1, [r7, #0]
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 fc83 	bl	8011f94 <USBD_GetConfig>
          break;
 801168e:	e013      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011690:	6839      	ldr	r1, [r7, #0]
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f000 fcb4 	bl	8012000 <USBD_GetStatus>
          break;
 8011698:	e00e      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801169a:	6839      	ldr	r1, [r7, #0]
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f000 fce3 	bl	8012068 <USBD_SetFeature>
          break;
 80116a2:	e009      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80116a4:	6839      	ldr	r1, [r7, #0]
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f000 fd07 	bl	80120ba <USBD_ClrFeature>
          break;
 80116ac:	e004      	b.n	80116b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80116ae:	6839      	ldr	r1, [r7, #0]
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f000 fd5e 	bl	8012172 <USBD_CtlError>
          break;
 80116b6:	bf00      	nop
      }
      break;
 80116b8:	e004      	b.n	80116c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80116ba:	6839      	ldr	r1, [r7, #0]
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f000 fd58 	bl	8012172 <USBD_CtlError>
      break;
 80116c2:	bf00      	nop
  }

  return ret;
 80116c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3710      	adds	r7, #16
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop

080116d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116da:	2300      	movs	r3, #0
 80116dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80116e6:	2b40      	cmp	r3, #64	@ 0x40
 80116e8:	d005      	beq.n	80116f6 <USBD_StdItfReq+0x26>
 80116ea:	2b40      	cmp	r3, #64	@ 0x40
 80116ec:	d852      	bhi.n	8011794 <USBD_StdItfReq+0xc4>
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d001      	beq.n	80116f6 <USBD_StdItfReq+0x26>
 80116f2:	2b20      	cmp	r3, #32
 80116f4:	d14e      	bne.n	8011794 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	3b01      	subs	r3, #1
 8011700:	2b02      	cmp	r3, #2
 8011702:	d840      	bhi.n	8011786 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	889b      	ldrh	r3, [r3, #4]
 8011708:	b2db      	uxtb	r3, r3
 801170a:	2b01      	cmp	r3, #1
 801170c:	d836      	bhi.n	801177c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	889b      	ldrh	r3, [r3, #4]
 8011712:	b2db      	uxtb	r3, r3
 8011714:	4619      	mov	r1, r3
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff fedb 	bl	80114d2 <USBD_CoreFindIF>
 801171c:	4603      	mov	r3, r0
 801171e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011720:	7bbb      	ldrb	r3, [r7, #14]
 8011722:	2bff      	cmp	r3, #255	@ 0xff
 8011724:	d01d      	beq.n	8011762 <USBD_StdItfReq+0x92>
 8011726:	7bbb      	ldrb	r3, [r7, #14]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d11a      	bne.n	8011762 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801172c:	7bba      	ldrb	r2, [r7, #14]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	32ae      	adds	r2, #174	@ 0xae
 8011732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00f      	beq.n	801175c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801173c:	7bba      	ldrb	r2, [r7, #14]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011744:	7bba      	ldrb	r2, [r7, #14]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	32ae      	adds	r2, #174	@ 0xae
 801174a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801174e:	689b      	ldr	r3, [r3, #8]
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	4798      	blx	r3
 8011756:	4603      	mov	r3, r0
 8011758:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801175a:	e004      	b.n	8011766 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801175c:	2303      	movs	r3, #3
 801175e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011760:	e001      	b.n	8011766 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011762:	2303      	movs	r3, #3
 8011764:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	88db      	ldrh	r3, [r3, #6]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d110      	bne.n	8011790 <USBD_StdItfReq+0xc0>
 801176e:	7bfb      	ldrb	r3, [r7, #15]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d10d      	bne.n	8011790 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 fdd3 	bl	8012320 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801177a:	e009      	b.n	8011790 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f000 fcf7 	bl	8012172 <USBD_CtlError>
          break;
 8011784:	e004      	b.n	8011790 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011786:	6839      	ldr	r1, [r7, #0]
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f000 fcf2 	bl	8012172 <USBD_CtlError>
          break;
 801178e:	e000      	b.n	8011792 <USBD_StdItfReq+0xc2>
          break;
 8011790:	bf00      	nop
      }
      break;
 8011792:	e004      	b.n	801179e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011794:	6839      	ldr	r1, [r7, #0]
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 fceb 	bl	8012172 <USBD_CtlError>
      break;
 801179c:	bf00      	nop
  }

  return ret;
 801179e:	7bfb      	ldrb	r3, [r7, #15]
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3710      	adds	r7, #16
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}

080117a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	889b      	ldrh	r3, [r3, #4]
 80117ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80117c4:	2b40      	cmp	r3, #64	@ 0x40
 80117c6:	d007      	beq.n	80117d8 <USBD_StdEPReq+0x30>
 80117c8:	2b40      	cmp	r3, #64	@ 0x40
 80117ca:	f200 817f 	bhi.w	8011acc <USBD_StdEPReq+0x324>
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d02a      	beq.n	8011828 <USBD_StdEPReq+0x80>
 80117d2:	2b20      	cmp	r3, #32
 80117d4:	f040 817a 	bne.w	8011acc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80117d8:	7bbb      	ldrb	r3, [r7, #14]
 80117da:	4619      	mov	r1, r3
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f7ff fe85 	bl	80114ec <USBD_CoreFindEP>
 80117e2:	4603      	mov	r3, r0
 80117e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117e6:	7b7b      	ldrb	r3, [r7, #13]
 80117e8:	2bff      	cmp	r3, #255	@ 0xff
 80117ea:	f000 8174 	beq.w	8011ad6 <USBD_StdEPReq+0x32e>
 80117ee:	7b7b      	ldrb	r3, [r7, #13]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f040 8170 	bne.w	8011ad6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80117f6:	7b7a      	ldrb	r2, [r7, #13]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80117fe:	7b7a      	ldrb	r2, [r7, #13]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	32ae      	adds	r2, #174	@ 0xae
 8011804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011808:	689b      	ldr	r3, [r3, #8]
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 8163 	beq.w	8011ad6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011810:	7b7a      	ldrb	r2, [r7, #13]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	32ae      	adds	r2, #174	@ 0xae
 8011816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181a:	689b      	ldr	r3, [r3, #8]
 801181c:	6839      	ldr	r1, [r7, #0]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	4798      	blx	r3
 8011822:	4603      	mov	r3, r0
 8011824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011826:	e156      	b.n	8011ad6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	785b      	ldrb	r3, [r3, #1]
 801182c:	2b03      	cmp	r3, #3
 801182e:	d008      	beq.n	8011842 <USBD_StdEPReq+0x9a>
 8011830:	2b03      	cmp	r3, #3
 8011832:	f300 8145 	bgt.w	8011ac0 <USBD_StdEPReq+0x318>
 8011836:	2b00      	cmp	r3, #0
 8011838:	f000 809b 	beq.w	8011972 <USBD_StdEPReq+0x1ca>
 801183c:	2b01      	cmp	r3, #1
 801183e:	d03c      	beq.n	80118ba <USBD_StdEPReq+0x112>
 8011840:	e13e      	b.n	8011ac0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b02      	cmp	r3, #2
 801184c:	d002      	beq.n	8011854 <USBD_StdEPReq+0xac>
 801184e:	2b03      	cmp	r3, #3
 8011850:	d016      	beq.n	8011880 <USBD_StdEPReq+0xd8>
 8011852:	e02c      	b.n	80118ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011854:	7bbb      	ldrb	r3, [r7, #14]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00d      	beq.n	8011876 <USBD_StdEPReq+0xce>
 801185a:	7bbb      	ldrb	r3, [r7, #14]
 801185c:	2b80      	cmp	r3, #128	@ 0x80
 801185e:	d00a      	beq.n	8011876 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011860:	7bbb      	ldrb	r3, [r7, #14]
 8011862:	4619      	mov	r1, r3
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f001 f9db 	bl	8012c20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801186a:	2180      	movs	r1, #128	@ 0x80
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f001 f9d7 	bl	8012c20 <USBD_LL_StallEP>
 8011872:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011874:	e020      	b.n	80118b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011876:	6839      	ldr	r1, [r7, #0]
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f000 fc7a 	bl	8012172 <USBD_CtlError>
              break;
 801187e:	e01b      	b.n	80118b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	885b      	ldrh	r3, [r3, #2]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d10e      	bne.n	80118a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011888:	7bbb      	ldrb	r3, [r7, #14]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00b      	beq.n	80118a6 <USBD_StdEPReq+0xfe>
 801188e:	7bbb      	ldrb	r3, [r7, #14]
 8011890:	2b80      	cmp	r3, #128	@ 0x80
 8011892:	d008      	beq.n	80118a6 <USBD_StdEPReq+0xfe>
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	88db      	ldrh	r3, [r3, #6]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d104      	bne.n	80118a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801189c:	7bbb      	ldrb	r3, [r7, #14]
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f001 f9bd 	bl	8012c20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f000 fd3a 	bl	8012320 <USBD_CtlSendStatus>

              break;
 80118ac:	e004      	b.n	80118b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80118ae:	6839      	ldr	r1, [r7, #0]
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 fc5e 	bl	8012172 <USBD_CtlError>
              break;
 80118b6:	bf00      	nop
          }
          break;
 80118b8:	e107      	b.n	8011aca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	2b02      	cmp	r3, #2
 80118c4:	d002      	beq.n	80118cc <USBD_StdEPReq+0x124>
 80118c6:	2b03      	cmp	r3, #3
 80118c8:	d016      	beq.n	80118f8 <USBD_StdEPReq+0x150>
 80118ca:	e04b      	b.n	8011964 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80118cc:	7bbb      	ldrb	r3, [r7, #14]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00d      	beq.n	80118ee <USBD_StdEPReq+0x146>
 80118d2:	7bbb      	ldrb	r3, [r7, #14]
 80118d4:	2b80      	cmp	r3, #128	@ 0x80
 80118d6:	d00a      	beq.n	80118ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80118d8:	7bbb      	ldrb	r3, [r7, #14]
 80118da:	4619      	mov	r1, r3
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f001 f99f 	bl	8012c20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80118e2:	2180      	movs	r1, #128	@ 0x80
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f001 f99b 	bl	8012c20 <USBD_LL_StallEP>
 80118ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80118ec:	e040      	b.n	8011970 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80118ee:	6839      	ldr	r1, [r7, #0]
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fc3e 	bl	8012172 <USBD_CtlError>
              break;
 80118f6:	e03b      	b.n	8011970 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	885b      	ldrh	r3, [r3, #2]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d136      	bne.n	801196e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011900:	7bbb      	ldrb	r3, [r7, #14]
 8011902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011906:	2b00      	cmp	r3, #0
 8011908:	d004      	beq.n	8011914 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801190a:	7bbb      	ldrb	r3, [r7, #14]
 801190c:	4619      	mov	r1, r3
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f001 f9a5 	bl	8012c5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f000 fd03 	bl	8012320 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801191a:	7bbb      	ldrb	r3, [r7, #14]
 801191c:	4619      	mov	r1, r3
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7ff fde4 	bl	80114ec <USBD_CoreFindEP>
 8011924:	4603      	mov	r3, r0
 8011926:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011928:	7b7b      	ldrb	r3, [r7, #13]
 801192a:	2bff      	cmp	r3, #255	@ 0xff
 801192c:	d01f      	beq.n	801196e <USBD_StdEPReq+0x1c6>
 801192e:	7b7b      	ldrb	r3, [r7, #13]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d11c      	bne.n	801196e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011934:	7b7a      	ldrb	r2, [r7, #13]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801193c:	7b7a      	ldrb	r2, [r7, #13]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	32ae      	adds	r2, #174	@ 0xae
 8011942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011946:	689b      	ldr	r3, [r3, #8]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d010      	beq.n	801196e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801194c:	7b7a      	ldrb	r2, [r7, #13]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	32ae      	adds	r2, #174	@ 0xae
 8011952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	6839      	ldr	r1, [r7, #0]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	4798      	blx	r3
 801195e:	4603      	mov	r3, r0
 8011960:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011962:	e004      	b.n	801196e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011964:	6839      	ldr	r1, [r7, #0]
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fc03 	bl	8012172 <USBD_CtlError>
              break;
 801196c:	e000      	b.n	8011970 <USBD_StdEPReq+0x1c8>
              break;
 801196e:	bf00      	nop
          }
          break;
 8011970:	e0ab      	b.n	8011aca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011978:	b2db      	uxtb	r3, r3
 801197a:	2b02      	cmp	r3, #2
 801197c:	d002      	beq.n	8011984 <USBD_StdEPReq+0x1dc>
 801197e:	2b03      	cmp	r3, #3
 8011980:	d032      	beq.n	80119e8 <USBD_StdEPReq+0x240>
 8011982:	e097      	b.n	8011ab4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011984:	7bbb      	ldrb	r3, [r7, #14]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d007      	beq.n	801199a <USBD_StdEPReq+0x1f2>
 801198a:	7bbb      	ldrb	r3, [r7, #14]
 801198c:	2b80      	cmp	r3, #128	@ 0x80
 801198e:	d004      	beq.n	801199a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011990:	6839      	ldr	r1, [r7, #0]
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f000 fbed 	bl	8012172 <USBD_CtlError>
                break;
 8011998:	e091      	b.n	8011abe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801199a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	da0b      	bge.n	80119ba <USBD_StdEPReq+0x212>
 80119a2:	7bbb      	ldrb	r3, [r7, #14]
 80119a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80119a8:	4613      	mov	r3, r2
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	009b      	lsls	r3, r3, #2
 80119b0:	3310      	adds	r3, #16
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	4413      	add	r3, r2
 80119b6:	3304      	adds	r3, #4
 80119b8:	e00b      	b.n	80119d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80119ba:	7bbb      	ldrb	r3, [r7, #14]
 80119bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119c0:	4613      	mov	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	4413      	add	r3, r2
 80119d0:	3304      	adds	r3, #4
 80119d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	2200      	movs	r2, #0
 80119d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	2202      	movs	r2, #2
 80119de:	4619      	mov	r1, r3
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f000 fc43 	bl	801226c <USBD_CtlSendData>
              break;
 80119e6:	e06a      	b.n	8011abe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80119e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	da11      	bge.n	8011a14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80119f0:	7bbb      	ldrb	r3, [r7, #14]
 80119f2:	f003 020f 	and.w	r2, r3, #15
 80119f6:	6879      	ldr	r1, [r7, #4]
 80119f8:	4613      	mov	r3, r2
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4413      	add	r3, r2
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	440b      	add	r3, r1
 8011a02:	3324      	adds	r3, #36	@ 0x24
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d117      	bne.n	8011a3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011a0a:	6839      	ldr	r1, [r7, #0]
 8011a0c:	6878      	ldr	r0, [r7, #4]
 8011a0e:	f000 fbb0 	bl	8012172 <USBD_CtlError>
                  break;
 8011a12:	e054      	b.n	8011abe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011a14:	7bbb      	ldrb	r3, [r7, #14]
 8011a16:	f003 020f 	and.w	r2, r3, #15
 8011a1a:	6879      	ldr	r1, [r7, #4]
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4413      	add	r3, r2
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	440b      	add	r3, r1
 8011a26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011a2a:	881b      	ldrh	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d104      	bne.n	8011a3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011a30:	6839      	ldr	r1, [r7, #0]
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 fb9d 	bl	8012172 <USBD_CtlError>
                  break;
 8011a38:	e041      	b.n	8011abe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	da0b      	bge.n	8011a5a <USBD_StdEPReq+0x2b2>
 8011a42:	7bbb      	ldrb	r3, [r7, #14]
 8011a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011a48:	4613      	mov	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	009b      	lsls	r3, r3, #2
 8011a50:	3310      	adds	r3, #16
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	4413      	add	r3, r2
 8011a56:	3304      	adds	r3, #4
 8011a58:	e00b      	b.n	8011a72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011a5a:	7bbb      	ldrb	r3, [r7, #14]
 8011a5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a60:	4613      	mov	r3, r2
 8011a62:	009b      	lsls	r3, r3, #2
 8011a64:	4413      	add	r3, r2
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	4413      	add	r3, r2
 8011a70:	3304      	adds	r3, #4
 8011a72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a74:	7bbb      	ldrb	r3, [r7, #14]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d002      	beq.n	8011a80 <USBD_StdEPReq+0x2d8>
 8011a7a:	7bbb      	ldrb	r3, [r7, #14]
 8011a7c:	2b80      	cmp	r3, #128	@ 0x80
 8011a7e:	d103      	bne.n	8011a88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	2200      	movs	r2, #0
 8011a84:	601a      	str	r2, [r3, #0]
 8011a86:	e00e      	b.n	8011aa6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a88:	7bbb      	ldrb	r3, [r7, #14]
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f001 f905 	bl	8012c9c <USBD_LL_IsStallEP>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d003      	beq.n	8011aa0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	601a      	str	r2, [r3, #0]
 8011a9e:	e002      	b.n	8011aa6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011aa6:	68bb      	ldr	r3, [r7, #8]
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	4619      	mov	r1, r3
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 fbdd 	bl	801226c <USBD_CtlSendData>
              break;
 8011ab2:	e004      	b.n	8011abe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011ab4:	6839      	ldr	r1, [r7, #0]
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f000 fb5b 	bl	8012172 <USBD_CtlError>
              break;
 8011abc:	bf00      	nop
          }
          break;
 8011abe:	e004      	b.n	8011aca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 fb55 	bl	8012172 <USBD_CtlError>
          break;
 8011ac8:	bf00      	nop
      }
      break;
 8011aca:	e005      	b.n	8011ad8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011acc:	6839      	ldr	r1, [r7, #0]
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f000 fb4f 	bl	8012172 <USBD_CtlError>
      break;
 8011ad4:	e000      	b.n	8011ad8 <USBD_StdEPReq+0x330>
      break;
 8011ad6:	bf00      	nop
  }

  return ret;
 8011ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
	...

08011ae4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b084      	sub	sp, #16
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011aee:	2300      	movs	r3, #0
 8011af0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011af2:	2300      	movs	r3, #0
 8011af4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011af6:	2300      	movs	r3, #0
 8011af8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	885b      	ldrh	r3, [r3, #2]
 8011afe:	0a1b      	lsrs	r3, r3, #8
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	3b01      	subs	r3, #1
 8011b04:	2b06      	cmp	r3, #6
 8011b06:	f200 8128 	bhi.w	8011d5a <USBD_GetDescriptor+0x276>
 8011b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8011b10 <USBD_GetDescriptor+0x2c>)
 8011b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b10:	08011b2d 	.word	0x08011b2d
 8011b14:	08011b45 	.word	0x08011b45
 8011b18:	08011b85 	.word	0x08011b85
 8011b1c:	08011d5b 	.word	0x08011d5b
 8011b20:	08011d5b 	.word	0x08011d5b
 8011b24:	08011cfb 	.word	0x08011cfb
 8011b28:	08011d27 	.word	0x08011d27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	7c12      	ldrb	r2, [r2, #16]
 8011b38:	f107 0108 	add.w	r1, r7, #8
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	4798      	blx	r3
 8011b40:	60f8      	str	r0, [r7, #12]
      break;
 8011b42:	e112      	b.n	8011d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	7c1b      	ldrb	r3, [r3, #16]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10d      	bne.n	8011b68 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b54:	f107 0208 	add.w	r2, r7, #8
 8011b58:	4610      	mov	r0, r2
 8011b5a:	4798      	blx	r3
 8011b5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	3301      	adds	r3, #1
 8011b62:	2202      	movs	r2, #2
 8011b64:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011b66:	e100      	b.n	8011d6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b70:	f107 0208 	add.w	r2, r7, #8
 8011b74:	4610      	mov	r0, r2
 8011b76:	4798      	blx	r3
 8011b78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	2202      	movs	r2, #2
 8011b80:	701a      	strb	r2, [r3, #0]
      break;
 8011b82:	e0f2      	b.n	8011d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	885b      	ldrh	r3, [r3, #2]
 8011b88:	b2db      	uxtb	r3, r3
 8011b8a:	2b05      	cmp	r3, #5
 8011b8c:	f200 80ac 	bhi.w	8011ce8 <USBD_GetDescriptor+0x204>
 8011b90:	a201      	add	r2, pc, #4	@ (adr r2, 8011b98 <USBD_GetDescriptor+0xb4>)
 8011b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b96:	bf00      	nop
 8011b98:	08011bb1 	.word	0x08011bb1
 8011b9c:	08011be5 	.word	0x08011be5
 8011ba0:	08011c19 	.word	0x08011c19
 8011ba4:	08011c4d 	.word	0x08011c4d
 8011ba8:	08011c81 	.word	0x08011c81
 8011bac:	08011cb5 	.word	0x08011cb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00b      	beq.n	8011bd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bc2:	685b      	ldr	r3, [r3, #4]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	7c12      	ldrb	r2, [r2, #16]
 8011bc8:	f107 0108 	add.w	r1, r7, #8
 8011bcc:	4610      	mov	r0, r2
 8011bce:	4798      	blx	r3
 8011bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011bd2:	e091      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011bd4:	6839      	ldr	r1, [r7, #0]
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f000 facb 	bl	8012172 <USBD_CtlError>
            err++;
 8011bdc:	7afb      	ldrb	r3, [r7, #11]
 8011bde:	3301      	adds	r3, #1
 8011be0:	72fb      	strb	r3, [r7, #11]
          break;
 8011be2:	e089      	b.n	8011cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bea:	689b      	ldr	r3, [r3, #8]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d00b      	beq.n	8011c08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	7c12      	ldrb	r2, [r2, #16]
 8011bfc:	f107 0108 	add.w	r1, r7, #8
 8011c00:	4610      	mov	r0, r2
 8011c02:	4798      	blx	r3
 8011c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c06:	e077      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c08:	6839      	ldr	r1, [r7, #0]
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f000 fab1 	bl	8012172 <USBD_CtlError>
            err++;
 8011c10:	7afb      	ldrb	r3, [r7, #11]
 8011c12:	3301      	adds	r3, #1
 8011c14:	72fb      	strb	r3, [r7, #11]
          break;
 8011c16:	e06f      	b.n	8011cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c1e:	68db      	ldr	r3, [r3, #12]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d00b      	beq.n	8011c3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	7c12      	ldrb	r2, [r2, #16]
 8011c30:	f107 0108 	add.w	r1, r7, #8
 8011c34:	4610      	mov	r0, r2
 8011c36:	4798      	blx	r3
 8011c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c3a:	e05d      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fa97 	bl	8012172 <USBD_CtlError>
            err++;
 8011c44:	7afb      	ldrb	r3, [r7, #11]
 8011c46:	3301      	adds	r3, #1
 8011c48:	72fb      	strb	r3, [r7, #11]
          break;
 8011c4a:	e055      	b.n	8011cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c52:	691b      	ldr	r3, [r3, #16]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00b      	beq.n	8011c70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c5e:	691b      	ldr	r3, [r3, #16]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	7c12      	ldrb	r2, [r2, #16]
 8011c64:	f107 0108 	add.w	r1, r7, #8
 8011c68:	4610      	mov	r0, r2
 8011c6a:	4798      	blx	r3
 8011c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011c6e:	e043      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011c70:	6839      	ldr	r1, [r7, #0]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 fa7d 	bl	8012172 <USBD_CtlError>
            err++;
 8011c78:	7afb      	ldrb	r3, [r7, #11]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8011c7e:	e03b      	b.n	8011cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c86:	695b      	ldr	r3, [r3, #20]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00b      	beq.n	8011ca4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011c92:	695b      	ldr	r3, [r3, #20]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	7c12      	ldrb	r2, [r2, #16]
 8011c98:	f107 0108 	add.w	r1, r7, #8
 8011c9c:	4610      	mov	r0, r2
 8011c9e:	4798      	blx	r3
 8011ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ca2:	e029      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011ca4:	6839      	ldr	r1, [r7, #0]
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f000 fa63 	bl	8012172 <USBD_CtlError>
            err++;
 8011cac:	7afb      	ldrb	r3, [r7, #11]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8011cb2:	e021      	b.n	8011cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011cba:	699b      	ldr	r3, [r3, #24]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d00b      	beq.n	8011cd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	7c12      	ldrb	r2, [r2, #16]
 8011ccc:	f107 0108 	add.w	r1, r7, #8
 8011cd0:	4610      	mov	r0, r2
 8011cd2:	4798      	blx	r3
 8011cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011cd6:	e00f      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011cd8:	6839      	ldr	r1, [r7, #0]
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f000 fa49 	bl	8012172 <USBD_CtlError>
            err++;
 8011ce0:	7afb      	ldrb	r3, [r7, #11]
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ce6:	e007      	b.n	8011cf8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011ce8:	6839      	ldr	r1, [r7, #0]
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 fa41 	bl	8012172 <USBD_CtlError>
          err++;
 8011cf0:	7afb      	ldrb	r3, [r7, #11]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011cf6:	bf00      	nop
      }
      break;
 8011cf8:	e037      	b.n	8011d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	7c1b      	ldrb	r3, [r3, #16]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d109      	bne.n	8011d16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d0a:	f107 0208 	add.w	r2, r7, #8
 8011d0e:	4610      	mov	r0, r2
 8011d10:	4798      	blx	r3
 8011d12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d14:	e029      	b.n	8011d6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011d16:	6839      	ldr	r1, [r7, #0]
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f000 fa2a 	bl	8012172 <USBD_CtlError>
        err++;
 8011d1e:	7afb      	ldrb	r3, [r7, #11]
 8011d20:	3301      	adds	r3, #1
 8011d22:	72fb      	strb	r3, [r7, #11]
      break;
 8011d24:	e021      	b.n	8011d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	7c1b      	ldrb	r3, [r3, #16]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10d      	bne.n	8011d4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d36:	f107 0208 	add.w	r2, r7, #8
 8011d3a:	4610      	mov	r0, r2
 8011d3c:	4798      	blx	r3
 8011d3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	3301      	adds	r3, #1
 8011d44:	2207      	movs	r2, #7
 8011d46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011d48:	e00f      	b.n	8011d6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011d4a:	6839      	ldr	r1, [r7, #0]
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 fa10 	bl	8012172 <USBD_CtlError>
        err++;
 8011d52:	7afb      	ldrb	r3, [r7, #11]
 8011d54:	3301      	adds	r3, #1
 8011d56:	72fb      	strb	r3, [r7, #11]
      break;
 8011d58:	e007      	b.n	8011d6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f000 fa08 	bl	8012172 <USBD_CtlError>
      err++;
 8011d62:	7afb      	ldrb	r3, [r7, #11]
 8011d64:	3301      	adds	r3, #1
 8011d66:	72fb      	strb	r3, [r7, #11]
      break;
 8011d68:	bf00      	nop
  }

  if (err != 0U)
 8011d6a:	7afb      	ldrb	r3, [r7, #11]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d11e      	bne.n	8011dae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	88db      	ldrh	r3, [r3, #6]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d016      	beq.n	8011da6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011d78:	893b      	ldrh	r3, [r7, #8]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d00e      	beq.n	8011d9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	88da      	ldrh	r2, [r3, #6]
 8011d82:	893b      	ldrh	r3, [r7, #8]
 8011d84:	4293      	cmp	r3, r2
 8011d86:	bf28      	it	cs
 8011d88:	4613      	movcs	r3, r2
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d8e:	893b      	ldrh	r3, [r7, #8]
 8011d90:	461a      	mov	r2, r3
 8011d92:	68f9      	ldr	r1, [r7, #12]
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 fa69 	bl	801226c <USBD_CtlSendData>
 8011d9a:	e009      	b.n	8011db0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011d9c:	6839      	ldr	r1, [r7, #0]
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f000 f9e7 	bl	8012172 <USBD_CtlError>
 8011da4:	e004      	b.n	8011db0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 faba 	bl	8012320 <USBD_CtlSendStatus>
 8011dac:	e000      	b.n	8011db0 <USBD_GetDescriptor+0x2cc>
    return;
 8011dae:	bf00      	nop
  }
}
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop

08011db8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	889b      	ldrh	r3, [r3, #4]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d131      	bne.n	8011e2e <USBD_SetAddress+0x76>
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	88db      	ldrh	r3, [r3, #6]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d12d      	bne.n	8011e2e <USBD_SetAddress+0x76>
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	885b      	ldrh	r3, [r3, #2]
 8011dd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8011dd8:	d829      	bhi.n	8011e2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	885b      	ldrh	r3, [r3, #2]
 8011dde:	b2db      	uxtb	r3, r3
 8011de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011de4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011dec:	b2db      	uxtb	r3, r3
 8011dee:	2b03      	cmp	r3, #3
 8011df0:	d104      	bne.n	8011dfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011df2:	6839      	ldr	r1, [r7, #0]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 f9bc 	bl	8012172 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dfa:	e01d      	b.n	8011e38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	7bfa      	ldrb	r2, [r7, #15]
 8011e00:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011e04:	7bfb      	ldrb	r3, [r7, #15]
 8011e06:	4619      	mov	r1, r3
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 ff73 	bl	8012cf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f000 fa86 	bl	8012320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011e14:	7bfb      	ldrb	r3, [r7, #15]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d004      	beq.n	8011e24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2202      	movs	r2, #2
 8011e1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e22:	e009      	b.n	8011e38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e2c:	e004      	b.n	8011e38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011e2e:	6839      	ldr	r1, [r7, #0]
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f000 f99e 	bl	8012172 <USBD_CtlError>
  }
}
 8011e36:	bf00      	nop
 8011e38:	bf00      	nop
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}

08011e40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	885b      	ldrh	r3, [r3, #2]
 8011e52:	b2da      	uxtb	r2, r3
 8011e54:	4b4e      	ldr	r3, [pc, #312]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011e56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e58:	4b4d      	ldr	r3, [pc, #308]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d905      	bls.n	8011e6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011e60:	6839      	ldr	r1, [r7, #0]
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f000 f985 	bl	8012172 <USBD_CtlError>
    return USBD_FAIL;
 8011e68:	2303      	movs	r3, #3
 8011e6a:	e08c      	b.n	8011f86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	2b02      	cmp	r3, #2
 8011e76:	d002      	beq.n	8011e7e <USBD_SetConfig+0x3e>
 8011e78:	2b03      	cmp	r3, #3
 8011e7a:	d029      	beq.n	8011ed0 <USBD_SetConfig+0x90>
 8011e7c:	e075      	b.n	8011f6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011e7e:	4b44      	ldr	r3, [pc, #272]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d020      	beq.n	8011ec8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011e86:	4b42      	ldr	r3, [pc, #264]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e90:	4b3f      	ldr	r3, [pc, #252]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	4619      	mov	r1, r3
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7fe ffe3 	bl	8010e62 <USBD_SetClassConfig>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011ea0:	7bfb      	ldrb	r3, [r7, #15]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d008      	beq.n	8011eb8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011ea6:	6839      	ldr	r1, [r7, #0]
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f000 f962 	bl	8012172 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2202      	movs	r2, #2
 8011eb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011eb6:	e065      	b.n	8011f84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 fa31 	bl	8012320 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2203      	movs	r2, #3
 8011ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011ec6:	e05d      	b.n	8011f84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 fa29 	bl	8012320 <USBD_CtlSendStatus>
      break;
 8011ece:	e059      	b.n	8011f84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d112      	bne.n	8011efe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2202      	movs	r2, #2
 8011edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011eea:	4b29      	ldr	r3, [pc, #164]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	6878      	ldr	r0, [r7, #4]
 8011ef2:	f7fe ffd2 	bl	8010e9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f000 fa12 	bl	8012320 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011efc:	e042      	b.n	8011f84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011efe:	4b24      	ldr	r3, [pc, #144]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	461a      	mov	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d02a      	beq.n	8011f62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	4619      	mov	r1, r3
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f7fe ffc0 	bl	8010e9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	461a      	mov	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011f24:	4b1a      	ldr	r3, [pc, #104]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7fe ff99 	bl	8010e62 <USBD_SetClassConfig>
 8011f30:	4603      	mov	r3, r0
 8011f32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011f34:	7bfb      	ldrb	r3, [r7, #15]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00f      	beq.n	8011f5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011f3a:	6839      	ldr	r1, [r7, #0]
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f000 f918 	bl	8012172 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	4619      	mov	r1, r3
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7fe ffa5 	bl	8010e9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	2202      	movs	r2, #2
 8011f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011f58:	e014      	b.n	8011f84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 f9e0 	bl	8012320 <USBD_CtlSendStatus>
      break;
 8011f60:	e010      	b.n	8011f84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f000 f9dc 	bl	8012320 <USBD_CtlSendStatus>
      break;
 8011f68:	e00c      	b.n	8011f84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011f6a:	6839      	ldr	r1, [r7, #0]
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 f900 	bl	8012172 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f72:	4b07      	ldr	r3, [pc, #28]	@ (8011f90 <USBD_SetConfig+0x150>)
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	4619      	mov	r1, r3
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7fe ff8e 	bl	8010e9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	73fb      	strb	r3, [r7, #15]
      break;
 8011f82:	bf00      	nop
  }

  return ret;
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	2000186c 	.word	0x2000186c

08011f94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
 8011f9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	88db      	ldrh	r3, [r3, #6]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d004      	beq.n	8011fb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011fa6:	6839      	ldr	r1, [r7, #0]
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f000 f8e2 	bl	8012172 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011fae:	e023      	b.n	8011ff8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	2b02      	cmp	r3, #2
 8011fba:	dc02      	bgt.n	8011fc2 <USBD_GetConfig+0x2e>
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	dc03      	bgt.n	8011fc8 <USBD_GetConfig+0x34>
 8011fc0:	e015      	b.n	8011fee <USBD_GetConfig+0x5a>
 8011fc2:	2b03      	cmp	r3, #3
 8011fc4:	d00b      	beq.n	8011fde <USBD_GetConfig+0x4a>
 8011fc6:	e012      	b.n	8011fee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	4619      	mov	r1, r3
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 f948 	bl	801226c <USBD_CtlSendData>
        break;
 8011fdc:	e00c      	b.n	8011ff8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	3304      	adds	r3, #4
 8011fe2:	2201      	movs	r2, #1
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 f940 	bl	801226c <USBD_CtlSendData>
        break;
 8011fec:	e004      	b.n	8011ff8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f8be 	bl	8012172 <USBD_CtlError>
        break;
 8011ff6:	bf00      	nop
}
 8011ff8:	bf00      	nop
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012010:	b2db      	uxtb	r3, r3
 8012012:	3b01      	subs	r3, #1
 8012014:	2b02      	cmp	r3, #2
 8012016:	d81e      	bhi.n	8012056 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	88db      	ldrh	r3, [r3, #6]
 801201c:	2b02      	cmp	r3, #2
 801201e:	d004      	beq.n	801202a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012020:	6839      	ldr	r1, [r7, #0]
 8012022:	6878      	ldr	r0, [r7, #4]
 8012024:	f000 f8a5 	bl	8012172 <USBD_CtlError>
        break;
 8012028:	e01a      	b.n	8012060 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2201      	movs	r2, #1
 801202e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012036:	2b00      	cmp	r3, #0
 8012038:	d005      	beq.n	8012046 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	f043 0202 	orr.w	r2, r3, #2
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	330c      	adds	r3, #12
 801204a:	2202      	movs	r2, #2
 801204c:	4619      	mov	r1, r3
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f90c 	bl	801226c <USBD_CtlSendData>
      break;
 8012054:	e004      	b.n	8012060 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012056:	6839      	ldr	r1, [r7, #0]
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f000 f88a 	bl	8012172 <USBD_CtlError>
      break;
 801205e:	bf00      	nop
  }
}
 8012060:	bf00      	nop
 8012062:	3708      	adds	r7, #8
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	885b      	ldrh	r3, [r3, #2]
 8012076:	2b01      	cmp	r3, #1
 8012078:	d107      	bne.n	801208a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2201      	movs	r2, #1
 801207e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 f94c 	bl	8012320 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012088:	e013      	b.n	80120b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	885b      	ldrh	r3, [r3, #2]
 801208e:	2b02      	cmp	r3, #2
 8012090:	d10b      	bne.n	80120aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	889b      	ldrh	r3, [r3, #4]
 8012096:	0a1b      	lsrs	r3, r3, #8
 8012098:	b29b      	uxth	r3, r3
 801209a:	b2da      	uxtb	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f000 f93c 	bl	8012320 <USBD_CtlSendStatus>
}
 80120a8:	e003      	b.n	80120b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80120aa:	6839      	ldr	r1, [r7, #0]
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f000 f860 	bl	8012172 <USBD_CtlError>
}
 80120b2:	bf00      	nop
 80120b4:	3708      	adds	r7, #8
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b082      	sub	sp, #8
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	3b01      	subs	r3, #1
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d80b      	bhi.n	80120ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	885b      	ldrh	r3, [r3, #2]
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d10c      	bne.n	80120f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 f91c 	bl	8012320 <USBD_CtlSendStatus>
      }
      break;
 80120e8:	e004      	b.n	80120f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80120ea:	6839      	ldr	r1, [r7, #0]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f000 f840 	bl	8012172 <USBD_CtlError>
      break;
 80120f2:	e000      	b.n	80120f6 <USBD_ClrFeature+0x3c>
      break;
 80120f4:	bf00      	nop
  }
}
 80120f6:	bf00      	nop
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}

080120fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80120fe:	b580      	push	{r7, lr}
 8012100:	b084      	sub	sp, #16
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
 8012106:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	781a      	ldrb	r2, [r3, #0]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	3301      	adds	r3, #1
 8012118:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	781a      	ldrb	r2, [r3, #0]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	3301      	adds	r3, #1
 8012126:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f7ff fa40 	bl	80115ae <SWAPBYTE>
 801212e:	4603      	mov	r3, r0
 8012130:	461a      	mov	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	3301      	adds	r3, #1
 801213a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	3301      	adds	r3, #1
 8012140:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012142:	68f8      	ldr	r0, [r7, #12]
 8012144:	f7ff fa33 	bl	80115ae <SWAPBYTE>
 8012148:	4603      	mov	r3, r0
 801214a:	461a      	mov	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	3301      	adds	r3, #1
 8012154:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	3301      	adds	r3, #1
 801215a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f7ff fa26 	bl	80115ae <SWAPBYTE>
 8012162:	4603      	mov	r3, r0
 8012164:	461a      	mov	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	80da      	strh	r2, [r3, #6]
}
 801216a:	bf00      	nop
 801216c:	3710      	adds	r7, #16
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b082      	sub	sp, #8
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
 801217a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801217c:	2180      	movs	r1, #128	@ 0x80
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 fd4e 	bl	8012c20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012184:	2100      	movs	r1, #0
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f000 fd4a 	bl	8012c20 <USBD_LL_StallEP>
}
 801218c:	bf00      	nop
 801218e:	3708      	adds	r7, #8
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}

08012194 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b086      	sub	sp, #24
 8012198:	af00      	add	r7, sp, #0
 801219a:	60f8      	str	r0, [r7, #12]
 801219c:	60b9      	str	r1, [r7, #8]
 801219e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80121a0:	2300      	movs	r3, #0
 80121a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d042      	beq.n	8012230 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80121ae:	6938      	ldr	r0, [r7, #16]
 80121b0:	f000 f842 	bl	8012238 <USBD_GetLen>
 80121b4:	4603      	mov	r3, r0
 80121b6:	3301      	adds	r3, #1
 80121b8:	005b      	lsls	r3, r3, #1
 80121ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121be:	d808      	bhi.n	80121d2 <USBD_GetString+0x3e>
 80121c0:	6938      	ldr	r0, [r7, #16]
 80121c2:	f000 f839 	bl	8012238 <USBD_GetLen>
 80121c6:	4603      	mov	r3, r0
 80121c8:	3301      	adds	r3, #1
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	005b      	lsls	r3, r3, #1
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	e001      	b.n	80121d6 <USBD_GetString+0x42>
 80121d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80121da:	7dfb      	ldrb	r3, [r7, #23]
 80121dc:	68ba      	ldr	r2, [r7, #8]
 80121de:	4413      	add	r3, r2
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	7812      	ldrb	r2, [r2, #0]
 80121e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80121e6:	7dfb      	ldrb	r3, [r7, #23]
 80121e8:	3301      	adds	r3, #1
 80121ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80121ec:	7dfb      	ldrb	r3, [r7, #23]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	4413      	add	r3, r2
 80121f2:	2203      	movs	r2, #3
 80121f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80121f6:	7dfb      	ldrb	r3, [r7, #23]
 80121f8:	3301      	adds	r3, #1
 80121fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80121fc:	e013      	b.n	8012226 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80121fe:	7dfb      	ldrb	r3, [r7, #23]
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	4413      	add	r3, r2
 8012204:	693a      	ldr	r2, [r7, #16]
 8012206:	7812      	ldrb	r2, [r2, #0]
 8012208:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	3301      	adds	r3, #1
 801220e:	613b      	str	r3, [r7, #16]
    idx++;
 8012210:	7dfb      	ldrb	r3, [r7, #23]
 8012212:	3301      	adds	r3, #1
 8012214:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012216:	7dfb      	ldrb	r3, [r7, #23]
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	4413      	add	r3, r2
 801221c:	2200      	movs	r2, #0
 801221e:	701a      	strb	r2, [r3, #0]
    idx++;
 8012220:	7dfb      	ldrb	r3, [r7, #23]
 8012222:	3301      	adds	r3, #1
 8012224:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1e7      	bne.n	80121fe <USBD_GetString+0x6a>
 801222e:	e000      	b.n	8012232 <USBD_GetString+0x9e>
    return;
 8012230:	bf00      	nop
  }
}
 8012232:	3718      	adds	r7, #24
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012238:	b480      	push	{r7}
 801223a:	b085      	sub	sp, #20
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012240:	2300      	movs	r3, #0
 8012242:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012248:	e005      	b.n	8012256 <USBD_GetLen+0x1e>
  {
    len++;
 801224a:	7bfb      	ldrb	r3, [r7, #15]
 801224c:	3301      	adds	r3, #1
 801224e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	3301      	adds	r3, #1
 8012254:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d1f5      	bne.n	801224a <USBD_GetLen+0x12>
  }

  return len;
 801225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3714      	adds	r7, #20
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2202      	movs	r2, #2
 801227c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	687a      	ldr	r2, [r7, #4]
 8012284:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	2100      	movs	r1, #0
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f000 fd4d 	bl	8012d32 <USBD_LL_Transmit>

  return USBD_OK;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	3710      	adds	r7, #16
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}

080122a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b084      	sub	sp, #16
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	60f8      	str	r0, [r7, #12]
 80122aa:	60b9      	str	r1, [r7, #8]
 80122ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	68ba      	ldr	r2, [r7, #8]
 80122b2:	2100      	movs	r1, #0
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f000 fd3c 	bl	8012d32 <USBD_LL_Transmit>

  return USBD_OK;
 80122ba:	2300      	movs	r3, #0
}
 80122bc:	4618      	mov	r0, r3
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2203      	movs	r2, #3
 80122d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	687a      	ldr	r2, [r7, #4]
 80122e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	68ba      	ldr	r2, [r7, #8]
 80122ec:	2100      	movs	r1, #0
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f000 fd40 	bl	8012d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122f4:	2300      	movs	r3, #0
}
 80122f6:	4618      	mov	r0, r3
 80122f8:	3710      	adds	r7, #16
 80122fa:	46bd      	mov	sp, r7
 80122fc:	bd80      	pop	{r7, pc}

080122fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80122fe:	b580      	push	{r7, lr}
 8012300:	b084      	sub	sp, #16
 8012302:	af00      	add	r7, sp, #0
 8012304:	60f8      	str	r0, [r7, #12]
 8012306:	60b9      	str	r1, [r7, #8]
 8012308:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	68ba      	ldr	r2, [r7, #8]
 801230e:	2100      	movs	r1, #0
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f000 fd2f 	bl	8012d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012316:	2300      	movs	r3, #0
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2204      	movs	r2, #4
 801232c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012330:	2300      	movs	r3, #0
 8012332:	2200      	movs	r2, #0
 8012334:	2100      	movs	r1, #0
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f000 fcfb 	bl	8012d32 <USBD_LL_Transmit>

  return USBD_OK;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012346:	b580      	push	{r7, lr}
 8012348:	b082      	sub	sp, #8
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2205      	movs	r2, #5
 8012352:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012356:	2300      	movs	r3, #0
 8012358:	2200      	movs	r2, #0
 801235a:	2100      	movs	r1, #0
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 fd09 	bl	8012d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3708      	adds	r7, #8
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012370:	2200      	movs	r2, #0
 8012372:	4912      	ldr	r1, [pc, #72]	@ (80123bc <MX_USB_DEVICE_Init+0x50>)
 8012374:	4812      	ldr	r0, [pc, #72]	@ (80123c0 <MX_USB_DEVICE_Init+0x54>)
 8012376:	f7fe fcf7 	bl	8010d68 <USBD_Init>
 801237a:	4603      	mov	r3, r0
 801237c:	2b00      	cmp	r3, #0
 801237e:	d001      	beq.n	8012384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012380:	f7f3 fa2e 	bl	80057e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012384:	490f      	ldr	r1, [pc, #60]	@ (80123c4 <MX_USB_DEVICE_Init+0x58>)
 8012386:	480e      	ldr	r0, [pc, #56]	@ (80123c0 <MX_USB_DEVICE_Init+0x54>)
 8012388:	f7fe fd1e 	bl	8010dc8 <USBD_RegisterClass>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d001      	beq.n	8012396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012392:	f7f3 fa25 	bl	80057e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012396:	490c      	ldr	r1, [pc, #48]	@ (80123c8 <MX_USB_DEVICE_Init+0x5c>)
 8012398:	4809      	ldr	r0, [pc, #36]	@ (80123c0 <MX_USB_DEVICE_Init+0x54>)
 801239a:	f7fe fc15 	bl	8010bc8 <USBD_CDC_RegisterInterface>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80123a4:	f7f3 fa1c 	bl	80057e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80123a8:	4805      	ldr	r0, [pc, #20]	@ (80123c0 <MX_USB_DEVICE_Init+0x54>)
 80123aa:	f7fe fd43 	bl	8010e34 <USBD_Start>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d001      	beq.n	80123b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80123b4:	f7f3 fa14 	bl	80057e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80123b8:	bf00      	nop
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	200000c4 	.word	0x200000c4
 80123c0:	20001870 	.word	0x20001870
 80123c4:	20000028 	.word	0x20000028
 80123c8:	200000b0 	.word	0x200000b0

080123cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80123d0:	2200      	movs	r2, #0
 80123d2:	4905      	ldr	r1, [pc, #20]	@ (80123e8 <CDC_Init_FS+0x1c>)
 80123d4:	4805      	ldr	r0, [pc, #20]	@ (80123ec <CDC_Init_FS+0x20>)
 80123d6:	f7fe fc11 	bl	8010bfc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80123da:	4905      	ldr	r1, [pc, #20]	@ (80123f0 <CDC_Init_FS+0x24>)
 80123dc:	4803      	ldr	r0, [pc, #12]	@ (80123ec <CDC_Init_FS+0x20>)
 80123de:	f7fe fc2f 	bl	8010c40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80123e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	20001d4c 	.word	0x20001d4c
 80123ec:	20001870 	.word	0x20001870
 80123f0:	20001b4c 	.word	0x20001b4c

080123f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80123f4:	b480      	push	{r7}
 80123f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80123f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr

08012404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012404:	b480      	push	{r7}
 8012406:	b083      	sub	sp, #12
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	6039      	str	r1, [r7, #0]
 801240e:	71fb      	strb	r3, [r7, #7]
 8012410:	4613      	mov	r3, r2
 8012412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012414:	79fb      	ldrb	r3, [r7, #7]
 8012416:	2b23      	cmp	r3, #35	@ 0x23
 8012418:	f200 8097 	bhi.w	801254a <CDC_Control_FS+0x146>
 801241c:	a201      	add	r2, pc, #4	@ (adr r2, 8012424 <CDC_Control_FS+0x20>)
 801241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012422:	bf00      	nop
 8012424:	0801254b 	.word	0x0801254b
 8012428:	0801254b 	.word	0x0801254b
 801242c:	0801254b 	.word	0x0801254b
 8012430:	0801254b 	.word	0x0801254b
 8012434:	0801254b 	.word	0x0801254b
 8012438:	0801254b 	.word	0x0801254b
 801243c:	0801254b 	.word	0x0801254b
 8012440:	0801254b 	.word	0x0801254b
 8012444:	0801254b 	.word	0x0801254b
 8012448:	0801254b 	.word	0x0801254b
 801244c:	0801254b 	.word	0x0801254b
 8012450:	0801254b 	.word	0x0801254b
 8012454:	0801254b 	.word	0x0801254b
 8012458:	0801254b 	.word	0x0801254b
 801245c:	0801254b 	.word	0x0801254b
 8012460:	0801254b 	.word	0x0801254b
 8012464:	0801254b 	.word	0x0801254b
 8012468:	0801254b 	.word	0x0801254b
 801246c:	0801254b 	.word	0x0801254b
 8012470:	0801254b 	.word	0x0801254b
 8012474:	0801254b 	.word	0x0801254b
 8012478:	0801254b 	.word	0x0801254b
 801247c:	0801254b 	.word	0x0801254b
 8012480:	0801254b 	.word	0x0801254b
 8012484:	0801254b 	.word	0x0801254b
 8012488:	0801254b 	.word	0x0801254b
 801248c:	0801254b 	.word	0x0801254b
 8012490:	0801254b 	.word	0x0801254b
 8012494:	0801254b 	.word	0x0801254b
 8012498:	0801254b 	.word	0x0801254b
 801249c:	0801254b 	.word	0x0801254b
 80124a0:	0801254b 	.word	0x0801254b
 80124a4:	080124b5 	.word	0x080124b5
 80124a8:	080124f7 	.word	0x080124f7
 80124ac:	0801254b 	.word	0x0801254b
 80124b0:	0801254b 	.word	0x0801254b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	461a      	mov	r2, r3
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	3301      	adds	r3, #1
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	021b      	lsls	r3, r3, #8
 80124c2:	431a      	orrs	r2, r3
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	3302      	adds	r3, #2
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	041b      	lsls	r3, r3, #16
 80124cc:	431a      	orrs	r2, r3
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	3303      	adds	r3, #3
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	061b      	lsls	r3, r3, #24
 80124d6:	4313      	orrs	r3, r2
 80124d8:	4a20      	ldr	r2, [pc, #128]	@ (801255c <CDC_Control_FS+0x158>)
 80124da:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 80124dc:	683b      	ldr	r3, [r7, #0]
 80124de:	791a      	ldrb	r2, [r3, #4]
 80124e0:	4b1e      	ldr	r3, [pc, #120]	@ (801255c <CDC_Control_FS+0x158>)
 80124e2:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	795a      	ldrb	r2, [r3, #5]
 80124e8:	4b1c      	ldr	r3, [pc, #112]	@ (801255c <CDC_Control_FS+0x158>)
 80124ea:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	799a      	ldrb	r2, [r3, #6]
 80124f0:	4b1a      	ldr	r3, [pc, #104]	@ (801255c <CDC_Control_FS+0x158>)
 80124f2:	719a      	strb	r2, [r3, #6]
    break;
 80124f4:	e02a      	b.n	801254c <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80124f6:	4b19      	ldr	r3, [pc, #100]	@ (801255c <CDC_Control_FS+0x158>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	b2da      	uxtb	r2, r3
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8012500:	4b16      	ldr	r3, [pc, #88]	@ (801255c <CDC_Control_FS+0x158>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	0a1a      	lsrs	r2, r3, #8
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	3301      	adds	r3, #1
 801250a:	b2d2      	uxtb	r2, r2
 801250c:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 801250e:	4b13      	ldr	r3, [pc, #76]	@ (801255c <CDC_Control_FS+0x158>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	0c1a      	lsrs	r2, r3, #16
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	3302      	adds	r3, #2
 8012518:	b2d2      	uxtb	r2, r2
 801251a:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 801251c:	4b0f      	ldr	r3, [pc, #60]	@ (801255c <CDC_Control_FS+0x158>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	0e1a      	lsrs	r2, r3, #24
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	3303      	adds	r3, #3
 8012526:	b2d2      	uxtb	r2, r2
 8012528:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	3304      	adds	r3, #4
 801252e:	4a0b      	ldr	r2, [pc, #44]	@ (801255c <CDC_Control_FS+0x158>)
 8012530:	7912      	ldrb	r2, [r2, #4]
 8012532:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	3305      	adds	r3, #5
 8012538:	4a08      	ldr	r2, [pc, #32]	@ (801255c <CDC_Control_FS+0x158>)
 801253a:	7952      	ldrb	r2, [r2, #5]
 801253c:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	3306      	adds	r3, #6
 8012542:	4a06      	ldr	r2, [pc, #24]	@ (801255c <CDC_Control_FS+0x158>)
 8012544:	7992      	ldrb	r2, [r2, #6]
 8012546:	701a      	strb	r2, [r3, #0]
	break;
 8012548:	e000      	b.n	801254c <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801254a:	bf00      	nop
  }

  return (USBD_OK);
 801254c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	200000a8 	.word	0x200000a8

08012560 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 801256a:	4b0b      	ldr	r3, [pc, #44]	@ (8012598 <CDC_Receive_FS+0x38>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d006      	beq.n	8012580 <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 8012572:	4b09      	ldr	r3, [pc, #36]	@ (8012598 <CDC_Receive_FS+0x38>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	683a      	ldr	r2, [r7, #0]
 8012578:	6812      	ldr	r2, [r2, #0]
 801257a:	4611      	mov	r1, r2
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012580:	6879      	ldr	r1, [r7, #4]
 8012582:	4806      	ldr	r0, [pc, #24]	@ (801259c <CDC_Receive_FS+0x3c>)
 8012584:	f7fe fb5c 	bl	8010c40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012588:	4804      	ldr	r0, [pc, #16]	@ (801259c <CDC_Receive_FS+0x3c>)
 801258a:	f7fe fbb7 	bl	8010cfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801258e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012590:	4618      	mov	r0, r3
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	20001f4c 	.word	0x20001f4c
 801259c:	20001870 	.word	0x20001870

080125a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	460b      	mov	r3, r1
 80125aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80125ac:	2300      	movs	r3, #0
 80125ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80125b0:	4b0d      	ldr	r3, [pc, #52]	@ (80125e8 <CDC_Transmit_FS+0x48>)
 80125b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80125b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d001      	beq.n	80125c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80125c2:	2301      	movs	r3, #1
 80125c4:	e00b      	b.n	80125de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80125c6:	887b      	ldrh	r3, [r7, #2]
 80125c8:	461a      	mov	r2, r3
 80125ca:	6879      	ldr	r1, [r7, #4]
 80125cc:	4806      	ldr	r0, [pc, #24]	@ (80125e8 <CDC_Transmit_FS+0x48>)
 80125ce:	f7fe fb15 	bl	8010bfc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80125d2:	4805      	ldr	r0, [pc, #20]	@ (80125e8 <CDC_Transmit_FS+0x48>)
 80125d4:	f7fe fb52 	bl	8010c7c <USBD_CDC_TransmitPacket>
 80125d8:	4603      	mov	r3, r0
 80125da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80125dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3710      	adds	r7, #16
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	20001870 	.word	0x20001870

080125ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b087      	sub	sp, #28
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	60f8      	str	r0, [r7, #12]
 80125f4:	60b9      	str	r1, [r7, #8]
 80125f6:	4613      	mov	r3, r2
 80125f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80125fa:	2300      	movs	r3, #0
 80125fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80125fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012602:	4618      	mov	r0, r3
 8012604:	371c      	adds	r7, #28
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr
	...

08012610 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 8012610:	b480      	push	{r7}
 8012612:	b083      	sub	sp, #12
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 8012618:	4a04      	ldr	r2, [pc, #16]	@ (801262c <CDC_Attach_Rx+0x1c>)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6013      	str	r3, [r2, #0]
}
 801261e:	bf00      	nop
 8012620:	370c      	adds	r7, #12
 8012622:	46bd      	mov	sp, r7
 8012624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012628:	4770      	bx	lr
 801262a:	bf00      	nop
 801262c:	20001f4c 	.word	0x20001f4c

08012630 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	4603      	mov	r3, r0
 8012638:	6039      	str	r1, [r7, #0]
 801263a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	2212      	movs	r2, #18
 8012640:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012642:	4b03      	ldr	r3, [pc, #12]	@ (8012650 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012644:	4618      	mov	r0, r3
 8012646:	370c      	adds	r7, #12
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	200000e0 	.word	0x200000e0

08012654 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	4603      	mov	r3, r0
 801265c:	6039      	str	r1, [r7, #0]
 801265e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	2204      	movs	r2, #4
 8012664:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012666:	4b03      	ldr	r3, [pc, #12]	@ (8012674 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012668:	4618      	mov	r0, r3
 801266a:	370c      	adds	r7, #12
 801266c:	46bd      	mov	sp, r7
 801266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012672:	4770      	bx	lr
 8012674:	200000f4 	.word	0x200000f4

08012678 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	4603      	mov	r3, r0
 8012680:	6039      	str	r1, [r7, #0]
 8012682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012684:	79fb      	ldrb	r3, [r7, #7]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d105      	bne.n	8012696 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801268a:	683a      	ldr	r2, [r7, #0]
 801268c:	4907      	ldr	r1, [pc, #28]	@ (80126ac <USBD_FS_ProductStrDescriptor+0x34>)
 801268e:	4808      	ldr	r0, [pc, #32]	@ (80126b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012690:	f7ff fd80 	bl	8012194 <USBD_GetString>
 8012694:	e004      	b.n	80126a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012696:	683a      	ldr	r2, [r7, #0]
 8012698:	4904      	ldr	r1, [pc, #16]	@ (80126ac <USBD_FS_ProductStrDescriptor+0x34>)
 801269a:	4805      	ldr	r0, [pc, #20]	@ (80126b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801269c:	f7ff fd7a 	bl	8012194 <USBD_GetString>
  }
  return USBD_StrDesc;
 80126a0:	4b02      	ldr	r3, [pc, #8]	@ (80126ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3708      	adds	r7, #8
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	20001f50 	.word	0x20001f50
 80126b0:	08014934 	.word	0x08014934

080126b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	4603      	mov	r3, r0
 80126bc:	6039      	str	r1, [r7, #0]
 80126be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80126c0:	683a      	ldr	r2, [r7, #0]
 80126c2:	4904      	ldr	r1, [pc, #16]	@ (80126d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80126c4:	4804      	ldr	r0, [pc, #16]	@ (80126d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80126c6:	f7ff fd65 	bl	8012194 <USBD_GetString>
  return USBD_StrDesc;
 80126ca:	4b02      	ldr	r3, [pc, #8]	@ (80126d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3708      	adds	r7, #8
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	20001f50 	.word	0x20001f50
 80126d8:	0801494c 	.word	0x0801494c

080126dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	4603      	mov	r3, r0
 80126e4:	6039      	str	r1, [r7, #0]
 80126e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	221a      	movs	r2, #26
 80126ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80126ee:	f000 f843 	bl	8012778 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80126f2:	4b02      	ldr	r3, [pc, #8]	@ (80126fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	200000f8 	.word	0x200000f8

08012700 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	4603      	mov	r3, r0
 8012708:	6039      	str	r1, [r7, #0]
 801270a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801270c:	79fb      	ldrb	r3, [r7, #7]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d105      	bne.n	801271e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012712:	683a      	ldr	r2, [r7, #0]
 8012714:	4907      	ldr	r1, [pc, #28]	@ (8012734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012716:	4808      	ldr	r0, [pc, #32]	@ (8012738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012718:	f7ff fd3c 	bl	8012194 <USBD_GetString>
 801271c:	e004      	b.n	8012728 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	4904      	ldr	r1, [pc, #16]	@ (8012734 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012722:	4805      	ldr	r0, [pc, #20]	@ (8012738 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012724:	f7ff fd36 	bl	8012194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012728:	4b02      	ldr	r3, [pc, #8]	@ (8012734 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801272a:	4618      	mov	r0, r3
 801272c:	3708      	adds	r7, #8
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20001f50 	.word	0x20001f50
 8012738:	08014960 	.word	0x08014960

0801273c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	4603      	mov	r3, r0
 8012744:	6039      	str	r1, [r7, #0]
 8012746:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012748:	79fb      	ldrb	r3, [r7, #7]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d105      	bne.n	801275a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801274e:	683a      	ldr	r2, [r7, #0]
 8012750:	4907      	ldr	r1, [pc, #28]	@ (8012770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012752:	4808      	ldr	r0, [pc, #32]	@ (8012774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012754:	f7ff fd1e 	bl	8012194 <USBD_GetString>
 8012758:	e004      	b.n	8012764 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801275a:	683a      	ldr	r2, [r7, #0]
 801275c:	4904      	ldr	r1, [pc, #16]	@ (8012770 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801275e:	4805      	ldr	r0, [pc, #20]	@ (8012774 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012760:	f7ff fd18 	bl	8012194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012764:	4b02      	ldr	r3, [pc, #8]	@ (8012770 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012766:	4618      	mov	r0, r3
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	20001f50 	.word	0x20001f50
 8012774:	0801496c 	.word	0x0801496c

08012778 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b084      	sub	sp, #16
 801277c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801277e:	4b0f      	ldr	r3, [pc, #60]	@ (80127bc <Get_SerialNum+0x44>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012784:	4b0e      	ldr	r3, [pc, #56]	@ (80127c0 <Get_SerialNum+0x48>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801278a:	4b0e      	ldr	r3, [pc, #56]	@ (80127c4 <Get_SerialNum+0x4c>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4413      	add	r3, r2
 8012796:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d009      	beq.n	80127b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801279e:	2208      	movs	r2, #8
 80127a0:	4909      	ldr	r1, [pc, #36]	@ (80127c8 <Get_SerialNum+0x50>)
 80127a2:	68f8      	ldr	r0, [r7, #12]
 80127a4:	f000 f814 	bl	80127d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80127a8:	2204      	movs	r2, #4
 80127aa:	4908      	ldr	r1, [pc, #32]	@ (80127cc <Get_SerialNum+0x54>)
 80127ac:	68b8      	ldr	r0, [r7, #8]
 80127ae:	f000 f80f 	bl	80127d0 <IntToUnicode>
  }
}
 80127b2:	bf00      	nop
 80127b4:	3710      	adds	r7, #16
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	bf00      	nop
 80127bc:	1fff7a10 	.word	0x1fff7a10
 80127c0:	1fff7a14 	.word	0x1fff7a14
 80127c4:	1fff7a18 	.word	0x1fff7a18
 80127c8:	200000fa 	.word	0x200000fa
 80127cc:	2000010a 	.word	0x2000010a

080127d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b087      	sub	sp, #28
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	4613      	mov	r3, r2
 80127dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80127de:	2300      	movs	r3, #0
 80127e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80127e2:	2300      	movs	r3, #0
 80127e4:	75fb      	strb	r3, [r7, #23]
 80127e6:	e027      	b.n	8012838 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	0f1b      	lsrs	r3, r3, #28
 80127ec:	2b09      	cmp	r3, #9
 80127ee:	d80b      	bhi.n	8012808 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	0f1b      	lsrs	r3, r3, #28
 80127f4:	b2da      	uxtb	r2, r3
 80127f6:	7dfb      	ldrb	r3, [r7, #23]
 80127f8:	005b      	lsls	r3, r3, #1
 80127fa:	4619      	mov	r1, r3
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	440b      	add	r3, r1
 8012800:	3230      	adds	r2, #48	@ 0x30
 8012802:	b2d2      	uxtb	r2, r2
 8012804:	701a      	strb	r2, [r3, #0]
 8012806:	e00a      	b.n	801281e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	0f1b      	lsrs	r3, r3, #28
 801280c:	b2da      	uxtb	r2, r3
 801280e:	7dfb      	ldrb	r3, [r7, #23]
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	4619      	mov	r1, r3
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	440b      	add	r3, r1
 8012818:	3237      	adds	r2, #55	@ 0x37
 801281a:	b2d2      	uxtb	r2, r2
 801281c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	011b      	lsls	r3, r3, #4
 8012822:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012824:	7dfb      	ldrb	r3, [r7, #23]
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	3301      	adds	r3, #1
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	4413      	add	r3, r2
 801282e:	2200      	movs	r2, #0
 8012830:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012832:	7dfb      	ldrb	r3, [r7, #23]
 8012834:	3301      	adds	r3, #1
 8012836:	75fb      	strb	r3, [r7, #23]
 8012838:	7dfa      	ldrb	r2, [r7, #23]
 801283a:	79fb      	ldrb	r3, [r7, #7]
 801283c:	429a      	cmp	r2, r3
 801283e:	d3d3      	bcc.n	80127e8 <IntToUnicode+0x18>
  }
}
 8012840:	bf00      	nop
 8012842:	bf00      	nop
 8012844:	371c      	adds	r7, #28
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
	...

08012850 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b08a      	sub	sp, #40	@ 0x28
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012858:	f107 0314 	add.w	r3, r7, #20
 801285c:	2200      	movs	r2, #0
 801285e:	601a      	str	r2, [r3, #0]
 8012860:	605a      	str	r2, [r3, #4]
 8012862:	609a      	str	r2, [r3, #8]
 8012864:	60da      	str	r2, [r3, #12]
 8012866:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012870:	d13a      	bne.n	80128e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012872:	2300      	movs	r3, #0
 8012874:	613b      	str	r3, [r7, #16]
 8012876:	4b1e      	ldr	r3, [pc, #120]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 8012878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801287a:	4a1d      	ldr	r2, [pc, #116]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 801287c:	f043 0301 	orr.w	r3, r3, #1
 8012880:	6313      	str	r3, [r2, #48]	@ 0x30
 8012882:	4b1b      	ldr	r3, [pc, #108]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 8012884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012886:	f003 0301 	and.w	r3, r3, #1
 801288a:	613b      	str	r3, [r7, #16]
 801288c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801288e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012894:	2302      	movs	r3, #2
 8012896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012898:	2300      	movs	r3, #0
 801289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801289c:	2303      	movs	r3, #3
 801289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80128a0:	230a      	movs	r3, #10
 80128a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80128a4:	f107 0314 	add.w	r3, r7, #20
 80128a8:	4619      	mov	r1, r3
 80128aa:	4812      	ldr	r0, [pc, #72]	@ (80128f4 <HAL_PCD_MspInit+0xa4>)
 80128ac:	f7f4 fe86 	bl	80075bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80128b0:	4b0f      	ldr	r3, [pc, #60]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 80128b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80128b4:	4a0e      	ldr	r2, [pc, #56]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 80128b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80128bc:	2300      	movs	r3, #0
 80128be:	60fb      	str	r3, [r7, #12]
 80128c0:	4b0b      	ldr	r3, [pc, #44]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 80128c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128c4:	4a0a      	ldr	r2, [pc, #40]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 80128c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80128ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80128cc:	4b08      	ldr	r3, [pc, #32]	@ (80128f0 <HAL_PCD_MspInit+0xa0>)
 80128ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80128d4:	60fb      	str	r3, [r7, #12]
 80128d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80128d8:	2200      	movs	r2, #0
 80128da:	2100      	movs	r1, #0
 80128dc:	2043      	movs	r0, #67	@ 0x43
 80128de:	f7f4 fa1a 	bl	8006d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80128e2:	2043      	movs	r0, #67	@ 0x43
 80128e4:	f7f4 fa33 	bl	8006d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80128e8:	bf00      	nop
 80128ea:	3728      	adds	r7, #40	@ 0x28
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	40023800 	.word	0x40023800
 80128f4:	40020000 	.word	0x40020000

080128f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801290c:	4619      	mov	r1, r3
 801290e:	4610      	mov	r0, r2
 8012910:	f7fe fadd 	bl	8010ece <USBD_LL_SetupStage>
}
 8012914:	bf00      	nop
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	460b      	mov	r3, r1
 8012926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801292e:	78fa      	ldrb	r2, [r7, #3]
 8012930:	6879      	ldr	r1, [r7, #4]
 8012932:	4613      	mov	r3, r2
 8012934:	00db      	lsls	r3, r3, #3
 8012936:	4413      	add	r3, r2
 8012938:	009b      	lsls	r3, r3, #2
 801293a:	440b      	add	r3, r1
 801293c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	78fb      	ldrb	r3, [r7, #3]
 8012944:	4619      	mov	r1, r3
 8012946:	f7fe fb17 	bl	8010f78 <USBD_LL_DataOutStage>
}
 801294a:	bf00      	nop
 801294c:	3708      	adds	r7, #8
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b082      	sub	sp, #8
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
 801295a:	460b      	mov	r3, r1
 801295c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012964:	78fa      	ldrb	r2, [r7, #3]
 8012966:	6879      	ldr	r1, [r7, #4]
 8012968:	4613      	mov	r3, r2
 801296a:	00db      	lsls	r3, r3, #3
 801296c:	4413      	add	r3, r2
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	440b      	add	r3, r1
 8012972:	3320      	adds	r3, #32
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	78fb      	ldrb	r3, [r7, #3]
 8012978:	4619      	mov	r1, r3
 801297a:	f7fe fbb0 	bl	80110de <USBD_LL_DataInStage>
}
 801297e:	bf00      	nop
 8012980:	3708      	adds	r7, #8
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}

08012986 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012986:	b580      	push	{r7, lr}
 8012988:	b082      	sub	sp, #8
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012994:	4618      	mov	r0, r3
 8012996:	f7fe fcea 	bl	801136e <USBD_LL_SOF>
}
 801299a:	bf00      	nop
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129a2:	b580      	push	{r7, lr}
 80129a4:	b084      	sub	sp, #16
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80129aa:	2301      	movs	r3, #1
 80129ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	79db      	ldrb	r3, [r3, #7]
 80129b2:	2b02      	cmp	r3, #2
 80129b4:	d001      	beq.n	80129ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80129b6:	f7f2 ff13 	bl	80057e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80129c0:	7bfa      	ldrb	r2, [r7, #15]
 80129c2:	4611      	mov	r1, r2
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fe fc8e 	bl	80112e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fe fc36 	bl	8011242 <USBD_LL_Reset>
}
 80129d6:	bf00      	nop
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
	...

080129e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fe fc89 	bl	8011306 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	6812      	ldr	r2, [r2, #0]
 8012a02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012a06:	f043 0301 	orr.w	r3, r3, #1
 8012a0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	7adb      	ldrb	r3, [r3, #11]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d005      	beq.n	8012a20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012a14:	4b04      	ldr	r3, [pc, #16]	@ (8012a28 <HAL_PCD_SuspendCallback+0x48>)
 8012a16:	691b      	ldr	r3, [r3, #16]
 8012a18:	4a03      	ldr	r2, [pc, #12]	@ (8012a28 <HAL_PCD_SuspendCallback+0x48>)
 8012a1a:	f043 0306 	orr.w	r3, r3, #6
 8012a1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	e000ed00 	.word	0xe000ed00

08012a2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe fc7f 	bl	801133e <USBD_LL_Resume>
}
 8012a40:	bf00      	nop
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b082      	sub	sp, #8
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	460b      	mov	r3, r1
 8012a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a5a:	78fa      	ldrb	r2, [r7, #3]
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fe fcd7 	bl	8011412 <USBD_LL_IsoOUTIncomplete>
}
 8012a64:	bf00      	nop
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
 8012a74:	460b      	mov	r3, r1
 8012a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a7e:	78fa      	ldrb	r2, [r7, #3]
 8012a80:	4611      	mov	r1, r2
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fe fc93 	bl	80113ae <USBD_LL_IsoINIncomplete>
}
 8012a88:	bf00      	nop
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7fe fce9 	bl	8011476 <USBD_LL_DevConnected>
}
 8012aa4:	bf00      	nop
 8012aa6:	3708      	adds	r7, #8
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}

08012aac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b082      	sub	sp, #8
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fe fce6 	bl	801148c <USBD_LL_DevDisconnected>
}
 8012ac0:	bf00      	nop
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d13c      	bne.n	8012b52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012ad8:	4a20      	ldr	r2, [pc, #128]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012ae4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012aea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012aee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012af0:	4b1a      	ldr	r3, [pc, #104]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012af2:	2204      	movs	r2, #4
 8012af4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012af6:	4b19      	ldr	r3, [pc, #100]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012af8:	2202      	movs	r2, #2
 8012afa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012afc:	4b17      	ldr	r3, [pc, #92]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012afe:	2200      	movs	r2, #0
 8012b00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012b02:	4b16      	ldr	r3, [pc, #88]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b04:	2202      	movs	r2, #2
 8012b06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012b08:	4b14      	ldr	r3, [pc, #80]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012b0e:	4b13      	ldr	r3, [pc, #76]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b10:	2200      	movs	r2, #0
 8012b12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012b14:	4b11      	ldr	r3, [pc, #68]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b16:	2200      	movs	r2, #0
 8012b18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012b1a:	4b10      	ldr	r3, [pc, #64]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012b20:	4b0e      	ldr	r3, [pc, #56]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012b26:	480d      	ldr	r0, [pc, #52]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b28:	f7f8 fb09 	bl	800b13e <HAL_PCD_Init>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d001      	beq.n	8012b36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012b32:	f7f2 fe55 	bl	80057e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012b36:	2180      	movs	r1, #128	@ 0x80
 8012b38:	4808      	ldr	r0, [pc, #32]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b3a:	f7f9 fd36 	bl	800c5aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012b3e:	2240      	movs	r2, #64	@ 0x40
 8012b40:	2100      	movs	r1, #0
 8012b42:	4806      	ldr	r0, [pc, #24]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b44:	f7f9 fcea 	bl	800c51c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012b48:	2280      	movs	r2, #128	@ 0x80
 8012b4a:	2101      	movs	r1, #1
 8012b4c:	4803      	ldr	r0, [pc, #12]	@ (8012b5c <USBD_LL_Init+0x94>)
 8012b4e:	f7f9 fce5 	bl	800c51c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012b52:	2300      	movs	r3, #0
}
 8012b54:	4618      	mov	r0, r3
 8012b56:	3708      	adds	r7, #8
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	bd80      	pop	{r7, pc}
 8012b5c:	20002150 	.word	0x20002150

08012b60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7f8 fbf0 	bl	800b35c <HAL_PCD_Start>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b80:	7bfb      	ldrb	r3, [r7, #15]
 8012b82:	4618      	mov	r0, r3
 8012b84:	f000 f942 	bl	8012e0c <USBD_Get_USB_Status>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3710      	adds	r7, #16
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b084      	sub	sp, #16
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
 8012b9e:	4608      	mov	r0, r1
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	70fb      	strb	r3, [r7, #3]
 8012ba8:	460b      	mov	r3, r1
 8012baa:	70bb      	strb	r3, [r7, #2]
 8012bac:	4613      	mov	r3, r2
 8012bae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012bbe:	78bb      	ldrb	r3, [r7, #2]
 8012bc0:	883a      	ldrh	r2, [r7, #0]
 8012bc2:	78f9      	ldrb	r1, [r7, #3]
 8012bc4:	f7f9 f8c4 	bl	800bd50 <HAL_PCD_EP_Open>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bcc:	7bfb      	ldrb	r3, [r7, #15]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f000 f91c 	bl	8012e0c <USBD_Get_USB_Status>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}

08012be2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b084      	sub	sp, #16
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
 8012bea:	460b      	mov	r3, r1
 8012bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012bfc:	78fa      	ldrb	r2, [r7, #3]
 8012bfe:	4611      	mov	r1, r2
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7f9 f90f 	bl	800be24 <HAL_PCD_EP_Close>
 8012c06:	4603      	mov	r3, r0
 8012c08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c0a:	7bfb      	ldrb	r3, [r7, #15]
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f000 f8fd 	bl	8012e0c <USBD_Get_USB_Status>
 8012c12:	4603      	mov	r3, r0
 8012c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3710      	adds	r7, #16
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	460b      	mov	r3, r1
 8012c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c30:	2300      	movs	r3, #0
 8012c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012c3a:	78fa      	ldrb	r2, [r7, #3]
 8012c3c:	4611      	mov	r1, r2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7f9 f9c7 	bl	800bfd2 <HAL_PCD_EP_SetStall>
 8012c44:	4603      	mov	r3, r0
 8012c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c48:	7bfb      	ldrb	r3, [r7, #15]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f000 f8de 	bl	8012e0c <USBD_Get_USB_Status>
 8012c50:	4603      	mov	r3, r0
 8012c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	3710      	adds	r7, #16
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}

08012c5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c5e:	b580      	push	{r7, lr}
 8012c60:	b084      	sub	sp, #16
 8012c62:	af00      	add	r7, sp, #0
 8012c64:	6078      	str	r0, [r7, #4]
 8012c66:	460b      	mov	r3, r1
 8012c68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012c78:	78fa      	ldrb	r2, [r7, #3]
 8012c7a:	4611      	mov	r1, r2
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7f9 fa0b 	bl	800c098 <HAL_PCD_EP_ClrStall>
 8012c82:	4603      	mov	r3, r0
 8012c84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c86:	7bfb      	ldrb	r3, [r7, #15]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f000 f8bf 	bl	8012e0c <USBD_Get_USB_Status>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3710      	adds	r7, #16
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012cae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	da0b      	bge.n	8012cd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012cb8:	78fb      	ldrb	r3, [r7, #3]
 8012cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012cbe:	68f9      	ldr	r1, [r7, #12]
 8012cc0:	4613      	mov	r3, r2
 8012cc2:	00db      	lsls	r3, r3, #3
 8012cc4:	4413      	add	r3, r2
 8012cc6:	009b      	lsls	r3, r3, #2
 8012cc8:	440b      	add	r3, r1
 8012cca:	3316      	adds	r3, #22
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	e00b      	b.n	8012ce8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012cd0:	78fb      	ldrb	r3, [r7, #3]
 8012cd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012cd6:	68f9      	ldr	r1, [r7, #12]
 8012cd8:	4613      	mov	r3, r2
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	4413      	add	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	440b      	add	r3, r1
 8012ce2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8012ce6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	3714      	adds	r7, #20
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d00:	2300      	movs	r3, #0
 8012d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d04:	2300      	movs	r3, #0
 8012d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012d0e:	78fa      	ldrb	r2, [r7, #3]
 8012d10:	4611      	mov	r1, r2
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f8 fff8 	bl	800bd08 <HAL_PCD_SetAddress>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d1c:	7bfb      	ldrb	r3, [r7, #15]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f000 f874 	bl	8012e0c <USBD_Get_USB_Status>
 8012d24:	4603      	mov	r3, r0
 8012d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b086      	sub	sp, #24
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	60f8      	str	r0, [r7, #12]
 8012d3a:	607a      	str	r2, [r7, #4]
 8012d3c:	603b      	str	r3, [r7, #0]
 8012d3e:	460b      	mov	r3, r1
 8012d40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d42:	2300      	movs	r3, #0
 8012d44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d46:	2300      	movs	r3, #0
 8012d48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012d50:	7af9      	ldrb	r1, [r7, #11]
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	f7f9 f902 	bl	800bf5e <HAL_PCD_EP_Transmit>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d5e:	7dfb      	ldrb	r3, [r7, #23]
 8012d60:	4618      	mov	r0, r3
 8012d62:	f000 f853 	bl	8012e0c <USBD_Get_USB_Status>
 8012d66:	4603      	mov	r3, r0
 8012d68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012d6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3718      	adds	r7, #24
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b086      	sub	sp, #24
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	607a      	str	r2, [r7, #4]
 8012d7e:	603b      	str	r3, [r7, #0]
 8012d80:	460b      	mov	r3, r1
 8012d82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d84:	2300      	movs	r3, #0
 8012d86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012d92:	7af9      	ldrb	r1, [r7, #11]
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	f7f9 f88e 	bl	800beb8 <HAL_PCD_EP_Receive>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012da0:	7dfb      	ldrb	r3, [r7, #23]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f000 f832 	bl	8012e0c <USBD_Get_USB_Status>
 8012da8:	4603      	mov	r3, r0
 8012daa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012dac:	7dbb      	ldrb	r3, [r7, #22]
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3718      	adds	r7, #24
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b082      	sub	sp, #8
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012dc8:	78fa      	ldrb	r2, [r7, #3]
 8012dca:	4611      	mov	r1, r2
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7f9 f8ae 	bl	800bf2e <HAL_PCD_EP_GetRxCount>
 8012dd2:	4603      	mov	r3, r0
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}

08012ddc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012de4:	4b03      	ldr	r3, [pc, #12]	@ (8012df4 <USBD_static_malloc+0x18>)
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop
 8012df4:	20002634 	.word	0x20002634

08012df8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]

}
 8012e00:	bf00      	nop
 8012e02:	370c      	adds	r7, #12
 8012e04:	46bd      	mov	sp, r7
 8012e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0a:	4770      	bx	lr

08012e0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b085      	sub	sp, #20
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	4603      	mov	r3, r0
 8012e14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e16:	2300      	movs	r3, #0
 8012e18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012e1a:	79fb      	ldrb	r3, [r7, #7]
 8012e1c:	2b03      	cmp	r3, #3
 8012e1e:	d817      	bhi.n	8012e50 <USBD_Get_USB_Status+0x44>
 8012e20:	a201      	add	r2, pc, #4	@ (adr r2, 8012e28 <USBD_Get_USB_Status+0x1c>)
 8012e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e26:	bf00      	nop
 8012e28:	08012e39 	.word	0x08012e39
 8012e2c:	08012e3f 	.word	0x08012e3f
 8012e30:	08012e45 	.word	0x08012e45
 8012e34:	08012e4b 	.word	0x08012e4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012e3c:	e00b      	b.n	8012e56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012e3e:	2303      	movs	r3, #3
 8012e40:	73fb      	strb	r3, [r7, #15]
    break;
 8012e42:	e008      	b.n	8012e56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012e44:	2301      	movs	r3, #1
 8012e46:	73fb      	strb	r3, [r7, #15]
    break;
 8012e48:	e005      	b.n	8012e56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012e4a:	2303      	movs	r3, #3
 8012e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8012e4e:	e002      	b.n	8012e56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012e50:	2303      	movs	r3, #3
 8012e52:	73fb      	strb	r3, [r7, #15]
    break;
 8012e54:	bf00      	nop
  }
  return usb_status;
 8012e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3714      	adds	r7, #20
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <__itoa>:
 8012e64:	1e93      	subs	r3, r2, #2
 8012e66:	2b22      	cmp	r3, #34	@ 0x22
 8012e68:	b510      	push	{r4, lr}
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	d904      	bls.n	8012e78 <__itoa+0x14>
 8012e6e:	2300      	movs	r3, #0
 8012e70:	700b      	strb	r3, [r1, #0]
 8012e72:	461c      	mov	r4, r3
 8012e74:	4620      	mov	r0, r4
 8012e76:	bd10      	pop	{r4, pc}
 8012e78:	2a0a      	cmp	r2, #10
 8012e7a:	d109      	bne.n	8012e90 <__itoa+0x2c>
 8012e7c:	2800      	cmp	r0, #0
 8012e7e:	da07      	bge.n	8012e90 <__itoa+0x2c>
 8012e80:	232d      	movs	r3, #45	@ 0x2d
 8012e82:	700b      	strb	r3, [r1, #0]
 8012e84:	4240      	negs	r0, r0
 8012e86:	2101      	movs	r1, #1
 8012e88:	4421      	add	r1, r4
 8012e8a:	f000 f889 	bl	8012fa0 <__utoa>
 8012e8e:	e7f1      	b.n	8012e74 <__itoa+0x10>
 8012e90:	2100      	movs	r1, #0
 8012e92:	e7f9      	b.n	8012e88 <__itoa+0x24>

08012e94 <itoa>:
 8012e94:	f7ff bfe6 	b.w	8012e64 <__itoa>

08012e98 <_strtol_l.isra.0>:
 8012e98:	2b24      	cmp	r3, #36	@ 0x24
 8012e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9e:	4686      	mov	lr, r0
 8012ea0:	4690      	mov	r8, r2
 8012ea2:	d801      	bhi.n	8012ea8 <_strtol_l.isra.0+0x10>
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d106      	bne.n	8012eb6 <_strtol_l.isra.0+0x1e>
 8012ea8:	f000 faa0 	bl	80133ec <__errno>
 8012eac:	2316      	movs	r3, #22
 8012eae:	6003      	str	r3, [r0, #0]
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb6:	4834      	ldr	r0, [pc, #208]	@ (8012f88 <_strtol_l.isra.0+0xf0>)
 8012eb8:	460d      	mov	r5, r1
 8012eba:	462a      	mov	r2, r5
 8012ebc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ec0:	5d06      	ldrb	r6, [r0, r4]
 8012ec2:	f016 0608 	ands.w	r6, r6, #8
 8012ec6:	d1f8      	bne.n	8012eba <_strtol_l.isra.0+0x22>
 8012ec8:	2c2d      	cmp	r4, #45	@ 0x2d
 8012eca:	d110      	bne.n	8012eee <_strtol_l.isra.0+0x56>
 8012ecc:	782c      	ldrb	r4, [r5, #0]
 8012ece:	2601      	movs	r6, #1
 8012ed0:	1c95      	adds	r5, r2, #2
 8012ed2:	f033 0210 	bics.w	r2, r3, #16
 8012ed6:	d115      	bne.n	8012f04 <_strtol_l.isra.0+0x6c>
 8012ed8:	2c30      	cmp	r4, #48	@ 0x30
 8012eda:	d10d      	bne.n	8012ef8 <_strtol_l.isra.0+0x60>
 8012edc:	782a      	ldrb	r2, [r5, #0]
 8012ede:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012ee2:	2a58      	cmp	r2, #88	@ 0x58
 8012ee4:	d108      	bne.n	8012ef8 <_strtol_l.isra.0+0x60>
 8012ee6:	786c      	ldrb	r4, [r5, #1]
 8012ee8:	3502      	adds	r5, #2
 8012eea:	2310      	movs	r3, #16
 8012eec:	e00a      	b.n	8012f04 <_strtol_l.isra.0+0x6c>
 8012eee:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ef0:	bf04      	itt	eq
 8012ef2:	782c      	ldrbeq	r4, [r5, #0]
 8012ef4:	1c95      	addeq	r5, r2, #2
 8012ef6:	e7ec      	b.n	8012ed2 <_strtol_l.isra.0+0x3a>
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1f6      	bne.n	8012eea <_strtol_l.isra.0+0x52>
 8012efc:	2c30      	cmp	r4, #48	@ 0x30
 8012efe:	bf14      	ite	ne
 8012f00:	230a      	movne	r3, #10
 8012f02:	2308      	moveq	r3, #8
 8012f04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012f08:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	fbbc f9f3 	udiv	r9, ip, r3
 8012f12:	4610      	mov	r0, r2
 8012f14:	fb03 ca19 	mls	sl, r3, r9, ip
 8012f18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012f1c:	2f09      	cmp	r7, #9
 8012f1e:	d80f      	bhi.n	8012f40 <_strtol_l.isra.0+0xa8>
 8012f20:	463c      	mov	r4, r7
 8012f22:	42a3      	cmp	r3, r4
 8012f24:	dd1b      	ble.n	8012f5e <_strtol_l.isra.0+0xc6>
 8012f26:	1c57      	adds	r7, r2, #1
 8012f28:	d007      	beq.n	8012f3a <_strtol_l.isra.0+0xa2>
 8012f2a:	4581      	cmp	r9, r0
 8012f2c:	d314      	bcc.n	8012f58 <_strtol_l.isra.0+0xc0>
 8012f2e:	d101      	bne.n	8012f34 <_strtol_l.isra.0+0x9c>
 8012f30:	45a2      	cmp	sl, r4
 8012f32:	db11      	blt.n	8012f58 <_strtol_l.isra.0+0xc0>
 8012f34:	fb00 4003 	mla	r0, r0, r3, r4
 8012f38:	2201      	movs	r2, #1
 8012f3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f3e:	e7eb      	b.n	8012f18 <_strtol_l.isra.0+0x80>
 8012f40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012f44:	2f19      	cmp	r7, #25
 8012f46:	d801      	bhi.n	8012f4c <_strtol_l.isra.0+0xb4>
 8012f48:	3c37      	subs	r4, #55	@ 0x37
 8012f4a:	e7ea      	b.n	8012f22 <_strtol_l.isra.0+0x8a>
 8012f4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012f50:	2f19      	cmp	r7, #25
 8012f52:	d804      	bhi.n	8012f5e <_strtol_l.isra.0+0xc6>
 8012f54:	3c57      	subs	r4, #87	@ 0x57
 8012f56:	e7e4      	b.n	8012f22 <_strtol_l.isra.0+0x8a>
 8012f58:	f04f 32ff 	mov.w	r2, #4294967295
 8012f5c:	e7ed      	b.n	8012f3a <_strtol_l.isra.0+0xa2>
 8012f5e:	1c53      	adds	r3, r2, #1
 8012f60:	d108      	bne.n	8012f74 <_strtol_l.isra.0+0xdc>
 8012f62:	2322      	movs	r3, #34	@ 0x22
 8012f64:	f8ce 3000 	str.w	r3, [lr]
 8012f68:	4660      	mov	r0, ip
 8012f6a:	f1b8 0f00 	cmp.w	r8, #0
 8012f6e:	d0a0      	beq.n	8012eb2 <_strtol_l.isra.0+0x1a>
 8012f70:	1e69      	subs	r1, r5, #1
 8012f72:	e006      	b.n	8012f82 <_strtol_l.isra.0+0xea>
 8012f74:	b106      	cbz	r6, 8012f78 <_strtol_l.isra.0+0xe0>
 8012f76:	4240      	negs	r0, r0
 8012f78:	f1b8 0f00 	cmp.w	r8, #0
 8012f7c:	d099      	beq.n	8012eb2 <_strtol_l.isra.0+0x1a>
 8012f7e:	2a00      	cmp	r2, #0
 8012f80:	d1f6      	bne.n	8012f70 <_strtol_l.isra.0+0xd8>
 8012f82:	f8c8 1000 	str.w	r1, [r8]
 8012f86:	e794      	b.n	8012eb2 <_strtol_l.isra.0+0x1a>
 8012f88:	08015f12 	.word	0x08015f12

08012f8c <strtol>:
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	460a      	mov	r2, r1
 8012f90:	4601      	mov	r1, r0
 8012f92:	4802      	ldr	r0, [pc, #8]	@ (8012f9c <strtol+0x10>)
 8012f94:	6800      	ldr	r0, [r0, #0]
 8012f96:	f7ff bf7f 	b.w	8012e98 <_strtol_l.isra.0>
 8012f9a:	bf00      	nop
 8012f9c:	20000120 	.word	0x20000120

08012fa0 <__utoa>:
 8012fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fa2:	4c1f      	ldr	r4, [pc, #124]	@ (8013020 <__utoa+0x80>)
 8012fa4:	b08b      	sub	sp, #44	@ 0x2c
 8012fa6:	4605      	mov	r5, r0
 8012fa8:	460b      	mov	r3, r1
 8012faa:	466e      	mov	r6, sp
 8012fac:	f104 0c20 	add.w	ip, r4, #32
 8012fb0:	6820      	ldr	r0, [r4, #0]
 8012fb2:	6861      	ldr	r1, [r4, #4]
 8012fb4:	4637      	mov	r7, r6
 8012fb6:	c703      	stmia	r7!, {r0, r1}
 8012fb8:	3408      	adds	r4, #8
 8012fba:	4564      	cmp	r4, ip
 8012fbc:	463e      	mov	r6, r7
 8012fbe:	d1f7      	bne.n	8012fb0 <__utoa+0x10>
 8012fc0:	7921      	ldrb	r1, [r4, #4]
 8012fc2:	7139      	strb	r1, [r7, #4]
 8012fc4:	1e91      	subs	r1, r2, #2
 8012fc6:	6820      	ldr	r0, [r4, #0]
 8012fc8:	6038      	str	r0, [r7, #0]
 8012fca:	2922      	cmp	r1, #34	@ 0x22
 8012fcc:	f04f 0100 	mov.w	r1, #0
 8012fd0:	d904      	bls.n	8012fdc <__utoa+0x3c>
 8012fd2:	7019      	strb	r1, [r3, #0]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	b00b      	add	sp, #44	@ 0x2c
 8012fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fdc:	1e58      	subs	r0, r3, #1
 8012fde:	4684      	mov	ip, r0
 8012fe0:	fbb5 f7f2 	udiv	r7, r5, r2
 8012fe4:	fb02 5617 	mls	r6, r2, r7, r5
 8012fe8:	3628      	adds	r6, #40	@ 0x28
 8012fea:	446e      	add	r6, sp
 8012fec:	460c      	mov	r4, r1
 8012fee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8012ff2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8012ff6:	462e      	mov	r6, r5
 8012ff8:	42b2      	cmp	r2, r6
 8012ffa:	f101 0101 	add.w	r1, r1, #1
 8012ffe:	463d      	mov	r5, r7
 8013000:	d9ee      	bls.n	8012fe0 <__utoa+0x40>
 8013002:	2200      	movs	r2, #0
 8013004:	545a      	strb	r2, [r3, r1]
 8013006:	1919      	adds	r1, r3, r4
 8013008:	1aa5      	subs	r5, r4, r2
 801300a:	42aa      	cmp	r2, r5
 801300c:	dae3      	bge.n	8012fd6 <__utoa+0x36>
 801300e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8013012:	780e      	ldrb	r6, [r1, #0]
 8013014:	7006      	strb	r6, [r0, #0]
 8013016:	3201      	adds	r2, #1
 8013018:	f801 5901 	strb.w	r5, [r1], #-1
 801301c:	e7f4      	b.n	8013008 <__utoa+0x68>
 801301e:	bf00      	nop
 8013020:	08015e0c 	.word	0x08015e0c

08013024 <std>:
 8013024:	2300      	movs	r3, #0
 8013026:	b510      	push	{r4, lr}
 8013028:	4604      	mov	r4, r0
 801302a:	e9c0 3300 	strd	r3, r3, [r0]
 801302e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013032:	6083      	str	r3, [r0, #8]
 8013034:	8181      	strh	r1, [r0, #12]
 8013036:	6643      	str	r3, [r0, #100]	@ 0x64
 8013038:	81c2      	strh	r2, [r0, #14]
 801303a:	6183      	str	r3, [r0, #24]
 801303c:	4619      	mov	r1, r3
 801303e:	2208      	movs	r2, #8
 8013040:	305c      	adds	r0, #92	@ 0x5c
 8013042:	f000 f916 	bl	8013272 <memset>
 8013046:	4b0d      	ldr	r3, [pc, #52]	@ (801307c <std+0x58>)
 8013048:	6263      	str	r3, [r4, #36]	@ 0x24
 801304a:	4b0d      	ldr	r3, [pc, #52]	@ (8013080 <std+0x5c>)
 801304c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801304e:	4b0d      	ldr	r3, [pc, #52]	@ (8013084 <std+0x60>)
 8013050:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013052:	4b0d      	ldr	r3, [pc, #52]	@ (8013088 <std+0x64>)
 8013054:	6323      	str	r3, [r4, #48]	@ 0x30
 8013056:	4b0d      	ldr	r3, [pc, #52]	@ (801308c <std+0x68>)
 8013058:	6224      	str	r4, [r4, #32]
 801305a:	429c      	cmp	r4, r3
 801305c:	d006      	beq.n	801306c <std+0x48>
 801305e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013062:	4294      	cmp	r4, r2
 8013064:	d002      	beq.n	801306c <std+0x48>
 8013066:	33d0      	adds	r3, #208	@ 0xd0
 8013068:	429c      	cmp	r4, r3
 801306a:	d105      	bne.n	8013078 <std+0x54>
 801306c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013074:	f000 b9e4 	b.w	8013440 <__retarget_lock_init_recursive>
 8013078:	bd10      	pop	{r4, pc}
 801307a:	bf00      	nop
 801307c:	080131ed 	.word	0x080131ed
 8013080:	0801320f 	.word	0x0801320f
 8013084:	08013247 	.word	0x08013247
 8013088:	0801326b 	.word	0x0801326b
 801308c:	20002854 	.word	0x20002854

08013090 <stdio_exit_handler>:
 8013090:	4a02      	ldr	r2, [pc, #8]	@ (801309c <stdio_exit_handler+0xc>)
 8013092:	4903      	ldr	r1, [pc, #12]	@ (80130a0 <stdio_exit_handler+0x10>)
 8013094:	4803      	ldr	r0, [pc, #12]	@ (80130a4 <stdio_exit_handler+0x14>)
 8013096:	f000 b869 	b.w	801316c <_fwalk_sglue>
 801309a:	bf00      	nop
 801309c:	20000114 	.word	0x20000114
 80130a0:	08013d71 	.word	0x08013d71
 80130a4:	20000124 	.word	0x20000124

080130a8 <cleanup_stdio>:
 80130a8:	6841      	ldr	r1, [r0, #4]
 80130aa:	4b0c      	ldr	r3, [pc, #48]	@ (80130dc <cleanup_stdio+0x34>)
 80130ac:	4299      	cmp	r1, r3
 80130ae:	b510      	push	{r4, lr}
 80130b0:	4604      	mov	r4, r0
 80130b2:	d001      	beq.n	80130b8 <cleanup_stdio+0x10>
 80130b4:	f000 fe5c 	bl	8013d70 <_fflush_r>
 80130b8:	68a1      	ldr	r1, [r4, #8]
 80130ba:	4b09      	ldr	r3, [pc, #36]	@ (80130e0 <cleanup_stdio+0x38>)
 80130bc:	4299      	cmp	r1, r3
 80130be:	d002      	beq.n	80130c6 <cleanup_stdio+0x1e>
 80130c0:	4620      	mov	r0, r4
 80130c2:	f000 fe55 	bl	8013d70 <_fflush_r>
 80130c6:	68e1      	ldr	r1, [r4, #12]
 80130c8:	4b06      	ldr	r3, [pc, #24]	@ (80130e4 <cleanup_stdio+0x3c>)
 80130ca:	4299      	cmp	r1, r3
 80130cc:	d004      	beq.n	80130d8 <cleanup_stdio+0x30>
 80130ce:	4620      	mov	r0, r4
 80130d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130d4:	f000 be4c 	b.w	8013d70 <_fflush_r>
 80130d8:	bd10      	pop	{r4, pc}
 80130da:	bf00      	nop
 80130dc:	20002854 	.word	0x20002854
 80130e0:	200028bc 	.word	0x200028bc
 80130e4:	20002924 	.word	0x20002924

080130e8 <global_stdio_init.part.0>:
 80130e8:	b510      	push	{r4, lr}
 80130ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013118 <global_stdio_init.part.0+0x30>)
 80130ec:	4c0b      	ldr	r4, [pc, #44]	@ (801311c <global_stdio_init.part.0+0x34>)
 80130ee:	4a0c      	ldr	r2, [pc, #48]	@ (8013120 <global_stdio_init.part.0+0x38>)
 80130f0:	601a      	str	r2, [r3, #0]
 80130f2:	4620      	mov	r0, r4
 80130f4:	2200      	movs	r2, #0
 80130f6:	2104      	movs	r1, #4
 80130f8:	f7ff ff94 	bl	8013024 <std>
 80130fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013100:	2201      	movs	r2, #1
 8013102:	2109      	movs	r1, #9
 8013104:	f7ff ff8e 	bl	8013024 <std>
 8013108:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801310c:	2202      	movs	r2, #2
 801310e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013112:	2112      	movs	r1, #18
 8013114:	f7ff bf86 	b.w	8013024 <std>
 8013118:	2000298c 	.word	0x2000298c
 801311c:	20002854 	.word	0x20002854
 8013120:	08013091 	.word	0x08013091

08013124 <__sfp_lock_acquire>:
 8013124:	4801      	ldr	r0, [pc, #4]	@ (801312c <__sfp_lock_acquire+0x8>)
 8013126:	f000 b98c 	b.w	8013442 <__retarget_lock_acquire_recursive>
 801312a:	bf00      	nop
 801312c:	20002995 	.word	0x20002995

08013130 <__sfp_lock_release>:
 8013130:	4801      	ldr	r0, [pc, #4]	@ (8013138 <__sfp_lock_release+0x8>)
 8013132:	f000 b987 	b.w	8013444 <__retarget_lock_release_recursive>
 8013136:	bf00      	nop
 8013138:	20002995 	.word	0x20002995

0801313c <__sinit>:
 801313c:	b510      	push	{r4, lr}
 801313e:	4604      	mov	r4, r0
 8013140:	f7ff fff0 	bl	8013124 <__sfp_lock_acquire>
 8013144:	6a23      	ldr	r3, [r4, #32]
 8013146:	b11b      	cbz	r3, 8013150 <__sinit+0x14>
 8013148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801314c:	f7ff bff0 	b.w	8013130 <__sfp_lock_release>
 8013150:	4b04      	ldr	r3, [pc, #16]	@ (8013164 <__sinit+0x28>)
 8013152:	6223      	str	r3, [r4, #32]
 8013154:	4b04      	ldr	r3, [pc, #16]	@ (8013168 <__sinit+0x2c>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d1f5      	bne.n	8013148 <__sinit+0xc>
 801315c:	f7ff ffc4 	bl	80130e8 <global_stdio_init.part.0>
 8013160:	e7f2      	b.n	8013148 <__sinit+0xc>
 8013162:	bf00      	nop
 8013164:	080130a9 	.word	0x080130a9
 8013168:	2000298c 	.word	0x2000298c

0801316c <_fwalk_sglue>:
 801316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013170:	4607      	mov	r7, r0
 8013172:	4688      	mov	r8, r1
 8013174:	4614      	mov	r4, r2
 8013176:	2600      	movs	r6, #0
 8013178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801317c:	f1b9 0901 	subs.w	r9, r9, #1
 8013180:	d505      	bpl.n	801318e <_fwalk_sglue+0x22>
 8013182:	6824      	ldr	r4, [r4, #0]
 8013184:	2c00      	cmp	r4, #0
 8013186:	d1f7      	bne.n	8013178 <_fwalk_sglue+0xc>
 8013188:	4630      	mov	r0, r6
 801318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801318e:	89ab      	ldrh	r3, [r5, #12]
 8013190:	2b01      	cmp	r3, #1
 8013192:	d907      	bls.n	80131a4 <_fwalk_sglue+0x38>
 8013194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013198:	3301      	adds	r3, #1
 801319a:	d003      	beq.n	80131a4 <_fwalk_sglue+0x38>
 801319c:	4629      	mov	r1, r5
 801319e:	4638      	mov	r0, r7
 80131a0:	47c0      	blx	r8
 80131a2:	4306      	orrs	r6, r0
 80131a4:	3568      	adds	r5, #104	@ 0x68
 80131a6:	e7e9      	b.n	801317c <_fwalk_sglue+0x10>

080131a8 <siprintf>:
 80131a8:	b40e      	push	{r1, r2, r3}
 80131aa:	b510      	push	{r4, lr}
 80131ac:	b09d      	sub	sp, #116	@ 0x74
 80131ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80131b0:	9002      	str	r0, [sp, #8]
 80131b2:	9006      	str	r0, [sp, #24]
 80131b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80131b8:	480a      	ldr	r0, [pc, #40]	@ (80131e4 <siprintf+0x3c>)
 80131ba:	9107      	str	r1, [sp, #28]
 80131bc:	9104      	str	r1, [sp, #16]
 80131be:	490a      	ldr	r1, [pc, #40]	@ (80131e8 <siprintf+0x40>)
 80131c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80131c4:	9105      	str	r1, [sp, #20]
 80131c6:	2400      	movs	r4, #0
 80131c8:	a902      	add	r1, sp, #8
 80131ca:	6800      	ldr	r0, [r0, #0]
 80131cc:	9301      	str	r3, [sp, #4]
 80131ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80131d0:	f000 fac2 	bl	8013758 <_svfiprintf_r>
 80131d4:	9b02      	ldr	r3, [sp, #8]
 80131d6:	701c      	strb	r4, [r3, #0]
 80131d8:	b01d      	add	sp, #116	@ 0x74
 80131da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131de:	b003      	add	sp, #12
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	20000120 	.word	0x20000120
 80131e8:	ffff0208 	.word	0xffff0208

080131ec <__sread>:
 80131ec:	b510      	push	{r4, lr}
 80131ee:	460c      	mov	r4, r1
 80131f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131f4:	f000 f8d6 	bl	80133a4 <_read_r>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	bfab      	itete	ge
 80131fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80131fe:	89a3      	ldrhlt	r3, [r4, #12]
 8013200:	181b      	addge	r3, r3, r0
 8013202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013206:	bfac      	ite	ge
 8013208:	6563      	strge	r3, [r4, #84]	@ 0x54
 801320a:	81a3      	strhlt	r3, [r4, #12]
 801320c:	bd10      	pop	{r4, pc}

0801320e <__swrite>:
 801320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013212:	461f      	mov	r7, r3
 8013214:	898b      	ldrh	r3, [r1, #12]
 8013216:	05db      	lsls	r3, r3, #23
 8013218:	4605      	mov	r5, r0
 801321a:	460c      	mov	r4, r1
 801321c:	4616      	mov	r6, r2
 801321e:	d505      	bpl.n	801322c <__swrite+0x1e>
 8013220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013224:	2302      	movs	r3, #2
 8013226:	2200      	movs	r2, #0
 8013228:	f000 f8aa 	bl	8013380 <_lseek_r>
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013236:	81a3      	strh	r3, [r4, #12]
 8013238:	4632      	mov	r2, r6
 801323a:	463b      	mov	r3, r7
 801323c:	4628      	mov	r0, r5
 801323e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013242:	f000 b8c1 	b.w	80133c8 <_write_r>

08013246 <__sseek>:
 8013246:	b510      	push	{r4, lr}
 8013248:	460c      	mov	r4, r1
 801324a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801324e:	f000 f897 	bl	8013380 <_lseek_r>
 8013252:	1c43      	adds	r3, r0, #1
 8013254:	89a3      	ldrh	r3, [r4, #12]
 8013256:	bf15      	itete	ne
 8013258:	6560      	strne	r0, [r4, #84]	@ 0x54
 801325a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801325e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013262:	81a3      	strheq	r3, [r4, #12]
 8013264:	bf18      	it	ne
 8013266:	81a3      	strhne	r3, [r4, #12]
 8013268:	bd10      	pop	{r4, pc}

0801326a <__sclose>:
 801326a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801326e:	f000 b877 	b.w	8013360 <_close_r>

08013272 <memset>:
 8013272:	4402      	add	r2, r0
 8013274:	4603      	mov	r3, r0
 8013276:	4293      	cmp	r3, r2
 8013278:	d100      	bne.n	801327c <memset+0xa>
 801327a:	4770      	bx	lr
 801327c:	f803 1b01 	strb.w	r1, [r3], #1
 8013280:	e7f9      	b.n	8013276 <memset+0x4>

08013282 <strncpy>:
 8013282:	b510      	push	{r4, lr}
 8013284:	3901      	subs	r1, #1
 8013286:	4603      	mov	r3, r0
 8013288:	b132      	cbz	r2, 8013298 <strncpy+0x16>
 801328a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801328e:	f803 4b01 	strb.w	r4, [r3], #1
 8013292:	3a01      	subs	r2, #1
 8013294:	2c00      	cmp	r4, #0
 8013296:	d1f7      	bne.n	8013288 <strncpy+0x6>
 8013298:	441a      	add	r2, r3
 801329a:	2100      	movs	r1, #0
 801329c:	4293      	cmp	r3, r2
 801329e:	d100      	bne.n	80132a2 <strncpy+0x20>
 80132a0:	bd10      	pop	{r4, pc}
 80132a2:	f803 1b01 	strb.w	r1, [r3], #1
 80132a6:	e7f9      	b.n	801329c <strncpy+0x1a>

080132a8 <strtok>:
 80132a8:	4b16      	ldr	r3, [pc, #88]	@ (8013304 <strtok+0x5c>)
 80132aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ae:	681f      	ldr	r7, [r3, #0]
 80132b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80132b2:	4605      	mov	r5, r0
 80132b4:	460e      	mov	r6, r1
 80132b6:	b9ec      	cbnz	r4, 80132f4 <strtok+0x4c>
 80132b8:	2050      	movs	r0, #80	@ 0x50
 80132ba:	f000 f93b 	bl	8013534 <malloc>
 80132be:	4602      	mov	r2, r0
 80132c0:	6478      	str	r0, [r7, #68]	@ 0x44
 80132c2:	b920      	cbnz	r0, 80132ce <strtok+0x26>
 80132c4:	4b10      	ldr	r3, [pc, #64]	@ (8013308 <strtok+0x60>)
 80132c6:	4811      	ldr	r0, [pc, #68]	@ (801330c <strtok+0x64>)
 80132c8:	215b      	movs	r1, #91	@ 0x5b
 80132ca:	f000 f8cb 	bl	8013464 <__assert_func>
 80132ce:	e9c0 4400 	strd	r4, r4, [r0]
 80132d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80132d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80132da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80132de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80132e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80132e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80132ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80132ee:	6184      	str	r4, [r0, #24]
 80132f0:	7704      	strb	r4, [r0, #28]
 80132f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80132f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80132f6:	4631      	mov	r1, r6
 80132f8:	4628      	mov	r0, r5
 80132fa:	2301      	movs	r3, #1
 80132fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013300:	f000 b806 	b.w	8013310 <__strtok_r>
 8013304:	20000120 	.word	0x20000120
 8013308:	08015e31 	.word	0x08015e31
 801330c:	08015e48 	.word	0x08015e48

08013310 <__strtok_r>:
 8013310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013312:	4604      	mov	r4, r0
 8013314:	b908      	cbnz	r0, 801331a <__strtok_r+0xa>
 8013316:	6814      	ldr	r4, [r2, #0]
 8013318:	b144      	cbz	r4, 801332c <__strtok_r+0x1c>
 801331a:	4620      	mov	r0, r4
 801331c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013320:	460f      	mov	r7, r1
 8013322:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013326:	b91e      	cbnz	r6, 8013330 <__strtok_r+0x20>
 8013328:	b965      	cbnz	r5, 8013344 <__strtok_r+0x34>
 801332a:	6015      	str	r5, [r2, #0]
 801332c:	2000      	movs	r0, #0
 801332e:	e005      	b.n	801333c <__strtok_r+0x2c>
 8013330:	42b5      	cmp	r5, r6
 8013332:	d1f6      	bne.n	8013322 <__strtok_r+0x12>
 8013334:	2b00      	cmp	r3, #0
 8013336:	d1f0      	bne.n	801331a <__strtok_r+0xa>
 8013338:	6014      	str	r4, [r2, #0]
 801333a:	7003      	strb	r3, [r0, #0]
 801333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801333e:	461c      	mov	r4, r3
 8013340:	e00c      	b.n	801335c <__strtok_r+0x4c>
 8013342:	b91d      	cbnz	r5, 801334c <__strtok_r+0x3c>
 8013344:	4627      	mov	r7, r4
 8013346:	f814 3b01 	ldrb.w	r3, [r4], #1
 801334a:	460e      	mov	r6, r1
 801334c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013350:	42ab      	cmp	r3, r5
 8013352:	d1f6      	bne.n	8013342 <__strtok_r+0x32>
 8013354:	2b00      	cmp	r3, #0
 8013356:	d0f2      	beq.n	801333e <__strtok_r+0x2e>
 8013358:	2300      	movs	r3, #0
 801335a:	703b      	strb	r3, [r7, #0]
 801335c:	6014      	str	r4, [r2, #0]
 801335e:	e7ed      	b.n	801333c <__strtok_r+0x2c>

08013360 <_close_r>:
 8013360:	b538      	push	{r3, r4, r5, lr}
 8013362:	4d06      	ldr	r5, [pc, #24]	@ (801337c <_close_r+0x1c>)
 8013364:	2300      	movs	r3, #0
 8013366:	4604      	mov	r4, r0
 8013368:	4608      	mov	r0, r1
 801336a:	602b      	str	r3, [r5, #0]
 801336c:	f7f2 fd9f 	bl	8005eae <_close>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d102      	bne.n	801337a <_close_r+0x1a>
 8013374:	682b      	ldr	r3, [r5, #0]
 8013376:	b103      	cbz	r3, 801337a <_close_r+0x1a>
 8013378:	6023      	str	r3, [r4, #0]
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	20002990 	.word	0x20002990

08013380 <_lseek_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d07      	ldr	r5, [pc, #28]	@ (80133a0 <_lseek_r+0x20>)
 8013384:	4604      	mov	r4, r0
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	2200      	movs	r2, #0
 801338c:	602a      	str	r2, [r5, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	f7f2 fdb4 	bl	8005efc <_lseek>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_lseek_r+0x1e>
 8013398:	682b      	ldr	r3, [r5, #0]
 801339a:	b103      	cbz	r3, 801339e <_lseek_r+0x1e>
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	20002990 	.word	0x20002990

080133a4 <_read_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d07      	ldr	r5, [pc, #28]	@ (80133c4 <_read_r+0x20>)
 80133a8:	4604      	mov	r4, r0
 80133aa:	4608      	mov	r0, r1
 80133ac:	4611      	mov	r1, r2
 80133ae:	2200      	movs	r2, #0
 80133b0:	602a      	str	r2, [r5, #0]
 80133b2:	461a      	mov	r2, r3
 80133b4:	f7f2 fd42 	bl	8005e3c <_read>
 80133b8:	1c43      	adds	r3, r0, #1
 80133ba:	d102      	bne.n	80133c2 <_read_r+0x1e>
 80133bc:	682b      	ldr	r3, [r5, #0]
 80133be:	b103      	cbz	r3, 80133c2 <_read_r+0x1e>
 80133c0:	6023      	str	r3, [r4, #0]
 80133c2:	bd38      	pop	{r3, r4, r5, pc}
 80133c4:	20002990 	.word	0x20002990

080133c8 <_write_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	4d07      	ldr	r5, [pc, #28]	@ (80133e8 <_write_r+0x20>)
 80133cc:	4604      	mov	r4, r0
 80133ce:	4608      	mov	r0, r1
 80133d0:	4611      	mov	r1, r2
 80133d2:	2200      	movs	r2, #0
 80133d4:	602a      	str	r2, [r5, #0]
 80133d6:	461a      	mov	r2, r3
 80133d8:	f7f2 fd4d 	bl	8005e76 <_write>
 80133dc:	1c43      	adds	r3, r0, #1
 80133de:	d102      	bne.n	80133e6 <_write_r+0x1e>
 80133e0:	682b      	ldr	r3, [r5, #0]
 80133e2:	b103      	cbz	r3, 80133e6 <_write_r+0x1e>
 80133e4:	6023      	str	r3, [r4, #0]
 80133e6:	bd38      	pop	{r3, r4, r5, pc}
 80133e8:	20002990 	.word	0x20002990

080133ec <__errno>:
 80133ec:	4b01      	ldr	r3, [pc, #4]	@ (80133f4 <__errno+0x8>)
 80133ee:	6818      	ldr	r0, [r3, #0]
 80133f0:	4770      	bx	lr
 80133f2:	bf00      	nop
 80133f4:	20000120 	.word	0x20000120

080133f8 <__libc_init_array>:
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	4d0d      	ldr	r5, [pc, #52]	@ (8013430 <__libc_init_array+0x38>)
 80133fc:	4c0d      	ldr	r4, [pc, #52]	@ (8013434 <__libc_init_array+0x3c>)
 80133fe:	1b64      	subs	r4, r4, r5
 8013400:	10a4      	asrs	r4, r4, #2
 8013402:	2600      	movs	r6, #0
 8013404:	42a6      	cmp	r6, r4
 8013406:	d109      	bne.n	801341c <__libc_init_array+0x24>
 8013408:	4d0b      	ldr	r5, [pc, #44]	@ (8013438 <__libc_init_array+0x40>)
 801340a:	4c0c      	ldr	r4, [pc, #48]	@ (801343c <__libc_init_array+0x44>)
 801340c:	f000 ffee 	bl	80143ec <_init>
 8013410:	1b64      	subs	r4, r4, r5
 8013412:	10a4      	asrs	r4, r4, #2
 8013414:	2600      	movs	r6, #0
 8013416:	42a6      	cmp	r6, r4
 8013418:	d105      	bne.n	8013426 <__libc_init_array+0x2e>
 801341a:	bd70      	pop	{r4, r5, r6, pc}
 801341c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013420:	4798      	blx	r3
 8013422:	3601      	adds	r6, #1
 8013424:	e7ee      	b.n	8013404 <__libc_init_array+0xc>
 8013426:	f855 3b04 	ldr.w	r3, [r5], #4
 801342a:	4798      	blx	r3
 801342c:	3601      	adds	r6, #1
 801342e:	e7f2      	b.n	8013416 <__libc_init_array+0x1e>
 8013430:	0801601c 	.word	0x0801601c
 8013434:	0801601c 	.word	0x0801601c
 8013438:	0801601c 	.word	0x0801601c
 801343c:	08016020 	.word	0x08016020

08013440 <__retarget_lock_init_recursive>:
 8013440:	4770      	bx	lr

08013442 <__retarget_lock_acquire_recursive>:
 8013442:	4770      	bx	lr

08013444 <__retarget_lock_release_recursive>:
 8013444:	4770      	bx	lr

08013446 <memcpy>:
 8013446:	440a      	add	r2, r1
 8013448:	4291      	cmp	r1, r2
 801344a:	f100 33ff 	add.w	r3, r0, #4294967295
 801344e:	d100      	bne.n	8013452 <memcpy+0xc>
 8013450:	4770      	bx	lr
 8013452:	b510      	push	{r4, lr}
 8013454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013458:	f803 4f01 	strb.w	r4, [r3, #1]!
 801345c:	4291      	cmp	r1, r2
 801345e:	d1f9      	bne.n	8013454 <memcpy+0xe>
 8013460:	bd10      	pop	{r4, pc}
	...

08013464 <__assert_func>:
 8013464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013466:	4614      	mov	r4, r2
 8013468:	461a      	mov	r2, r3
 801346a:	4b09      	ldr	r3, [pc, #36]	@ (8013490 <__assert_func+0x2c>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4605      	mov	r5, r0
 8013470:	68d8      	ldr	r0, [r3, #12]
 8013472:	b14c      	cbz	r4, 8013488 <__assert_func+0x24>
 8013474:	4b07      	ldr	r3, [pc, #28]	@ (8013494 <__assert_func+0x30>)
 8013476:	9100      	str	r1, [sp, #0]
 8013478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801347c:	4906      	ldr	r1, [pc, #24]	@ (8013498 <__assert_func+0x34>)
 801347e:	462b      	mov	r3, r5
 8013480:	f000 fc9e 	bl	8013dc0 <fiprintf>
 8013484:	f000 fcd8 	bl	8013e38 <abort>
 8013488:	4b04      	ldr	r3, [pc, #16]	@ (801349c <__assert_func+0x38>)
 801348a:	461c      	mov	r4, r3
 801348c:	e7f3      	b.n	8013476 <__assert_func+0x12>
 801348e:	bf00      	nop
 8013490:	20000120 	.word	0x20000120
 8013494:	08015ea2 	.word	0x08015ea2
 8013498:	08015eaf 	.word	0x08015eaf
 801349c:	08015edd 	.word	0x08015edd

080134a0 <_free_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4605      	mov	r5, r0
 80134a4:	2900      	cmp	r1, #0
 80134a6:	d041      	beq.n	801352c <_free_r+0x8c>
 80134a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134ac:	1f0c      	subs	r4, r1, #4
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	bfb8      	it	lt
 80134b2:	18e4      	addlt	r4, r4, r3
 80134b4:	f000 f8e8 	bl	8013688 <__malloc_lock>
 80134b8:	4a1d      	ldr	r2, [pc, #116]	@ (8013530 <_free_r+0x90>)
 80134ba:	6813      	ldr	r3, [r2, #0]
 80134bc:	b933      	cbnz	r3, 80134cc <_free_r+0x2c>
 80134be:	6063      	str	r3, [r4, #4]
 80134c0:	6014      	str	r4, [r2, #0]
 80134c2:	4628      	mov	r0, r5
 80134c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134c8:	f000 b8e4 	b.w	8013694 <__malloc_unlock>
 80134cc:	42a3      	cmp	r3, r4
 80134ce:	d908      	bls.n	80134e2 <_free_r+0x42>
 80134d0:	6820      	ldr	r0, [r4, #0]
 80134d2:	1821      	adds	r1, r4, r0
 80134d4:	428b      	cmp	r3, r1
 80134d6:	bf01      	itttt	eq
 80134d8:	6819      	ldreq	r1, [r3, #0]
 80134da:	685b      	ldreq	r3, [r3, #4]
 80134dc:	1809      	addeq	r1, r1, r0
 80134de:	6021      	streq	r1, [r4, #0]
 80134e0:	e7ed      	b.n	80134be <_free_r+0x1e>
 80134e2:	461a      	mov	r2, r3
 80134e4:	685b      	ldr	r3, [r3, #4]
 80134e6:	b10b      	cbz	r3, 80134ec <_free_r+0x4c>
 80134e8:	42a3      	cmp	r3, r4
 80134ea:	d9fa      	bls.n	80134e2 <_free_r+0x42>
 80134ec:	6811      	ldr	r1, [r2, #0]
 80134ee:	1850      	adds	r0, r2, r1
 80134f0:	42a0      	cmp	r0, r4
 80134f2:	d10b      	bne.n	801350c <_free_r+0x6c>
 80134f4:	6820      	ldr	r0, [r4, #0]
 80134f6:	4401      	add	r1, r0
 80134f8:	1850      	adds	r0, r2, r1
 80134fa:	4283      	cmp	r3, r0
 80134fc:	6011      	str	r1, [r2, #0]
 80134fe:	d1e0      	bne.n	80134c2 <_free_r+0x22>
 8013500:	6818      	ldr	r0, [r3, #0]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	6053      	str	r3, [r2, #4]
 8013506:	4408      	add	r0, r1
 8013508:	6010      	str	r0, [r2, #0]
 801350a:	e7da      	b.n	80134c2 <_free_r+0x22>
 801350c:	d902      	bls.n	8013514 <_free_r+0x74>
 801350e:	230c      	movs	r3, #12
 8013510:	602b      	str	r3, [r5, #0]
 8013512:	e7d6      	b.n	80134c2 <_free_r+0x22>
 8013514:	6820      	ldr	r0, [r4, #0]
 8013516:	1821      	adds	r1, r4, r0
 8013518:	428b      	cmp	r3, r1
 801351a:	bf04      	itt	eq
 801351c:	6819      	ldreq	r1, [r3, #0]
 801351e:	685b      	ldreq	r3, [r3, #4]
 8013520:	6063      	str	r3, [r4, #4]
 8013522:	bf04      	itt	eq
 8013524:	1809      	addeq	r1, r1, r0
 8013526:	6021      	streq	r1, [r4, #0]
 8013528:	6054      	str	r4, [r2, #4]
 801352a:	e7ca      	b.n	80134c2 <_free_r+0x22>
 801352c:	bd38      	pop	{r3, r4, r5, pc}
 801352e:	bf00      	nop
 8013530:	2000299c 	.word	0x2000299c

08013534 <malloc>:
 8013534:	4b02      	ldr	r3, [pc, #8]	@ (8013540 <malloc+0xc>)
 8013536:	4601      	mov	r1, r0
 8013538:	6818      	ldr	r0, [r3, #0]
 801353a:	f000 b825 	b.w	8013588 <_malloc_r>
 801353e:	bf00      	nop
 8013540:	20000120 	.word	0x20000120

08013544 <sbrk_aligned>:
 8013544:	b570      	push	{r4, r5, r6, lr}
 8013546:	4e0f      	ldr	r6, [pc, #60]	@ (8013584 <sbrk_aligned+0x40>)
 8013548:	460c      	mov	r4, r1
 801354a:	6831      	ldr	r1, [r6, #0]
 801354c:	4605      	mov	r5, r0
 801354e:	b911      	cbnz	r1, 8013556 <sbrk_aligned+0x12>
 8013550:	f000 fc62 	bl	8013e18 <_sbrk_r>
 8013554:	6030      	str	r0, [r6, #0]
 8013556:	4621      	mov	r1, r4
 8013558:	4628      	mov	r0, r5
 801355a:	f000 fc5d 	bl	8013e18 <_sbrk_r>
 801355e:	1c43      	adds	r3, r0, #1
 8013560:	d103      	bne.n	801356a <sbrk_aligned+0x26>
 8013562:	f04f 34ff 	mov.w	r4, #4294967295
 8013566:	4620      	mov	r0, r4
 8013568:	bd70      	pop	{r4, r5, r6, pc}
 801356a:	1cc4      	adds	r4, r0, #3
 801356c:	f024 0403 	bic.w	r4, r4, #3
 8013570:	42a0      	cmp	r0, r4
 8013572:	d0f8      	beq.n	8013566 <sbrk_aligned+0x22>
 8013574:	1a21      	subs	r1, r4, r0
 8013576:	4628      	mov	r0, r5
 8013578:	f000 fc4e 	bl	8013e18 <_sbrk_r>
 801357c:	3001      	adds	r0, #1
 801357e:	d1f2      	bne.n	8013566 <sbrk_aligned+0x22>
 8013580:	e7ef      	b.n	8013562 <sbrk_aligned+0x1e>
 8013582:	bf00      	nop
 8013584:	20002998 	.word	0x20002998

08013588 <_malloc_r>:
 8013588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801358c:	1ccd      	adds	r5, r1, #3
 801358e:	f025 0503 	bic.w	r5, r5, #3
 8013592:	3508      	adds	r5, #8
 8013594:	2d0c      	cmp	r5, #12
 8013596:	bf38      	it	cc
 8013598:	250c      	movcc	r5, #12
 801359a:	2d00      	cmp	r5, #0
 801359c:	4606      	mov	r6, r0
 801359e:	db01      	blt.n	80135a4 <_malloc_r+0x1c>
 80135a0:	42a9      	cmp	r1, r5
 80135a2:	d904      	bls.n	80135ae <_malloc_r+0x26>
 80135a4:	230c      	movs	r3, #12
 80135a6:	6033      	str	r3, [r6, #0]
 80135a8:	2000      	movs	r0, #0
 80135aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013684 <_malloc_r+0xfc>
 80135b2:	f000 f869 	bl	8013688 <__malloc_lock>
 80135b6:	f8d8 3000 	ldr.w	r3, [r8]
 80135ba:	461c      	mov	r4, r3
 80135bc:	bb44      	cbnz	r4, 8013610 <_malloc_r+0x88>
 80135be:	4629      	mov	r1, r5
 80135c0:	4630      	mov	r0, r6
 80135c2:	f7ff ffbf 	bl	8013544 <sbrk_aligned>
 80135c6:	1c43      	adds	r3, r0, #1
 80135c8:	4604      	mov	r4, r0
 80135ca:	d158      	bne.n	801367e <_malloc_r+0xf6>
 80135cc:	f8d8 4000 	ldr.w	r4, [r8]
 80135d0:	4627      	mov	r7, r4
 80135d2:	2f00      	cmp	r7, #0
 80135d4:	d143      	bne.n	801365e <_malloc_r+0xd6>
 80135d6:	2c00      	cmp	r4, #0
 80135d8:	d04b      	beq.n	8013672 <_malloc_r+0xea>
 80135da:	6823      	ldr	r3, [r4, #0]
 80135dc:	4639      	mov	r1, r7
 80135de:	4630      	mov	r0, r6
 80135e0:	eb04 0903 	add.w	r9, r4, r3
 80135e4:	f000 fc18 	bl	8013e18 <_sbrk_r>
 80135e8:	4581      	cmp	r9, r0
 80135ea:	d142      	bne.n	8013672 <_malloc_r+0xea>
 80135ec:	6821      	ldr	r1, [r4, #0]
 80135ee:	1a6d      	subs	r5, r5, r1
 80135f0:	4629      	mov	r1, r5
 80135f2:	4630      	mov	r0, r6
 80135f4:	f7ff ffa6 	bl	8013544 <sbrk_aligned>
 80135f8:	3001      	adds	r0, #1
 80135fa:	d03a      	beq.n	8013672 <_malloc_r+0xea>
 80135fc:	6823      	ldr	r3, [r4, #0]
 80135fe:	442b      	add	r3, r5
 8013600:	6023      	str	r3, [r4, #0]
 8013602:	f8d8 3000 	ldr.w	r3, [r8]
 8013606:	685a      	ldr	r2, [r3, #4]
 8013608:	bb62      	cbnz	r2, 8013664 <_malloc_r+0xdc>
 801360a:	f8c8 7000 	str.w	r7, [r8]
 801360e:	e00f      	b.n	8013630 <_malloc_r+0xa8>
 8013610:	6822      	ldr	r2, [r4, #0]
 8013612:	1b52      	subs	r2, r2, r5
 8013614:	d420      	bmi.n	8013658 <_malloc_r+0xd0>
 8013616:	2a0b      	cmp	r2, #11
 8013618:	d917      	bls.n	801364a <_malloc_r+0xc2>
 801361a:	1961      	adds	r1, r4, r5
 801361c:	42a3      	cmp	r3, r4
 801361e:	6025      	str	r5, [r4, #0]
 8013620:	bf18      	it	ne
 8013622:	6059      	strne	r1, [r3, #4]
 8013624:	6863      	ldr	r3, [r4, #4]
 8013626:	bf08      	it	eq
 8013628:	f8c8 1000 	streq.w	r1, [r8]
 801362c:	5162      	str	r2, [r4, r5]
 801362e:	604b      	str	r3, [r1, #4]
 8013630:	4630      	mov	r0, r6
 8013632:	f000 f82f 	bl	8013694 <__malloc_unlock>
 8013636:	f104 000b 	add.w	r0, r4, #11
 801363a:	1d23      	adds	r3, r4, #4
 801363c:	f020 0007 	bic.w	r0, r0, #7
 8013640:	1ac2      	subs	r2, r0, r3
 8013642:	bf1c      	itt	ne
 8013644:	1a1b      	subne	r3, r3, r0
 8013646:	50a3      	strne	r3, [r4, r2]
 8013648:	e7af      	b.n	80135aa <_malloc_r+0x22>
 801364a:	6862      	ldr	r2, [r4, #4]
 801364c:	42a3      	cmp	r3, r4
 801364e:	bf0c      	ite	eq
 8013650:	f8c8 2000 	streq.w	r2, [r8]
 8013654:	605a      	strne	r2, [r3, #4]
 8013656:	e7eb      	b.n	8013630 <_malloc_r+0xa8>
 8013658:	4623      	mov	r3, r4
 801365a:	6864      	ldr	r4, [r4, #4]
 801365c:	e7ae      	b.n	80135bc <_malloc_r+0x34>
 801365e:	463c      	mov	r4, r7
 8013660:	687f      	ldr	r7, [r7, #4]
 8013662:	e7b6      	b.n	80135d2 <_malloc_r+0x4a>
 8013664:	461a      	mov	r2, r3
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	42a3      	cmp	r3, r4
 801366a:	d1fb      	bne.n	8013664 <_malloc_r+0xdc>
 801366c:	2300      	movs	r3, #0
 801366e:	6053      	str	r3, [r2, #4]
 8013670:	e7de      	b.n	8013630 <_malloc_r+0xa8>
 8013672:	230c      	movs	r3, #12
 8013674:	6033      	str	r3, [r6, #0]
 8013676:	4630      	mov	r0, r6
 8013678:	f000 f80c 	bl	8013694 <__malloc_unlock>
 801367c:	e794      	b.n	80135a8 <_malloc_r+0x20>
 801367e:	6005      	str	r5, [r0, #0]
 8013680:	e7d6      	b.n	8013630 <_malloc_r+0xa8>
 8013682:	bf00      	nop
 8013684:	2000299c 	.word	0x2000299c

08013688 <__malloc_lock>:
 8013688:	4801      	ldr	r0, [pc, #4]	@ (8013690 <__malloc_lock+0x8>)
 801368a:	f7ff beda 	b.w	8013442 <__retarget_lock_acquire_recursive>
 801368e:	bf00      	nop
 8013690:	20002994 	.word	0x20002994

08013694 <__malloc_unlock>:
 8013694:	4801      	ldr	r0, [pc, #4]	@ (801369c <__malloc_unlock+0x8>)
 8013696:	f7ff bed5 	b.w	8013444 <__retarget_lock_release_recursive>
 801369a:	bf00      	nop
 801369c:	20002994 	.word	0x20002994

080136a0 <__ssputs_r>:
 80136a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136a4:	688e      	ldr	r6, [r1, #8]
 80136a6:	461f      	mov	r7, r3
 80136a8:	42be      	cmp	r6, r7
 80136aa:	680b      	ldr	r3, [r1, #0]
 80136ac:	4682      	mov	sl, r0
 80136ae:	460c      	mov	r4, r1
 80136b0:	4690      	mov	r8, r2
 80136b2:	d82d      	bhi.n	8013710 <__ssputs_r+0x70>
 80136b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80136b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80136bc:	d026      	beq.n	801370c <__ssputs_r+0x6c>
 80136be:	6965      	ldr	r5, [r4, #20]
 80136c0:	6909      	ldr	r1, [r1, #16]
 80136c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136c6:	eba3 0901 	sub.w	r9, r3, r1
 80136ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136ce:	1c7b      	adds	r3, r7, #1
 80136d0:	444b      	add	r3, r9
 80136d2:	106d      	asrs	r5, r5, #1
 80136d4:	429d      	cmp	r5, r3
 80136d6:	bf38      	it	cc
 80136d8:	461d      	movcc	r5, r3
 80136da:	0553      	lsls	r3, r2, #21
 80136dc:	d527      	bpl.n	801372e <__ssputs_r+0x8e>
 80136de:	4629      	mov	r1, r5
 80136e0:	f7ff ff52 	bl	8013588 <_malloc_r>
 80136e4:	4606      	mov	r6, r0
 80136e6:	b360      	cbz	r0, 8013742 <__ssputs_r+0xa2>
 80136e8:	6921      	ldr	r1, [r4, #16]
 80136ea:	464a      	mov	r2, r9
 80136ec:	f7ff feab 	bl	8013446 <memcpy>
 80136f0:	89a3      	ldrh	r3, [r4, #12]
 80136f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80136f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80136fa:	81a3      	strh	r3, [r4, #12]
 80136fc:	6126      	str	r6, [r4, #16]
 80136fe:	6165      	str	r5, [r4, #20]
 8013700:	444e      	add	r6, r9
 8013702:	eba5 0509 	sub.w	r5, r5, r9
 8013706:	6026      	str	r6, [r4, #0]
 8013708:	60a5      	str	r5, [r4, #8]
 801370a:	463e      	mov	r6, r7
 801370c:	42be      	cmp	r6, r7
 801370e:	d900      	bls.n	8013712 <__ssputs_r+0x72>
 8013710:	463e      	mov	r6, r7
 8013712:	6820      	ldr	r0, [r4, #0]
 8013714:	4632      	mov	r2, r6
 8013716:	4641      	mov	r1, r8
 8013718:	f000 fb64 	bl	8013de4 <memmove>
 801371c:	68a3      	ldr	r3, [r4, #8]
 801371e:	1b9b      	subs	r3, r3, r6
 8013720:	60a3      	str	r3, [r4, #8]
 8013722:	6823      	ldr	r3, [r4, #0]
 8013724:	4433      	add	r3, r6
 8013726:	6023      	str	r3, [r4, #0]
 8013728:	2000      	movs	r0, #0
 801372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801372e:	462a      	mov	r2, r5
 8013730:	f000 fb89 	bl	8013e46 <_realloc_r>
 8013734:	4606      	mov	r6, r0
 8013736:	2800      	cmp	r0, #0
 8013738:	d1e0      	bne.n	80136fc <__ssputs_r+0x5c>
 801373a:	6921      	ldr	r1, [r4, #16]
 801373c:	4650      	mov	r0, sl
 801373e:	f7ff feaf 	bl	80134a0 <_free_r>
 8013742:	230c      	movs	r3, #12
 8013744:	f8ca 3000 	str.w	r3, [sl]
 8013748:	89a3      	ldrh	r3, [r4, #12]
 801374a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801374e:	81a3      	strh	r3, [r4, #12]
 8013750:	f04f 30ff 	mov.w	r0, #4294967295
 8013754:	e7e9      	b.n	801372a <__ssputs_r+0x8a>
	...

08013758 <_svfiprintf_r>:
 8013758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801375c:	4698      	mov	r8, r3
 801375e:	898b      	ldrh	r3, [r1, #12]
 8013760:	061b      	lsls	r3, r3, #24
 8013762:	b09d      	sub	sp, #116	@ 0x74
 8013764:	4607      	mov	r7, r0
 8013766:	460d      	mov	r5, r1
 8013768:	4614      	mov	r4, r2
 801376a:	d510      	bpl.n	801378e <_svfiprintf_r+0x36>
 801376c:	690b      	ldr	r3, [r1, #16]
 801376e:	b973      	cbnz	r3, 801378e <_svfiprintf_r+0x36>
 8013770:	2140      	movs	r1, #64	@ 0x40
 8013772:	f7ff ff09 	bl	8013588 <_malloc_r>
 8013776:	6028      	str	r0, [r5, #0]
 8013778:	6128      	str	r0, [r5, #16]
 801377a:	b930      	cbnz	r0, 801378a <_svfiprintf_r+0x32>
 801377c:	230c      	movs	r3, #12
 801377e:	603b      	str	r3, [r7, #0]
 8013780:	f04f 30ff 	mov.w	r0, #4294967295
 8013784:	b01d      	add	sp, #116	@ 0x74
 8013786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378a:	2340      	movs	r3, #64	@ 0x40
 801378c:	616b      	str	r3, [r5, #20]
 801378e:	2300      	movs	r3, #0
 8013790:	9309      	str	r3, [sp, #36]	@ 0x24
 8013792:	2320      	movs	r3, #32
 8013794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013798:	f8cd 800c 	str.w	r8, [sp, #12]
 801379c:	2330      	movs	r3, #48	@ 0x30
 801379e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801393c <_svfiprintf_r+0x1e4>
 80137a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80137a6:	f04f 0901 	mov.w	r9, #1
 80137aa:	4623      	mov	r3, r4
 80137ac:	469a      	mov	sl, r3
 80137ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137b2:	b10a      	cbz	r2, 80137b8 <_svfiprintf_r+0x60>
 80137b4:	2a25      	cmp	r2, #37	@ 0x25
 80137b6:	d1f9      	bne.n	80137ac <_svfiprintf_r+0x54>
 80137b8:	ebba 0b04 	subs.w	fp, sl, r4
 80137bc:	d00b      	beq.n	80137d6 <_svfiprintf_r+0x7e>
 80137be:	465b      	mov	r3, fp
 80137c0:	4622      	mov	r2, r4
 80137c2:	4629      	mov	r1, r5
 80137c4:	4638      	mov	r0, r7
 80137c6:	f7ff ff6b 	bl	80136a0 <__ssputs_r>
 80137ca:	3001      	adds	r0, #1
 80137cc:	f000 80a7 	beq.w	801391e <_svfiprintf_r+0x1c6>
 80137d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137d2:	445a      	add	r2, fp
 80137d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80137d6:	f89a 3000 	ldrb.w	r3, [sl]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	f000 809f 	beq.w	801391e <_svfiprintf_r+0x1c6>
 80137e0:	2300      	movs	r3, #0
 80137e2:	f04f 32ff 	mov.w	r2, #4294967295
 80137e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137ea:	f10a 0a01 	add.w	sl, sl, #1
 80137ee:	9304      	str	r3, [sp, #16]
 80137f0:	9307      	str	r3, [sp, #28]
 80137f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80137f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80137f8:	4654      	mov	r4, sl
 80137fa:	2205      	movs	r2, #5
 80137fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013800:	484e      	ldr	r0, [pc, #312]	@ (801393c <_svfiprintf_r+0x1e4>)
 8013802:	f7ec fcf5 	bl	80001f0 <memchr>
 8013806:	9a04      	ldr	r2, [sp, #16]
 8013808:	b9d8      	cbnz	r0, 8013842 <_svfiprintf_r+0xea>
 801380a:	06d0      	lsls	r0, r2, #27
 801380c:	bf44      	itt	mi
 801380e:	2320      	movmi	r3, #32
 8013810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013814:	0711      	lsls	r1, r2, #28
 8013816:	bf44      	itt	mi
 8013818:	232b      	movmi	r3, #43	@ 0x2b
 801381a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801381e:	f89a 3000 	ldrb.w	r3, [sl]
 8013822:	2b2a      	cmp	r3, #42	@ 0x2a
 8013824:	d015      	beq.n	8013852 <_svfiprintf_r+0xfa>
 8013826:	9a07      	ldr	r2, [sp, #28]
 8013828:	4654      	mov	r4, sl
 801382a:	2000      	movs	r0, #0
 801382c:	f04f 0c0a 	mov.w	ip, #10
 8013830:	4621      	mov	r1, r4
 8013832:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013836:	3b30      	subs	r3, #48	@ 0x30
 8013838:	2b09      	cmp	r3, #9
 801383a:	d94b      	bls.n	80138d4 <_svfiprintf_r+0x17c>
 801383c:	b1b0      	cbz	r0, 801386c <_svfiprintf_r+0x114>
 801383e:	9207      	str	r2, [sp, #28]
 8013840:	e014      	b.n	801386c <_svfiprintf_r+0x114>
 8013842:	eba0 0308 	sub.w	r3, r0, r8
 8013846:	fa09 f303 	lsl.w	r3, r9, r3
 801384a:	4313      	orrs	r3, r2
 801384c:	9304      	str	r3, [sp, #16]
 801384e:	46a2      	mov	sl, r4
 8013850:	e7d2      	b.n	80137f8 <_svfiprintf_r+0xa0>
 8013852:	9b03      	ldr	r3, [sp, #12]
 8013854:	1d19      	adds	r1, r3, #4
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	9103      	str	r1, [sp, #12]
 801385a:	2b00      	cmp	r3, #0
 801385c:	bfbb      	ittet	lt
 801385e:	425b      	neglt	r3, r3
 8013860:	f042 0202 	orrlt.w	r2, r2, #2
 8013864:	9307      	strge	r3, [sp, #28]
 8013866:	9307      	strlt	r3, [sp, #28]
 8013868:	bfb8      	it	lt
 801386a:	9204      	strlt	r2, [sp, #16]
 801386c:	7823      	ldrb	r3, [r4, #0]
 801386e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013870:	d10a      	bne.n	8013888 <_svfiprintf_r+0x130>
 8013872:	7863      	ldrb	r3, [r4, #1]
 8013874:	2b2a      	cmp	r3, #42	@ 0x2a
 8013876:	d132      	bne.n	80138de <_svfiprintf_r+0x186>
 8013878:	9b03      	ldr	r3, [sp, #12]
 801387a:	1d1a      	adds	r2, r3, #4
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	9203      	str	r2, [sp, #12]
 8013880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013884:	3402      	adds	r4, #2
 8013886:	9305      	str	r3, [sp, #20]
 8013888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801394c <_svfiprintf_r+0x1f4>
 801388c:	7821      	ldrb	r1, [r4, #0]
 801388e:	2203      	movs	r2, #3
 8013890:	4650      	mov	r0, sl
 8013892:	f7ec fcad 	bl	80001f0 <memchr>
 8013896:	b138      	cbz	r0, 80138a8 <_svfiprintf_r+0x150>
 8013898:	9b04      	ldr	r3, [sp, #16]
 801389a:	eba0 000a 	sub.w	r0, r0, sl
 801389e:	2240      	movs	r2, #64	@ 0x40
 80138a0:	4082      	lsls	r2, r0
 80138a2:	4313      	orrs	r3, r2
 80138a4:	3401      	adds	r4, #1
 80138a6:	9304      	str	r3, [sp, #16]
 80138a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138ac:	4824      	ldr	r0, [pc, #144]	@ (8013940 <_svfiprintf_r+0x1e8>)
 80138ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80138b2:	2206      	movs	r2, #6
 80138b4:	f7ec fc9c 	bl	80001f0 <memchr>
 80138b8:	2800      	cmp	r0, #0
 80138ba:	d036      	beq.n	801392a <_svfiprintf_r+0x1d2>
 80138bc:	4b21      	ldr	r3, [pc, #132]	@ (8013944 <_svfiprintf_r+0x1ec>)
 80138be:	bb1b      	cbnz	r3, 8013908 <_svfiprintf_r+0x1b0>
 80138c0:	9b03      	ldr	r3, [sp, #12]
 80138c2:	3307      	adds	r3, #7
 80138c4:	f023 0307 	bic.w	r3, r3, #7
 80138c8:	3308      	adds	r3, #8
 80138ca:	9303      	str	r3, [sp, #12]
 80138cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138ce:	4433      	add	r3, r6
 80138d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80138d2:	e76a      	b.n	80137aa <_svfiprintf_r+0x52>
 80138d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80138d8:	460c      	mov	r4, r1
 80138da:	2001      	movs	r0, #1
 80138dc:	e7a8      	b.n	8013830 <_svfiprintf_r+0xd8>
 80138de:	2300      	movs	r3, #0
 80138e0:	3401      	adds	r4, #1
 80138e2:	9305      	str	r3, [sp, #20]
 80138e4:	4619      	mov	r1, r3
 80138e6:	f04f 0c0a 	mov.w	ip, #10
 80138ea:	4620      	mov	r0, r4
 80138ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138f0:	3a30      	subs	r2, #48	@ 0x30
 80138f2:	2a09      	cmp	r2, #9
 80138f4:	d903      	bls.n	80138fe <_svfiprintf_r+0x1a6>
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d0c6      	beq.n	8013888 <_svfiprintf_r+0x130>
 80138fa:	9105      	str	r1, [sp, #20]
 80138fc:	e7c4      	b.n	8013888 <_svfiprintf_r+0x130>
 80138fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013902:	4604      	mov	r4, r0
 8013904:	2301      	movs	r3, #1
 8013906:	e7f0      	b.n	80138ea <_svfiprintf_r+0x192>
 8013908:	ab03      	add	r3, sp, #12
 801390a:	9300      	str	r3, [sp, #0]
 801390c:	462a      	mov	r2, r5
 801390e:	4b0e      	ldr	r3, [pc, #56]	@ (8013948 <_svfiprintf_r+0x1f0>)
 8013910:	a904      	add	r1, sp, #16
 8013912:	4638      	mov	r0, r7
 8013914:	f3af 8000 	nop.w
 8013918:	1c42      	adds	r2, r0, #1
 801391a:	4606      	mov	r6, r0
 801391c:	d1d6      	bne.n	80138cc <_svfiprintf_r+0x174>
 801391e:	89ab      	ldrh	r3, [r5, #12]
 8013920:	065b      	lsls	r3, r3, #25
 8013922:	f53f af2d 	bmi.w	8013780 <_svfiprintf_r+0x28>
 8013926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013928:	e72c      	b.n	8013784 <_svfiprintf_r+0x2c>
 801392a:	ab03      	add	r3, sp, #12
 801392c:	9300      	str	r3, [sp, #0]
 801392e:	462a      	mov	r2, r5
 8013930:	4b05      	ldr	r3, [pc, #20]	@ (8013948 <_svfiprintf_r+0x1f0>)
 8013932:	a904      	add	r1, sp, #16
 8013934:	4638      	mov	r0, r7
 8013936:	f000 f879 	bl	8013a2c <_printf_i>
 801393a:	e7ed      	b.n	8013918 <_svfiprintf_r+0x1c0>
 801393c:	08015ede 	.word	0x08015ede
 8013940:	08015ee8 	.word	0x08015ee8
 8013944:	00000000 	.word	0x00000000
 8013948:	080136a1 	.word	0x080136a1
 801394c:	08015ee4 	.word	0x08015ee4

08013950 <_printf_common>:
 8013950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013954:	4616      	mov	r6, r2
 8013956:	4698      	mov	r8, r3
 8013958:	688a      	ldr	r2, [r1, #8]
 801395a:	690b      	ldr	r3, [r1, #16]
 801395c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013960:	4293      	cmp	r3, r2
 8013962:	bfb8      	it	lt
 8013964:	4613      	movlt	r3, r2
 8013966:	6033      	str	r3, [r6, #0]
 8013968:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801396c:	4607      	mov	r7, r0
 801396e:	460c      	mov	r4, r1
 8013970:	b10a      	cbz	r2, 8013976 <_printf_common+0x26>
 8013972:	3301      	adds	r3, #1
 8013974:	6033      	str	r3, [r6, #0]
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	0699      	lsls	r1, r3, #26
 801397a:	bf42      	ittt	mi
 801397c:	6833      	ldrmi	r3, [r6, #0]
 801397e:	3302      	addmi	r3, #2
 8013980:	6033      	strmi	r3, [r6, #0]
 8013982:	6825      	ldr	r5, [r4, #0]
 8013984:	f015 0506 	ands.w	r5, r5, #6
 8013988:	d106      	bne.n	8013998 <_printf_common+0x48>
 801398a:	f104 0a19 	add.w	sl, r4, #25
 801398e:	68e3      	ldr	r3, [r4, #12]
 8013990:	6832      	ldr	r2, [r6, #0]
 8013992:	1a9b      	subs	r3, r3, r2
 8013994:	42ab      	cmp	r3, r5
 8013996:	dc26      	bgt.n	80139e6 <_printf_common+0x96>
 8013998:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801399c:	6822      	ldr	r2, [r4, #0]
 801399e:	3b00      	subs	r3, #0
 80139a0:	bf18      	it	ne
 80139a2:	2301      	movne	r3, #1
 80139a4:	0692      	lsls	r2, r2, #26
 80139a6:	d42b      	bmi.n	8013a00 <_printf_common+0xb0>
 80139a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80139ac:	4641      	mov	r1, r8
 80139ae:	4638      	mov	r0, r7
 80139b0:	47c8      	blx	r9
 80139b2:	3001      	adds	r0, #1
 80139b4:	d01e      	beq.n	80139f4 <_printf_common+0xa4>
 80139b6:	6823      	ldr	r3, [r4, #0]
 80139b8:	6922      	ldr	r2, [r4, #16]
 80139ba:	f003 0306 	and.w	r3, r3, #6
 80139be:	2b04      	cmp	r3, #4
 80139c0:	bf02      	ittt	eq
 80139c2:	68e5      	ldreq	r5, [r4, #12]
 80139c4:	6833      	ldreq	r3, [r6, #0]
 80139c6:	1aed      	subeq	r5, r5, r3
 80139c8:	68a3      	ldr	r3, [r4, #8]
 80139ca:	bf0c      	ite	eq
 80139cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139d0:	2500      	movne	r5, #0
 80139d2:	4293      	cmp	r3, r2
 80139d4:	bfc4      	itt	gt
 80139d6:	1a9b      	subgt	r3, r3, r2
 80139d8:	18ed      	addgt	r5, r5, r3
 80139da:	2600      	movs	r6, #0
 80139dc:	341a      	adds	r4, #26
 80139de:	42b5      	cmp	r5, r6
 80139e0:	d11a      	bne.n	8013a18 <_printf_common+0xc8>
 80139e2:	2000      	movs	r0, #0
 80139e4:	e008      	b.n	80139f8 <_printf_common+0xa8>
 80139e6:	2301      	movs	r3, #1
 80139e8:	4652      	mov	r2, sl
 80139ea:	4641      	mov	r1, r8
 80139ec:	4638      	mov	r0, r7
 80139ee:	47c8      	blx	r9
 80139f0:	3001      	adds	r0, #1
 80139f2:	d103      	bne.n	80139fc <_printf_common+0xac>
 80139f4:	f04f 30ff 	mov.w	r0, #4294967295
 80139f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139fc:	3501      	adds	r5, #1
 80139fe:	e7c6      	b.n	801398e <_printf_common+0x3e>
 8013a00:	18e1      	adds	r1, r4, r3
 8013a02:	1c5a      	adds	r2, r3, #1
 8013a04:	2030      	movs	r0, #48	@ 0x30
 8013a06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a0a:	4422      	add	r2, r4
 8013a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a14:	3302      	adds	r3, #2
 8013a16:	e7c7      	b.n	80139a8 <_printf_common+0x58>
 8013a18:	2301      	movs	r3, #1
 8013a1a:	4622      	mov	r2, r4
 8013a1c:	4641      	mov	r1, r8
 8013a1e:	4638      	mov	r0, r7
 8013a20:	47c8      	blx	r9
 8013a22:	3001      	adds	r0, #1
 8013a24:	d0e6      	beq.n	80139f4 <_printf_common+0xa4>
 8013a26:	3601      	adds	r6, #1
 8013a28:	e7d9      	b.n	80139de <_printf_common+0x8e>
	...

08013a2c <_printf_i>:
 8013a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a30:	7e0f      	ldrb	r7, [r1, #24]
 8013a32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a34:	2f78      	cmp	r7, #120	@ 0x78
 8013a36:	4691      	mov	r9, r2
 8013a38:	4680      	mov	r8, r0
 8013a3a:	460c      	mov	r4, r1
 8013a3c:	469a      	mov	sl, r3
 8013a3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013a42:	d807      	bhi.n	8013a54 <_printf_i+0x28>
 8013a44:	2f62      	cmp	r7, #98	@ 0x62
 8013a46:	d80a      	bhi.n	8013a5e <_printf_i+0x32>
 8013a48:	2f00      	cmp	r7, #0
 8013a4a:	f000 80d1 	beq.w	8013bf0 <_printf_i+0x1c4>
 8013a4e:	2f58      	cmp	r7, #88	@ 0x58
 8013a50:	f000 80b8 	beq.w	8013bc4 <_printf_i+0x198>
 8013a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013a5c:	e03a      	b.n	8013ad4 <_printf_i+0xa8>
 8013a5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013a62:	2b15      	cmp	r3, #21
 8013a64:	d8f6      	bhi.n	8013a54 <_printf_i+0x28>
 8013a66:	a101      	add	r1, pc, #4	@ (adr r1, 8013a6c <_printf_i+0x40>)
 8013a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a6c:	08013ac5 	.word	0x08013ac5
 8013a70:	08013ad9 	.word	0x08013ad9
 8013a74:	08013a55 	.word	0x08013a55
 8013a78:	08013a55 	.word	0x08013a55
 8013a7c:	08013a55 	.word	0x08013a55
 8013a80:	08013a55 	.word	0x08013a55
 8013a84:	08013ad9 	.word	0x08013ad9
 8013a88:	08013a55 	.word	0x08013a55
 8013a8c:	08013a55 	.word	0x08013a55
 8013a90:	08013a55 	.word	0x08013a55
 8013a94:	08013a55 	.word	0x08013a55
 8013a98:	08013bd7 	.word	0x08013bd7
 8013a9c:	08013b03 	.word	0x08013b03
 8013aa0:	08013b91 	.word	0x08013b91
 8013aa4:	08013a55 	.word	0x08013a55
 8013aa8:	08013a55 	.word	0x08013a55
 8013aac:	08013bf9 	.word	0x08013bf9
 8013ab0:	08013a55 	.word	0x08013a55
 8013ab4:	08013b03 	.word	0x08013b03
 8013ab8:	08013a55 	.word	0x08013a55
 8013abc:	08013a55 	.word	0x08013a55
 8013ac0:	08013b99 	.word	0x08013b99
 8013ac4:	6833      	ldr	r3, [r6, #0]
 8013ac6:	1d1a      	adds	r2, r3, #4
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	6032      	str	r2, [r6, #0]
 8013acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ad0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	e09c      	b.n	8013c12 <_printf_i+0x1e6>
 8013ad8:	6833      	ldr	r3, [r6, #0]
 8013ada:	6820      	ldr	r0, [r4, #0]
 8013adc:	1d19      	adds	r1, r3, #4
 8013ade:	6031      	str	r1, [r6, #0]
 8013ae0:	0606      	lsls	r6, r0, #24
 8013ae2:	d501      	bpl.n	8013ae8 <_printf_i+0xbc>
 8013ae4:	681d      	ldr	r5, [r3, #0]
 8013ae6:	e003      	b.n	8013af0 <_printf_i+0xc4>
 8013ae8:	0645      	lsls	r5, r0, #25
 8013aea:	d5fb      	bpl.n	8013ae4 <_printf_i+0xb8>
 8013aec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013af0:	2d00      	cmp	r5, #0
 8013af2:	da03      	bge.n	8013afc <_printf_i+0xd0>
 8013af4:	232d      	movs	r3, #45	@ 0x2d
 8013af6:	426d      	negs	r5, r5
 8013af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013afc:	4858      	ldr	r0, [pc, #352]	@ (8013c60 <_printf_i+0x234>)
 8013afe:	230a      	movs	r3, #10
 8013b00:	e011      	b.n	8013b26 <_printf_i+0xfa>
 8013b02:	6821      	ldr	r1, [r4, #0]
 8013b04:	6833      	ldr	r3, [r6, #0]
 8013b06:	0608      	lsls	r0, r1, #24
 8013b08:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b0c:	d402      	bmi.n	8013b14 <_printf_i+0xe8>
 8013b0e:	0649      	lsls	r1, r1, #25
 8013b10:	bf48      	it	mi
 8013b12:	b2ad      	uxthmi	r5, r5
 8013b14:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b16:	4852      	ldr	r0, [pc, #328]	@ (8013c60 <_printf_i+0x234>)
 8013b18:	6033      	str	r3, [r6, #0]
 8013b1a:	bf14      	ite	ne
 8013b1c:	230a      	movne	r3, #10
 8013b1e:	2308      	moveq	r3, #8
 8013b20:	2100      	movs	r1, #0
 8013b22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b26:	6866      	ldr	r6, [r4, #4]
 8013b28:	60a6      	str	r6, [r4, #8]
 8013b2a:	2e00      	cmp	r6, #0
 8013b2c:	db05      	blt.n	8013b3a <_printf_i+0x10e>
 8013b2e:	6821      	ldr	r1, [r4, #0]
 8013b30:	432e      	orrs	r6, r5
 8013b32:	f021 0104 	bic.w	r1, r1, #4
 8013b36:	6021      	str	r1, [r4, #0]
 8013b38:	d04b      	beq.n	8013bd2 <_printf_i+0x1a6>
 8013b3a:	4616      	mov	r6, r2
 8013b3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8013b40:	fb03 5711 	mls	r7, r3, r1, r5
 8013b44:	5dc7      	ldrb	r7, [r0, r7]
 8013b46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013b4a:	462f      	mov	r7, r5
 8013b4c:	42bb      	cmp	r3, r7
 8013b4e:	460d      	mov	r5, r1
 8013b50:	d9f4      	bls.n	8013b3c <_printf_i+0x110>
 8013b52:	2b08      	cmp	r3, #8
 8013b54:	d10b      	bne.n	8013b6e <_printf_i+0x142>
 8013b56:	6823      	ldr	r3, [r4, #0]
 8013b58:	07df      	lsls	r7, r3, #31
 8013b5a:	d508      	bpl.n	8013b6e <_printf_i+0x142>
 8013b5c:	6923      	ldr	r3, [r4, #16]
 8013b5e:	6861      	ldr	r1, [r4, #4]
 8013b60:	4299      	cmp	r1, r3
 8013b62:	bfde      	ittt	le
 8013b64:	2330      	movle	r3, #48	@ 0x30
 8013b66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b6e:	1b92      	subs	r2, r2, r6
 8013b70:	6122      	str	r2, [r4, #16]
 8013b72:	f8cd a000 	str.w	sl, [sp]
 8013b76:	464b      	mov	r3, r9
 8013b78:	aa03      	add	r2, sp, #12
 8013b7a:	4621      	mov	r1, r4
 8013b7c:	4640      	mov	r0, r8
 8013b7e:	f7ff fee7 	bl	8013950 <_printf_common>
 8013b82:	3001      	adds	r0, #1
 8013b84:	d14a      	bne.n	8013c1c <_printf_i+0x1f0>
 8013b86:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8a:	b004      	add	sp, #16
 8013b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b90:	6823      	ldr	r3, [r4, #0]
 8013b92:	f043 0320 	orr.w	r3, r3, #32
 8013b96:	6023      	str	r3, [r4, #0]
 8013b98:	4832      	ldr	r0, [pc, #200]	@ (8013c64 <_printf_i+0x238>)
 8013b9a:	2778      	movs	r7, #120	@ 0x78
 8013b9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013ba0:	6823      	ldr	r3, [r4, #0]
 8013ba2:	6831      	ldr	r1, [r6, #0]
 8013ba4:	061f      	lsls	r7, r3, #24
 8013ba6:	f851 5b04 	ldr.w	r5, [r1], #4
 8013baa:	d402      	bmi.n	8013bb2 <_printf_i+0x186>
 8013bac:	065f      	lsls	r7, r3, #25
 8013bae:	bf48      	it	mi
 8013bb0:	b2ad      	uxthmi	r5, r5
 8013bb2:	6031      	str	r1, [r6, #0]
 8013bb4:	07d9      	lsls	r1, r3, #31
 8013bb6:	bf44      	itt	mi
 8013bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8013bbc:	6023      	strmi	r3, [r4, #0]
 8013bbe:	b11d      	cbz	r5, 8013bc8 <_printf_i+0x19c>
 8013bc0:	2310      	movs	r3, #16
 8013bc2:	e7ad      	b.n	8013b20 <_printf_i+0xf4>
 8013bc4:	4826      	ldr	r0, [pc, #152]	@ (8013c60 <_printf_i+0x234>)
 8013bc6:	e7e9      	b.n	8013b9c <_printf_i+0x170>
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	f023 0320 	bic.w	r3, r3, #32
 8013bce:	6023      	str	r3, [r4, #0]
 8013bd0:	e7f6      	b.n	8013bc0 <_printf_i+0x194>
 8013bd2:	4616      	mov	r6, r2
 8013bd4:	e7bd      	b.n	8013b52 <_printf_i+0x126>
 8013bd6:	6833      	ldr	r3, [r6, #0]
 8013bd8:	6825      	ldr	r5, [r4, #0]
 8013bda:	6961      	ldr	r1, [r4, #20]
 8013bdc:	1d18      	adds	r0, r3, #4
 8013bde:	6030      	str	r0, [r6, #0]
 8013be0:	062e      	lsls	r6, r5, #24
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	d501      	bpl.n	8013bea <_printf_i+0x1be>
 8013be6:	6019      	str	r1, [r3, #0]
 8013be8:	e002      	b.n	8013bf0 <_printf_i+0x1c4>
 8013bea:	0668      	lsls	r0, r5, #25
 8013bec:	d5fb      	bpl.n	8013be6 <_printf_i+0x1ba>
 8013bee:	8019      	strh	r1, [r3, #0]
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	6123      	str	r3, [r4, #16]
 8013bf4:	4616      	mov	r6, r2
 8013bf6:	e7bc      	b.n	8013b72 <_printf_i+0x146>
 8013bf8:	6833      	ldr	r3, [r6, #0]
 8013bfa:	1d1a      	adds	r2, r3, #4
 8013bfc:	6032      	str	r2, [r6, #0]
 8013bfe:	681e      	ldr	r6, [r3, #0]
 8013c00:	6862      	ldr	r2, [r4, #4]
 8013c02:	2100      	movs	r1, #0
 8013c04:	4630      	mov	r0, r6
 8013c06:	f7ec faf3 	bl	80001f0 <memchr>
 8013c0a:	b108      	cbz	r0, 8013c10 <_printf_i+0x1e4>
 8013c0c:	1b80      	subs	r0, r0, r6
 8013c0e:	6060      	str	r0, [r4, #4]
 8013c10:	6863      	ldr	r3, [r4, #4]
 8013c12:	6123      	str	r3, [r4, #16]
 8013c14:	2300      	movs	r3, #0
 8013c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c1a:	e7aa      	b.n	8013b72 <_printf_i+0x146>
 8013c1c:	6923      	ldr	r3, [r4, #16]
 8013c1e:	4632      	mov	r2, r6
 8013c20:	4649      	mov	r1, r9
 8013c22:	4640      	mov	r0, r8
 8013c24:	47d0      	blx	sl
 8013c26:	3001      	adds	r0, #1
 8013c28:	d0ad      	beq.n	8013b86 <_printf_i+0x15a>
 8013c2a:	6823      	ldr	r3, [r4, #0]
 8013c2c:	079b      	lsls	r3, r3, #30
 8013c2e:	d413      	bmi.n	8013c58 <_printf_i+0x22c>
 8013c30:	68e0      	ldr	r0, [r4, #12]
 8013c32:	9b03      	ldr	r3, [sp, #12]
 8013c34:	4298      	cmp	r0, r3
 8013c36:	bfb8      	it	lt
 8013c38:	4618      	movlt	r0, r3
 8013c3a:	e7a6      	b.n	8013b8a <_printf_i+0x15e>
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	4632      	mov	r2, r6
 8013c40:	4649      	mov	r1, r9
 8013c42:	4640      	mov	r0, r8
 8013c44:	47d0      	blx	sl
 8013c46:	3001      	adds	r0, #1
 8013c48:	d09d      	beq.n	8013b86 <_printf_i+0x15a>
 8013c4a:	3501      	adds	r5, #1
 8013c4c:	68e3      	ldr	r3, [r4, #12]
 8013c4e:	9903      	ldr	r1, [sp, #12]
 8013c50:	1a5b      	subs	r3, r3, r1
 8013c52:	42ab      	cmp	r3, r5
 8013c54:	dcf2      	bgt.n	8013c3c <_printf_i+0x210>
 8013c56:	e7eb      	b.n	8013c30 <_printf_i+0x204>
 8013c58:	2500      	movs	r5, #0
 8013c5a:	f104 0619 	add.w	r6, r4, #25
 8013c5e:	e7f5      	b.n	8013c4c <_printf_i+0x220>
 8013c60:	08015eef 	.word	0x08015eef
 8013c64:	08015f00 	.word	0x08015f00

08013c68 <__sflush_r>:
 8013c68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c70:	0716      	lsls	r6, r2, #28
 8013c72:	4605      	mov	r5, r0
 8013c74:	460c      	mov	r4, r1
 8013c76:	d454      	bmi.n	8013d22 <__sflush_r+0xba>
 8013c78:	684b      	ldr	r3, [r1, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	dc02      	bgt.n	8013c84 <__sflush_r+0x1c>
 8013c7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	dd48      	ble.n	8013d16 <__sflush_r+0xae>
 8013c84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013c86:	2e00      	cmp	r6, #0
 8013c88:	d045      	beq.n	8013d16 <__sflush_r+0xae>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013c90:	682f      	ldr	r7, [r5, #0]
 8013c92:	6a21      	ldr	r1, [r4, #32]
 8013c94:	602b      	str	r3, [r5, #0]
 8013c96:	d030      	beq.n	8013cfa <__sflush_r+0x92>
 8013c98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013c9a:	89a3      	ldrh	r3, [r4, #12]
 8013c9c:	0759      	lsls	r1, r3, #29
 8013c9e:	d505      	bpl.n	8013cac <__sflush_r+0x44>
 8013ca0:	6863      	ldr	r3, [r4, #4]
 8013ca2:	1ad2      	subs	r2, r2, r3
 8013ca4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ca6:	b10b      	cbz	r3, 8013cac <__sflush_r+0x44>
 8013ca8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013caa:	1ad2      	subs	r2, r2, r3
 8013cac:	2300      	movs	r3, #0
 8013cae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013cb0:	6a21      	ldr	r1, [r4, #32]
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	47b0      	blx	r6
 8013cb6:	1c43      	adds	r3, r0, #1
 8013cb8:	89a3      	ldrh	r3, [r4, #12]
 8013cba:	d106      	bne.n	8013cca <__sflush_r+0x62>
 8013cbc:	6829      	ldr	r1, [r5, #0]
 8013cbe:	291d      	cmp	r1, #29
 8013cc0:	d82b      	bhi.n	8013d1a <__sflush_r+0xb2>
 8013cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8013d6c <__sflush_r+0x104>)
 8013cc4:	40ca      	lsrs	r2, r1
 8013cc6:	07d6      	lsls	r6, r2, #31
 8013cc8:	d527      	bpl.n	8013d1a <__sflush_r+0xb2>
 8013cca:	2200      	movs	r2, #0
 8013ccc:	6062      	str	r2, [r4, #4]
 8013cce:	04d9      	lsls	r1, r3, #19
 8013cd0:	6922      	ldr	r2, [r4, #16]
 8013cd2:	6022      	str	r2, [r4, #0]
 8013cd4:	d504      	bpl.n	8013ce0 <__sflush_r+0x78>
 8013cd6:	1c42      	adds	r2, r0, #1
 8013cd8:	d101      	bne.n	8013cde <__sflush_r+0x76>
 8013cda:	682b      	ldr	r3, [r5, #0]
 8013cdc:	b903      	cbnz	r3, 8013ce0 <__sflush_r+0x78>
 8013cde:	6560      	str	r0, [r4, #84]	@ 0x54
 8013ce0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ce2:	602f      	str	r7, [r5, #0]
 8013ce4:	b1b9      	cbz	r1, 8013d16 <__sflush_r+0xae>
 8013ce6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013cea:	4299      	cmp	r1, r3
 8013cec:	d002      	beq.n	8013cf4 <__sflush_r+0x8c>
 8013cee:	4628      	mov	r0, r5
 8013cf0:	f7ff fbd6 	bl	80134a0 <_free_r>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	6363      	str	r3, [r4, #52]	@ 0x34
 8013cf8:	e00d      	b.n	8013d16 <__sflush_r+0xae>
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	47b0      	blx	r6
 8013d00:	4602      	mov	r2, r0
 8013d02:	1c50      	adds	r0, r2, #1
 8013d04:	d1c9      	bne.n	8013c9a <__sflush_r+0x32>
 8013d06:	682b      	ldr	r3, [r5, #0]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d0c6      	beq.n	8013c9a <__sflush_r+0x32>
 8013d0c:	2b1d      	cmp	r3, #29
 8013d0e:	d001      	beq.n	8013d14 <__sflush_r+0xac>
 8013d10:	2b16      	cmp	r3, #22
 8013d12:	d11e      	bne.n	8013d52 <__sflush_r+0xea>
 8013d14:	602f      	str	r7, [r5, #0]
 8013d16:	2000      	movs	r0, #0
 8013d18:	e022      	b.n	8013d60 <__sflush_r+0xf8>
 8013d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d1e:	b21b      	sxth	r3, r3
 8013d20:	e01b      	b.n	8013d5a <__sflush_r+0xf2>
 8013d22:	690f      	ldr	r7, [r1, #16]
 8013d24:	2f00      	cmp	r7, #0
 8013d26:	d0f6      	beq.n	8013d16 <__sflush_r+0xae>
 8013d28:	0793      	lsls	r3, r2, #30
 8013d2a:	680e      	ldr	r6, [r1, #0]
 8013d2c:	bf08      	it	eq
 8013d2e:	694b      	ldreq	r3, [r1, #20]
 8013d30:	600f      	str	r7, [r1, #0]
 8013d32:	bf18      	it	ne
 8013d34:	2300      	movne	r3, #0
 8013d36:	eba6 0807 	sub.w	r8, r6, r7
 8013d3a:	608b      	str	r3, [r1, #8]
 8013d3c:	f1b8 0f00 	cmp.w	r8, #0
 8013d40:	dde9      	ble.n	8013d16 <__sflush_r+0xae>
 8013d42:	6a21      	ldr	r1, [r4, #32]
 8013d44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013d46:	4643      	mov	r3, r8
 8013d48:	463a      	mov	r2, r7
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	47b0      	blx	r6
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	dc08      	bgt.n	8013d64 <__sflush_r+0xfc>
 8013d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d5a:	81a3      	strh	r3, [r4, #12]
 8013d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d64:	4407      	add	r7, r0
 8013d66:	eba8 0800 	sub.w	r8, r8, r0
 8013d6a:	e7e7      	b.n	8013d3c <__sflush_r+0xd4>
 8013d6c:	20400001 	.word	0x20400001

08013d70 <_fflush_r>:
 8013d70:	b538      	push	{r3, r4, r5, lr}
 8013d72:	690b      	ldr	r3, [r1, #16]
 8013d74:	4605      	mov	r5, r0
 8013d76:	460c      	mov	r4, r1
 8013d78:	b913      	cbnz	r3, 8013d80 <_fflush_r+0x10>
 8013d7a:	2500      	movs	r5, #0
 8013d7c:	4628      	mov	r0, r5
 8013d7e:	bd38      	pop	{r3, r4, r5, pc}
 8013d80:	b118      	cbz	r0, 8013d8a <_fflush_r+0x1a>
 8013d82:	6a03      	ldr	r3, [r0, #32]
 8013d84:	b90b      	cbnz	r3, 8013d8a <_fflush_r+0x1a>
 8013d86:	f7ff f9d9 	bl	801313c <__sinit>
 8013d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d0f3      	beq.n	8013d7a <_fflush_r+0xa>
 8013d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013d94:	07d0      	lsls	r0, r2, #31
 8013d96:	d404      	bmi.n	8013da2 <_fflush_r+0x32>
 8013d98:	0599      	lsls	r1, r3, #22
 8013d9a:	d402      	bmi.n	8013da2 <_fflush_r+0x32>
 8013d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013d9e:	f7ff fb50 	bl	8013442 <__retarget_lock_acquire_recursive>
 8013da2:	4628      	mov	r0, r5
 8013da4:	4621      	mov	r1, r4
 8013da6:	f7ff ff5f 	bl	8013c68 <__sflush_r>
 8013daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013dac:	07da      	lsls	r2, r3, #31
 8013dae:	4605      	mov	r5, r0
 8013db0:	d4e4      	bmi.n	8013d7c <_fflush_r+0xc>
 8013db2:	89a3      	ldrh	r3, [r4, #12]
 8013db4:	059b      	lsls	r3, r3, #22
 8013db6:	d4e1      	bmi.n	8013d7c <_fflush_r+0xc>
 8013db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013dba:	f7ff fb43 	bl	8013444 <__retarget_lock_release_recursive>
 8013dbe:	e7dd      	b.n	8013d7c <_fflush_r+0xc>

08013dc0 <fiprintf>:
 8013dc0:	b40e      	push	{r1, r2, r3}
 8013dc2:	b503      	push	{r0, r1, lr}
 8013dc4:	4601      	mov	r1, r0
 8013dc6:	ab03      	add	r3, sp, #12
 8013dc8:	4805      	ldr	r0, [pc, #20]	@ (8013de0 <fiprintf+0x20>)
 8013dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dce:	6800      	ldr	r0, [r0, #0]
 8013dd0:	9301      	str	r3, [sp, #4]
 8013dd2:	f000 f88f 	bl	8013ef4 <_vfiprintf_r>
 8013dd6:	b002      	add	sp, #8
 8013dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ddc:	b003      	add	sp, #12
 8013dde:	4770      	bx	lr
 8013de0:	20000120 	.word	0x20000120

08013de4 <memmove>:
 8013de4:	4288      	cmp	r0, r1
 8013de6:	b510      	push	{r4, lr}
 8013de8:	eb01 0402 	add.w	r4, r1, r2
 8013dec:	d902      	bls.n	8013df4 <memmove+0x10>
 8013dee:	4284      	cmp	r4, r0
 8013df0:	4623      	mov	r3, r4
 8013df2:	d807      	bhi.n	8013e04 <memmove+0x20>
 8013df4:	1e43      	subs	r3, r0, #1
 8013df6:	42a1      	cmp	r1, r4
 8013df8:	d008      	beq.n	8013e0c <memmove+0x28>
 8013dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e02:	e7f8      	b.n	8013df6 <memmove+0x12>
 8013e04:	4402      	add	r2, r0
 8013e06:	4601      	mov	r1, r0
 8013e08:	428a      	cmp	r2, r1
 8013e0a:	d100      	bne.n	8013e0e <memmove+0x2a>
 8013e0c:	bd10      	pop	{r4, pc}
 8013e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e16:	e7f7      	b.n	8013e08 <memmove+0x24>

08013e18 <_sbrk_r>:
 8013e18:	b538      	push	{r3, r4, r5, lr}
 8013e1a:	4d06      	ldr	r5, [pc, #24]	@ (8013e34 <_sbrk_r+0x1c>)
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	4604      	mov	r4, r0
 8013e20:	4608      	mov	r0, r1
 8013e22:	602b      	str	r3, [r5, #0]
 8013e24:	f7f2 f878 	bl	8005f18 <_sbrk>
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	d102      	bne.n	8013e32 <_sbrk_r+0x1a>
 8013e2c:	682b      	ldr	r3, [r5, #0]
 8013e2e:	b103      	cbz	r3, 8013e32 <_sbrk_r+0x1a>
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	bd38      	pop	{r3, r4, r5, pc}
 8013e34:	20002990 	.word	0x20002990

08013e38 <abort>:
 8013e38:	b508      	push	{r3, lr}
 8013e3a:	2006      	movs	r0, #6
 8013e3c:	f000 fa2e 	bl	801429c <raise>
 8013e40:	2001      	movs	r0, #1
 8013e42:	f7f1 fff0 	bl	8005e26 <_exit>

08013e46 <_realloc_r>:
 8013e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e4a:	4607      	mov	r7, r0
 8013e4c:	4614      	mov	r4, r2
 8013e4e:	460d      	mov	r5, r1
 8013e50:	b921      	cbnz	r1, 8013e5c <_realloc_r+0x16>
 8013e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e56:	4611      	mov	r1, r2
 8013e58:	f7ff bb96 	b.w	8013588 <_malloc_r>
 8013e5c:	b92a      	cbnz	r2, 8013e6a <_realloc_r+0x24>
 8013e5e:	f7ff fb1f 	bl	80134a0 <_free_r>
 8013e62:	4625      	mov	r5, r4
 8013e64:	4628      	mov	r0, r5
 8013e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e6a:	f000 fa33 	bl	80142d4 <_malloc_usable_size_r>
 8013e6e:	4284      	cmp	r4, r0
 8013e70:	4606      	mov	r6, r0
 8013e72:	d802      	bhi.n	8013e7a <_realloc_r+0x34>
 8013e74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e78:	d8f4      	bhi.n	8013e64 <_realloc_r+0x1e>
 8013e7a:	4621      	mov	r1, r4
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	f7ff fb83 	bl	8013588 <_malloc_r>
 8013e82:	4680      	mov	r8, r0
 8013e84:	b908      	cbnz	r0, 8013e8a <_realloc_r+0x44>
 8013e86:	4645      	mov	r5, r8
 8013e88:	e7ec      	b.n	8013e64 <_realloc_r+0x1e>
 8013e8a:	42b4      	cmp	r4, r6
 8013e8c:	4622      	mov	r2, r4
 8013e8e:	4629      	mov	r1, r5
 8013e90:	bf28      	it	cs
 8013e92:	4632      	movcs	r2, r6
 8013e94:	f7ff fad7 	bl	8013446 <memcpy>
 8013e98:	4629      	mov	r1, r5
 8013e9a:	4638      	mov	r0, r7
 8013e9c:	f7ff fb00 	bl	80134a0 <_free_r>
 8013ea0:	e7f1      	b.n	8013e86 <_realloc_r+0x40>

08013ea2 <__sfputc_r>:
 8013ea2:	6893      	ldr	r3, [r2, #8]
 8013ea4:	3b01      	subs	r3, #1
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	b410      	push	{r4}
 8013eaa:	6093      	str	r3, [r2, #8]
 8013eac:	da08      	bge.n	8013ec0 <__sfputc_r+0x1e>
 8013eae:	6994      	ldr	r4, [r2, #24]
 8013eb0:	42a3      	cmp	r3, r4
 8013eb2:	db01      	blt.n	8013eb8 <__sfputc_r+0x16>
 8013eb4:	290a      	cmp	r1, #10
 8013eb6:	d103      	bne.n	8013ec0 <__sfputc_r+0x1e>
 8013eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ebc:	f000 b932 	b.w	8014124 <__swbuf_r>
 8013ec0:	6813      	ldr	r3, [r2, #0]
 8013ec2:	1c58      	adds	r0, r3, #1
 8013ec4:	6010      	str	r0, [r2, #0]
 8013ec6:	7019      	strb	r1, [r3, #0]
 8013ec8:	4608      	mov	r0, r1
 8013eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ece:	4770      	bx	lr

08013ed0 <__sfputs_r>:
 8013ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	460f      	mov	r7, r1
 8013ed6:	4614      	mov	r4, r2
 8013ed8:	18d5      	adds	r5, r2, r3
 8013eda:	42ac      	cmp	r4, r5
 8013edc:	d101      	bne.n	8013ee2 <__sfputs_r+0x12>
 8013ede:	2000      	movs	r0, #0
 8013ee0:	e007      	b.n	8013ef2 <__sfputs_r+0x22>
 8013ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ee6:	463a      	mov	r2, r7
 8013ee8:	4630      	mov	r0, r6
 8013eea:	f7ff ffda 	bl	8013ea2 <__sfputc_r>
 8013eee:	1c43      	adds	r3, r0, #1
 8013ef0:	d1f3      	bne.n	8013eda <__sfputs_r+0xa>
 8013ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ef4 <_vfiprintf_r>:
 8013ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	460d      	mov	r5, r1
 8013efa:	b09d      	sub	sp, #116	@ 0x74
 8013efc:	4614      	mov	r4, r2
 8013efe:	4698      	mov	r8, r3
 8013f00:	4606      	mov	r6, r0
 8013f02:	b118      	cbz	r0, 8013f0c <_vfiprintf_r+0x18>
 8013f04:	6a03      	ldr	r3, [r0, #32]
 8013f06:	b90b      	cbnz	r3, 8013f0c <_vfiprintf_r+0x18>
 8013f08:	f7ff f918 	bl	801313c <__sinit>
 8013f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f0e:	07d9      	lsls	r1, r3, #31
 8013f10:	d405      	bmi.n	8013f1e <_vfiprintf_r+0x2a>
 8013f12:	89ab      	ldrh	r3, [r5, #12]
 8013f14:	059a      	lsls	r2, r3, #22
 8013f16:	d402      	bmi.n	8013f1e <_vfiprintf_r+0x2a>
 8013f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f1a:	f7ff fa92 	bl	8013442 <__retarget_lock_acquire_recursive>
 8013f1e:	89ab      	ldrh	r3, [r5, #12]
 8013f20:	071b      	lsls	r3, r3, #28
 8013f22:	d501      	bpl.n	8013f28 <_vfiprintf_r+0x34>
 8013f24:	692b      	ldr	r3, [r5, #16]
 8013f26:	b99b      	cbnz	r3, 8013f50 <_vfiprintf_r+0x5c>
 8013f28:	4629      	mov	r1, r5
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	f000 f938 	bl	80141a0 <__swsetup_r>
 8013f30:	b170      	cbz	r0, 8013f50 <_vfiprintf_r+0x5c>
 8013f32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013f34:	07dc      	lsls	r4, r3, #31
 8013f36:	d504      	bpl.n	8013f42 <_vfiprintf_r+0x4e>
 8013f38:	f04f 30ff 	mov.w	r0, #4294967295
 8013f3c:	b01d      	add	sp, #116	@ 0x74
 8013f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f42:	89ab      	ldrh	r3, [r5, #12]
 8013f44:	0598      	lsls	r0, r3, #22
 8013f46:	d4f7      	bmi.n	8013f38 <_vfiprintf_r+0x44>
 8013f48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013f4a:	f7ff fa7b 	bl	8013444 <__retarget_lock_release_recursive>
 8013f4e:	e7f3      	b.n	8013f38 <_vfiprintf_r+0x44>
 8013f50:	2300      	movs	r3, #0
 8013f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f54:	2320      	movs	r3, #32
 8013f56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f5e:	2330      	movs	r3, #48	@ 0x30
 8013f60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014110 <_vfiprintf_r+0x21c>
 8013f64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f68:	f04f 0901 	mov.w	r9, #1
 8013f6c:	4623      	mov	r3, r4
 8013f6e:	469a      	mov	sl, r3
 8013f70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f74:	b10a      	cbz	r2, 8013f7a <_vfiprintf_r+0x86>
 8013f76:	2a25      	cmp	r2, #37	@ 0x25
 8013f78:	d1f9      	bne.n	8013f6e <_vfiprintf_r+0x7a>
 8013f7a:	ebba 0b04 	subs.w	fp, sl, r4
 8013f7e:	d00b      	beq.n	8013f98 <_vfiprintf_r+0xa4>
 8013f80:	465b      	mov	r3, fp
 8013f82:	4622      	mov	r2, r4
 8013f84:	4629      	mov	r1, r5
 8013f86:	4630      	mov	r0, r6
 8013f88:	f7ff ffa2 	bl	8013ed0 <__sfputs_r>
 8013f8c:	3001      	adds	r0, #1
 8013f8e:	f000 80a7 	beq.w	80140e0 <_vfiprintf_r+0x1ec>
 8013f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f94:	445a      	add	r2, fp
 8013f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f98:	f89a 3000 	ldrb.w	r3, [sl]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f000 809f 	beq.w	80140e0 <_vfiprintf_r+0x1ec>
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fac:	f10a 0a01 	add.w	sl, sl, #1
 8013fb0:	9304      	str	r3, [sp, #16]
 8013fb2:	9307      	str	r3, [sp, #28]
 8013fb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fba:	4654      	mov	r4, sl
 8013fbc:	2205      	movs	r2, #5
 8013fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fc2:	4853      	ldr	r0, [pc, #332]	@ (8014110 <_vfiprintf_r+0x21c>)
 8013fc4:	f7ec f914 	bl	80001f0 <memchr>
 8013fc8:	9a04      	ldr	r2, [sp, #16]
 8013fca:	b9d8      	cbnz	r0, 8014004 <_vfiprintf_r+0x110>
 8013fcc:	06d1      	lsls	r1, r2, #27
 8013fce:	bf44      	itt	mi
 8013fd0:	2320      	movmi	r3, #32
 8013fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fd6:	0713      	lsls	r3, r2, #28
 8013fd8:	bf44      	itt	mi
 8013fda:	232b      	movmi	r3, #43	@ 0x2b
 8013fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8013fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fe6:	d015      	beq.n	8014014 <_vfiprintf_r+0x120>
 8013fe8:	9a07      	ldr	r2, [sp, #28]
 8013fea:	4654      	mov	r4, sl
 8013fec:	2000      	movs	r0, #0
 8013fee:	f04f 0c0a 	mov.w	ip, #10
 8013ff2:	4621      	mov	r1, r4
 8013ff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ff8:	3b30      	subs	r3, #48	@ 0x30
 8013ffa:	2b09      	cmp	r3, #9
 8013ffc:	d94b      	bls.n	8014096 <_vfiprintf_r+0x1a2>
 8013ffe:	b1b0      	cbz	r0, 801402e <_vfiprintf_r+0x13a>
 8014000:	9207      	str	r2, [sp, #28]
 8014002:	e014      	b.n	801402e <_vfiprintf_r+0x13a>
 8014004:	eba0 0308 	sub.w	r3, r0, r8
 8014008:	fa09 f303 	lsl.w	r3, r9, r3
 801400c:	4313      	orrs	r3, r2
 801400e:	9304      	str	r3, [sp, #16]
 8014010:	46a2      	mov	sl, r4
 8014012:	e7d2      	b.n	8013fba <_vfiprintf_r+0xc6>
 8014014:	9b03      	ldr	r3, [sp, #12]
 8014016:	1d19      	adds	r1, r3, #4
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	9103      	str	r1, [sp, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	bfbb      	ittet	lt
 8014020:	425b      	neglt	r3, r3
 8014022:	f042 0202 	orrlt.w	r2, r2, #2
 8014026:	9307      	strge	r3, [sp, #28]
 8014028:	9307      	strlt	r3, [sp, #28]
 801402a:	bfb8      	it	lt
 801402c:	9204      	strlt	r2, [sp, #16]
 801402e:	7823      	ldrb	r3, [r4, #0]
 8014030:	2b2e      	cmp	r3, #46	@ 0x2e
 8014032:	d10a      	bne.n	801404a <_vfiprintf_r+0x156>
 8014034:	7863      	ldrb	r3, [r4, #1]
 8014036:	2b2a      	cmp	r3, #42	@ 0x2a
 8014038:	d132      	bne.n	80140a0 <_vfiprintf_r+0x1ac>
 801403a:	9b03      	ldr	r3, [sp, #12]
 801403c:	1d1a      	adds	r2, r3, #4
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	9203      	str	r2, [sp, #12]
 8014042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014046:	3402      	adds	r4, #2
 8014048:	9305      	str	r3, [sp, #20]
 801404a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014120 <_vfiprintf_r+0x22c>
 801404e:	7821      	ldrb	r1, [r4, #0]
 8014050:	2203      	movs	r2, #3
 8014052:	4650      	mov	r0, sl
 8014054:	f7ec f8cc 	bl	80001f0 <memchr>
 8014058:	b138      	cbz	r0, 801406a <_vfiprintf_r+0x176>
 801405a:	9b04      	ldr	r3, [sp, #16]
 801405c:	eba0 000a 	sub.w	r0, r0, sl
 8014060:	2240      	movs	r2, #64	@ 0x40
 8014062:	4082      	lsls	r2, r0
 8014064:	4313      	orrs	r3, r2
 8014066:	3401      	adds	r4, #1
 8014068:	9304      	str	r3, [sp, #16]
 801406a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801406e:	4829      	ldr	r0, [pc, #164]	@ (8014114 <_vfiprintf_r+0x220>)
 8014070:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014074:	2206      	movs	r2, #6
 8014076:	f7ec f8bb 	bl	80001f0 <memchr>
 801407a:	2800      	cmp	r0, #0
 801407c:	d03f      	beq.n	80140fe <_vfiprintf_r+0x20a>
 801407e:	4b26      	ldr	r3, [pc, #152]	@ (8014118 <_vfiprintf_r+0x224>)
 8014080:	bb1b      	cbnz	r3, 80140ca <_vfiprintf_r+0x1d6>
 8014082:	9b03      	ldr	r3, [sp, #12]
 8014084:	3307      	adds	r3, #7
 8014086:	f023 0307 	bic.w	r3, r3, #7
 801408a:	3308      	adds	r3, #8
 801408c:	9303      	str	r3, [sp, #12]
 801408e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014090:	443b      	add	r3, r7
 8014092:	9309      	str	r3, [sp, #36]	@ 0x24
 8014094:	e76a      	b.n	8013f6c <_vfiprintf_r+0x78>
 8014096:	fb0c 3202 	mla	r2, ip, r2, r3
 801409a:	460c      	mov	r4, r1
 801409c:	2001      	movs	r0, #1
 801409e:	e7a8      	b.n	8013ff2 <_vfiprintf_r+0xfe>
 80140a0:	2300      	movs	r3, #0
 80140a2:	3401      	adds	r4, #1
 80140a4:	9305      	str	r3, [sp, #20]
 80140a6:	4619      	mov	r1, r3
 80140a8:	f04f 0c0a 	mov.w	ip, #10
 80140ac:	4620      	mov	r0, r4
 80140ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140b2:	3a30      	subs	r2, #48	@ 0x30
 80140b4:	2a09      	cmp	r2, #9
 80140b6:	d903      	bls.n	80140c0 <_vfiprintf_r+0x1cc>
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d0c6      	beq.n	801404a <_vfiprintf_r+0x156>
 80140bc:	9105      	str	r1, [sp, #20]
 80140be:	e7c4      	b.n	801404a <_vfiprintf_r+0x156>
 80140c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80140c4:	4604      	mov	r4, r0
 80140c6:	2301      	movs	r3, #1
 80140c8:	e7f0      	b.n	80140ac <_vfiprintf_r+0x1b8>
 80140ca:	ab03      	add	r3, sp, #12
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	462a      	mov	r2, r5
 80140d0:	4b12      	ldr	r3, [pc, #72]	@ (801411c <_vfiprintf_r+0x228>)
 80140d2:	a904      	add	r1, sp, #16
 80140d4:	4630      	mov	r0, r6
 80140d6:	f3af 8000 	nop.w
 80140da:	4607      	mov	r7, r0
 80140dc:	1c78      	adds	r0, r7, #1
 80140de:	d1d6      	bne.n	801408e <_vfiprintf_r+0x19a>
 80140e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140e2:	07d9      	lsls	r1, r3, #31
 80140e4:	d405      	bmi.n	80140f2 <_vfiprintf_r+0x1fe>
 80140e6:	89ab      	ldrh	r3, [r5, #12]
 80140e8:	059a      	lsls	r2, r3, #22
 80140ea:	d402      	bmi.n	80140f2 <_vfiprintf_r+0x1fe>
 80140ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80140ee:	f7ff f9a9 	bl	8013444 <__retarget_lock_release_recursive>
 80140f2:	89ab      	ldrh	r3, [r5, #12]
 80140f4:	065b      	lsls	r3, r3, #25
 80140f6:	f53f af1f 	bmi.w	8013f38 <_vfiprintf_r+0x44>
 80140fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140fc:	e71e      	b.n	8013f3c <_vfiprintf_r+0x48>
 80140fe:	ab03      	add	r3, sp, #12
 8014100:	9300      	str	r3, [sp, #0]
 8014102:	462a      	mov	r2, r5
 8014104:	4b05      	ldr	r3, [pc, #20]	@ (801411c <_vfiprintf_r+0x228>)
 8014106:	a904      	add	r1, sp, #16
 8014108:	4630      	mov	r0, r6
 801410a:	f7ff fc8f 	bl	8013a2c <_printf_i>
 801410e:	e7e4      	b.n	80140da <_vfiprintf_r+0x1e6>
 8014110:	08015ede 	.word	0x08015ede
 8014114:	08015ee8 	.word	0x08015ee8
 8014118:	00000000 	.word	0x00000000
 801411c:	08013ed1 	.word	0x08013ed1
 8014120:	08015ee4 	.word	0x08015ee4

08014124 <__swbuf_r>:
 8014124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014126:	460e      	mov	r6, r1
 8014128:	4614      	mov	r4, r2
 801412a:	4605      	mov	r5, r0
 801412c:	b118      	cbz	r0, 8014136 <__swbuf_r+0x12>
 801412e:	6a03      	ldr	r3, [r0, #32]
 8014130:	b90b      	cbnz	r3, 8014136 <__swbuf_r+0x12>
 8014132:	f7ff f803 	bl	801313c <__sinit>
 8014136:	69a3      	ldr	r3, [r4, #24]
 8014138:	60a3      	str	r3, [r4, #8]
 801413a:	89a3      	ldrh	r3, [r4, #12]
 801413c:	071a      	lsls	r2, r3, #28
 801413e:	d501      	bpl.n	8014144 <__swbuf_r+0x20>
 8014140:	6923      	ldr	r3, [r4, #16]
 8014142:	b943      	cbnz	r3, 8014156 <__swbuf_r+0x32>
 8014144:	4621      	mov	r1, r4
 8014146:	4628      	mov	r0, r5
 8014148:	f000 f82a 	bl	80141a0 <__swsetup_r>
 801414c:	b118      	cbz	r0, 8014156 <__swbuf_r+0x32>
 801414e:	f04f 37ff 	mov.w	r7, #4294967295
 8014152:	4638      	mov	r0, r7
 8014154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014156:	6823      	ldr	r3, [r4, #0]
 8014158:	6922      	ldr	r2, [r4, #16]
 801415a:	1a98      	subs	r0, r3, r2
 801415c:	6963      	ldr	r3, [r4, #20]
 801415e:	b2f6      	uxtb	r6, r6
 8014160:	4283      	cmp	r3, r0
 8014162:	4637      	mov	r7, r6
 8014164:	dc05      	bgt.n	8014172 <__swbuf_r+0x4e>
 8014166:	4621      	mov	r1, r4
 8014168:	4628      	mov	r0, r5
 801416a:	f7ff fe01 	bl	8013d70 <_fflush_r>
 801416e:	2800      	cmp	r0, #0
 8014170:	d1ed      	bne.n	801414e <__swbuf_r+0x2a>
 8014172:	68a3      	ldr	r3, [r4, #8]
 8014174:	3b01      	subs	r3, #1
 8014176:	60a3      	str	r3, [r4, #8]
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	1c5a      	adds	r2, r3, #1
 801417c:	6022      	str	r2, [r4, #0]
 801417e:	701e      	strb	r6, [r3, #0]
 8014180:	6962      	ldr	r2, [r4, #20]
 8014182:	1c43      	adds	r3, r0, #1
 8014184:	429a      	cmp	r2, r3
 8014186:	d004      	beq.n	8014192 <__swbuf_r+0x6e>
 8014188:	89a3      	ldrh	r3, [r4, #12]
 801418a:	07db      	lsls	r3, r3, #31
 801418c:	d5e1      	bpl.n	8014152 <__swbuf_r+0x2e>
 801418e:	2e0a      	cmp	r6, #10
 8014190:	d1df      	bne.n	8014152 <__swbuf_r+0x2e>
 8014192:	4621      	mov	r1, r4
 8014194:	4628      	mov	r0, r5
 8014196:	f7ff fdeb 	bl	8013d70 <_fflush_r>
 801419a:	2800      	cmp	r0, #0
 801419c:	d0d9      	beq.n	8014152 <__swbuf_r+0x2e>
 801419e:	e7d6      	b.n	801414e <__swbuf_r+0x2a>

080141a0 <__swsetup_r>:
 80141a0:	b538      	push	{r3, r4, r5, lr}
 80141a2:	4b29      	ldr	r3, [pc, #164]	@ (8014248 <__swsetup_r+0xa8>)
 80141a4:	4605      	mov	r5, r0
 80141a6:	6818      	ldr	r0, [r3, #0]
 80141a8:	460c      	mov	r4, r1
 80141aa:	b118      	cbz	r0, 80141b4 <__swsetup_r+0x14>
 80141ac:	6a03      	ldr	r3, [r0, #32]
 80141ae:	b90b      	cbnz	r3, 80141b4 <__swsetup_r+0x14>
 80141b0:	f7fe ffc4 	bl	801313c <__sinit>
 80141b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141b8:	0719      	lsls	r1, r3, #28
 80141ba:	d422      	bmi.n	8014202 <__swsetup_r+0x62>
 80141bc:	06da      	lsls	r2, r3, #27
 80141be:	d407      	bmi.n	80141d0 <__swsetup_r+0x30>
 80141c0:	2209      	movs	r2, #9
 80141c2:	602a      	str	r2, [r5, #0]
 80141c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141c8:	81a3      	strh	r3, [r4, #12]
 80141ca:	f04f 30ff 	mov.w	r0, #4294967295
 80141ce:	e033      	b.n	8014238 <__swsetup_r+0x98>
 80141d0:	0758      	lsls	r0, r3, #29
 80141d2:	d512      	bpl.n	80141fa <__swsetup_r+0x5a>
 80141d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80141d6:	b141      	cbz	r1, 80141ea <__swsetup_r+0x4a>
 80141d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141dc:	4299      	cmp	r1, r3
 80141de:	d002      	beq.n	80141e6 <__swsetup_r+0x46>
 80141e0:	4628      	mov	r0, r5
 80141e2:	f7ff f95d 	bl	80134a0 <_free_r>
 80141e6:	2300      	movs	r3, #0
 80141e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80141ea:	89a3      	ldrh	r3, [r4, #12]
 80141ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80141f0:	81a3      	strh	r3, [r4, #12]
 80141f2:	2300      	movs	r3, #0
 80141f4:	6063      	str	r3, [r4, #4]
 80141f6:	6923      	ldr	r3, [r4, #16]
 80141f8:	6023      	str	r3, [r4, #0]
 80141fa:	89a3      	ldrh	r3, [r4, #12]
 80141fc:	f043 0308 	orr.w	r3, r3, #8
 8014200:	81a3      	strh	r3, [r4, #12]
 8014202:	6923      	ldr	r3, [r4, #16]
 8014204:	b94b      	cbnz	r3, 801421a <__swsetup_r+0x7a>
 8014206:	89a3      	ldrh	r3, [r4, #12]
 8014208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801420c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014210:	d003      	beq.n	801421a <__swsetup_r+0x7a>
 8014212:	4621      	mov	r1, r4
 8014214:	4628      	mov	r0, r5
 8014216:	f000 f88b 	bl	8014330 <__smakebuf_r>
 801421a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801421e:	f013 0201 	ands.w	r2, r3, #1
 8014222:	d00a      	beq.n	801423a <__swsetup_r+0x9a>
 8014224:	2200      	movs	r2, #0
 8014226:	60a2      	str	r2, [r4, #8]
 8014228:	6962      	ldr	r2, [r4, #20]
 801422a:	4252      	negs	r2, r2
 801422c:	61a2      	str	r2, [r4, #24]
 801422e:	6922      	ldr	r2, [r4, #16]
 8014230:	b942      	cbnz	r2, 8014244 <__swsetup_r+0xa4>
 8014232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014236:	d1c5      	bne.n	80141c4 <__swsetup_r+0x24>
 8014238:	bd38      	pop	{r3, r4, r5, pc}
 801423a:	0799      	lsls	r1, r3, #30
 801423c:	bf58      	it	pl
 801423e:	6962      	ldrpl	r2, [r4, #20]
 8014240:	60a2      	str	r2, [r4, #8]
 8014242:	e7f4      	b.n	801422e <__swsetup_r+0x8e>
 8014244:	2000      	movs	r0, #0
 8014246:	e7f7      	b.n	8014238 <__swsetup_r+0x98>
 8014248:	20000120 	.word	0x20000120

0801424c <_raise_r>:
 801424c:	291f      	cmp	r1, #31
 801424e:	b538      	push	{r3, r4, r5, lr}
 8014250:	4605      	mov	r5, r0
 8014252:	460c      	mov	r4, r1
 8014254:	d904      	bls.n	8014260 <_raise_r+0x14>
 8014256:	2316      	movs	r3, #22
 8014258:	6003      	str	r3, [r0, #0]
 801425a:	f04f 30ff 	mov.w	r0, #4294967295
 801425e:	bd38      	pop	{r3, r4, r5, pc}
 8014260:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014262:	b112      	cbz	r2, 801426a <_raise_r+0x1e>
 8014264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014268:	b94b      	cbnz	r3, 801427e <_raise_r+0x32>
 801426a:	4628      	mov	r0, r5
 801426c:	f000 f830 	bl	80142d0 <_getpid_r>
 8014270:	4622      	mov	r2, r4
 8014272:	4601      	mov	r1, r0
 8014274:	4628      	mov	r0, r5
 8014276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801427a:	f000 b817 	b.w	80142ac <_kill_r>
 801427e:	2b01      	cmp	r3, #1
 8014280:	d00a      	beq.n	8014298 <_raise_r+0x4c>
 8014282:	1c59      	adds	r1, r3, #1
 8014284:	d103      	bne.n	801428e <_raise_r+0x42>
 8014286:	2316      	movs	r3, #22
 8014288:	6003      	str	r3, [r0, #0]
 801428a:	2001      	movs	r0, #1
 801428c:	e7e7      	b.n	801425e <_raise_r+0x12>
 801428e:	2100      	movs	r1, #0
 8014290:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014294:	4620      	mov	r0, r4
 8014296:	4798      	blx	r3
 8014298:	2000      	movs	r0, #0
 801429a:	e7e0      	b.n	801425e <_raise_r+0x12>

0801429c <raise>:
 801429c:	4b02      	ldr	r3, [pc, #8]	@ (80142a8 <raise+0xc>)
 801429e:	4601      	mov	r1, r0
 80142a0:	6818      	ldr	r0, [r3, #0]
 80142a2:	f7ff bfd3 	b.w	801424c <_raise_r>
 80142a6:	bf00      	nop
 80142a8:	20000120 	.word	0x20000120

080142ac <_kill_r>:
 80142ac:	b538      	push	{r3, r4, r5, lr}
 80142ae:	4d07      	ldr	r5, [pc, #28]	@ (80142cc <_kill_r+0x20>)
 80142b0:	2300      	movs	r3, #0
 80142b2:	4604      	mov	r4, r0
 80142b4:	4608      	mov	r0, r1
 80142b6:	4611      	mov	r1, r2
 80142b8:	602b      	str	r3, [r5, #0]
 80142ba:	f7f1 fda4 	bl	8005e06 <_kill>
 80142be:	1c43      	adds	r3, r0, #1
 80142c0:	d102      	bne.n	80142c8 <_kill_r+0x1c>
 80142c2:	682b      	ldr	r3, [r5, #0]
 80142c4:	b103      	cbz	r3, 80142c8 <_kill_r+0x1c>
 80142c6:	6023      	str	r3, [r4, #0]
 80142c8:	bd38      	pop	{r3, r4, r5, pc}
 80142ca:	bf00      	nop
 80142cc:	20002990 	.word	0x20002990

080142d0 <_getpid_r>:
 80142d0:	f7f1 bd91 	b.w	8005df6 <_getpid>

080142d4 <_malloc_usable_size_r>:
 80142d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142d8:	1f18      	subs	r0, r3, #4
 80142da:	2b00      	cmp	r3, #0
 80142dc:	bfbc      	itt	lt
 80142de:	580b      	ldrlt	r3, [r1, r0]
 80142e0:	18c0      	addlt	r0, r0, r3
 80142e2:	4770      	bx	lr

080142e4 <__swhatbuf_r>:
 80142e4:	b570      	push	{r4, r5, r6, lr}
 80142e6:	460c      	mov	r4, r1
 80142e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ec:	2900      	cmp	r1, #0
 80142ee:	b096      	sub	sp, #88	@ 0x58
 80142f0:	4615      	mov	r5, r2
 80142f2:	461e      	mov	r6, r3
 80142f4:	da0d      	bge.n	8014312 <__swhatbuf_r+0x2e>
 80142f6:	89a3      	ldrh	r3, [r4, #12]
 80142f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80142fc:	f04f 0100 	mov.w	r1, #0
 8014300:	bf14      	ite	ne
 8014302:	2340      	movne	r3, #64	@ 0x40
 8014304:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014308:	2000      	movs	r0, #0
 801430a:	6031      	str	r1, [r6, #0]
 801430c:	602b      	str	r3, [r5, #0]
 801430e:	b016      	add	sp, #88	@ 0x58
 8014310:	bd70      	pop	{r4, r5, r6, pc}
 8014312:	466a      	mov	r2, sp
 8014314:	f000 f848 	bl	80143a8 <_fstat_r>
 8014318:	2800      	cmp	r0, #0
 801431a:	dbec      	blt.n	80142f6 <__swhatbuf_r+0x12>
 801431c:	9901      	ldr	r1, [sp, #4]
 801431e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014322:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014326:	4259      	negs	r1, r3
 8014328:	4159      	adcs	r1, r3
 801432a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801432e:	e7eb      	b.n	8014308 <__swhatbuf_r+0x24>

08014330 <__smakebuf_r>:
 8014330:	898b      	ldrh	r3, [r1, #12]
 8014332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014334:	079d      	lsls	r5, r3, #30
 8014336:	4606      	mov	r6, r0
 8014338:	460c      	mov	r4, r1
 801433a:	d507      	bpl.n	801434c <__smakebuf_r+0x1c>
 801433c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014340:	6023      	str	r3, [r4, #0]
 8014342:	6123      	str	r3, [r4, #16]
 8014344:	2301      	movs	r3, #1
 8014346:	6163      	str	r3, [r4, #20]
 8014348:	b003      	add	sp, #12
 801434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801434c:	ab01      	add	r3, sp, #4
 801434e:	466a      	mov	r2, sp
 8014350:	f7ff ffc8 	bl	80142e4 <__swhatbuf_r>
 8014354:	9f00      	ldr	r7, [sp, #0]
 8014356:	4605      	mov	r5, r0
 8014358:	4639      	mov	r1, r7
 801435a:	4630      	mov	r0, r6
 801435c:	f7ff f914 	bl	8013588 <_malloc_r>
 8014360:	b948      	cbnz	r0, 8014376 <__smakebuf_r+0x46>
 8014362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014366:	059a      	lsls	r2, r3, #22
 8014368:	d4ee      	bmi.n	8014348 <__smakebuf_r+0x18>
 801436a:	f023 0303 	bic.w	r3, r3, #3
 801436e:	f043 0302 	orr.w	r3, r3, #2
 8014372:	81a3      	strh	r3, [r4, #12]
 8014374:	e7e2      	b.n	801433c <__smakebuf_r+0xc>
 8014376:	89a3      	ldrh	r3, [r4, #12]
 8014378:	6020      	str	r0, [r4, #0]
 801437a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801437e:	81a3      	strh	r3, [r4, #12]
 8014380:	9b01      	ldr	r3, [sp, #4]
 8014382:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014386:	b15b      	cbz	r3, 80143a0 <__smakebuf_r+0x70>
 8014388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801438c:	4630      	mov	r0, r6
 801438e:	f000 f81d 	bl	80143cc <_isatty_r>
 8014392:	b128      	cbz	r0, 80143a0 <__smakebuf_r+0x70>
 8014394:	89a3      	ldrh	r3, [r4, #12]
 8014396:	f023 0303 	bic.w	r3, r3, #3
 801439a:	f043 0301 	orr.w	r3, r3, #1
 801439e:	81a3      	strh	r3, [r4, #12]
 80143a0:	89a3      	ldrh	r3, [r4, #12]
 80143a2:	431d      	orrs	r5, r3
 80143a4:	81a5      	strh	r5, [r4, #12]
 80143a6:	e7cf      	b.n	8014348 <__smakebuf_r+0x18>

080143a8 <_fstat_r>:
 80143a8:	b538      	push	{r3, r4, r5, lr}
 80143aa:	4d07      	ldr	r5, [pc, #28]	@ (80143c8 <_fstat_r+0x20>)
 80143ac:	2300      	movs	r3, #0
 80143ae:	4604      	mov	r4, r0
 80143b0:	4608      	mov	r0, r1
 80143b2:	4611      	mov	r1, r2
 80143b4:	602b      	str	r3, [r5, #0]
 80143b6:	f7f1 fd86 	bl	8005ec6 <_fstat>
 80143ba:	1c43      	adds	r3, r0, #1
 80143bc:	d102      	bne.n	80143c4 <_fstat_r+0x1c>
 80143be:	682b      	ldr	r3, [r5, #0]
 80143c0:	b103      	cbz	r3, 80143c4 <_fstat_r+0x1c>
 80143c2:	6023      	str	r3, [r4, #0]
 80143c4:	bd38      	pop	{r3, r4, r5, pc}
 80143c6:	bf00      	nop
 80143c8:	20002990 	.word	0x20002990

080143cc <_isatty_r>:
 80143cc:	b538      	push	{r3, r4, r5, lr}
 80143ce:	4d06      	ldr	r5, [pc, #24]	@ (80143e8 <_isatty_r+0x1c>)
 80143d0:	2300      	movs	r3, #0
 80143d2:	4604      	mov	r4, r0
 80143d4:	4608      	mov	r0, r1
 80143d6:	602b      	str	r3, [r5, #0]
 80143d8:	f7f1 fd85 	bl	8005ee6 <_isatty>
 80143dc:	1c43      	adds	r3, r0, #1
 80143de:	d102      	bne.n	80143e6 <_isatty_r+0x1a>
 80143e0:	682b      	ldr	r3, [r5, #0]
 80143e2:	b103      	cbz	r3, 80143e6 <_isatty_r+0x1a>
 80143e4:	6023      	str	r3, [r4, #0]
 80143e6:	bd38      	pop	{r3, r4, r5, pc}
 80143e8:	20002990 	.word	0x20002990

080143ec <_init>:
 80143ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ee:	bf00      	nop
 80143f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143f2:	bc08      	pop	{r3}
 80143f4:	469e      	mov	lr, r3
 80143f6:	4770      	bx	lr

080143f8 <_fini>:
 80143f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fa:	bf00      	nop
 80143fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143fe:	bc08      	pop	{r3}
 8014400:	469e      	mov	lr, r3
 8014402:	4770      	bx	lr
