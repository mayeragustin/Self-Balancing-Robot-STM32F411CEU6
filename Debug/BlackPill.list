
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  0801129c  0801129c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124d8  080124d8  00014164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080124d8  080124d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124e0  080124e0  00014164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124e0  080124e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080124e4  080124e4  000134e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  080124e8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a0  20000164  0801264c  00014164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002304  0801264c  00014304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec5f  00000000  00000000  00014194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b30  00000000  00000000  00032df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001510  00000000  00000000  00039460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c798  00000000  00000000  0003a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243fb  00000000  00000000  00057108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26e3  00000000  00000000  0007b503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dbe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  0011dc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00125328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011284 	.word	0x08011284

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	08011284 	.word	0x08011284

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003c0 	.word	0x200003c0
 8000670:	200003d2 	.word	0x200003d2
 8000674:	20000180 	.word	0x20000180

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003e0 	.word	0x200003e0
 80007a0:	200003d4 	.word	0x200003d4

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003e0 	.word	0x200003e0
 8000808:	200003d4 	.word	0x200003d4

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d4 	.word	0x200003d4

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e4 	.word	0x200003e4
 8000898:	200003e8 	.word	0x200003e8

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b099      	sub	sp, #100	@ 0x64
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MPU6050_Init+0x13c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	d174      	bne.n	80009ca <MPU6050_Init+0x12e>
		data = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MPU6050_Init+0x140>)
 80008e8:	681c      	ldr	r4, [r3, #0]
 80008ea:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	216b      	movs	r1, #107	@ 0x6b
 80008fc:	20d0      	movs	r0, #208	@ 0xd0
 80008fe:	47a0      	blx	r4

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000900:	2307      	movs	r3, #7
 8000902:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MPU6050_Init+0x140>)
 8000908:	681c      	ldr	r4, [r3, #0]
 800090a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800090e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000912:	9201      	str	r2, [sp, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	2119      	movs	r1, #25
 800091c:	20d0      	movs	r0, #208	@ 0xd0
 800091e:	47a0      	blx	r4

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MPU6050_Init+0x140>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	211c      	movs	r1, #28
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MPU6050_Init+0x140>)
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	211b      	movs	r1, #27
 800095c:	20d0      	movs	r0, #208	@ 0xd0
 800095e:	47a0      	blx	r4

		// Set Digital Low Pass Filter
		data = 0x03;
 8000960:	2303      	movs	r3, #3
 8000962:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MPU6050_Init+0x140>)
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800096e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	211a      	movs	r1, #26
 800097c:	20d0      	movs	r0, #208	@ 0xd0
 800097e:	47a0      	blx	r4
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	2348      	movs	r3, #72	@ 0x48
 8000986:	461a      	mov	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f00f fffd 	bl	8010988 <memset>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			.Angle = {0, 0, 0},
			.dataReady = 0,
			.isInit = 1
		};

		for(uint8_t i=0; i<14; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800099c:	e00b      	b.n	80009b6 <MPU6050_Init+0x11a>
			mpu->data[i] = 0;
 800099e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		for(uint8_t i=0; i<14; i++){
 80009ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009b0:	3301      	adds	r3, #1
 80009b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80009b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ba:	2b0d      	cmp	r3, #13
 80009bc:	d9ef      	bls.n	800099e <MPU6050_Init+0x102>
		}

		if(status != SYS_OK){
 80009be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <MPU6050_Init+0x132>
			return SYS_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e002      	b.n	80009d0 <MPU6050_Init+0x134>
		}


	}else{
		return SYS_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <MPU6050_Init+0x134>
	}
	return SYS_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	375c      	adds	r7, #92	@ 0x5c
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200003e8 	.word	0x200003e8
 80009dc:	200003e4 	.word	0x200003e4

080009e0 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
 80009ec:	e075      	b.n	8000ada <MPU6050_Calibrate+0xfa>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->data, 14, MPU_TIMEOUT);
 80009ee:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <MPU6050_Calibrate+0x15c>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3336      	adds	r3, #54	@ 0x36
 80009f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	220e      	movs	r2, #14
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	213b      	movs	r1, #59	@ 0x3b
 8000a04:	20d0      	movs	r0, #208	@ 0xd0
 8000a06:	47a0      	blx	r4
		mpu->Acc.raw.x += (int16_t)((mpu->data[0] << 8) | mpu->data[1]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8000a12:	b212      	sxth	r2, r2
 8000a14:	0212      	lsls	r2, r2, #8
 8000a16:	b211      	sxth	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000a1e:	b212      	sxth	r2, r2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	b212      	sxth	r2, r2
 8000a24:	441a      	add	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]
		mpu->Acc.raw.y += (int16_t)((mpu->data[2] << 8) | mpu->data[3]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a34:	b212      	sxth	r2, r2
 8000a36:	0212      	lsls	r2, r2, #8
 8000a38:	b211      	sxth	r1, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000a40:	b212      	sxth	r2, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	b212      	sxth	r2, r2
 8000a46:	441a      	add	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
		mpu->Acc.raw.z += (int16_t)((mpu->data[4] << 8) | mpu->data[5]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8000a56:	b212      	sxth	r2, r2
 8000a58:	0212      	lsls	r2, r2, #8
 8000a5a:	b211      	sxth	r1, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000a62:	b212      	sxth	r2, r2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	b212      	sxth	r2, r2
 8000a68:	441a      	add	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]

		mpu->Gyro.raw.x += (int16_t)((mpu->data[8 ] << 8) | mpu->data[9 ]);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 8000a78:	b212      	sxth	r2, r2
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	b211      	sxth	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000a84:	b212      	sxth	r2, r2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	b212      	sxth	r2, r2
 8000a8a:	441a      	add	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
		mpu->Gyro.raw.y += (int16_t)((mpu->data[10] << 8) | mpu->data[11]);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	0212      	lsls	r2, r2, #8
 8000a9e:	b211      	sxth	r1, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000aa6:	b212      	sxth	r2, r2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	b212      	sxth	r2, r2
 8000aac:	441a      	add	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
		mpu->Gyro.raw.z += (int16_t)((mpu->data[12] << 8) | mpu->data[13]);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8000abc:	b212      	sxth	r2, r2
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	b211      	sxth	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000ac8:	b212      	sxth	r2, r2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	b212      	sxth	r2, r2
 8000ace:	441a      	add	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ae0:	d385      	bcc.n	80009ee <MPU6050_Calibrate+0xe>
	}
    mpu->Acc.offset.x = (int16_t)(mpu->Acc.raw.x >> NUM_SAMPLES_BITS);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	131b      	asrs	r3, r3, #12
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(mpu->Acc.raw.y >> NUM_SAMPLES_BITS);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	131b      	asrs	r3, r3, #12
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(mpu->Acc.raw.z >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(mpu->Gyro.raw.x >> NUM_SAMPLES_BITS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	83da      	strh	r2, [r3, #30]
	mpu->Gyro.offset.y = (int16_t)(mpu->Gyro.raw.y >> NUM_SAMPLES_BITS);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	841a      	strh	r2, [r3, #32]
	mpu->Gyro.offset.z = (int16_t)(mpu->Gyro.raw.z >> NUM_SAMPLES_BITS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2a:	131b      	asrs	r3, r3, #12
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003e8 	.word	0x200003e8

08000b40 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->Acc.raw.x = (((mpu->data[0] << 8) | mpu->data[1]));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	mpu->Acc.raw.y = (((mpu->data[2] << 8) | mpu->data[3]));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
	mpu->Acc.raw.z = (((mpu->data[4] << 8) | mpu->data[5]));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
	// ACC: CALCULATE TRUE ACCELERATION
	mpu->Acc.x = mpu->Acc.raw.x - mpu->Acc.offset.x;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	801a      	strh	r2, [r3, #0]
	mpu->Acc.y = mpu->Acc.raw.y - mpu->Acc.offset.y;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	805a      	strh	r2, [r3, #2]
	mpu->Acc.z = mpu->Acc.raw.z - mpu->Acc.offset.z;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	809a      	strh	r2, [r3, #4]

	// GYR: GET RAW INFORMATION
	mpu->Gyro.raw.x = (((mpu->data[8 ] << 8) | mpu->data[9 ]));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->Gyro.raw.y = (((mpu->data[10] << 8) | mpu->data[11]));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->Gyro.raw.z = (((mpu->data[12] << 8) | mpu->data[13]));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	// GYR: CALCULATE TRUE ACCELERATION
	mpu->Gyro.x = mpu->Gyro.raw.x - mpu->Gyro.offset.x;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	831a      	strh	r2, [r3, #24]
	mpu->Gyro.y = mpu->Gyro.raw.y - mpu->Gyro.offset.y;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	835a      	strh	r2, [r3, #26]
	mpu->Gyro.z = mpu->Gyro.raw.z - mpu->Gyro.offset.z;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	839a      	strh	r2, [r3, #28]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <Display_Set_I2C_Master_Transmit+0x24>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <Display_Set_I2C_Master_Transmit+0x28>)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200003f4 	.word	0x200003f4
 8000c84:	200003f8 	.word	0x200003f8

08000c88 <Display_Init>:

e_system Display_Init(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000c92:	22ae      	movs	r2, #174	@ 0xae
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	@ 0x78
 8000c98:	f000 f94a 	bl	8000f30 <ssd1306_I2C_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	@ 0x78
 8000cac:	f000 f940 	bl	8000f30 <ssd1306_I2C_Write>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cba:	2210      	movs	r2, #16
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	@ 0x78
 8000cc0:	f000 f936 	bl	8000f30 <ssd1306_I2C_Write>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4413      	add	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000cce:	22b0      	movs	r2, #176	@ 0xb0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	@ 0x78
 8000cd4:	f000 f92c 	bl	8000f30 <ssd1306_I2C_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000ce2:	22c8      	movs	r2, #200	@ 0xc8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	@ 0x78
 8000ce8:	f000 f922 	bl	8000f30 <ssd1306_I2C_Write>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 f918 	bl	8000f30 <ssd1306_I2C_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4413      	add	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	@ 0x78
 8000d10:	f000 f90e 	bl	8000f30 <ssd1306_I2C_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	@ 0x78
 8000d24:	f000 f904 	bl	8000f30 <ssd1306_I2C_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4413      	add	r3, r2
 8000d30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000d32:	2281      	movs	r2, #129	@ 0x81
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 f8fa 	bl	8000f30 <ssd1306_I2C_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4413      	add	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 f8f0 	bl	8000f30 <ssd1306_I2C_Write>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4413      	add	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000d5a:	22a1      	movs	r2, #161	@ 0xa1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 f8e6 	bl	8000f30 <ssd1306_I2C_Write>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000d6e:	22a6      	movs	r2, #166	@ 0xa6
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	@ 0x78
 8000d74:	f000 f8dc 	bl	8000f30 <ssd1306_I2C_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4413      	add	r3, r2
 8000d80:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000d82:	22a8      	movs	r2, #168	@ 0xa8
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 f8d2 	bl	8000f30 <ssd1306_I2C_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4413      	add	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000d96:	223f      	movs	r2, #63	@ 0x3f
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 f8c8 	bl	8000f30 <ssd1306_I2C_Write>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4413      	add	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000daa:	22a4      	movs	r2, #164	@ 0xa4
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 f8be 	bl	8000f30 <ssd1306_I2C_Write>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4413      	add	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000dbe:	22d3      	movs	r2, #211	@ 0xd3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 f8b4 	bl	8000f30 <ssd1306_I2C_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4413      	add	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 f8aa 	bl	8000f30 <ssd1306_I2C_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4413      	add	r3, r2
 8000de4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000de6:	22d5      	movs	r2, #213	@ 0xd5
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 f8a0 	bl	8000f30 <ssd1306_I2C_Write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4413      	add	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000dfa:	22f0      	movs	r2, #240	@ 0xf0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 f896 	bl	8000f30 <ssd1306_I2C_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000e0e:	22d9      	movs	r2, #217	@ 0xd9
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 f88c 	bl	8000f30 <ssd1306_I2C_Write>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4413      	add	r3, r2
 8000e20:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000e22:	2222      	movs	r2, #34	@ 0x22
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	@ 0x78
 8000e28:	f000 f882 	bl	8000f30 <ssd1306_I2C_Write>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4413      	add	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000e36:	22da      	movs	r2, #218	@ 0xda
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	@ 0x78
 8000e3c:	f000 f878 	bl	8000f30 <ssd1306_I2C_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	@ 0x78
 8000e50:	f000 f86e 	bl	8000f30 <ssd1306_I2C_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000e5e:	22db      	movs	r2, #219	@ 0xdb
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 f864 	bl	8000f30 <ssd1306_I2C_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 f85a 	bl	8000f30 <ssd1306_I2C_Write>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4413      	add	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000e86:	228d      	movs	r2, #141	@ 0x8d
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 f850 	bl	8000f30 <ssd1306_I2C_Write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4413      	add	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 f846 	bl	8000f30 <ssd1306_I2C_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4413      	add	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000eae:	22af      	movs	r2, #175	@ 0xaf
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 f83c 	bl	8000f30 <ssd1306_I2C_Write>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 f832 	bl	8000f30 <ssd1306_I2C_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8ec 	bl	80010b4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <Display_Init+0x2a0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <Display_Init+0x2a0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <Display_Init+0x2a0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <Display_Init+0x2a4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <Display_Init+0x2a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <Display_Init+0x2a4>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	3b50      	subs	r3, #80	@ 0x50
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <Display_Init+0x2a4>)
 8000f10:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <Display_Init+0x2a4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <Display_Init+0x2a4>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003ec 	.word	0x200003ec
 8000f2c:	200007fc 	.word	0x200007fc

08000f30 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <ssd1306_I2C_Write+0x38>)
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	b298      	uxth	r0, r3
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	230a      	movs	r3, #10
 8000f58:	2202      	movs	r2, #2
 8000f5a:	47a0      	blx	r4
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003f8 	.word	0x200003f8

08000f6c <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 8000f6c:	b598      	push	{r3, r4, r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d057      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d053      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <Display_UpdateScreen_Task+0xc8>)
 8000f82:	795b      	ldrb	r3, [r3, #5]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d04f      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>

		switch(Update.state){
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <Display_UpdateScreen_Task+0x2a>
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d01f      	beq.n	8000fd4 <Display_UpdateScreen_Task+0x68>
 8000f94:	e03b      	b.n	800100e <Display_UpdateScreen_Task+0xa2>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	3b50      	subs	r3, #80	@ 0x50
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa0:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fb0:	681c      	ldr	r4, [r3, #0]
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <Display_UpdateScreen_Task+0xd0>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	@ 0x78
 8000fba:	47a0      	blx	r4
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <Display_UpdateScreen_Task+0x64>
				Update.state = DATA;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000fce:	e021      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e02a      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <Display_UpdateScreen_Task+0xd4>)
 8000fe0:	441a      	add	r2, r3
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <Display_UpdateScreen_Task+0x9e>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffa:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001008:	e004      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00d      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001010:	2208      	movs	r2, #8
 8001012:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b07      	cmp	r3, #7
 800101a:	d905      	bls.n	8001028 <Display_UpdateScreen_Task+0xbc>
			Update.Page = 0;
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001022:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd98      	pop	{r3, r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	200007fc 	.word	0x200007fc
 8001034:	200003ec 	.word	0x200003ec
 8001038:	200003f4 	.word	0x200003f4
 800103c:	20000800 	.word	0x20000800
 8001040:	200003fc 	.word	0x200003fc

08001044 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <Display_I2C_DMA_Ready+0x1c>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	7053      	strb	r3, [r2, #1]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200007fc 	.word	0x200007fc

08001064 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <Display_I2C_Refresh_Ready+0x1c>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	7013      	strb	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200007fc 	.word	0x200007fc

08001084 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <Display_SetCursor+0x2c>)
 800109a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <Display_SetCursor+0x2c>)
 80010a2:	805a      	strh	r2, [r3, #2]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	200003ec 	.word	0x200003ec

080010b4 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00d      	b.n	80010e0 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <Display_Fill+0x1a>
 80010ca:	2100      	movs	r1, #0
 80010cc:	e000      	b.n	80010d0 <Display_Fill+0x1c>
 80010ce:	21ff      	movs	r1, #255	@ 0xff
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <Display_Fill+0x44>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e6:	d3ed      	bcc.n	80010c4 <Display_Fill+0x10>
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200003fc 	.word	0x200003fc

080010fc <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	70fb      	strb	r3, [r7, #3]
	if (
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b7f      	cmp	r3, #127	@ 0x7f
 8001112:	d848      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b3f      	cmp	r3, #63	@ 0x3f
 8001118:	d845      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <Display_DrawPixel+0xb8>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11a      	bne.n	800116c <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b298      	uxth	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b259      	sxtb	r1, r3
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e01d      	b.n	80011a8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b298      	uxth	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <Display_DrawPixel+0xbc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b25a      	sxtb	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	b259      	sxtb	r1, r3
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <Display_DrawPixel+0xbc>)
 80011a2:	54d1      	strb	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <Display_DrawPixel+0xac>
		return;
 80011a6:	bf00      	nop
	}
}
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200003ec 	.word	0x200003ec
 80011b8:	200003fc 	.word	0x200003fc

080011bc <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	460b      	mov	r3, r1
 80011cc:	81bb      	strh	r3, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	3307      	adds	r3, #7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da00      	bge.n	80011de <Display_DrawBitmap+0x22>
 80011dc:	3307      	adds	r3, #7
 80011de:	10db      	asrs	r3, r3, #3
 80011e0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	82bb      	strh	r3, [r7, #20]
 80011ea:	e044      	b.n	8001276 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	827b      	strh	r3, [r7, #18]
 80011f0:	e02f      	b.n	8001252 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e012      	b.n	800122a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800120c:	fb03 f202 	mul.w	r2, r3, r2
 8001210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <Display_DrawBitmap+0x5e>
 8001218:	3307      	adds	r3, #7
 800121a:	10db      	asrs	r3, r3, #3
 800121c:	b21b      	sxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800122a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da09      	bge.n	8001246 <Display_DrawBitmap+0x8a>
 8001232:	89fa      	ldrh	r2, [r7, #14]
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	89b9      	ldrh	r1, [r7, #12]
 800123c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5b 	bl	80010fc <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	827b      	strh	r3, [r7, #18]
 8001252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbc9      	blt.n	80011f2 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800125e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	82bb      	strh	r3, [r7, #20]
 800126a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	81bb      	strh	r3, [r7, #12]
 8001276:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800127a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbb4      	blt.n	80011ec <Display_DrawBitmap+0x30>
        }
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	1d38      	adds	r0, r7, #4
 8001296:	e880 0006 	stmia.w	r0, {r1, r2}
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	4613      	mov	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012a4:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <Display_WriteChar+0xf4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b0:	dc06      	bgt.n	80012c0 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <Display_WriteChar+0xf4>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012be:	dd01      	ble.n	80012c4 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 80012c0:	2300      	movs	r3, #0
 80012c2:	e058      	b.n	8001376 <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e048      	b.n	800135c <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	3b20      	subs	r3, #32
 80012d0:	7979      	ldrb	r1, [r7, #5]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	440b      	add	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e030      	b.n	800134c <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <Display_WriteChar+0xf4>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b298      	uxth	r0, r3
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <Display_WriteChar+0xf4>)
 8001308:	885a      	ldrh	r2, [r3, #2]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fef1 	bl	80010fc <Display_DrawPixel>
 800131a:	e014      	b.n	8001346 <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <Display_WriteChar+0xf4>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b298      	uxth	r0, r3
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <Display_WriteChar+0xf4>)
 800132a:	885a      	ldrh	r2, [r3, #2]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b299      	uxth	r1, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f7ff fedb 	bl	80010fc <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	793b      	ldrb	r3, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4293      	cmp	r3, r2
 8001354:	d3c9      	bcc.n	80012ea <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	461a      	mov	r2, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4293      	cmp	r3, r2
 8001364:	d3b1      	bcc.n	80012ca <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <Display_WriteChar+0xf4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	793a      	ldrb	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <Display_WriteChar+0xf4>)
 8001372:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	bf00      	nop
 8001380:	200003ec 	.word	0x200003ec

08001384 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001392:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001394:	e012      	b.n	80013bc <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	ca06      	ldmia	r2, {r1, r2}
 80013a0:	f7ff ff74 	bl	800128c <Display_WriteChar>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d002      	beq.n	80013b6 <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	e008      	b.n	80013c8 <Display_WriteString+0x44>

        str++;	// Next char
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    while (*str){
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d004      	beq.n	8001400 <Display_DrawLine+0x30>
 80013f6:	88ba      	ldrh	r2, [r7, #4]
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8090 	bne.w	8001520 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b7f      	cmp	r3, #127	@ 0x7f
 8001404:	d901      	bls.n	800140a <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001406:	237f      	movs	r3, #127	@ 0x7f
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	2b7f      	cmp	r3, #127	@ 0x7f
 800140e:	d901      	bls.n	8001414 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001410:	237f      	movs	r3, #127	@ 0x7f
 8001412:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2b3f      	cmp	r3, #63	@ 0x3f
 8001418:	d901      	bls.n	800141e <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 800141a:	233f      	movs	r3, #63	@ 0x3f
 800141c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	2b3f      	cmp	r3, #63	@ 0x3f
 8001422:	d901      	bls.n	8001428 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001424:	233f      	movs	r3, #63	@ 0x3f
 8001426:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	429a      	cmp	r2, r3
 800142e:	d205      	bcs.n	800143c <Display_DrawLine+0x6c>
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21b      	sxth	r3, r3
 800143a:	e004      	b.n	8001446 <Display_DrawLine+0x76>
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d205      	bcs.n	800145c <Display_DrawLine+0x8c>
 8001450:	883a      	ldrh	r2, [r7, #0]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21b      	sxth	r3, r3
 800145a:	e004      	b.n	8001466 <Display_DrawLine+0x96>
 800145c:	88ba      	ldrh	r2, [r7, #4]
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d129      	bne.n	80014c4 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001470:	883a      	ldrh	r2, [r7, #0]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d205      	bcs.n	8001484 <Display_DrawLine+0xb4>
			tmp = y1;
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001480:	893b      	ldrh	r3, [r7, #8]
 8001482:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d205      	bcs.n	8001498 <Display_DrawLine+0xc8>
			tmp = x1;
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	e00c      	b.n	80014b8 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 800149e:	89f9      	ldrh	r1, [r7, #14]
 80014a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe28 	bl	80010fc <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014bc:	883b      	ldrh	r3, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dded      	ble.n	800149e <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 80014c2:	e030      	b.n	8001526 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <Display_DrawLine+0x154>
		if (y1 < y0) {
 80014cc:	883a      	ldrh	r2, [r7, #0]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d205      	bcs.n	80014e0 <Display_DrawLine+0x110>
			tmp = y1;
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d205      	bcs.n	80014f4 <Display_DrawLine+0x124>
			tmp = x1;
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	81fb      	strh	r3, [r7, #14]
 80014f8:	e00c      	b.n	8001514 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001500:	88b9      	ldrh	r1, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdfa 	bl	80010fc <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	429a      	cmp	r2, r3
 800151c:	dded      	ble.n	80014fa <Display_DrawLine+0x12a>
		}
	}
	return;
 800151e:	e001      	b.n	8001524 <Display_DrawLine+0x154>
		return;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <Display_DrawLine+0x156>
	return;
 8001524:	bf00      	nop
}
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af02      	add	r7, sp, #8
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d836      	bhi.n	80015be <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	2b3f      	cmp	r3, #63	@ 0x3f
 8001554:	d833      	bhi.n	80015be <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4413      	add	r3, r2
 800155c:	2b7f      	cmp	r3, #127	@ 0x7f
 800155e:	dd03      	ble.n	8001568 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001566:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001568:	88ba      	ldrh	r2, [r7, #4]
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001570:	dd03      	ble.n	800157a <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001578:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e018      	b.n	80015b2 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b29a      	uxth	r2, r3
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	b299      	uxth	r1, r3
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4413      	add	r3, r2
 8001590:	b29c      	uxth	r4, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	b29a      	uxth	r2, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	88f8      	ldrh	r0, [r7, #6]
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	4622      	mov	r2, r4
 80015a8:	f7ff ff12 	bl	80013d0 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	883a      	ldrh	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d2e1      	bcs.n	8001580 <Display_DrawFilledRectangle+0x54>
 80015bc:	e000      	b.n	80015c0 <Display_DrawFilledRectangle+0x94>
		return;
 80015be:	bf00      	nop
	}
}
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}

080015c6 <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	729a      	strb	r2, [r3, #10]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10e      	bne.n	800163e <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	88da      	ldrh	r2, [r3, #6]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a9b      	ldrb	r3, [r3, #10]
 8001642:	3b01      	subs	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a9b      	ldrb	r3, [r3, #10]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <Encoder_Task+0x54>
		enc->pps = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	811a      	strh	r2, [r3, #8]
	}
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	889b      	ldrh	r3, [r3, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	809a      	strh	r2, [r3, #4]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	88da      	ldrh	r2, [r3, #6]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	80da      	strh	r2, [r3, #6]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(e_direction dir), uint16_t max_value){
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	819a      	strh	r2, [r3, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <Motor_Set_PER_Speed>:
		motor->setPins(FREE_WHEEL);
		motor->setPWM(0);
	}
}

void Motor_Set_PER_Speed(s_motor *motor, int8_t speed){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL || motor->setPWM == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d054      	beq.n	80017a2 <Motor_Set_PER_Speed+0xbe>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d050      	beq.n	80017a2 <Motor_Set_PER_Speed+0xbe>
		return;
	if(speed > 100)
 8001700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001704:	2b64      	cmp	r3, #100	@ 0x64
 8001706:	dd01      	ble.n	800170c <Motor_Set_PER_Speed+0x28>
		speed = 100;
 8001708:	2364      	movs	r3, #100	@ 0x64
 800170a:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 800170c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001710:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001714:	da01      	bge.n	800171a <Motor_Set_PER_Speed+0x36>
		speed = -100;
 8001716:	239c      	movs	r3, #156	@ 0x9c
 8001718:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 800171a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	d03f      	beq.n	80017a6 <Motor_Set_PER_Speed+0xc2>
		return;

	motor->vel = speed * 600;
 8001726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 8001736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800173a:	2b00      	cmp	r3, #0
 800173c:	dd10      	ble.n	8001760 <Motor_Set_PER_Speed+0x7c>
		motor->direction = FORWARD;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	701a      	strb	r2, [r3, #0]
		motor->setPins(FORWARD);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2002      	movs	r0, #2
 800174a:	4798      	blx	r3
		motor->setPWM((uint16_t)motor->vel-1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6892      	ldr	r2, [r2, #8]
 8001754:	b292      	uxth	r2, r2
 8001756:	3a01      	subs	r2, #1
 8001758:	b292      	uxth	r2, r2
 800175a:	4610      	mov	r0, r2
 800175c:	4798      	blx	r3
 800175e:	e023      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
	}else if(speed < 0){
 8001760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da10      	bge.n	800178a <Motor_Set_PER_Speed+0xa6>
		motor->direction = BACKWARD;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2203      	movs	r2, #3
 800176c:	701a      	strb	r2, [r3, #0]
		motor->setPins(BACKWARD);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2003      	movs	r0, #3
 8001774:	4798      	blx	r3
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6892      	ldr	r2, [r2, #8]
 800177e:	b292      	uxth	r2, r2
 8001780:	43d2      	mvns	r2, r2
 8001782:	b292      	uxth	r2, r2
 8001784:	4610      	mov	r0, r2
 8001786:	4798      	blx	r3
 8001788:	e00e      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
	}else{
		motor->direction = FREE_WHEEL;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
		motor->setPins(FREE_WHEEL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	2001      	movs	r0, #1
 8001796:	4798      	blx	r3
		motor->setPWM(0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	2000      	movs	r0, #0
 800179e:	4798      	blx	r3
 80017a0:	e002      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
		return;
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <Motor_Set_PER_Speed+0xc4>
		return;
 80017a6:	bf00      	nop
	}
}
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	motor->setPins(BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d10c      	bne.n	80017d8 <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	899b      	ldrh	r3, [r3, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	899b      	ldrh	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d102      	bne.n	80017d8 <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
	}
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <Comm_Task>:

void Comm_Task(s_commData* comm){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001860:	429a      	cmp	r2, r3
 8001862:	d002      	beq.n	800186a <Comm_Task+0x1e>
		decodeProtocol(comm);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f819 	bl	800189c <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	789a      	ldrb	r2, [r3, #2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	429a      	cmp	r2, r3
 8001874:	d00e      	beq.n	8001894 <Comm_Task+0x48>
		if(!comm->isESP01){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d004      	beq.n	8001894 <Comm_Task+0x48>
				comm->dataWriter(comm);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80018aa:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 80018ac:	e11b      	b.n	8001ae6 <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	f200 810e 	bhi.w	8001ad6 <decodeProtocol+0x23a>
 80018ba:	a201      	add	r2, pc, #4	@ (adr r2, 80018c0 <decodeProtocol+0x24>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018dd 	.word	0x080018dd
 80018c4:	0800190f 	.word	0x0800190f
 80018c8:	08001951 	.word	0x08001951
 80018cc:	08001993 	.word	0x08001993
 80018d0:	080019d5 	.word	0x080019d5
 80018d4:	08001a07 	.word	0x08001a07
 80018d8:	08001a59 	.word	0x08001a59
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	b2d1      	uxtb	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80018f6:	2b55      	cmp	r3, #85	@ 0x55
 80018f8:	f040 80f2 	bne.w	8001ae0 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 800190c:	e0e8      	b.n	8001ae0 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	b2d1      	uxtb	r1, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001928:	2b4e      	cmp	r3, #78	@ 0x4e
 800192a:	d104      	bne.n	8001936 <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001934:	e0d7      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800193c:	3b01      	subs	r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 800194e:	e0ca      	b.n	8001ae6 <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	b2d1      	uxtb	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800196a:	2b45      	cmp	r3, #69	@ 0x45
 800196c:	d104      	bne.n	8001978 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2203      	movs	r2, #3
 8001972:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001976:	e0b6      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800197e:	3b01      	subs	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001990:	e0a9      	b.n	8001ae6 <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	b2d1      	uxtb	r1, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80019ac:	2b52      	cmp	r3, #82	@ 0x52
 80019ae:	d104      	bne.n	80019ba <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80019b8:	e095      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80019d2:	e088      	b.n	8001ae6 <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	b2d1      	uxtb	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80019f8:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <decodeProtocol+0x264>)
 80019fa:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a04:	e06f      	b.n	8001ae6 <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	b2d1      	uxtb	r1, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a20:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a22:	d10c      	bne.n	8001a3e <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2206      	movs	r2, #6
 8001a28:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <decodeProtocol+0x264>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001a3c:	e053      	b.n	8001ae6 <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a56:	e046      	b.n	8001ae6 <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001a58:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <decodeProtocol+0x264>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d914      	bls.n	8001a8a <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	b2d1      	uxtb	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a70:	461a      	mov	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001a80:	4053      	eors	r3, r2
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <decodeProtocol+0x264>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <decodeProtocol+0x264>)
 8001a94:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001a96:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <decodeProtocol+0x264>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d122      	bne.n	8001ae4 <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d111      	bne.n	8001ae4 <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00c      	beq.n	8001ae4 <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
				}
			}
			break;
 8001ad4:	e006      	b.n	8001ae4 <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001ade:	e002      	b.n	8001ae6 <decodeProtocol+0x24a>
			break;
 8001ae0:	bf00      	nop
 8001ae2:	e000      	b.n	8001ae6 <decodeProtocol+0x24a>
			break;
 8001ae4:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	f47f aedd 	bne.w	80018ae <decodeProtocol+0x12>
		}
	}
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000829 	.word	0x20000829

08001b04 <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	72fb      	strb	r3, [r7, #11]
 8001b14:	4613      	mov	r3, r2
 8001b16:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001b18:	4b62      	ldr	r3, [pc, #392]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001b1e:	4b62      	ldr	r3, [pc, #392]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001b24:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	b2d1      	uxtb	r1, r2
 8001b2c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b2e:	7011      	strb	r1, [r2, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b34:	2155      	movs	r1, #85	@ 0x55
 8001b36:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001b38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	b2d1      	uxtb	r1, r2
 8001b40:	4a59      	ldr	r2, [pc, #356]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b42:	7011      	strb	r1, [r2, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b59      	ldr	r3, [pc, #356]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b48:	214e      	movs	r1, #78	@ 0x4e
 8001b4a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001b4c:	4b56      	ldr	r3, [pc, #344]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	b2d1      	uxtb	r1, r2
 8001b54:	4a54      	ldr	r2, [pc, #336]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b56:	7011      	strb	r1, [r2, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b5c:	2145      	movs	r1, #69	@ 0x45
 8001b5e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001b60:	4b51      	ldr	r3, [pc, #324]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	b2d1      	uxtb	r1, r2
 8001b68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b6a:	7011      	strb	r1, [r2, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b70:	2152      	movs	r1, #82	@ 0x52
 8001b72:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001b74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	4b4d      	ldr	r3, [pc, #308]	@ (8001cb0 <comm_sendCMD+0x1ac>)
 8001b7a:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	b2d1      	uxtb	r1, r2
 8001b84:	4a48      	ldr	r2, [pc, #288]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b86:	7011      	strb	r1, [r2, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001b90:	4b45      	ldr	r3, [pc, #276]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	4a43      	ldr	r2, [pc, #268]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001b9a:	7011      	strb	r1, [r2, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b43      	ldr	r3, [pc, #268]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001ba0:	213a      	movs	r1, #58	@ 0x3a
 8001ba2:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001ba4:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	b2d1      	uxtb	r1, r2
 8001bac:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bae:	7011      	strb	r1, [r2, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	2bb1      	cmp	r3, #177	@ 0xb1
 8001bbc:	d002      	beq.n	8001bc4 <comm_sendCMD+0xc0>
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	2bee      	cmp	r3, #238	@ 0xee
 8001bc2:	d109      	bne.n	8001bd8 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001bc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	b2d1      	uxtb	r1, r2
 8001bcc:	4a36      	ldr	r2, [pc, #216]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bce:	7011      	strb	r1, [r2, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d013      	beq.n	8001c06 <comm_sendCMD+0x102>
 8001bde:	7abb      	ldrb	r3, [r7, #10]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d010      	beq.n	8001c06 <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001be4:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001bec:	4413      	add	r3, r2
 8001bee:	7aba      	ldrb	r2, [r7, #10]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f00e fefc 	bl	80109f0 <memcpy>
        auxIndex += len;
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	7abb      	ldrb	r3, [r7, #10]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001c04:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001c06:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <comm_sendCMD+0x1ac>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <comm_sendCMD+0x1b0>)
 8001c18:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001c1a:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <comm_sendCMD+0x1ac>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <comm_sendCMD+0x1b0>)
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001c26:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e01f      	b.n	8001c76 <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001c36:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001c3e:	5c9a      	ldrb	r2, [r3, r2]
 8001c40:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4053      	eors	r3, r2
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c4a:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	78db      	ldrb	r3, [r3, #3]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	b2d1      	uxtb	r1, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	70d1      	strb	r1, [r2, #3]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <comm_sendCMD+0x1a8>)
 8001c62:	5c1a      	ldrb	r2, [r3, r0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	440b      	add	r3, r1
 8001c68:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <comm_sendCMD+0x1a0>)
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <comm_sendCMD+0x1a4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d3d9      	bcc.n	8001c36 <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	78db      	ldrb	r3, [r3, #3]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	b2d1      	uxtb	r1, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	70d1      	strb	r1, [r2, #3]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <comm_sendCMD+0x1b4>)
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	440b      	add	r3, r1
 8001c98:	711a      	strb	r2, [r3, #4]
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000806 	.word	0x20000806
 8001ca8:	20000807 	.word	0x20000807
 8001cac:	20000808 	.word	0x20000808
 8001cb0:	20000826 	.word	0x20000826
 8001cb4:	20000827 	.word	0x20000827
 8001cb8:	20000828 	.word	0x20000828

08001cbc <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
void Init_Timing();
void Init_MPU6050();
void Init_Display();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_UART_RxCpltCallback+0x2c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d107      	bne.n	8001cde <HAL_UART_RxCpltCallback+0x22>
		//dataTx = dataRx;
		HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4906      	ldr	r1, [pc, #24]	@ (8001cec <HAL_UART_RxCpltCallback+0x30>)
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <HAL_UART_RxCpltCallback+0x34>)
 8001cd4:	f009 fe7c 	bl	800b9d0 <HAL_UART_Receive_IT>
		dataRx = 0;
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <HAL_UART_RxCpltCallback+0x30>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
	}
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40011000 	.word	0x40011000
 8001cec:	200011c9 	.word	0x200011c9
 8001cf0:	20000a78 	.word	0x20000a78

08001cf4 <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af02      	add	r7, sp, #8
	uint8_t auxPos = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	717b      	strb	r3, [r7, #5]
	if(Display.isInit){
 8001cfe:	4ba3      	ldr	r3, [pc, #652]	@ (8001f8c <OLED_Print_Data_Task+0x298>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 812b 	beq.w	8001f5e <OLED_Print_Data_Task+0x26a>
		switch(Display.state){
 8001d08:	4ba0      	ldr	r3, [pc, #640]	@ (8001f8c <OLED_Print_Data_Task+0x298>)
 8001d0a:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d023      	beq.n	8001d5a <OLED_Print_Data_Task+0x66>
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	f300 8123 	bgt.w	8001f5e <OLED_Print_Data_Task+0x26a>
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <OLED_Print_Data_Task+0x2c>
 8001d1c:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001d1e:	e11e      	b.n	8001f5e <OLED_Print_Data_Task+0x26a>
			if(HAL_GetTick() - Display.timer > 2000){
 8001d20:	f001 ff42 	bl	8003ba8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b99      	ldr	r3, [pc, #612]	@ (8001f8c <OLED_Print_Data_Task+0x298>)
 8001d28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d32:	f240 8111 	bls.w	8001f58 <OLED_Print_Data_Task+0x264>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff f9bc 	bl	80010b4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2340      	movs	r3, #64	@ 0x40
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	4a92      	ldr	r2, [pc, #584]	@ (8001f90 <OLED_Print_Data_Task+0x29c>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fa36 	bl	80011bc <Display_DrawBitmap>
				Display.state = INPUTS;
 8001d50:	4b8e      	ldr	r3, [pc, #568]	@ (8001f8c <OLED_Print_Data_Task+0x298>)
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001d58:	e0fe      	b.n	8001f58 <OLED_Print_Data_Task+0x264>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	232c      	movs	r3, #44	@ 0x2c
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2325      	movs	r3, #37	@ 0x25
 8001d64:	4a8b      	ldr	r2, [pc, #556]	@ (8001f94 <OLED_Print_Data_Task+0x2a0>)
 8001d66:	2111      	movs	r1, #17
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f7ff fa27 	bl	80011bc <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001d6e:	2300      	movs	r3, #0
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	e03f      	b.n	8001df4 <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001d74:	2300      	movs	r3, #0
 8001d76:	71bb      	strb	r3, [r7, #6]
 8001d78:	e036      	b.n	8001de8 <OLED_Print_Data_Task+0xf4>
					if(Analog.value[i] >= ADC_to_Index[j]){
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4a86      	ldr	r2, [pc, #536]	@ (8001f98 <OLED_Print_Data_Task+0x2a4>)
 8001d7e:	3308      	adds	r3, #8
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	885a      	ldrh	r2, [r3, #2]
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	4984      	ldr	r1, [pc, #528]	@ (8001f9c <OLED_Print_Data_Task+0x2a8>)
 8001d8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d327      	bcc.n	8001de2 <OLED_Print_Data_Task+0xee>
						auxPos = 2 + i * 3;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	461a      	mov	r2, r3
 8001d96:	0052      	lsls	r2, r2, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	717b      	strb	r3, [r7, #5]
						Display_DrawLine(auxPos, 61,  auxPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001da0:	797b      	ldrb	r3, [r7, #5]
 8001da2:	b298      	uxth	r0, r3
 8001da4:	797b      	ldrb	r3, [r7, #5]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	79bb      	ldrb	r3, [r7, #6]
 8001daa:	497d      	ldr	r1, [pc, #500]	@ (8001fa0 <OLED_Print_Data_Task+0x2ac>)
 8001dac:	5ccb      	ldrb	r3, [r1, r3]
 8001dae:	4619      	mov	r1, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	460b      	mov	r3, r1
 8001db6:	213d      	movs	r1, #61	@ 0x3d
 8001db8:	f7ff fb0a 	bl	80013d0 <Display_DrawLine>
						Display_DrawLine(auxPos+1, 61,  auxPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001dbc:	797b      	ldrb	r3, [r7, #5]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	b298      	uxth	r0, r3
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	4974      	ldr	r1, [pc, #464]	@ (8001fa0 <OLED_Print_Data_Task+0x2ac>)
 8001dd0:	5ccb      	ldrb	r3, [r1, r3]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	213d      	movs	r1, #61	@ 0x3d
 8001ddc:	f7ff faf8 	bl	80013d0 <Display_DrawLine>
						break;
 8001de0:	e005      	b.n	8001dee <OLED_Print_Data_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	3301      	adds	r3, #1
 8001de6:	71bb      	strb	r3, [r7, #6]
 8001de8:	79bb      	ldrb	r3, [r7, #6]
 8001dea:	2b2c      	cmp	r3, #44	@ 0x2c
 8001dec:	d9c5      	bls.n	8001d7a <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	3301      	adds	r3, #1
 8001df2:	71fb      	strb	r3, [r7, #7]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b07      	cmp	r3, #7
 8001df8:	d9bc      	bls.n	8001d74 <OLED_Print_Data_Task+0x80>
					}
				}
			}


			if(MPU6050.isInit){
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80ab 	beq.w	8001f5c <OLED_Print_Data_Task+0x268>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8001e06:	4b67      	ldr	r3, [pc, #412]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0c:	139b      	asrs	r3, r3, #14
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e18:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001fa8 <OLED_Print_Data_Task+0x2b4>
 8001e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e24:	ee17 3a90 	vmov	r3, s15
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e2c:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e34:	139b      	asrs	r3, r3, #14
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e40:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001fa8 <OLED_Print_Data_Task+0x2b4>
 8001e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4c:	ee17 3a90 	vmov	r3, s15
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	4b54      	ldr	r3, [pc, #336]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e54:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8001e56:	4b53      	ldr	r3, [pc, #332]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e5c:	139b      	asrs	r3, r3, #14
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	ee07 3a90 	vmov	s15, r3
 8001e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e68:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001fa8 <OLED_Print_Data_Task+0x2b4>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 3a90 	vmov	r3, s15
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e7c:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8001e7e:	4b49      	ldr	r3, [pc, #292]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4949      	ldr	r1, [pc, #292]	@ (8001fac <OLED_Print_Data_Task+0x2b8>)
 8001e88:	4849      	ldr	r0, [pc, #292]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e8a:	f00e fd5b 	bl	8010944 <siprintf>
				Display_SetCursor(25, 17);
 8001e8e:	2111      	movs	r1, #17
 8001e90:	2019      	movs	r0, #25
 8001e92:	f7ff f8f7 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001e96:	4a47      	ldr	r2, [pc, #284]	@ (8001fb4 <OLED_Print_Data_Task+0x2c0>)
 8001e98:	2301      	movs	r3, #1
 8001e9a:	ca06      	ldmia	r2, {r1, r2}
 8001e9c:	4844      	ldr	r0, [pc, #272]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001e9e:	f7ff fa71 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8001ea2:	4b40      	ldr	r3, [pc, #256]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001ea4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4943      	ldr	r1, [pc, #268]	@ (8001fb8 <OLED_Print_Data_Task+0x2c4>)
 8001eac:	4840      	ldr	r0, [pc, #256]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001eae:	f00e fd49 	bl	8010944 <siprintf>
				Display_SetCursor(25, 34);
 8001eb2:	2122      	movs	r1, #34	@ 0x22
 8001eb4:	2019      	movs	r0, #25
 8001eb6:	f7ff f8e5 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001eba:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb4 <OLED_Print_Data_Task+0x2c0>)
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	ca06      	ldmia	r2, {r1, r2}
 8001ec0:	483b      	ldr	r0, [pc, #236]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001ec2:	f7ff fa5f 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001ec8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	493b      	ldr	r1, [pc, #236]	@ (8001fbc <OLED_Print_Data_Task+0x2c8>)
 8001ed0:	4837      	ldr	r0, [pc, #220]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001ed2:	f00e fd37 	bl	8010944 <siprintf>
				Display_SetCursor(25, 51);
 8001ed6:	2133      	movs	r1, #51	@ 0x33
 8001ed8:	2019      	movs	r0, #25
 8001eda:	f7ff f8d3 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001ede:	4a35      	ldr	r2, [pc, #212]	@ (8001fb4 <OLED_Print_Data_Task+0x2c0>)
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	ca06      	ldmia	r2, {r1, r2}
 8001ee4:	4832      	ldr	r0, [pc, #200]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001ee6:	f7ff fa4d 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8001eea:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001eec:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4933      	ldr	r1, [pc, #204]	@ (8001fc0 <OLED_Print_Data_Task+0x2cc>)
 8001ef4:	482e      	ldr	r0, [pc, #184]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001ef6:	f00e fd25 	bl	8010944 <siprintf>
				Display_SetCursor(73, 17);
 8001efa:	2111      	movs	r1, #17
 8001efc:	2049      	movs	r0, #73	@ 0x49
 8001efe:	f7ff f8c1 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f02:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb4 <OLED_Print_Data_Task+0x2c0>)
 8001f04:	2301      	movs	r3, #1
 8001f06:	ca06      	ldmia	r2, {r1, r2}
 8001f08:	4829      	ldr	r0, [pc, #164]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f0a:	f7ff fa3b 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8001f0e:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001f10:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f14:	461a      	mov	r2, r3
 8001f16:	492b      	ldr	r1, [pc, #172]	@ (8001fc4 <OLED_Print_Data_Task+0x2d0>)
 8001f18:	4825      	ldr	r0, [pc, #148]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f1a:	f00e fd13 	bl	8010944 <siprintf>
				Display_SetCursor(73, 34);
 8001f1e:	2122      	movs	r1, #34	@ 0x22
 8001f20:	2049      	movs	r0, #73	@ 0x49
 8001f22:	f7ff f8af 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f26:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <OLED_Print_Data_Task+0x2c0>)
 8001f28:	2301      	movs	r3, #1
 8001f2a:	ca06      	ldmia	r2, {r1, r2}
 8001f2c:	4820      	ldr	r0, [pc, #128]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f2e:	f7ff fa29 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <OLED_Print_Data_Task+0x2b0>)
 8001f34:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4923      	ldr	r1, [pc, #140]	@ (8001fc8 <OLED_Print_Data_Task+0x2d4>)
 8001f3c:	481c      	ldr	r0, [pc, #112]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f3e:	f00e fd01 	bl	8010944 <siprintf>
				Display_SetCursor(73, 51);
 8001f42:	2133      	movs	r1, #51	@ 0x33
 8001f44:	2049      	movs	r0, #73	@ 0x49
 8001f46:	f7ff f89d 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb4 <OLED_Print_Data_Task+0x2c0>)
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	ca06      	ldmia	r2, {r1, r2}
 8001f50:	4817      	ldr	r0, [pc, #92]	@ (8001fb0 <OLED_Print_Data_Task+0x2bc>)
 8001f52:	f7ff fa17 	bl	8001384 <Display_WriteString>
			}

			break;
 8001f56:	e001      	b.n	8001f5c <OLED_Print_Data_Task+0x268>
			break;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <OLED_Print_Data_Task+0x26a>
			break;
 8001f5c:	bf00      	nop
		}
	}

	is30s--;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <OLED_Print_Data_Task+0x2d8>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <OLED_Print_Data_Task+0x2d8>)
 8001f68:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <OLED_Print_Data_Task+0x2d8>)
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <OLED_Print_Data_Task+0x28a>
		is30s = 300;
 8001f72:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <OLED_Print_Data_Task+0x2d8>)
 8001f74:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f78:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 8001f7a:	f000 f829 	bl	8001fd0 <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff f870 	bl	8001064 <Display_I2C_Refresh_Ready>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000b5c 	.word	0x20000b5c
 8001f90:	08011918 	.word	0x08011918
 8001f94:	0801143c 	.word	0x0801143c
 8001f98:	20000f70 	.word	0x20000f70
 8001f9c:	080113e0 	.word	0x080113e0
 8001fa0:	080113b0 	.word	0x080113b0
 8001fa4:	20000b14 	.word	0x20000b14
 8001fa8:	411ccccd 	.word	0x411ccccd
 8001fac:	0801129c 	.word	0x0801129c
 8001fb0:	20000f64 	.word	0x20000f64
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	080112a4 	.word	0x080112a4
 8001fbc:	080112ac 	.word	0x080112ac
 8001fc0:	080112b4 	.word	0x080112b4
 8001fc4:	080112bc 	.word	0x080112bc
 8001fc8:	080112c4 	.word	0x080112c4
 8001fcc:	2000000c 	.word	0x2000000c

08001fd0 <BateryLevel_Set>:

void BateryLevel_Set(){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2309      	movs	r3, #9
 8001fdc:	2206      	movs	r2, #6
 8001fde:	2104      	movs	r1, #4
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f7ff faa3 	bl	800152c <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <BateryLevel_Set+0x94>)
 8001fe8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001fea:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d908      	bls.n	8002004 <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2309      	movs	r3, #9
 8001ff8:	2206      	movs	r2, #6
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f7ff fa95 	bl	800152c <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 8002002:	e02b      	b.n	800205c <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 8002004:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <BateryLevel_Set+0x94>)
 8002006:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002008:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800200c:	4293      	cmp	r3, r2
 800200e:	d908      	bls.n	8002022 <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8002010:	2301      	movs	r3, #1
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2307      	movs	r3, #7
 8002016:	2206      	movs	r2, #6
 8002018:	2106      	movs	r1, #6
 800201a:	2003      	movs	r0, #3
 800201c:	f7ff fa86 	bl	800152c <Display_DrawFilledRectangle>
}
 8002020:	e01c      	b.n	800205c <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <BateryLevel_Set+0x94>)
 8002024:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002026:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 800202a:	4293      	cmp	r3, r2
 800202c:	d908      	bls.n	8002040 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 800202e:	2301      	movs	r3, #1
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2305      	movs	r3, #5
 8002034:	2206      	movs	r2, #6
 8002036:	2108      	movs	r1, #8
 8002038:	2003      	movs	r0, #3
 800203a:	f7ff fa77 	bl	800152c <Display_DrawFilledRectangle>
}
 800203e:	e00d      	b.n	800205c <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <BateryLevel_Set+0x94>)
 8002042:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002044:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8002048:	4293      	cmp	r3, r2
 800204a:	d907      	bls.n	800205c <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 800204c:	2301      	movs	r3, #1
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2302      	movs	r3, #2
 8002052:	2206      	movs	r2, #6
 8002054:	210b      	movs	r1, #11
 8002056:	2003      	movs	r0, #3
 8002058:	f7ff fa68 	bl	800152c <Display_DrawFilledRectangle>
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000f70 	.word	0x20000f70

08002068 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	785b      	ldrb	r3, [r3, #1]
 8002074:	3302      	adds	r3, #2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800207e:	2bf1      	cmp	r3, #241	@ 0xf1
 8002080:	f000 81c9 	beq.w	8002416 <decodeOn_USB+0x3ae>
 8002084:	2bf1      	cmp	r3, #241	@ 0xf1
 8002086:	f300 81bf 	bgt.w	8002408 <decodeOn_USB+0x3a0>
 800208a:	2bf0      	cmp	r3, #240	@ 0xf0
 800208c:	d036      	beq.n	80020fc <decodeOn_USB+0x94>
 800208e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002090:	f300 81ba 	bgt.w	8002408 <decodeOn_USB+0x3a0>
 8002094:	2bb1      	cmp	r3, #177	@ 0xb1
 8002096:	dc2d      	bgt.n	80020f4 <decodeOn_USB+0x8c>
 8002098:	2ba0      	cmp	r3, #160	@ 0xa0
 800209a:	f2c0 81b5 	blt.w	8002408 <decodeOn_USB+0x3a0>
 800209e:	3ba0      	subs	r3, #160	@ 0xa0
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	f200 81b1 	bhi.w	8002408 <decodeOn_USB+0x3a0>
 80020a6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <decodeOn_USB+0x44>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	08002117 	.word	0x08002117
 80020b0:	0800218d 	.word	0x0800218d
 80020b4:	080021e7 	.word	0x080021e7
 80020b8:	08002273 	.word	0x08002273
 80020bc:	08002311 	.word	0x08002311
 80020c0:	08002409 	.word	0x08002409
 80020c4:	08002409 	.word	0x08002409
 80020c8:	08002409 	.word	0x08002409
 80020cc:	08002409 	.word	0x08002409
 80020d0:	08002409 	.word	0x08002409
 80020d4:	08002409 	.word	0x08002409
 80020d8:	08002409 	.word	0x08002409
 80020dc:	08002409 	.word	0x08002409
 80020e0:	08002409 	.word	0x08002409
 80020e4:	08002409 	.word	0x08002409
 80020e8:	08002409 	.word	0x08002409
 80020ec:	08002409 	.word	0x08002409
 80020f0:	0800241b 	.word	0x0800241b
 80020f4:	2bde      	cmp	r3, #222	@ 0xde
 80020f6:	f000 8192 	beq.w	800241e <decodeOn_USB+0x3b6>
 80020fa:	e185      	b.n	8002408 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	220d      	movs	r2, #13
 8002100:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800210a:	2301      	movs	r3, #1
 800210c:	21f0      	movs	r1, #240	@ 0xf0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fcf8 	bl	8001b04 <comm_sendCMD>
		break;
 8002114:	e184      	b.n	8002420 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	785b      	ldrb	r3, [r3, #1]
 800211a:	3303      	adds	r3, #3
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002124:	2b08      	cmp	r3, #8
 8002126:	d82a      	bhi.n	800217e <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	785b      	ldrb	r3, [r3, #1]
 800212c:	3303      	adds	r3, #3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002136:	4aa8      	ldr	r2, [pc, #672]	@ (80023d8 <decodeOn_USB+0x370>)
 8002138:	3308      	adds	r3, #8
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	885a      	ldrh	r2, [r3, #2]
 8002140:	4ba6      	ldr	r3, [pc, #664]	@ (80023dc <decodeOn_USB+0x374>)
 8002142:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	3303      	adds	r3, #3
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002158:	4ba0      	ldr	r3, [pc, #640]	@ (80023dc <decodeOn_USB+0x374>)
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8002162:	4b9e      	ldr	r3, [pc, #632]	@ (80023dc <decodeOn_USB+0x374>)
 8002164:	785a      	ldrb	r2, [r3, #1]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002172:	2303      	movs	r3, #3
 8002174:	21a0      	movs	r1, #160	@ 0xa0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fcc4 	bl	8001b04 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
		}
		break;
 800217c:	e150      	b.n	8002420 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
 800217e:	2306      	movs	r3, #6
 8002180:	4a97      	ldr	r2, [pc, #604]	@ (80023e0 <decodeOn_USB+0x378>)
 8002182:	21ee      	movs	r1, #238	@ 0xee
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fcbd 	bl	8001b04 <comm_sendCMD>
		break;
 800218a:	e149      	b.n	8002420 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e01d      	b.n	80021ce <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	4a90      	ldr	r2, [pc, #576]	@ (80023d8 <decodeOn_USB+0x370>)
 8002196:	3308      	adds	r3, #8
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	885a      	ldrh	r2, [r3, #2]
 800219e:	4b8f      	ldr	r3, [pc, #572]	@ (80023dc <decodeOn_USB+0x374>)
 80021a0:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	4a8d      	ldr	r2, [pc, #564]	@ (80023dc <decodeOn_USB+0x374>)
 80021a8:	7811      	ldrb	r1, [r2, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a88      	ldr	r2, [pc, #544]	@ (80023dc <decodeOn_USB+0x374>)
 80021bc:	7851      	ldrb	r1, [r2, #1]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	460a      	mov	r2, r1
 80021c4:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d9de      	bls.n	8002192 <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80021da:	2311      	movs	r3, #17
 80021dc:	21a1      	movs	r1, #161	@ 0xa1
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fc90 	bl	8001b04 <comm_sendCMD>
		break;
 80021e4:	e11c      	b.n	8002420 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	785b      	ldrb	r3, [r3, #1]
 80021ea:	3303      	adds	r3, #3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d115      	bne.n	8002224 <decodeOn_USB+0x1bc>
			Motor_Set_PER_Speed(&MotorL, RXBUF[RXCMD + 2]);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	785b      	ldrb	r3, [r3, #1]
 80021fc:	3304      	adds	r3, #4
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002206:	b25b      	sxtb	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	4876      	ldr	r0, [pc, #472]	@ (80023e4 <decodeOn_USB+0x37c>)
 800220c:	f7ff fa6a 	bl	80016e4 <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 8002210:	4b75      	ldr	r3, [pc, #468]	@ (80023e8 <decodeOn_USB+0x380>)
 8002212:	220d      	movs	r2, #13
 8002214:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002218:	2301      	movs	r3, #1
 800221a:	4a74      	ldr	r2, [pc, #464]	@ (80023ec <decodeOn_USB+0x384>)
 800221c:	21a2      	movs	r1, #162	@ 0xa2
 800221e:	4872      	ldr	r0, [pc, #456]	@ (80023e8 <decodeOn_USB+0x380>)
 8002220:	f7ff fc70 	bl	8001b04 <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	3303      	adds	r3, #3
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002232:	2b01      	cmp	r3, #1
 8002234:	d116      	bne.n	8002264 <decodeOn_USB+0x1fc>
			Motor_Set_PER_Speed(&MotorR, RXBUF[RXCMD + 2]);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	3304      	adds	r3, #4
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002244:	b25b      	sxtb	r3, r3
 8002246:	4619      	mov	r1, r3
 8002248:	4869      	ldr	r0, [pc, #420]	@ (80023f0 <decodeOn_USB+0x388>)
 800224a:	f7ff fa4b 	bl	80016e4 <Motor_Set_PER_Speed>
			USB.data.auxBuffer[0] = ACK;
 800224e:	4b66      	ldr	r3, [pc, #408]	@ (80023e8 <decodeOn_USB+0x380>)
 8002250:	220d      	movs	r2, #13
 8002252:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002256:	2301      	movs	r3, #1
 8002258:	4a64      	ldr	r2, [pc, #400]	@ (80023ec <decodeOn_USB+0x384>)
 800225a:	21a2      	movs	r1, #162	@ 0xa2
 800225c:	4862      	ldr	r0, [pc, #392]	@ (80023e8 <decodeOn_USB+0x380>)
 800225e:	f7ff fc51 	bl	8001b04 <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 8002262:	e0dd      	b.n	8002420 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
 8002264:	2308      	movs	r3, #8
 8002266:	4a63      	ldr	r2, [pc, #396]	@ (80023f4 <decodeOn_USB+0x38c>)
 8002268:	21ee      	movs	r1, #238	@ 0xee
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fc4a 	bl	8001b04 <comm_sendCMD>
		break;
 8002270:	e0d6      	b.n	8002420 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	3303      	adds	r3, #3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11a      	bne.n	80022ba <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 8002284:	4b5c      	ldr	r3, [pc, #368]	@ (80023f8 <decodeOn_USB+0x390>)
 8002286:	891a      	ldrh	r2, [r3, #8]
 8002288:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <decodeOn_USB+0x374>)
 800228a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002294:	4b51      	ldr	r3, [pc, #324]	@ (80023dc <decodeOn_USB+0x374>)
 8002296:	781a      	ldrb	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800229e:	4b4f      	ldr	r3, [pc, #316]	@ (80023dc <decodeOn_USB+0x374>)
 80022a0:	785a      	ldrb	r2, [r3, #1]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80022ae:	2303      	movs	r3, #3
 80022b0:	21a3      	movs	r1, #163	@ 0xa3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fc26 	bl	8001b04 <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 80022b8:	e0b2      	b.n	8002420 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	3303      	adds	r3, #3
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d11a      	bne.n	8002302 <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 80022cc:	4b4b      	ldr	r3, [pc, #300]	@ (80023fc <decodeOn_USB+0x394>)
 80022ce:	891a      	ldrh	r2, [r3, #8]
 80022d0:	4b42      	ldr	r3, [pc, #264]	@ (80023dc <decodeOn_USB+0x374>)
 80022d2:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80022dc:	4b3f      	ldr	r3, [pc, #252]	@ (80023dc <decodeOn_USB+0x374>)
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80022e6:	4b3d      	ldr	r3, [pc, #244]	@ (80023dc <decodeOn_USB+0x374>)
 80022e8:	785a      	ldrb	r2, [r3, #1]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80022f6:	2303      	movs	r3, #3
 80022f8:	21a3      	movs	r1, #163	@ 0xa3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fc02 	bl	8001b04 <comm_sendCMD>
		break;
 8002300:	e08e      	b.n	8002420 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
 8002302:	230a      	movs	r3, #10
 8002304:	4a3e      	ldr	r2, [pc, #248]	@ (8002400 <decodeOn_USB+0x398>)
 8002306:	21ee      	movs	r1, #238	@ 0xee
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff fbfb 	bl	8001b04 <comm_sendCMD>
		break;
 800230e:	e087      	b.n	8002420 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 8002310:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <decodeOn_USB+0x39c>)
 8002312:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002316:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <decodeOn_USB+0x374>)
 8002318:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 800231a:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <decodeOn_USB+0x374>)
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <decodeOn_USB+0x374>)
 8002326:	785a      	ldrb	r2, [r3, #1]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 800232e:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <decodeOn_USB+0x39c>)
 8002330:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002334:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <decodeOn_USB+0x374>)
 8002336:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <decodeOn_USB+0x374>)
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 8002342:	4b26      	ldr	r3, [pc, #152]	@ (80023dc <decodeOn_USB+0x374>)
 8002344:	785a      	ldrb	r2, [r3, #1]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <decodeOn_USB+0x39c>)
 800234e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002352:	4b22      	ldr	r3, [pc, #136]	@ (80023dc <decodeOn_USB+0x374>)
 8002354:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 8002356:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <decodeOn_USB+0x374>)
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 8002360:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <decodeOn_USB+0x374>)
 8002362:	785a      	ldrb	r2, [r3, #1]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 800236a:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <decodeOn_USB+0x39c>)
 800236c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002370:	4b1a      	ldr	r3, [pc, #104]	@ (80023dc <decodeOn_USB+0x374>)
 8002372:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 8002374:	4b19      	ldr	r3, [pc, #100]	@ (80023dc <decodeOn_USB+0x374>)
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <decodeOn_USB+0x374>)
 8002380:	785a      	ldrb	r2, [r3, #1]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 8002388:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <decodeOn_USB+0x39c>)
 800238a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800238e:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <decodeOn_USB+0x374>)
 8002390:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 8002392:	4b12      	ldr	r3, [pc, #72]	@ (80023dc <decodeOn_USB+0x374>)
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 800239c:	4b0f      	ldr	r3, [pc, #60]	@ (80023dc <decodeOn_USB+0x374>)
 800239e:	785a      	ldrb	r2, [r3, #1]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 80023a6:	4b17      	ldr	r3, [pc, #92]	@ (8002404 <decodeOn_USB+0x39c>)
 80023a8:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <decodeOn_USB+0x374>)
 80023ae:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <decodeOn_USB+0x374>)
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <decodeOn_USB+0x374>)
 80023bc:	785a      	ldrb	r2, [r3, #1]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80023ca:	230c      	movs	r3, #12
 80023cc:	21a4      	movs	r1, #164	@ 0xa4
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fb98 	bl	8001b04 <comm_sendCMD>
		break;
 80023d4:	e024      	b.n	8002420 <decodeOn_USB+0x3b8>
 80023d6:	bf00      	nop
 80023d8:	20000f70 	.word	0x20000f70
 80023dc:	20000ac4 	.word	0x20000ac4
 80023e0:	080112cc 	.word	0x080112cc
 80023e4:	20000acc 	.word	0x20000acc
 80023e8:	20000f94 	.word	0x20000f94
 80023ec:	200011a4 	.word	0x200011a4
 80023f0:	20000ae4 	.word	0x20000ae4
 80023f4:	080112d4 	.word	0x080112d4
 80023f8:	20000afc 	.word	0x20000afc
 80023fc:	20000b08 	.word	0x20000b08
 8002400:	080112e0 	.word	0x080112e0
 8002404:	20000b14 	.word	0x20000b14
	default:
		comm_sendCMD(data, SYSERROR, (uint8_t*)"NO CMD", 6);
 8002408:	2306      	movs	r3, #6
 800240a:	4a07      	ldr	r2, [pc, #28]	@ (8002428 <decodeOn_USB+0x3c0>)
 800240c:	21ee      	movs	r1, #238	@ 0xee
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fb78 	bl	8001b04 <comm_sendCMD>
		break;
 8002414:	e004      	b.n	8002420 <decodeOn_USB+0x3b8>
		break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <decodeOn_USB+0x3b8>
		break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <decodeOn_USB+0x3b8>
		break;
 800241e:	bf00      	nop
	}
}
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	080112ec 	.word	0x080112ec

0800242c <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]

}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <task_10ms>:

void task_10ms(){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0

	Debouncer_Task();
 8002448:	f7fe f9e0 	bl	800080c <Debouncer_Task>


	Encoder_Task(&EncoderL);
 800244c:	483c      	ldr	r0, [pc, #240]	@ (8002540 <task_10ms+0xfc>)
 800244e:	f7ff f8d9 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 8002452:	483c      	ldr	r0, [pc, #240]	@ (8002544 <task_10ms+0x100>)
 8002454:	f7ff f8d6 	bl	8001604 <Encoder_Task>


	Motor_Break_Timeout(&MotorL);
 8002458:	483b      	ldr	r0, [pc, #236]	@ (8002548 <task_10ms+0x104>)
 800245a:	f7ff f9a8 	bl	80017ae <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800245e:	483b      	ldr	r0, [pc, #236]	@ (800254c <task_10ms+0x108>)
 8002460:	f7ff f9a5 	bl	80017ae <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8002464:	4836      	ldr	r0, [pc, #216]	@ (8002540 <task_10ms+0xfc>)
 8002466:	f7ff f8cd 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 800246a:	4836      	ldr	r0, [pc, #216]	@ (8002544 <task_10ms+0x100>)
 800246c:	f7ff f8ca 	bl	8001604 <Encoder_Task>

	IS10MS = FALSE;
 8002470:	4a37      	ldr	r2, [pc, #220]	@ (8002550 <task_10ms+0x10c>)
 8002472:	7813      	ldrb	r3, [r2, #0]
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	7013      	strb	r3, [r2, #0]


	is100ms1--;
 800247a:	4b36      	ldr	r3, [pc, #216]	@ (8002554 <task_10ms+0x110>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	3b01      	subs	r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b34      	ldr	r3, [pc, #208]	@ (8002554 <task_10ms+0x110>)
 8002484:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 8002486:	4b33      	ldr	r3, [pc, #204]	@ (8002554 <task_10ms+0x110>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d127      	bne.n	80024de <task_10ms+0x9a>
		is100ms1 = 10;
 800248e:	4b31      	ldr	r3, [pc, #196]	@ (8002554 <task_10ms+0x110>)
 8002490:	220a      	movs	r2, #10
 8002492:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002494:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002498:	482f      	ldr	r0, [pc, #188]	@ (8002558 <task_10ms+0x114>)
 800249a:	f002 ffb4 	bl	8005406 <HAL_GPIO_TogglePin>

		is1s--;
 800249e:	4b2f      	ldr	r3, [pc, #188]	@ (800255c <task_10ms+0x118>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <task_10ms+0x118>)
 80024a8:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80024aa:	4b2c      	ldr	r3, [pc, #176]	@ (800255c <task_10ms+0x118>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d115      	bne.n	80024de <task_10ms+0x9a>
			is1s = 10;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <task_10ms+0x118>)
 80024b4:	220a      	movs	r2, #10
 80024b6:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 80024b8:	4821      	ldr	r0, [pc, #132]	@ (8002540 <task_10ms+0xfc>)
 80024ba:	f7ff f8e3 	bl	8001684 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 80024be:	4821      	ldr	r0, [pc, #132]	@ (8002544 <task_10ms+0x100>)
 80024c0:	f7ff f8e0 	bl	8001684 <Encoder_1s_Elapsed>



			is30s--;
 80024c4:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <task_10ms+0x11c>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <task_10ms+0x11c>)
 80024ce:	801a      	strh	r2, [r3, #0]
			if(!is30s){
 80024d0:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <task_10ms+0x11c>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d102      	bne.n	80024de <task_10ms+0x9a>
				is30s = 30;
 80024d8:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <task_10ms+0x11c>)
 80024da:	221e      	movs	r2, #30
 80024dc:	801a      	strh	r2, [r3, #0]
		}
	}



	Display.refreshCounter--;
 80024de:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <task_10ms+0x120>)
 80024e0:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <task_10ms+0x120>)
 80024ea:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter){
 80024ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <task_10ms+0x120>)
 80024f0:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d107      	bne.n	8002508 <task_10ms+0xc4>
		Display.refreshCounter = Display.refreshRate;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <task_10ms+0x120>)
 80024fa:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 80024fe:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <task_10ms+0x120>)
 8002500:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 8002504:	f7ff fbf6 	bl	8001cf4 <OLED_Print_Data_Task>
	}

	Motor_Break_Timeout(&MotorL);
 8002508:	480f      	ldr	r0, [pc, #60]	@ (8002548 <task_10ms+0x104>)
 800250a:	f7ff f950 	bl	80017ae <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800250e:	480f      	ldr	r0, [pc, #60]	@ (800254c <task_10ms+0x108>)
 8002510:	f7ff f94d 	bl	80017ae <Motor_Break_Timeout>

	Debouncer_Task();
 8002514:	f7fe f97a 	bl	800080c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 8002518:	480b      	ldr	r0, [pc, #44]	@ (8002548 <task_10ms+0x104>)
 800251a:	f7ff f948 	bl	80017ae <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 800251e:	480b      	ldr	r0, [pc, #44]	@ (800254c <task_10ms+0x108>)
 8002520:	f7ff f945 	bl	80017ae <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 8002524:	4806      	ldr	r0, [pc, #24]	@ (8002540 <task_10ms+0xfc>)
 8002526:	f7ff f86d 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 800252a:	4806      	ldr	r0, [pc, #24]	@ (8002544 <task_10ms+0x100>)
 800252c:	f7ff f86a 	bl	8001604 <Encoder_Task>
	IS10MS = FALSE;
 8002530:	4a07      	ldr	r2, [pc, #28]	@ (8002550 <task_10ms+0x10c>)
 8002532:	7813      	ldrb	r3, [r2, #0]
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	7013      	strb	r3, [r2, #0]


}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000afc 	.word	0x20000afc
 8002544:	20000b08 	.word	0x20000b08
 8002548:	20000acc 	.word	0x20000acc
 800254c:	20000ae4 	.word	0x20000ae4
 8002550:	20000ac0 	.word	0x20000ac0
 8002554:	20000008 	.word	0x20000008
 8002558:	40020800 	.word	0x40020800
 800255c:	20000009 	.word	0x20000009
 8002560:	2000000c 	.word	0x2000000c
 8002564:	20000b5c 	.word	0x20000b5c

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256c:	f001 fab6 	bl	8003adc <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 8002570:	4b39      	ldr	r3, [pc, #228]	@ (8002658 <main+0xf0>)
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  Display.isInit = FALSE;
 8002578:	4b38      	ldr	r3, [pc, #224]	@ (800265c <main+0xf4>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800257e:	4b37      	ldr	r3, [pc, #220]	@ (800265c <main+0xf4>)
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002586:	f000 f893 	bl	80026b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800258a:	f000 fb25 	bl	8002bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800258e:	f000 fae5 	bl	8002b5c <MX_DMA_Init>
  MX_ADC1_Init();
 8002592:	f000 f8f7 	bl	8002784 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002596:	f00d fc59 	bl	800fe4c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800259a:	f000 f9e3 	bl	8002964 <MX_TIM1_Init>
  MX_I2C1_Init();
 800259e:	f000 f9b3 	bl	8002908 <MX_I2C1_Init>
  MX_TIM3_Init();
 80025a2:	f000 fa2f 	bl	8002a04 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80025a6:	f000 faaf 	bl	8002b08 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80025aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002660 <main+0xf8>)
 80025ac:	492d      	ldr	r1, [pc, #180]	@ (8002664 <main+0xfc>)
 80025ae:	482e      	ldr	r0, [pc, #184]	@ (8002668 <main+0x100>)
 80025b0:	f7ff f918 	bl	80017e4 <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80025b4:	482d      	ldr	r0, [pc, #180]	@ (800266c <main+0x104>)
 80025b6:	f00d fd9b 	bl	80100f0 <CDC_Attach_Rx>

  HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 80025ba:	2201      	movs	r2, #1
 80025bc:	492c      	ldr	r1, [pc, #176]	@ (8002670 <main+0x108>)
 80025be:	482d      	ldr	r0, [pc, #180]	@ (8002674 <main+0x10c>)
 80025c0:	f009 fa06 	bl	800b9d0 <HAL_UART_Receive_IT>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80025c4:	f7fe f8ba 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80025c8:	492b      	ldr	r1, [pc, #172]	@ (8002678 <main+0x110>)
 80025ca:	482c      	ldr	r0, [pc, #176]	@ (800267c <main+0x114>)
 80025cc:	f7fe f8ea 	bl	80007a4 <Debounce_Add>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <main+0x118>)
 80025d6:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  Init_Timing();
 80025d8:	f000 fbe0 	bl	8002d9c <Init_Timing>


  Init_MPU6050();
 80025dc:	f000 fc22 	bl	8002e24 <Init_MPU6050>
	  }
  }*/
  /* FIN INICIALIZACIÓN DISPLAY */


  Init_Display();
 80025e0:	f000 fc58 	bl	8002e94 <Init_Display>

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <main+0x11c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4a26      	ldr	r2, [pc, #152]	@ (8002688 <main+0x120>)
 80025ee:	4927      	ldr	r1, [pc, #156]	@ (800268c <main+0x124>)
 80025f0:	4827      	ldr	r0, [pc, #156]	@ (8002690 <main+0x128>)
 80025f2:	f7ff f858 	bl	80016a6 <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <main+0x11c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4a25      	ldr	r2, [pc, #148]	@ (8002694 <main+0x12c>)
 8002600:	4925      	ldr	r1, [pc, #148]	@ (8002698 <main+0x130>)
 8002602:	4826      	ldr	r0, [pc, #152]	@ (800269c <main+0x134>)
 8002604:	f7ff f84f 	bl	80016a6 <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8002608:	210a      	movs	r1, #10
 800260a:	4825      	ldr	r0, [pc, #148]	@ (80026a0 <main+0x138>)
 800260c:	f7fe ffdb 	bl	80015c6 <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 8002610:	210a      	movs	r1, #10
 8002612:	4824      	ldr	r0, [pc, #144]	@ (80026a4 <main+0x13c>)
 8002614:	f7fe ffd7 	bl	80015c6 <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  Car.state = IDLE;
 8002618:	4b23      	ldr	r3, [pc, #140]	@ (80026a8 <main+0x140>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 800261e:	4812      	ldr	r0, [pc, #72]	@ (8002668 <main+0x100>)
 8002620:	f7ff f914 	bl	800184c <Comm_Task>
	Display_UpdateScreen_Task();
 8002624:	f7fe fca2 	bl	8000f6c <Display_UpdateScreen_Task>
	  /* END USER TASK */

	if(IS10MS){
 8002628:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <main+0x144>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <main+0xd2>
		task_10ms();
 8002636:	f7ff ff05 	bl	8002444 <task_10ms>
	}

	switch(Car.state){
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <main+0x140>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d005      	beq.n	800264e <main+0xe6>
 8002642:	2b02      	cmp	r3, #2
 8002644:	dceb      	bgt.n	800261e <main+0xb6>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <main+0xea>
 800264a:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 800264c:	e002      	b.n	8002654 <main+0xec>
	case GO_FROM_TO:

		break;
 800264e:	bf00      	nop
 8002650:	e7e5      	b.n	800261e <main+0xb6>
		break;
 8002652:	bf00      	nop
	Comm_Task(&USB.data);
 8002654:	e7e3      	b.n	800261e <main+0xb6>
 8002656:	bf00      	nop
 8002658:	20000b14 	.word	0x20000b14
 800265c:	20000b5c 	.word	0x20000b5c
 8002660:	08003189 	.word	0x08003189
 8002664:	08002069 	.word	0x08002069
 8002668:	20000f94 	.word	0x20000f94
 800266c:	080031fd 	.word	0x080031fd
 8002670:	200011c9 	.word	0x200011c9
 8002674:	20000a78 	.word	0x20000a78
 8002678:	0800242d 	.word	0x0800242d
 800267c:	08003171 	.word	0x08003171
 8002680:	20000ac8 	.word	0x20000ac8
 8002684:	20000a30 	.word	0x20000a30
 8002688:	08003255 	.word	0x08003255
 800268c:	08003399 	.word	0x08003399
 8002690:	20000acc 	.word	0x20000acc
 8002694:	080032f9 	.word	0x080032f9
 8002698:	080033bd 	.word	0x080033bd
 800269c:	20000ae4 	.word	0x20000ae4
 80026a0:	20000afc 	.word	0x20000afc
 80026a4:	20000b08 	.word	0x20000b08
 80026a8:	200011c8 	.word	0x200011c8
 80026ac:	20000ac0 	.word	0x20000ac0

080026b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b094      	sub	sp, #80	@ 0x50
 80026b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b6:	f107 0320 	add.w	r3, r7, #32
 80026ba:	2230      	movs	r2, #48	@ 0x30
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f00e f962 	bl	8010988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	4b28      	ldr	r3, [pc, #160]	@ (800277c <SystemClock_Config+0xcc>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	4a27      	ldr	r2, [pc, #156]	@ (800277c <SystemClock_Config+0xcc>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e4:	4b25      	ldr	r3, [pc, #148]	@ (800277c <SystemClock_Config+0xcc>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <SystemClock_Config+0xd0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <SystemClock_Config+0xd0>)
 80026fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <SystemClock_Config+0xd0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800270c:	2301      	movs	r3, #1
 800270e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002716:	2302      	movs	r3, #2
 8002718:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800271a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002720:	2319      	movs	r3, #25
 8002722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002724:	23c0      	movs	r3, #192	@ 0xc0
 8002726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002728:	2302      	movs	r3, #2
 800272a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800272c:	2304      	movs	r3, #4
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002730:	f107 0320 	add.w	r3, r7, #32
 8002734:	4618      	mov	r0, r3
 8002736:	f007 fcc5 	bl	800a0c4 <HAL_RCC_OscConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002740:	f000 fe4e 	bl	80033e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002744:	230f      	movs	r3, #15
 8002746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002748:	2302      	movs	r3, #2
 800274a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800275a:	f107 030c 	add.w	r3, r7, #12
 800275e:	2103      	movs	r1, #3
 8002760:	4618      	mov	r0, r3
 8002762:	f007 ff27 	bl	800a5b4 <HAL_RCC_ClockConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800276c:	f000 fe38 	bl	80033e0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002770:	f008 f806 	bl	800a780 <HAL_RCC_EnableCSS>
}
 8002774:	bf00      	nop
 8002776:	3750      	adds	r7, #80	@ 0x50
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	40007000 	.word	0x40007000

08002784 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800278a:	463b      	mov	r3, r7
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002796:	4b59      	ldr	r3, [pc, #356]	@ (80028fc <MX_ADC1_Init+0x178>)
 8002798:	4a59      	ldr	r2, [pc, #356]	@ (8002900 <MX_ADC1_Init+0x17c>)
 800279a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800279c:	4b57      	ldr	r3, [pc, #348]	@ (80028fc <MX_ADC1_Init+0x178>)
 800279e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a4:	4b55      	ldr	r3, [pc, #340]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027aa:	4b54      	ldr	r3, [pc, #336]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027ac:	2201      	movs	r2, #1
 80027ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027b0:	4b52      	ldr	r3, [pc, #328]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027b6:	4b51      	ldr	r3, [pc, #324]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027be:	4b4f      	ldr	r3, [pc, #316]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c4:	4b4d      	ldr	r3, [pc, #308]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002904 <MX_ADC1_Init+0x180>)
 80027c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027ca:	4b4c      	ldr	r3, [pc, #304]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80027d0:	4b4a      	ldr	r3, [pc, #296]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027d2:	2209      	movs	r2, #9
 80027d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027d6:	4b49      	ldr	r3, [pc, #292]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027de:	4b47      	ldr	r3, [pc, #284]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e4:	4845      	ldr	r0, [pc, #276]	@ (80028fc <MX_ADC1_Init+0x178>)
 80027e6:	f001 fa0f 	bl	8003c08 <HAL_ADC_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027f0:	f000 fdf6 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027f8:	2301      	movs	r3, #1
 80027fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80027fc:	2303      	movs	r3, #3
 80027fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002800:	463b      	mov	r3, r7
 8002802:	4619      	mov	r1, r3
 8002804:	483d      	ldr	r0, [pc, #244]	@ (80028fc <MX_ADC1_Init+0x178>)
 8002806:	f001 fc61 	bl	80040cc <HAL_ADC_ConfigChannel>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002810:	f000 fde6 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002814:	2302      	movs	r3, #2
 8002816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002818:	2302      	movs	r3, #2
 800281a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800281c:	463b      	mov	r3, r7
 800281e:	4619      	mov	r1, r3
 8002820:	4836      	ldr	r0, [pc, #216]	@ (80028fc <MX_ADC1_Init+0x178>)
 8002822:	f001 fc53 	bl	80040cc <HAL_ADC_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800282c:	f000 fdd8 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002830:	2303      	movs	r3, #3
 8002832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002834:	2303      	movs	r3, #3
 8002836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002838:	463b      	mov	r3, r7
 800283a:	4619      	mov	r1, r3
 800283c:	482f      	ldr	r0, [pc, #188]	@ (80028fc <MX_ADC1_Init+0x178>)
 800283e:	f001 fc45 	bl	80040cc <HAL_ADC_ConfigChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002848:	f000 fdca 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800284c:	2304      	movs	r3, #4
 800284e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002850:	2304      	movs	r3, #4
 8002852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002854:	463b      	mov	r3, r7
 8002856:	4619      	mov	r1, r3
 8002858:	4828      	ldr	r0, [pc, #160]	@ (80028fc <MX_ADC1_Init+0x178>)
 800285a:	f001 fc37 	bl	80040cc <HAL_ADC_ConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002864:	f000 fdbc 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002868:	2305      	movs	r3, #5
 800286a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800286c:	2305      	movs	r3, #5
 800286e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002870:	463b      	mov	r3, r7
 8002872:	4619      	mov	r1, r3
 8002874:	4821      	ldr	r0, [pc, #132]	@ (80028fc <MX_ADC1_Init+0x178>)
 8002876:	f001 fc29 	bl	80040cc <HAL_ADC_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002880:	f000 fdae 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002884:	2306      	movs	r3, #6
 8002886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002888:	2306      	movs	r3, #6
 800288a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	481a      	ldr	r0, [pc, #104]	@ (80028fc <MX_ADC1_Init+0x178>)
 8002892:	f001 fc1b 	bl	80040cc <HAL_ADC_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800289c:	f000 fda0 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80028a0:	2307      	movs	r3, #7
 80028a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80028a4:	2307      	movs	r3, #7
 80028a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a8:	463b      	mov	r3, r7
 80028aa:	4619      	mov	r1, r3
 80028ac:	4813      	ldr	r0, [pc, #76]	@ (80028fc <MX_ADC1_Init+0x178>)
 80028ae:	f001 fc0d 	bl	80040cc <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80028b8:	f000 fd92 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80028bc:	2308      	movs	r3, #8
 80028be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80028c0:	2308      	movs	r3, #8
 80028c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028c4:	463b      	mov	r3, r7
 80028c6:	4619      	mov	r1, r3
 80028c8:	480c      	ldr	r0, [pc, #48]	@ (80028fc <MX_ADC1_Init+0x178>)
 80028ca:	f001 fbff 	bl	80040cc <HAL_ADC_ConfigChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80028d4:	f000 fd84 	bl	80033e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80028d8:	2309      	movs	r3, #9
 80028da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80028dc:	2309      	movs	r3, #9
 80028de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e0:	463b      	mov	r3, r7
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	@ (80028fc <MX_ADC1_Init+0x178>)
 80028e6:	f001 fbf1 	bl	80040cc <HAL_ADC_ConfigChannel>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80028f0:	f000 fd76 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2000082c 	.word	0x2000082c
 8002900:	40012000 	.word	0x40012000
 8002904:	0f000001 	.word	0x0f000001

08002908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <MX_I2C1_Init+0x50>)
 800290e:	4a13      	ldr	r2, [pc, #76]	@ (800295c <MX_I2C1_Init+0x54>)
 8002910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002912:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002914:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <MX_I2C1_Init+0x58>)
 8002916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <MX_I2C1_Init+0x50>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800291e:	4b0e      	ldr	r3, [pc, #56]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002926:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800292a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800292c:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <MX_I2C1_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002932:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002938:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <MX_I2C1_Init+0x50>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	@ (8002958 <MX_I2C1_Init+0x50>)
 8002946:	f002 fd91 	bl	800546c <HAL_I2C_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002950:	f000 fd46 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200008d4 	.word	0x200008d4
 800295c:	40005400 	.word	0x40005400
 8002960:	00061a80 	.word	0x00061a80

08002964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	463b      	mov	r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002980:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <MX_TIM1_Init+0x98>)
 8002982:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <MX_TIM1_Init+0x9c>)
 8002984:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <MX_TIM1_Init+0x98>)
 8002988:	2200      	movs	r2, #0
 800298a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298c:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <MX_TIM1_Init+0x98>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <MX_TIM1_Init+0x98>)
 8002994:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002998:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299a:	4b18      	ldr	r3, [pc, #96]	@ (80029fc <MX_TIM1_Init+0x98>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029a0:	4b16      	ldr	r3, [pc, #88]	@ (80029fc <MX_TIM1_Init+0x98>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <MX_TIM1_Init+0x98>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029ac:	4813      	ldr	r0, [pc, #76]	@ (80029fc <MX_TIM1_Init+0x98>)
 80029ae:	f008 f808 	bl	800a9c2 <HAL_TIM_Base_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029b8:	f000 fd12 	bl	80033e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4619      	mov	r1, r3
 80029c8:	480c      	ldr	r0, [pc, #48]	@ (80029fc <MX_TIM1_Init+0x98>)
 80029ca:	f008 fb67 	bl	800b09c <HAL_TIM_ConfigClockSource>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029d4:	f000 fd04 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029e0:	463b      	mov	r3, r7
 80029e2:	4619      	mov	r1, r3
 80029e4:	4805      	ldr	r0, [pc, #20]	@ (80029fc <MX_TIM1_Init+0x98>)
 80029e6:	f008 ff21 	bl	800b82c <HAL_TIMEx_MasterConfigSynchronization>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029f0:	f000 fcf6 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200009e8 	.word	0x200009e8
 8002a00:	40010000 	.word	0x40010000

08002a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08e      	sub	sp, #56	@ 0x38
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a18:	f107 0320 	add.w	r3, r7, #32
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
 8002a30:	615a      	str	r2, [r3, #20]
 8002a32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a34:	4b32      	ldr	r3, [pc, #200]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a36:	4a33      	ldr	r2, [pc, #204]	@ (8002b04 <MX_TIM3_Init+0x100>)
 8002a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8002a3a:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a3c:	220f      	movs	r2, #15
 8002a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a40:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002a46:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a48:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a54:	4b2a      	ldr	r3, [pc, #168]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a5a:	4829      	ldr	r0, [pc, #164]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a5c:	f007 ffb1 	bl	800a9c2 <HAL_TIM_Base_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a66:	f000 fcbb 	bl	80033e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4822      	ldr	r0, [pc, #136]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a78:	f008 fb10 	bl	800b09c <HAL_TIM_ConfigClockSource>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a82:	f000 fcad 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a86:	481e      	ldr	r0, [pc, #120]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002a88:	f008 f84c 	bl	800ab24 <HAL_TIM_PWM_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a92:	f000 fca5 	bl	80033e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a9e:	f107 0320 	add.w	r3, r7, #32
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4816      	ldr	r0, [pc, #88]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002aa6:	f008 fec1 	bl	800b82c <HAL_TIMEx_MasterConfigSynchronization>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ab0:	f000 fc96 	bl	80033e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ab4:	2360      	movs	r3, #96	@ 0x60
 8002ab6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480d      	ldr	r0, [pc, #52]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002acc:	f008 fa24 	bl	800af18 <HAL_TIM_PWM_ConfigChannel>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002ad6:	f000 fc83 	bl	80033e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2204      	movs	r2, #4
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4807      	ldr	r0, [pc, #28]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002ae2:	f008 fa19 	bl	800af18 <HAL_TIM_PWM_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002aec:	f000 fc78 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002af0:	4803      	ldr	r0, [pc, #12]	@ (8002b00 <MX_TIM3_Init+0xfc>)
 8002af2:	f000 fe49 	bl	8003788 <HAL_TIM_MspPostInit>

}
 8002af6:	bf00      	nop
 8002af8:	3738      	adds	r7, #56	@ 0x38
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000a30 	.word	0x20000a30
 8002b04:	40000400 	.word	0x40000400

08002b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <MX_USART1_UART_Init+0x50>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b12:	4b10      	ldr	r3, [pc, #64]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b3e:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <MX_USART1_UART_Init+0x4c>)
 8002b40:	f008 fef6 	bl	800b930 <HAL_UART_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b4a:	f000 fc49 	bl	80033e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000a78 	.word	0x20000a78
 8002b58:	40011000 	.word	0x40011000

08002b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <MX_DMA_Init+0x78>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bd4 <MX_DMA_Init+0x78>)
 8002b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b72:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <MX_DMA_Init+0x78>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4b14      	ldr	r3, [pc, #80]	@ (8002bd4 <MX_DMA_Init+0x78>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	4a13      	ldr	r2, [pc, #76]	@ (8002bd4 <MX_DMA_Init+0x78>)
 8002b88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <MX_DMA_Init+0x78>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	200b      	movs	r0, #11
 8002ba0:	f001 fe29 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ba4:	200b      	movs	r0, #11
 8002ba6:	f001 fe42 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	200c      	movs	r0, #12
 8002bb0:	f001 fe21 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002bb4:	200c      	movs	r0, #12
 8002bb6:	f001 fe3a 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2038      	movs	r0, #56	@ 0x38
 8002bc0:	f001 fe19 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002bc4:	2038      	movs	r0, #56	@ 0x38
 8002bc6:	f001 fe32 	bl	800482e <HAL_NVIC_EnableIRQ>

}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
 8002bec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b66      	ldr	r3, [pc, #408]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a65      	ldr	r2, [pc, #404]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a5e      	ldr	r2, [pc, #376]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	4b58      	ldr	r3, [pc, #352]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2e:	4a57      	ldr	r2, [pc, #348]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	4b55      	ldr	r3, [pc, #340]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b51      	ldr	r3, [pc, #324]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a50      	ldr	r2, [pc, #320]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b4e      	ldr	r3, [pc, #312]	@ (8002d8c <MX_GPIO_Init+0x1b4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c64:	484a      	ldr	r0, [pc, #296]	@ (8002d90 <MX_GPIO_Init+0x1b8>)
 8002c66:	f002 fbb5 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002c70:	4848      	ldr	r0, [pc, #288]	@ (8002d94 <MX_GPIO_Init+0x1bc>)
 8002c72:	f002 fbaf 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2108      	movs	r1, #8
 8002c7a:	4847      	ldr	r0, [pc, #284]	@ (8002d98 <MX_GPIO_Init+0x1c0>)
 8002c7c:	f002 fbaa 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002c80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c86:	2301      	movs	r3, #1
 8002c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002c92:	f107 0314 	add.w	r3, r7, #20
 8002c96:	4619      	mov	r1, r3
 8002c98:	483d      	ldr	r0, [pc, #244]	@ (8002d90 <MX_GPIO_Init+0x1b8>)
 8002c9a:	f002 f9ff 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4838      	ldr	r0, [pc, #224]	@ (8002d94 <MX_GPIO_Init+0x1bc>)
 8002cb2:	f002 f9f3 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4833      	ldr	r0, [pc, #204]	@ (8002d98 <MX_GPIO_Init+0x1c0>)
 8002cca:	f002 f9e7 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	482c      	ldr	r0, [pc, #176]	@ (8002d98 <MX_GPIO_Init+0x1c0>)
 8002ce6:	f002 f9d9 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cea:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cfc:	2305      	movs	r3, #5
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	4824      	ldr	r0, [pc, #144]	@ (8002d98 <MX_GPIO_Init+0x1c0>)
 8002d08:	f002 f9c8 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	481c      	ldr	r0, [pc, #112]	@ (8002d94 <MX_GPIO_Init+0x1bc>)
 8002d24:	f002 f9ba 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8002d28:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d36:	2300      	movs	r3, #0
 8002d38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4814      	ldr	r0, [pc, #80]	@ (8002d94 <MX_GPIO_Init+0x1bc>)
 8002d42:	f002 f9ab 	bl	800509c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8002d46:	2308      	movs	r3, #8
 8002d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480e      	ldr	r0, [pc, #56]	@ (8002d98 <MX_GPIO_Init+0x1c0>)
 8002d5e:	f002 f99d 	bl	800509c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2017      	movs	r0, #23
 8002d68:	f001 fd45 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d6c:	2017      	movs	r0, #23
 8002d6e:	f001 fd5e 	bl	800482e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	2028      	movs	r0, #40	@ 0x28
 8002d78:	f001 fd3d 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d7c:	2028      	movs	r0, #40	@ 0x28
 8002d7e:	f001 fd56 	bl	800482e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d82:	bf00      	nop
 8002d84:	3728      	adds	r7, #40	@ 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40020800 	.word	0x40020800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400

08002d9c <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8002da0:	4819      	ldr	r0, [pc, #100]	@ (8002e08 <Init_Timing+0x6c>)
 8002da2:	f007 fe5d 	bl	800aa60 <HAL_TIM_Base_Start_IT>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8002dac:	2309      	movs	r3, #9
 8002dae:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <Init_Timing+0x70>)
 8002db0:	21ee      	movs	r1, #238	@ 0xee
 8002db2:	4817      	ldr	r0, [pc, #92]	@ (8002e10 <Init_Timing+0x74>)
 8002db4:	f7fe fea6 	bl	8001b04 <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8002db8:	4816      	ldr	r0, [pc, #88]	@ (8002e14 <Init_Timing+0x78>)
 8002dba:	f007 fe51 	bl	800aa60 <HAL_TIM_Base_Start_IT>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002dc4:	230e      	movs	r3, #14
 8002dc6:	4a14      	ldr	r2, [pc, #80]	@ (8002e18 <Init_Timing+0x7c>)
 8002dc8:	21ee      	movs	r1, #238	@ 0xee
 8002dca:	4811      	ldr	r0, [pc, #68]	@ (8002e10 <Init_Timing+0x74>)
 8002dcc:	f7fe fe9a 	bl	8001b04 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4810      	ldr	r0, [pc, #64]	@ (8002e14 <Init_Timing+0x78>)
 8002dd4:	f007 ff00 	bl	800abd8 <HAL_TIM_PWM_Start>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002dde:	230e      	movs	r3, #14
 8002de0:	4a0e      	ldr	r2, [pc, #56]	@ (8002e1c <Init_Timing+0x80>)
 8002de2:	21ee      	movs	r1, #238	@ 0xee
 8002de4:	480a      	ldr	r0, [pc, #40]	@ (8002e10 <Init_Timing+0x74>)
 8002de6:	f7fe fe8d 	bl	8001b04 <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8002dea:	2104      	movs	r1, #4
 8002dec:	4809      	ldr	r0, [pc, #36]	@ (8002e14 <Init_Timing+0x78>)
 8002dee:	f007 fef3 	bl	800abd8 <HAL_TIM_PWM_Start>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8002df8:	230e      	movs	r3, #14
 8002dfa:	4a09      	ldr	r2, [pc, #36]	@ (8002e20 <Init_Timing+0x84>)
 8002dfc:	21ee      	movs	r1, #238	@ 0xee
 8002dfe:	4804      	ldr	r0, [pc, #16]	@ (8002e10 <Init_Timing+0x74>)
 8002e00:	f7fe fe80 	bl	8001b04 <comm_sendCMD>
	  }
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200009e8 	.word	0x200009e8
 8002e0c:	080112f4 	.word	0x080112f4
 8002e10:	20000f94 	.word	0x20000f94
 8002e14:	20000a30 	.word	0x20000a30
 8002e18:	08011300 	.word	0x08011300
 8002e1c:	08011310 	.word	0x08011310
 8002e20:	08011320 	.word	0x08011320

08002e24 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8002e28:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	21d0      	movs	r1, #208	@ 0xd0
 8002e30:	4811      	ldr	r0, [pc, #68]	@ (8002e78 <Init_MPU6050+0x54>)
 8002e32:	f003 fb8d 	bl	8006550 <HAL_I2C_IsDeviceReady>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8002e3c:	230d      	movs	r3, #13
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <Init_MPU6050+0x58>)
 8002e40:	21ee      	movs	r1, #238	@ 0xee
 8002e42:	480f      	ldr	r0, [pc, #60]	@ (8002e80 <Init_MPU6050+0x5c>)
 8002e44:	f7fe fe5e 	bl	8001b04 <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8002e48:	e013      	b.n	8002e72 <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 8002e4a:	490e      	ldr	r1, [pc, #56]	@ (8002e84 <Init_MPU6050+0x60>)
 8002e4c:	480e      	ldr	r0, [pc, #56]	@ (8002e88 <Init_MPU6050+0x64>)
 8002e4e:	f7fd fd0f 	bl	8000870 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8002e52:	480e      	ldr	r0, [pc, #56]	@ (8002e8c <Init_MPU6050+0x68>)
 8002e54:	f7fd fd22 	bl	800089c <MPU6050_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8002e5e:	230c      	movs	r3, #12
 8002e60:	4a0b      	ldr	r2, [pc, #44]	@ (8002e90 <Init_MPU6050+0x6c>)
 8002e62:	21ee      	movs	r1, #238	@ 0xee
 8002e64:	4806      	ldr	r0, [pc, #24]	@ (8002e80 <Init_MPU6050+0x5c>)
 8002e66:	f7fe fe4d 	bl	8001b04 <comm_sendCMD>
}
 8002e6a:	e002      	b.n	8002e72 <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8002e6c:	4807      	ldr	r0, [pc, #28]	@ (8002e8c <Init_MPU6050+0x68>)
 8002e6e:	f7fd fdb7 	bl	80009e0 <MPU6050_Calibrate>
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200008d4 	.word	0x200008d4
 8002e7c:	08011330 	.word	0x08011330
 8002e80:	20000f94 	.word	0x20000f94
 8002e84:	08003131 	.word	0x08003131
 8002e88:	080030f1 	.word	0x080030f1
 8002e8c:	20000b14 	.word	0x20000b14
 8002e90:	08011340 	.word	0x08011340

08002e94 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af02      	add	r7, sp, #8
	Display.refreshCounter = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <Init_Display+0x78>)
 8002e9c:	220a      	movs	r2, #10
 8002e9e:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f0c <Init_Display+0x78>)
 8002ea4:	220a      	movs	r2, #10
 8002ea6:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8002eaa:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002eae:	2201      	movs	r2, #1
 8002eb0:	2178      	movs	r1, #120	@ 0x78
 8002eb2:	4817      	ldr	r0, [pc, #92]	@ (8002f10 <Init_Display+0x7c>)
 8002eb4:	f003 fb4c 	bl	8006550 <HAL_I2C_IsDeviceReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	4a14      	ldr	r2, [pc, #80]	@ (8002f14 <Init_Display+0x80>)
 8002ec2:	21ee      	movs	r1, #238	@ 0xee
 8002ec4:	4814      	ldr	r0, [pc, #80]	@ (8002f18 <Init_Display+0x84>)
 8002ec6:	f7fe fe1d 	bl	8001b04 <comm_sendCMD>
		}else{
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
		}
	}
}
 8002eca:	e01c      	b.n	8002f06 <Init_Display+0x72>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002ecc:	4913      	ldr	r1, [pc, #76]	@ (8002f1c <Init_Display+0x88>)
 8002ece:	4814      	ldr	r0, [pc, #80]	@ (8002f20 <Init_Display+0x8c>)
 8002ed0:	f7fd fec4 	bl	8000c5c <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8002ed4:	f7fd fed8 	bl	8000c88 <Display_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002ede:	2309      	movs	r3, #9
 8002ee0:	4a10      	ldr	r2, [pc, #64]	@ (8002f24 <Init_Display+0x90>)
 8002ee2:	21ee      	movs	r1, #238	@ 0xee
 8002ee4:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <Init_Display+0x84>)
 8002ee6:	f7fe fe0d 	bl	8001b04 <comm_sendCMD>
}
 8002eea:	e00c      	b.n	8002f06 <Init_Display+0x72>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002eec:	2301      	movs	r3, #1
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2340      	movs	r3, #64	@ 0x40
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8002f28 <Init_Display+0x94>)
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2000      	movs	r0, #0
 8002efc:	f7fe f95e 	bl	80011bc <Display_DrawBitmap>
			Display.isInit = TRUE;
 8002f00:	4b02      	ldr	r3, [pc, #8]	@ (8002f0c <Init_Display+0x78>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20000b5c 	.word	0x20000b5c
 8002f10:	200008d4 	.word	0x200008d4
 8002f14:	08011350 	.word	0x08011350
 8002f18:	20000f94 	.word	0x20000f94
 8002f1c:	080030bd 	.word	0x080030bd
 8002f20:	08003081 	.word	0x08003081
 8002f24:	0801135c 	.word	0x0801135c
 8002f28:	08011518 	.word	0x08011518

08002f2c <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	@ (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d123      	bne.n	8002f86 <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8002f3e:	2209      	movs	r2, #9
 8002f40:	4919      	ldr	r1, [pc, #100]	@ (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f42:	481a      	ldr	r0, [pc, #104]	@ (8002fac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f44:	f000 ffb4 	bl	8003eb0 <HAL_ADC_Start_DMA>
		is5ms--;
 8002f48:	4b19      	ldr	r3, [pc, #100]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f52:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8002f54:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d114      	bne.n	8002f86 <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f5e:	2214      	movs	r2, #20
 8002f60:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8002f62:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002f64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14);
 8002f6c:	230e      	movs	r3, #14
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2301      	movs	r3, #1
 8002f76:	223b      	movs	r2, #59	@ 0x3b
 8002f78:	21d0      	movs	r1, #208	@ 0xd0
 8002f7a:	4810      	ldr	r0, [pc, #64]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002f7c:	f003 f958 	bl	8006230 <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe f85f 	bl	8001044 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8002f90:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002f92:	7813      	ldrb	r3, [r2, #0]
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	7013      	strb	r3, [r2, #0]




	}
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	20000f70 	.word	0x20000f70
 8002fac:	2000082c 	.word	0x2000082c
 8002fb0:	2000000a 	.word	0x2000000a
 8002fb4:	20000b14 	.word	0x20000b14
 8002fb8:	20000b4a 	.word	0x20000b4a
 8002fbc:	200008d4 	.word	0x200008d4
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	20000ac0 	.word	0x20000ac0

08002fc8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd4:	2b78      	cmp	r3, #120	@ 0x78
 8002fd6:	d102      	bne.n	8002fde <HAL_I2C_MemTxCpltCallback+0x16>
		Display_I2C_DMA_Ready(TRUE);
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f7fe f833 	bl	8001044 <Display_I2C_DMA_Ready>

	}
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff4:	2bd0      	cmp	r3, #208	@ 0xd0
 8002ff6:	d105      	bne.n	8003004 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 8002ff8:	480a      	ldr	r0, [pc, #40]	@ (8003024 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8002ffa:	f7fd fda1 	bl	8000b40 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8002ffe:	2001      	movs	r0, #1
 8003000:	f7fe f820 	bl	8001044 <Display_I2C_DMA_Ready>
	}


	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	2b78      	cmp	r3, #120	@ 0x78
 800300a:	d107      	bne.n	800301c <HAL_I2C_MemRxCpltCallback+0x34>
		if(!MPU6050.isInit){
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800300e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_I2C_MemRxCpltCallback+0x34>
			Display_I2C_DMA_Ready(TRUE);
 8003016:	2001      	movs	r0, #1
 8003018:	f7fe f814 	bl	8001044 <Display_I2C_DMA_Ready>
	}




}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000b14 	.word	0x20000b14

08003028 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 8003030:	4903      	ldr	r1, [pc, #12]	@ (8003040 <HAL_ADC_ConvCpltCallback+0x18>)
 8003032:	4804      	ldr	r0, [pc, #16]	@ (8003044 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003034:	f7fd faba 	bl	80005ac <ADC_Conversion_Cplt>
}
 8003038:	bf00      	nop
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000f82 	.word	0x20000f82
 8003044:	20000f70 	.word	0x20000f70

08003048 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003058:	d102      	bne.n	8003060 <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 800305a:	4807      	ldr	r0, [pc, #28]	@ (8003078 <HAL_GPIO_EXTI_Callback+0x30>)
 800305c:	f7fe fb02 	bl	8001664 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 8003060:	88fb      	ldrh	r3, [r7, #6]
 8003062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003066:	d102      	bne.n	800306e <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8003068:	4804      	ldr	r0, [pc, #16]	@ (800307c <HAL_GPIO_EXTI_Callback+0x34>)
 800306a:	f7fe fafb 	bl	8001664 <Encoder_Add_Pulse>
	}
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000afc 	.word	0x20000afc
 800307c:	20000b08 	.word	0x20000b08

08003080 <I2C_1_Abstract_Mem_DMA_Transmit>:
		dataRx = 0;
	}
}*/
/**************************************** END HAL CALLBACKS ***************************************/
/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60ba      	str	r2, [r7, #8]
 8003088:	461a      	mov	r2, r3
 800308a:	4603      	mov	r3, r0
 800308c:	81fb      	strh	r3, [r7, #14]
 800308e:	460b      	mov	r3, r1
 8003090:	737b      	strb	r3, [r7, #13]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 8003096:	7b7b      	ldrb	r3, [r7, #13]
 8003098:	b29a      	uxth	r2, r3
 800309a:	89f9      	ldrh	r1, [r7, #14]
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2301      	movs	r3, #1
 80030a6:	4804      	ldr	r0, [pc, #16]	@ (80030b8 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 80030a8:	f002 ff64 	bl	8005f74 <HAL_I2C_Mem_Write_DMA>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	200008d4 	.word	0x200008d4

080030bc <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	4603      	mov	r3, r0
 80030c8:	81fb      	strh	r3, [r7, #14]
 80030ca:	4613      	mov	r3, r2
 80030cc:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80030ce:	89ba      	ldrh	r2, [r7, #12]
 80030d0:	89f9      	ldrh	r1, [r7, #14]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	4804      	ldr	r0, [pc, #16]	@ (80030ec <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80030dc:	f002 fb20 	bl	8005720 <HAL_I2C_Master_Transmit>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200008d4 	.word	0x200008d4

080030f0 <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af04      	add	r7, sp, #16
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	4603      	mov	r3, r0
 80030fa:	80fb      	strh	r3, [r7, #6]
 80030fc:	460b      	mov	r3, r1
 80030fe:	717b      	strb	r3, [r7, #5]
 8003100:	4613      	mov	r3, r2
 8003102:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8003104:	797b      	ldrb	r3, [r7, #5]
 8003106:	b29a      	uxth	r2, r3
 8003108:	793b      	ldrb	r3, [r7, #4]
 800310a:	b298      	uxth	r0, r3
 800310c:	88f9      	ldrh	r1, [r7, #6]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	9302      	str	r3, [sp, #8]
 8003112:	8a3b      	ldrh	r3, [r7, #16]
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4603      	mov	r3, r0
 800311c:	4803      	ldr	r0, [pc, #12]	@ (800312c <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800311e:	f002 fbfd 	bl	800591c <HAL_I2C_Mem_Write>
 8003122:	4603      	mov	r3, r0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200008d4 	.word	0x200008d4

08003130 <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af04      	add	r7, sp, #16
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4603      	mov	r3, r0
 800313a:	80fb      	strh	r3, [r7, #6]
 800313c:	460b      	mov	r3, r1
 800313e:	717b      	strb	r3, [r7, #5]
 8003140:	4613      	mov	r3, r2
 8003142:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8003144:	797b      	ldrb	r3, [r7, #5]
 8003146:	b29a      	uxth	r2, r3
 8003148:	793b      	ldrb	r3, [r7, #4]
 800314a:	b298      	uxth	r0, r3
 800314c:	88f9      	ldrh	r1, [r7, #6]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	9302      	str	r3, [sp, #8]
 8003152:	8a3b      	ldrh	r3, [r7, #16]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	4803      	ldr	r0, [pc, #12]	@ (800316c <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 800315e:	f002 fcd7 	bl	8005b10 <HAL_I2C_Mem_Read>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200008d4 	.word	0x200008d4

08003170 <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8003174:	2101      	movs	r1, #1
 8003176:	4803      	ldr	r0, [pc, #12]	@ (8003184 <KEY_Read_Value+0x14>)
 8003178:	f002 f914 	bl	80053a4 <HAL_GPIO_ReadPin>
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40020000 	.word	0x40020000

08003188 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <writeOn_USB+0x70>)
 8003192:	78da      	ldrb	r2, [r3, #3]
 8003194:	4b18      	ldr	r3, [pc, #96]	@ (80031f8 <writeOn_USB+0x70>)
 8003196:	789b      	ldrb	r3, [r3, #2]
 8003198:	429a      	cmp	r2, r3
 800319a:	d909      	bls.n	80031b0 <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 800319c:	4b16      	ldr	r3, [pc, #88]	@ (80031f8 <writeOn_USB+0x70>)
 800319e:	78da      	ldrb	r2, [r3, #3]
 80031a0:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <writeOn_USB+0x70>)
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b13      	ldr	r3, [pc, #76]	@ (80031f8 <writeOn_USB+0x70>)
 80031aa:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 80031ae:	e006      	b.n	80031be <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <writeOn_USB+0x70>)
 80031b2:	789b      	ldrb	r3, [r3, #2]
 80031b4:	425b      	negs	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <writeOn_USB+0x70>)
 80031ba:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <writeOn_USB+0x70>)
 80031c0:	789b      	ldrb	r3, [r3, #2]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <writeOn_USB+0x70>)
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	4a0b      	ldr	r2, [pc, #44]	@ (80031f8 <writeOn_USB+0x70>)
 80031cc:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00c ff54 	bl	8010080 <CDC_Transmit_FS>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <writeOn_USB+0x70>)
 80031e0:	789a      	ldrb	r2, [r3, #2]
 80031e2:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <writeOn_USB+0x70>)
 80031e4:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80031e8:	4413      	add	r3, r2
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4b02      	ldr	r3, [pc, #8]	@ (80031f8 <writeOn_USB+0x70>)
 80031ee:	709a      	strb	r2, [r3, #2]
	}
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	20000f94 	.word	0x20000f94

080031fc <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d01a      	beq.n	8003242 <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 800320c:	2300      	movs	r3, #0
 800320e:	81fb      	strh	r3, [r7, #14]
 8003210:	e013      	b.n	800323a <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 8003212:	89fb      	ldrh	r3, [r7, #14]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	441a      	add	r2, r3
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <dataRxOn_USB+0x54>)
 800321a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	b2c8      	uxtb	r0, r1
 8003222:	490b      	ldr	r1, [pc, #44]	@ (8003250 <dataRxOn_USB+0x54>)
 8003224:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8003228:	4619      	mov	r1, r3
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <dataRxOn_USB+0x54>)
 800322e:	440b      	add	r3, r1
 8003230:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8003234:	89fb      	ldrh	r3, [r7, #14]
 8003236:	3301      	adds	r3, #1
 8003238:	81fb      	strh	r3, [r7, #14]
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d8e7      	bhi.n	8003212 <dataRxOn_USB+0x16>
		}
	}
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000f94 	.word	0x20000f94

08003254 <Motor_Left_SetPins>:

void Motor_Left_SetPins(e_direction direction){
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d842      	bhi.n	80032ea <Motor_Left_SetPins+0x96>
 8003264:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <Motor_Left_SetPins+0x18>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032e9 	.word	0x080032e9
 8003270:	08003281 	.word	0x08003281
 8003274:	0800329b 	.word	0x0800329b
 8003278:	080032b5 	.word	0x080032b5
 800327c:	080032cf 	.word	0x080032cf
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003286:	481b      	ldr	r0, [pc, #108]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 8003288:	f002 f8a4 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003292:	4818      	ldr	r0, [pc, #96]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 8003294:	f002 f89e 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 8003298:	e027      	b.n	80032ea <Motor_Left_SetPins+0x96>
	case FORWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 800329a:	2201      	movs	r2, #1
 800329c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032a0:	4814      	ldr	r0, [pc, #80]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 80032a2:	f002 f897 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032ac:	4811      	ldr	r0, [pc, #68]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 80032ae:	f002 f891 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 80032b2:	e01a      	b.n	80032ea <Motor_Left_SetPins+0x96>
	case BACKWARD:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032ba:	480e      	ldr	r0, [pc, #56]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 80032bc:	f002 f88a 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 80032c0:	2201      	movs	r2, #1
 80032c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032c6:	480b      	ldr	r0, [pc, #44]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 80032c8:	f002 f884 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 80032cc:	e00d      	b.n	80032ea <Motor_Left_SetPins+0x96>
	case BRAKE:
		HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, 1);
 80032ce:	2201      	movs	r2, #1
 80032d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80032d4:	4807      	ldr	r0, [pc, #28]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 80032d6:	f002 f87d 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, 1);
 80032da:	2201      	movs	r2, #1
 80032dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032e0:	4804      	ldr	r0, [pc, #16]	@ (80032f4 <Motor_Left_SetPins+0xa0>)
 80032e2:	f002 f877 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 80032e6:	e000      	b.n	80032ea <Motor_Left_SetPins+0x96>
		break;
 80032e8:	bf00      	nop
	}
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40020000 	.word	0x40020000

080032f8 <Motor_Right_SetPins>:

void Motor_Right_SetPins(e_direction direction){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d83f      	bhi.n	8003388 <Motor_Right_SetPins+0x90>
 8003308:	a201      	add	r2, pc, #4	@ (adr r2, 8003310 <Motor_Right_SetPins+0x18>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003387 	.word	0x08003387
 8003314:	08003325 	.word	0x08003325
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003355 	.word	0x08003355
 8003320:	0800336f 	.word	0x0800336f
	case NO_INIT:
		break;
	case FREE_WHEEL:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800332a:	4819      	ldr	r0, [pc, #100]	@ (8003390 <Motor_Right_SetPins+0x98>)
 800332c:	f002 f852 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 8003330:	2200      	movs	r2, #0
 8003332:	2108      	movs	r1, #8
 8003334:	4817      	ldr	r0, [pc, #92]	@ (8003394 <Motor_Right_SetPins+0x9c>)
 8003336:	f002 f84d 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 800333a:	e025      	b.n	8003388 <Motor_Right_SetPins+0x90>
	case FORWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 800333c:	2201      	movs	r2, #1
 800333e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003342:	4813      	ldr	r0, [pc, #76]	@ (8003390 <Motor_Right_SetPins+0x98>)
 8003344:	f002 f846 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	2108      	movs	r1, #8
 800334c:	4811      	ldr	r0, [pc, #68]	@ (8003394 <Motor_Right_SetPins+0x9c>)
 800334e:	f002 f841 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 8003352:	e019      	b.n	8003388 <Motor_Right_SetPins+0x90>
	case BACKWARD:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800335a:	480d      	ldr	r0, [pc, #52]	@ (8003390 <Motor_Right_SetPins+0x98>)
 800335c:	f002 f83a 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M1_IN2_Pin, 1);
 8003360:	2201      	movs	r2, #1
 8003362:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003366:	480b      	ldr	r0, [pc, #44]	@ (8003394 <Motor_Right_SetPins+0x9c>)
 8003368:	f002 f834 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 800336c:	e00c      	b.n	8003388 <Motor_Right_SetPins+0x90>
	case BRAKE:
		HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, 1);
 800336e:	2201      	movs	r2, #1
 8003370:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003374:	4806      	ldr	r0, [pc, #24]	@ (8003390 <Motor_Right_SetPins+0x98>)
 8003376:	f002 f82d 	bl	80053d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, 1);
 800337a:	2201      	movs	r2, #1
 800337c:	2108      	movs	r1, #8
 800337e:	4805      	ldr	r0, [pc, #20]	@ (8003394 <Motor_Right_SetPins+0x9c>)
 8003380:	f002 f828 	bl	80053d4 <HAL_GPIO_WritePin>
		break;
 8003384:	e000      	b.n	8003388 <Motor_Right_SetPins+0x90>
		break;
 8003386:	bf00      	nop
	}
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400

08003398 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <Motor_Left_SetPWM+0x20>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000a30 	.word	0x20000a30

080033bc <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <Motor_Right_SetPWM+0x20>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000a30 	.word	0x20000a30

080033e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033e4:	b672      	cpsid	i
}
 80033e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <Error_Handler+0x8>

080033ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_MspInit+0x58>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <HAL_MspInit+0x58>)
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003400:	6453      	str	r3, [r2, #68]	@ 0x44
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <HAL_MspInit+0x58>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_MspInit+0x58>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	4a0b      	ldr	r2, [pc, #44]	@ (8003444 <HAL_MspInit+0x58>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	@ 0x40
 800341e:	4b09      	ldr	r3, [pc, #36]	@ (8003444 <HAL_MspInit+0x58>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2051      	movs	r0, #81	@ 0x51
 8003430:	f001 f9e1 	bl	80047f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003434:	2051      	movs	r0, #81	@ 0x51
 8003436:	f001 f9fa 	bl	800482e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800343a:	bf00      	nop
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800

08003448 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	@ 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <HAL_ADC_MspInit+0x120>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d179      	bne.n	800355e <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	4b3f      	ldr	r3, [pc, #252]	@ (800356c <HAL_ADC_MspInit+0x124>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	4a3e      	ldr	r2, [pc, #248]	@ (800356c <HAL_ADC_MspInit+0x124>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003478:	6453      	str	r3, [r2, #68]	@ 0x44
 800347a:	4b3c      	ldr	r3, [pc, #240]	@ (800356c <HAL_ADC_MspInit+0x124>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	4b38      	ldr	r3, [pc, #224]	@ (800356c <HAL_ADC_MspInit+0x124>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	4a37      	ldr	r2, [pc, #220]	@ (800356c <HAL_ADC_MspInit+0x124>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6313      	str	r3, [r2, #48]	@ 0x30
 8003496:	4b35      	ldr	r3, [pc, #212]	@ (800356c <HAL_ADC_MspInit+0x124>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	4b31      	ldr	r3, [pc, #196]	@ (800356c <HAL_ADC_MspInit+0x124>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a30      	ldr	r2, [pc, #192]	@ (800356c <HAL_ADC_MspInit+0x124>)
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b2e      	ldr	r3, [pc, #184]	@ (800356c <HAL_ADC_MspInit+0x124>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 80034be:	23fe      	movs	r3, #254	@ 0xfe
 80034c0:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c2:	2303      	movs	r3, #3
 80034c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0314 	add.w	r3, r7, #20
 80034ce:	4619      	mov	r1, r3
 80034d0:	4827      	ldr	r0, [pc, #156]	@ (8003570 <HAL_ADC_MspInit+0x128>)
 80034d2:	f001 fde3 	bl	800509c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 80034d6:	2303      	movs	r3, #3
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034da:	2303      	movs	r3, #3
 80034dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4822      	ldr	r0, [pc, #136]	@ (8003574 <HAL_ADC_MspInit+0x12c>)
 80034ea:	f001 fdd7 	bl	800509c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034ee:	4b22      	ldr	r3, [pc, #136]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 80034f0:	4a22      	ldr	r2, [pc, #136]	@ (800357c <HAL_ADC_MspInit+0x134>)
 80034f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034f4:	4b20      	ldr	r3, [pc, #128]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003500:	4b1d      	ldr	r3, [pc, #116]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	4b1c      	ldr	r3, [pc, #112]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800350c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003514:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003516:	4b18      	ldr	r3, [pc, #96]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003518:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800351c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800351e:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003520:	2200      	movs	r2, #0
 8003522:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003524:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003526:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800352a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800352c:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003532:	4811      	ldr	r0, [pc, #68]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003534:	f001 f996 	bl	8004864 <HAL_DMA_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800353e:	f7ff ff4f 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a0c      	ldr	r2, [pc, #48]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38
 8003548:	4a0b      	ldr	r2, [pc, #44]	@ (8003578 <HAL_ADC_MspInit+0x130>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	2012      	movs	r0, #18
 8003554:	f001 f94f 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003558:	2012      	movs	r0, #18
 800355a:	f001 f968 	bl	800482e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	@ 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40012000 	.word	0x40012000
 800356c:	40023800 	.word	0x40023800
 8003570:	40020000 	.word	0x40020000
 8003574:	40020400 	.word	0x40020400
 8003578:	20000874 	.word	0x20000874
 800357c:	40026410 	.word	0x40026410

08003580 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	@ 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a50      	ldr	r2, [pc, #320]	@ (80036e0 <HAL_I2C_MspInit+0x160>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	f040 8099 	bne.w	80036d6 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	4b4e      	ldr	r3, [pc, #312]	@ (80036e4 <HAL_I2C_MspInit+0x164>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ac:	4a4d      	ldr	r2, [pc, #308]	@ (80036e4 <HAL_I2C_MspInit+0x164>)
 80035ae:	f043 0302 	orr.w	r3, r3, #2
 80035b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b4:	4b4b      	ldr	r3, [pc, #300]	@ (80036e4 <HAL_I2C_MspInit+0x164>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80035c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035c6:	2312      	movs	r3, #18
 80035c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035d2:	2304      	movs	r3, #4
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	4842      	ldr	r0, [pc, #264]	@ (80036e8 <HAL_I2C_MspInit+0x168>)
 80035de:	f001 fd5d 	bl	800509c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <HAL_I2C_MspInit+0x164>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	4a3e      	ldr	r2, [pc, #248]	@ (80036e4 <HAL_I2C_MspInit+0x164>)
 80035ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f2:	4b3c      	ldr	r3, [pc, #240]	@ (80036e4 <HAL_I2C_MspInit+0x164>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80035fe:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003600:	4a3b      	ldr	r2, [pc, #236]	@ (80036f0 <HAL_I2C_MspInit+0x170>)
 8003602:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003604:	4b39      	ldr	r3, [pc, #228]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003606:	2200      	movs	r2, #0
 8003608:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360a:	4b38      	ldr	r3, [pc, #224]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 800360c:	2240      	movs	r2, #64	@ 0x40
 800360e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003610:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003616:	4b35      	ldr	r3, [pc, #212]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800361c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800361e:	4b33      	ldr	r3, [pc, #204]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003624:	4b31      	ldr	r3, [pc, #196]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800362a:	4b30      	ldr	r3, [pc, #192]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003630:	4b2e      	ldr	r3, [pc, #184]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003632:	2200      	movs	r2, #0
 8003634:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003636:	4b2d      	ldr	r3, [pc, #180]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003638:	2200      	movs	r2, #0
 800363a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800363c:	482b      	ldr	r0, [pc, #172]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 800363e:	f001 f911 	bl	8004864 <HAL_DMA_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003648:	f7ff feca 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a27      	ldr	r2, [pc, #156]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003650:	635a      	str	r2, [r3, #52]	@ 0x34
 8003652:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <HAL_I2C_MspInit+0x16c>)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003658:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 800365a:	4a27      	ldr	r2, [pc, #156]	@ (80036f8 <HAL_I2C_MspInit+0x178>)
 800365c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800365e:	4b25      	ldr	r3, [pc, #148]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 8003660:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003664:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 8003668:	2200      	movs	r2, #0
 800366a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800366c:	4b21      	ldr	r3, [pc, #132]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 800366e:	2200      	movs	r2, #0
 8003670:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003672:	4b20      	ldr	r3, [pc, #128]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 8003674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003678:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800367a:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 800367c:	2200      	movs	r2, #0
 800367e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003680:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003686:	4b1b      	ldr	r3, [pc, #108]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 8003688:	2200      	movs	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800368c:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 800368e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003692:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003694:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 8003696:	2200      	movs	r2, #0
 8003698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800369a:	4816      	ldr	r0, [pc, #88]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 800369c:	f001 f8e2 	bl	8004864 <HAL_DMA_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80036a6:	f7ff fe9b 	bl	80033e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a11      	ldr	r2, [pc, #68]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 80036ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80036b0:	4a10      	ldr	r2, [pc, #64]	@ (80036f4 <HAL_I2C_MspInit+0x174>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	201f      	movs	r0, #31
 80036bc:	f001 f89b 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036c0:	201f      	movs	r0, #31
 80036c2:	f001 f8b4 	bl	800482e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036c6:	2200      	movs	r2, #0
 80036c8:	2100      	movs	r1, #0
 80036ca:	2020      	movs	r0, #32
 80036cc:	f001 f893 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80036d0:	2020      	movs	r0, #32
 80036d2:	f001 f8ac 	bl	800482e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80036d6:	bf00      	nop
 80036d8:	3728      	adds	r7, #40	@ 0x28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40005400 	.word	0x40005400
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020400 	.word	0x40020400
 80036ec:	20000928 	.word	0x20000928
 80036f0:	40026028 	.word	0x40026028
 80036f4:	20000988 	.word	0x20000988
 80036f8:	40026010 	.word	0x40026010

080036fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <HAL_TIM_Base_MspInit+0x80>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d116      	bne.n	800373c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b1b      	ldr	r3, [pc, #108]	@ (8003780 <HAL_TIM_Base_MspInit+0x84>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_TIM_Base_MspInit+0x84>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6453      	str	r3, [r2, #68]	@ 0x44
 800371e:	4b18      	ldr	r3, [pc, #96]	@ (8003780 <HAL_TIM_Base_MspInit+0x84>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800372a:	2200      	movs	r2, #0
 800372c:	2100      	movs	r1, #0
 800372e:	2019      	movs	r0, #25
 8003730:	f001 f861 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003734:	2019      	movs	r0, #25
 8003736:	f001 f87a 	bl	800482e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800373a:	e01a      	b.n	8003772 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a10      	ldr	r2, [pc, #64]	@ (8003784 <HAL_TIM_Base_MspInit+0x88>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d115      	bne.n	8003772 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <HAL_TIM_Base_MspInit+0x84>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	4a0c      	ldr	r2, [pc, #48]	@ (8003780 <HAL_TIM_Base_MspInit+0x84>)
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	6413      	str	r3, [r2, #64]	@ 0x40
 8003756:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <HAL_TIM_Base_MspInit+0x84>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	201d      	movs	r0, #29
 8003768:	f001 f845 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800376c:	201d      	movs	r0, #29
 800376e:	f001 f85e 	bl	800482e <HAL_NVIC_EnableIRQ>
}
 8003772:	bf00      	nop
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40023800 	.word	0x40023800
 8003784:	40000400 	.word	0x40000400

08003788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <HAL_TIM_MspPostInit+0x68>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d11d      	bne.n	80037e6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_TIM_MspPostInit+0x6c>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	4a10      	ldr	r2, [pc, #64]	@ (80037f4 <HAL_TIM_MspPostInit+0x6c>)
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ba:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <HAL_TIM_MspPostInit+0x6c>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 80037c6:	2330      	movs	r3, #48	@ 0x30
 80037c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	2302      	movs	r3, #2
 80037cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037d6:	2302      	movs	r3, #2
 80037d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	4619      	mov	r1, r3
 80037e0:	4805      	ldr	r0, [pc, #20]	@ (80037f8 <HAL_TIM_MspPostInit+0x70>)
 80037e2:	f001 fc5b 	bl	800509c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037e6:	bf00      	nop
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020400 	.word	0x40020400

080037fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	@ 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 0314 	add.w	r3, r7, #20
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <HAL_UART_MspInit+0x94>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d133      	bne.n	8003886 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	4b1c      	ldr	r3, [pc, #112]	@ (8003894 <HAL_UART_MspInit+0x98>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <HAL_UART_MspInit+0x98>)
 8003828:	f043 0310 	orr.w	r3, r3, #16
 800382c:	6453      	str	r3, [r2, #68]	@ 0x44
 800382e:	4b19      	ldr	r3, [pc, #100]	@ (8003894 <HAL_UART_MspInit+0x98>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <HAL_UART_MspInit+0x98>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <HAL_UART_MspInit+0x98>)
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	6313      	str	r3, [r2, #48]	@ 0x30
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_UART_MspInit+0x98>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8003856:	23c0      	movs	r3, #192	@ 0xc0
 8003858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003862:	2303      	movs	r3, #3
 8003864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003866:	2307      	movs	r3, #7
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386a:	f107 0314 	add.w	r3, r7, #20
 800386e:	4619      	mov	r1, r3
 8003870:	4809      	ldr	r0, [pc, #36]	@ (8003898 <HAL_UART_MspInit+0x9c>)
 8003872:	f001 fc13 	bl	800509c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	2025      	movs	r0, #37	@ 0x25
 800387c:	f000 ffbb 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003880:	2025      	movs	r0, #37	@ 0x25
 8003882:	f000 ffd4 	bl	800482e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	@ 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40011000 	.word	0x40011000
 8003894:	40023800 	.word	0x40023800
 8003898:	40020400 	.word	0x40020400

0800389c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80038a0:	f007 f874 	bl	800a98c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <NMI_Handler+0x8>

080038a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <HardFault_Handler+0x4>

080038b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <MemManage_Handler+0x4>

080038b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <BusFault_Handler+0x4>

080038c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c4:	bf00      	nop
 80038c6:	e7fd      	b.n	80038c4 <UsageFault_Handler+0x4>

080038c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f6:	f000 f943 	bl	8003b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003904:	4802      	ldr	r0, [pc, #8]	@ (8003910 <DMA1_Stream0_IRQHandler+0x10>)
 8003906:	f001 f945 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000988 	.word	0x20000988

08003914 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003918:	4802      	ldr	r0, [pc, #8]	@ (8003924 <DMA1_Stream1_IRQHandler+0x10>)
 800391a:	f001 f93b 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000928 	.word	0x20000928

08003928 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800392c:	4802      	ldr	r0, [pc, #8]	@ (8003938 <ADC_IRQHandler+0x10>)
 800392e:	f000 f9ae 	bl	8003c8e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	2000082c 	.word	0x2000082c

0800393c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 8003940:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003944:	f001 fd7a 	bl	800543c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}

0800394c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003950:	4802      	ldr	r0, [pc, #8]	@ (800395c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003952:	f007 f9f1 	bl	800ad38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200009e8 	.word	0x200009e8

08003960 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003964:	4802      	ldr	r0, [pc, #8]	@ (8003970 <TIM3_IRQHandler+0x10>)
 8003966:	f007 f9e7 	bl	800ad38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000a30 	.word	0x20000a30

08003974 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003978:	4802      	ldr	r0, [pc, #8]	@ (8003984 <I2C1_EV_IRQHandler+0x10>)
 800397a:	f002 ff17 	bl	80067ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200008d4 	.word	0x200008d4

08003988 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800398c:	4802      	ldr	r0, [pc, #8]	@ (8003998 <I2C1_ER_IRQHandler+0x10>)
 800398e:	f003 f87e 	bl	8006a8e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	200008d4 	.word	0x200008d4

0800399c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039a0:	4802      	ldr	r0, [pc, #8]	@ (80039ac <USART1_IRQHandler+0x10>)
 80039a2:	f008 f83b 	bl	800ba1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000a78 	.word	0x20000a78

080039b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 80039b4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80039b8:	f001 fd40 	bl	800543c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}

080039c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039c4:	4802      	ldr	r0, [pc, #8]	@ (80039d0 <DMA2_Stream0_IRQHandler+0x10>)
 80039c6:	f001 f8e5 	bl	8004b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000874 	.word	0x20000874

080039d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80039d8:	4802      	ldr	r0, [pc, #8]	@ (80039e4 <OTG_FS_IRQHandler+0x10>)
 80039da:	f005 fa64 	bl	8008ea6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20001ab8 	.word	0x20001ab8

080039e8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a00:	4a14      	ldr	r2, [pc, #80]	@ (8003a54 <_sbrk+0x5c>)
 8003a02:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <_sbrk+0x60>)
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <_sbrk+0x64>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a14:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <_sbrk+0x64>)
 8003a16:	4a12      	ldr	r2, [pc, #72]	@ (8003a60 <_sbrk+0x68>)
 8003a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <_sbrk+0x64>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d207      	bcs.n	8003a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a28:	f00c ffb6 	bl	8010998 <__errno>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	220c      	movs	r2, #12
 8003a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	e009      	b.n	8003a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a38:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <_sbrk+0x64>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a3e:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <_sbrk+0x64>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	4a05      	ldr	r2, [pc, #20]	@ (8003a5c <_sbrk+0x64>)
 8003a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20020000 	.word	0x20020000
 8003a58:	00000400 	.word	0x00000400
 8003a5c:	200011cc 	.word	0x200011cc
 8003a60:	20002308 	.word	0x20002308

08003a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <SystemInit+0x20>)
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6e:	4a05      	ldr	r2, [pc, #20]	@ (8003a84 <SystemInit+0x20>)
 8003a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a8c:	f7ff ffea 	bl	8003a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a90:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a92:	490d      	ldr	r1, [pc, #52]	@ (8003ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a98:	e002      	b.n	8003aa0 <LoopCopyDataInit>

08003a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9e:	3304      	adds	r3, #4

08003aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa4:	d3f9      	bcc.n	8003a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aac:	e001      	b.n	8003ab2 <LoopFillZerobss>

08003aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab0:	3204      	adds	r2, #4

08003ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab4:	d3fb      	bcc.n	8003aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ab6:	f00c ff75 	bl	80109a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aba:	f7fe fd55 	bl	8002568 <main>
  bx  lr    
 8003abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003acc:	080124e8 	.word	0x080124e8
  ldr r2, =_sbss
 8003ad0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003ad4:	20002304 	.word	0x20002304

08003ad8 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ad8:	e7fe      	b.n	8003ad8 <DMA1_Stream2_IRQHandler>
	...

08003adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_Init+0x40>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <HAL_Init+0x40>)
 8003ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aec:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_Init+0x40>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <HAL_Init+0x40>)
 8003af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003af8:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_Init+0x40>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a07      	ldr	r2, [pc, #28]	@ (8003b1c <HAL_Init+0x40>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b04:	2003      	movs	r0, #3
 8003b06:	f000 fe6b 	bl	80047e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b0a:	200f      	movs	r0, #15
 8003b0c:	f000 f808 	bl	8003b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b10:	f7ff fc6c 	bl	80033ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023c00 	.word	0x40023c00

08003b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b28:	4b12      	ldr	r3, [pc, #72]	@ (8003b74 <HAL_InitTick+0x54>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_InitTick+0x58>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fe83 	bl	800484a <HAL_SYSTICK_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e00e      	b.n	8003b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b0f      	cmp	r3, #15
 8003b52:	d80a      	bhi.n	8003b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b54:	2200      	movs	r2, #0
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f000 fe4b 	bl	80047f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b60:	4a06      	ldr	r2, [pc, #24]	@ (8003b7c <HAL_InitTick+0x5c>)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000010 	.word	0x20000010
 8003b78:	20000018 	.word	0x20000018
 8003b7c:	20000014 	.word	0x20000014

08003b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b84:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_IncTick+0x20>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <HAL_IncTick+0x24>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <HAL_IncTick+0x24>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000018 	.word	0x20000018
 8003ba4:	200011d0 	.word	0x200011d0

08003ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bac:	4b03      	ldr	r3, [pc, #12]	@ (8003bbc <HAL_GetTick+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200011d0 	.word	0x200011d0

08003bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7ff ffee 	bl	8003ba8 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d005      	beq.n	8003be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bda:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <HAL_Delay+0x44>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003be6:	bf00      	nop
 8003be8:	f7ff ffde 	bl	8003ba8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d8f7      	bhi.n	8003be8 <HAL_Delay+0x28>
  {
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	bf00      	nop
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000018 	.word	0x20000018

08003c08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e033      	b.n	8003c86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fc0e 	bl	8003448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d118      	bne.n	8003c78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c4e:	f023 0302 	bic.w	r3, r3, #2
 8003c52:	f043 0202 	orr.w	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fb68 	bl	8004330 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f023 0303 	bic.w	r3, r3, #3
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c76:	e001      	b.n	8003c7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d049      	beq.n	8003d58 <HAL_ADC_IRQHandler+0xca>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d046      	beq.n	8003d58 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d12b      	bne.n	8003d48 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d127      	bne.n	8003d48 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d119      	bne.n	8003d48 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0220 	bic.w	r2, r2, #32
 8003d22:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	f043 0201 	orr.w	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff f96d 	bl	8003028 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f06f 0212 	mvn.w	r2, #18
 8003d56:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d66:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d057      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x190>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d054      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d139      	bne.n	8003e0e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d006      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d12b      	bne.n	8003e0e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d124      	bne.n	8003e0e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d11d      	bne.n	8003e0e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d119      	bne.n	8003e0e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003de8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d105      	bne.n	8003e0e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fc0c 	bl	800462c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f06f 020c 	mvn.w	r2, #12
 8003e1c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d017      	beq.n	8003e64 <HAL_ADC_IRQHandler+0x1d6>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d014      	beq.n	8003e64 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10d      	bne.n	8003e64 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f925 	bl	80040a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f06f 0201 	mvn.w	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e72:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0x218>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	f043 0202 	orr.w	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0220 	mvn.w	r2, #32
 8003e94:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f90e 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0220 	mvn.w	r2, #32
 8003ea4:	601a      	str	r2, [r3, #0]
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_Start_DMA+0x1e>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e0ce      	b.n	800406c <HAL_ADC_Start_DMA+0x1bc>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d018      	beq.n	8003f16 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ef4:	4b5f      	ldr	r3, [pc, #380]	@ (8004074 <HAL_ADC_Start_DMA+0x1c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a5f      	ldr	r2, [pc, #380]	@ (8004078 <HAL_ADC_Start_DMA+0x1c8>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	0c9a      	lsrs	r2, r3, #18
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f08:	e002      	b.n	8003f10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f9      	bne.n	8003f0a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f24:	d107      	bne.n	8003f36 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 8086 	bne.w	8004052 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f84:	d106      	bne.n	8003f94 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	f023 0206 	bic.w	r2, r3, #6
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f92:	e002      	b.n	8003f9a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fa2:	4b36      	ldr	r3, [pc, #216]	@ (800407c <HAL_ADC_Start_DMA+0x1cc>)
 8003fa4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003faa:	4a35      	ldr	r2, [pc, #212]	@ (8004080 <HAL_ADC_Start_DMA+0x1d0>)
 8003fac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb2:	4a34      	ldr	r2, [pc, #208]	@ (8004084 <HAL_ADC_Start_DMA+0x1d4>)
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	4a33      	ldr	r2, [pc, #204]	@ (8004088 <HAL_ADC_Start_DMA+0x1d8>)
 8003fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003fd6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	334c      	adds	r3, #76	@ 0x4c
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f000 fce2 	bl	80049c0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10f      	bne.n	8004028 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d129      	bne.n	800406a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	e020      	b.n	800406a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a17      	ldr	r2, [pc, #92]	@ (800408c <HAL_ADC_Start_DMA+0x1dc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d11b      	bne.n	800406a <HAL_ADC_Start_DMA+0x1ba>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d114      	bne.n	800406a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	e00b      	b.n	800406a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f043 0210 	orr.w	r2, r3, #16
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	20000010 	.word	0x20000010
 8004078:	431bde83 	.word	0x431bde83
 800407c:	40012300 	.word	0x40012300
 8004080:	08004529 	.word	0x08004529
 8004084:	080045e3 	.word	0x080045e3
 8004088:	080045ff 	.word	0x080045ff
 800408c:	40012000 	.word	0x40012000

08004090 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e113      	b.n	8004310 <HAL_ADC_ConfigChannel+0x244>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d925      	bls.n	8004144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	3b1e      	subs	r3, #30
 800410e:	2207      	movs	r2, #7
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43da      	mvns	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	400a      	ands	r2, r1
 800411c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	b29b      	uxth	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	4603      	mov	r3, r0
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4403      	add	r3, r0
 8004136:	3b1e      	subs	r3, #30
 8004138:	409a      	lsls	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	e022      	b.n	800418a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4613      	mov	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	4413      	add	r3, r2
 8004158:	2207      	movs	r2, #7
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6919      	ldr	r1, [r3, #16]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	4603      	mov	r3, r0
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4403      	add	r3, r0
 8004180:	409a      	lsls	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d824      	bhi.n	80041dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b05      	subs	r3, #5
 80041a4:	221f      	movs	r2, #31
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43da      	mvns	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	400a      	ands	r2, r1
 80041b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	3b05      	subs	r3, #5
 80041ce:	fa00 f203 	lsl.w	r2, r0, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80041da:	e04c      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d824      	bhi.n	800422e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	3b23      	subs	r3, #35	@ 0x23
 80041f6:	221f      	movs	r2, #31
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	4618      	mov	r0, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b23      	subs	r3, #35	@ 0x23
 8004220:	fa00 f203 	lsl.w	r2, r0, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
 800422c:	e023      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	3b41      	subs	r3, #65	@ 0x41
 8004240:	221f      	movs	r2, #31
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4618      	mov	r0, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3b41      	subs	r3, #65	@ 0x41
 800426a:	fa00 f203 	lsl.w	r2, r0, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004276:	4b29      	ldr	r3, [pc, #164]	@ (800431c <HAL_ADC_ConfigChannel+0x250>)
 8004278:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a28      	ldr	r2, [pc, #160]	@ (8004320 <HAL_ADC_ConfigChannel+0x254>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10f      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1d8>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b12      	cmp	r3, #18
 800428a:	d10b      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004320 <HAL_ADC_ConfigChannel+0x254>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d12b      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x23a>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004324 <HAL_ADC_ConfigChannel+0x258>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d003      	beq.n	80042c0 <HAL_ADC_ConfigChannel+0x1f4>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b11      	cmp	r3, #17
 80042be:	d122      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <HAL_ADC_ConfigChannel+0x258>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d111      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042e2:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <HAL_ADC_ConfigChannel+0x25c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a11      	ldr	r2, [pc, #68]	@ (800432c <HAL_ADC_ConfigChannel+0x260>)
 80042e8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ec:	0c9a      	lsrs	r2, r3, #18
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80042f8:	e002      	b.n	8004300 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f9      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40012300 	.word	0x40012300
 8004320:	40012000 	.word	0x40012000
 8004324:	10000012 	.word	0x10000012
 8004328:	20000010 	.word	0x20000010
 800432c:	431bde83 	.word	0x431bde83

08004330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004338:	4b79      	ldr	r3, [pc, #484]	@ (8004520 <ADC_Init+0x1f0>)
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	021a      	lsls	r2, r3, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6899      	ldr	r1, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	4a58      	ldr	r2, [pc, #352]	@ (8004524 <ADC_Init+0x1f4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6899      	ldr	r1, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80043f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6899      	ldr	r1, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	e00f      	b.n	800442e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800441c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800442c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0202 	bic.w	r2, r2, #2
 800443c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6899      	ldr	r1, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7e1b      	ldrb	r3, [r3, #24]
 8004448:	005a      	lsls	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800446a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800447a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	3b01      	subs	r3, #1
 8004488:	035a      	lsls	r2, r3, #13
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	e007      	b.n	80044a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80044b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	3b01      	subs	r3, #1
 80044c0:	051a      	lsls	r2, r3, #20
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044e6:	025a      	lsls	r2, r3, #9
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	029a      	lsls	r2, r3, #10
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	40012300 	.word	0x40012300
 8004524:	0f000001 	.word	0x0f000001

08004528 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004534:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800453e:	2b00      	cmp	r3, #0
 8004540:	d13c      	bne.n	80045bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d12b      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004560:	2b00      	cmp	r3, #0
 8004562:	d127      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800457c:	2b00      	cmp	r3, #0
 800457e:	d119      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0220 	bic.w	r2, r2, #32
 800458e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7fe fd37 	bl	8003028 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045ba:	e00e      	b.n	80045da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff fd75 	bl	80040b8 <HAL_ADC_ErrorCallback>
}
 80045ce:	e004      	b.n	80045da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
}
 80045da:	bf00      	nop
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff fd4d 	bl	8004090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2240      	movs	r2, #64	@ 0x40
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0204 	orr.w	r2, r3, #4
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff fd4a 	bl	80040b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004650:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <__NVIC_SetPriorityGrouping+0x44>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800465c:	4013      	ands	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800466c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004672:	4a04      	ldr	r2, [pc, #16]	@ (8004684 <__NVIC_SetPriorityGrouping+0x44>)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	60d3      	str	r3, [r2, #12]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800468c:	4b04      	ldr	r3, [pc, #16]	@ (80046a0 <__NVIC_GetPriorityGrouping+0x18>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0a1b      	lsrs	r3, r3, #8
 8004692:	f003 0307 	and.w	r3, r3, #7
}
 8004696:	4618      	mov	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	db0b      	blt.n	80046ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	f003 021f 	and.w	r2, r3, #31
 80046bc:	4907      	ldr	r1, [pc, #28]	@ (80046dc <__NVIC_EnableIRQ+0x38>)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2001      	movs	r0, #1
 80046c6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000e100 	.word	0xe000e100

080046e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	6039      	str	r1, [r7, #0]
 80046ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	db0a      	blt.n	800470a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	490c      	ldr	r1, [pc, #48]	@ (800472c <__NVIC_SetPriority+0x4c>)
 80046fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	440b      	add	r3, r1
 8004704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004708:	e00a      	b.n	8004720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	4908      	ldr	r1, [pc, #32]	@ (8004730 <__NVIC_SetPriority+0x50>)
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	3b04      	subs	r3, #4
 8004718:	0112      	lsls	r2, r2, #4
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	440b      	add	r3, r1
 800471e:	761a      	strb	r2, [r3, #24]
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	e000e100 	.word	0xe000e100
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	@ 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f1c3 0307 	rsb	r3, r3, #7
 800474e:	2b04      	cmp	r3, #4
 8004750:	bf28      	it	cs
 8004752:	2304      	movcs	r3, #4
 8004754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	3304      	adds	r3, #4
 800475a:	2b06      	cmp	r3, #6
 800475c:	d902      	bls.n	8004764 <NVIC_EncodePriority+0x30>
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	3b03      	subs	r3, #3
 8004762:	e000      	b.n	8004766 <NVIC_EncodePriority+0x32>
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	f04f 32ff 	mov.w	r2, #4294967295
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	fa02 f303 	lsl.w	r3, r2, r3
 8004772:	43da      	mvns	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	401a      	ands	r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800477c:	f04f 31ff 	mov.w	r1, #4294967295
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	43d9      	mvns	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800478c:	4313      	orrs	r3, r2
         );
}
 800478e:	4618      	mov	r0, r3
 8004790:	3724      	adds	r7, #36	@ 0x24
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047ac:	d301      	bcc.n	80047b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ae:	2301      	movs	r3, #1
 80047b0:	e00f      	b.n	80047d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047b2:	4a0a      	ldr	r2, [pc, #40]	@ (80047dc <SysTick_Config+0x40>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ba:	210f      	movs	r1, #15
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295
 80047c0:	f7ff ff8e 	bl	80046e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <SysTick_Config+0x40>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ca:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <SysTick_Config+0x40>)
 80047cc:	2207      	movs	r2, #7
 80047ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	e000e010 	.word	0xe000e010

080047e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff29 	bl	8004640 <__NVIC_SetPriorityGrouping>
}
 80047ee:	bf00      	nop
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	4603      	mov	r3, r0
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004808:	f7ff ff3e 	bl	8004688 <__NVIC_GetPriorityGrouping>
 800480c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f7ff ff8e 	bl	8004734 <NVIC_EncodePriority>
 8004818:	4602      	mov	r2, r0
 800481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff ff5d 	bl	80046e0 <__NVIC_SetPriority>
}
 8004826:	bf00      	nop
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	4603      	mov	r3, r0
 8004836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff ff31 	bl	80046a4 <__NVIC_EnableIRQ>
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b082      	sub	sp, #8
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ffa2 	bl	800479c <SysTick_Config>
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004870:	f7ff f99a 	bl	8003ba8 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e099      	b.n	80049b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0201 	bic.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a0:	e00f      	b.n	80048c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a2:	f7ff f981 	bl	8003ba8 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d908      	bls.n	80048c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2203      	movs	r2, #3
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e078      	b.n	80049b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e8      	bne.n	80048a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <HAL_DMA_Init+0x158>)
 80048dc:	4013      	ands	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	2b04      	cmp	r3, #4
 800491a:	d107      	bne.n	800492c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	4313      	orrs	r3, r2
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0307 	bic.w	r3, r3, #7
 8004942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	2b04      	cmp	r3, #4
 8004954:	d117      	bne.n	8004986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb1b 	bl	8004fa4 <DMA_CheckFifoParam>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2240      	movs	r2, #64	@ 0x40
 8004978:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004982:	2301      	movs	r3, #1
 8004984:	e016      	b.n	80049b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fad2 	bl	8004f38 <DMA_CalcBaseAndBitshift>
 8004994:	4603      	mov	r3, r0
 8004996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499c:	223f      	movs	r2, #63	@ 0x3f
 800499e:	409a      	lsls	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3718      	adds	r7, #24
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	f010803f 	.word	0xf010803f

080049c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_DMA_Start_IT+0x26>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e040      	b.n	8004a68 <HAL_DMA_Start_IT+0xa8>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d12f      	bne.n	8004a5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fa64 	bl	8004edc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a18:	223f      	movs	r2, #63	@ 0x3f
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0216 	orr.w	r2, r2, #22
 8004a2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0208 	orr.w	r2, r2, #8
 8004a46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e005      	b.n	8004a66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a7e:	f7ff f893 	bl	8003ba8 <HAL_GetTick>
 8004a82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d008      	beq.n	8004aa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2280      	movs	r2, #128	@ 0x80
 8004a94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e052      	b.n	8004b48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0216 	bic.w	r2, r2, #22
 8004ab0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ac0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_DMA_Abort+0x62>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0208 	bic.w	r2, r2, #8
 8004ae0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af2:	e013      	b.n	8004b1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af4:	f7ff f858 	bl	8003ba8 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d90c      	bls.n	8004b1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e015      	b.n	8004b48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e4      	bne.n	8004af4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2e:	223f      	movs	r2, #63	@ 0x3f
 8004b30:	409a      	lsls	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d004      	beq.n	8004b6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2280      	movs	r2, #128	@ 0x80
 8004b68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e00c      	b.n	8004b88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2205      	movs	r2, #5
 8004b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8004ddc <HAL_DMA_IRQHandler+0x248>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a8e      	ldr	r2, [pc, #568]	@ (8004de0 <HAL_DMA_IRQHandler+0x24c>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bbe:	2208      	movs	r2, #8
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01a      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0204 	bic.w	r2, r2, #4
 8004be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bec:	2208      	movs	r2, #8
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf8:	f043 0201 	orr.w	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c04:	2201      	movs	r2, #1
 8004c06:	409a      	lsls	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c22:	2201      	movs	r2, #1
 8004c24:	409a      	lsls	r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2e:	f043 0202 	orr.w	r2, r3, #2
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00b      	beq.n	8004c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c58:	2204      	movs	r2, #4
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c64:	f043 0204 	orr.w	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c70:	2210      	movs	r2, #16
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d043      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d03c      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8e:	2210      	movs	r2, #16
 8004c90:	409a      	lsls	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d024      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	4798      	blx	r3
 8004cc2:	e01f      	b.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
 8004cd4:	e016      	b.n	8004d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0208 	bic.w	r2, r2, #8
 8004cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	2220      	movs	r2, #32
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 808f 	beq.w	8004e34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8087 	beq.w	8004e34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	409a      	lsls	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d136      	bne.n	8004dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0216 	bic.w	r2, r2, #22
 8004d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <HAL_DMA_IRQHandler+0x1da>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0208 	bic.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d82:	223f      	movs	r2, #63	@ 0x3f
 8004d84:	409a      	lsls	r2, r3
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d07e      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
        }
        return;
 8004daa:	e079      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d01d      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d031      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
 8004dd8:	e02c      	b.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
 8004dda:	bf00      	nop
 8004ddc:	20000010 	.word	0x20000010
 8004de0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d023      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	e01e      	b.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0210 	bic.w	r2, r2, #16
 8004e12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d032      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2205      	movs	r2, #5
 8004e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d307      	bcc.n	8004e7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f2      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x2cc>
 8004e7a:	e000      	b.n	8004e7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d005      	beq.n	8004ea2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
 8004e9e:	e000      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ea0:	bf00      	nop
    }
  }
}
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb6:	b2db      	uxtb	r3, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ef8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d108      	bne.n	8004f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f1a:	e007      	b.n	8004f2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	60da      	str	r2, [r3, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	3b10      	subs	r3, #16
 8004f48:	4a14      	ldr	r2, [pc, #80]	@ (8004f9c <DMA_CalcBaseAndBitshift+0x64>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f52:	4a13      	ldr	r2, [pc, #76]	@ (8004fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d909      	bls.n	8004f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	1d1a      	adds	r2, r3, #4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f78:	e007      	b.n	8004f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	aaaaaaab 	.word	0xaaaaaaab
 8004fa0:	0801249c 	.word	0x0801249c

08004fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11f      	bne.n	8004ffe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d856      	bhi.n	8005072 <DMA_CheckFifoParam+0xce>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <DMA_CheckFifoParam+0x28>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fef 	.word	0x08004fef
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08005073 	.word	0x08005073
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d046      	beq.n	8005076 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fec:	e043      	b.n	8005076 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ff6:	d140      	bne.n	800507a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e03d      	b.n	800507a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005006:	d121      	bne.n	800504c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b03      	cmp	r3, #3
 800500c:	d837      	bhi.n	800507e <DMA_CheckFifoParam+0xda>
 800500e:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <DMA_CheckFifoParam+0x70>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005025 	.word	0x08005025
 8005018:	0800502b 	.word	0x0800502b
 800501c:	08005025 	.word	0x08005025
 8005020:	0800503d 	.word	0x0800503d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	e030      	b.n	800508c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d025      	beq.n	8005082 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503a:	e022      	b.n	8005082 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005040:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005044:	d11f      	bne.n	8005086 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800504a:	e01c      	b.n	8005086 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d903      	bls.n	800505a <DMA_CheckFifoParam+0xb6>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b03      	cmp	r3, #3
 8005056:	d003      	beq.n	8005060 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005058:	e018      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
      break;
 800505e:	e015      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      break;
 8005070:	e00b      	b.n	800508a <DMA_CheckFifoParam+0xe6>
      break;
 8005072:	bf00      	nop
 8005074:	e00a      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 8005076:	bf00      	nop
 8005078:	e008      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 800507a:	bf00      	nop
 800507c:	e006      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 800507e:	bf00      	nop
 8005080:	e004      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 8005082:	bf00      	nop
 8005084:	e002      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;   
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <DMA_CheckFifoParam+0xe8>
      break;
 800508a:	bf00      	nop
    }
  } 
  
  return status; 
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop

0800509c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	@ 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e159      	b.n	800536c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050b8:	2201      	movs	r2, #1
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	f040 8148 	bne.w	8005366 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d005      	beq.n	80050ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d130      	bne.n	8005150 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	2203      	movs	r2, #3
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43db      	mvns	r3, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005124:	2201      	movs	r2, #1
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 0201 	and.w	r2, r3, #1
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b03      	cmp	r3, #3
 800515a:	d017      	beq.n	800518c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	2203      	movs	r2, #3
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4313      	orrs	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d123      	bne.n	80051e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	08da      	lsrs	r2, r3, #3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3208      	adds	r2, #8
 80051a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	220f      	movs	r2, #15
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	08da      	lsrs	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3208      	adds	r2, #8
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	2203      	movs	r2, #3
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	43db      	mvns	r3, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4013      	ands	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0203 	and.w	r2, r3, #3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a2 	beq.w	8005366 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	4b57      	ldr	r3, [pc, #348]	@ (8005384 <HAL_GPIO_Init+0x2e8>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	4a56      	ldr	r2, [pc, #344]	@ (8005384 <HAL_GPIO_Init+0x2e8>)
 800522c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005230:	6453      	str	r3, [r2, #68]	@ 0x44
 8005232:	4b54      	ldr	r3, [pc, #336]	@ (8005384 <HAL_GPIO_Init+0x2e8>)
 8005234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800523e:	4a52      	ldr	r2, [pc, #328]	@ (8005388 <HAL_GPIO_Init+0x2ec>)
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	3302      	adds	r3, #2
 8005246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	220f      	movs	r2, #15
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a49      	ldr	r2, [pc, #292]	@ (800538c <HAL_GPIO_Init+0x2f0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d019      	beq.n	800529e <HAL_GPIO_Init+0x202>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a48      	ldr	r2, [pc, #288]	@ (8005390 <HAL_GPIO_Init+0x2f4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_GPIO_Init+0x1fe>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a47      	ldr	r2, [pc, #284]	@ (8005394 <HAL_GPIO_Init+0x2f8>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00d      	beq.n	8005296 <HAL_GPIO_Init+0x1fa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a46      	ldr	r2, [pc, #280]	@ (8005398 <HAL_GPIO_Init+0x2fc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <HAL_GPIO_Init+0x1f6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a45      	ldr	r2, [pc, #276]	@ (800539c <HAL_GPIO_Init+0x300>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_GPIO_Init+0x1f2>
 800528a:	2304      	movs	r3, #4
 800528c:	e008      	b.n	80052a0 <HAL_GPIO_Init+0x204>
 800528e:	2307      	movs	r3, #7
 8005290:	e006      	b.n	80052a0 <HAL_GPIO_Init+0x204>
 8005292:	2303      	movs	r3, #3
 8005294:	e004      	b.n	80052a0 <HAL_GPIO_Init+0x204>
 8005296:	2302      	movs	r3, #2
 8005298:	e002      	b.n	80052a0 <HAL_GPIO_Init+0x204>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <HAL_GPIO_Init+0x204>
 800529e:	2300      	movs	r3, #0
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	f002 0203 	and.w	r2, r2, #3
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	4093      	lsls	r3, r2
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052b0:	4935      	ldr	r1, [pc, #212]	@ (8005388 <HAL_GPIO_Init+0x2ec>)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	089b      	lsrs	r3, r3, #2
 80052b6:	3302      	adds	r3, #2
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052be:	4b38      	ldr	r3, [pc, #224]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	43db      	mvns	r3, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4013      	ands	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052e2:	4a2f      	ldr	r2, [pc, #188]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052e8:	4b2d      	ldr	r3, [pc, #180]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	4013      	ands	r3, r2
 80052f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800530c:	4a24      	ldr	r2, [pc, #144]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005312:	4b23      	ldr	r3, [pc, #140]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	43db      	mvns	r3, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4013      	ands	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005336:	4a1a      	ldr	r2, [pc, #104]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800533c:	4b18      	ldr	r3, [pc, #96]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	43db      	mvns	r3, r3
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4013      	ands	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005360:	4a0f      	ldr	r2, [pc, #60]	@ (80053a0 <HAL_GPIO_Init+0x304>)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	3301      	adds	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b0f      	cmp	r3, #15
 8005370:	f67f aea2 	bls.w	80050b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	3724      	adds	r7, #36	@ 0x24
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800
 8005388:	40013800 	.word	0x40013800
 800538c:	40020000 	.word	0x40020000
 8005390:	40020400 	.word	0x40020400
 8005394:	40020800 	.word	0x40020800
 8005398:	40020c00 	.word	0x40020c00
 800539c:	40021000 	.word	0x40021000
 80053a0:	40013c00 	.word	0x40013c00

080053a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e001      	b.n	80053c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
 80053e0:	4613      	mov	r3, r2
 80053e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e4:	787b      	ldrb	r3, [r7, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053f0:	e003      	b.n	80053fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053f2:	887b      	ldrh	r3, [r7, #2]
 80053f4:	041a      	lsls	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	619a      	str	r2, [r3, #24]
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	460b      	mov	r3, r1
 8005410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005418:	887a      	ldrh	r2, [r7, #2]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4013      	ands	r3, r2
 800541e:	041a      	lsls	r2, r3, #16
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	43d9      	mvns	r1, r3
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	400b      	ands	r3, r1
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	619a      	str	r2, [r3, #24]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005446:	4b08      	ldr	r3, [pc, #32]	@ (8005468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005452:	4a05      	ldr	r2, [pc, #20]	@ (8005468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005454:	88fb      	ldrh	r3, [r7, #6]
 8005456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fd fdf4 	bl	8003048 <HAL_GPIO_EXTI_Callback>
  }
}
 8005460:	bf00      	nop
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40013c00 	.word	0x40013c00

0800546c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e12b      	b.n	80056d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fe f874 	bl	8003580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2224      	movs	r2, #36	@ 0x24
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 0201 	bic.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054d0:	f005 fa34 	bl	800a93c <HAL_RCC_GetPCLK1Freq>
 80054d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4a81      	ldr	r2, [pc, #516]	@ (80056e0 <HAL_I2C_Init+0x274>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d807      	bhi.n	80054f0 <HAL_I2C_Init+0x84>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a80      	ldr	r2, [pc, #512]	@ (80056e4 <HAL_I2C_Init+0x278>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	bf94      	ite	ls
 80054e8:	2301      	movls	r3, #1
 80054ea:	2300      	movhi	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e006      	b.n	80054fe <HAL_I2C_Init+0x92>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a7d      	ldr	r2, [pc, #500]	@ (80056e8 <HAL_I2C_Init+0x27c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bf94      	ite	ls
 80054f8:	2301      	movls	r3, #1
 80054fa:	2300      	movhi	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e0e7      	b.n	80056d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a78      	ldr	r2, [pc, #480]	@ (80056ec <HAL_I2C_Init+0x280>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	0c9b      	lsrs	r3, r3, #18
 8005510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a6a      	ldr	r2, [pc, #424]	@ (80056e0 <HAL_I2C_Init+0x274>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d802      	bhi.n	8005540 <HAL_I2C_Init+0xd4>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3301      	adds	r3, #1
 800553e:	e009      	b.n	8005554 <HAL_I2C_Init+0xe8>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	4a69      	ldr	r2, [pc, #420]	@ (80056f0 <HAL_I2C_Init+0x284>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	099b      	lsrs	r3, r3, #6
 8005552:	3301      	adds	r3, #1
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	430b      	orrs	r3, r1
 800555a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	495c      	ldr	r1, [pc, #368]	@ (80056e0 <HAL_I2C_Init+0x274>)
 8005570:	428b      	cmp	r3, r1
 8005572:	d819      	bhi.n	80055a8 <HAL_I2C_Init+0x13c>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	1e59      	subs	r1, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005582:	1c59      	adds	r1, r3, #1
 8005584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005588:	400b      	ands	r3, r1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_I2C_Init+0x138>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1e59      	subs	r1, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fbb1 f3f3 	udiv	r3, r1, r3
 800559c:	3301      	adds	r3, #1
 800559e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a2:	e051      	b.n	8005648 <HAL_I2C_Init+0x1dc>
 80055a4:	2304      	movs	r3, #4
 80055a6:	e04f      	b.n	8005648 <HAL_I2C_Init+0x1dc>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d111      	bne.n	80055d4 <HAL_I2C_Init+0x168>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1e58      	subs	r0, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6859      	ldr	r1, [r3, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	440b      	add	r3, r1
 80055be:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c2:	3301      	adds	r3, #1
 80055c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e012      	b.n	80055fa <HAL_I2C_Init+0x18e>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1e58      	subs	r0, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	0099      	lsls	r1, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ea:	3301      	adds	r3, #1
 80055ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_I2C_Init+0x196>
 80055fe:	2301      	movs	r3, #1
 8005600:	e022      	b.n	8005648 <HAL_I2C_Init+0x1dc>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10e      	bne.n	8005628 <HAL_I2C_Init+0x1bc>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1e58      	subs	r0, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6859      	ldr	r1, [r3, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	440b      	add	r3, r1
 8005618:	fbb0 f3f3 	udiv	r3, r0, r3
 800561c:	3301      	adds	r3, #1
 800561e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005626:	e00f      	b.n	8005648 <HAL_I2C_Init+0x1dc>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1e58      	subs	r0, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	0099      	lsls	r1, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	fbb0 f3f3 	udiv	r3, r0, r3
 800563e:	3301      	adds	r3, #1
 8005640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	6809      	ldr	r1, [r1, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69da      	ldr	r2, [r3, #28]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6911      	ldr	r1, [r2, #16]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68d2      	ldr	r2, [r2, #12]
 8005682:	4311      	orrs	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	430b      	orrs	r3, r1
 800568a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0201 	orr.w	r2, r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	000186a0 	.word	0x000186a0
 80056e4:	001e847f 	.word	0x001e847f
 80056e8:	003d08ff 	.word	0x003d08ff
 80056ec:	431bde83 	.word	0x431bde83
 80056f0:	10624dd3 	.word	0x10624dd3

080056f4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005706:	2b80      	cmp	r3, #128	@ 0x80
 8005708:	d103      	bne.n	8005712 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
  }
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	461a      	mov	r2, r3
 800572c:	460b      	mov	r3, r1
 800572e:	817b      	strh	r3, [r7, #10]
 8005730:	4613      	mov	r3, r2
 8005732:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005734:	f7fe fa38 	bl	8003ba8 <HAL_GetTick>
 8005738:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	f040 80e0 	bne.w	8005908 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2319      	movs	r3, #25
 800574e:	2201      	movs	r2, #1
 8005750:	4970      	ldr	r1, [pc, #448]	@ (8005914 <HAL_I2C_Master_Transmit+0x1f4>)
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f002 ffe0 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800575e:	2302      	movs	r3, #2
 8005760:	e0d3      	b.n	800590a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_I2C_Master_Transmit+0x50>
 800576c:	2302      	movs	r3, #2
 800576e:	e0cc      	b.n	800590a <HAL_I2C_Master_Transmit+0x1ea>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d007      	beq.n	8005796 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2221      	movs	r2, #33	@ 0x21
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2210      	movs	r2, #16
 80057b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	893a      	ldrh	r2, [r7, #8]
 80057c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a50      	ldr	r2, [pc, #320]	@ (8005918 <HAL_I2C_Master_Transmit+0x1f8>)
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057d8:	8979      	ldrh	r1, [r7, #10]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6a3a      	ldr	r2, [r7, #32]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f002 fbd6 	bl	8007f90 <I2C_MasterRequestWrite>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e08d      	b.n	800590a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005804:	e066      	b.n	80058d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	6a39      	ldr	r1, [r7, #32]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f003 f89e 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581a:	2b04      	cmp	r3, #4
 800581c:	d107      	bne.n	800582e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e06b      	b.n	800590a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b04      	cmp	r3, #4
 800586e:	d11b      	bne.n	80058a8 <HAL_I2C_Master_Transmit+0x188>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d017      	beq.n	80058a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	6a39      	ldr	r1, [r7, #32]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f003 f895 	bl	80089dc <I2C_WaitOnBTFFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00d      	beq.n	80058d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d107      	bne.n	80058d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e01a      	b.n	800590a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d194      	bne.n	8005806 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	00100002 	.word	0x00100002
 8005918:	ffff0000 	.word	0xffff0000

0800591c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4603      	mov	r3, r0
 800592c:	817b      	strh	r3, [r7, #10]
 800592e:	460b      	mov	r3, r1
 8005930:	813b      	strh	r3, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005936:	f7fe f937 	bl	8003ba8 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b20      	cmp	r3, #32
 8005946:	f040 80d9 	bne.w	8005afc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	2319      	movs	r3, #25
 8005950:	2201      	movs	r2, #1
 8005952:	496d      	ldr	r1, [pc, #436]	@ (8005b08 <HAL_I2C_Mem_Write+0x1ec>)
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f002 fedf 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005960:	2302      	movs	r3, #2
 8005962:	e0cc      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_I2C_Mem_Write+0x56>
 800596e:	2302      	movs	r3, #2
 8005970:	e0c5      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d007      	beq.n	8005998 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2221      	movs	r2, #33	@ 0x21
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2240      	movs	r2, #64	@ 0x40
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80059c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a4d      	ldr	r2, [pc, #308]	@ (8005b0c <HAL_I2C_Mem_Write+0x1f0>)
 80059d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059da:	88f8      	ldrh	r0, [r7, #6]
 80059dc:	893a      	ldrh	r2, [r7, #8]
 80059de:	8979      	ldrh	r1, [r7, #10]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	4603      	mov	r3, r0
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f002 fb52 	bl	8008094 <I2C_RequestMemoryWrite>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d052      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e081      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f002 ffa4 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00d      	beq.n	8005a26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d107      	bne.n	8005a22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e06b      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d11b      	bne.n	8005a9c <HAL_I2C_Mem_Write+0x180>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d017      	beq.n	8005a9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1aa      	bne.n	80059fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f002 ff97 	bl	80089dc <I2C_WaitOnBTFFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e016      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e000      	b.n	8005afe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005afc:	2302      	movs	r3, #2
  }
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	00100002 	.word	0x00100002
 8005b0c:	ffff0000 	.word	0xffff0000

08005b10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08c      	sub	sp, #48	@ 0x30
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	4608      	mov	r0, r1
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	817b      	strh	r3, [r7, #10]
 8005b22:	460b      	mov	r3, r1
 8005b24:	813b      	strh	r3, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b2a:	f7fe f83d 	bl	8003ba8 <HAL_GetTick>
 8005b2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	f040 8214 	bne.w	8005f66 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	2319      	movs	r3, #25
 8005b44:	2201      	movs	r2, #1
 8005b46:	497b      	ldr	r1, [pc, #492]	@ (8005d34 <HAL_I2C_Mem_Read+0x224>)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f002 fde5 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b54:	2302      	movs	r3, #2
 8005b56:	e207      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_Mem_Read+0x56>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e200      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d007      	beq.n	8005b8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2222      	movs	r2, #34	@ 0x22
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2240      	movs	r2, #64	@ 0x40
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a5b      	ldr	r2, [pc, #364]	@ (8005d38 <HAL_I2C_Mem_Read+0x228>)
 8005bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bce:	88f8      	ldrh	r0, [r7, #6]
 8005bd0:	893a      	ldrh	r2, [r7, #8]
 8005bd2:	8979      	ldrh	r1, [r7, #10]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4603      	mov	r3, r0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f002 faee 	bl	80081c0 <I2C_RequestMemoryRead>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e1bc      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d113      	bne.n	8005c1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	623b      	str	r3, [r7, #32]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	e190      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d11b      	bne.n	8005c5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c36:	2300      	movs	r3, #0
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e170      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d11b      	bne.n	8005c9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	e150      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cb4:	e144      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cba:	2b03      	cmp	r3, #3
 8005cbc:	f200 80f1 	bhi.w	8005ea2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d123      	bne.n	8005d10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f002 feff 	bl	8008ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e145      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691a      	ldr	r2, [r3, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d0e:	e117      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d14e      	bne.n	8005db6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4906      	ldr	r1, [pc, #24]	@ (8005d3c <HAL_I2C_Mem_Read+0x22c>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f002 fcf8 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e11a      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
 8005d32:	bf00      	nop
 8005d34:	00100002 	.word	0x00100002
 8005d38:	ffff0000 	.word	0xffff0000
 8005d3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005db4:	e0c4      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	496c      	ldr	r1, [pc, #432]	@ (8005f70 <HAL_I2C_Mem_Read+0x460>)
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f002 fca9 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e0cb      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4955      	ldr	r1, [pc, #340]	@ (8005f70 <HAL_I2C_Mem_Read+0x460>)
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f002 fc7b 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e09d      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ea0:	e04e      	b.n	8005f40 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f002 fe12 	bl	8008ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e058      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0304 	and.w	r3, r3, #4
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	d124      	bne.n	8005f40 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d107      	bne.n	8005f0e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f47f aeb6 	bne.w	8005cb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e000      	b.n	8005f68 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f66:	2302      	movs	r3, #2
  }
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	00010004 	.word	0x00010004

08005f74 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	817b      	strh	r3, [r7, #10]
 8005f86:	460b      	mov	r3, r1
 8005f88:	813b      	strh	r3, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f92:	f7fd fe09 	bl	8003ba8 <HAL_GetTick>
 8005f96:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	f040 8136 	bne.w	8006212 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800621c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	4a9c      	ldr	r2, [pc, #624]	@ (8006220 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	0a1a      	lsrs	r2, r3, #8
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009a      	lsls	r2, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d112      	bne.n	8005ff2 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e110      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d0df      	beq.n	8005fc0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_I2C_Mem_Write_DMA+0x9a>
 800600a:	2302      	movs	r3, #2
 800600c:	e102      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d007      	beq.n	8006034 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2221      	movs	r2, #33	@ 0x21
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2240      	movs	r2, #64	@ 0x40
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800605e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a6c      	ldr	r2, [pc, #432]	@ (8006224 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8006074:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006076:	897a      	ldrh	r2, [r7, #10]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800607c:	893a      	ldrh	r2, [r7, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80a9 	beq.w	80061ea <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609c:	2b00      	cmp	r3, #0
 800609e:	d02a      	beq.n	80060f6 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060a4:	4a60      	ldr	r2, [pc, #384]	@ (8006228 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80060a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ac:	4a5f      	ldr	r2, [pc, #380]	@ (800622c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80060ae:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b4:	2200      	movs	r2, #0
 80060b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060bc:	2200      	movs	r2, #0
 80060be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c4:	2200      	movs	r2, #0
 80060c6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060cc:	2200      	movs	r2, #0
 80060ce:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	4619      	mov	r1, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3310      	adds	r3, #16
 80060e0:	461a      	mov	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e6:	f7fe fc6b 	bl	80049c0 <HAL_DMA_Start_IT>
 80060ea:	4603      	mov	r3, r0
 80060ec:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80060ee:	7efb      	ldrb	r3, [r7, #27]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d166      	bne.n	80061c2 <HAL_I2C_Mem_Write_DMA+0x24e>
 80060f4:	e013      	b.n	800611e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e07a      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800611e:	88f8      	ldrh	r0, [r7, #6]
 8006120:	893a      	ldrh	r2, [r7, #8]
 8006122:	8979      	ldrh	r1, [r7, #10]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2323      	movs	r3, #35	@ 0x23
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	4603      	mov	r3, r0
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f001 ffb0 	bl	8008094 <I2C_RequestMemoryWrite>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d022      	beq.n	8006180 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe fd06 	bl	8004b50 <HAL_DMA_Abort_IT>
 8006144:	4603      	mov	r3, r0
 8006146:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	2200      	movs	r2, #0
 800614e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e049      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ac:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061bc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e028      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d6:	f043 0210 	orr.w	r2, r3, #16
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e014      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000010 	.word	0x20000010
 8006220:	14f8b589 	.word	0x14f8b589
 8006224:	ffff0000 	.word	0xffff0000
 8006228:	08008391 	.word	0x08008391
 800622c:	0800854f 	.word	0x0800854f

08006230 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	@ 0x30
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	4603      	mov	r3, r0
 8006240:	817b      	strh	r3, [r7, #10]
 8006242:	460b      	mov	r3, r1
 8006244:	813b      	strh	r3, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800624a:	f7fd fcad 	bl	8003ba8 <HAL_GetTick>
 800624e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b20      	cmp	r3, #32
 800625e:	f040 8172 	bne.w	8006546 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006262:	4b93      	ldr	r3, [pc, #588]	@ (80064b0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	4a92      	ldr	r2, [pc, #584]	@ (80064b4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	0a1a      	lsrs	r2, r3, #8
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	009a      	lsls	r2, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3b01      	subs	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d112      	bne.n	80062ae <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	e14c      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d0df      	beq.n	800627c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_I2C_Mem_Read_DMA+0x9a>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e13e      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d007      	beq.n	80062f0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2222      	movs	r2, #34	@ 0x22
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2240      	movs	r2, #64	@ 0x40
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a62      	ldr	r2, [pc, #392]	@ (80064b8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8006332:	897a      	ldrh	r2, [r7, #10]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006338:	893a      	ldrh	r2, [r7, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80cc 	beq.w	80064ec <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006358:	2b00      	cmp	r3, #0
 800635a:	d02d      	beq.n	80063b8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	4a56      	ldr	r2, [pc, #344]	@ (80064bc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006362:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006368:	4a55      	ldr	r2, [pc, #340]	@ (80064c0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800636a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	2200      	movs	r2, #0
 8006372:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006378:	2200      	movs	r2, #0
 800637a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	2200      	movs	r2, #0
 8006382:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006388:	2200      	movs	r2, #0
 800638a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3310      	adds	r3, #16
 8006396:	4619      	mov	r1, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	f7fe fb0d 	bl	80049c0 <HAL_DMA_Start_IT>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 8087 	bne.w	80064c4 <HAL_I2C_Mem_Read_DMA+0x294>
 80063b6:	e013      	b.n	80063e0 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0b3      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80063e0:	88f8      	ldrh	r0, [r7, #6]
 80063e2:	893a      	ldrh	r2, [r7, #8]
 80063e4:	8979      	ldrh	r1, [r7, #10]
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	2323      	movs	r3, #35	@ 0x23
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	4603      	mov	r3, r0
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f001 fee5 	bl	80081c0 <I2C_RequestMemoryRead>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d023      	beq.n	8006444 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fba5 	bl	8004b50 <HAL_DMA_Abort_IT>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006410:	2200      	movs	r2, #0
 8006412:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006422:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e081      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006448:	2b01      	cmp	r3, #1
 800644a:	d108      	bne.n	800645e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e007      	b.n	800646e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800646c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800649a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064aa:	605a      	str	r2, [r3, #4]
 80064ac:	e049      	b.n	8006542 <HAL_I2C_Mem_Read_DMA+0x312>
 80064ae:	bf00      	nop
 80064b0:	20000010 	.word	0x20000010
 80064b4:	14f8b589 	.word	0x14f8b589
 80064b8:	ffff0000 	.word	0xffff0000
 80064bc:	08008391 	.word	0x08008391
 80064c0:	0800854f 	.word	0x0800854f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e02d      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80064ec:	88f8      	ldrh	r0, [r7, #6]
 80064ee:	893a      	ldrh	r2, [r7, #8]
 80064f0:	8979      	ldrh	r1, [r7, #10]
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	2323      	movs	r3, #35	@ 0x23
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	4603      	mov	r3, r0
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f001 fe5f 	bl	80081c0 <I2C_RequestMemoryRead>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e01d      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006530:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006546:	2302      	movs	r3, #2
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3728      	adds	r7, #40	@ 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	@ 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	460b      	mov	r3, r1
 800655e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006560:	f7fd fb22 	bl	8003ba8 <HAL_GetTick>
 8006564:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	f040 8111 	bne.w	800679a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2319      	movs	r3, #25
 800657e:	2201      	movs	r2, #1
 8006580:	4988      	ldr	r1, [pc, #544]	@ (80067a4 <HAL_I2C_IsDeviceReady+0x254>)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f002 f8c8 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
 8006590:	e104      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_I2C_IsDeviceReady+0x50>
 800659c:	2302      	movs	r3, #2
 800659e:	e0fd      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d007      	beq.n	80065c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2224      	movs	r2, #36	@ 0x24
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a70      	ldr	r2, [pc, #448]	@ (80067a8 <HAL_I2C_IsDeviceReady+0x258>)
 80065e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f002 f886 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00d      	beq.n	800662e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006620:	d103      	bne.n	800662a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006628:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0b6      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800662e:	897b      	ldrh	r3, [r7, #10]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800663c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800663e:	f7fd fab3 	bl	8003ba8 <HAL_GetTick>
 8006642:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006668:	bf0c      	ite	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	2300      	movne	r3, #0
 800666e:	b2db      	uxtb	r3, r3
 8006670:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006672:	e025      	b.n	80066c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006674:	f7fd fa98 	bl	8003ba8 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <HAL_I2C_IsDeviceReady+0x13a>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22a0      	movs	r2, #160	@ 0xa0
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b02      	cmp	r3, #2
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80066ca:	d005      	beq.n	80066d8 <HAL_I2C_IsDeviceReady+0x188>
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <HAL_I2C_IsDeviceReady+0x188>
 80066d2:	7dbb      	ldrb	r3, [r7, #22]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0cd      	beq.n	8006674 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d129      	bne.n	8006742 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2319      	movs	r3, #25
 800671a:	2201      	movs	r2, #1
 800671c:	4921      	ldr	r1, [pc, #132]	@ (80067a4 <HAL_I2C_IsDeviceReady+0x254>)
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f001 fffa 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e036      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e02c      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006750:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800675a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2319      	movs	r3, #25
 8006762:	2201      	movs	r2, #1
 8006764:	490f      	ldr	r1, [pc, #60]	@ (80067a4 <HAL_I2C_IsDeviceReady+0x254>)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f001 ffd6 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e012      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	3301      	adds	r3, #1
 800677a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	f4ff af32 	bcc.w	80065ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800679a:	2302      	movs	r3, #2
  }
}
 800679c:	4618      	mov	r0, r3
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	00100002 	.word	0x00100002
 80067a8:	ffff0000 	.word	0xffff0000

080067ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d003      	beq.n	80067e4 <HAL_I2C_EV_IRQHandler+0x38>
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b40      	cmp	r3, #64	@ 0x40
 80067e0:	f040 80c1 	bne.w	8006966 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10d      	bne.n	800681a <HAL_I2C_EV_IRQHandler+0x6e>
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006804:	d003      	beq.n	800680e <HAL_I2C_EV_IRQHandler+0x62>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800680c:	d101      	bne.n	8006812 <HAL_I2C_EV_IRQHandler+0x66>
 800680e:	2301      	movs	r3, #1
 8006810:	e000      	b.n	8006814 <HAL_I2C_EV_IRQHandler+0x68>
 8006812:	2300      	movs	r3, #0
 8006814:	2b01      	cmp	r3, #1
 8006816:	f000 8132 	beq.w	8006a7e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00c      	beq.n	800683e <HAL_I2C_EV_IRQHandler+0x92>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	0a5b      	lsrs	r3, r3, #9
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 f9d9 	bl	8008be8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fd8b 	bl	8007352 <I2C_Master_SB>
 800683c:	e092      	b.n	8006964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	08db      	lsrs	r3, r3, #3
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <HAL_I2C_EV_IRQHandler+0xb2>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fe01 	bl	800745e <I2C_Master_ADD10>
 800685c:	e082      	b.n	8006964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_I2C_EV_IRQHandler+0xd2>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	0a5b      	lsrs	r3, r3, #9
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fe1b 	bl	80074b2 <I2C_Master_ADDR>
 800687c:	e072      	b.n	8006964 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d03b      	beq.n	8006902 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006898:	f000 80f3 	beq.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	09db      	lsrs	r3, r3, #7
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00f      	beq.n	80068c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	0a9b      	lsrs	r3, r3, #10
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	089b      	lsrs	r3, r3, #2
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f9df 	bl	8006c84 <I2C_MasterTransmit_TXE>
 80068c6:	e04d      	b.n	8006964 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	089b      	lsrs	r3, r3, #2
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 80d6 	beq.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	0a5b      	lsrs	r3, r3, #9
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80cf 	beq.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b21      	cmp	r3, #33	@ 0x21
 80068e8:	d103      	bne.n	80068f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa66 	bl	8006dbc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f0:	e0c7      	b.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	f040 80c4 	bne.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fad4 	bl	8006ea8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006900:	e0bf      	b.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800690c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006910:	f000 80b7 	beq.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00f      	beq.n	8006940 <HAL_I2C_EV_IRQHandler+0x194>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	0a9b      	lsrs	r3, r3, #10
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <HAL_I2C_EV_IRQHandler+0x194>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	089b      	lsrs	r3, r3, #2
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fb4d 	bl	8006fd8 <I2C_MasterReceive_RXNE>
 800693e:	e011      	b.n	8006964 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 809a 	beq.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	0a5b      	lsrs	r3, r3, #9
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8093 	beq.w	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc03 	bl	8007168 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006962:	e08e      	b.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006964:	e08d      	b.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e007      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d012      	beq.n	80069ba <HAL_I2C_EV_IRQHandler+0x20e>
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	0a5b      	lsrs	r3, r3, #9
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00c      	beq.n	80069ba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80069b0:	69b9      	ldr	r1, [r7, #24]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ffcc 	bl	8007950 <I2C_Slave_ADDR>
 80069b8:	e066      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	091b      	lsrs	r3, r3, #4
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d009      	beq.n	80069da <HAL_I2C_EV_IRQHandler+0x22e>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	0a5b      	lsrs	r3, r3, #9
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 f806 	bl	80079e4 <I2C_Slave_STOPF>
 80069d8:	e056      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b21      	cmp	r3, #33	@ 0x21
 80069de:	d002      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x23a>
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b29      	cmp	r3, #41	@ 0x29
 80069e4:	d125      	bne.n	8006a32 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00f      	beq.n	8006a12 <HAL_I2C_EV_IRQHandler+0x266>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	0a9b      	lsrs	r3, r3, #10
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d009      	beq.n	8006a12 <HAL_I2C_EV_IRQHandler+0x266>
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	089b      	lsrs	r3, r3, #2
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fee2 	bl	80077d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a10:	e039      	b.n	8006a86 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	089b      	lsrs	r3, r3, #2
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d033      	beq.n	8006a86 <HAL_I2C_EV_IRQHandler+0x2da>
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	0a5b      	lsrs	r3, r3, #9
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d02d      	beq.n	8006a86 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 ff0f 	bl	800784e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a30:	e029      	b.n	8006a86 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	099b      	lsrs	r3, r3, #6
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00f      	beq.n	8006a5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	0a9b      	lsrs	r3, r3, #10
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	089b      	lsrs	r3, r3, #2
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 ff1a 	bl	8007890 <I2C_SlaveReceive_RXNE>
 8006a5c:	e014      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	089b      	lsrs	r3, r3, #2
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00e      	beq.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	0a5b      	lsrs	r3, r3, #9
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 ff48 	bl	800790c <I2C_SlaveReceive_BTF>
 8006a7c:	e004      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006a7e:	bf00      	nop
 8006a80:	e002      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a82:	bf00      	nop
 8006a84:	e000      	b.n	8006a88 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006a88:	3720      	adds	r7, #32
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b08a      	sub	sp, #40	@ 0x28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ab0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00e      	beq.n	8006adc <HAL_I2C_ER_IRQHandler+0x4e>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	0a1b      	lsrs	r3, r3, #8
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ada:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	0a5b      	lsrs	r3, r3, #9
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00e      	beq.n	8006b06 <HAL_I2C_ER_IRQHandler+0x78>
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006b04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	0a9b      	lsrs	r3, r3, #10
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d03f      	beq.n	8006b92 <HAL_I2C_ER_IRQHandler+0x104>
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	0a1b      	lsrs	r3, r3, #8
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d039      	beq.n	8006b92 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006b1e:	7efb      	ldrb	r3, [r7, #27]
 8006b20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b38:	7ebb      	ldrb	r3, [r7, #26]
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d112      	bne.n	8006b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10f      	bne.n	8006b64 <HAL_I2C_ER_IRQHandler+0xd6>
 8006b44:	7cfb      	ldrb	r3, [r7, #19]
 8006b46:	2b21      	cmp	r3, #33	@ 0x21
 8006b48:	d008      	beq.n	8006b5c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006b4a:	7cfb      	ldrb	r3, [r7, #19]
 8006b4c:	2b29      	cmp	r3, #41	@ 0x29
 8006b4e:	d005      	beq.n	8006b5c <HAL_I2C_ER_IRQHandler+0xce>
 8006b50:	7cfb      	ldrb	r3, [r7, #19]
 8006b52:	2b28      	cmp	r3, #40	@ 0x28
 8006b54:	d106      	bne.n	8006b64 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b21      	cmp	r3, #33	@ 0x21
 8006b5a:	d103      	bne.n	8006b64 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 f871 	bl	8007c44 <I2C_Slave_AF>
 8006b62:	e016      	b.n	8006b92 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	f043 0304 	orr.w	r3, r3, #4
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006b76:	7efb      	ldrb	r3, [r7, #27]
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d002      	beq.n	8006b82 <HAL_I2C_ER_IRQHandler+0xf4>
 8006b7c:	7efb      	ldrb	r3, [r7, #27]
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d107      	bne.n	8006b92 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	0adb      	lsrs	r3, r3, #11
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00e      	beq.n	8006bbc <HAL_I2C_ER_IRQHandler+0x12e>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	f043 0308 	orr.w	r3, r3, #8
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006bba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 f8ac 	bl	8007d2c <I2C_ITError>
  }
}
 8006bd4:	bf00      	nop
 8006bd6:	3728      	adds	r7, #40	@ 0x28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	70fb      	strb	r3, [r7, #3]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d150      	bne.n	8006d4c <I2C_MasterTransmit_TXE+0xc8>
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	2b21      	cmp	r3, #33	@ 0x21
 8006cae:	d14d      	bne.n	8006d4c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d01d      	beq.n	8006cf2 <I2C_MasterTransmit_TXE+0x6e>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d01a      	beq.n	8006cf2 <I2C_MasterTransmit_TXE+0x6e>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006cc2:	d016      	beq.n	8006cf2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cd2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2211      	movs	r2, #17
 8006cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff ff76 	bl	8006bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cf0:	e060      	b.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d00:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d10:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d107      	bne.n	8006d3c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7fc f947 	bl	8002fc8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d3a:	e03b      	b.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff49 	bl	8006bdc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d4a:	e033      	b.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b21      	cmp	r3, #33	@ 0x21
 8006d50:	d005      	beq.n	8006d5e <I2C_MasterTransmit_TXE+0xda>
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b40      	cmp	r3, #64	@ 0x40
 8006d56:	d12d      	bne.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b22      	cmp	r3, #34	@ 0x22
 8006d5c:	d12a      	bne.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d108      	bne.n	8006d7a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d76:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d78:	e01c      	b.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d103      	bne.n	8006d8e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f88e 	bl	8006ea8 <I2C_MemoryTransmit_TXE_BTF>
}
 8006d8c:	e012      	b.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006db2:	e7ff      	b.n	8006db4 <I2C_MasterTransmit_TXE+0x130>
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b21      	cmp	r3, #33	@ 0x21
 8006dd4:	d164      	bne.n	8006ea0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e04:	e04c      	b.n	8006ea0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d01d      	beq.n	8006e48 <I2C_MasterTransmit_BTF+0x8c>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b20      	cmp	r3, #32
 8006e10:	d01a      	beq.n	8006e48 <I2C_MasterTransmit_BTF+0x8c>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e18:	d016      	beq.n	8006e48 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e28:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2211      	movs	r2, #17
 8006e2e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff fecb 	bl	8006bdc <HAL_I2C_MasterTxCpltCallback>
}
 8006e46:	e02b      	b.n	8006ea0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e56:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e66:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d107      	bne.n	8006e92 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fc f89c 	bl	8002fc8 <HAL_I2C_MemTxCpltCallback>
}
 8006e90:	e006      	b.n	8006ea0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fe9e 	bl	8006bdc <HAL_I2C_MasterTxCpltCallback>
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11d      	bne.n	8006efc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d10b      	bne.n	8006ee0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed8:	1c9a      	adds	r2, r3, #2
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006ede:	e077      	b.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	121b      	asrs	r3, r3, #8
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006efa:	e069      	b.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10b      	bne.n	8006f1c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f1a:	e059      	b.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d152      	bne.n	8006fca <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	2b22      	cmp	r3, #34	@ 0x22
 8006f28:	d10d      	bne.n	8006f46 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f38:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f44:	e044      	b.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d015      	beq.n	8006f7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b21      	cmp	r3, #33	@ 0x21
 8006f54:	d112      	bne.n	8006f7c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006f7a:	e029      	b.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d124      	bne.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	2b21      	cmp	r3, #33	@ 0x21
 8006f8a:	d121      	bne.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f9a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006faa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fc f800 	bl	8002fc8 <HAL_I2C_MemTxCpltCallback>
}
 8006fc8:	e002      	b.n	8006fd0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fe fb92 	bl	80056f4 <I2C_Flush_DR>
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b22      	cmp	r3, #34	@ 0x22
 8006fea:	f040 80b9 	bne.w	8007160 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d921      	bls.n	8007046 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b03      	cmp	r3, #3
 8007030:	f040 8096 	bne.w	8007160 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007042:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007044:	e08c      	b.n	8007160 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	2b02      	cmp	r3, #2
 800704c:	d07f      	beq.n	800714e <I2C_MasterReceive_RXNE+0x176>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d002      	beq.n	800705a <I2C_MasterReceive_RXNE+0x82>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d179      	bne.n	800714e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 fd06 	bl	8008a6c <I2C_WaitOnSTOPRequestThroughIT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d14c      	bne.n	8007100 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007074:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007084:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b40      	cmp	r3, #64	@ 0x40
 80070be:	d10a      	bne.n	80070d6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fb ff8a 	bl	8002fe8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070d4:	e044      	b.n	8007160 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d002      	beq.n	80070ea <I2C_MasterReceive_RXNE+0x112>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b20      	cmp	r3, #32
 80070e8:	d103      	bne.n	80070f2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80070f0:	e002      	b.n	80070f8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2212      	movs	r2, #18
 80070f6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff fd79 	bl	8006bf0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070fe:	e02f      	b.n	8007160 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800710e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691a      	ldr	r2, [r3, #16]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff fd88 	bl	8006c5c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800714c:	e008      	b.n	8007160 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800715c:	605a      	str	r2, [r3, #4]
}
 800715e:	e7ff      	b.n	8007160 <I2C_MasterReceive_RXNE+0x188>
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007174:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	2b04      	cmp	r3, #4
 800717e:	d11b      	bne.n	80071b8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800718e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80071b6:	e0c8      	b.n	800734a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d129      	bne.n	8007216 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d00a      	beq.n	80071ee <I2C_MasterReceive_BTF+0x86>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d007      	beq.n	80071ee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007214:	e099      	b.n	800734a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	f040 8081 	bne.w	8007324 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d002      	beq.n	800722e <I2C_MasterReceive_BTF+0xc6>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b10      	cmp	r3, #16
 800722c:	d108      	bne.n	8007240 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	e019      	b.n	8007274 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b04      	cmp	r3, #4
 8007244:	d002      	beq.n	800724c <I2C_MasterReceive_BTF+0xe4>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b02      	cmp	r3, #2
 800724a:	d108      	bne.n	800725e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	e00a      	b.n	8007274 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b10      	cmp	r3, #16
 8007262:	d007      	beq.n	8007274 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007272:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691a      	ldr	r2, [r3, #16]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80072ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	d10a      	bne.n	80072fa <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fb fe78 	bl	8002fe8 <HAL_I2C_MemRxCpltCallback>
}
 80072f8:	e027      	b.n	800734a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d002      	beq.n	800730e <I2C_MasterReceive_BTF+0x1a6>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b20      	cmp	r3, #32
 800730c:	d103      	bne.n	8007316 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	631a      	str	r2, [r3, #48]	@ 0x30
 8007314:	e002      	b.n	800731c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2212      	movs	r2, #18
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f7ff fc67 	bl	8006bf0 <HAL_I2C_MasterRxCpltCallback>
}
 8007322:	e012      	b.n	800734a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b40      	cmp	r3, #64	@ 0x40
 8007364:	d117      	bne.n	8007396 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d109      	bne.n	8007382 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800737e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007380:	e067      	b.n	8007452 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	611a      	str	r2, [r3, #16]
}
 8007394:	e05d      	b.n	8007452 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800739e:	d133      	bne.n	8007408 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b21      	cmp	r3, #33	@ 0x21
 80073aa:	d109      	bne.n	80073c0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073bc:	611a      	str	r2, [r3, #16]
 80073be:	e008      	b.n	80073d2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	b2da      	uxtb	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <I2C_Master_SB+0x92>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d108      	bne.n	80073f6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d032      	beq.n	8007452 <I2C_Master_SB+0x100>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d02d      	beq.n	8007452 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007404:	605a      	str	r2, [r3, #4]
}
 8007406:	e024      	b.n	8007452 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10e      	bne.n	800742e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007414:	b29b      	uxth	r3, r3
 8007416:	11db      	asrs	r3, r3, #7
 8007418:	b2db      	uxtb	r3, r3
 800741a:	f003 0306 	and.w	r3, r3, #6
 800741e:	b2db      	uxtb	r3, r3
 8007420:	f063 030f 	orn	r3, r3, #15
 8007424:	b2da      	uxtb	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	611a      	str	r2, [r3, #16]
}
 800742c:	e011      	b.n	8007452 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007432:	2b01      	cmp	r3, #1
 8007434:	d10d      	bne.n	8007452 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743a:	b29b      	uxth	r3, r3
 800743c:	11db      	asrs	r3, r3, #7
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f003 0306 	and.w	r3, r3, #6
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f063 030e 	orn	r3, r3, #14
 800744a:	b2da      	uxtb	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	611a      	str	r2, [r3, #16]
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746a:	b2da      	uxtb	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <I2C_Master_ADD10+0x26>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800747e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007480:	2b00      	cmp	r3, #0
 8007482:	d108      	bne.n	8007496 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <I2C_Master_ADD10+0x48>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074a4:	605a      	str	r2, [r3, #4]
  }
}
 80074a6:	bf00      	nop
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b091      	sub	sp, #68	@ 0x44
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b22      	cmp	r3, #34	@ 0x22
 80074da:	f040 8169 	bne.w	80077b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10f      	bne.n	8007506 <I2C_Master_ADDR+0x54>
 80074e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80074ea:	2b40      	cmp	r3, #64	@ 0x40
 80074ec:	d10b      	bne.n	8007506 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ee:	2300      	movs	r3, #0
 80074f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	633b      	str	r3, [r7, #48]	@ 0x30
 8007502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007504:	e160      	b.n	80077c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750a:	2b00      	cmp	r3, #0
 800750c:	d11d      	bne.n	800754a <I2C_Master_ADDR+0x98>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007516:	d118      	bne.n	800754a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800753c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	651a      	str	r2, [r3, #80]	@ 0x50
 8007548:	e13e      	b.n	80077c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d113      	bne.n	800757c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007554:	2300      	movs	r3, #0
 8007556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007578:	601a      	str	r2, [r3, #0]
 800757a:	e115      	b.n	80077a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b01      	cmp	r3, #1
 8007584:	f040 808a 	bne.w	800769c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800758a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800758e:	d137      	bne.n	8007600 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800759e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ae:	d113      	bne.n	80075d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c0:	2300      	movs	r3, #0
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	e0e7      	b.n	80077a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075d8:	2300      	movs	r3, #0
 80075da:	623b      	str	r3, [r7, #32]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	623b      	str	r3, [r7, #32]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e0d3      	b.n	80077a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007602:	2b08      	cmp	r3, #8
 8007604:	d02e      	beq.n	8007664 <I2C_Master_ADDR+0x1b2>
 8007606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007608:	2b20      	cmp	r3, #32
 800760a:	d02b      	beq.n	8007664 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800760c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760e:	2b12      	cmp	r3, #18
 8007610:	d102      	bne.n	8007618 <I2C_Master_ADDR+0x166>
 8007612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007614:	2b01      	cmp	r3, #1
 8007616:	d125      	bne.n	8007664 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761a:	2b04      	cmp	r3, #4
 800761c:	d00e      	beq.n	800763c <I2C_Master_ADDR+0x18a>
 800761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007620:	2b02      	cmp	r3, #2
 8007622:	d00b      	beq.n	800763c <I2C_Master_ADDR+0x18a>
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	2b10      	cmp	r3, #16
 8007628:	d008      	beq.n	800763c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e007      	b.n	800764c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800764a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	e0a1      	b.n	80077a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007672:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007674:	2300      	movs	r3, #0
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007698:	601a      	str	r2, [r3, #0]
 800769a:	e085      	b.n	80077a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d14d      	bne.n	8007742 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d016      	beq.n	80076da <I2C_Master_ADDR+0x228>
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d013      	beq.n	80076da <I2C_Master_ADDR+0x228>
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d010      	beq.n	80076da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e007      	b.n	80076ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f8:	d117      	bne.n	800772a <I2C_Master_ADDR+0x278>
 80076fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007700:	d00b      	beq.n	800771a <I2C_Master_ADDR+0x268>
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	2b01      	cmp	r3, #1
 8007706:	d008      	beq.n	800771a <I2C_Master_ADDR+0x268>
 8007708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770a:	2b08      	cmp	r3, #8
 800770c:	d005      	beq.n	800771a <I2C_Master_ADDR+0x268>
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	2b10      	cmp	r3, #16
 8007712:	d002      	beq.n	800771a <I2C_Master_ADDR+0x268>
 8007714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007716:	2b20      	cmp	r3, #32
 8007718:	d107      	bne.n	800772a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007728:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	e032      	b.n	80077a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007750:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800775c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007760:	d117      	bne.n	8007792 <I2C_Master_ADDR+0x2e0>
 8007762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007764:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007768:	d00b      	beq.n	8007782 <I2C_Master_ADDR+0x2d0>
 800776a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776c:	2b01      	cmp	r3, #1
 800776e:	d008      	beq.n	8007782 <I2C_Master_ADDR+0x2d0>
 8007770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007772:	2b08      	cmp	r3, #8
 8007774:	d005      	beq.n	8007782 <I2C_Master_ADDR+0x2d0>
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	2b10      	cmp	r3, #16
 800777a:	d002      	beq.n	8007782 <I2C_Master_ADDR+0x2d0>
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	2b20      	cmp	r3, #32
 8007780:	d107      	bne.n	8007792 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007790:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007792:	2300      	movs	r3, #0
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80077ae:	e00b      	b.n	80077c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	e7ff      	b.n	80077c8 <I2C_Master_ADDR+0x316>
 80077c8:	bf00      	nop
 80077ca:	3744      	adds	r7, #68	@ 0x44
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d02b      	beq.n	8007846 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f2:	781a      	ldrb	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d114      	bne.n	8007846 <I2C_SlaveTransmit_TXE+0x72>
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	2b29      	cmp	r3, #41	@ 0x29
 8007820:	d111      	bne.n	8007846 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007830:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2221      	movs	r2, #33	@ 0x21
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2228      	movs	r2, #40	@ 0x28
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff f9df 	bl	8006c04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007846:	bf00      	nop
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d011      	beq.n	8007884 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d02c      	beq.n	8007904 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d114      	bne.n	8007904 <I2C_SlaveReceive_RXNE+0x74>
 80078da:	7bfb      	ldrb	r3, [r7, #15]
 80078dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80078de:	d111      	bne.n	8007904 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2222      	movs	r2, #34	@ 0x22
 80078f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2228      	movs	r2, #40	@ 0x28
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff f98a 	bl	8006c18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007904:	bf00      	nop
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d012      	beq.n	8007944 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800796a:	2b28      	cmp	r3, #40	@ 0x28
 800796c:	d127      	bne.n	80079be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800797c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	089b      	lsrs	r3, r3, #2
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800798a:	2301      	movs	r3, #1
 800798c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	09db      	lsrs	r3, r3, #7
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	81bb      	strh	r3, [r7, #12]
 80079a0:	e002      	b.n	80079a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80079b0:	89ba      	ldrh	r2, [r7, #12]
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff f938 	bl	8006c2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80079bc:	e00e      	b.n	80079dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80079dc:	bf00      	nop
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007a04:	2300      	movs	r3, #0
 8007a06:	60bb      	str	r3, [r7, #8]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	60bb      	str	r3, [r7, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0201 	orr.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a40:	d172      	bne.n	8007b28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	2b22      	cmp	r3, #34	@ 0x22
 8007a46:	d002      	beq.n	8007a4e <I2C_Slave_STOPF+0x6a>
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a4c:	d135      	bne.n	8007aba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd fa0e 	bl	8004ea8 <HAL_DMA_GetState>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d049      	beq.n	8007b26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a96:	4a69      	ldr	r2, [pc, #420]	@ (8007c3c <I2C_Slave_STOPF+0x258>)
 8007a98:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd f856 	bl	8004b50 <HAL_DMA_Abort_IT>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03d      	beq.n	8007b26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ab8:	e035      	b.n	8007b26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d005      	beq.n	8007ade <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad6:	f043 0204 	orr.w	r2, r3, #4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007aec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fd f9d8 	bl	8004ea8 <HAL_DMA_GetState>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d014      	beq.n	8007b28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b02:	4a4e      	ldr	r2, [pc, #312]	@ (8007c3c <I2C_Slave_STOPF+0x258>)
 8007b04:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd f820 	bl	8004b50 <HAL_DMA_Abort_IT>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	e000      	b.n	8007b28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d03e      	beq.n	8007bb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d112      	bne.n	8007b66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691a      	ldr	r2, [r3, #16]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4a:	b2d2      	uxtb	r2, r2
 8007b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b70:	2b40      	cmp	r3, #64	@ 0x40
 8007b72:	d112      	bne.n	8007b9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba8:	f043 0204 	orr.w	r2, r3, #4
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8b7 	bl	8007d2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007bbe:	e039      	b.n	8007c34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bc4:	d109      	bne.n	8007bda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2228      	movs	r2, #40	@ 0x28
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff f81f 	bl	8006c18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	2b28      	cmp	r3, #40	@ 0x28
 8007be4:	d111      	bne.n	8007c0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a15      	ldr	r2, [pc, #84]	@ (8007c40 <I2C_Slave_STOPF+0x25c>)
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff f820 	bl	8006c48 <HAL_I2C_ListenCpltCallback>
}
 8007c08:	e014      	b.n	8007c34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0e:	2b22      	cmp	r3, #34	@ 0x22
 8007c10:	d002      	beq.n	8007c18 <I2C_Slave_STOPF+0x234>
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
 8007c14:	2b22      	cmp	r3, #34	@ 0x22
 8007c16:	d10d      	bne.n	8007c34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fe fff2 	bl	8006c18 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	080085c9 	.word	0x080085c9
 8007c40:	ffff0000 	.word	0xffff0000

08007c44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d002      	beq.n	8007c66 <I2C_Slave_AF+0x22>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d129      	bne.n	8007cba <I2C_Slave_AF+0x76>
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	2b28      	cmp	r3, #40	@ 0x28
 8007c6a:	d126      	bne.n	8007cba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8007d28 <I2C_Slave_AF+0xe4>)
 8007c70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2220      	movs	r2, #32
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fe ffc8 	bl	8006c48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007cb8:	e031      	b.n	8007d1e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b21      	cmp	r3, #33	@ 0x21
 8007cbe:	d129      	bne.n	8007d14 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <I2C_Slave_AF+0xe4>)
 8007cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2221      	movs	r2, #33	@ 0x21
 8007cca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007cea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007cf4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d04:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fd fcf4 	bl	80056f4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7fe ff79 	bl	8006c04 <HAL_I2C_SlaveTxCpltCallback>
}
 8007d12:	e004      	b.n	8007d1e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d1c:	615a      	str	r2, [r3, #20]
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	ffff0000 	.word	0xffff0000

08007d2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d44:	7bbb      	ldrb	r3, [r7, #14]
 8007d46:	2b10      	cmp	r3, #16
 8007d48:	d002      	beq.n	8007d50 <I2C_ITError+0x24>
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b40      	cmp	r3, #64	@ 0x40
 8007d4e:	d10a      	bne.n	8007d66 <I2C_ITError+0x3a>
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
 8007d52:	2b22      	cmp	r3, #34	@ 0x22
 8007d54:	d107      	bne.n	8007d66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
 8007d68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d6c:	2b28      	cmp	r3, #40	@ 0x28
 8007d6e:	d107      	bne.n	8007d80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2228      	movs	r2, #40	@ 0x28
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007d7e:	e015      	b.n	8007dac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d8e:	d00a      	beq.n	8007da6 <I2C_ITError+0x7a>
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b60      	cmp	r3, #96	@ 0x60
 8007d94:	d007      	beq.n	8007da6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dba:	d162      	bne.n	8007e82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d020      	beq.n	8007e1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dde:	4a6a      	ldr	r2, [pc, #424]	@ (8007f88 <I2C_ITError+0x25c>)
 8007de0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fc feb2 	bl	8004b50 <HAL_DMA_Abort_IT>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8089 	beq.w	8007f06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e16:	4610      	mov	r0, r2
 8007e18:	4798      	blx	r3
 8007e1a:	e074      	b.n	8007f06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e20:	4a59      	ldr	r2, [pc, #356]	@ (8007f88 <I2C_ITError+0x25c>)
 8007e22:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fc fe91 	bl	8004b50 <HAL_DMA_Abort_IT>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d068      	beq.n	8007f06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e3e:	2b40      	cmp	r3, #64	@ 0x40
 8007e40:	d10b      	bne.n	8007e5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0201 	bic.w	r2, r2, #1
 8007e68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	e041      	b.n	8007f06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b60      	cmp	r3, #96	@ 0x60
 8007e8c:	d125      	bne.n	8007eda <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea6:	2b40      	cmp	r3, #64	@ 0x40
 8007ea8:	d10b      	bne.n	8007ec2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691a      	ldr	r2, [r3, #16]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fe fecc 	bl	8006c70 <HAL_I2C_AbortCpltCallback>
 8007ed8:	e015      	b.n	8007f06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b40      	cmp	r3, #64	@ 0x40
 8007ee6:	d10b      	bne.n	8007f00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691a      	ldr	r2, [r3, #16]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7fe feab 	bl	8006c5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10e      	bne.n	8007f34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d109      	bne.n	8007f34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b04      	cmp	r3, #4
 8007f56:	d113      	bne.n	8007f80 <I2C_ITError+0x254>
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	2b28      	cmp	r3, #40	@ 0x28
 8007f5c:	d110      	bne.n	8007f80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a0a      	ldr	r2, [pc, #40]	@ (8007f8c <I2C_ITError+0x260>)
 8007f62:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fe fe64 	bl	8006c48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	080085c9 	.word	0x080085c9
 8007f8c:	ffff0000 	.word	0xffff0000

08007f90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	607a      	str	r2, [r7, #4]
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d006      	beq.n	8007fba <I2C_MasterRequestWrite+0x2a>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d003      	beq.n	8007fba <I2C_MasterRequestWrite+0x2a>
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fb8:	d108      	bne.n	8007fcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e00b      	b.n	8007fe4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd0:	2b12      	cmp	r3, #18
 8007fd2:	d107      	bne.n	8007fe4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fb91 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00d      	beq.n	8008018 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800800a:	d103      	bne.n	8008014 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008012:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e035      	b.n	8008084 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008020:	d108      	bne.n	8008034 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008022:	897b      	ldrh	r3, [r7, #10]
 8008024:	b2db      	uxtb	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008030:	611a      	str	r2, [r3, #16]
 8008032:	e01b      	b.n	800806c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008034:	897b      	ldrh	r3, [r7, #10]
 8008036:	11db      	asrs	r3, r3, #7
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0306 	and.w	r3, r3, #6
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f063 030f 	orn	r3, r3, #15
 8008044:	b2da      	uxtb	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	490e      	ldr	r1, [pc, #56]	@ (800808c <I2C_MasterRequestWrite+0xfc>)
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 fbda 	bl	800880c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e010      	b.n	8008084 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008062:	897b      	ldrh	r3, [r7, #10]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	4907      	ldr	r1, [pc, #28]	@ (8008090 <I2C_MasterRequestWrite+0x100>)
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fbca 	bl	800880c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e000      	b.n	8008084 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	00010008 	.word	0x00010008
 8008090:	00010002 	.word	0x00010002

08008094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	817b      	strh	r3, [r7, #10]
 80080a6:	460b      	mov	r3, r1
 80080a8:	813b      	strh	r3, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80080bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fb24 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00d      	beq.n	80080f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080e4:	d103      	bne.n	80080ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e05f      	b.n	80081b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80080f2:	897b      	ldrh	r3, [r7, #10]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	6a3a      	ldr	r2, [r7, #32]
 8008106:	492d      	ldr	r1, [pc, #180]	@ (80081bc <I2C_RequestMemoryWrite+0x128>)
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 fb7f 	bl	800880c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e04c      	b.n	80081b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008118:	2300      	movs	r3, #0
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800812e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008130:	6a39      	ldr	r1, [r7, #32]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fc0a 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	2b04      	cmp	r3, #4
 8008144:	d107      	bne.n	8008156 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e02b      	b.n	80081b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d105      	bne.n	800816c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008160:	893b      	ldrh	r3, [r7, #8]
 8008162:	b2da      	uxtb	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	611a      	str	r2, [r3, #16]
 800816a:	e021      	b.n	80081b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800816c:	893b      	ldrh	r3, [r7, #8]
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	b29b      	uxth	r3, r3
 8008172:	b2da      	uxtb	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800817a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800817c:	6a39      	ldr	r1, [r7, #32]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fbe4 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00d      	beq.n	80081a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818e:	2b04      	cmp	r3, #4
 8008190:	d107      	bne.n	80081a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e005      	b.n	80081b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081a6:	893b      	ldrh	r3, [r7, #8]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3718      	adds	r7, #24
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	00010002 	.word	0x00010002

080081c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	4608      	mov	r0, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	4603      	mov	r3, r0
 80081d0:	817b      	strh	r3, [r7, #10]
 80081d2:	460b      	mov	r3, r1
 80081d4:	813b      	strh	r3, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80081e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80081f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	2200      	movs	r2, #0
 8008202:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fa86 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00d      	beq.n	800822e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800821c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008220:	d103      	bne.n	800822a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008228:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e0aa      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800822e:	897b      	ldrh	r3, [r7, #10]
 8008230:	b2db      	uxtb	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800823c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	6a3a      	ldr	r2, [r7, #32]
 8008242:	4952      	ldr	r1, [pc, #328]	@ (800838c <I2C_RequestMemoryRead+0x1cc>)
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fae1 	bl	800880c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e097      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	617b      	str	r3, [r7, #20]
 8008268:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800826a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800826c:	6a39      	ldr	r1, [r7, #32]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 fb6c 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00d      	beq.n	8008296 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	2b04      	cmp	r3, #4
 8008280:	d107      	bne.n	8008292 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008290:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e076      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d105      	bne.n	80082a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800829c:	893b      	ldrh	r3, [r7, #8]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	611a      	str	r2, [r3, #16]
 80082a6:	e021      	b.n	80082ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082a8:	893b      	ldrh	r3, [r7, #8]
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082b8:	6a39      	ldr	r1, [r7, #32]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fb46 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00d      	beq.n	80082e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d107      	bne.n	80082de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e050      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082e2:	893b      	ldrh	r3, [r7, #8]
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ee:	6a39      	ldr	r1, [r7, #32]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fb2b 	bl	800894c <I2C_WaitOnTXEFlagUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00d      	beq.n	8008318 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008300:	2b04      	cmp	r3, #4
 8008302:	d107      	bne.n	8008314 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008312:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e035      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008326:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2200      	movs	r2, #0
 8008330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f9ef 	bl	8008718 <I2C_WaitOnFlagUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00d      	beq.n	800835c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834e:	d103      	bne.n	8008358 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e013      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800835c:	897b      	ldrh	r3, [r7, #10]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f043 0301 	orr.w	r3, r3, #1
 8008364:	b2da      	uxtb	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	6a3a      	ldr	r2, [r7, #32]
 8008370:	4906      	ldr	r1, [pc, #24]	@ (800838c <I2C_RequestMemoryRead+0x1cc>)
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 fa4a 	bl	800880c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e000      	b.n	8008384 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	00010002 	.word	0x00010002

08008390 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80083c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d0:	2200      	movs	r2, #0
 80083d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e0:	2200      	movs	r2, #0
 80083e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80083e4:	7cfb      	ldrb	r3, [r7, #19]
 80083e6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80083ea:	2b21      	cmp	r3, #33	@ 0x21
 80083ec:	d007      	beq.n	80083fe <I2C_DMAXferCplt+0x6e>
 80083ee:	7cfb      	ldrb	r3, [r7, #19]
 80083f0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80083f4:	2b22      	cmp	r3, #34	@ 0x22
 80083f6:	d131      	bne.n	800845c <I2C_DMAXferCplt+0xcc>
 80083f8:	7cbb      	ldrb	r3, [r7, #18]
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d12e      	bne.n	800845c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800840c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2200      	movs	r2, #0
 8008412:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008414:	7cfb      	ldrb	r3, [r7, #19]
 8008416:	2b29      	cmp	r3, #41	@ 0x29
 8008418:	d10a      	bne.n	8008430 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2221      	movs	r2, #33	@ 0x21
 800841e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2228      	movs	r2, #40	@ 0x28
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008428:	6978      	ldr	r0, [r7, #20]
 800842a:	f7fe fbeb 	bl	8006c04 <HAL_I2C_SlaveTxCpltCallback>
 800842e:	e00c      	b.n	800844a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008430:	7cfb      	ldrb	r3, [r7, #19]
 8008432:	2b2a      	cmp	r3, #42	@ 0x2a
 8008434:	d109      	bne.n	800844a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2222      	movs	r2, #34	@ 0x22
 800843a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2228      	movs	r2, #40	@ 0x28
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008444:	6978      	ldr	r0, [r7, #20]
 8008446:	f7fe fbe7 	bl	8006c18 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008458:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800845a:	e074      	b.n	8008546 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d06e      	beq.n	8008546 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b01      	cmp	r3, #1
 8008470:	d107      	bne.n	8008482 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008480:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008490:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008498:	d009      	beq.n	80084ae <I2C_DMAXferCplt+0x11e>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b08      	cmp	r3, #8
 800849e:	d006      	beq.n	80084ae <I2C_DMAXferCplt+0x11e>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80084a6:	d002      	beq.n	80084ae <I2C_DMAXferCplt+0x11e>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d107      	bne.n	80084be <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084cc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084dc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2200      	movs	r2, #0
 80084e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80084ec:	6978      	ldr	r0, [r7, #20]
 80084ee:	f7fe fbb5 	bl	8006c5c <HAL_I2C_ErrorCallback>
}
 80084f2:	e028      	b.n	8008546 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d10a      	bne.n	800851e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2200      	movs	r2, #0
 8008514:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008516:	6978      	ldr	r0, [r7, #20]
 8008518:	f7fa fd66 	bl	8002fe8 <HAL_I2C_MemRxCpltCallback>
}
 800851c:	e013      	b.n	8008546 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b08      	cmp	r3, #8
 800852a:	d002      	beq.n	8008532 <I2C_DMAXferCplt+0x1a2>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2b20      	cmp	r3, #32
 8008530:	d103      	bne.n	800853a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2200      	movs	r2, #0
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30
 8008538:	e002      	b.n	8008540 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2212      	movs	r2, #18
 800853e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008540:	6978      	ldr	r0, [r7, #20]
 8008542:	f7fe fb55 	bl	8006bf0 <HAL_I2C_MasterRxCpltCallback>
}
 8008546:	bf00      	nop
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008568:	2200      	movs	r2, #0
 800856a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008578:	2200      	movs	r2, #0
 800857a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fc fca1 	bl	8004ec4 <HAL_DMA_GetError>
 8008582:	4603      	mov	r3, r0
 8008584:	2b02      	cmp	r3, #2
 8008586:	d01b      	beq.n	80085c0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008596:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b2:	f043 0210 	orr.w	r2, r3, #16
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7fe fb4e 	bl	8006c5c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80085e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008710 <I2C_DMAAbort+0x148>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	08db      	lsrs	r3, r3, #3
 80085e8:	4a4a      	ldr	r2, [pc, #296]	@ (8008714 <I2C_DMAAbort+0x14c>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	0a1a      	lsrs	r2, r3, #8
 80085f0:	4613      	mov	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	00da      	lsls	r2, r3, #3
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008606:	f043 0220 	orr.w	r2, r3, #32
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800860e:	e00a      	b.n	8008626 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3b01      	subs	r3, #1
 8008614:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008624:	d0ea      	beq.n	80085fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008632:	2200      	movs	r2, #0
 8008634:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008642:	2200      	movs	r2, #0
 8008644:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008654:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2200      	movs	r2, #0
 800865a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008668:	2200      	movs	r2, #0
 800866a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008678:	2200      	movs	r2, #0
 800867a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0201 	bic.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b60      	cmp	r3, #96	@ 0x60
 8008696:	d10e      	bne.n	80086b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	2200      	movs	r2, #0
 80086ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7fe fade 	bl	8006c70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80086b4:	e027      	b.n	8008706 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086b6:	7cfb      	ldrb	r3, [r7, #19]
 80086b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80086bc:	2b28      	cmp	r3, #40	@ 0x28
 80086be:	d117      	bne.n	80086f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2200      	movs	r2, #0
 80086e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2228      	movs	r2, #40	@ 0x28
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80086ee:	e007      	b.n	8008700 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008700:	6978      	ldr	r0, [r7, #20]
 8008702:	f7fe faab 	bl	8006c5c <HAL_I2C_ErrorCallback>
}
 8008706:	bf00      	nop
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000010 	.word	0x20000010
 8008714:	14f8b589 	.word	0x14f8b589

08008718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	4613      	mov	r3, r2
 8008726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008728:	e048      	b.n	80087bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008730:	d044      	beq.n	80087bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008732:	f7fb fa39 	bl	8003ba8 <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	683a      	ldr	r2, [r7, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d302      	bcc.n	8008748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d139      	bne.n	80087bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	0c1b      	lsrs	r3, r3, #16
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b01      	cmp	r3, #1
 8008750:	d10d      	bne.n	800876e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	43da      	mvns	r2, r3
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	4013      	ands	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	bf0c      	ite	eq
 8008764:	2301      	moveq	r3, #1
 8008766:	2300      	movne	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	e00c      	b.n	8008788 <I2C_WaitOnFlagUntilTimeout+0x70>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	43da      	mvns	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4013      	ands	r3, r2
 800877a:	b29b      	uxth	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	461a      	mov	r2, r3
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	429a      	cmp	r2, r3
 800878c:	d116      	bne.n	80087bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	f043 0220 	orr.w	r2, r3, #32
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e023      	b.n	8008804 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	0c1b      	lsrs	r3, r3, #16
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d10d      	bne.n	80087e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	43da      	mvns	r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	e00c      	b.n	80087fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	43da      	mvns	r2, r3
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	4013      	ands	r3, r2
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bf0c      	ite	eq
 80087f4:	2301      	moveq	r3, #1
 80087f6:	2300      	movne	r3, #0
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	461a      	mov	r2, r3
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d093      	beq.n	800872a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800881a:	e071      	b.n	8008900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882a:	d123      	bne.n	8008874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800883a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008844:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2220      	movs	r2, #32
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008860:	f043 0204 	orr.w	r2, r3, #4
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e067      	b.n	8008944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887a:	d041      	beq.n	8008900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887c:	f7fb f994 	bl	8003ba8 <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	429a      	cmp	r2, r3
 800888a:	d302      	bcc.n	8008892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d136      	bne.n	8008900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	0c1b      	lsrs	r3, r3, #16
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b01      	cmp	r3, #1
 800889a:	d10c      	bne.n	80088b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	43da      	mvns	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	e00b      	b.n	80088ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	43da      	mvns	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	4013      	ands	r3, r2
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf14      	ite	ne
 80088c8:	2301      	movne	r3, #1
 80088ca:	2300      	moveq	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e021      	b.n	8008944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	0c1b      	lsrs	r3, r3, #16
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10c      	bne.n	8008924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	43da      	mvns	r2, r3
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4013      	ands	r3, r2
 8008916:	b29b      	uxth	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	bf14      	ite	ne
 800891c:	2301      	movne	r3, #1
 800891e:	2300      	moveq	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	e00b      	b.n	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	43da      	mvns	r2, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	4013      	ands	r3, r2
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	bf14      	ite	ne
 8008936:	2301      	movne	r3, #1
 8008938:	2300      	moveq	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	f47f af6d 	bne.w	800881c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008958:	e034      	b.n	80089c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 f915 	bl	8008b8a <I2C_IsAcknowledgeFailed>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e034      	b.n	80089d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d028      	beq.n	80089c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008972:	f7fb f919 	bl	8003ba8 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	429a      	cmp	r2, r3
 8008980:	d302      	bcc.n	8008988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d11d      	bne.n	80089c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008992:	2b80      	cmp	r3, #128	@ 0x80
 8008994:	d016      	beq.n	80089c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b0:	f043 0220 	orr.w	r2, r3, #32
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e007      	b.n	80089d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ce:	2b80      	cmp	r3, #128	@ 0x80
 80089d0:	d1c3      	bne.n	800895a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089e8:	e034      	b.n	8008a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f8cd 	bl	8008b8a <I2C_IsAcknowledgeFailed>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e034      	b.n	8008a64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a00:	d028      	beq.n	8008a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a02:	f7fb f8d1 	bl	8003ba8 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d302      	bcc.n	8008a18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d11d      	bne.n	8008a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695b      	ldr	r3, [r3, #20]
 8008a1e:	f003 0304 	and.w	r3, r3, #4
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d016      	beq.n	8008a54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a40:	f043 0220 	orr.w	r2, r3, #32
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e007      	b.n	8008a64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d1c3      	bne.n	80089ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a78:	4b13      	ldr	r3, [pc, #76]	@ (8008ac8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	08db      	lsrs	r3, r3, #3
 8008a7e:	4a13      	ldr	r2, [pc, #76]	@ (8008acc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a80:	fba2 2303 	umull	r2, r3, r2, r3
 8008a84:	0a1a      	lsrs	r2, r3, #8
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d107      	bne.n	8008aaa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9e:	f043 0220 	orr.w	r2, r3, #32
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e008      	b.n	8008abc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab8:	d0e9      	beq.n	8008a8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20000010 	.word	0x20000010
 8008acc:	14f8b589 	.word	0x14f8b589

08008ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008adc:	e049      	b.n	8008b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	f003 0310 	and.w	r3, r3, #16
 8008ae8:	2b10      	cmp	r3, #16
 8008aea:	d119      	bne.n	8008b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0210 	mvn.w	r2, #16
 8008af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e030      	b.n	8008b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b20:	f7fb f842 	bl	8003ba8 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d302      	bcc.n	8008b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d11d      	bne.n	8008b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	d016      	beq.n	8008b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e007      	b.n	8008b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7c:	2b40      	cmp	r3, #64	@ 0x40
 8008b7e:	d1ae      	bne.n	8008ade <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ba0:	d11b      	bne.n	8008bda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008baa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc6:	f043 0204 	orr.w	r2, r3, #4
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008bf8:	d103      	bne.n	8008c02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c00:	e007      	b.n	8008c12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c06:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008c0a:	d102      	bne.n	8008c12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2208      	movs	r2, #8
 8008c10:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af02      	add	r7, sp, #8
 8008c24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e101      	b.n	8008e34 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f007 fb70 	bl	8010330 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2203      	movs	r2, #3
 8008c54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c5e:	d102      	bne.n	8008c66 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f003 feeb 	bl	800ca46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	7c1a      	ldrb	r2, [r3, #16]
 8008c78:	f88d 2000 	strb.w	r2, [sp]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c80:	f003 fdca 	bl	800c818 <USB_CoreInit>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e0ce      	b.n	8008e34 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f003 fee3 	bl	800ca68 <USB_SetCurrentMode>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0bf      	b.n	8008e34 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
 8008cb8:	e04a      	b.n	8008d50 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008cba:	7bfa      	ldrb	r2, [r7, #15]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3315      	adds	r3, #21
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008cce:	7bfa      	ldrb	r2, [r7, #15]
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	00db      	lsls	r3, r3, #3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	3314      	adds	r3, #20
 8008cde:	7bfa      	ldrb	r2, [r7, #15]
 8008ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008ce2:	7bfa      	ldrb	r2, [r7, #15]
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	b298      	uxth	r0, r3
 8008ce8:	6879      	ldr	r1, [r7, #4]
 8008cea:	4613      	mov	r3, r2
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	440b      	add	r3, r1
 8008cf4:	332e      	adds	r3, #46	@ 0x2e
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008cfa:	7bfa      	ldrb	r2, [r7, #15]
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	3318      	adds	r3, #24
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d0e:	7bfa      	ldrb	r2, [r7, #15]
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	331c      	adds	r3, #28
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d22:	7bfa      	ldrb	r2, [r7, #15]
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	4413      	add	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	3320      	adds	r3, #32
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	3324      	adds	r3, #36	@ 0x24
 8008d46:	2200      	movs	r2, #0
 8008d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	73fb      	strb	r3, [r7, #15]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	791b      	ldrb	r3, [r3, #4]
 8008d54:	7bfa      	ldrb	r2, [r7, #15]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d3af      	bcc.n	8008cba <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
 8008d5e:	e044      	b.n	8008dea <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d60:	7bfa      	ldrb	r2, [r7, #15]
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008d72:	2200      	movs	r2, #0
 8008d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d76:	7bfa      	ldrb	r2, [r7, #15]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008d88:	7bfa      	ldrb	r2, [r7, #15]
 8008d8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d8c:	7bfa      	ldrb	r2, [r7, #15]
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008d9e:	2200      	movs	r2, #0
 8008da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008da2:	7bfa      	ldrb	r2, [r7, #15]
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008db8:	7bfa      	ldrb	r2, [r7, #15]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008dce:	7bfa      	ldrb	r2, [r7, #15]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	3301      	adds	r3, #1
 8008de8:	73fb      	strb	r3, [r7, #15]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	791b      	ldrb	r3, [r3, #4]
 8008dee:	7bfa      	ldrb	r2, [r7, #15]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d3b5      	bcc.n	8008d60 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7c1a      	ldrb	r2, [r3, #16]
 8008dfc:	f88d 2000 	strb.w	r2, [sp]
 8008e00:	3304      	adds	r3, #4
 8008e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e04:	f003 fe7c 	bl	800cb00 <USB_DevInit>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d005      	beq.n	8008e1a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e00c      	b.n	8008e34 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f004 fec6 	bl	800dbbe <USB_DevDisconnect>

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_PCD_Start+0x1c>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e022      	b.n	8008e9e <HAL_PCD_Start+0x62>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d009      	beq.n	8008e80 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d105      	bne.n	8008e80 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f003 fdcd 	bl	800ca24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f004 fe74 	bl	800db7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008ea6:	b590      	push	{r4, r7, lr}
 8008ea8:	b08d      	sub	sp, #52	@ 0x34
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f004 ff32 	bl	800dd26 <USB_GetMode>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 848c 	bne.w	80097e2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f004 fe96 	bl	800dc00 <USB_ReadInterrupts>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8482 	beq.w	80097e0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	0a1b      	lsrs	r3, r3, #8
 8008ee6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f004 fe83 	bl	800dc00 <USB_ReadInterrupts>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d107      	bne.n	8008f14 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695a      	ldr	r2, [r3, #20]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f002 0202 	and.w	r2, r2, #2
 8008f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f004 fe71 	bl	800dc00 <USB_ReadInterrupts>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d161      	bne.n	8008fec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0210 	bic.w	r2, r2, #16
 8008f36:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	f003 020f 	and.w	r2, r3, #15
 8008f44:	4613      	mov	r3, r2
 8008f46:	00db      	lsls	r3, r3, #3
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	3304      	adds	r3, #4
 8008f56:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f62:	d124      	bne.n	8008fae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d035      	beq.n	8008fdc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	091b      	lsrs	r3, r3, #4
 8008f78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	461a      	mov	r2, r3
 8008f82:	6a38      	ldr	r0, [r7, #32]
 8008f84:	f004 fca8 	bl	800d8d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f94:	441a      	add	r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	091b      	lsrs	r3, r3, #4
 8008fa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fa6:	441a      	add	r2, r3
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	615a      	str	r2, [r3, #20]
 8008fac:	e016      	b.n	8008fdc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008fb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008fb8:	d110      	bne.n	8008fdc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6a38      	ldr	r0, [r7, #32]
 8008fc6:	f004 fc87 	bl	800d8d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fd6:	441a      	add	r2, r3
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0210 	orr.w	r2, r2, #16
 8008fea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f004 fe05 	bl	800dc00 <USB_ReadInterrupts>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ffc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009000:	f040 80a7 	bne.w	8009152 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f004 fe0a 	bl	800dc26 <USB_ReadDevAllOutEpInterrupt>
 8009012:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8009014:	e099      	b.n	800914a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 808e 	beq.w	800913e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	4611      	mov	r1, r2
 800902c:	4618      	mov	r0, r3
 800902e:	f004 fe2e 	bl	800dc8e <USB_ReadDevOutEPInterrupt>
 8009032:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00c      	beq.n	8009058 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800903e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800904a:	461a      	mov	r2, r3
 800904c:	2301      	movs	r3, #1
 800904e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fea4 	bl	8009da0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800906e:	461a      	mov	r2, r3
 8009070:	2308      	movs	r3, #8
 8009072:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 ff7a 	bl	8009f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	2b00      	cmp	r3, #0
 8009084:	d008      	beq.n	8009098 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009092:	461a      	mov	r2, r3
 8009094:	2310      	movs	r3, #16
 8009096:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d030      	beq.n	8009104 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090aa:	2b80      	cmp	r3, #128	@ 0x80
 80090ac:	d109      	bne.n	80090c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80090c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80090c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c4:	4613      	mov	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	3304      	adds	r3, #4
 80090d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	78db      	ldrb	r3, [r3, #3]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d108      	bne.n	80090f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2200      	movs	r2, #0
 80090e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f007 fa1b 	bl	8010528 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fe:	461a      	mov	r2, r3
 8009100:	2302      	movs	r3, #2
 8009102:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d008      	beq.n	8009120 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911a:	461a      	mov	r2, r3
 800911c:	2320      	movs	r3, #32
 800911e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009136:	461a      	mov	r2, r3
 8009138:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800913c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	3301      	adds	r3, #1
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009146:	085b      	lsrs	r3, r3, #1
 8009148:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800914a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	f47f af62 	bne.w	8009016 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4618      	mov	r0, r3
 8009158:	f004 fd52 	bl	800dc00 <USB_ReadInterrupts>
 800915c:	4603      	mov	r3, r0
 800915e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009162:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009166:	f040 80db 	bne.w	8009320 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4618      	mov	r0, r3
 8009170:	f004 fd73 	bl	800dc5a <USB_ReadDevAllInEpInterrupt>
 8009174:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800917a:	e0cd      	b.n	8009318 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80c2 	beq.w	800930c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	4611      	mov	r1, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f004 fd99 	bl	800dcca <USB_ReadDevInEPInterrupt>
 8009198:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d057      	beq.n	8009254 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	2201      	movs	r2, #1
 80091ac:	fa02 f303 	lsl.w	r3, r2, r3
 80091b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	43db      	mvns	r3, r3
 80091be:	69f9      	ldr	r1, [r7, #28]
 80091c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091c4:	4013      	ands	r3, r2
 80091c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80091c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	461a      	mov	r2, r3
 80091d6:	2301      	movs	r3, #1
 80091d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	799b      	ldrb	r3, [r3, #6]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d132      	bne.n	8009248 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e6:	4613      	mov	r3, r2
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	3320      	adds	r3, #32
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4403      	add	r3, r0
 8009202:	331c      	adds	r3, #28
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4419      	add	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800920c:	4613      	mov	r3, r2
 800920e:	00db      	lsls	r3, r3, #3
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4403      	add	r3, r0
 8009216:	3320      	adds	r3, #32
 8009218:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	d113      	bne.n	8009248 <HAL_PCD_IRQHandler+0x3a2>
 8009220:	6879      	ldr	r1, [r7, #4]
 8009222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009224:	4613      	mov	r3, r2
 8009226:	00db      	lsls	r3, r3, #3
 8009228:	4413      	add	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	3324      	adds	r3, #36	@ 0x24
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d108      	bne.n	8009248 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009240:	461a      	mov	r2, r3
 8009242:	2101      	movs	r1, #1
 8009244:	f004 fda0 	bl	800dd88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f007 f8ef 	bl	8010432 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f003 0308 	and.w	r3, r3, #8
 800925a:	2b00      	cmp	r3, #0
 800925c:	d008      	beq.n	8009270 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	015a      	lsls	r2, r3, #5
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	4413      	add	r3, r2
 8009266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926a:	461a      	mov	r2, r3
 800926c:	2308      	movs	r3, #8
 800926e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009286:	461a      	mov	r2, r3
 8009288:	2310      	movs	r3, #16
 800928a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009292:	2b00      	cmp	r3, #0
 8009294:	d008      	beq.n	80092a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a2:	461a      	mov	r2, r3
 80092a4:	2340      	movs	r3, #64	@ 0x40
 80092a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d023      	beq.n	80092fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80092b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092b4:	6a38      	ldr	r0, [r7, #32]
 80092b6:	f003 fd87 	bl	800cdc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80092ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092bc:	4613      	mov	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	3310      	adds	r3, #16
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4413      	add	r3, r2
 80092ca:	3304      	adds	r3, #4
 80092cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	78db      	ldrb	r3, [r3, #3]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d108      	bne.n	80092e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2200      	movs	r2, #0
 80092da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	4619      	mov	r1, r3
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f007 f932 	bl	801054c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80092e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f4:	461a      	mov	r2, r3
 80092f6:	2302      	movs	r3, #2
 80092f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009304:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fcbd 	bl	8009c86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930e:	3301      	adds	r3, #1
 8009310:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009314:	085b      	lsrs	r3, r3, #1
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	f47f af2e 	bne.w	800917c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4618      	mov	r0, r3
 8009326:	f004 fc6b 	bl	800dc00 <USB_ReadInterrupts>
 800932a:	4603      	mov	r3, r0
 800932c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009334:	d122      	bne.n	800937c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	69fa      	ldr	r2, [r7, #28]
 8009340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009344:	f023 0301 	bic.w	r3, r3, #1
 8009348:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009350:	2b01      	cmp	r3, #1
 8009352:	d108      	bne.n	8009366 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800935c:	2100      	movs	r1, #0
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fea4 	bl	800a0ac <HAL_PCDEx_LPM_Callback>
 8009364:	e002      	b.n	800936c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f007 f8d0 	bl	801050c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695a      	ldr	r2, [r3, #20]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800937a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f004 fc3d 	bl	800dc00 <USB_ReadInterrupts>
 8009386:	4603      	mov	r3, r0
 8009388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800938c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009390:	d112      	bne.n	80093b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d102      	bne.n	80093a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f007 f88c 	bl	80104c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695a      	ldr	r2, [r3, #20]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80093b6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	f004 fc1f 	bl	800dc00 <USB_ReadInterrupts>
 80093c2:	4603      	mov	r3, r0
 80093c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80093c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093cc:	f040 80b7 	bne.w	800953e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	69fa      	ldr	r2, [r7, #28]
 80093da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093de:	f023 0301 	bic.w	r3, r3, #1
 80093e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2110      	movs	r1, #16
 80093ea:	4618      	mov	r0, r3
 80093ec:	f003 fcec 	bl	800cdc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093f0:	2300      	movs	r3, #0
 80093f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093f4:	e046      	b.n	8009484 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80093f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009402:	461a      	mov	r2, r3
 8009404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009408:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800940a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940c:	015a      	lsls	r2, r3, #5
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	4413      	add	r3, r2
 8009412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800942a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	4413      	add	r3, r2
 8009432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009436:	461a      	mov	r2, r3
 8009438:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800943c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800943e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800944e:	0151      	lsls	r1, r2, #5
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	440a      	add	r2, r1
 8009454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800945c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800945e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800946e:	0151      	lsls	r1, r2, #5
 8009470:	69fa      	ldr	r2, [r7, #28]
 8009472:	440a      	add	r2, r1
 8009474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009478:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800947c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800947e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009480:	3301      	adds	r3, #1
 8009482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	791b      	ldrb	r3, [r3, #4]
 8009488:	461a      	mov	r2, r3
 800948a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948c:	4293      	cmp	r3, r2
 800948e:	d3b2      	bcc.n	80093f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	69fa      	ldr	r2, [r7, #28]
 800949a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800949e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80094a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7bdb      	ldrb	r3, [r3, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d016      	beq.n	80094da <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094bc:	f043 030b 	orr.w	r3, r3, #11
 80094c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094d2:	f043 030b 	orr.w	r3, r3, #11
 80094d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80094d8:	e015      	b.n	8009506 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80094ec:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80094f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009500:	f043 030b 	orr.w	r3, r3, #11
 8009504:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009514:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009518:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009528:	461a      	mov	r2, r3
 800952a:	f004 fc2d 	bl	800dd88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695a      	ldr	r2, [r3, #20]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800953c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4618      	mov	r0, r3
 8009544:	f004 fb5c 	bl	800dc00 <USB_ReadInterrupts>
 8009548:	4603      	mov	r3, r0
 800954a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800954e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009552:	d123      	bne.n	800959c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4618      	mov	r0, r3
 800955a:	f004 fbf2 	bl	800dd42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f003 fca9 	bl	800ceba <USB_GetDevSpeed>
 8009568:	4603      	mov	r3, r0
 800956a:	461a      	mov	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681c      	ldr	r4, [r3, #0]
 8009574:	f001 f9d6 	bl	800a924 <HAL_RCC_GetHCLKFreq>
 8009578:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800957e:	461a      	mov	r2, r3
 8009580:	4620      	mov	r0, r4
 8009582:	f003 f9ad 	bl	800c8e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f006 ff7b 	bl	8010482 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695a      	ldr	r2, [r3, #20]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800959a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f004 fb2d 	bl	800dc00 <USB_ReadInterrupts>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d10a      	bne.n	80095c6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f006 ff58 	bl	8010466 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695a      	ldr	r2, [r3, #20]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f002 0208 	and.w	r2, r2, #8
 80095c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f004 fb18 	bl	800dc00 <USB_ReadInterrupts>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d6:	2b80      	cmp	r3, #128	@ 0x80
 80095d8:	d123      	bne.n	8009622 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80095e6:	2301      	movs	r3, #1
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80095ea:	e014      	b.n	8009616 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f0:	4613      	mov	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d105      	bne.n	8009610 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009606:	b2db      	uxtb	r3, r3
 8009608:	4619      	mov	r1, r3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fb0a 	bl	8009c24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009612:	3301      	adds	r3, #1
 8009614:	627b      	str	r3, [r7, #36]	@ 0x24
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	461a      	mov	r2, r3
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	4293      	cmp	r3, r2
 8009620:	d3e4      	bcc.n	80095ec <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f004 faea 	bl	800dc00 <USB_ReadInterrupts>
 800962c:	4603      	mov	r3, r0
 800962e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009636:	d13c      	bne.n	80096b2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009638:	2301      	movs	r3, #1
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
 800963c:	e02b      	b.n	8009696 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800964e:	6879      	ldr	r1, [r7, #4]
 8009650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009652:	4613      	mov	r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	440b      	add	r3, r1
 800965c:	3318      	adds	r3, #24
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d115      	bne.n	8009690 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009664:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009666:	2b00      	cmp	r3, #0
 8009668:	da12      	bge.n	8009690 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800966e:	4613      	mov	r3, r2
 8009670:	00db      	lsls	r3, r3, #3
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	3317      	adds	r3, #23
 800967a:	2201      	movs	r2, #1
 800967c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	b2db      	uxtb	r3, r3
 8009682:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009686:	b2db      	uxtb	r3, r3
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 faca 	bl	8009c24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	3301      	adds	r3, #1
 8009694:	627b      	str	r3, [r7, #36]	@ 0x24
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	791b      	ldrb	r3, [r3, #4]
 800969a:	461a      	mov	r2, r3
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	4293      	cmp	r3, r2
 80096a0:	d3cd      	bcc.n	800963e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	695a      	ldr	r2, [r3, #20]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80096b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f004 faa2 	bl	800dc00 <USB_ReadInterrupts>
 80096bc:	4603      	mov	r3, r0
 80096be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096c6:	d156      	bne.n	8009776 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096c8:	2301      	movs	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80096cc:	e045      	b.n	800975a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	015a      	lsls	r2, r3, #5
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	4413      	add	r3, r2
 80096d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e2:	4613      	mov	r3, r2
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d12e      	bne.n	8009754 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80096f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	da2b      	bge.n	8009754 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009708:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800970c:	429a      	cmp	r2, r3
 800970e:	d121      	bne.n	8009754 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009710:	6879      	ldr	r1, [r7, #4]
 8009712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009714:	4613      	mov	r3, r2
 8009716:	00db      	lsls	r3, r3, #3
 8009718:	4413      	add	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	440b      	add	r3, r1
 800971e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009722:	2201      	movs	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	695b      	ldr	r3, [r3, #20]
 8009736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800974c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009750:	6053      	str	r3, [r2, #4]
            break;
 8009752:	e008      	b.n	8009766 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	3301      	adds	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	791b      	ldrb	r3, [r3, #4]
 800975e:	461a      	mov	r2, r3
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	4293      	cmp	r3, r2
 8009764:	d3b3      	bcc.n	80096ce <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	695a      	ldr	r2, [r3, #20]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4618      	mov	r0, r3
 800977c:	f004 fa40 	bl	800dc00 <USB_ReadInterrupts>
 8009780:	4603      	mov	r3, r0
 8009782:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978a:	d10a      	bne.n	80097a2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f006 feef 	bl	8010570 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695a      	ldr	r2, [r3, #20]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80097a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f004 fa2a 	bl	800dc00 <USB_ReadInterrupts>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d115      	bne.n	80097e2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d002      	beq.n	80097ce <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f006 fedf 	bl	801058c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6859      	ldr	r1, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	430a      	orrs	r2, r1
 80097dc:	605a      	str	r2, [r3, #4]
 80097de:	e000      	b.n	80097e2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80097e0:	bf00      	nop
    }
  }
}
 80097e2:	3734      	adds	r7, #52	@ 0x34
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd90      	pop	{r4, r7, pc}

080097e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d101      	bne.n	8009802 <HAL_PCD_SetAddress+0x1a>
 80097fe:	2302      	movs	r3, #2
 8009800:	e012      	b.n	8009828 <HAL_PCD_SetAddress+0x40>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	4611      	mov	r1, r2
 8009818:	4618      	mov	r0, r3
 800981a:	f004 f989 	bl	800db30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	461a      	mov	r2, r3
 800983e:	4603      	mov	r3, r0
 8009840:	70fb      	strb	r3, [r7, #3]
 8009842:	460b      	mov	r3, r1
 8009844:	803b      	strh	r3, [r7, #0]
 8009846:	4613      	mov	r3, r2
 8009848:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800984e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009852:	2b00      	cmp	r3, #0
 8009854:	da0f      	bge.n	8009876 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	f003 020f 	and.w	r2, r3, #15
 800985c:	4613      	mov	r3, r2
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	4413      	add	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	3310      	adds	r3, #16
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	3304      	adds	r3, #4
 800986c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	705a      	strb	r2, [r3, #1]
 8009874:	e00f      	b.n	8009896 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	f003 020f 	and.w	r2, r3, #15
 800987c:	4613      	mov	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	4413      	add	r3, r2
 800988c:	3304      	adds	r3, #4
 800988e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80098a2:	883b      	ldrh	r3, [r7, #0]
 80098a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	78ba      	ldrb	r2, [r7, #2]
 80098b0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	785b      	ldrb	r3, [r3, #1]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80098c4:	78bb      	ldrb	r3, [r7, #2]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d102      	bne.n	80098d0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_PCD_EP_Open+0xae>
 80098da:	2302      	movs	r3, #2
 80098dc:	e00e      	b.n	80098fc <HAL_PCD_EP_Open+0xcc>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68f9      	ldr	r1, [r7, #12]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f003 fb09 	bl	800cf04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80098fa:	7afb      	ldrb	r3, [r7, #11]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009914:	2b00      	cmp	r3, #0
 8009916:	da0f      	bge.n	8009938 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009918:	78fb      	ldrb	r3, [r7, #3]
 800991a:	f003 020f 	and.w	r2, r3, #15
 800991e:	4613      	mov	r3, r2
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	3310      	adds	r3, #16
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	4413      	add	r3, r2
 800992c:	3304      	adds	r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2201      	movs	r2, #1
 8009934:	705a      	strb	r2, [r3, #1]
 8009936:	e00f      	b.n	8009958 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	4613      	mov	r3, r2
 8009940:	00db      	lsls	r3, r3, #3
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	3304      	adds	r3, #4
 8009950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009958:	78fb      	ldrb	r3, [r7, #3]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	b2da      	uxtb	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800996a:	2b01      	cmp	r3, #1
 800996c:	d101      	bne.n	8009972 <HAL_PCD_EP_Close+0x6e>
 800996e:	2302      	movs	r3, #2
 8009970:	e00e      	b.n	8009990 <HAL_PCD_EP_Close+0x8c>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68f9      	ldr	r1, [r7, #12]
 8009980:	4618      	mov	r0, r3
 8009982:	f003 fb47 	bl	800d014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	603b      	str	r3, [r7, #0]
 80099a4:	460b      	mov	r3, r1
 80099a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	f003 020f 	and.w	r2, r3, #15
 80099ae:	4613      	mov	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	3304      	adds	r3, #4
 80099c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2200      	movs	r2, #0
 80099d2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2200      	movs	r2, #0
 80099d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	f003 030f 	and.w	r3, r3, #15
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	799b      	ldrb	r3, [r3, #6]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d102      	bne.n	80099f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	799b      	ldrb	r3, [r3, #6]
 80099fc:	461a      	mov	r2, r3
 80099fe:	6979      	ldr	r1, [r7, #20]
 8009a00:	f003 fbe4 	bl	800d1cc <USB_EPStartXfer>

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b083      	sub	sp, #12
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	460b      	mov	r3, r1
 8009a18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a1a:	78fb      	ldrb	r3, [r7, #3]
 8009a1c:	f003 020f 	and.w	r2, r3, #15
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	4613      	mov	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009a30:	681b      	ldr	r3, [r3, #0]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	f003 020f 	and.w	r2, r3, #15
 8009a54:	4613      	mov	r3, r2
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	3310      	adds	r3, #16
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	4413      	add	r3, r2
 8009a62:	3304      	adds	r3, #4
 8009a64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2200      	movs	r2, #0
 8009a76:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	799b      	ldrb	r3, [r3, #6]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d102      	bne.n	8009a98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	799b      	ldrb	r3, [r3, #6]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	6979      	ldr	r1, [r7, #20]
 8009aa4:	f003 fb92 	bl	800d1cc <USB_EPStartXfer>

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	f003 030f 	and.w	r3, r3, #15
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	7912      	ldrb	r2, [r2, #4]
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d901      	bls.n	8009ad0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e04f      	b.n	8009b70 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	da0f      	bge.n	8009af8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	f003 020f 	and.w	r2, r3, #15
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	3310      	adds	r3, #16
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	4413      	add	r3, r2
 8009aec:	3304      	adds	r3, #4
 8009aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2201      	movs	r2, #1
 8009af4:	705a      	strb	r2, [r3, #1]
 8009af6:	e00d      	b.n	8009b14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	4613      	mov	r3, r2
 8009afc:	00db      	lsls	r3, r3, #3
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	4413      	add	r3, r2
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2201      	movs	r2, #1
 8009b18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b1a:	78fb      	ldrb	r3, [r7, #3]
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_PCD_EP_SetStall+0x82>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e01d      	b.n	8009b70 <HAL_PCD_EP_SetStall+0xbe>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68f9      	ldr	r1, [r7, #12]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f003 ff20 	bl	800d988 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6818      	ldr	r0, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7999      	ldrb	r1, [r3, #6]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009b60:	461a      	mov	r2, r3
 8009b62:	f004 f911 	bl	800dd88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	f003 030f 	and.w	r3, r3, #15
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	7912      	ldrb	r2, [r2, #4]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d901      	bls.n	8009b96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e042      	b.n	8009c1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	da0f      	bge.n	8009bbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b9e:	78fb      	ldrb	r3, [r7, #3]
 8009ba0:	f003 020f 	and.w	r2, r3, #15
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	00db      	lsls	r3, r3, #3
 8009ba8:	4413      	add	r3, r2
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	3310      	adds	r3, #16
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	705a      	strb	r2, [r3, #1]
 8009bbc:	e00f      	b.n	8009bde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bbe:	78fb      	ldrb	r3, [r7, #3]
 8009bc0:	f003 020f 	and.w	r2, r3, #15
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	f003 030f 	and.w	r3, r3, #15
 8009bea:	b2da      	uxtb	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d101      	bne.n	8009bfe <HAL_PCD_EP_ClrStall+0x86>
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e00e      	b.n	8009c1c <HAL_PCD_EP_ClrStall+0xa4>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f003 ff29 	bl	800da64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da0c      	bge.n	8009c52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	f003 020f 	and.w	r2, r3, #15
 8009c3e:	4613      	mov	r3, r2
 8009c40:	00db      	lsls	r3, r3, #3
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	3310      	adds	r3, #16
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e00c      	b.n	8009c6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	f003 020f 	and.w	r2, r3, #15
 8009c58:	4613      	mov	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	4413      	add	r3, r2
 8009c68:	3304      	adds	r3, #4
 8009c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68f9      	ldr	r1, [r7, #12]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f003 fd48 	bl	800d708 <USB_EPStopXfer>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b08a      	sub	sp, #40	@ 0x28
 8009c8a:	af02      	add	r7, sp, #8
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	3310      	adds	r3, #16
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	3304      	adds	r3, #4
 8009cac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	695a      	ldr	r2, [r3, #20]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d901      	bls.n	8009cbe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e06b      	b.n	8009d96 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	691a      	ldr	r2, [r3, #16]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d902      	bls.n	8009cda <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	3303      	adds	r3, #3
 8009cde:	089b      	lsrs	r3, r3, #2
 8009ce0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009ce2:	e02a      	b.n	8009d3a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	69fa      	ldr	r2, [r7, #28]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d902      	bls.n	8009d00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	3303      	adds	r3, #3
 8009d04:	089b      	lsrs	r3, r3, #2
 8009d06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	68d9      	ldr	r1, [r3, #12]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6978      	ldr	r0, [r7, #20]
 8009d1e:	f003 fd9d 	bl	800d85c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	68da      	ldr	r2, [r3, #12]
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	441a      	add	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	695a      	ldr	r2, [r3, #20]
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	441a      	add	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d4a:	69ba      	ldr	r2, [r7, #24]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d809      	bhi.n	8009d64 <PCD_WriteEmptyTxFifo+0xde>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	695a      	ldr	r2, [r3, #20]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d203      	bcs.n	8009d64 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1bf      	bne.n	8009ce4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d811      	bhi.n	8009d94 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	2201      	movs	r2, #1
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	6939      	ldr	r1, [r7, #16]
 8009d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d90:	4013      	ands	r3, r2
 8009d92:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	333c      	adds	r3, #60	@ 0x3c
 8009db8:	3304      	adds	r3, #4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	799b      	ldrb	r3, [r3, #6]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d17b      	bne.n	8009ece <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d015      	beq.n	8009e0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	4a61      	ldr	r2, [pc, #388]	@ (8009f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	f240 80b9 	bls.w	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 80b3 	beq.w	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e02:	461a      	mov	r2, r3
 8009e04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e08:	6093      	str	r3, [r2, #8]
 8009e0a:	e0a7      	b.n	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e22:	461a      	mov	r2, r3
 8009e24:	2320      	movs	r3, #32
 8009e26:	6093      	str	r3, [r2, #8]
 8009e28:	e098      	b.n	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 8093 	bne.w	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	4a4b      	ldr	r2, [pc, #300]	@ (8009f68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d90f      	bls.n	8009e5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e54:	461a      	mov	r2, r3
 8009e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e5a:	6093      	str	r3, [r2, #8]
 8009e5c:	e07e      	b.n	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	4613      	mov	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	4413      	add	r3, r2
 8009e70:	3304      	adds	r3, #4
 8009e72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a1a      	ldr	r2, [r3, #32]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	0159      	lsls	r1, r3, #5
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	440b      	add	r3, r1
 8009e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e8a:	1ad2      	subs	r2, r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d114      	bne.n	8009ec0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d109      	bne.n	8009eb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6818      	ldr	r0, [r3, #0]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2101      	movs	r1, #1
 8009eac:	f003 ff6c 	bl	800dd88 <USB_EP0_OutStart>
 8009eb0:	e006      	b.n	8009ec0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	441a      	add	r2, r3
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f006 fa98 	bl	80103fc <HAL_PCD_DataOutStageCallback>
 8009ecc:	e046      	b.n	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	4a26      	ldr	r2, [pc, #152]	@ (8009f6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d124      	bne.n	8009f20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eec:	461a      	mov	r2, r3
 8009eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ef2:	6093      	str	r3, [r2, #8]
 8009ef4:	e032      	b.n	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	2320      	movs	r3, #32
 8009f10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f006 fa6f 	bl	80103fc <HAL_PCD_DataOutStageCallback>
 8009f1e:	e01d      	b.n	8009f5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d114      	bne.n	8009f50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4413      	add	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	440b      	add	r3, r1
 8009f34:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d108      	bne.n	8009f50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	f003 ff1c 	bl	800dd88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f006 fa50 	bl	80103fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	4f54300a 	.word	0x4f54300a
 8009f6c:	4f54310a 	.word	0x4f54310a

08009f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	333c      	adds	r3, #60	@ 0x3c
 8009f88:	3304      	adds	r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4a15      	ldr	r2, [pc, #84]	@ (8009ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d90e      	bls.n	8009fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f006 fa07 	bl	80103d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8009ff8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d90c      	bls.n	8009fec <PCD_EP_OutSetupPacket_int+0x7c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	799b      	ldrb	r3, [r3, #6]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d108      	bne.n	8009fec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	f003 fece 	bl	800dd88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	4f54300a 	.word	0x4f54300a

08009ffc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
 800a008:	4613      	mov	r3, r2
 800a00a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a012:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a014:	78fb      	ldrb	r3, [r7, #3]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d107      	bne.n	800a02a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a01a:	883b      	ldrh	r3, [r7, #0]
 800a01c:	0419      	lsls	r1, r3, #16
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68ba      	ldr	r2, [r7, #8]
 800a024:	430a      	orrs	r2, r1
 800a026:	629a      	str	r2, [r3, #40]	@ 0x28
 800a028:	e028      	b.n	800a07c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a030:	0c1b      	lsrs	r3, r3, #16
 800a032:	68ba      	ldr	r2, [r7, #8]
 800a034:	4413      	add	r3, r2
 800a036:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
 800a03c:	e00d      	b.n	800a05a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	3340      	adds	r3, #64	@ 0x40
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	0c1b      	lsrs	r3, r3, #16
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	4413      	add	r3, r2
 800a052:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a054:	7bfb      	ldrb	r3, [r7, #15]
 800a056:	3301      	adds	r3, #1
 800a058:	73fb      	strb	r3, [r7, #15]
 800a05a:	7bfa      	ldrb	r2, [r7, #15]
 800a05c:	78fb      	ldrb	r3, [r7, #3]
 800a05e:	3b01      	subs	r3, #1
 800a060:	429a      	cmp	r2, r3
 800a062:	d3ec      	bcc.n	800a03e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a064:	883b      	ldrh	r3, [r7, #0]
 800a066:	0418      	lsls	r0, r3, #16
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6819      	ldr	r1, [r3, #0]
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	3b01      	subs	r3, #1
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	4302      	orrs	r2, r0
 800a074:	3340      	adds	r3, #64	@ 0x40
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	460b      	mov	r3, r1
 800a094:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	887a      	ldrh	r2, [r7, #2]
 800a09c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e267      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d075      	beq.n	800a1ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0e2:	4b88      	ldr	r3, [pc, #544]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	f003 030c 	and.w	r3, r3, #12
 800a0ea:	2b04      	cmp	r3, #4
 800a0ec:	d00c      	beq.n	800a108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0ee:	4b85      	ldr	r3, [pc, #532]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a0f6:	2b08      	cmp	r3, #8
 800a0f8:	d112      	bne.n	800a120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0fa:	4b82      	ldr	r3, [pc, #520]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a106:	d10b      	bne.n	800a120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a108:	4b7e      	ldr	r3, [pc, #504]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d05b      	beq.n	800a1cc <HAL_RCC_OscConfig+0x108>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d157      	bne.n	800a1cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e242      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a128:	d106      	bne.n	800a138 <HAL_RCC_OscConfig+0x74>
 800a12a:	4b76      	ldr	r3, [pc, #472]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a75      	ldr	r2, [pc, #468]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	e01d      	b.n	800a174 <HAL_RCC_OscConfig+0xb0>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a140:	d10c      	bne.n	800a15c <HAL_RCC_OscConfig+0x98>
 800a142:	4b70      	ldr	r3, [pc, #448]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a6f      	ldr	r2, [pc, #444]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	4b6d      	ldr	r3, [pc, #436]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a6c      	ldr	r2, [pc, #432]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	e00b      	b.n	800a174 <HAL_RCC_OscConfig+0xb0>
 800a15c:	4b69      	ldr	r3, [pc, #420]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a68      	ldr	r2, [pc, #416]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	4b66      	ldr	r3, [pc, #408]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a65      	ldr	r2, [pc, #404]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a16e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d013      	beq.n	800a1a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a17c:	f7f9 fd14 	bl	8003ba8 <HAL_GetTick>
 800a180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a182:	e008      	b.n	800a196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a184:	f7f9 fd10 	bl	8003ba8 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b64      	cmp	r3, #100	@ 0x64
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e207      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a196:	4b5b      	ldr	r3, [pc, #364]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f0      	beq.n	800a184 <HAL_RCC_OscConfig+0xc0>
 800a1a2:	e014      	b.n	800a1ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1a4:	f7f9 fd00 	bl	8003ba8 <HAL_GetTick>
 800a1a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1aa:	e008      	b.n	800a1be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1ac:	f7f9 fcfc 	bl	8003ba8 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b64      	cmp	r3, #100	@ 0x64
 800a1b8:	d901      	bls.n	800a1be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	e1f3      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1be:	4b51      	ldr	r3, [pc, #324]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1f0      	bne.n	800a1ac <HAL_RCC_OscConfig+0xe8>
 800a1ca:	e000      	b.n	800a1ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0302 	and.w	r3, r3, #2
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d063      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1da:	4b4a      	ldr	r3, [pc, #296]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00b      	beq.n	800a1fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1e6:	4b47      	ldr	r3, [pc, #284]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	d11c      	bne.n	800a22c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1f2:	4b44      	ldr	r3, [pc, #272]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d116      	bne.n	800a22c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1fe:	4b41      	ldr	r3, [pc, #260]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <HAL_RCC_OscConfig+0x152>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d001      	beq.n	800a216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e1c7      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a216:	4b3b      	ldr	r3, [pc, #236]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4937      	ldr	r1, [pc, #220]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a226:	4313      	orrs	r3, r2
 800a228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a22a:	e03a      	b.n	800a2a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d020      	beq.n	800a276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a234:	4b34      	ldr	r3, [pc, #208]	@ (800a308 <HAL_RCC_OscConfig+0x244>)
 800a236:	2201      	movs	r2, #1
 800a238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a23a:	f7f9 fcb5 	bl	8003ba8 <HAL_GetTick>
 800a23e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a240:	e008      	b.n	800a254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a242:	f7f9 fcb1 	bl	8003ba8 <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d901      	bls.n	800a254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e1a8      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a254:	4b2b      	ldr	r3, [pc, #172]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f003 0302 	and.w	r3, r3, #2
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0f0      	beq.n	800a242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a260:	4b28      	ldr	r3, [pc, #160]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	4925      	ldr	r1, [pc, #148]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a270:	4313      	orrs	r3, r2
 800a272:	600b      	str	r3, [r1, #0]
 800a274:	e015      	b.n	800a2a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a276:	4b24      	ldr	r3, [pc, #144]	@ (800a308 <HAL_RCC_OscConfig+0x244>)
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7f9 fc94 	bl	8003ba8 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a284:	f7f9 fc90 	bl	8003ba8 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e187      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a296:	4b1b      	ldr	r3, [pc, #108]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d036      	beq.n	800a31c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d016      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2b6:	4b15      	ldr	r3, [pc, #84]	@ (800a30c <HAL_RCC_OscConfig+0x248>)
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2bc:	f7f9 fc74 	bl	8003ba8 <HAL_GetTick>
 800a2c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2c4:	f7f9 fc70 	bl	8003ba8 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d901      	bls.n	800a2d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e167      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a304 <HAL_RCC_OscConfig+0x240>)
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0f0      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x200>
 800a2e2:	e01b      	b.n	800a31c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2e4:	4b09      	ldr	r3, [pc, #36]	@ (800a30c <HAL_RCC_OscConfig+0x248>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2ea:	f7f9 fc5d 	bl	8003ba8 <HAL_GetTick>
 800a2ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2f0:	e00e      	b.n	800a310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2f2:	f7f9 fc59 	bl	8003ba8 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d907      	bls.n	800a310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e150      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
 800a304:	40023800 	.word	0x40023800
 800a308:	42470000 	.word	0x42470000
 800a30c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a310:	4b88      	ldr	r3, [pc, #544]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1ea      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8097 	beq.w	800a458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a32a:	2300      	movs	r3, #0
 800a32c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a32e:	4b81      	ldr	r3, [pc, #516]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10f      	bne.n	800a35a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a33a:	2300      	movs	r3, #0
 800a33c:	60bb      	str	r3, [r7, #8]
 800a33e:	4b7d      	ldr	r3, [pc, #500]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a342:	4a7c      	ldr	r2, [pc, #496]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a348:	6413      	str	r3, [r2, #64]	@ 0x40
 800a34a:	4b7a      	ldr	r3, [pc, #488]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a34e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a352:	60bb      	str	r3, [r7, #8]
 800a354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a356:	2301      	movs	r3, #1
 800a358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a35a:	4b77      	ldr	r3, [pc, #476]	@ (800a538 <HAL_RCC_OscConfig+0x474>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a362:	2b00      	cmp	r3, #0
 800a364:	d118      	bne.n	800a398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a366:	4b74      	ldr	r3, [pc, #464]	@ (800a538 <HAL_RCC_OscConfig+0x474>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a73      	ldr	r2, [pc, #460]	@ (800a538 <HAL_RCC_OscConfig+0x474>)
 800a36c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a372:	f7f9 fc19 	bl	8003ba8 <HAL_GetTick>
 800a376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a378:	e008      	b.n	800a38c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a37a:	f7f9 fc15 	bl	8003ba8 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	2b02      	cmp	r3, #2
 800a386:	d901      	bls.n	800a38c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a388:	2303      	movs	r3, #3
 800a38a:	e10c      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a38c:	4b6a      	ldr	r3, [pc, #424]	@ (800a538 <HAL_RCC_OscConfig+0x474>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a394:	2b00      	cmp	r3, #0
 800a396:	d0f0      	beq.n	800a37a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d106      	bne.n	800a3ae <HAL_RCC_OscConfig+0x2ea>
 800a3a0:	4b64      	ldr	r3, [pc, #400]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3a4:	4a63      	ldr	r2, [pc, #396]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3a6:	f043 0301 	orr.w	r3, r3, #1
 800a3aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ac:	e01c      	b.n	800a3e8 <HAL_RCC_OscConfig+0x324>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d10c      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x30c>
 800a3b6:	4b5f      	ldr	r3, [pc, #380]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3ba:	4a5e      	ldr	r2, [pc, #376]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3bc:	f043 0304 	orr.w	r3, r3, #4
 800a3c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3c2:	4b5c      	ldr	r3, [pc, #368]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3c6:	4a5b      	ldr	r2, [pc, #364]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3c8:	f043 0301 	orr.w	r3, r3, #1
 800a3cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3ce:	e00b      	b.n	800a3e8 <HAL_RCC_OscConfig+0x324>
 800a3d0:	4b58      	ldr	r3, [pc, #352]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3d4:	4a57      	ldr	r2, [pc, #348]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3d6:	f023 0301 	bic.w	r3, r3, #1
 800a3da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3dc:	4b55      	ldr	r3, [pc, #340]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a3e0:	4a54      	ldr	r2, [pc, #336]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a3e2:	f023 0304 	bic.w	r3, r3, #4
 800a3e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d015      	beq.n	800a41c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3f0:	f7f9 fbda 	bl	8003ba8 <HAL_GetTick>
 800a3f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3f6:	e00a      	b.n	800a40e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f8:	f7f9 fbd6 	bl	8003ba8 <HAL_GetTick>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a406:	4293      	cmp	r3, r2
 800a408:	d901      	bls.n	800a40e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e0cb      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a40e:	4b49      	ldr	r3, [pc, #292]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a412:	f003 0302 	and.w	r3, r3, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0ee      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x334>
 800a41a:	e014      	b.n	800a446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a41c:	f7f9 fbc4 	bl	8003ba8 <HAL_GetTick>
 800a420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a422:	e00a      	b.n	800a43a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a424:	f7f9 fbc0 	bl	8003ba8 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a432:	4293      	cmp	r3, r2
 800a434:	d901      	bls.n	800a43a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a436:	2303      	movs	r3, #3
 800a438:	e0b5      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a43a:	4b3e      	ldr	r3, [pc, #248]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a43c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1ee      	bne.n	800a424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d105      	bne.n	800a458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a44c:	4b39      	ldr	r3, [pc, #228]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a450:	4a38      	ldr	r2, [pc, #224]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 80a1 	beq.w	800a5a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a462:	4b34      	ldr	r3, [pc, #208]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 030c 	and.w	r3, r3, #12
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	d05c      	beq.n	800a528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	2b02      	cmp	r3, #2
 800a474:	d141      	bne.n	800a4fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a476:	4b31      	ldr	r3, [pc, #196]	@ (800a53c <HAL_RCC_OscConfig+0x478>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a47c:	f7f9 fb94 	bl	8003ba8 <HAL_GetTick>
 800a480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a482:	e008      	b.n	800a496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a484:	f7f9 fb90 	bl	8003ba8 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d901      	bls.n	800a496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	e087      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a496:	4b27      	ldr	r3, [pc, #156]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1f0      	bne.n	800a484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	69da      	ldr	r2, [r3, #28]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	431a      	orrs	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b0:	019b      	lsls	r3, r3, #6
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	041b      	lsls	r3, r3, #16
 800a4be:	431a      	orrs	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c4:	061b      	lsls	r3, r3, #24
 800a4c6:	491b      	ldr	r1, [pc, #108]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4cc:	4b1b      	ldr	r3, [pc, #108]	@ (800a53c <HAL_RCC_OscConfig+0x478>)
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4d2:	f7f9 fb69 	bl	8003ba8 <HAL_GetTick>
 800a4d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4d8:	e008      	b.n	800a4ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4da:	f7f9 fb65 	bl	8003ba8 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d901      	bls.n	800a4ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e05c      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4ec:	4b11      	ldr	r3, [pc, #68]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0f0      	beq.n	800a4da <HAL_RCC_OscConfig+0x416>
 800a4f8:	e054      	b.n	800a5a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4fa:	4b10      	ldr	r3, [pc, #64]	@ (800a53c <HAL_RCC_OscConfig+0x478>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a500:	f7f9 fb52 	bl	8003ba8 <HAL_GetTick>
 800a504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a508:	f7f9 fb4e 	bl	8003ba8 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e045      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a51a:	4b06      	ldr	r3, [pc, #24]	@ (800a534 <HAL_RCC_OscConfig+0x470>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1f0      	bne.n	800a508 <HAL_RCC_OscConfig+0x444>
 800a526:	e03d      	b.n	800a5a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d107      	bne.n	800a540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e038      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
 800a534:	40023800 	.word	0x40023800
 800a538:	40007000 	.word	0x40007000
 800a53c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a540:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b0 <HAL_RCC_OscConfig+0x4ec>)
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d028      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a558:	429a      	cmp	r2, r3
 800a55a:	d121      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a566:	429a      	cmp	r2, r3
 800a568:	d11a      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a570:	4013      	ands	r3, r2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a578:	4293      	cmp	r3, r2
 800a57a:	d111      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a586:	085b      	lsrs	r3, r3, #1
 800a588:	3b01      	subs	r3, #1
 800a58a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d107      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d001      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e000      	b.n	800a5a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	40023800 	.word	0x40023800

0800a5b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e0cc      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5c8:	4b68      	ldr	r3, [pc, #416]	@ (800a76c <HAL_RCC_ClockConfig+0x1b8>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0307 	and.w	r3, r3, #7
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d90c      	bls.n	800a5f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5d6:	4b65      	ldr	r3, [pc, #404]	@ (800a76c <HAL_RCC_ClockConfig+0x1b8>)
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	b2d2      	uxtb	r2, r2
 800a5dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5de:	4b63      	ldr	r3, [pc, #396]	@ (800a76c <HAL_RCC_ClockConfig+0x1b8>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d001      	beq.n	800a5f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e0b8      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d020      	beq.n	800a63e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a608:	4b59      	ldr	r3, [pc, #356]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	4a58      	ldr	r2, [pc, #352]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a60e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0308 	and.w	r3, r3, #8
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d005      	beq.n	800a62c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a620:	4b53      	ldr	r3, [pc, #332]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	4a52      	ldr	r2, [pc, #328]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a62a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a62c:	4b50      	ldr	r3, [pc, #320]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	494d      	ldr	r1, [pc, #308]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a63a:	4313      	orrs	r3, r2
 800a63c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d044      	beq.n	800a6d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d107      	bne.n	800a662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a652:	4b47      	ldr	r3, [pc, #284]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d119      	bne.n	800a692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e07f      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2b02      	cmp	r3, #2
 800a668:	d003      	beq.n	800a672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d107      	bne.n	800a682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a672:	4b3f      	ldr	r3, [pc, #252]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e06f      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a682:	4b3b      	ldr	r3, [pc, #236]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e067      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a692:	4b37      	ldr	r3, [pc, #220]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f023 0203 	bic.w	r2, r3, #3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	4934      	ldr	r1, [pc, #208]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6a4:	f7f9 fa80 	bl	8003ba8 <HAL_GetTick>
 800a6a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6aa:	e00a      	b.n	800a6c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6ac:	f7f9 fa7c 	bl	8003ba8 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e04f      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f003 020c 	and.w	r2, r3, #12
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d1eb      	bne.n	800a6ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6d4:	4b25      	ldr	r3, [pc, #148]	@ (800a76c <HAL_RCC_ClockConfig+0x1b8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0307 	and.w	r3, r3, #7
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d20c      	bcs.n	800a6fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6e2:	4b22      	ldr	r3, [pc, #136]	@ (800a76c <HAL_RCC_ClockConfig+0x1b8>)
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	b2d2      	uxtb	r2, r2
 800a6e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ea:	4b20      	ldr	r3, [pc, #128]	@ (800a76c <HAL_RCC_ClockConfig+0x1b8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d001      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e032      	b.n	800a762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a708:	4b19      	ldr	r3, [pc, #100]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	4916      	ldr	r1, [pc, #88]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a716:	4313      	orrs	r3, r2
 800a718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0308 	and.w	r3, r3, #8
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a726:	4b12      	ldr	r3, [pc, #72]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	490e      	ldr	r1, [pc, #56]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a736:	4313      	orrs	r3, r2
 800a738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a73a:	f000 f82d 	bl	800a798 <HAL_RCC_GetSysClockFreq>
 800a73e:	4602      	mov	r2, r0
 800a740:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <HAL_RCC_ClockConfig+0x1bc>)
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	091b      	lsrs	r3, r3, #4
 800a746:	f003 030f 	and.w	r3, r3, #15
 800a74a:	490a      	ldr	r1, [pc, #40]	@ (800a774 <HAL_RCC_ClockConfig+0x1c0>)
 800a74c:	5ccb      	ldrb	r3, [r1, r3]
 800a74e:	fa22 f303 	lsr.w	r3, r2, r3
 800a752:	4a09      	ldr	r2, [pc, #36]	@ (800a778 <HAL_RCC_ClockConfig+0x1c4>)
 800a754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a756:	4b09      	ldr	r3, [pc, #36]	@ (800a77c <HAL_RCC_ClockConfig+0x1c8>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f9 f9e0 	bl	8003b20 <HAL_InitTick>

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	40023c00 	.word	0x40023c00
 800a770:	40023800 	.word	0x40023800
 800a774:	08012484 	.word	0x08012484
 800a778:	20000010 	.word	0x20000010
 800a77c:	20000014 	.word	0x20000014

0800a780 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a784:	4b03      	ldr	r3, [pc, #12]	@ (800a794 <HAL_RCC_EnableCSS+0x14>)
 800a786:	2201      	movs	r2, #1
 800a788:	601a      	str	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	4247004c 	.word	0x4247004c

0800a798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a79c:	b090      	sub	sp, #64	@ 0x40
 800a79e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7b0:	4b59      	ldr	r3, [pc, #356]	@ (800a918 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f003 030c 	and.w	r3, r3, #12
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d00d      	beq.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x40>
 800a7bc:	2b08      	cmp	r3, #8
 800a7be:	f200 80a1 	bhi.w	800a904 <HAL_RCC_GetSysClockFreq+0x16c>
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <HAL_RCC_GetSysClockFreq+0x34>
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d003      	beq.n	800a7d2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a7ca:	e09b      	b.n	800a904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7cc:	4b53      	ldr	r3, [pc, #332]	@ (800a91c <HAL_RCC_GetSysClockFreq+0x184>)
 800a7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7d0:	e09b      	b.n	800a90a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7d2:	4b53      	ldr	r3, [pc, #332]	@ (800a920 <HAL_RCC_GetSysClockFreq+0x188>)
 800a7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a7d6:	e098      	b.n	800a90a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7d8:	4b4f      	ldr	r3, [pc, #316]	@ (800a918 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7e2:	4b4d      	ldr	r3, [pc, #308]	@ (800a918 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d028      	beq.n	800a840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7ee:	4b4a      	ldr	r3, [pc, #296]	@ (800a918 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	099b      	lsrs	r3, r3, #6
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a800:	2100      	movs	r1, #0
 800a802:	4b47      	ldr	r3, [pc, #284]	@ (800a920 <HAL_RCC_GetSysClockFreq+0x188>)
 800a804:	fb03 f201 	mul.w	r2, r3, r1
 800a808:	2300      	movs	r3, #0
 800a80a:	fb00 f303 	mul.w	r3, r0, r3
 800a80e:	4413      	add	r3, r2
 800a810:	4a43      	ldr	r2, [pc, #268]	@ (800a920 <HAL_RCC_GetSysClockFreq+0x188>)
 800a812:	fba0 1202 	umull	r1, r2, r0, r2
 800a816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a818:	460a      	mov	r2, r1
 800a81a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a81e:	4413      	add	r3, r2
 800a820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a824:	2200      	movs	r2, #0
 800a826:	61bb      	str	r3, [r7, #24]
 800a828:	61fa      	str	r2, [r7, #28]
 800a82a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a82e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a832:	f7f5 fd25 	bl	8000280 <__aeabi_uldivmod>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4613      	mov	r3, r2
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a83e:	e053      	b.n	800a8e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a840:	4b35      	ldr	r3, [pc, #212]	@ (800a918 <HAL_RCC_GetSysClockFreq+0x180>)
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	099b      	lsrs	r3, r3, #6
 800a846:	2200      	movs	r2, #0
 800a848:	613b      	str	r3, [r7, #16]
 800a84a:	617a      	str	r2, [r7, #20]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a852:	f04f 0b00 	mov.w	fp, #0
 800a856:	4652      	mov	r2, sl
 800a858:	465b      	mov	r3, fp
 800a85a:	f04f 0000 	mov.w	r0, #0
 800a85e:	f04f 0100 	mov.w	r1, #0
 800a862:	0159      	lsls	r1, r3, #5
 800a864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a868:	0150      	lsls	r0, r2, #5
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	ebb2 080a 	subs.w	r8, r2, sl
 800a872:	eb63 090b 	sbc.w	r9, r3, fp
 800a876:	f04f 0200 	mov.w	r2, #0
 800a87a:	f04f 0300 	mov.w	r3, #0
 800a87e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a88a:	ebb2 0408 	subs.w	r4, r2, r8
 800a88e:	eb63 0509 	sbc.w	r5, r3, r9
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	00eb      	lsls	r3, r5, #3
 800a89c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8a0:	00e2      	lsls	r2, r4, #3
 800a8a2:	4614      	mov	r4, r2
 800a8a4:	461d      	mov	r5, r3
 800a8a6:	eb14 030a 	adds.w	r3, r4, sl
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	eb45 030b 	adc.w	r3, r5, fp
 800a8b0:	607b      	str	r3, [r7, #4]
 800a8b2:	f04f 0200 	mov.w	r2, #0
 800a8b6:	f04f 0300 	mov.w	r3, #0
 800a8ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8be:	4629      	mov	r1, r5
 800a8c0:	028b      	lsls	r3, r1, #10
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	028a      	lsls	r2, r1, #10
 800a8cc:	4610      	mov	r0, r2
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	60bb      	str	r3, [r7, #8]
 800a8d6:	60fa      	str	r2, [r7, #12]
 800a8d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8dc:	f7f5 fcd0 	bl	8000280 <__aeabi_uldivmod>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a8e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a918 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	f003 0303 	and.w	r3, r3, #3
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a8f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a902:	e002      	b.n	800a90a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a904:	4b05      	ldr	r3, [pc, #20]	@ (800a91c <HAL_RCC_GetSysClockFreq+0x184>)
 800a906:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3740      	adds	r7, #64	@ 0x40
 800a910:	46bd      	mov	sp, r7
 800a912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a916:	bf00      	nop
 800a918:	40023800 	.word	0x40023800
 800a91c:	00f42400 	.word	0x00f42400
 800a920:	017d7840 	.word	0x017d7840

0800a924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a924:	b480      	push	{r7}
 800a926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a928:	4b03      	ldr	r3, [pc, #12]	@ (800a938 <HAL_RCC_GetHCLKFreq+0x14>)
 800a92a:	681b      	ldr	r3, [r3, #0]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20000010 	.word	0x20000010

0800a93c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a940:	f7ff fff0 	bl	800a924 <HAL_RCC_GetHCLKFreq>
 800a944:	4602      	mov	r2, r0
 800a946:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	0a9b      	lsrs	r3, r3, #10
 800a94c:	f003 0307 	and.w	r3, r3, #7
 800a950:	4903      	ldr	r1, [pc, #12]	@ (800a960 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a952:	5ccb      	ldrb	r3, [r1, r3]
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a958:	4618      	mov	r0, r3
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	40023800 	.word	0x40023800
 800a960:	08012494 	.word	0x08012494

0800a964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a968:	f7ff ffdc 	bl	800a924 <HAL_RCC_GetHCLKFreq>
 800a96c:	4602      	mov	r2, r0
 800a96e:	4b05      	ldr	r3, [pc, #20]	@ (800a984 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	0b5b      	lsrs	r3, r3, #13
 800a974:	f003 0307 	and.w	r3, r3, #7
 800a978:	4903      	ldr	r1, [pc, #12]	@ (800a988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a97a:	5ccb      	ldrb	r3, [r1, r3]
 800a97c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a980:	4618      	mov	r0, r3
 800a982:	bd80      	pop	{r7, pc}
 800a984:	40023800 	.word	0x40023800
 800a988:	08012494 	.word	0x08012494

0800a98c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a990:	4b06      	ldr	r3, [pc, #24]	@ (800a9ac <HAL_RCC_NMI_IRQHandler+0x20>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a998:	2b80      	cmp	r3, #128	@ 0x80
 800a99a:	d104      	bne.n	800a9a6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a99c:	f000 f80a 	bl	800a9b4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a9a0:	4b03      	ldr	r3, [pc, #12]	@ (800a9b0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a9a2:	2280      	movs	r2, #128	@ 0x80
 800a9a4:	701a      	strb	r2, [r3, #0]
  }
}
 800a9a6:	bf00      	nop
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	40023800 	.word	0x40023800
 800a9b0:	4002380e 	.word	0x4002380e

0800a9b4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a9b8:	bf00      	nop
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e041      	b.n	800aa58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7f8 fe87 	bl	80036fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4619      	mov	r1, r3
 800aa00:	4610      	mov	r0, r2
 800aa02:	f000 fc3b 	bl	800b27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d001      	beq.n	800aa78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e044      	b.n	800ab02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f042 0201 	orr.w	r2, r2, #1
 800aa8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a1e      	ldr	r2, [pc, #120]	@ (800ab10 <HAL_TIM_Base_Start_IT+0xb0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d018      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x6c>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaa2:	d013      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x6c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a1a      	ldr	r2, [pc, #104]	@ (800ab14 <HAL_TIM_Base_Start_IT+0xb4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00e      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x6c>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a19      	ldr	r2, [pc, #100]	@ (800ab18 <HAL_TIM_Base_Start_IT+0xb8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d009      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x6c>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a17      	ldr	r2, [pc, #92]	@ (800ab1c <HAL_TIM_Base_Start_IT+0xbc>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <HAL_TIM_Base_Start_IT+0x6c>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a16      	ldr	r2, [pc, #88]	@ (800ab20 <HAL_TIM_Base_Start_IT+0xc0>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d111      	bne.n	800aaf0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f003 0307 	and.w	r3, r3, #7
 800aad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b06      	cmp	r3, #6
 800aadc:	d010      	beq.n	800ab00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f042 0201 	orr.w	r2, r2, #1
 800aaec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaee:	e007      	b.n	800ab00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f042 0201 	orr.w	r2, r2, #1
 800aafe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3714      	adds	r7, #20
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	40010000 	.word	0x40010000
 800ab14:	40000400 	.word	0x40000400
 800ab18:	40000800 	.word	0x40000800
 800ab1c:	40000c00 	.word	0x40000c00
 800ab20:	40014000 	.word	0x40014000

0800ab24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	e041      	b.n	800abba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f839 	bl	800abc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f000 fb8a 	bl	800b27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d109      	bne.n	800abfc <HAL_TIM_PWM_Start+0x24>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	bf14      	ite	ne
 800abf4:	2301      	movne	r3, #1
 800abf6:	2300      	moveq	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	e022      	b.n	800ac42 <HAL_TIM_PWM_Start+0x6a>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d109      	bne.n	800ac16 <HAL_TIM_PWM_Start+0x3e>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	bf14      	ite	ne
 800ac0e:	2301      	movne	r3, #1
 800ac10:	2300      	moveq	r3, #0
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	e015      	b.n	800ac42 <HAL_TIM_PWM_Start+0x6a>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d109      	bne.n	800ac30 <HAL_TIM_PWM_Start+0x58>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	bf14      	ite	ne
 800ac28:	2301      	movne	r3, #1
 800ac2a:	2300      	moveq	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	e008      	b.n	800ac42 <HAL_TIM_PWM_Start+0x6a>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	bf14      	ite	ne
 800ac3c:	2301      	movne	r3, #1
 800ac3e:	2300      	moveq	r3, #0
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e068      	b.n	800ad1c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <HAL_TIM_PWM_Start+0x82>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2202      	movs	r2, #2
 800ac54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac58:	e013      	b.n	800ac82 <HAL_TIM_PWM_Start+0xaa>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d104      	bne.n	800ac6a <HAL_TIM_PWM_Start+0x92>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2202      	movs	r2, #2
 800ac64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac68:	e00b      	b.n	800ac82 <HAL_TIM_PWM_Start+0xaa>
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIM_PWM_Start+0xa2>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac78:	e003      	b.n	800ac82 <HAL_TIM_PWM_Start+0xaa>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2201      	movs	r2, #1
 800ac88:	6839      	ldr	r1, [r7, #0]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 fda8 	bl	800b7e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a23      	ldr	r2, [pc, #140]	@ (800ad24 <HAL_TIM_PWM_Start+0x14c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d107      	bne.n	800acaa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aca8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a1d      	ldr	r2, [pc, #116]	@ (800ad24 <HAL_TIM_PWM_Start+0x14c>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d018      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x10e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acbc:	d013      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x10e>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a19      	ldr	r2, [pc, #100]	@ (800ad28 <HAL_TIM_PWM_Start+0x150>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00e      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x10e>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a17      	ldr	r2, [pc, #92]	@ (800ad2c <HAL_TIM_PWM_Start+0x154>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d009      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x10e>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a16      	ldr	r2, [pc, #88]	@ (800ad30 <HAL_TIM_PWM_Start+0x158>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d004      	beq.n	800ace6 <HAL_TIM_PWM_Start+0x10e>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a14      	ldr	r2, [pc, #80]	@ (800ad34 <HAL_TIM_PWM_Start+0x15c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d111      	bne.n	800ad0a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b06      	cmp	r3, #6
 800acf6:	d010      	beq.n	800ad1a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f042 0201 	orr.w	r2, r2, #1
 800ad06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad08:	e007      	b.n	800ad1a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f042 0201 	orr.w	r2, r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	40010000 	.word	0x40010000
 800ad28:	40000400 	.word	0x40000400
 800ad2c:	40000800 	.word	0x40000800
 800ad30:	40000c00 	.word	0x40000c00
 800ad34:	40014000 	.word	0x40014000

0800ad38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f003 0302 	and.w	r3, r3, #2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d020      	beq.n	800ad9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d01b      	beq.n	800ad9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f06f 0202 	mvn.w	r2, #2
 800ad6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2201      	movs	r2, #1
 800ad72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fa5b 	bl	800b23e <HAL_TIM_IC_CaptureCallback>
 800ad88:	e005      	b.n	800ad96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fa4d 	bl	800b22a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 fa5e 	bl	800b252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d020      	beq.n	800ade8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d01b      	beq.n	800ade8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f06f 0204 	mvn.w	r2, #4
 800adb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fa35 	bl	800b23e <HAL_TIM_IC_CaptureCallback>
 800add4:	e005      	b.n	800ade2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa27 	bl	800b22a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fa38 	bl	800b252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	f003 0308 	and.w	r3, r3, #8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d020      	beq.n	800ae34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f003 0308 	and.w	r3, r3, #8
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d01b      	beq.n	800ae34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f06f 0208 	mvn.w	r2, #8
 800ae04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2204      	movs	r2, #4
 800ae0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fa0f 	bl	800b23e <HAL_TIM_IC_CaptureCallback>
 800ae20:	e005      	b.n	800ae2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa01 	bl	800b22a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fa12 	bl	800b252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 0310 	and.w	r3, r3, #16
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d020      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f003 0310 	and.w	r3, r3, #16
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d01b      	beq.n	800ae80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f06f 0210 	mvn.w	r2, #16
 800ae50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2208      	movs	r2, #8
 800ae56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f9e9 	bl	800b23e <HAL_TIM_IC_CaptureCallback>
 800ae6c:	e005      	b.n	800ae7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f9db 	bl	800b22a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f9ec 	bl	800b252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00c      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d007      	beq.n	800aea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f06f 0201 	mvn.w	r2, #1
 800ae9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7f8 f844 	bl	8002f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00c      	beq.n	800aec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d007      	beq.n	800aec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800aec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fd2a 	bl	800b91c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00c      	beq.n	800aeec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9bd 	bl	800b266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f003 0320 	and.w	r3, r3, #32
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00c      	beq.n	800af10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f003 0320 	and.w	r3, r3, #32
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f06f 0220 	mvn.w	r2, #32
 800af08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fcfc 	bl	800b908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af10:	bf00      	nop
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d101      	bne.n	800af36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af32:	2302      	movs	r3, #2
 800af34:	e0ae      	b.n	800b094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b0c      	cmp	r3, #12
 800af42:	f200 809f 	bhi.w	800b084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800af46:	a201      	add	r2, pc, #4	@ (adr r2, 800af4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af81 	.word	0x0800af81
 800af50:	0800b085 	.word	0x0800b085
 800af54:	0800b085 	.word	0x0800b085
 800af58:	0800b085 	.word	0x0800b085
 800af5c:	0800afc1 	.word	0x0800afc1
 800af60:	0800b085 	.word	0x0800b085
 800af64:	0800b085 	.word	0x0800b085
 800af68:	0800b085 	.word	0x0800b085
 800af6c:	0800b003 	.word	0x0800b003
 800af70:	0800b085 	.word	0x0800b085
 800af74:	0800b085 	.word	0x0800b085
 800af78:	0800b085 	.word	0x0800b085
 800af7c:	0800b043 	.word	0x0800b043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68b9      	ldr	r1, [r7, #8]
 800af86:	4618      	mov	r0, r3
 800af88:	f000 fa04 	bl	800b394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	699a      	ldr	r2, [r3, #24]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f042 0208 	orr.w	r2, r2, #8
 800af9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699a      	ldr	r2, [r3, #24]
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 0204 	bic.w	r2, r2, #4
 800afaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6999      	ldr	r1, [r3, #24]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	691a      	ldr	r2, [r3, #16]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	619a      	str	r2, [r3, #24]
      break;
 800afbe:	e064      	b.n	800b08a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 fa4a 	bl	800b460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	699a      	ldr	r2, [r3, #24]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	699a      	ldr	r2, [r3, #24]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6999      	ldr	r1, [r3, #24]
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	021a      	lsls	r2, r3, #8
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	430a      	orrs	r2, r1
 800affe:	619a      	str	r2, [r3, #24]
      break;
 800b000:	e043      	b.n	800b08a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fa95 	bl	800b538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0208 	orr.w	r2, r2, #8
 800b01c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	69da      	ldr	r2, [r3, #28]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f022 0204 	bic.w	r2, r2, #4
 800b02c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69d9      	ldr	r1, [r3, #28]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	691a      	ldr	r2, [r3, #16]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	61da      	str	r2, [r3, #28]
      break;
 800b040:	e023      	b.n	800b08a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 fadf 	bl	800b60c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	69da      	ldr	r2, [r3, #28]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b05c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69da      	ldr	r2, [r3, #28]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b06c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	69d9      	ldr	r1, [r3, #28]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	021a      	lsls	r2, r3, #8
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	61da      	str	r2, [r3, #28]
      break;
 800b082:	e002      	b.n	800b08a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	75fb      	strb	r3, [r7, #23]
      break;
 800b088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d101      	bne.n	800b0b8 <HAL_TIM_ConfigClockSource+0x1c>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	e0b4      	b.n	800b222 <HAL_TIM_ConfigClockSource+0x186>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2202      	movs	r2, #2
 800b0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b0d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b0de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0f0:	d03e      	beq.n	800b170 <HAL_TIM_ConfigClockSource+0xd4>
 800b0f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0f6:	f200 8087 	bhi.w	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b0fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0fe:	f000 8086 	beq.w	800b20e <HAL_TIM_ConfigClockSource+0x172>
 800b102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b106:	d87f      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b108:	2b70      	cmp	r3, #112	@ 0x70
 800b10a:	d01a      	beq.n	800b142 <HAL_TIM_ConfigClockSource+0xa6>
 800b10c:	2b70      	cmp	r3, #112	@ 0x70
 800b10e:	d87b      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b110:	2b60      	cmp	r3, #96	@ 0x60
 800b112:	d050      	beq.n	800b1b6 <HAL_TIM_ConfigClockSource+0x11a>
 800b114:	2b60      	cmp	r3, #96	@ 0x60
 800b116:	d877      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b118:	2b50      	cmp	r3, #80	@ 0x50
 800b11a:	d03c      	beq.n	800b196 <HAL_TIM_ConfigClockSource+0xfa>
 800b11c:	2b50      	cmp	r3, #80	@ 0x50
 800b11e:	d873      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b120:	2b40      	cmp	r3, #64	@ 0x40
 800b122:	d058      	beq.n	800b1d6 <HAL_TIM_ConfigClockSource+0x13a>
 800b124:	2b40      	cmp	r3, #64	@ 0x40
 800b126:	d86f      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b128:	2b30      	cmp	r3, #48	@ 0x30
 800b12a:	d064      	beq.n	800b1f6 <HAL_TIM_ConfigClockSource+0x15a>
 800b12c:	2b30      	cmp	r3, #48	@ 0x30
 800b12e:	d86b      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b130:	2b20      	cmp	r3, #32
 800b132:	d060      	beq.n	800b1f6 <HAL_TIM_ConfigClockSource+0x15a>
 800b134:	2b20      	cmp	r3, #32
 800b136:	d867      	bhi.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d05c      	beq.n	800b1f6 <HAL_TIM_ConfigClockSource+0x15a>
 800b13c:	2b10      	cmp	r3, #16
 800b13e:	d05a      	beq.n	800b1f6 <HAL_TIM_ConfigClockSource+0x15a>
 800b140:	e062      	b.n	800b208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b152:	f000 fb25 	bl	800b7a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	609a      	str	r2, [r3, #8]
      break;
 800b16e:	e04f      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b180:	f000 fb0e 	bl	800b7a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689a      	ldr	r2, [r3, #8]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b192:	609a      	str	r2, [r3, #8]
      break;
 800b194:	e03c      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f000 fa82 	bl	800b6ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2150      	movs	r1, #80	@ 0x50
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 fadb 	bl	800b76a <TIM_ITRx_SetConfig>
      break;
 800b1b4:	e02c      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f000 faa1 	bl	800b70a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2160      	movs	r1, #96	@ 0x60
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 facb 	bl	800b76a <TIM_ITRx_SetConfig>
      break;
 800b1d4:	e01c      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	f000 fa62 	bl	800b6ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2140      	movs	r1, #64	@ 0x40
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fabb 	bl	800b76a <TIM_ITRx_SetConfig>
      break;
 800b1f4:	e00c      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f000 fab2 	bl	800b76a <TIM_ITRx_SetConfig>
      break;
 800b206:	e003      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	73fb      	strb	r3, [r7, #15]
      break;
 800b20c:	e000      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b20e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b220:	7bfb      	ldrb	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b22a:	b480      	push	{r7}
 800b22c:	b083      	sub	sp, #12
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b232:	bf00      	nop
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b246:	bf00      	nop
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b252:	b480      	push	{r7}
 800b254:	b083      	sub	sp, #12
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b25a:	bf00      	nop
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
	...

0800b27c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a3a      	ldr	r2, [pc, #232]	@ (800b378 <TIM_Base_SetConfig+0xfc>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d00f      	beq.n	800b2b4 <TIM_Base_SetConfig+0x38>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b29a:	d00b      	beq.n	800b2b4 <TIM_Base_SetConfig+0x38>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a37      	ldr	r2, [pc, #220]	@ (800b37c <TIM_Base_SetConfig+0x100>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d007      	beq.n	800b2b4 <TIM_Base_SetConfig+0x38>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a36      	ldr	r2, [pc, #216]	@ (800b380 <TIM_Base_SetConfig+0x104>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d003      	beq.n	800b2b4 <TIM_Base_SetConfig+0x38>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a35      	ldr	r2, [pc, #212]	@ (800b384 <TIM_Base_SetConfig+0x108>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d108      	bne.n	800b2c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a2b      	ldr	r2, [pc, #172]	@ (800b378 <TIM_Base_SetConfig+0xfc>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d01b      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d4:	d017      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a28      	ldr	r2, [pc, #160]	@ (800b37c <TIM_Base_SetConfig+0x100>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d013      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a27      	ldr	r2, [pc, #156]	@ (800b380 <TIM_Base_SetConfig+0x104>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d00f      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a26      	ldr	r2, [pc, #152]	@ (800b384 <TIM_Base_SetConfig+0x108>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00b      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a25      	ldr	r2, [pc, #148]	@ (800b388 <TIM_Base_SetConfig+0x10c>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d007      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a24      	ldr	r2, [pc, #144]	@ (800b38c <TIM_Base_SetConfig+0x110>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d003      	beq.n	800b306 <TIM_Base_SetConfig+0x8a>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a23      	ldr	r2, [pc, #140]	@ (800b390 <TIM_Base_SetConfig+0x114>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d108      	bne.n	800b318 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b30c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4313      	orrs	r3, r2
 800b316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	695b      	ldr	r3, [r3, #20]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	689a      	ldr	r2, [r3, #8]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a0e      	ldr	r2, [pc, #56]	@ (800b378 <TIM_Base_SetConfig+0xfc>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d103      	bne.n	800b34c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	691a      	ldr	r2, [r3, #16]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d105      	bne.n	800b36a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	f023 0201 	bic.w	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	611a      	str	r2, [r3, #16]
  }
}
 800b36a:	bf00      	nop
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	40010000 	.word	0x40010000
 800b37c:	40000400 	.word	0x40000400
 800b380:	40000800 	.word	0x40000800
 800b384:	40000c00 	.word	0x40000c00
 800b388:	40014000 	.word	0x40014000
 800b38c:	40014400 	.word	0x40014400
 800b390:	40014800 	.word	0x40014800

0800b394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6a1b      	ldr	r3, [r3, #32]
 800b3a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	f023 0201 	bic.w	r2, r3, #1
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f023 0302 	bic.w	r3, r3, #2
 800b3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b45c <TIM_OC1_SetConfig+0xc8>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d10c      	bne.n	800b40a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f023 0308 	bic.w	r3, r3, #8
 800b3f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	697a      	ldr	r2, [r7, #20]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f023 0304 	bic.w	r3, r3, #4
 800b408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a13      	ldr	r2, [pc, #76]	@ (800b45c <TIM_OC1_SetConfig+0xc8>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d111      	bne.n	800b436 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	697a      	ldr	r2, [r7, #20]
 800b44e:	621a      	str	r2, [r3, #32]
}
 800b450:	bf00      	nop
 800b452:	371c      	adds	r7, #28
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	40010000 	.word	0x40010000

0800b460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b460:	b480      	push	{r7}
 800b462:	b087      	sub	sp, #28
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	f023 0210 	bic.w	r2, r3, #16
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b48e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	021b      	lsls	r3, r3, #8
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f023 0320 	bic.w	r3, r3, #32
 800b4aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b534 <TIM_OC2_SetConfig+0xd4>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d10d      	bne.n	800b4dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	011b      	lsls	r3, r3, #4
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a15      	ldr	r2, [pc, #84]	@ (800b534 <TIM_OC2_SetConfig+0xd4>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d113      	bne.n	800b50c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	4313      	orrs	r3, r2
 800b50a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	621a      	str	r2, [r3, #32]
}
 800b526:	bf00      	nop
 800b528:	371c      	adds	r7, #28
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	40010000 	.word	0x40010000

0800b538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a1b      	ldr	r3, [r3, #32]
 800b54c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f023 0303 	bic.w	r3, r3, #3
 800b56e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	4313      	orrs	r3, r2
 800b578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a1d      	ldr	r2, [pc, #116]	@ (800b608 <TIM_OC3_SetConfig+0xd0>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d10d      	bne.n	800b5b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b59c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	021b      	lsls	r3, r3, #8
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b5b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a14      	ldr	r2, [pc, #80]	@ (800b608 <TIM_OC3_SetConfig+0xd0>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d113      	bne.n	800b5e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	011b      	lsls	r3, r3, #4
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	011b      	lsls	r3, r3, #4
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	621a      	str	r2, [r3, #32]
}
 800b5fc:	bf00      	nop
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	40010000 	.word	0x40010000

0800b60c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b087      	sub	sp, #28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a1b      	ldr	r3, [r3, #32]
 800b61a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	021b      	lsls	r3, r3, #8
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	031b      	lsls	r3, r3, #12
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	4313      	orrs	r3, r2
 800b662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a10      	ldr	r2, [pc, #64]	@ (800b6a8 <TIM_OC4_SetConfig+0x9c>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d109      	bne.n	800b680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	695b      	ldr	r3, [r3, #20]
 800b678:	019b      	lsls	r3, r3, #6
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	621a      	str	r2, [r3, #32]
}
 800b69a:	bf00      	nop
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	40010000 	.word	0x40010000

0800b6ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	f023 0201 	bic.w	r2, r3, #1
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b6d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f023 030a 	bic.w	r3, r3, #10
 800b6e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	621a      	str	r2, [r3, #32]
}
 800b6fe:	bf00      	nop
 800b700:	371c      	adds	r7, #28
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b087      	sub	sp, #28
 800b70e:	af00      	add	r7, sp, #0
 800b710:	60f8      	str	r0, [r7, #12]
 800b712:	60b9      	str	r1, [r7, #8]
 800b714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6a1b      	ldr	r3, [r3, #32]
 800b71a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6a1b      	ldr	r3, [r3, #32]
 800b720:	f023 0210 	bic.w	r2, r3, #16
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	031b      	lsls	r3, r3, #12
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b746:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	4313      	orrs	r3, r2
 800b750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	621a      	str	r2, [r3, #32]
}
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b085      	sub	sp, #20
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	f043 0307 	orr.w	r3, r3, #7
 800b78c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	609a      	str	r2, [r3, #8]
}
 800b794:	bf00      	nop
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b087      	sub	sp, #28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	021a      	lsls	r2, r3, #8
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	431a      	orrs	r2, r3
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	609a      	str	r2, [r3, #8]
}
 800b7d4:	bf00      	nop
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f003 031f 	and.w	r3, r3, #31
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a1a      	ldr	r2, [r3, #32]
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	43db      	mvns	r3, r3
 800b802:	401a      	ands	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6a1a      	ldr	r2, [r3, #32]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f003 031f 	and.w	r3, r3, #31
 800b812:	6879      	ldr	r1, [r7, #4]
 800b814:	fa01 f303 	lsl.w	r3, r1, r3
 800b818:	431a      	orrs	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	621a      	str	r2, [r3, #32]
}
 800b81e:	bf00      	nop
 800b820:	371c      	adds	r7, #28
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
	...

0800b82c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d101      	bne.n	800b844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b840:	2302      	movs	r3, #2
 800b842:	e050      	b.n	800b8e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b86a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	4313      	orrs	r3, r2
 800b874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d018      	beq.n	800b8ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b890:	d013      	beq.n	800b8ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a18      	ldr	r2, [pc, #96]	@ (800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d00e      	beq.n	800b8ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a16      	ldr	r2, [pc, #88]	@ (800b8fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d009      	beq.n	800b8ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a15      	ldr	r2, [pc, #84]	@ (800b900 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d004      	beq.n	800b8ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a13      	ldr	r2, [pc, #76]	@ (800b904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d10c      	bne.n	800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	40010000 	.word	0x40010000
 800b8f8:	40000400 	.word	0x40000400
 800b8fc:	40000800 	.word	0x40000800
 800b900:	40000c00 	.word	0x40000c00
 800b904:	40014000 	.word	0x40014000

0800b908 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b083      	sub	sp, #12
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b924:	bf00      	nop
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e042      	b.n	800b9c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d106      	bne.n	800b95c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7f7 ff50 	bl	80037fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2224      	movs	r2, #36	@ 0x24
 800b960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fcdb 	bl	800c330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	691a      	ldr	r2, [r3, #16]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	695a      	ldr	r2, [r3, #20]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68da      	ldr	r2, [r3, #12]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b9a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	4613      	mov	r3, r2
 800b9dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9e4:	b2db      	uxtb	r3, r3
 800b9e6:	2b20      	cmp	r3, #32
 800b9e8:	d112      	bne.n	800ba10 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <HAL_UART_Receive_IT+0x26>
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d101      	bne.n	800b9fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e00b      	b.n	800ba12 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ba00:	88fb      	ldrh	r3, [r7, #6]
 800ba02:	461a      	mov	r2, r3
 800ba04:	68b9      	ldr	r1, [r7, #8]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f000 faba 	bl	800bf80 <UART_Start_Receive_IT>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	e000      	b.n	800ba12 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ba10:	2302      	movs	r3, #2
  }
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
	...

0800ba1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b0ba      	sub	sp, #232	@ 0xe8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba52:	f003 030f 	and.w	r3, r3, #15
 800ba56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ba5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d10f      	bne.n	800ba82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba66:	f003 0320 	and.w	r3, r3, #32
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d009      	beq.n	800ba82 <HAL_UART_IRQHandler+0x66>
 800ba6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba72:	f003 0320 	and.w	r3, r3, #32
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fb99 	bl	800c1b2 <UART_Receive_IT>
      return;
 800ba80:	e25b      	b.n	800bf3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ba82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 80de 	beq.w	800bc48 <HAL_UART_IRQHandler+0x22c>
 800ba8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d106      	bne.n	800baa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ba98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 80d1 	beq.w	800bc48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00b      	beq.n	800baca <HAL_UART_IRQHandler+0xae>
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baba:	2b00      	cmp	r3, #0
 800babc:	d005      	beq.n	800baca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac2:	f043 0201 	orr.w	r2, r3, #1
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800baca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00b      	beq.n	800baee <HAL_UART_IRQHandler+0xd2>
 800bad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d005      	beq.n	800baee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bae6:	f043 0202 	orr.w	r2, r3, #2
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800baee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf2:	f003 0302 	and.w	r3, r3, #2
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00b      	beq.n	800bb12 <HAL_UART_IRQHandler+0xf6>
 800bafa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bafe:	f003 0301 	and.w	r3, r3, #1
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d005      	beq.n	800bb12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb0a:	f043 0204 	orr.w	r2, r3, #4
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bb12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb16:	f003 0308 	and.w	r3, r3, #8
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d011      	beq.n	800bb42 <HAL_UART_IRQHandler+0x126>
 800bb1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb22:	f003 0320 	and.w	r3, r3, #32
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d105      	bne.n	800bb36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bb2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb3a:	f043 0208 	orr.w	r2, r3, #8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f000 81f2 	beq.w	800bf30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb50:	f003 0320 	and.w	r3, r3, #32
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d008      	beq.n	800bb6a <HAL_UART_IRQHandler+0x14e>
 800bb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb5c:	f003 0320 	and.w	r3, r3, #32
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d002      	beq.n	800bb6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fb24 	bl	800c1b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb74:	2b40      	cmp	r3, #64	@ 0x40
 800bb76:	bf0c      	ite	eq
 800bb78:	2301      	moveq	r3, #1
 800bb7a:	2300      	movne	r3, #0
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d103      	bne.n	800bb96 <HAL_UART_IRQHandler+0x17a>
 800bb8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d04f      	beq.n	800bc36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa2c 	bl	800bff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba6:	2b40      	cmp	r3, #64	@ 0x40
 800bba8:	d141      	bne.n	800bc2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3314      	adds	r3, #20
 800bbb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bbb8:	e853 3f00 	ldrex	r3, [r3]
 800bbbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bbc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	3314      	adds	r3, #20
 800bbd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bbd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bbda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bbe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bbee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1d9      	bne.n	800bbaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d013      	beq.n	800bc26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc02:	4a7e      	ldr	r2, [pc, #504]	@ (800bdfc <HAL_UART_IRQHandler+0x3e0>)
 800bc04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f8 ffa0 	bl	8004b50 <HAL_DMA_Abort_IT>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d016      	beq.n	800bc44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bc20:	4610      	mov	r0, r2
 800bc22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc24:	e00e      	b.n	800bc44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 f994 	bl	800bf54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc2c:	e00a      	b.n	800bc44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f990 	bl	800bf54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc34:	e006      	b.n	800bc44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f98c 	bl	800bf54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bc42:	e175      	b.n	800bf30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc44:	bf00      	nop
    return;
 800bc46:	e173      	b.n	800bf30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	f040 814f 	bne.w	800bef0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bc52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc56:	f003 0310 	and.w	r3, r3, #16
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f000 8148 	beq.w	800bef0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bc60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc64:	f003 0310 	and.w	r3, r3, #16
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 8141 	beq.w	800bef0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60bb      	str	r3, [r7, #8]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	60bb      	str	r3, [r7, #8]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	60bb      	str	r3, [r7, #8]
 800bc82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc8e:	2b40      	cmp	r3, #64	@ 0x40
 800bc90:	f040 80b6 	bne.w	800be00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 8145 	beq.w	800bf34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bcae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	f080 813e 	bcs.w	800bf34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bcbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcca:	f000 8088 	beq.w	800bdde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	330c      	adds	r3, #12
 800bcd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcdc:	e853 3f00 	ldrex	r3, [r3]
 800bce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	330c      	adds	r3, #12
 800bcf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bcfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bcfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bd06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bd12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1d9      	bne.n	800bcce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	3314      	adds	r3, #20
 800bd20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd24:	e853 3f00 	ldrex	r3, [r3]
 800bd28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd2c:	f023 0301 	bic.w	r3, r3, #1
 800bd30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3314      	adds	r3, #20
 800bd3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bd3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bd42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1e1      	bne.n	800bd1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3314      	adds	r3, #20
 800bd5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	3314      	adds	r3, #20
 800bd76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bd7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd82:	e841 2300 	strex	r3, r2, [r1]
 800bd86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e3      	bne.n	800bd56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	330c      	adds	r3, #12
 800bda2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda6:	e853 3f00 	ldrex	r3, [r3]
 800bdaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bdac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdae:	f023 0310 	bic.w	r3, r3, #16
 800bdb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	330c      	adds	r3, #12
 800bdbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bdc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bdc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bdc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bdce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e3      	bne.n	800bd9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7f8 fe49 	bl	8004a70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2202      	movs	r2, #2
 800bde2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 f8b7 	bl	800bf68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdfa:	e09b      	b.n	800bf34 <HAL_UART_IRQHandler+0x518>
 800bdfc:	0800c0bb 	.word	0x0800c0bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be08:	b29b      	uxth	r3, r3
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800be14:	b29b      	uxth	r3, r3
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 808e 	beq.w	800bf38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800be1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8089 	beq.w	800bf38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	330c      	adds	r3, #12
 800be2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be30:	e853 3f00 	ldrex	r3, [r3]
 800be34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800be36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	330c      	adds	r3, #12
 800be46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800be4a:	647a      	str	r2, [r7, #68]	@ 0x44
 800be4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be52:	e841 2300 	strex	r3, r2, [r1]
 800be56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1e3      	bne.n	800be26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3314      	adds	r3, #20
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be68:	e853 3f00 	ldrex	r3, [r3]
 800be6c:	623b      	str	r3, [r7, #32]
   return(result);
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	f023 0301 	bic.w	r3, r3, #1
 800be74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	3314      	adds	r3, #20
 800be7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800be82:	633a      	str	r2, [r7, #48]	@ 0x30
 800be84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e3      	bne.n	800be5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2220      	movs	r2, #32
 800be9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	330c      	adds	r3, #12
 800beaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	e853 3f00 	ldrex	r3, [r3]
 800beb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f023 0310 	bic.w	r3, r3, #16
 800beba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	330c      	adds	r3, #12
 800bec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800bec8:	61fa      	str	r2, [r7, #28]
 800beca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800becc:	69b9      	ldr	r1, [r7, #24]
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	e841 2300 	strex	r3, r2, [r1]
 800bed4:	617b      	str	r3, [r7, #20]
   return(result);
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1e3      	bne.n	800bea4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2202      	movs	r2, #2
 800bee0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f83d 	bl	800bf68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800beee:	e023      	b.n	800bf38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d009      	beq.n	800bf10 <HAL_UART_IRQHandler+0x4f4>
 800befc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f8ea 	bl	800c0e2 <UART_Transmit_IT>
    return;
 800bf0e:	e014      	b.n	800bf3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bf10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00e      	beq.n	800bf3a <HAL_UART_IRQHandler+0x51e>
 800bf1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d008      	beq.n	800bf3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f92a 	bl	800c182 <UART_EndTransmit_IT>
    return;
 800bf2e:	e004      	b.n	800bf3a <HAL_UART_IRQHandler+0x51e>
    return;
 800bf30:	bf00      	nop
 800bf32:	e002      	b.n	800bf3a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf34:	bf00      	nop
 800bf36:	e000      	b.n	800bf3a <HAL_UART_IRQHandler+0x51e>
      return;
 800bf38:	bf00      	nop
  }
}
 800bf3a:	37e8      	adds	r7, #232	@ 0xe8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b085      	sub	sp, #20
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	88fa      	ldrh	r2, [r7, #6]
 800bf98:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	88fa      	ldrh	r2, [r7, #6]
 800bf9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2222      	movs	r2, #34	@ 0x22
 800bfaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d007      	beq.n	800bfc6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68da      	ldr	r2, [r3, #12]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	695a      	ldr	r2, [r3, #20]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f042 0201 	orr.w	r2, r2, #1
 800bfd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68da      	ldr	r2, [r3, #12]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f042 0220 	orr.w	r2, r2, #32
 800bfe4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b095      	sub	sp, #84	@ 0x54
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	330c      	adds	r3, #12
 800c002:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	330c      	adds	r3, #12
 800c01a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c01c:	643a      	str	r2, [r7, #64]	@ 0x40
 800c01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c022:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e5      	bne.n	800bffc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3314      	adds	r3, #20
 800c036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	e853 3f00 	ldrex	r3, [r3]
 800c03e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	f023 0301 	bic.w	r3, r3, #1
 800c046:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3314      	adds	r3, #20
 800c04e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c050:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c052:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c058:	e841 2300 	strex	r3, r2, [r1]
 800c05c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1e5      	bne.n	800c030 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d119      	bne.n	800c0a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	330c      	adds	r3, #12
 800c072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	e853 3f00 	ldrex	r3, [r3]
 800c07a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f023 0310 	bic.w	r3, r3, #16
 800c082:	647b      	str	r3, [r7, #68]	@ 0x44
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	330c      	adds	r3, #12
 800c08a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c08c:	61ba      	str	r2, [r7, #24]
 800c08e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c090:	6979      	ldr	r1, [r7, #20]
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	e841 2300 	strex	r3, r2, [r1]
 800c098:	613b      	str	r3, [r7, #16]
   return(result);
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1e5      	bne.n	800c06c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2220      	movs	r2, #32
 800c0a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c0ae:	bf00      	nop
 800c0b0:	3754      	adds	r7, #84	@ 0x54
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff ff3d 	bl	800bf54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c0e2:	b480      	push	{r7}
 800c0e4:	b085      	sub	sp, #20
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b21      	cmp	r3, #33	@ 0x21
 800c0f4:	d13e      	bne.n	800c174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0fe:	d114      	bne.n	800c12a <UART_Transmit_IT+0x48>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d110      	bne.n	800c12a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a1b      	ldr	r3, [r3, #32]
 800c10c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	881b      	ldrh	r3, [r3, #0]
 800c112:	461a      	mov	r2, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c11c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	1c9a      	adds	r2, r3, #2
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	621a      	str	r2, [r3, #32]
 800c128:	e008      	b.n	800c13c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	1c59      	adds	r1, r3, #1
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	6211      	str	r1, [r2, #32]
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c140:	b29b      	uxth	r3, r3
 800c142:	3b01      	subs	r3, #1
 800c144:	b29b      	uxth	r3, r3
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	4619      	mov	r1, r3
 800c14a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10f      	bne.n	800c170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68da      	ldr	r2, [r3, #12]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c15e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68da      	ldr	r2, [r3, #12]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c16e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c170:	2300      	movs	r3, #0
 800c172:	e000      	b.n	800c176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c174:	2302      	movs	r3, #2
  }
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68da      	ldr	r2, [r3, #12]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c198:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2220      	movs	r2, #32
 800c19e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff fecc 	bl	800bf40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b08c      	sub	sp, #48	@ 0x30
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b22      	cmp	r3, #34	@ 0x22
 800c1c4:	f040 80ae 	bne.w	800c324 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1d0:	d117      	bne.n	800c202 <UART_Receive_IT+0x50>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d113      	bne.n	800c202 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1fa:	1c9a      	adds	r2, r3, #2
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	629a      	str	r2, [r3, #40]	@ 0x28
 800c200:	e026      	b.n	800c250 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c206:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c208:	2300      	movs	r3, #0
 800c20a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c214:	d007      	beq.n	800c226 <UART_Receive_IT+0x74>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10a      	bne.n	800c234 <UART_Receive_IT+0x82>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d106      	bne.n	800c234 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c230:	701a      	strb	r2, [r3, #0]
 800c232:	e008      	b.n	800c246 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c240:	b2da      	uxtb	r2, r3
 800c242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c244:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c254:	b29b      	uxth	r3, r3
 800c256:	3b01      	subs	r3, #1
 800c258:	b29b      	uxth	r3, r3
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4619      	mov	r1, r3
 800c25e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c260:	2b00      	cmp	r3, #0
 800c262:	d15d      	bne.n	800c320 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68da      	ldr	r2, [r3, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f022 0220 	bic.w	r2, r2, #32
 800c272:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	68da      	ldr	r2, [r3, #12]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	695a      	ldr	r2, [r3, #20]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0201 	bic.w	r2, r2, #1
 800c292:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2220      	movs	r2, #32
 800c298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d135      	bne.n	800c316 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	330c      	adds	r3, #12
 800c2b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	e853 3f00 	ldrex	r3, [r3]
 800c2be:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f023 0310 	bic.w	r3, r3, #16
 800c2c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d0:	623a      	str	r2, [r7, #32]
 800c2d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	69f9      	ldr	r1, [r7, #28]
 800c2d6:	6a3a      	ldr	r2, [r7, #32]
 800c2d8:	e841 2300 	strex	r3, r2, [r1]
 800c2dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e5      	bne.n	800c2b0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f003 0310 	and.w	r3, r3, #16
 800c2ee:	2b10      	cmp	r3, #16
 800c2f0:	d10a      	bne.n	800c308 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff fe2a 	bl	800bf68 <HAL_UARTEx_RxEventCallback>
 800c314:	e002      	b.n	800c31c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7f5 fcd0 	bl	8001cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	e002      	b.n	800c326 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	e000      	b.n	800c326 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c324:	2302      	movs	r3, #2
  }
}
 800c326:	4618      	mov	r0, r3
 800c328:	3730      	adds	r7, #48	@ 0x30
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
	...

0800c330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c334:	b0c0      	sub	sp, #256	@ 0x100
 800c336:	af00      	add	r7, sp, #0
 800c338:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c33c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c34c:	68d9      	ldr	r1, [r3, #12]
 800c34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	ea40 0301 	orr.w	r3, r0, r1
 800c358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c35e:	689a      	ldr	r2, [r3, #8]
 800c360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	431a      	orrs	r2, r3
 800c368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	431a      	orrs	r2, r3
 800c370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c374:	69db      	ldr	r3, [r3, #28]
 800c376:	4313      	orrs	r3, r2
 800c378:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c388:	f021 010c 	bic.w	r1, r1, #12
 800c38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c396:	430b      	orrs	r3, r1
 800c398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3aa:	6999      	ldr	r1, [r3, #24]
 800c3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	ea40 0301 	orr.w	r3, r0, r1
 800c3b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c3b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	4b8f      	ldr	r3, [pc, #572]	@ (800c5fc <UART_SetConfig+0x2cc>)
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d005      	beq.n	800c3d0 <UART_SetConfig+0xa0>
 800c3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	4b8d      	ldr	r3, [pc, #564]	@ (800c600 <UART_SetConfig+0x2d0>)
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d104      	bne.n	800c3da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c3d0:	f7fe fac8 	bl	800a964 <HAL_RCC_GetPCLK2Freq>
 800c3d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c3d8:	e003      	b.n	800c3e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c3da:	f7fe faaf 	bl	800a93c <HAL_RCC_GetPCLK1Freq>
 800c3de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c3e6:	69db      	ldr	r3, [r3, #28]
 800c3e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3ec:	f040 810c 	bne.w	800c608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c3f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c3fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c3fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c402:	4622      	mov	r2, r4
 800c404:	462b      	mov	r3, r5
 800c406:	1891      	adds	r1, r2, r2
 800c408:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c40a:	415b      	adcs	r3, r3
 800c40c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c40e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c412:	4621      	mov	r1, r4
 800c414:	eb12 0801 	adds.w	r8, r2, r1
 800c418:	4629      	mov	r1, r5
 800c41a:	eb43 0901 	adc.w	r9, r3, r1
 800c41e:	f04f 0200 	mov.w	r2, #0
 800c422:	f04f 0300 	mov.w	r3, #0
 800c426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c42a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c42e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c432:	4690      	mov	r8, r2
 800c434:	4699      	mov	r9, r3
 800c436:	4623      	mov	r3, r4
 800c438:	eb18 0303 	adds.w	r3, r8, r3
 800c43c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c440:	462b      	mov	r3, r5
 800c442:	eb49 0303 	adc.w	r3, r9, r3
 800c446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c456:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c45a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c45e:	460b      	mov	r3, r1
 800c460:	18db      	adds	r3, r3, r3
 800c462:	653b      	str	r3, [r7, #80]	@ 0x50
 800c464:	4613      	mov	r3, r2
 800c466:	eb42 0303 	adc.w	r3, r2, r3
 800c46a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c46c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c474:	f7f3 ff04 	bl	8000280 <__aeabi_uldivmod>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	4b61      	ldr	r3, [pc, #388]	@ (800c604 <UART_SetConfig+0x2d4>)
 800c47e:	fba3 2302 	umull	r2, r3, r3, r2
 800c482:	095b      	lsrs	r3, r3, #5
 800c484:	011c      	lsls	r4, r3, #4
 800c486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c48a:	2200      	movs	r2, #0
 800c48c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c490:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c498:	4642      	mov	r2, r8
 800c49a:	464b      	mov	r3, r9
 800c49c:	1891      	adds	r1, r2, r2
 800c49e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c4a0:	415b      	adcs	r3, r3
 800c4a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c4a8:	4641      	mov	r1, r8
 800c4aa:	eb12 0a01 	adds.w	sl, r2, r1
 800c4ae:	4649      	mov	r1, r9
 800c4b0:	eb43 0b01 	adc.w	fp, r3, r1
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	f04f 0300 	mov.w	r3, #0
 800c4bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c4c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c4c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c4c8:	4692      	mov	sl, r2
 800c4ca:	469b      	mov	fp, r3
 800c4cc:	4643      	mov	r3, r8
 800c4ce:	eb1a 0303 	adds.w	r3, sl, r3
 800c4d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c4d6:	464b      	mov	r3, r9
 800c4d8:	eb4b 0303 	adc.w	r3, fp, r3
 800c4dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c4ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c4f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	18db      	adds	r3, r3, r3
 800c4f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	eb42 0303 	adc.w	r3, r2, r3
 800c500:	647b      	str	r3, [r7, #68]	@ 0x44
 800c502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c50a:	f7f3 feb9 	bl	8000280 <__aeabi_uldivmod>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4611      	mov	r1, r2
 800c514:	4b3b      	ldr	r3, [pc, #236]	@ (800c604 <UART_SetConfig+0x2d4>)
 800c516:	fba3 2301 	umull	r2, r3, r3, r1
 800c51a:	095b      	lsrs	r3, r3, #5
 800c51c:	2264      	movs	r2, #100	@ 0x64
 800c51e:	fb02 f303 	mul.w	r3, r2, r3
 800c522:	1acb      	subs	r3, r1, r3
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c52a:	4b36      	ldr	r3, [pc, #216]	@ (800c604 <UART_SetConfig+0x2d4>)
 800c52c:	fba3 2302 	umull	r2, r3, r3, r2
 800c530:	095b      	lsrs	r3, r3, #5
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c538:	441c      	add	r4, r3
 800c53a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c544:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c54c:	4642      	mov	r2, r8
 800c54e:	464b      	mov	r3, r9
 800c550:	1891      	adds	r1, r2, r2
 800c552:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c554:	415b      	adcs	r3, r3
 800c556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c55c:	4641      	mov	r1, r8
 800c55e:	1851      	adds	r1, r2, r1
 800c560:	6339      	str	r1, [r7, #48]	@ 0x30
 800c562:	4649      	mov	r1, r9
 800c564:	414b      	adcs	r3, r1
 800c566:	637b      	str	r3, [r7, #52]	@ 0x34
 800c568:	f04f 0200 	mov.w	r2, #0
 800c56c:	f04f 0300 	mov.w	r3, #0
 800c570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c574:	4659      	mov	r1, fp
 800c576:	00cb      	lsls	r3, r1, #3
 800c578:	4651      	mov	r1, sl
 800c57a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c57e:	4651      	mov	r1, sl
 800c580:	00ca      	lsls	r2, r1, #3
 800c582:	4610      	mov	r0, r2
 800c584:	4619      	mov	r1, r3
 800c586:	4603      	mov	r3, r0
 800c588:	4642      	mov	r2, r8
 800c58a:	189b      	adds	r3, r3, r2
 800c58c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c590:	464b      	mov	r3, r9
 800c592:	460a      	mov	r2, r1
 800c594:	eb42 0303 	adc.w	r3, r2, r3
 800c598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c5a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c5ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	18db      	adds	r3, r3, r3
 800c5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	eb42 0303 	adc.w	r3, r2, r3
 800c5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c5c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c5c6:	f7f3 fe5b 	bl	8000280 <__aeabi_uldivmod>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c604 <UART_SetConfig+0x2d4>)
 800c5d0:	fba3 1302 	umull	r1, r3, r3, r2
 800c5d4:	095b      	lsrs	r3, r3, #5
 800c5d6:	2164      	movs	r1, #100	@ 0x64
 800c5d8:	fb01 f303 	mul.w	r3, r1, r3
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	3332      	adds	r3, #50	@ 0x32
 800c5e2:	4a08      	ldr	r2, [pc, #32]	@ (800c604 <UART_SetConfig+0x2d4>)
 800c5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e8:	095b      	lsrs	r3, r3, #5
 800c5ea:	f003 0207 	and.w	r2, r3, #7
 800c5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4422      	add	r2, r4
 800c5f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c5f8:	e106      	b.n	800c808 <UART_SetConfig+0x4d8>
 800c5fa:	bf00      	nop
 800c5fc:	40011000 	.word	0x40011000
 800c600:	40011400 	.word	0x40011400
 800c604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c60c:	2200      	movs	r2, #0
 800c60e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c612:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c61a:	4642      	mov	r2, r8
 800c61c:	464b      	mov	r3, r9
 800c61e:	1891      	adds	r1, r2, r2
 800c620:	6239      	str	r1, [r7, #32]
 800c622:	415b      	adcs	r3, r3
 800c624:	627b      	str	r3, [r7, #36]	@ 0x24
 800c626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c62a:	4641      	mov	r1, r8
 800c62c:	1854      	adds	r4, r2, r1
 800c62e:	4649      	mov	r1, r9
 800c630:	eb43 0501 	adc.w	r5, r3, r1
 800c634:	f04f 0200 	mov.w	r2, #0
 800c638:	f04f 0300 	mov.w	r3, #0
 800c63c:	00eb      	lsls	r3, r5, #3
 800c63e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c642:	00e2      	lsls	r2, r4, #3
 800c644:	4614      	mov	r4, r2
 800c646:	461d      	mov	r5, r3
 800c648:	4643      	mov	r3, r8
 800c64a:	18e3      	adds	r3, r4, r3
 800c64c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c650:	464b      	mov	r3, r9
 800c652:	eb45 0303 	adc.w	r3, r5, r3
 800c656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c66a:	f04f 0200 	mov.w	r2, #0
 800c66e:	f04f 0300 	mov.w	r3, #0
 800c672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c676:	4629      	mov	r1, r5
 800c678:	008b      	lsls	r3, r1, #2
 800c67a:	4621      	mov	r1, r4
 800c67c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c680:	4621      	mov	r1, r4
 800c682:	008a      	lsls	r2, r1, #2
 800c684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c688:	f7f3 fdfa 	bl	8000280 <__aeabi_uldivmod>
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	4b60      	ldr	r3, [pc, #384]	@ (800c814 <UART_SetConfig+0x4e4>)
 800c692:	fba3 2302 	umull	r2, r3, r3, r2
 800c696:	095b      	lsrs	r3, r3, #5
 800c698:	011c      	lsls	r4, r3, #4
 800c69a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c6a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	464b      	mov	r3, r9
 800c6b0:	1891      	adds	r1, r2, r2
 800c6b2:	61b9      	str	r1, [r7, #24]
 800c6b4:	415b      	adcs	r3, r3
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6bc:	4641      	mov	r1, r8
 800c6be:	1851      	adds	r1, r2, r1
 800c6c0:	6139      	str	r1, [r7, #16]
 800c6c2:	4649      	mov	r1, r9
 800c6c4:	414b      	adcs	r3, r1
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	f04f 0200 	mov.w	r2, #0
 800c6cc:	f04f 0300 	mov.w	r3, #0
 800c6d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c6d4:	4659      	mov	r1, fp
 800c6d6:	00cb      	lsls	r3, r1, #3
 800c6d8:	4651      	mov	r1, sl
 800c6da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6de:	4651      	mov	r1, sl
 800c6e0:	00ca      	lsls	r2, r1, #3
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4642      	mov	r2, r8
 800c6ea:	189b      	adds	r3, r3, r2
 800c6ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6f0:	464b      	mov	r3, r9
 800c6f2:	460a      	mov	r2, r1
 800c6f4:	eb42 0303 	adc.w	r3, r2, r3
 800c6f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c706:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	f04f 0300 	mov.w	r3, #0
 800c710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c714:	4649      	mov	r1, r9
 800c716:	008b      	lsls	r3, r1, #2
 800c718:	4641      	mov	r1, r8
 800c71a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c71e:	4641      	mov	r1, r8
 800c720:	008a      	lsls	r2, r1, #2
 800c722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c726:	f7f3 fdab 	bl	8000280 <__aeabi_uldivmod>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4611      	mov	r1, r2
 800c730:	4b38      	ldr	r3, [pc, #224]	@ (800c814 <UART_SetConfig+0x4e4>)
 800c732:	fba3 2301 	umull	r2, r3, r3, r1
 800c736:	095b      	lsrs	r3, r3, #5
 800c738:	2264      	movs	r2, #100	@ 0x64
 800c73a:	fb02 f303 	mul.w	r3, r2, r3
 800c73e:	1acb      	subs	r3, r1, r3
 800c740:	011b      	lsls	r3, r3, #4
 800c742:	3332      	adds	r3, #50	@ 0x32
 800c744:	4a33      	ldr	r2, [pc, #204]	@ (800c814 <UART_SetConfig+0x4e4>)
 800c746:	fba2 2303 	umull	r2, r3, r2, r3
 800c74a:	095b      	lsrs	r3, r3, #5
 800c74c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c750:	441c      	add	r4, r3
 800c752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c756:	2200      	movs	r2, #0
 800c758:	673b      	str	r3, [r7, #112]	@ 0x70
 800c75a:	677a      	str	r2, [r7, #116]	@ 0x74
 800c75c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c760:	4642      	mov	r2, r8
 800c762:	464b      	mov	r3, r9
 800c764:	1891      	adds	r1, r2, r2
 800c766:	60b9      	str	r1, [r7, #8]
 800c768:	415b      	adcs	r3, r3
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c770:	4641      	mov	r1, r8
 800c772:	1851      	adds	r1, r2, r1
 800c774:	6039      	str	r1, [r7, #0]
 800c776:	4649      	mov	r1, r9
 800c778:	414b      	adcs	r3, r1
 800c77a:	607b      	str	r3, [r7, #4]
 800c77c:	f04f 0200 	mov.w	r2, #0
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c788:	4659      	mov	r1, fp
 800c78a:	00cb      	lsls	r3, r1, #3
 800c78c:	4651      	mov	r1, sl
 800c78e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c792:	4651      	mov	r1, sl
 800c794:	00ca      	lsls	r2, r1, #3
 800c796:	4610      	mov	r0, r2
 800c798:	4619      	mov	r1, r3
 800c79a:	4603      	mov	r3, r0
 800c79c:	4642      	mov	r2, r8
 800c79e:	189b      	adds	r3, r3, r2
 800c7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c7a2:	464b      	mov	r3, r9
 800c7a4:	460a      	mov	r2, r1
 800c7a6:	eb42 0303 	adc.w	r3, r2, r3
 800c7aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7b6:	667a      	str	r2, [r7, #100]	@ 0x64
 800c7b8:	f04f 0200 	mov.w	r2, #0
 800c7bc:	f04f 0300 	mov.w	r3, #0
 800c7c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c7c4:	4649      	mov	r1, r9
 800c7c6:	008b      	lsls	r3, r1, #2
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c7ce:	4641      	mov	r1, r8
 800c7d0:	008a      	lsls	r2, r1, #2
 800c7d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c7d6:	f7f3 fd53 	bl	8000280 <__aeabi_uldivmod>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4b0d      	ldr	r3, [pc, #52]	@ (800c814 <UART_SetConfig+0x4e4>)
 800c7e0:	fba3 1302 	umull	r1, r3, r3, r2
 800c7e4:	095b      	lsrs	r3, r3, #5
 800c7e6:	2164      	movs	r1, #100	@ 0x64
 800c7e8:	fb01 f303 	mul.w	r3, r1, r3
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	011b      	lsls	r3, r3, #4
 800c7f0:	3332      	adds	r3, #50	@ 0x32
 800c7f2:	4a08      	ldr	r2, [pc, #32]	@ (800c814 <UART_SetConfig+0x4e4>)
 800c7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f8:	095b      	lsrs	r3, r3, #5
 800c7fa:	f003 020f 	and.w	r2, r3, #15
 800c7fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4422      	add	r2, r4
 800c806:	609a      	str	r2, [r3, #8]
}
 800c808:	bf00      	nop
 800c80a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c80e:	46bd      	mov	sp, r7
 800c810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c814:	51eb851f 	.word	0x51eb851f

0800c818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c818:	b084      	sub	sp, #16
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	f107 001c 	add.w	r0, r7, #28
 800c826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c82a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d123      	bne.n	800c87a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c836:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c85a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d105      	bne.n	800c86e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f001 fae8 	bl	800de44 <USB_CoreReset>
 800c874:	4603      	mov	r3, r0
 800c876:	73fb      	strb	r3, [r7, #15]
 800c878:	e01b      	b.n	800c8b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f001 fadc 	bl	800de44 <USB_CoreReset>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c890:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c894:	2b00      	cmp	r3, #0
 800c896:	d106      	bne.n	800c8a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c89c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	639a      	str	r2, [r3, #56]	@ 0x38
 800c8a4:	e005      	b.n	800c8b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c8b2:	7fbb      	ldrb	r3, [r7, #30]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d10b      	bne.n	800c8d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	f043 0206 	orr.w	r2, r3, #6
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f043 0220 	orr.w	r2, r3, #32
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8dc:	b004      	add	sp, #16
 800c8de:	4770      	bx	lr

0800c8e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d165      	bne.n	800c9c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	4a41      	ldr	r2, [pc, #260]	@ (800c9fc <USB_SetTurnaroundTime+0x11c>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d906      	bls.n	800c90a <USB_SetTurnaroundTime+0x2a>
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	4a40      	ldr	r2, [pc, #256]	@ (800ca00 <USB_SetTurnaroundTime+0x120>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d202      	bcs.n	800c90a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c904:	230f      	movs	r3, #15
 800c906:	617b      	str	r3, [r7, #20]
 800c908:	e062      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	4a3c      	ldr	r2, [pc, #240]	@ (800ca00 <USB_SetTurnaroundTime+0x120>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d306      	bcc.n	800c920 <USB_SetTurnaroundTime+0x40>
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	4a3b      	ldr	r2, [pc, #236]	@ (800ca04 <USB_SetTurnaroundTime+0x124>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d202      	bcs.n	800c920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c91a:	230e      	movs	r3, #14
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	e057      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	4a38      	ldr	r2, [pc, #224]	@ (800ca04 <USB_SetTurnaroundTime+0x124>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d306      	bcc.n	800c936 <USB_SetTurnaroundTime+0x56>
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	4a37      	ldr	r2, [pc, #220]	@ (800ca08 <USB_SetTurnaroundTime+0x128>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d202      	bcs.n	800c936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c930:	230d      	movs	r3, #13
 800c932:	617b      	str	r3, [r7, #20]
 800c934:	e04c      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	4a33      	ldr	r2, [pc, #204]	@ (800ca08 <USB_SetTurnaroundTime+0x128>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d306      	bcc.n	800c94c <USB_SetTurnaroundTime+0x6c>
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	4a32      	ldr	r2, [pc, #200]	@ (800ca0c <USB_SetTurnaroundTime+0x12c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d802      	bhi.n	800c94c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c946:	230c      	movs	r3, #12
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	e041      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	4a2f      	ldr	r2, [pc, #188]	@ (800ca0c <USB_SetTurnaroundTime+0x12c>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d906      	bls.n	800c962 <USB_SetTurnaroundTime+0x82>
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	4a2e      	ldr	r2, [pc, #184]	@ (800ca10 <USB_SetTurnaroundTime+0x130>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d802      	bhi.n	800c962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c95c:	230b      	movs	r3, #11
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	e036      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	4a2a      	ldr	r2, [pc, #168]	@ (800ca10 <USB_SetTurnaroundTime+0x130>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d906      	bls.n	800c978 <USB_SetTurnaroundTime+0x98>
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	4a29      	ldr	r2, [pc, #164]	@ (800ca14 <USB_SetTurnaroundTime+0x134>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d802      	bhi.n	800c978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c972:	230a      	movs	r3, #10
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	e02b      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	4a26      	ldr	r2, [pc, #152]	@ (800ca14 <USB_SetTurnaroundTime+0x134>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d906      	bls.n	800c98e <USB_SetTurnaroundTime+0xae>
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	4a25      	ldr	r2, [pc, #148]	@ (800ca18 <USB_SetTurnaroundTime+0x138>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d202      	bcs.n	800c98e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c988:	2309      	movs	r3, #9
 800c98a:	617b      	str	r3, [r7, #20]
 800c98c:	e020      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	4a21      	ldr	r2, [pc, #132]	@ (800ca18 <USB_SetTurnaroundTime+0x138>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d306      	bcc.n	800c9a4 <USB_SetTurnaroundTime+0xc4>
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	4a20      	ldr	r2, [pc, #128]	@ (800ca1c <USB_SetTurnaroundTime+0x13c>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d802      	bhi.n	800c9a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c99e:	2308      	movs	r3, #8
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	e015      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	4a1d      	ldr	r2, [pc, #116]	@ (800ca1c <USB_SetTurnaroundTime+0x13c>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d906      	bls.n	800c9ba <USB_SetTurnaroundTime+0xda>
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	4a1c      	ldr	r2, [pc, #112]	@ (800ca20 <USB_SetTurnaroundTime+0x140>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d202      	bcs.n	800c9ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c9b4:	2307      	movs	r3, #7
 800c9b6:	617b      	str	r3, [r7, #20]
 800c9b8:	e00a      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c9ba:	2306      	movs	r3, #6
 800c9bc:	617b      	str	r3, [r7, #20]
 800c9be:	e007      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c9c0:	79fb      	ldrb	r3, [r7, #7]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d102      	bne.n	800c9cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c9c6:	2309      	movs	r3, #9
 800c9c8:	617b      	str	r3, [r7, #20]
 800c9ca:	e001      	b.n	800c9d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c9cc:	2309      	movs	r3, #9
 800c9ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	029b      	lsls	r3, r3, #10
 800c9e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c9e8:	431a      	orrs	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	371c      	adds	r7, #28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	00d8acbf 	.word	0x00d8acbf
 800ca00:	00e4e1c0 	.word	0x00e4e1c0
 800ca04:	00f42400 	.word	0x00f42400
 800ca08:	01067380 	.word	0x01067380
 800ca0c:	011a499f 	.word	0x011a499f
 800ca10:	01312cff 	.word	0x01312cff
 800ca14:	014ca43f 	.word	0x014ca43f
 800ca18:	016e3600 	.word	0x016e3600
 800ca1c:	01a6ab1f 	.word	0x01a6ab1f
 800ca20:	01e84800 	.word	0x01e84800

0800ca24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	f043 0201 	orr.w	r2, r3, #1
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b083      	sub	sp, #12
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f023 0201 	bic.w	r2, r3, #1
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ca5a:	2300      	movs	r3, #0
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d115      	bne.n	800cab6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca96:	200a      	movs	r0, #10
 800ca98:	f7f7 f892 	bl	8003bc0 <HAL_Delay>
      ms += 10U;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	330a      	adds	r3, #10
 800caa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 f93f 	bl	800dd26 <USB_GetMode>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d01e      	beq.n	800caec <USB_SetCurrentMode+0x84>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2bc7      	cmp	r3, #199	@ 0xc7
 800cab2:	d9f0      	bls.n	800ca96 <USB_SetCurrentMode+0x2e>
 800cab4:	e01a      	b.n	800caec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cab6:	78fb      	ldrb	r3, [r7, #3]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d115      	bne.n	800cae8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cac8:	200a      	movs	r0, #10
 800caca:	f7f7 f879 	bl	8003bc0 <HAL_Delay>
      ms += 10U;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	330a      	adds	r3, #10
 800cad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f001 f926 	bl	800dd26 <USB_GetMode>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d005      	beq.n	800caec <USB_SetCurrentMode+0x84>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2bc7      	cmp	r3, #199	@ 0xc7
 800cae4:	d9f0      	bls.n	800cac8 <USB_SetCurrentMode+0x60>
 800cae6:	e001      	b.n	800caec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cae8:	2301      	movs	r3, #1
 800caea:	e005      	b.n	800caf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2bc8      	cmp	r3, #200	@ 0xc8
 800caf0:	d101      	bne.n	800caf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e000      	b.n	800caf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb00:	b084      	sub	sp, #16
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b086      	sub	sp, #24
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cb0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	613b      	str	r3, [r7, #16]
 800cb1e:	e009      	b.n	800cb34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	3340      	adds	r3, #64	@ 0x40
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	3301      	adds	r3, #1
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	2b0e      	cmp	r3, #14
 800cb38:	d9f2      	bls.n	800cb20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cb3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d11c      	bne.n	800cb7c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb50:	f043 0302 	orr.w	r3, r3, #2
 800cb54:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb66:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb72:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	639a      	str	r2, [r3, #56]	@ 0x38
 800cb7a:	e00b      	b.n	800cb94 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb80:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb8c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cba0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d10d      	bne.n	800cbc4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d104      	bne.n	800cbba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f968 	bl	800ce88 <USB_SetDevSpeed>
 800cbb8:	e008      	b.n	800cbcc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cbba:	2101      	movs	r1, #1
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f963 	bl	800ce88 <USB_SetDevSpeed>
 800cbc2:	e003      	b.n	800cbcc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cbc4:	2103      	movs	r1, #3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f95e 	bl	800ce88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cbcc:	2110      	movs	r1, #16
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f8fa 	bl	800cdc8 <USB_FlushTxFifo>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f924 	bl	800ce2c <USB_FlushRxFifo>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc00:	461a      	mov	r2, r3
 800cc02:	2300      	movs	r3, #0
 800cc04:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	2300      	movs	r3, #0
 800cc10:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc12:	2300      	movs	r3, #0
 800cc14:	613b      	str	r3, [r7, #16]
 800cc16:	e043      	b.n	800cca0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	015a      	lsls	r2, r3, #5
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc2e:	d118      	bne.n	800cc62 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	015a      	lsls	r2, r3, #5
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc42:	461a      	mov	r2, r3
 800cc44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	e013      	b.n	800cc74 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc58:	461a      	mov	r2, r3
 800cc5a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	e008      	b.n	800cc74 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	015a      	lsls	r2, r3, #5
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	4413      	add	r3, r2
 800cc6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc6e:	461a      	mov	r2, r3
 800cc70:	2300      	movs	r3, #0
 800cc72:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	015a      	lsls	r2, r3, #5
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4413      	add	r3, r2
 800cc7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc80:	461a      	mov	r2, r3
 800cc82:	2300      	movs	r3, #0
 800cc84:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	015a      	lsls	r2, r3, #5
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	4413      	add	r3, r2
 800cc8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cc92:	461a      	mov	r2, r3
 800cc94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	613b      	str	r3, [r7, #16]
 800cca0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cca4:	461a      	mov	r2, r3
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d3b5      	bcc.n	800cc18 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ccac:	2300      	movs	r3, #0
 800ccae:	613b      	str	r3, [r7, #16]
 800ccb0:	e043      	b.n	800cd3a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	015a      	lsls	r2, r3, #5
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	4413      	add	r3, r2
 800ccba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ccc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ccc8:	d118      	bne.n	800ccfc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10a      	bne.n	800cce6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	015a      	lsls	r2, r3, #5
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cce2:	6013      	str	r3, [r2, #0]
 800cce4:	e013      	b.n	800cd0e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	015a      	lsls	r2, r3, #5
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	4413      	add	r3, r2
 800ccee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ccf8:	6013      	str	r3, [r2, #0]
 800ccfa:	e008      	b.n	800cd0e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	015a      	lsls	r2, r3, #5
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	4413      	add	r3, r2
 800cd04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd08:	461a      	mov	r2, r3
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	015a      	lsls	r2, r3, #5
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	4413      	add	r3, r2
 800cd16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	015a      	lsls	r2, r3, #5
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4413      	add	r3, r2
 800cd28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cd32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	3301      	adds	r3, #1
 800cd38:	613b      	str	r3, [r7, #16]
 800cd3a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cd3e:	461a      	mov	r2, r3
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d3b5      	bcc.n	800ccb2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cd4c:	691b      	ldr	r3, [r3, #16]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cd54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd58:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800cd66:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cd68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d105      	bne.n	800cd7c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	699b      	ldr	r3, [r3, #24]
 800cd74:	f043 0210 	orr.w	r2, r3, #16
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	699a      	ldr	r2, [r3, #24]
 800cd80:	4b10      	ldr	r3, [pc, #64]	@ (800cdc4 <USB_DevInit+0x2c4>)
 800cd82:	4313      	orrs	r3, r2
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cd88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d005      	beq.n	800cd9c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	f043 0208 	orr.w	r2, r3, #8
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cd9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d107      	bne.n	800cdb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	699b      	ldr	r3, [r3, #24]
 800cda8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cdac:	f043 0304 	orr.w	r3, r3, #4
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3718      	adds	r7, #24
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdc0:	b004      	add	sp, #16
 800cdc2:	4770      	bx	lr
 800cdc4:	803c3800 	.word	0x803c3800

0800cdc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b085      	sub	sp, #20
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cde2:	d901      	bls.n	800cde8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	e01b      	b.n	800ce20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	daf2      	bge.n	800cdd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	019b      	lsls	r3, r3, #6
 800cdf8:	f043 0220 	orr.w	r2, r3, #32
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3301      	adds	r3, #1
 800ce04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce0c:	d901      	bls.n	800ce12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e006      	b.n	800ce20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	f003 0320 	and.w	r3, r3, #32
 800ce1a:	2b20      	cmp	r3, #32
 800ce1c:	d0f0      	beq.n	800ce00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ce1e:	2300      	movs	r3, #0
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b085      	sub	sp, #20
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce44:	d901      	bls.n	800ce4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ce46:	2303      	movs	r3, #3
 800ce48:	e018      	b.n	800ce7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	daf2      	bge.n	800ce38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2210      	movs	r2, #16
 800ce5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ce68:	d901      	bls.n	800ce6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e006      	b.n	800ce7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	f003 0310 	and.w	r3, r3, #16
 800ce76:	2b10      	cmp	r3, #16
 800ce78:	d0f0      	beq.n	800ce5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3714      	adds	r7, #20
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	78fb      	ldrb	r3, [r7, #3]
 800cea2:	68f9      	ldr	r1, [r7, #12]
 800cea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b087      	sub	sp, #28
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f003 0306 	and.w	r3, r3, #6
 800ced2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ceda:	2300      	movs	r3, #0
 800cedc:	75fb      	strb	r3, [r7, #23]
 800cede:	e00a      	b.n	800cef6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d002      	beq.n	800ceec <USB_GetDevSpeed+0x32>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b06      	cmp	r3, #6
 800ceea:	d102      	bne.n	800cef2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ceec:	2302      	movs	r3, #2
 800ceee:	75fb      	strb	r3, [r7, #23]
 800cef0:	e001      	b.n	800cef6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cef2:	230f      	movs	r3, #15
 800cef4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	785b      	ldrb	r3, [r3, #1]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d13a      	bne.n	800cf96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf26:	69da      	ldr	r2, [r3, #28]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f003 030f 	and.w	r3, r3, #15
 800cf30:	2101      	movs	r1, #1
 800cf32:	fa01 f303 	lsl.w	r3, r1, r3
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	68f9      	ldr	r1, [r7, #12]
 800cf3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	015a      	lsls	r2, r3, #5
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4413      	add	r3, r2
 800cf4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d155      	bne.n	800d004 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	015a      	lsls	r2, r3, #5
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	791b      	ldrb	r3, [r3, #4]
 800cf72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	059b      	lsls	r3, r3, #22
 800cf7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	0151      	lsls	r1, r2, #5
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	440a      	add	r2, r1
 800cf86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	e036      	b.n	800d004 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cf9c:	69da      	ldr	r2, [r3, #28]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	f003 030f 	and.w	r3, r3, #15
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfac:	041b      	lsls	r3, r3, #16
 800cfae:	68f9      	ldr	r1, [r7, #12]
 800cfb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d11a      	bne.n	800d004 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	015a      	lsls	r2, r3, #5
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	791b      	ldrb	r3, [r3, #4]
 800cfe8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cfea:	430b      	orrs	r3, r1
 800cfec:	4313      	orrs	r3, r2
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	0151      	lsls	r1, r2, #5
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	440a      	add	r2, r1
 800cff6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d002:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3714      	adds	r7, #20
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
	...

0800d014 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	785b      	ldrb	r3, [r3, #1]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d161      	bne.n	800d0f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	015a      	lsls	r2, r3, #5
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	4413      	add	r3, r2
 800d038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d046:	d11f      	bne.n	800d088 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	015a      	lsls	r2, r3, #5
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	0151      	lsls	r1, r2, #5
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	440a      	add	r2, r1
 800d05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d062:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d066:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	0151      	lsls	r1, r2, #5
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	440a      	add	r2, r1
 800d07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d08e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	2101      	movs	r1, #1
 800d09a:	fa01 f303 	lsl.w	r3, r1, r3
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	43db      	mvns	r3, r3
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0b2:	69da      	ldr	r2, [r3, #28]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f003 030f 	and.w	r3, r3, #15
 800d0bc:	2101      	movs	r1, #1
 800d0be:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	43db      	mvns	r3, r3
 800d0c6:	68f9      	ldr	r1, [r7, #12]
 800d0c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	015a      	lsls	r2, r3, #5
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	0159      	lsls	r1, r3, #5
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	440b      	add	r3, r1
 800d0e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4b35      	ldr	r3, [pc, #212]	@ (800d1c4 <USB_DeactivateEndpoint+0x1b0>)
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	600b      	str	r3, [r1, #0]
 800d0f2:	e060      	b.n	800d1b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	015a      	lsls	r2, r3, #5
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d10a:	d11f      	bne.n	800d14c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	015a      	lsls	r2, r3, #5
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	4413      	add	r3, r2
 800d114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	0151      	lsls	r1, r2, #5
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	440a      	add	r2, r1
 800d122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d126:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d12a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	0151      	lsls	r1, r2, #5
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	440a      	add	r2, r1
 800d142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d146:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d14a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	f003 030f 	and.w	r3, r3, #15
 800d15c:	2101      	movs	r1, #1
 800d15e:	fa01 f303 	lsl.w	r3, r1, r3
 800d162:	041b      	lsls	r3, r3, #16
 800d164:	43db      	mvns	r3, r3
 800d166:	68f9      	ldr	r1, [r7, #12]
 800d168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d16c:	4013      	ands	r3, r2
 800d16e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d176:	69da      	ldr	r2, [r3, #28]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	f003 030f 	and.w	r3, r3, #15
 800d180:	2101      	movs	r1, #1
 800d182:	fa01 f303 	lsl.w	r3, r1, r3
 800d186:	041b      	lsls	r3, r3, #16
 800d188:	43db      	mvns	r3, r3
 800d18a:	68f9      	ldr	r1, [r7, #12]
 800d18c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d190:	4013      	ands	r3, r2
 800d192:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	015a      	lsls	r2, r3, #5
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4413      	add	r3, r2
 800d19c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	0159      	lsls	r1, r3, #5
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	440b      	add	r3, r1
 800d1aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4b05      	ldr	r3, [pc, #20]	@ (800d1c8 <USB_DeactivateEndpoint+0x1b4>)
 800d1b2:	4013      	ands	r3, r2
 800d1b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	ec337800 	.word	0xec337800
 800d1c8:	eff37800 	.word	0xeff37800

0800d1cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b08a      	sub	sp, #40	@ 0x28
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	785b      	ldrb	r3, [r3, #1]
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	f040 817f 	bne.w	800d4ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d132      	bne.n	800d25c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	015a      	lsls	r2, r3, #5
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	0151      	lsls	r1, r2, #5
 800d208:	69fa      	ldr	r2, [r7, #28]
 800d20a:	440a      	add	r2, r1
 800d20c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d210:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d214:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d218:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	015a      	lsls	r2, r3, #5
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	4413      	add	r3, r2
 800d222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	69ba      	ldr	r2, [r7, #24]
 800d22a:	0151      	lsls	r1, r2, #5
 800d22c:	69fa      	ldr	r2, [r7, #28]
 800d22e:	440a      	add	r2, r1
 800d230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d234:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d238:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	015a      	lsls	r2, r3, #5
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	4413      	add	r3, r2
 800d242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	0151      	lsls	r1, r2, #5
 800d24c:	69fa      	ldr	r2, [r7, #28]
 800d24e:	440a      	add	r2, r1
 800d250:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d254:	0cdb      	lsrs	r3, r3, #19
 800d256:	04db      	lsls	r3, r3, #19
 800d258:	6113      	str	r3, [r2, #16]
 800d25a:	e097      	b.n	800d38c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d276:	0cdb      	lsrs	r3, r3, #19
 800d278:	04db      	lsls	r3, r3, #19
 800d27a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	69ba      	ldr	r2, [r7, #24]
 800d28c:	0151      	lsls	r1, r2, #5
 800d28e:	69fa      	ldr	r2, [r7, #28]
 800d290:	440a      	add	r2, r1
 800d292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d296:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d29a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d29e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800d2a0:	69bb      	ldr	r3, [r7, #24]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d11a      	bne.n	800d2dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	691a      	ldr	r2, [r3, #16]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d903      	bls.n	800d2ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	689a      	ldr	r2, [r3, #8]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	015a      	lsls	r2, r3, #5
 800d2be:	69fb      	ldr	r3, [r7, #28]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	69ba      	ldr	r2, [r7, #24]
 800d2ca:	0151      	lsls	r1, r2, #5
 800d2cc:	69fa      	ldr	r2, [r7, #28]
 800d2ce:	440a      	add	r2, r1
 800d2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d2d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d2d8:	6113      	str	r3, [r2, #16]
 800d2da:	e044      	b.n	800d366 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	691a      	ldr	r2, [r3, #16]
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	1e5a      	subs	r2, r3, #1
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	015a      	lsls	r2, r3, #5
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2fe:	691a      	ldr	r2, [r3, #16]
 800d300:	8afb      	ldrh	r3, [r7, #22]
 800d302:	04d9      	lsls	r1, r3, #19
 800d304:	4ba4      	ldr	r3, [pc, #656]	@ (800d598 <USB_EPStartXfer+0x3cc>)
 800d306:	400b      	ands	r3, r1
 800d308:	69b9      	ldr	r1, [r7, #24]
 800d30a:	0148      	lsls	r0, r1, #5
 800d30c:	69f9      	ldr	r1, [r7, #28]
 800d30e:	4401      	add	r1, r0
 800d310:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d314:	4313      	orrs	r3, r2
 800d316:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	791b      	ldrb	r3, [r3, #4]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d122      	bne.n	800d366 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d32c:	691b      	ldr	r3, [r3, #16]
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	0151      	lsls	r1, r2, #5
 800d332:	69fa      	ldr	r2, [r7, #28]
 800d334:	440a      	add	r2, r1
 800d336:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d33a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d33e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	015a      	lsls	r2, r3, #5
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	4413      	add	r3, r2
 800d348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d34c:	691a      	ldr	r2, [r3, #16]
 800d34e:	8afb      	ldrh	r3, [r7, #22]
 800d350:	075b      	lsls	r3, r3, #29
 800d352:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d356:	69b9      	ldr	r1, [r7, #24]
 800d358:	0148      	lsls	r0, r1, #5
 800d35a:	69f9      	ldr	r1, [r7, #28]
 800d35c:	4401      	add	r1, r0
 800d35e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d362:	4313      	orrs	r3, r2
 800d364:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	015a      	lsls	r2, r3, #5
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	4413      	add	r3, r2
 800d36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d372:	691a      	ldr	r2, [r3, #16]
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d37c:	69b9      	ldr	r1, [r7, #24]
 800d37e:	0148      	lsls	r0, r1, #5
 800d380:	69f9      	ldr	r1, [r7, #28]
 800d382:	4401      	add	r1, r0
 800d384:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d388:	4313      	orrs	r3, r2
 800d38a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d38c:	79fb      	ldrb	r3, [r7, #7]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d14b      	bne.n	800d42a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	69db      	ldr	r3, [r3, #28]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d009      	beq.n	800d3ae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	69db      	ldr	r3, [r3, #28]
 800d3ac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	791b      	ldrb	r3, [r3, #4]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d128      	bne.n	800d408 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d110      	bne.n	800d3e8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	015a      	lsls	r2, r3, #5
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	69ba      	ldr	r2, [r7, #24]
 800d3d6:	0151      	lsls	r1, r2, #5
 800d3d8:	69fa      	ldr	r2, [r7, #28]
 800d3da:	440a      	add	r2, r1
 800d3dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d3e4:	6013      	str	r3, [r2, #0]
 800d3e6:	e00f      	b.n	800d408 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	015a      	lsls	r2, r3, #5
 800d3ec:	69fb      	ldr	r3, [r7, #28]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	69ba      	ldr	r2, [r7, #24]
 800d3f8:	0151      	lsls	r1, r2, #5
 800d3fa:	69fa      	ldr	r2, [r7, #28]
 800d3fc:	440a      	add	r2, r1
 800d3fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d406:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	69ba      	ldr	r2, [r7, #24]
 800d418:	0151      	lsls	r1, r2, #5
 800d41a:	69fa      	ldr	r2, [r7, #28]
 800d41c:	440a      	add	r2, r1
 800d41e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d422:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	e166      	b.n	800d6f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	015a      	lsls	r2, r3, #5
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	4413      	add	r3, r2
 800d432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	69ba      	ldr	r2, [r7, #24]
 800d43a:	0151      	lsls	r1, r2, #5
 800d43c:	69fa      	ldr	r2, [r7, #28]
 800d43e:	440a      	add	r2, r1
 800d440:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d444:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d448:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	791b      	ldrb	r3, [r3, #4]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d015      	beq.n	800d47e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	f000 814e 	beq.w	800d6f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	f003 030f 	and.w	r3, r3, #15
 800d46c:	2101      	movs	r1, #1
 800d46e:	fa01 f303 	lsl.w	r3, r1, r3
 800d472:	69f9      	ldr	r1, [r7, #28]
 800d474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d478:	4313      	orrs	r3, r2
 800d47a:	634b      	str	r3, [r1, #52]	@ 0x34
 800d47c:	e13c      	b.n	800d6f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d110      	bne.n	800d4b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	4413      	add	r3, r2
 800d496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	69ba      	ldr	r2, [r7, #24]
 800d49e:	0151      	lsls	r1, r2, #5
 800d4a0:	69fa      	ldr	r2, [r7, #28]
 800d4a2:	440a      	add	r2, r1
 800d4a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	e00f      	b.n	800d4d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69ba      	ldr	r2, [r7, #24]
 800d4c0:	0151      	lsls	r1, r2, #5
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	440a      	add	r2, r1
 800d4c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d4ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	68d9      	ldr	r1, [r3, #12]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	781a      	ldrb	r2, [r3, #0]
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	b298      	uxth	r0, r3
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f000 f9b9 	bl	800d85c <USB_WritePacket>
 800d4ea:	e105      	b.n	800d6f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	0151      	lsls	r1, r2, #5
 800d4fe:	69fa      	ldr	r2, [r7, #28]
 800d500:	440a      	add	r2, r1
 800d502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d506:	0cdb      	lsrs	r3, r3, #19
 800d508:	04db      	lsls	r3, r3, #19
 800d50a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	015a      	lsls	r2, r3, #5
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	4413      	add	r3, r2
 800d514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	69ba      	ldr	r2, [r7, #24]
 800d51c:	0151      	lsls	r1, r2, #5
 800d51e:	69fa      	ldr	r2, [r7, #28]
 800d520:	440a      	add	r2, r1
 800d522:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d526:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d52a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d52e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d132      	bne.n	800d59c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	689a      	ldr	r2, [r3, #8]
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	689a      	ldr	r2, [r3, #8]
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d54e:	69bb      	ldr	r3, [r7, #24]
 800d550:	015a      	lsls	r2, r3, #5
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	4413      	add	r3, r2
 800d556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d55a:	691a      	ldr	r2, [r3, #16]
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d564:	69b9      	ldr	r1, [r7, #24]
 800d566:	0148      	lsls	r0, r1, #5
 800d568:	69f9      	ldr	r1, [r7, #28]
 800d56a:	4401      	add	r1, r0
 800d56c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d570:	4313      	orrs	r3, r2
 800d572:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	015a      	lsls	r2, r3, #5
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	4413      	add	r3, r2
 800d57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d580:	691b      	ldr	r3, [r3, #16]
 800d582:	69ba      	ldr	r2, [r7, #24]
 800d584:	0151      	lsls	r1, r2, #5
 800d586:	69fa      	ldr	r2, [r7, #28]
 800d588:	440a      	add	r2, r1
 800d58a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d58e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d592:	6113      	str	r3, [r2, #16]
 800d594:	e062      	b.n	800d65c <USB_EPStartXfer+0x490>
 800d596:	bf00      	nop
 800d598:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d123      	bne.n	800d5ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	015a      	lsls	r2, r3, #5
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b0:	691a      	ldr	r2, [r3, #16]
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5ba:	69b9      	ldr	r1, [r7, #24]
 800d5bc:	0148      	lsls	r0, r1, #5
 800d5be:	69f9      	ldr	r1, [r7, #28]
 800d5c0:	4401      	add	r1, r0
 800d5c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	015a      	lsls	r2, r3, #5
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	69ba      	ldr	r2, [r7, #24]
 800d5da:	0151      	lsls	r1, r2, #5
 800d5dc:	69fa      	ldr	r2, [r7, #28]
 800d5de:	440a      	add	r2, r1
 800d5e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d5e8:	6113      	str	r3, [r2, #16]
 800d5ea:	e037      	b.n	800d65c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	691a      	ldr	r2, [r3, #16]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	1e5a      	subs	r2, r3, #1
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d600:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	8afa      	ldrh	r2, [r7, #22]
 800d608:	fb03 f202 	mul.w	r2, r3, r2
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	4413      	add	r3, r2
 800d618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d61c:	691a      	ldr	r2, [r3, #16]
 800d61e:	8afb      	ldrh	r3, [r7, #22]
 800d620:	04d9      	lsls	r1, r3, #19
 800d622:	4b38      	ldr	r3, [pc, #224]	@ (800d704 <USB_EPStartXfer+0x538>)
 800d624:	400b      	ands	r3, r1
 800d626:	69b9      	ldr	r1, [r7, #24]
 800d628:	0148      	lsls	r0, r1, #5
 800d62a:	69f9      	ldr	r1, [r7, #28]
 800d62c:	4401      	add	r1, r0
 800d62e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d632:	4313      	orrs	r3, r2
 800d634:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	015a      	lsls	r2, r3, #5
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	4413      	add	r3, r2
 800d63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d642:	691a      	ldr	r2, [r3, #16]
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d64c:	69b9      	ldr	r1, [r7, #24]
 800d64e:	0148      	lsls	r0, r1, #5
 800d650:	69f9      	ldr	r1, [r7, #28]
 800d652:	4401      	add	r1, r0
 800d654:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d658:	4313      	orrs	r3, r2
 800d65a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d65c:	79fb      	ldrb	r3, [r7, #7]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d10d      	bne.n	800d67e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d009      	beq.n	800d67e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	68d9      	ldr	r1, [r3, #12]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	015a      	lsls	r2, r3, #5
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	4413      	add	r3, r2
 800d676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d67a:	460a      	mov	r2, r1
 800d67c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	791b      	ldrb	r3, [r3, #4]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d128      	bne.n	800d6d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d692:	2b00      	cmp	r3, #0
 800d694:	d110      	bne.n	800d6b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	015a      	lsls	r2, r3, #5
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	4413      	add	r3, r2
 800d69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	69ba      	ldr	r2, [r7, #24]
 800d6a6:	0151      	lsls	r1, r2, #5
 800d6a8:	69fa      	ldr	r2, [r7, #28]
 800d6aa:	440a      	add	r2, r1
 800d6ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d6b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d6b4:	6013      	str	r3, [r2, #0]
 800d6b6:	e00f      	b.n	800d6d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	69ba      	ldr	r2, [r7, #24]
 800d6c8:	0151      	lsls	r1, r2, #5
 800d6ca:	69fa      	ldr	r2, [r7, #28]
 800d6cc:	440a      	add	r2, r1
 800d6ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d6d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d6d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	0151      	lsls	r1, r2, #5
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	440a      	add	r2, r1
 800d6ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d6f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d6f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3720      	adds	r7, #32
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	1ff80000 	.word	0x1ff80000

0800d708 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d708:	b480      	push	{r7}
 800d70a:	b087      	sub	sp, #28
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d716:	2300      	movs	r3, #0
 800d718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	785b      	ldrb	r3, [r3, #1]
 800d722:	2b01      	cmp	r3, #1
 800d724:	d14a      	bne.n	800d7bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d73a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d73e:	f040 8086 	bne.w	800d84e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	015a      	lsls	r2, r3, #5
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	7812      	ldrb	r2, [r2, #0]
 800d756:	0151      	lsls	r1, r2, #5
 800d758:	693a      	ldr	r2, [r7, #16]
 800d75a:	440a      	add	r2, r1
 800d75c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d760:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d764:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	015a      	lsls	r2, r3, #5
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	4413      	add	r3, r2
 800d770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	7812      	ldrb	r2, [r2, #0]
 800d77a:	0151      	lsls	r1, r2, #5
 800d77c:	693a      	ldr	r2, [r7, #16]
 800d77e:	440a      	add	r2, r1
 800d780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d784:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d796:	4293      	cmp	r3, r2
 800d798:	d902      	bls.n	800d7a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	75fb      	strb	r3, [r7, #23]
          break;
 800d79e:	e056      	b.n	800d84e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	015a      	lsls	r2, r3, #5
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7b8:	d0e7      	beq.n	800d78a <USB_EPStopXfer+0x82>
 800d7ba:	e048      	b.n	800d84e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	015a      	lsls	r2, r3, #5
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7d4:	d13b      	bne.n	800d84e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	7812      	ldrb	r2, [r2, #0]
 800d7ea:	0151      	lsls	r1, r2, #5
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	440a      	add	r2, r1
 800d7f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d7f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d7f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	4413      	add	r3, r2
 800d804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	7812      	ldrb	r2, [r2, #0]
 800d80e:	0151      	lsls	r1, r2, #5
 800d810:	693a      	ldr	r2, [r7, #16]
 800d812:	440a      	add	r2, r1
 800d814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d818:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d81c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	3301      	adds	r3, #1
 800d822:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d902      	bls.n	800d834 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d82e:	2301      	movs	r3, #1
 800d830:	75fb      	strb	r3, [r7, #23]
          break;
 800d832:	e00c      	b.n	800d84e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	015a      	lsls	r2, r3, #5
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	4413      	add	r3, r2
 800d83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d848:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d84c:	d0e7      	beq.n	800d81e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d850:	4618      	mov	r0, r3
 800d852:	371c      	adds	r7, #28
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b089      	sub	sp, #36	@ 0x24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	4611      	mov	r1, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	460b      	mov	r3, r1
 800d86c:	71fb      	strb	r3, [r7, #7]
 800d86e:	4613      	mov	r3, r2
 800d870:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d87a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d123      	bne.n	800d8ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d882:	88bb      	ldrh	r3, [r7, #4]
 800d884:	3303      	adds	r3, #3
 800d886:	089b      	lsrs	r3, r3, #2
 800d888:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d88a:	2300      	movs	r3, #0
 800d88c:	61bb      	str	r3, [r7, #24]
 800d88e:	e018      	b.n	800d8c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	031a      	lsls	r2, r3, #12
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	4413      	add	r3, r2
 800d898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d89c:	461a      	mov	r2, r3
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	61bb      	str	r3, [r7, #24]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d3e2      	bcc.n	800d890 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3724      	adds	r7, #36	@ 0x24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b08b      	sub	sp, #44	@ 0x2c
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d8ee:	88fb      	ldrh	r3, [r7, #6]
 800d8f0:	089b      	lsrs	r3, r3, #2
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d8f6:	88fb      	ldrh	r3, [r7, #6]
 800d8f8:	f003 0303 	and.w	r3, r3, #3
 800d8fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d8fe:	2300      	movs	r3, #0
 800d900:	623b      	str	r3, [r7, #32]
 800d902:	e014      	b.n	800d92e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d912:	3301      	adds	r3, #1
 800d914:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d918:	3301      	adds	r3, #1
 800d91a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d91e:	3301      	adds	r3, #1
 800d920:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d924:	3301      	adds	r3, #1
 800d926:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	3301      	adds	r3, #1
 800d92c:	623b      	str	r3, [r7, #32]
 800d92e:	6a3a      	ldr	r2, [r7, #32]
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	429a      	cmp	r2, r3
 800d934:	d3e6      	bcc.n	800d904 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d936:	8bfb      	ldrh	r3, [r7, #30]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d01e      	beq.n	800d97a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d93c:	2300      	movs	r3, #0
 800d93e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d946:	461a      	mov	r2, r3
 800d948:	f107 0310 	add.w	r3, r7, #16
 800d94c:	6812      	ldr	r2, [r2, #0]
 800d94e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d950:	693a      	ldr	r2, [r7, #16]
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	b2db      	uxtb	r3, r3
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	fa22 f303 	lsr.w	r3, r2, r3
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	701a      	strb	r2, [r3, #0]
      i++;
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	3301      	adds	r3, #1
 800d966:	623b      	str	r3, [r7, #32]
      pDest++;
 800d968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d96a:	3301      	adds	r3, #1
 800d96c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d96e:	8bfb      	ldrh	r3, [r7, #30]
 800d970:	3b01      	subs	r3, #1
 800d972:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d974:	8bfb      	ldrh	r3, [r7, #30]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1ea      	bne.n	800d950 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	372c      	adds	r7, #44	@ 0x2c
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	785b      	ldrb	r3, [r3, #1]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d12c      	bne.n	800d9fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	015a      	lsls	r2, r3, #5
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	db12      	blt.n	800d9dc <USB_EPSetStall+0x54>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00f      	beq.n	800d9dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	015a      	lsls	r2, r3, #5
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	0151      	lsls	r1, r2, #5
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	440a      	add	r2, r1
 800d9d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d9d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d9da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	68ba      	ldr	r2, [r7, #8]
 800d9ec:	0151      	lsls	r1, r2, #5
 800d9ee:	68fa      	ldr	r2, [r7, #12]
 800d9f0:	440a      	add	r2, r1
 800d9f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d9f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	e02b      	b.n	800da56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	db12      	blt.n	800da36 <USB_EPSetStall+0xae>
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00f      	beq.n	800da36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	015a      	lsls	r2, r3, #5
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	4413      	add	r3, r2
 800da1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	0151      	lsls	r1, r2, #5
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	440a      	add	r2, r1
 800da2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800da34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	015a      	lsls	r2, r3, #5
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4413      	add	r3, r2
 800da3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	0151      	lsls	r1, r2, #5
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	440a      	add	r2, r1
 800da4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800da54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	785b      	ldrb	r3, [r3, #1]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d128      	bne.n	800dad2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	015a      	lsls	r2, r3, #5
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	4413      	add	r3, r2
 800da88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68ba      	ldr	r2, [r7, #8]
 800da90:	0151      	lsls	r1, r2, #5
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	440a      	add	r2, r1
 800da96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	791b      	ldrb	r3, [r3, #4]
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d003      	beq.n	800dab0 <USB_EPClearStall+0x4c>
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	791b      	ldrb	r3, [r3, #4]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d138      	bne.n	800db22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	015a      	lsls	r2, r3, #5
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	4413      	add	r3, r2
 800dab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	0151      	lsls	r1, r2, #5
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	440a      	add	r2, r1
 800dac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800daca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	e027      	b.n	800db22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	015a      	lsls	r2, r3, #5
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	4413      	add	r3, r2
 800dada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	0151      	lsls	r1, r2, #5
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	440a      	add	r2, r1
 800dae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800daec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800daf0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	791b      	ldrb	r3, [r3, #4]
 800daf6:	2b03      	cmp	r3, #3
 800daf8:	d003      	beq.n	800db02 <USB_EPClearStall+0x9e>
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	791b      	ldrb	r3, [r3, #4]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d10f      	bne.n	800db22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	015a      	lsls	r2, r3, #5
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	4413      	add	r3, r2
 800db0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	0151      	lsls	r1, r2, #5
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	440a      	add	r2, r1
 800db18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db4e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800db52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	78fb      	ldrb	r3, [r7, #3]
 800db5e:	011b      	lsls	r3, r3, #4
 800db60:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800db64:	68f9      	ldr	r1, [r7, #12]
 800db66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800db6a:	4313      	orrs	r3, r2
 800db6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800db6e:	2300      	movs	r3, #0
}
 800db70:	4618      	mov	r0, r3
 800db72:	3714      	adds	r7, #20
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db96:	f023 0303 	bic.w	r3, r3, #3
 800db9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbaa:	f023 0302 	bic.w	r3, r3, #2
 800dbae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3714      	adds	r7, #20
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	b085      	sub	sp, #20
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68fa      	ldr	r2, [r7, #12]
 800dbd4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dbd8:	f023 0303 	bic.w	r3, r3, #3
 800dbdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dbf2:	2300      	movs	r3, #0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3714      	adds	r7, #20
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	4013      	ands	r3, r2
 800dc16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dc18:	68fb      	ldr	r3, [r7, #12]
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr

0800dc26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc26:	b480      	push	{r7}
 800dc28:	b085      	sub	sp, #20
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc42:	69db      	ldr	r3, [r3, #28]
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	4013      	ands	r3, r2
 800dc48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	0c1b      	lsrs	r3, r3, #16
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc6c:	699b      	ldr	r3, [r3, #24]
 800dc6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	4013      	ands	r3, r2
 800dc7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	b29b      	uxth	r3, r3
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr

0800dc8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc8e:	b480      	push	{r7}
 800dc90:	b085      	sub	sp, #20
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	6078      	str	r0, [r7, #4]
 800dc96:	460b      	mov	r3, r1
 800dc98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dc9e:	78fb      	ldrb	r3, [r7, #3]
 800dca0:	015a      	lsls	r2, r3, #5
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	4413      	add	r3, r2
 800dca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	68ba      	ldr	r2, [r7, #8]
 800dcb8:	4013      	ands	r3, r2
 800dcba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dcbc:	68bb      	ldr	r3, [r7, #8]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc8:	4770      	bx	lr

0800dcca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dcca:	b480      	push	{r7}
 800dccc:	b087      	sub	sp, #28
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dcee:	78fb      	ldrb	r3, [r7, #3]
 800dcf0:	f003 030f 	and.w	r3, r3, #15
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	fa22 f303 	lsr.w	r3, r2, r3
 800dcfa:	01db      	lsls	r3, r3, #7
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dd04:	78fb      	ldrb	r3, [r7, #3]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	693a      	ldr	r2, [r7, #16]
 800dd14:	4013      	ands	r3, r2
 800dd16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dd18:	68bb      	ldr	r3, [r7, #8]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	371c      	adds	r7, #28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr

0800dd26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dd26:	b480      	push	{r7}
 800dd28:	b083      	sub	sp, #12
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	f003 0301 	and.w	r3, r3, #1
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800dd42:	b480      	push	{r7}
 800dd44:	b085      	sub	sp, #20
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dd5c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800dd60:	f023 0307 	bic.w	r3, r3, #7
 800dd64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	460b      	mov	r3, r1
 800dd92:	607a      	str	r2, [r7, #4]
 800dd94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	333c      	adds	r3, #60	@ 0x3c
 800dd9e:	3304      	adds	r3, #4
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	4a26      	ldr	r2, [pc, #152]	@ (800de40 <USB_EP0_OutStart+0xb8>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d90a      	bls.n	800ddc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ddb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ddbc:	d101      	bne.n	800ddc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e037      	b.n	800de32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddc8:	461a      	mov	r2, r3
 800ddca:	2300      	movs	r3, #0
 800ddcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dddc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dde0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dde8:	691b      	ldr	r3, [r3, #16]
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ddf0:	f043 0318 	orr.w	r3, r3, #24
 800ddf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800de08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800de0a:	7afb      	ldrb	r3, [r7, #11]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d10f      	bne.n	800de30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de16:	461a      	mov	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	697a      	ldr	r2, [r7, #20]
 800de26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800de2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800de2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	371c      	adds	r7, #28
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	4f54300a 	.word	0x4f54300a

0800de44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de44:	b480      	push	{r7}
 800de46:	b085      	sub	sp, #20
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3301      	adds	r3, #1
 800de54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de5c:	d901      	bls.n	800de62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800de5e:	2303      	movs	r3, #3
 800de60:	e01b      	b.n	800de9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	daf2      	bge.n	800de50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	f043 0201 	orr.w	r2, r3, #1
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	3301      	adds	r3, #1
 800de7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de86:	d901      	bls.n	800de8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de88:	2303      	movs	r3, #3
 800de8a:	e006      	b.n	800de9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	2b01      	cmp	r3, #1
 800de96:	d0f0      	beq.n	800de7a <USB_CoreReset+0x36>

  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
	...

0800dea8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	460b      	mov	r3, r1
 800deb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800deb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800deb8:	f002 fd00 	bl	80108bc <USBD_static_malloc>
 800debc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d109      	bne.n	800ded8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	32b0      	adds	r2, #176	@ 0xb0
 800dece:	2100      	movs	r1, #0
 800ded0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ded4:	2302      	movs	r3, #2
 800ded6:	e0d4      	b.n	800e082 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ded8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dedc:	2100      	movs	r1, #0
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f002 fd52 	bl	8010988 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	32b0      	adds	r2, #176	@ 0xb0
 800deee:	68f9      	ldr	r1, [r7, #12]
 800def0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	32b0      	adds	r2, #176	@ 0xb0
 800defe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7c1b      	ldrb	r3, [r3, #16]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d138      	bne.n	800df82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df10:	4b5e      	ldr	r3, [pc, #376]	@ (800e08c <USBD_CDC_Init+0x1e4>)
 800df12:	7819      	ldrb	r1, [r3, #0]
 800df14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df18:	2202      	movs	r2, #2
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f002 fbab 	bl	8010676 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df20:	4b5a      	ldr	r3, [pc, #360]	@ (800e08c <USBD_CDC_Init+0x1e4>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f003 020f 	and.w	r2, r3, #15
 800df28:	6879      	ldr	r1, [r7, #4]
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	440b      	add	r3, r1
 800df34:	3324      	adds	r3, #36	@ 0x24
 800df36:	2201      	movs	r2, #1
 800df38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df3a:	4b55      	ldr	r3, [pc, #340]	@ (800e090 <USBD_CDC_Init+0x1e8>)
 800df3c:	7819      	ldrb	r1, [r3, #0]
 800df3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df42:	2202      	movs	r2, #2
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f002 fb96 	bl	8010676 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df4a:	4b51      	ldr	r3, [pc, #324]	@ (800e090 <USBD_CDC_Init+0x1e8>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	f003 020f 	and.w	r2, r3, #15
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	4613      	mov	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4413      	add	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	440b      	add	r3, r1
 800df5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df62:	2201      	movs	r2, #1
 800df64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df66:	4b4b      	ldr	r3, [pc, #300]	@ (800e094 <USBD_CDC_Init+0x1ec>)
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f003 020f 	and.w	r2, r3, #15
 800df6e:	6879      	ldr	r1, [r7, #4]
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	440b      	add	r3, r1
 800df7a:	3326      	adds	r3, #38	@ 0x26
 800df7c:	2210      	movs	r2, #16
 800df7e:	801a      	strh	r2, [r3, #0]
 800df80:	e035      	b.n	800dfee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df82:	4b42      	ldr	r3, [pc, #264]	@ (800e08c <USBD_CDC_Init+0x1e4>)
 800df84:	7819      	ldrb	r1, [r3, #0]
 800df86:	2340      	movs	r3, #64	@ 0x40
 800df88:	2202      	movs	r2, #2
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f002 fb73 	bl	8010676 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df90:	4b3e      	ldr	r3, [pc, #248]	@ (800e08c <USBD_CDC_Init+0x1e4>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	f003 020f 	and.w	r2, r3, #15
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	4613      	mov	r3, r2
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	4413      	add	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	440b      	add	r3, r1
 800dfa4:	3324      	adds	r3, #36	@ 0x24
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dfaa:	4b39      	ldr	r3, [pc, #228]	@ (800e090 <USBD_CDC_Init+0x1e8>)
 800dfac:	7819      	ldrb	r1, [r3, #0]
 800dfae:	2340      	movs	r3, #64	@ 0x40
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f002 fb5f 	bl	8010676 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dfb8:	4b35      	ldr	r3, [pc, #212]	@ (800e090 <USBD_CDC_Init+0x1e8>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 020f 	and.w	r2, r3, #15
 800dfc0:	6879      	ldr	r1, [r7, #4]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4413      	add	r3, r2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	440b      	add	r3, r1
 800dfcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dfd4:	4b2f      	ldr	r3, [pc, #188]	@ (800e094 <USBD_CDC_Init+0x1ec>)
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	f003 020f 	and.w	r2, r3, #15
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	440b      	add	r3, r1
 800dfe8:	3326      	adds	r3, #38	@ 0x26
 800dfea:	2210      	movs	r2, #16
 800dfec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dfee:	4b29      	ldr	r3, [pc, #164]	@ (800e094 <USBD_CDC_Init+0x1ec>)
 800dff0:	7819      	ldrb	r1, [r3, #0]
 800dff2:	2308      	movs	r3, #8
 800dff4:	2203      	movs	r2, #3
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f002 fb3d 	bl	8010676 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dffc:	4b25      	ldr	r3, [pc, #148]	@ (800e094 <USBD_CDC_Init+0x1ec>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 020f 	and.w	r2, r3, #15
 800e004:	6879      	ldr	r1, [r7, #4]
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	440b      	add	r3, r1
 800e010:	3324      	adds	r3, #36	@ 0x24
 800e012:	2201      	movs	r2, #1
 800e014:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e024:	687a      	ldr	r2, [r7, #4]
 800e026:	33b0      	adds	r3, #176	@ 0xb0
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	4413      	add	r3, r2
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	2200      	movs	r2, #0
 800e036:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e04c:	2302      	movs	r3, #2
 800e04e:	e018      	b.n	800e082 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	7c1b      	ldrb	r3, [r3, #16]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10a      	bne.n	800e06e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e058:	4b0d      	ldr	r3, [pc, #52]	@ (800e090 <USBD_CDC_Init+0x1e8>)
 800e05a:	7819      	ldrb	r1, [r3, #0]
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f002 fbf4 	bl	8010854 <USBD_LL_PrepareReceive>
 800e06c:	e008      	b.n	800e080 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e06e:	4b08      	ldr	r3, [pc, #32]	@ (800e090 <USBD_CDC_Init+0x1e8>)
 800e070:	7819      	ldrb	r1, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e078:	2340      	movs	r3, #64	@ 0x40
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f002 fbea 	bl	8010854 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e080:	2300      	movs	r3, #0
}
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	200000a3 	.word	0x200000a3
 800e090:	200000a4 	.word	0x200000a4
 800e094:	200000a5 	.word	0x200000a5

0800e098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e0a4:	4b3a      	ldr	r3, [pc, #232]	@ (800e190 <USBD_CDC_DeInit+0xf8>)
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f002 fb09 	bl	80106c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e0b0:	4b37      	ldr	r3, [pc, #220]	@ (800e190 <USBD_CDC_DeInit+0xf8>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	f003 020f 	and.w	r2, r3, #15
 800e0b8:	6879      	ldr	r1, [r7, #4]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4413      	add	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	440b      	add	r3, r1
 800e0c4:	3324      	adds	r3, #36	@ 0x24
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e0ca:	4b32      	ldr	r3, [pc, #200]	@ (800e194 <USBD_CDC_DeInit+0xfc>)
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f002 faf6 	bl	80106c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	@ (800e194 <USBD_CDC_DeInit+0xfc>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	f003 020f 	and.w	r2, r3, #15
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	440b      	add	r3, r1
 800e0ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e0f2:	4b29      	ldr	r3, [pc, #164]	@ (800e198 <USBD_CDC_DeInit+0x100>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f002 fae2 	bl	80106c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e0fe:	4b26      	ldr	r3, [pc, #152]	@ (800e198 <USBD_CDC_DeInit+0x100>)
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	f003 020f 	and.w	r2, r3, #15
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	440b      	add	r3, r1
 800e112:	3324      	adds	r3, #36	@ 0x24
 800e114:	2200      	movs	r2, #0
 800e116:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e118:	4b1f      	ldr	r3, [pc, #124]	@ (800e198 <USBD_CDC_DeInit+0x100>)
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	f003 020f 	and.w	r2, r3, #15
 800e120:	6879      	ldr	r1, [r7, #4]
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	440b      	add	r3, r1
 800e12c:	3326      	adds	r3, #38	@ 0x26
 800e12e:	2200      	movs	r2, #0
 800e130:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	32b0      	adds	r2, #176	@ 0xb0
 800e13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d01f      	beq.n	800e184 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	33b0      	adds	r3, #176	@ 0xb0
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	4413      	add	r3, r2
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	32b0      	adds	r2, #176	@ 0xb0
 800e162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e166:	4618      	mov	r0, r3
 800e168:	f002 fbb6 	bl	80108d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	32b0      	adds	r2, #176	@ 0xb0
 800e176:	2100      	movs	r1, #0
 800e178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	200000a3 	.word	0x200000a3
 800e194:	200000a4 	.word	0x200000a4
 800e198:	200000a5 	.word	0x200000a5

0800e19c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	32b0      	adds	r2, #176	@ 0xb0
 800e1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d101      	bne.n	800e1cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e0bf      	b.n	800e34c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d050      	beq.n	800e27a <USBD_CDC_Setup+0xde>
 800e1d8:	2b20      	cmp	r3, #32
 800e1da:	f040 80af 	bne.w	800e33c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	88db      	ldrh	r3, [r3, #6]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d03a      	beq.n	800e25c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	b25b      	sxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	da1b      	bge.n	800e228 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	33b0      	adds	r3, #176	@ 0xb0
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	4413      	add	r3, r2
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	683a      	ldr	r2, [r7, #0]
 800e204:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e206:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e208:	683a      	ldr	r2, [r7, #0]
 800e20a:	88d2      	ldrh	r2, [r2, #6]
 800e20c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	88db      	ldrh	r3, [r3, #6]
 800e212:	2b07      	cmp	r3, #7
 800e214:	bf28      	it	cs
 800e216:	2307      	movcs	r3, #7
 800e218:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	89fa      	ldrh	r2, [r7, #14]
 800e21e:	4619      	mov	r1, r3
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f001 fd93 	bl	800fd4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e226:	e090      	b.n	800e34a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	785a      	ldrb	r2, [r3, #1]
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	88db      	ldrh	r3, [r3, #6]
 800e236:	2b3f      	cmp	r3, #63	@ 0x3f
 800e238:	d803      	bhi.n	800e242 <USBD_CDC_Setup+0xa6>
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	88db      	ldrh	r3, [r3, #6]
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	e000      	b.n	800e244 <USBD_CDC_Setup+0xa8>
 800e242:	2240      	movs	r2, #64	@ 0x40
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e24a:	6939      	ldr	r1, [r7, #16]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e252:	461a      	mov	r2, r3
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f001 fda5 	bl	800fda4 <USBD_CtlPrepareRx>
      break;
 800e25a:	e076      	b.n	800e34a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	33b0      	adds	r3, #176	@ 0xb0
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	7850      	ldrb	r0, [r2, #1]
 800e272:	2200      	movs	r2, #0
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	4798      	blx	r3
      break;
 800e278:	e067      	b.n	800e34a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	785b      	ldrb	r3, [r3, #1]
 800e27e:	2b0b      	cmp	r3, #11
 800e280:	d851      	bhi.n	800e326 <USBD_CDC_Setup+0x18a>
 800e282:	a201      	add	r2, pc, #4	@ (adr r2, 800e288 <USBD_CDC_Setup+0xec>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e2b9 	.word	0x0800e2b9
 800e28c:	0800e335 	.word	0x0800e335
 800e290:	0800e327 	.word	0x0800e327
 800e294:	0800e327 	.word	0x0800e327
 800e298:	0800e327 	.word	0x0800e327
 800e29c:	0800e327 	.word	0x0800e327
 800e2a0:	0800e327 	.word	0x0800e327
 800e2a4:	0800e327 	.word	0x0800e327
 800e2a8:	0800e327 	.word	0x0800e327
 800e2ac:	0800e327 	.word	0x0800e327
 800e2b0:	0800e2e3 	.word	0x0800e2e3
 800e2b4:	0800e30d 	.word	0x0800e30d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b03      	cmp	r3, #3
 800e2c2:	d107      	bne.n	800e2d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2c4:	f107 030a 	add.w	r3, r7, #10
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f001 fd3d 	bl	800fd4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2d2:	e032      	b.n	800e33a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f001 fcbb 	bl	800fc52 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2dc:	2303      	movs	r3, #3
 800e2de:	75fb      	strb	r3, [r7, #23]
          break;
 800e2e0:	e02b      	b.n	800e33a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	2b03      	cmp	r3, #3
 800e2ec:	d107      	bne.n	800e2fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ee:	f107 030d 	add.w	r3, r7, #13
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f001 fd28 	bl	800fd4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2fc:	e01d      	b.n	800e33a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f001 fca6 	bl	800fc52 <USBD_CtlError>
            ret = USBD_FAIL;
 800e306:	2303      	movs	r3, #3
 800e308:	75fb      	strb	r3, [r7, #23]
          break;
 800e30a:	e016      	b.n	800e33a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e312:	b2db      	uxtb	r3, r3
 800e314:	2b03      	cmp	r3, #3
 800e316:	d00f      	beq.n	800e338 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e318:	6839      	ldr	r1, [r7, #0]
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f001 fc99 	bl	800fc52 <USBD_CtlError>
            ret = USBD_FAIL;
 800e320:	2303      	movs	r3, #3
 800e322:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e324:	e008      	b.n	800e338 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 fc92 	bl	800fc52 <USBD_CtlError>
          ret = USBD_FAIL;
 800e32e:	2303      	movs	r3, #3
 800e330:	75fb      	strb	r3, [r7, #23]
          break;
 800e332:	e002      	b.n	800e33a <USBD_CDC_Setup+0x19e>
          break;
 800e334:	bf00      	nop
 800e336:	e008      	b.n	800e34a <USBD_CDC_Setup+0x1ae>
          break;
 800e338:	bf00      	nop
      }
      break;
 800e33a:	e006      	b.n	800e34a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f001 fc87 	bl	800fc52 <USBD_CtlError>
      ret = USBD_FAIL;
 800e344:	2303      	movs	r3, #3
 800e346:	75fb      	strb	r3, [r7, #23]
      break;
 800e348:	bf00      	nop
  }

  return (uint8_t)ret;
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3718      	adds	r7, #24
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	460b      	mov	r3, r1
 800e35e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	32b0      	adds	r2, #176	@ 0xb0
 800e372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d101      	bne.n	800e37e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e37a:	2303      	movs	r3, #3
 800e37c:	e065      	b.n	800e44a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	32b0      	adds	r2, #176	@ 0xb0
 800e388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e38c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e38e:	78fb      	ldrb	r3, [r7, #3]
 800e390:	f003 020f 	and.w	r2, r3, #15
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4613      	mov	r3, r2
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	440b      	add	r3, r1
 800e3a0:	3318      	adds	r3, #24
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d02f      	beq.n	800e408 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e3a8:	78fb      	ldrb	r3, [r7, #3]
 800e3aa:	f003 020f 	and.w	r2, r3, #15
 800e3ae:	6879      	ldr	r1, [r7, #4]
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	440b      	add	r3, r1
 800e3ba:	3318      	adds	r3, #24
 800e3bc:	681a      	ldr	r2, [r3, #0]
 800e3be:	78fb      	ldrb	r3, [r7, #3]
 800e3c0:	f003 010f 	and.w	r1, r3, #15
 800e3c4:	68f8      	ldr	r0, [r7, #12]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	440b      	add	r3, r1
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4403      	add	r3, r0
 800e3d0:	331c      	adds	r3, #28
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e3d8:	fb01 f303 	mul.w	r3, r1, r3
 800e3dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d112      	bne.n	800e408 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e3e2:	78fb      	ldrb	r3, [r7, #3]
 800e3e4:	f003 020f 	and.w	r2, r3, #15
 800e3e8:	6879      	ldr	r1, [r7, #4]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	4413      	add	r3, r2
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	440b      	add	r3, r1
 800e3f4:	3318      	adds	r3, #24
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3fa:	78f9      	ldrb	r1, [r7, #3]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	2200      	movs	r2, #0
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f002 fa06 	bl	8010812 <USBD_LL_Transmit>
 800e406:	e01f      	b.n	800e448 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	33b0      	adds	r3, #176	@ 0xb0
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4413      	add	r3, r2
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	691b      	ldr	r3, [r3, #16]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d010      	beq.n	800e448 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	33b0      	adds	r3, #176	@ 0xb0
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e43e:	68ba      	ldr	r2, [r7, #8]
 800e440:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e444:	78fa      	ldrb	r2, [r7, #3]
 800e446:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e448:	2300      	movs	r3, #0
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	460b      	mov	r3, r1
 800e45c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	32b0      	adds	r2, #176	@ 0xb0
 800e468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e46c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	32b0      	adds	r2, #176	@ 0xb0
 800e478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e480:	2303      	movs	r3, #3
 800e482:	e01a      	b.n	800e4ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	4619      	mov	r1, r3
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f002 fa04 	bl	8010896 <USBD_LL_GetRxDataSize>
 800e48e:	4602      	mov	r2, r0
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	33b0      	adds	r3, #176	@ 0xb0
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e4b4:	4611      	mov	r1, r2
 800e4b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3710      	adds	r7, #16
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b084      	sub	sp, #16
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	32b0      	adds	r2, #176	@ 0xb0
 800e4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d101      	bne.n	800e4e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	e024      	b.n	800e52e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	33b0      	adds	r3, #176	@ 0xb0
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	4413      	add	r3, r2
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d019      	beq.n	800e52c <USBD_CDC_EP0_RxReady+0x6a>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e4fe:	2bff      	cmp	r3, #255	@ 0xff
 800e500:	d014      	beq.n	800e52c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	33b0      	adds	r3, #176	@ 0xb0
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e51a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e522:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	22ff      	movs	r2, #255	@ 0xff
 800e528:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
	...

0800e538 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e540:	2182      	movs	r1, #130	@ 0x82
 800e542:	4818      	ldr	r0, [pc, #96]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e544:	f000 fd4f 	bl	800efe6 <USBD_GetEpDesc>
 800e548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e54a:	2101      	movs	r1, #1
 800e54c:	4815      	ldr	r0, [pc, #84]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e54e:	f000 fd4a 	bl	800efe6 <USBD_GetEpDesc>
 800e552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e554:	2181      	movs	r1, #129	@ 0x81
 800e556:	4813      	ldr	r0, [pc, #76]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e558:	f000 fd45 	bl	800efe6 <USBD_GetEpDesc>
 800e55c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	2210      	movs	r2, #16
 800e568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d006      	beq.n	800e57e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	2200      	movs	r2, #0
 800e574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e578:	711a      	strb	r2, [r3, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d006      	beq.n	800e592 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e58c:	711a      	strb	r2, [r3, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2243      	movs	r2, #67	@ 0x43
 800e596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e598:	4b02      	ldr	r3, [pc, #8]	@ (800e5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3718      	adds	r7, #24
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000060 	.word	0x20000060

0800e5a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b086      	sub	sp, #24
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5b0:	2182      	movs	r1, #130	@ 0x82
 800e5b2:	4818      	ldr	r0, [pc, #96]	@ (800e614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5b4:	f000 fd17 	bl	800efe6 <USBD_GetEpDesc>
 800e5b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5ba:	2101      	movs	r1, #1
 800e5bc:	4815      	ldr	r0, [pc, #84]	@ (800e614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5be:	f000 fd12 	bl	800efe6 <USBD_GetEpDesc>
 800e5c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5c4:	2181      	movs	r1, #129	@ 0x81
 800e5c6:	4813      	ldr	r0, [pc, #76]	@ (800e614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e5c8:	f000 fd0d 	bl	800efe6 <USBD_GetEpDesc>
 800e5cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2210      	movs	r2, #16
 800e5d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d006      	beq.n	800e5ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	711a      	strb	r2, [r3, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f042 0202 	orr.w	r2, r2, #2
 800e5ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d006      	beq.n	800e602 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	711a      	strb	r2, [r3, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f042 0202 	orr.w	r2, r2, #2
 800e600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2243      	movs	r2, #67	@ 0x43
 800e606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e608:	4b02      	ldr	r3, [pc, #8]	@ (800e614 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3718      	adds	r7, #24
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	20000060 	.word	0x20000060

0800e618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e620:	2182      	movs	r1, #130	@ 0x82
 800e622:	4818      	ldr	r0, [pc, #96]	@ (800e684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e624:	f000 fcdf 	bl	800efe6 <USBD_GetEpDesc>
 800e628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e62a:	2101      	movs	r1, #1
 800e62c:	4815      	ldr	r0, [pc, #84]	@ (800e684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e62e:	f000 fcda 	bl	800efe6 <USBD_GetEpDesc>
 800e632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e634:	2181      	movs	r1, #129	@ 0x81
 800e636:	4813      	ldr	r0, [pc, #76]	@ (800e684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e638:	f000 fcd5 	bl	800efe6 <USBD_GetEpDesc>
 800e63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d002      	beq.n	800e64a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	2210      	movs	r2, #16
 800e648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d006      	beq.n	800e65e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	2200      	movs	r2, #0
 800e654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e658:	711a      	strb	r2, [r3, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e66c:	711a      	strb	r2, [r3, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2243      	movs	r2, #67	@ 0x43
 800e676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e678:	4b02      	ldr	r3, [pc, #8]	@ (800e684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	20000060 	.word	0x20000060

0800e688 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	220a      	movs	r2, #10
 800e694:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e696:	4b03      	ldr	r3, [pc, #12]	@ (800e6a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	2000001c 	.word	0x2000001c

0800e6a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b083      	sub	sp, #12
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e6b8:	2303      	movs	r3, #3
 800e6ba:	e009      	b.n	800e6d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	33b0      	adds	r3, #176	@ 0xb0
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b087      	sub	sp, #28
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	60b9      	str	r1, [r7, #8]
 800e6e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	32b0      	adds	r2, #176	@ 0xb0
 800e6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d101      	bne.n	800e702 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e6fe:	2303      	movs	r3, #3
 800e700:	e008      	b.n	800e714 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	68ba      	ldr	r2, [r7, #8]
 800e706:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	371c      	adds	r7, #28
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	32b0      	adds	r2, #176	@ 0xb0
 800e734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e738:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d101      	bne.n	800e744 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e740:	2303      	movs	r3, #3
 800e742:	e004      	b.n	800e74e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3714      	adds	r7, #20
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
	...

0800e75c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	32b0      	adds	r2, #176	@ 0xb0
 800e76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e772:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e774:	2301      	movs	r3, #1
 800e776:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d101      	bne.n	800e782 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e77e:	2303      	movs	r3, #3
 800e780:	e025      	b.n	800e7ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d11f      	bne.n	800e7cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2201      	movs	r2, #1
 800e790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e794:	4b10      	ldr	r3, [pc, #64]	@ (800e7d8 <USBD_CDC_TransmitPacket+0x7c>)
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	f003 020f 	and.w	r2, r3, #15
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	4413      	add	r3, r2
 800e7aa:	009b      	lsls	r3, r3, #2
 800e7ac:	4403      	add	r3, r0
 800e7ae:	3318      	adds	r3, #24
 800e7b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e7b2:	4b09      	ldr	r3, [pc, #36]	@ (800e7d8 <USBD_CDC_TransmitPacket+0x7c>)
 800e7b4:	7819      	ldrb	r1, [r3, #0]
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f002 f825 	bl	8010812 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	200000a3 	.word	0x200000a3

0800e7dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	32b0      	adds	r2, #176	@ 0xb0
 800e7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	32b0      	adds	r2, #176	@ 0xb0
 800e7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e806:	2303      	movs	r3, #3
 800e808:	e018      	b.n	800e83c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	7c1b      	ldrb	r3, [r3, #16]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10a      	bne.n	800e828 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e812:	4b0c      	ldr	r3, [pc, #48]	@ (800e844 <USBD_CDC_ReceivePacket+0x68>)
 800e814:	7819      	ldrb	r1, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e81c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f002 f817 	bl	8010854 <USBD_LL_PrepareReceive>
 800e826:	e008      	b.n	800e83a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e828:	4b06      	ldr	r3, [pc, #24]	@ (800e844 <USBD_CDC_ReceivePacket+0x68>)
 800e82a:	7819      	ldrb	r1, [r3, #0]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e832:	2340      	movs	r3, #64	@ 0x40
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f002 f80d 	bl	8010854 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	200000a4 	.word	0x200000a4

0800e848 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b086      	sub	sp, #24
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	4613      	mov	r3, r2
 800e854:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d101      	bne.n	800e860 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e85c:	2303      	movs	r3, #3
 800e85e:	e01f      	b.n	800e8a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d003      	beq.n	800e886 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	79fa      	ldrb	r2, [r7, #7]
 800e892:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f001 fe87 	bl	80105a8 <USBD_LL_Init>
 800e89a:	4603      	mov	r3, r0
 800e89c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e8bc:	2303      	movs	r3, #3
 800e8be:	e025      	b.n	800e90c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	683a      	ldr	r2, [r7, #0]
 800e8c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	32ae      	adds	r2, #174	@ 0xae
 800e8d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00f      	beq.n	800e8fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	32ae      	adds	r2, #174	@ 0xae
 800e8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ec:	f107 020e 	add.w	r2, r7, #14
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	4798      	blx	r3
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f001 fe8f 	bl	8010640 <USBD_LL_Start>
 800e922:	4603      	mov	r3, r0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e934:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e936:	4618      	mov	r0, r3
 800e938:	370c      	adds	r7, #12
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr

0800e942 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	460b      	mov	r3, r1
 800e94c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e94e:	2300      	movs	r3, #0
 800e950:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d009      	beq.n	800e970 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	78fa      	ldrb	r2, [r7, #3]
 800e966:	4611      	mov	r1, r2
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	4798      	blx	r3
 800e96c:	4603      	mov	r3, r0
 800e96e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e970:	7bfb      	ldrb	r3, [r7, #15]
}
 800e972:	4618      	mov	r0, r3
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
 800e982:	460b      	mov	r3, r1
 800e984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	78fa      	ldrb	r2, [r7, #3]
 800e994:	4611      	mov	r1, r2
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	4798      	blx	r3
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b084      	sub	sp, #16
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e9be:	6839      	ldr	r1, [r7, #0]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f001 f90c 	bl	800fbde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2201      	movs	r2, #1
 800e9ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e9e2:	f003 031f 	and.w	r3, r3, #31
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d01a      	beq.n	800ea20 <USBD_LL_SetupStage+0x72>
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	d822      	bhi.n	800ea34 <USBD_LL_SetupStage+0x86>
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <USBD_LL_SetupStage+0x4a>
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d00a      	beq.n	800ea0c <USBD_LL_SetupStage+0x5e>
 800e9f6:	e01d      	b.n	800ea34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e9fe:	4619      	mov	r1, r3
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 fb63 	bl	800f0cc <USBD_StdDevReq>
 800ea06:	4603      	mov	r3, r0
 800ea08:	73fb      	strb	r3, [r7, #15]
      break;
 800ea0a:	e020      	b.n	800ea4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ea12:	4619      	mov	r1, r3
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f000 fbcb 	bl	800f1b0 <USBD_StdItfReq>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ea1e:	e016      	b.n	800ea4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ea26:	4619      	mov	r1, r3
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 fc2d 	bl	800f288 <USBD_StdEPReq>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	73fb      	strb	r3, [r7, #15]
      break;
 800ea32:	e00c      	b.n	800ea4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ea3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	4619      	mov	r1, r3
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f001 fe5c 	bl	8010700 <USBD_LL_StallEP>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea4c:	bf00      	nop
  }

  return ret;
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	460b      	mov	r3, r1
 800ea62:	607a      	str	r2, [r7, #4]
 800ea64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ea6a:	7afb      	ldrb	r3, [r7, #11]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d16e      	bne.n	800eb4e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ea76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ea7e:	2b03      	cmp	r3, #3
 800ea80:	f040 8098 	bne.w	800ebb4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	689a      	ldr	r2, [r3, #8]
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	68db      	ldr	r3, [r3, #12]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d913      	bls.n	800eab8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	689a      	ldr	r2, [r3, #8]
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	1ad2      	subs	r2, r2, r3
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	68da      	ldr	r2, [r3, #12]
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	bf28      	it	cs
 800eaaa:	4613      	movcs	r3, r2
 800eaac:	461a      	mov	r2, r3
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f001 f994 	bl	800fdde <USBD_CtlContinueRx>
 800eab6:	e07d      	b.n	800ebb4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eabe:	f003 031f 	and.w	r3, r3, #31
 800eac2:	2b02      	cmp	r3, #2
 800eac4:	d014      	beq.n	800eaf0 <USBD_LL_DataOutStage+0x98>
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d81d      	bhi.n	800eb06 <USBD_LL_DataOutStage+0xae>
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d002      	beq.n	800ead4 <USBD_LL_DataOutStage+0x7c>
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d003      	beq.n	800eada <USBD_LL_DataOutStage+0x82>
 800ead2:	e018      	b.n	800eb06 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ead4:	2300      	movs	r3, #0
 800ead6:	75bb      	strb	r3, [r7, #22]
            break;
 800ead8:	e018      	b.n	800eb0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	4619      	mov	r1, r3
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f000 fa64 	bl	800efb2 <USBD_CoreFindIF>
 800eaea:	4603      	mov	r3, r0
 800eaec:	75bb      	strb	r3, [r7, #22]
            break;
 800eaee:	e00d      	b.n	800eb0c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	4619      	mov	r1, r3
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f000 fa66 	bl	800efcc <USBD_CoreFindEP>
 800eb00:	4603      	mov	r3, r0
 800eb02:	75bb      	strb	r3, [r7, #22]
            break;
 800eb04:	e002      	b.n	800eb0c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eb06:	2300      	movs	r3, #0
 800eb08:	75bb      	strb	r3, [r7, #22]
            break;
 800eb0a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eb0c:	7dbb      	ldrb	r3, [r7, #22]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d119      	bne.n	800eb46 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d113      	bne.n	800eb46 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eb1e:	7dba      	ldrb	r2, [r7, #22]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	32ae      	adds	r2, #174	@ 0xae
 800eb24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d00b      	beq.n	800eb46 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eb2e:	7dba      	ldrb	r2, [r7, #22]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eb36:	7dba      	ldrb	r2, [r7, #22]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	32ae      	adds	r2, #174	@ 0xae
 800eb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb40:	691b      	ldr	r3, [r3, #16]
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f001 f95a 	bl	800fe00 <USBD_CtlSendStatus>
 800eb4c:	e032      	b.n	800ebb4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eb4e:	7afb      	ldrb	r3, [r7, #11]
 800eb50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	4619      	mov	r1, r3
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f000 fa37 	bl	800efcc <USBD_CoreFindEP>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb62:	7dbb      	ldrb	r3, [r7, #22]
 800eb64:	2bff      	cmp	r3, #255	@ 0xff
 800eb66:	d025      	beq.n	800ebb4 <USBD_LL_DataOutStage+0x15c>
 800eb68:	7dbb      	ldrb	r3, [r7, #22]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d122      	bne.n	800ebb4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d117      	bne.n	800ebaa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eb7a:	7dba      	ldrb	r2, [r7, #22]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	32ae      	adds	r2, #174	@ 0xae
 800eb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb84:	699b      	ldr	r3, [r3, #24]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00f      	beq.n	800ebaa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eb8a:	7dba      	ldrb	r2, [r7, #22]
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eb92:	7dba      	ldrb	r2, [r7, #22]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	32ae      	adds	r2, #174	@ 0xae
 800eb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	7afa      	ldrb	r2, [r7, #11]
 800eba0:	4611      	mov	r1, r2
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	4798      	blx	r3
 800eba6:	4603      	mov	r3, r0
 800eba8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ebaa:	7dfb      	ldrb	r3, [r7, #23]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ebb0:	7dfb      	ldrb	r3, [r7, #23]
 800ebb2:	e000      	b.n	800ebb6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ebb4:	2300      	movs	r3, #0
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3718      	adds	r7, #24
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}

0800ebbe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b086      	sub	sp, #24
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	60f8      	str	r0, [r7, #12]
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	607a      	str	r2, [r7, #4]
 800ebca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ebcc:	7afb      	ldrb	r3, [r7, #11]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d16f      	bne.n	800ecb2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3314      	adds	r3, #20
 800ebd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	d15a      	bne.n	800ec98 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	689a      	ldr	r2, [r3, #8]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d914      	bls.n	800ec18 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	689a      	ldr	r2, [r3, #8]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	1ad2      	subs	r2, r2, r3
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	461a      	mov	r2, r3
 800ec02:	6879      	ldr	r1, [r7, #4]
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f001 f8bc 	bl	800fd82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	2100      	movs	r1, #0
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f001 fe1f 	bl	8010854 <USBD_LL_PrepareReceive>
 800ec16:	e03f      	b.n	800ec98 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	68da      	ldr	r2, [r3, #12]
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d11c      	bne.n	800ec5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	685a      	ldr	r2, [r3, #4]
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d316      	bcc.n	800ec5e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d20f      	bcs.n	800ec5e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec3e:	2200      	movs	r2, #0
 800ec40:	2100      	movs	r1, #0
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f001 f89d 	bl	800fd82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec50:	2300      	movs	r3, #0
 800ec52:	2200      	movs	r2, #0
 800ec54:	2100      	movs	r1, #0
 800ec56:	68f8      	ldr	r0, [r7, #12]
 800ec58:	f001 fdfc 	bl	8010854 <USBD_LL_PrepareReceive>
 800ec5c:	e01c      	b.n	800ec98 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d10f      	bne.n	800ec8a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d009      	beq.n	800ec8a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec8a:	2180      	movs	r1, #128	@ 0x80
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f001 fd37 	bl	8010700 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ec92:	68f8      	ldr	r0, [r7, #12]
 800ec94:	f001 f8c7 	bl	800fe26 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d03a      	beq.n	800ed18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7ff fe42 	bl	800e92c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ecb0:	e032      	b.n	800ed18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ecb2:	7afb      	ldrb	r3, [r7, #11]
 800ecb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	4619      	mov	r1, r3
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f000 f985 	bl	800efcc <USBD_CoreFindEP>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	2bff      	cmp	r3, #255	@ 0xff
 800ecca:	d025      	beq.n	800ed18 <USBD_LL_DataInStage+0x15a>
 800eccc:	7dfb      	ldrb	r3, [r7, #23]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d122      	bne.n	800ed18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	2b03      	cmp	r3, #3
 800ecdc:	d11c      	bne.n	800ed18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ecde:	7dfa      	ldrb	r2, [r7, #23]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	32ae      	adds	r2, #174	@ 0xae
 800ece4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece8:	695b      	ldr	r3, [r3, #20]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d014      	beq.n	800ed18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ecee:	7dfa      	ldrb	r2, [r7, #23]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ecf6:	7dfa      	ldrb	r2, [r7, #23]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	32ae      	adds	r2, #174	@ 0xae
 800ecfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed00:	695b      	ldr	r3, [r3, #20]
 800ed02:	7afa      	ldrb	r2, [r7, #11]
 800ed04:	4611      	mov	r1, r2
 800ed06:	68f8      	ldr	r0, [r7, #12]
 800ed08:	4798      	blx	r3
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ed0e:	7dbb      	ldrb	r3, [r7, #22]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d001      	beq.n	800ed18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ed14:	7dbb      	ldrb	r3, [r7, #22]
 800ed16:	e000      	b.n	800ed1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3718      	adds	r7, #24
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b084      	sub	sp, #16
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d014      	beq.n	800ed88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00e      	beq.n	800ed88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	6852      	ldr	r2, [r2, #4]
 800ed76:	b2d2      	uxtb	r2, r2
 800ed78:	4611      	mov	r1, r2
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	4798      	blx	r3
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d001      	beq.n	800ed88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ed84:	2303      	movs	r3, #3
 800ed86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed88:	2340      	movs	r3, #64	@ 0x40
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 fc71 	bl	8010676 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2240      	movs	r2, #64	@ 0x40
 800eda0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eda4:	2340      	movs	r3, #64	@ 0x40
 800eda6:	2200      	movs	r2, #0
 800eda8:	2180      	movs	r1, #128	@ 0x80
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f001 fc63 	bl	8010676 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2201      	movs	r2, #1
 800edb4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2240      	movs	r2, #64	@ 0x40
 800edba:	621a      	str	r2, [r3, #32]

  return ret;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b083      	sub	sp, #12
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	460b      	mov	r3, r1
 800edd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	78fa      	ldrb	r2, [r7, #3]
 800edd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800edd8:	2300      	movs	r3, #0
}
 800edda:	4618      	mov	r0, r3
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b083      	sub	sp, #12
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b04      	cmp	r3, #4
 800edf8:	d006      	beq.n	800ee08 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2204      	movs	r2, #4
 800ee0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ee10:	2300      	movs	r3, #0
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr

0800ee1e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee1e:	b480      	push	{r7}
 800ee20:	b083      	sub	sp, #12
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b04      	cmp	r3, #4
 800ee30:	d106      	bne.n	800ee40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	370c      	adds	r7, #12
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr

0800ee4e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee4e:	b580      	push	{r7, lr}
 800ee50:	b082      	sub	sp, #8
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b03      	cmp	r3, #3
 800ee60:	d110      	bne.n	800ee84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00b      	beq.n	800ee84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee72:	69db      	ldr	r3, [r3, #28]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d005      	beq.n	800ee84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b082      	sub	sp, #8
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	32ae      	adds	r2, #174	@ 0xae
 800eea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d101      	bne.n	800eeb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800eeac:	2303      	movs	r3, #3
 800eeae:	e01c      	b.n	800eeea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d115      	bne.n	800eee8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	32ae      	adds	r2, #174	@ 0xae
 800eec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeca:	6a1b      	ldr	r3, [r3, #32]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d00b      	beq.n	800eee8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	32ae      	adds	r2, #174	@ 0xae
 800eeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eede:	6a1b      	ldr	r3, [r3, #32]
 800eee0:	78fa      	ldrb	r2, [r7, #3]
 800eee2:	4611      	mov	r1, r2
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eee8:	2300      	movs	r3, #0
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3708      	adds	r7, #8
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b082      	sub	sp, #8
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
 800eefa:	460b      	mov	r3, r1
 800eefc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	32ae      	adds	r2, #174	@ 0xae
 800ef08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d101      	bne.n	800ef14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ef10:	2303      	movs	r3, #3
 800ef12:	e01c      	b.n	800ef4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b03      	cmp	r3, #3
 800ef1e:	d115      	bne.n	800ef4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	32ae      	adds	r2, #174	@ 0xae
 800ef2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00b      	beq.n	800ef4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	32ae      	adds	r2, #174	@ 0xae
 800ef3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef44:	78fa      	ldrb	r2, [r7, #3]
 800ef46:	4611      	mov	r1, r2
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ef56:	b480      	push	{r7}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00e      	beq.n	800efa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	687a      	ldr	r2, [r7, #4]
 800ef94:	6852      	ldr	r2, [r2, #4]
 800ef96:	b2d2      	uxtb	r2, r2
 800ef98:	4611      	mov	r1, r2
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	4798      	blx	r3
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d001      	beq.n	800efa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800efa4:	2303      	movs	r3, #3
 800efa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800efa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
 800efba:	460b      	mov	r3, r1
 800efbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	460b      	mov	r3, r1
 800efd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800efd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800efda:	4618      	mov	r0, r3
 800efdc:	370c      	adds	r7, #12
 800efde:	46bd      	mov	sp, r7
 800efe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe4:	4770      	bx	lr

0800efe6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b086      	sub	sp, #24
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	460b      	mov	r3, r1
 800eff0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800effa:	2300      	movs	r3, #0
 800effc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	885b      	ldrh	r3, [r3, #2]
 800f002:	b29b      	uxth	r3, r3
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	7812      	ldrb	r2, [r2, #0]
 800f008:	4293      	cmp	r3, r2
 800f00a:	d91f      	bls.n	800f04c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f012:	e013      	b.n	800f03c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f014:	f107 030a 	add.w	r3, r7, #10
 800f018:	4619      	mov	r1, r3
 800f01a:	6978      	ldr	r0, [r7, #20]
 800f01c:	f000 f81b 	bl	800f056 <USBD_GetNextDesc>
 800f020:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	785b      	ldrb	r3, [r3, #1]
 800f026:	2b05      	cmp	r3, #5
 800f028:	d108      	bne.n	800f03c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	789b      	ldrb	r3, [r3, #2]
 800f032:	78fa      	ldrb	r2, [r7, #3]
 800f034:	429a      	cmp	r2, r3
 800f036:	d008      	beq.n	800f04a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f038:	2300      	movs	r3, #0
 800f03a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	885b      	ldrh	r3, [r3, #2]
 800f040:	b29a      	uxth	r2, r3
 800f042:	897b      	ldrh	r3, [r7, #10]
 800f044:	429a      	cmp	r2, r3
 800f046:	d8e5      	bhi.n	800f014 <USBD_GetEpDesc+0x2e>
 800f048:	e000      	b.n	800f04c <USBD_GetEpDesc+0x66>
          break;
 800f04a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f04c:	693b      	ldr	r3, [r7, #16]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3718      	adds	r7, #24
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f056:	b480      	push	{r7}
 800f058:	b085      	sub	sp, #20
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	68fa      	ldr	r2, [r7, #12]
 800f06a:	7812      	ldrb	r2, [r2, #0]
 800f06c:	4413      	add	r3, r2
 800f06e:	b29a      	uxth	r2, r3
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	461a      	mov	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4413      	add	r3, r2
 800f07e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f080:	68fb      	ldr	r3, [r7, #12]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f08e:	b480      	push	{r7}
 800f090:	b087      	sub	sp, #28
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f0ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f0b0:	021b      	lsls	r3, r3, #8
 800f0b2:	b21a      	sxth	r2, r3
 800f0b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f0b8:	4313      	orrs	r3, r2
 800f0ba:	b21b      	sxth	r3, r3
 800f0bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f0be:	89fb      	ldrh	r3, [r7, #14]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	371c      	adds	r7, #28
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0e2:	2b40      	cmp	r3, #64	@ 0x40
 800f0e4:	d005      	beq.n	800f0f2 <USBD_StdDevReq+0x26>
 800f0e6:	2b40      	cmp	r3, #64	@ 0x40
 800f0e8:	d857      	bhi.n	800f19a <USBD_StdDevReq+0xce>
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00f      	beq.n	800f10e <USBD_StdDevReq+0x42>
 800f0ee:	2b20      	cmp	r3, #32
 800f0f0:	d153      	bne.n	800f19a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	32ae      	adds	r2, #174	@ 0xae
 800f0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	6839      	ldr	r1, [r7, #0]
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	4798      	blx	r3
 800f108:	4603      	mov	r3, r0
 800f10a:	73fb      	strb	r3, [r7, #15]
      break;
 800f10c:	e04a      	b.n	800f1a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	785b      	ldrb	r3, [r3, #1]
 800f112:	2b09      	cmp	r3, #9
 800f114:	d83b      	bhi.n	800f18e <USBD_StdDevReq+0xc2>
 800f116:	a201      	add	r2, pc, #4	@ (adr r2, 800f11c <USBD_StdDevReq+0x50>)
 800f118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f11c:	0800f171 	.word	0x0800f171
 800f120:	0800f185 	.word	0x0800f185
 800f124:	0800f18f 	.word	0x0800f18f
 800f128:	0800f17b 	.word	0x0800f17b
 800f12c:	0800f18f 	.word	0x0800f18f
 800f130:	0800f14f 	.word	0x0800f14f
 800f134:	0800f145 	.word	0x0800f145
 800f138:	0800f18f 	.word	0x0800f18f
 800f13c:	0800f167 	.word	0x0800f167
 800f140:	0800f159 	.word	0x0800f159
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f144:	6839      	ldr	r1, [r7, #0]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fa3c 	bl	800f5c4 <USBD_GetDescriptor>
          break;
 800f14c:	e024      	b.n	800f198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f14e:	6839      	ldr	r1, [r7, #0]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fba1 	bl	800f898 <USBD_SetAddress>
          break;
 800f156:	e01f      	b.n	800f198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fbe0 	bl	800f920 <USBD_SetConfig>
 800f160:	4603      	mov	r3, r0
 800f162:	73fb      	strb	r3, [r7, #15]
          break;
 800f164:	e018      	b.n	800f198 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f166:	6839      	ldr	r1, [r7, #0]
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fc83 	bl	800fa74 <USBD_GetConfig>
          break;
 800f16e:	e013      	b.n	800f198 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 fcb4 	bl	800fae0 <USBD_GetStatus>
          break;
 800f178:	e00e      	b.n	800f198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 fce3 	bl	800fb48 <USBD_SetFeature>
          break;
 800f182:	e009      	b.n	800f198 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f184:	6839      	ldr	r1, [r7, #0]
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 fd07 	bl	800fb9a <USBD_ClrFeature>
          break;
 800f18c:	e004      	b.n	800f198 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f18e:	6839      	ldr	r1, [r7, #0]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 fd5e 	bl	800fc52 <USBD_CtlError>
          break;
 800f196:	bf00      	nop
      }
      break;
 800f198:	e004      	b.n	800f1a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fd58 	bl	800fc52 <USBD_CtlError>
      break;
 800f1a2:	bf00      	nop
  }

  return ret;
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop

0800f1b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1c6:	2b40      	cmp	r3, #64	@ 0x40
 800f1c8:	d005      	beq.n	800f1d6 <USBD_StdItfReq+0x26>
 800f1ca:	2b40      	cmp	r3, #64	@ 0x40
 800f1cc:	d852      	bhi.n	800f274 <USBD_StdItfReq+0xc4>
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <USBD_StdItfReq+0x26>
 800f1d2:	2b20      	cmp	r3, #32
 800f1d4:	d14e      	bne.n	800f274 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	3b01      	subs	r3, #1
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d840      	bhi.n	800f266 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	889b      	ldrh	r3, [r3, #4]
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d836      	bhi.n	800f25c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	889b      	ldrh	r3, [r3, #4]
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	4619      	mov	r1, r3
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f7ff fedb 	bl	800efb2 <USBD_CoreFindIF>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f200:	7bbb      	ldrb	r3, [r7, #14]
 800f202:	2bff      	cmp	r3, #255	@ 0xff
 800f204:	d01d      	beq.n	800f242 <USBD_StdItfReq+0x92>
 800f206:	7bbb      	ldrb	r3, [r7, #14]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d11a      	bne.n	800f242 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f20c:	7bba      	ldrb	r2, [r7, #14]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	32ae      	adds	r2, #174	@ 0xae
 800f212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f216:	689b      	ldr	r3, [r3, #8]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00f      	beq.n	800f23c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f21c:	7bba      	ldrb	r2, [r7, #14]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f224:	7bba      	ldrb	r2, [r7, #14]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	32ae      	adds	r2, #174	@ 0xae
 800f22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	4798      	blx	r3
 800f236:	4603      	mov	r3, r0
 800f238:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f23a:	e004      	b.n	800f246 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f23c:	2303      	movs	r3, #3
 800f23e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f240:	e001      	b.n	800f246 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f242:	2303      	movs	r3, #3
 800f244:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	88db      	ldrh	r3, [r3, #6]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d110      	bne.n	800f270 <USBD_StdItfReq+0xc0>
 800f24e:	7bfb      	ldrb	r3, [r7, #15]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10d      	bne.n	800f270 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fdd3 	bl	800fe00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f25a:	e009      	b.n	800f270 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f25c:	6839      	ldr	r1, [r7, #0]
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 fcf7 	bl	800fc52 <USBD_CtlError>
          break;
 800f264:	e004      	b.n	800f270 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 fcf2 	bl	800fc52 <USBD_CtlError>
          break;
 800f26e:	e000      	b.n	800f272 <USBD_StdItfReq+0xc2>
          break;
 800f270:	bf00      	nop
      }
      break;
 800f272:	e004      	b.n	800f27e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fceb 	bl	800fc52 <USBD_CtlError>
      break;
 800f27c:	bf00      	nop
  }

  return ret;
 800f27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f280:	4618      	mov	r0, r3
 800f282:	3710      	adds	r7, #16
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	889b      	ldrh	r3, [r3, #4]
 800f29a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f2a4:	2b40      	cmp	r3, #64	@ 0x40
 800f2a6:	d007      	beq.n	800f2b8 <USBD_StdEPReq+0x30>
 800f2a8:	2b40      	cmp	r3, #64	@ 0x40
 800f2aa:	f200 817f 	bhi.w	800f5ac <USBD_StdEPReq+0x324>
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d02a      	beq.n	800f308 <USBD_StdEPReq+0x80>
 800f2b2:	2b20      	cmp	r3, #32
 800f2b4:	f040 817a 	bne.w	800f5ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f2b8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff fe85 	bl	800efcc <USBD_CoreFindEP>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2c6:	7b7b      	ldrb	r3, [r7, #13]
 800f2c8:	2bff      	cmp	r3, #255	@ 0xff
 800f2ca:	f000 8174 	beq.w	800f5b6 <USBD_StdEPReq+0x32e>
 800f2ce:	7b7b      	ldrb	r3, [r7, #13]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f040 8170 	bne.w	800f5b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f2d6:	7b7a      	ldrb	r2, [r7, #13]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f2de:	7b7a      	ldrb	r2, [r7, #13]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	32ae      	adds	r2, #174	@ 0xae
 800f2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e8:	689b      	ldr	r3, [r3, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f000 8163 	beq.w	800f5b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f2f0:	7b7a      	ldrb	r2, [r7, #13]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	32ae      	adds	r2, #174	@ 0xae
 800f2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	6839      	ldr	r1, [r7, #0]
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	4798      	blx	r3
 800f302:	4603      	mov	r3, r0
 800f304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f306:	e156      	b.n	800f5b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	785b      	ldrb	r3, [r3, #1]
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d008      	beq.n	800f322 <USBD_StdEPReq+0x9a>
 800f310:	2b03      	cmp	r3, #3
 800f312:	f300 8145 	bgt.w	800f5a0 <USBD_StdEPReq+0x318>
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 809b 	beq.w	800f452 <USBD_StdEPReq+0x1ca>
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d03c      	beq.n	800f39a <USBD_StdEPReq+0x112>
 800f320:	e13e      	b.n	800f5a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d002      	beq.n	800f334 <USBD_StdEPReq+0xac>
 800f32e:	2b03      	cmp	r3, #3
 800f330:	d016      	beq.n	800f360 <USBD_StdEPReq+0xd8>
 800f332:	e02c      	b.n	800f38e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d00d      	beq.n	800f356 <USBD_StdEPReq+0xce>
 800f33a:	7bbb      	ldrb	r3, [r7, #14]
 800f33c:	2b80      	cmp	r3, #128	@ 0x80
 800f33e:	d00a      	beq.n	800f356 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f340:	7bbb      	ldrb	r3, [r7, #14]
 800f342:	4619      	mov	r1, r3
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f001 f9db 	bl	8010700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f34a:	2180      	movs	r1, #128	@ 0x80
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f001 f9d7 	bl	8010700 <USBD_LL_StallEP>
 800f352:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f354:	e020      	b.n	800f398 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f356:	6839      	ldr	r1, [r7, #0]
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fc7a 	bl	800fc52 <USBD_CtlError>
              break;
 800f35e:	e01b      	b.n	800f398 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	885b      	ldrh	r3, [r3, #2]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10e      	bne.n	800f386 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f368:	7bbb      	ldrb	r3, [r7, #14]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00b      	beq.n	800f386 <USBD_StdEPReq+0xfe>
 800f36e:	7bbb      	ldrb	r3, [r7, #14]
 800f370:	2b80      	cmp	r3, #128	@ 0x80
 800f372:	d008      	beq.n	800f386 <USBD_StdEPReq+0xfe>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	88db      	ldrh	r3, [r3, #6]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d104      	bne.n	800f386 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f001 f9bd 	bl	8010700 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 fd3a 	bl	800fe00 <USBD_CtlSendStatus>

              break;
 800f38c:	e004      	b.n	800f398 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f38e:	6839      	ldr	r1, [r7, #0]
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 fc5e 	bl	800fc52 <USBD_CtlError>
              break;
 800f396:	bf00      	nop
          }
          break;
 800f398:	e107      	b.n	800f5aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	d002      	beq.n	800f3ac <USBD_StdEPReq+0x124>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d016      	beq.n	800f3d8 <USBD_StdEPReq+0x150>
 800f3aa:	e04b      	b.n	800f444 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3ac:	7bbb      	ldrb	r3, [r7, #14]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00d      	beq.n	800f3ce <USBD_StdEPReq+0x146>
 800f3b2:	7bbb      	ldrb	r3, [r7, #14]
 800f3b4:	2b80      	cmp	r3, #128	@ 0x80
 800f3b6:	d00a      	beq.n	800f3ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f3b8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ba:	4619      	mov	r1, r3
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f001 f99f 	bl	8010700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3c2:	2180      	movs	r1, #128	@ 0x80
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f001 f99b 	bl	8010700 <USBD_LL_StallEP>
 800f3ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f3cc:	e040      	b.n	800f450 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fc3e 	bl	800fc52 <USBD_CtlError>
              break;
 800f3d6:	e03b      	b.n	800f450 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	885b      	ldrh	r3, [r3, #2]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d136      	bne.n	800f44e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3e0:	7bbb      	ldrb	r3, [r7, #14]
 800f3e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d004      	beq.n	800f3f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3ea:	7bbb      	ldrb	r3, [r7, #14]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f001 f9a5 	bl	801073e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 fd03 	bl	800fe00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f3fa:	7bbb      	ldrb	r3, [r7, #14]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f7ff fde4 	bl	800efcc <USBD_CoreFindEP>
 800f404:	4603      	mov	r3, r0
 800f406:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f408:	7b7b      	ldrb	r3, [r7, #13]
 800f40a:	2bff      	cmp	r3, #255	@ 0xff
 800f40c:	d01f      	beq.n	800f44e <USBD_StdEPReq+0x1c6>
 800f40e:	7b7b      	ldrb	r3, [r7, #13]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d11c      	bne.n	800f44e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f414:	7b7a      	ldrb	r2, [r7, #13]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f41c:	7b7a      	ldrb	r2, [r7, #13]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	32ae      	adds	r2, #174	@ 0xae
 800f422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d010      	beq.n	800f44e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f42c:	7b7a      	ldrb	r2, [r7, #13]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	32ae      	adds	r2, #174	@ 0xae
 800f432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	6839      	ldr	r1, [r7, #0]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	4798      	blx	r3
 800f43e:	4603      	mov	r3, r0
 800f440:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f442:	e004      	b.n	800f44e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f000 fc03 	bl	800fc52 <USBD_CtlError>
              break;
 800f44c:	e000      	b.n	800f450 <USBD_StdEPReq+0x1c8>
              break;
 800f44e:	bf00      	nop
          }
          break;
 800f450:	e0ab      	b.n	800f5aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d002      	beq.n	800f464 <USBD_StdEPReq+0x1dc>
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d032      	beq.n	800f4c8 <USBD_StdEPReq+0x240>
 800f462:	e097      	b.n	800f594 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d007      	beq.n	800f47a <USBD_StdEPReq+0x1f2>
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	2b80      	cmp	r3, #128	@ 0x80
 800f46e:	d004      	beq.n	800f47a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 fbed 	bl	800fc52 <USBD_CtlError>
                break;
 800f478:	e091      	b.n	800f59e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f47a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	da0b      	bge.n	800f49a <USBD_StdEPReq+0x212>
 800f482:	7bbb      	ldrb	r3, [r7, #14]
 800f484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f488:	4613      	mov	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	3310      	adds	r3, #16
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	4413      	add	r3, r2
 800f496:	3304      	adds	r3, #4
 800f498:	e00b      	b.n	800f4b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f49a:	7bbb      	ldrb	r3, [r7, #14]
 800f49c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2202      	movs	r2, #2
 800f4be:	4619      	mov	r1, r3
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fc43 	bl	800fd4c <USBD_CtlSendData>
              break;
 800f4c6:	e06a      	b.n	800f59e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f4c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	da11      	bge.n	800f4f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f4d0:	7bbb      	ldrb	r3, [r7, #14]
 800f4d2:	f003 020f 	and.w	r2, r3, #15
 800f4d6:	6879      	ldr	r1, [r7, #4]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	4413      	add	r3, r2
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	440b      	add	r3, r1
 800f4e2:	3324      	adds	r3, #36	@ 0x24
 800f4e4:	881b      	ldrh	r3, [r3, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d117      	bne.n	800f51a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f4ea:	6839      	ldr	r1, [r7, #0]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 fbb0 	bl	800fc52 <USBD_CtlError>
                  break;
 800f4f2:	e054      	b.n	800f59e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
 800f4f6:	f003 020f 	and.w	r2, r3, #15
 800f4fa:	6879      	ldr	r1, [r7, #4]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	4413      	add	r3, r2
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	440b      	add	r3, r1
 800f506:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f50a:	881b      	ldrh	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d104      	bne.n	800f51a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fb9d 	bl	800fc52 <USBD_CtlError>
                  break;
 800f518:	e041      	b.n	800f59e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f51a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	da0b      	bge.n	800f53a <USBD_StdEPReq+0x2b2>
 800f522:	7bbb      	ldrb	r3, [r7, #14]
 800f524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f528:	4613      	mov	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	4413      	add	r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	3310      	adds	r3, #16
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	4413      	add	r3, r2
 800f536:	3304      	adds	r3, #4
 800f538:	e00b      	b.n	800f552 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f53a:	7bbb      	ldrb	r3, [r7, #14]
 800f53c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f540:	4613      	mov	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	4413      	add	r3, r2
 800f546:	009b      	lsls	r3, r3, #2
 800f548:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	4413      	add	r3, r2
 800f550:	3304      	adds	r3, #4
 800f552:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f554:	7bbb      	ldrb	r3, [r7, #14]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d002      	beq.n	800f560 <USBD_StdEPReq+0x2d8>
 800f55a:	7bbb      	ldrb	r3, [r7, #14]
 800f55c:	2b80      	cmp	r3, #128	@ 0x80
 800f55e:	d103      	bne.n	800f568 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	e00e      	b.n	800f586 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f568:	7bbb      	ldrb	r3, [r7, #14]
 800f56a:	4619      	mov	r1, r3
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f001 f905 	bl	801077c <USBD_LL_IsStallEP>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d003      	beq.n	800f580 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	2201      	movs	r2, #1
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	e002      	b.n	800f586 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2200      	movs	r2, #0
 800f584:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	2202      	movs	r2, #2
 800f58a:	4619      	mov	r1, r3
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fbdd 	bl	800fd4c <USBD_CtlSendData>
              break;
 800f592:	e004      	b.n	800f59e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f594:	6839      	ldr	r1, [r7, #0]
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fb5b 	bl	800fc52 <USBD_CtlError>
              break;
 800f59c:	bf00      	nop
          }
          break;
 800f59e:	e004      	b.n	800f5aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f5a0:	6839      	ldr	r1, [r7, #0]
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 fb55 	bl	800fc52 <USBD_CtlError>
          break;
 800f5a8:	bf00      	nop
      }
      break;
 800f5aa:	e005      	b.n	800f5b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f5ac:	6839      	ldr	r1, [r7, #0]
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 fb4f 	bl	800fc52 <USBD_CtlError>
      break;
 800f5b4:	e000      	b.n	800f5b8 <USBD_StdEPReq+0x330>
      break;
 800f5b6:	bf00      	nop
  }

  return ret;
 800f5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
	...

0800f5c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	885b      	ldrh	r3, [r3, #2]
 800f5de:	0a1b      	lsrs	r3, r3, #8
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	3b01      	subs	r3, #1
 800f5e4:	2b06      	cmp	r3, #6
 800f5e6:	f200 8128 	bhi.w	800f83a <USBD_GetDescriptor+0x276>
 800f5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800f5f0 <USBD_GetDescriptor+0x2c>)
 800f5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f0:	0800f60d 	.word	0x0800f60d
 800f5f4:	0800f625 	.word	0x0800f625
 800f5f8:	0800f665 	.word	0x0800f665
 800f5fc:	0800f83b 	.word	0x0800f83b
 800f600:	0800f83b 	.word	0x0800f83b
 800f604:	0800f7db 	.word	0x0800f7db
 800f608:	0800f807 	.word	0x0800f807
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	7c12      	ldrb	r2, [r2, #16]
 800f618:	f107 0108 	add.w	r1, r7, #8
 800f61c:	4610      	mov	r0, r2
 800f61e:	4798      	blx	r3
 800f620:	60f8      	str	r0, [r7, #12]
      break;
 800f622:	e112      	b.n	800f84a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	7c1b      	ldrb	r3, [r3, #16]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10d      	bne.n	800f648 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f634:	f107 0208 	add.w	r2, r7, #8
 800f638:	4610      	mov	r0, r2
 800f63a:	4798      	blx	r3
 800f63c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3301      	adds	r3, #1
 800f642:	2202      	movs	r2, #2
 800f644:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f646:	e100      	b.n	800f84a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f64e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f650:	f107 0208 	add.w	r2, r7, #8
 800f654:	4610      	mov	r0, r2
 800f656:	4798      	blx	r3
 800f658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	3301      	adds	r3, #1
 800f65e:	2202      	movs	r2, #2
 800f660:	701a      	strb	r2, [r3, #0]
      break;
 800f662:	e0f2      	b.n	800f84a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	885b      	ldrh	r3, [r3, #2]
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	2b05      	cmp	r3, #5
 800f66c:	f200 80ac 	bhi.w	800f7c8 <USBD_GetDescriptor+0x204>
 800f670:	a201      	add	r2, pc, #4	@ (adr r2, 800f678 <USBD_GetDescriptor+0xb4>)
 800f672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f676:	bf00      	nop
 800f678:	0800f691 	.word	0x0800f691
 800f67c:	0800f6c5 	.word	0x0800f6c5
 800f680:	0800f6f9 	.word	0x0800f6f9
 800f684:	0800f72d 	.word	0x0800f72d
 800f688:	0800f761 	.word	0x0800f761
 800f68c:	0800f795 	.word	0x0800f795
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00b      	beq.n	800f6b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	7c12      	ldrb	r2, [r2, #16]
 800f6a8:	f107 0108 	add.w	r1, r7, #8
 800f6ac:	4610      	mov	r0, r2
 800f6ae:	4798      	blx	r3
 800f6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6b2:	e091      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 facb 	bl	800fc52 <USBD_CtlError>
            err++;
 800f6bc:	7afb      	ldrb	r3, [r7, #11]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6c2:	e089      	b.n	800f7d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00b      	beq.n	800f6e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	7c12      	ldrb	r2, [r2, #16]
 800f6dc:	f107 0108 	add.w	r1, r7, #8
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	4798      	blx	r3
 800f6e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6e6:	e077      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6e8:	6839      	ldr	r1, [r7, #0]
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 fab1 	bl	800fc52 <USBD_CtlError>
            err++;
 800f6f0:	7afb      	ldrb	r3, [r7, #11]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6f6:	e06f      	b.n	800f7d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00b      	beq.n	800f71c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	7c12      	ldrb	r2, [r2, #16]
 800f710:	f107 0108 	add.w	r1, r7, #8
 800f714:	4610      	mov	r0, r2
 800f716:	4798      	blx	r3
 800f718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f71a:	e05d      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f71c:	6839      	ldr	r1, [r7, #0]
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 fa97 	bl	800fc52 <USBD_CtlError>
            err++;
 800f724:	7afb      	ldrb	r3, [r7, #11]
 800f726:	3301      	adds	r3, #1
 800f728:	72fb      	strb	r3, [r7, #11]
          break;
 800f72a:	e055      	b.n	800f7d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f732:	691b      	ldr	r3, [r3, #16]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d00b      	beq.n	800f750 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	7c12      	ldrb	r2, [r2, #16]
 800f744:	f107 0108 	add.w	r1, r7, #8
 800f748:	4610      	mov	r0, r2
 800f74a:	4798      	blx	r3
 800f74c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74e:	e043      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 fa7d 	bl	800fc52 <USBD_CtlError>
            err++;
 800f758:	7afb      	ldrb	r3, [r7, #11]
 800f75a:	3301      	adds	r3, #1
 800f75c:	72fb      	strb	r3, [r7, #11]
          break;
 800f75e:	e03b      	b.n	800f7d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f766:	695b      	ldr	r3, [r3, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00b      	beq.n	800f784 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f772:	695b      	ldr	r3, [r3, #20]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	7c12      	ldrb	r2, [r2, #16]
 800f778:	f107 0108 	add.w	r1, r7, #8
 800f77c:	4610      	mov	r0, r2
 800f77e:	4798      	blx	r3
 800f780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f782:	e029      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f784:	6839      	ldr	r1, [r7, #0]
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 fa63 	bl	800fc52 <USBD_CtlError>
            err++;
 800f78c:	7afb      	ldrb	r3, [r7, #11]
 800f78e:	3301      	adds	r3, #1
 800f790:	72fb      	strb	r3, [r7, #11]
          break;
 800f792:	e021      	b.n	800f7d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d00b      	beq.n	800f7b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f7a6:	699b      	ldr	r3, [r3, #24]
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	7c12      	ldrb	r2, [r2, #16]
 800f7ac:	f107 0108 	add.w	r1, r7, #8
 800f7b0:	4610      	mov	r0, r2
 800f7b2:	4798      	blx	r3
 800f7b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7b6:	e00f      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 fa49 	bl	800fc52 <USBD_CtlError>
            err++;
 800f7c0:	7afb      	ldrb	r3, [r7, #11]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7c6:	e007      	b.n	800f7d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f7c8:	6839      	ldr	r1, [r7, #0]
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 fa41 	bl	800fc52 <USBD_CtlError>
          err++;
 800f7d0:	7afb      	ldrb	r3, [r7, #11]
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f7d6:	bf00      	nop
      }
      break;
 800f7d8:	e037      	b.n	800f84a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	7c1b      	ldrb	r3, [r3, #16]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d109      	bne.n	800f7f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7ea:	f107 0208 	add.w	r2, r7, #8
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	4798      	blx	r3
 800f7f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7f4:	e029      	b.n	800f84a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 fa2a 	bl	800fc52 <USBD_CtlError>
        err++;
 800f7fe:	7afb      	ldrb	r3, [r7, #11]
 800f800:	3301      	adds	r3, #1
 800f802:	72fb      	strb	r3, [r7, #11]
      break;
 800f804:	e021      	b.n	800f84a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	7c1b      	ldrb	r3, [r3, #16]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d10d      	bne.n	800f82a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f816:	f107 0208 	add.w	r2, r7, #8
 800f81a:	4610      	mov	r0, r2
 800f81c:	4798      	blx	r3
 800f81e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3301      	adds	r3, #1
 800f824:	2207      	movs	r2, #7
 800f826:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f828:	e00f      	b.n	800f84a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f82a:	6839      	ldr	r1, [r7, #0]
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f000 fa10 	bl	800fc52 <USBD_CtlError>
        err++;
 800f832:	7afb      	ldrb	r3, [r7, #11]
 800f834:	3301      	adds	r3, #1
 800f836:	72fb      	strb	r3, [r7, #11]
      break;
 800f838:	e007      	b.n	800f84a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f83a:	6839      	ldr	r1, [r7, #0]
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 fa08 	bl	800fc52 <USBD_CtlError>
      err++;
 800f842:	7afb      	ldrb	r3, [r7, #11]
 800f844:	3301      	adds	r3, #1
 800f846:	72fb      	strb	r3, [r7, #11]
      break;
 800f848:	bf00      	nop
  }

  if (err != 0U)
 800f84a:	7afb      	ldrb	r3, [r7, #11]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d11e      	bne.n	800f88e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	88db      	ldrh	r3, [r3, #6]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d016      	beq.n	800f886 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f858:	893b      	ldrh	r3, [r7, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00e      	beq.n	800f87c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	88da      	ldrh	r2, [r3, #6]
 800f862:	893b      	ldrh	r3, [r7, #8]
 800f864:	4293      	cmp	r3, r2
 800f866:	bf28      	it	cs
 800f868:	4613      	movcs	r3, r2
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f86e:	893b      	ldrh	r3, [r7, #8]
 800f870:	461a      	mov	r2, r3
 800f872:	68f9      	ldr	r1, [r7, #12]
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f000 fa69 	bl	800fd4c <USBD_CtlSendData>
 800f87a:	e009      	b.n	800f890 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f87c:	6839      	ldr	r1, [r7, #0]
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f9e7 	bl	800fc52 <USBD_CtlError>
 800f884:	e004      	b.n	800f890 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 faba 	bl	800fe00 <USBD_CtlSendStatus>
 800f88c:	e000      	b.n	800f890 <USBD_GetDescriptor+0x2cc>
    return;
 800f88e:	bf00      	nop
  }
}
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop

0800f898 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	889b      	ldrh	r3, [r3, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d131      	bne.n	800f90e <USBD_SetAddress+0x76>
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	88db      	ldrh	r3, [r3, #6]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d12d      	bne.n	800f90e <USBD_SetAddress+0x76>
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	885b      	ldrh	r3, [r3, #2]
 800f8b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8b8:	d829      	bhi.n	800f90e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	885b      	ldrh	r3, [r3, #2]
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b03      	cmp	r3, #3
 800f8d0:	d104      	bne.n	800f8dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f9bc 	bl	800fc52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8da:	e01d      	b.n	800f918 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	7bfa      	ldrb	r2, [r7, #15]
 800f8e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 ff73 	bl	80107d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fa86 	bl	800fe00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f8f4:	7bfb      	ldrb	r3, [r7, #15]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d004      	beq.n	800f904 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2202      	movs	r2, #2
 800f8fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f902:	e009      	b.n	800f918 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f90c:	e004      	b.n	800f918 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f000 f99e 	bl	800fc52 <USBD_CtlError>
  }
}
 800f916:	bf00      	nop
 800f918:	bf00      	nop
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	885b      	ldrh	r3, [r3, #2]
 800f932:	b2da      	uxtb	r2, r3
 800f934:	4b4e      	ldr	r3, [pc, #312]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f936:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f938:	4b4d      	ldr	r3, [pc, #308]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d905      	bls.n	800f94c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f940:	6839      	ldr	r1, [r7, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 f985 	bl	800fc52 <USBD_CtlError>
    return USBD_FAIL;
 800f948:	2303      	movs	r3, #3
 800f94a:	e08c      	b.n	800fa66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b02      	cmp	r3, #2
 800f956:	d002      	beq.n	800f95e <USBD_SetConfig+0x3e>
 800f958:	2b03      	cmp	r3, #3
 800f95a:	d029      	beq.n	800f9b0 <USBD_SetConfig+0x90>
 800f95c:	e075      	b.n	800fa4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f95e:	4b44      	ldr	r3, [pc, #272]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d020      	beq.n	800f9a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f966:	4b42      	ldr	r3, [pc, #264]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	461a      	mov	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f970:	4b3f      	ldr	r3, [pc, #252]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	4619      	mov	r1, r3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7fe ffe3 	bl	800e942 <USBD_SetClassConfig>
 800f97c:	4603      	mov	r3, r0
 800f97e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f980:	7bfb      	ldrb	r3, [r7, #15]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d008      	beq.n	800f998 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f962 	bl	800fc52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2202      	movs	r2, #2
 800f992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f996:	e065      	b.n	800fa64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 fa31 	bl	800fe00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2203      	movs	r2, #3
 800f9a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f9a6:	e05d      	b.n	800fa64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fa29 	bl	800fe00 <USBD_CtlSendStatus>
      break;
 800f9ae:	e059      	b.n	800fa64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f9b0:	4b2f      	ldr	r3, [pc, #188]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d112      	bne.n	800f9de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f9c0:	4b2b      	ldr	r3, [pc, #172]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9ca:	4b29      	ldr	r3, [pc, #164]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f7fe ffd2 	bl	800e97a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	f000 fa12 	bl	800fe00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f9dc:	e042      	b.n	800fa64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f9de:	4b24      	ldr	r3, [pc, #144]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d02a      	beq.n	800fa42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7fe ffc0 	bl	800e97a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f9fa:	4b1d      	ldr	r3, [pc, #116]	@ (800fa70 <USBD_SetConfig+0x150>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa04:	4b1a      	ldr	r3, [pc, #104]	@ (800fa70 <USBD_SetConfig+0x150>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7fe ff99 	bl	800e942 <USBD_SetClassConfig>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00f      	beq.n	800fa3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f918 	bl	800fc52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	685b      	ldr	r3, [r3, #4]
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f7fe ffa5 	bl	800e97a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2202      	movs	r2, #2
 800fa34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fa38:	e014      	b.n	800fa64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f9e0 	bl	800fe00 <USBD_CtlSendStatus>
      break;
 800fa40:	e010      	b.n	800fa64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f9dc 	bl	800fe00 <USBD_CtlSendStatus>
      break;
 800fa48:	e00c      	b.n	800fa64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fa4a:	6839      	ldr	r1, [r7, #0]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f900 	bl	800fc52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa52:	4b07      	ldr	r3, [pc, #28]	@ (800fa70 <USBD_SetConfig+0x150>)
 800fa54:	781b      	ldrb	r3, [r3, #0]
 800fa56:	4619      	mov	r1, r3
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f7fe ff8e 	bl	800e97a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fa5e:	2303      	movs	r3, #3
 800fa60:	73fb      	strb	r3, [r7, #15]
      break;
 800fa62:	bf00      	nop
  }

  return ret;
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	200011d4 	.word	0x200011d4

0800fa74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	88db      	ldrh	r3, [r3, #6]
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d004      	beq.n	800fa90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa86:	6839      	ldr	r1, [r7, #0]
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 f8e2 	bl	800fc52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa8e:	e023      	b.n	800fad8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	dc02      	bgt.n	800faa2 <USBD_GetConfig+0x2e>
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	dc03      	bgt.n	800faa8 <USBD_GetConfig+0x34>
 800faa0:	e015      	b.n	800face <USBD_GetConfig+0x5a>
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d00b      	beq.n	800fabe <USBD_GetConfig+0x4a>
 800faa6:	e012      	b.n	800face <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3308      	adds	r3, #8
 800fab2:	2201      	movs	r2, #1
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f948 	bl	800fd4c <USBD_CtlSendData>
        break;
 800fabc:	e00c      	b.n	800fad8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	3304      	adds	r3, #4
 800fac2:	2201      	movs	r2, #1
 800fac4:	4619      	mov	r1, r3
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f000 f940 	bl	800fd4c <USBD_CtlSendData>
        break;
 800facc:	e004      	b.n	800fad8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800face:	6839      	ldr	r1, [r7, #0]
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 f8be 	bl	800fc52 <USBD_CtlError>
        break;
 800fad6:	bf00      	nop
}
 800fad8:	bf00      	nop
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	3b01      	subs	r3, #1
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d81e      	bhi.n	800fb36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	88db      	ldrh	r3, [r3, #6]
 800fafc:	2b02      	cmp	r3, #2
 800fafe:	d004      	beq.n	800fb0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 f8a5 	bl	800fc52 <USBD_CtlError>
        break;
 800fb08:	e01a      	b.n	800fb40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d005      	beq.n	800fb26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	f043 0202 	orr.w	r2, r3, #2
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	330c      	adds	r3, #12
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f90c 	bl	800fd4c <USBD_CtlSendData>
      break;
 800fb34:	e004      	b.n	800fb40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fb36:	6839      	ldr	r1, [r7, #0]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 f88a 	bl	800fc52 <USBD_CtlError>
      break;
 800fb3e:	bf00      	nop
  }
}
 800fb40:	bf00      	nop
 800fb42:	3708      	adds	r7, #8
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	885b      	ldrh	r3, [r3, #2]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d107      	bne.n	800fb6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f94c 	bl	800fe00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fb68:	e013      	b.n	800fb92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	885b      	ldrh	r3, [r3, #2]
 800fb6e:	2b02      	cmp	r3, #2
 800fb70:	d10b      	bne.n	800fb8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	889b      	ldrh	r3, [r3, #4]
 800fb76:	0a1b      	lsrs	r3, r3, #8
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	b2da      	uxtb	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f000 f93c 	bl	800fe00 <USBD_CtlSendStatus>
}
 800fb88:	e003      	b.n	800fb92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f000 f860 	bl	800fc52 <USBD_CtlError>
}
 800fb92:	bf00      	nop
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}

0800fb9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b082      	sub	sp, #8
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
 800fba2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	3b01      	subs	r3, #1
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	d80b      	bhi.n	800fbca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	885b      	ldrh	r3, [r3, #2]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d10c      	bne.n	800fbd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 f91c 	bl	800fe00 <USBD_CtlSendStatus>
      }
      break;
 800fbc8:	e004      	b.n	800fbd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 f840 	bl	800fc52 <USBD_CtlError>
      break;
 800fbd2:	e000      	b.n	800fbd6 <USBD_ClrFeature+0x3c>
      break;
 800fbd4:	bf00      	nop
  }
}
 800fbd6:	bf00      	nop
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}

0800fbde <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	6078      	str	r0, [r7, #4]
 800fbe6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	781a      	ldrb	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	781a      	ldrb	r2, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc08:	68f8      	ldr	r0, [r7, #12]
 800fc0a:	f7ff fa40 	bl	800f08e <SWAPBYTE>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	461a      	mov	r2, r3
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f7ff fa33 	bl	800f08e <SWAPBYTE>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3301      	adds	r3, #1
 800fc34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fc3c:	68f8      	ldr	r0, [r7, #12]
 800fc3e:	f7ff fa26 	bl	800f08e <SWAPBYTE>
 800fc42:	4603      	mov	r3, r0
 800fc44:	461a      	mov	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	80da      	strh	r2, [r3, #6]
}
 800fc4a:	bf00      	nop
 800fc4c:	3710      	adds	r7, #16
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}

0800fc52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b082      	sub	sp, #8
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
 800fc5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc5c:	2180      	movs	r1, #128	@ 0x80
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fd4e 	bl	8010700 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fc64:	2100      	movs	r1, #0
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 fd4a 	bl	8010700 <USBD_LL_StallEP>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc80:	2300      	movs	r3, #0
 800fc82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d042      	beq.n	800fd10 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fc8e:	6938      	ldr	r0, [r7, #16]
 800fc90:	f000 f842 	bl	800fd18 <USBD_GetLen>
 800fc94:	4603      	mov	r3, r0
 800fc96:	3301      	adds	r3, #1
 800fc98:	005b      	lsls	r3, r3, #1
 800fc9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc9e:	d808      	bhi.n	800fcb2 <USBD_GetString+0x3e>
 800fca0:	6938      	ldr	r0, [r7, #16]
 800fca2:	f000 f839 	bl	800fd18 <USBD_GetLen>
 800fca6:	4603      	mov	r3, r0
 800fca8:	3301      	adds	r3, #1
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	e001      	b.n	800fcb6 <USBD_GetString+0x42>
 800fcb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	7812      	ldrb	r2, [r2, #0]
 800fcc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcc6:	7dfb      	ldrb	r3, [r7, #23]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fccc:	7dfb      	ldrb	r3, [r7, #23]
 800fcce:	68ba      	ldr	r2, [r7, #8]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	2203      	movs	r2, #3
 800fcd4:	701a      	strb	r2, [r3, #0]
  idx++;
 800fcd6:	7dfb      	ldrb	r3, [r7, #23]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fcdc:	e013      	b.n	800fd06 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fcde:	7dfb      	ldrb	r3, [r7, #23]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	4413      	add	r3, r2
 800fce4:	693a      	ldr	r2, [r7, #16]
 800fce6:	7812      	ldrb	r2, [r2, #0]
 800fce8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	3301      	adds	r3, #1
 800fcee:	613b      	str	r3, [r7, #16]
    idx++;
 800fcf0:	7dfb      	ldrb	r3, [r7, #23]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fcf6:	7dfb      	ldrb	r3, [r7, #23]
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	701a      	strb	r2, [r3, #0]
    idx++;
 800fd00:	7dfb      	ldrb	r3, [r7, #23]
 800fd02:	3301      	adds	r3, #1
 800fd04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e7      	bne.n	800fcde <USBD_GetString+0x6a>
 800fd0e:	e000      	b.n	800fd12 <USBD_GetString+0x9e>
    return;
 800fd10:	bf00      	nop
  }
}
 800fd12:	3718      	adds	r7, #24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd20:	2300      	movs	r3, #0
 800fd22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd28:	e005      	b.n	800fd36 <USBD_GetLen+0x1e>
  {
    len++;
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	3301      	adds	r3, #1
 800fd34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1f5      	bne.n	800fd2a <USBD_GetLen+0x12>
  }

  return len;
 800fd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	60f8      	str	r0, [r7, #12]
 800fd54:	60b9      	str	r1, [r7, #8]
 800fd56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2202      	movs	r2, #2
 800fd5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	2100      	movs	r1, #0
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f000 fd4d 	bl	8010812 <USBD_LL_Transmit>

  return USBD_OK;
 800fd78:	2300      	movs	r3, #0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3710      	adds	r7, #16
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b084      	sub	sp, #16
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	60f8      	str	r0, [r7, #12]
 800fd8a:	60b9      	str	r1, [r7, #8]
 800fd8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	2100      	movs	r1, #0
 800fd94:	68f8      	ldr	r0, [r7, #12]
 800fd96:	f000 fd3c 	bl	8010812 <USBD_LL_Transmit>

  return USBD_OK;
 800fd9a:	2300      	movs	r3, #0
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}

0800fda4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2203      	movs	r2, #3
 800fdb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	2100      	movs	r1, #0
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f000 fd40 	bl	8010854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3710      	adds	r7, #16
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}

0800fdde <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fdde:	b580      	push	{r7, lr}
 800fde0:	b084      	sub	sp, #16
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	60f8      	str	r0, [r7, #12]
 800fde6:	60b9      	str	r1, [r7, #8]
 800fde8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	2100      	movs	r1, #0
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f000 fd2f 	bl	8010854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fdf6:	2300      	movs	r3, #0
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2204      	movs	r2, #4
 800fe0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe10:	2300      	movs	r3, #0
 800fe12:	2200      	movs	r2, #0
 800fe14:	2100      	movs	r1, #0
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f000 fcfb 	bl	8010812 <USBD_LL_Transmit>

  return USBD_OK;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b082      	sub	sp, #8
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2205      	movs	r2, #5
 800fe32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe36:	2300      	movs	r3, #0
 800fe38:	2200      	movs	r2, #0
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f000 fd09 	bl	8010854 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe42:	2300      	movs	r3, #0
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fe50:	2200      	movs	r2, #0
 800fe52:	4912      	ldr	r1, [pc, #72]	@ (800fe9c <MX_USB_DEVICE_Init+0x50>)
 800fe54:	4812      	ldr	r0, [pc, #72]	@ (800fea0 <MX_USB_DEVICE_Init+0x54>)
 800fe56:	f7fe fcf7 	bl	800e848 <USBD_Init>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fe60:	f7f3 fabe 	bl	80033e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fe64:	490f      	ldr	r1, [pc, #60]	@ (800fea4 <MX_USB_DEVICE_Init+0x58>)
 800fe66:	480e      	ldr	r0, [pc, #56]	@ (800fea0 <MX_USB_DEVICE_Init+0x54>)
 800fe68:	f7fe fd1e 	bl	800e8a8 <USBD_RegisterClass>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fe72:	f7f3 fab5 	bl	80033e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fe76:	490c      	ldr	r1, [pc, #48]	@ (800fea8 <MX_USB_DEVICE_Init+0x5c>)
 800fe78:	4809      	ldr	r0, [pc, #36]	@ (800fea0 <MX_USB_DEVICE_Init+0x54>)
 800fe7a:	f7fe fc15 	bl	800e6a8 <USBD_CDC_RegisterInterface>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d001      	beq.n	800fe88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fe84:	f7f3 faac 	bl	80033e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fe88:	4805      	ldr	r0, [pc, #20]	@ (800fea0 <MX_USB_DEVICE_Init+0x54>)
 800fe8a:	f7fe fd43 	bl	800e914 <USBD_Start>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d001      	beq.n	800fe98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fe94:	f7f3 faa4 	bl	80033e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fe98:	bf00      	nop
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	200000c4 	.word	0x200000c4
 800fea0:	200011d8 	.word	0x200011d8
 800fea4:	20000028 	.word	0x20000028
 800fea8:	200000b0 	.word	0x200000b0

0800feac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800feb0:	2200      	movs	r2, #0
 800feb2:	4905      	ldr	r1, [pc, #20]	@ (800fec8 <CDC_Init_FS+0x1c>)
 800feb4:	4805      	ldr	r0, [pc, #20]	@ (800fecc <CDC_Init_FS+0x20>)
 800feb6:	f7fe fc11 	bl	800e6dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800feba:	4905      	ldr	r1, [pc, #20]	@ (800fed0 <CDC_Init_FS+0x24>)
 800febc:	4803      	ldr	r0, [pc, #12]	@ (800fecc <CDC_Init_FS+0x20>)
 800febe:	f7fe fc2f 	bl	800e720 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fec2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	200016b4 	.word	0x200016b4
 800fecc:	200011d8 	.word	0x200011d8
 800fed0:	200014b4 	.word	0x200014b4

0800fed4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fed4:	b480      	push	{r7}
 800fed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fed8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800feda:	4618      	mov	r0, r3
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	4603      	mov	r3, r0
 800feec:	6039      	str	r1, [r7, #0]
 800feee:	71fb      	strb	r3, [r7, #7]
 800fef0:	4613      	mov	r3, r2
 800fef2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fef4:	79fb      	ldrb	r3, [r7, #7]
 800fef6:	2b23      	cmp	r3, #35	@ 0x23
 800fef8:	f200 8097 	bhi.w	801002a <CDC_Control_FS+0x146>
 800fefc:	a201      	add	r2, pc, #4	@ (adr r2, 800ff04 <CDC_Control_FS+0x20>)
 800fefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff02:	bf00      	nop
 800ff04:	0801002b 	.word	0x0801002b
 800ff08:	0801002b 	.word	0x0801002b
 800ff0c:	0801002b 	.word	0x0801002b
 800ff10:	0801002b 	.word	0x0801002b
 800ff14:	0801002b 	.word	0x0801002b
 800ff18:	0801002b 	.word	0x0801002b
 800ff1c:	0801002b 	.word	0x0801002b
 800ff20:	0801002b 	.word	0x0801002b
 800ff24:	0801002b 	.word	0x0801002b
 800ff28:	0801002b 	.word	0x0801002b
 800ff2c:	0801002b 	.word	0x0801002b
 800ff30:	0801002b 	.word	0x0801002b
 800ff34:	0801002b 	.word	0x0801002b
 800ff38:	0801002b 	.word	0x0801002b
 800ff3c:	0801002b 	.word	0x0801002b
 800ff40:	0801002b 	.word	0x0801002b
 800ff44:	0801002b 	.word	0x0801002b
 800ff48:	0801002b 	.word	0x0801002b
 800ff4c:	0801002b 	.word	0x0801002b
 800ff50:	0801002b 	.word	0x0801002b
 800ff54:	0801002b 	.word	0x0801002b
 800ff58:	0801002b 	.word	0x0801002b
 800ff5c:	0801002b 	.word	0x0801002b
 800ff60:	0801002b 	.word	0x0801002b
 800ff64:	0801002b 	.word	0x0801002b
 800ff68:	0801002b 	.word	0x0801002b
 800ff6c:	0801002b 	.word	0x0801002b
 800ff70:	0801002b 	.word	0x0801002b
 800ff74:	0801002b 	.word	0x0801002b
 800ff78:	0801002b 	.word	0x0801002b
 800ff7c:	0801002b 	.word	0x0801002b
 800ff80:	0801002b 	.word	0x0801002b
 800ff84:	0800ff95 	.word	0x0800ff95
 800ff88:	0800ffd7 	.word	0x0800ffd7
 800ff8c:	0801002b 	.word	0x0801002b
 800ff90:	0801002b 	.word	0x0801002b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	021b      	lsls	r3, r3, #8
 800ffa2:	431a      	orrs	r2, r3
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	3302      	adds	r3, #2
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	041b      	lsls	r3, r3, #16
 800ffac:	431a      	orrs	r2, r3
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	3303      	adds	r3, #3
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	061b      	lsls	r3, r3, #24
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	4a20      	ldr	r2, [pc, #128]	@ (801003c <CDC_Control_FS+0x158>)
 800ffba:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	791a      	ldrb	r2, [r3, #4]
 800ffc0:	4b1e      	ldr	r3, [pc, #120]	@ (801003c <CDC_Control_FS+0x158>)
 800ffc2:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	795a      	ldrb	r2, [r3, #5]
 800ffc8:	4b1c      	ldr	r3, [pc, #112]	@ (801003c <CDC_Control_FS+0x158>)
 800ffca:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	799a      	ldrb	r2, [r3, #6]
 800ffd0:	4b1a      	ldr	r3, [pc, #104]	@ (801003c <CDC_Control_FS+0x158>)
 800ffd2:	719a      	strb	r2, [r3, #6]
    break;
 800ffd4:	e02a      	b.n	801002c <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ffd6:	4b19      	ldr	r3, [pc, #100]	@ (801003c <CDC_Control_FS+0x158>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ffe0:	4b16      	ldr	r3, [pc, #88]	@ (801003c <CDC_Control_FS+0x158>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	0a1a      	lsrs	r2, r3, #8
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	b2d2      	uxtb	r2, r2
 800ffec:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ffee:	4b13      	ldr	r3, [pc, #76]	@ (801003c <CDC_Control_FS+0x158>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	0c1a      	lsrs	r2, r3, #16
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	3302      	adds	r3, #2
 800fff8:	b2d2      	uxtb	r2, r2
 800fffa:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800fffc:	4b0f      	ldr	r3, [pc, #60]	@ (801003c <CDC_Control_FS+0x158>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	0e1a      	lsrs	r2, r3, #24
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	3303      	adds	r3, #3
 8010006:	b2d2      	uxtb	r2, r2
 8010008:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	3304      	adds	r3, #4
 801000e:	4a0b      	ldr	r2, [pc, #44]	@ (801003c <CDC_Control_FS+0x158>)
 8010010:	7912      	ldrb	r2, [r2, #4]
 8010012:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	3305      	adds	r3, #5
 8010018:	4a08      	ldr	r2, [pc, #32]	@ (801003c <CDC_Control_FS+0x158>)
 801001a:	7952      	ldrb	r2, [r2, #5]
 801001c:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	3306      	adds	r3, #6
 8010022:	4a06      	ldr	r2, [pc, #24]	@ (801003c <CDC_Control_FS+0x158>)
 8010024:	7992      	ldrb	r2, [r2, #6]
 8010026:	701a      	strb	r2, [r3, #0]
	break;
 8010028:	e000      	b.n	801002c <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801002a:	bf00      	nop
  }

  return (USBD_OK);
 801002c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801002e:	4618      	mov	r0, r3
 8010030:	370c      	adds	r7, #12
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	200000a8 	.word	0x200000a8

08010040 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b082      	sub	sp, #8
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 801004a:	4b0b      	ldr	r3, [pc, #44]	@ (8010078 <CDC_Receive_FS+0x38>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 8010052:	4b09      	ldr	r3, [pc, #36]	@ (8010078 <CDC_Receive_FS+0x38>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	6812      	ldr	r2, [r2, #0]
 801005a:	4611      	mov	r1, r2
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010060:	6879      	ldr	r1, [r7, #4]
 8010062:	4806      	ldr	r0, [pc, #24]	@ (801007c <CDC_Receive_FS+0x3c>)
 8010064:	f7fe fb5c 	bl	800e720 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010068:	4804      	ldr	r0, [pc, #16]	@ (801007c <CDC_Receive_FS+0x3c>)
 801006a:	f7fe fbb7 	bl	800e7dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801006e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010070:	4618      	mov	r0, r3
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	200018b4 	.word	0x200018b4
 801007c:	200011d8 	.word	0x200011d8

08010080 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	460b      	mov	r3, r1
 801008a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801008c:	2300      	movs	r3, #0
 801008e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010090:	4b0d      	ldr	r3, [pc, #52]	@ (80100c8 <CDC_Transmit_FS+0x48>)
 8010092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010096:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80100a2:	2301      	movs	r3, #1
 80100a4:	e00b      	b.n	80100be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80100a6:	887b      	ldrh	r3, [r7, #2]
 80100a8:	461a      	mov	r2, r3
 80100aa:	6879      	ldr	r1, [r7, #4]
 80100ac:	4806      	ldr	r0, [pc, #24]	@ (80100c8 <CDC_Transmit_FS+0x48>)
 80100ae:	f7fe fb15 	bl	800e6dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80100b2:	4805      	ldr	r0, [pc, #20]	@ (80100c8 <CDC_Transmit_FS+0x48>)
 80100b4:	f7fe fb52 	bl	800e75c <USBD_CDC_TransmitPacket>
 80100b8:	4603      	mov	r3, r0
 80100ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	200011d8 	.word	0x200011d8

080100cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b087      	sub	sp, #28
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	4613      	mov	r3, r2
 80100d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80100de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	371c      	adds	r7, #28
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr
	...

080100f0 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 80100f0:	b480      	push	{r7}
 80100f2:	b083      	sub	sp, #12
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 80100f8:	4a04      	ldr	r2, [pc, #16]	@ (801010c <CDC_Attach_Rx+0x1c>)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6013      	str	r3, [r2, #0]
}
 80100fe:	bf00      	nop
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr
 801010a:	bf00      	nop
 801010c:	200018b4 	.word	0x200018b4

08010110 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	4603      	mov	r3, r0
 8010118:	6039      	str	r1, [r7, #0]
 801011a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	2212      	movs	r2, #18
 8010120:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010122:	4b03      	ldr	r3, [pc, #12]	@ (8010130 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010124:	4618      	mov	r0, r3
 8010126:	370c      	adds	r7, #12
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr
 8010130:	200000e0 	.word	0x200000e0

08010134 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	6039      	str	r1, [r7, #0]
 801013e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	2204      	movs	r2, #4
 8010144:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010146:	4b03      	ldr	r3, [pc, #12]	@ (8010154 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010148:	4618      	mov	r0, r3
 801014a:	370c      	adds	r7, #12
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr
 8010154:	200000f4 	.word	0x200000f4

08010158 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	4603      	mov	r3, r0
 8010160:	6039      	str	r1, [r7, #0]
 8010162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010164:	79fb      	ldrb	r3, [r7, #7]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d105      	bne.n	8010176 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801016a:	683a      	ldr	r2, [r7, #0]
 801016c:	4907      	ldr	r1, [pc, #28]	@ (801018c <USBD_FS_ProductStrDescriptor+0x34>)
 801016e:	4808      	ldr	r0, [pc, #32]	@ (8010190 <USBD_FS_ProductStrDescriptor+0x38>)
 8010170:	f7ff fd80 	bl	800fc74 <USBD_GetString>
 8010174:	e004      	b.n	8010180 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	4904      	ldr	r1, [pc, #16]	@ (801018c <USBD_FS_ProductStrDescriptor+0x34>)
 801017a:	4805      	ldr	r0, [pc, #20]	@ (8010190 <USBD_FS_ProductStrDescriptor+0x38>)
 801017c:	f7ff fd7a 	bl	800fc74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010180:	4b02      	ldr	r3, [pc, #8]	@ (801018c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	200018b8 	.word	0x200018b8
 8010190:	08011368 	.word	0x08011368

08010194 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	4603      	mov	r3, r0
 801019c:	6039      	str	r1, [r7, #0]
 801019e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	4904      	ldr	r1, [pc, #16]	@ (80101b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80101a4:	4804      	ldr	r0, [pc, #16]	@ (80101b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80101a6:	f7ff fd65 	bl	800fc74 <USBD_GetString>
  return USBD_StrDesc;
 80101aa:	4b02      	ldr	r3, [pc, #8]	@ (80101b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3708      	adds	r7, #8
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	200018b8 	.word	0x200018b8
 80101b8:	08011380 	.word	0x08011380

080101bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	4603      	mov	r3, r0
 80101c4:	6039      	str	r1, [r7, #0]
 80101c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	221a      	movs	r2, #26
 80101cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80101ce:	f000 f843 	bl	8010258 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80101d2:	4b02      	ldr	r3, [pc, #8]	@ (80101dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	200000f8 	.word	0x200000f8

080101e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	4603      	mov	r3, r0
 80101e8:	6039      	str	r1, [r7, #0]
 80101ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d105      	bne.n	80101fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	4907      	ldr	r1, [pc, #28]	@ (8010214 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101f6:	4808      	ldr	r0, [pc, #32]	@ (8010218 <USBD_FS_ConfigStrDescriptor+0x38>)
 80101f8:	f7ff fd3c 	bl	800fc74 <USBD_GetString>
 80101fc:	e004      	b.n	8010208 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	4904      	ldr	r1, [pc, #16]	@ (8010214 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010202:	4805      	ldr	r0, [pc, #20]	@ (8010218 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010204:	f7ff fd36 	bl	800fc74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010208:	4b02      	ldr	r3, [pc, #8]	@ (8010214 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801020a:	4618      	mov	r0, r3
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	200018b8 	.word	0x200018b8
 8010218:	08011394 	.word	0x08011394

0801021c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	4603      	mov	r3, r0
 8010224:	6039      	str	r1, [r7, #0]
 8010226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d105      	bne.n	801023a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	4907      	ldr	r1, [pc, #28]	@ (8010250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010232:	4808      	ldr	r0, [pc, #32]	@ (8010254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010234:	f7ff fd1e 	bl	800fc74 <USBD_GetString>
 8010238:	e004      	b.n	8010244 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	4904      	ldr	r1, [pc, #16]	@ (8010250 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801023e:	4805      	ldr	r0, [pc, #20]	@ (8010254 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010240:	f7ff fd18 	bl	800fc74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010244:	4b02      	ldr	r3, [pc, #8]	@ (8010250 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010246:	4618      	mov	r0, r3
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	200018b8 	.word	0x200018b8
 8010254:	080113a0 	.word	0x080113a0

08010258 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b084      	sub	sp, #16
 801025c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801025e:	4b0f      	ldr	r3, [pc, #60]	@ (801029c <Get_SerialNum+0x44>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010264:	4b0e      	ldr	r3, [pc, #56]	@ (80102a0 <Get_SerialNum+0x48>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801026a:	4b0e      	ldr	r3, [pc, #56]	@ (80102a4 <Get_SerialNum+0x4c>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	4413      	add	r3, r2
 8010276:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d009      	beq.n	8010292 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801027e:	2208      	movs	r2, #8
 8010280:	4909      	ldr	r1, [pc, #36]	@ (80102a8 <Get_SerialNum+0x50>)
 8010282:	68f8      	ldr	r0, [r7, #12]
 8010284:	f000 f814 	bl	80102b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010288:	2204      	movs	r2, #4
 801028a:	4908      	ldr	r1, [pc, #32]	@ (80102ac <Get_SerialNum+0x54>)
 801028c:	68b8      	ldr	r0, [r7, #8]
 801028e:	f000 f80f 	bl	80102b0 <IntToUnicode>
  }
}
 8010292:	bf00      	nop
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	1fff7a10 	.word	0x1fff7a10
 80102a0:	1fff7a14 	.word	0x1fff7a14
 80102a4:	1fff7a18 	.word	0x1fff7a18
 80102a8:	200000fa 	.word	0x200000fa
 80102ac:	2000010a 	.word	0x2000010a

080102b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80102b0:	b480      	push	{r7}
 80102b2:	b087      	sub	sp, #28
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	4613      	mov	r3, r2
 80102bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80102be:	2300      	movs	r3, #0
 80102c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102c2:	2300      	movs	r3, #0
 80102c4:	75fb      	strb	r3, [r7, #23]
 80102c6:	e027      	b.n	8010318 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	0f1b      	lsrs	r3, r3, #28
 80102cc:	2b09      	cmp	r3, #9
 80102ce:	d80b      	bhi.n	80102e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	0f1b      	lsrs	r3, r3, #28
 80102d4:	b2da      	uxtb	r2, r3
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	005b      	lsls	r3, r3, #1
 80102da:	4619      	mov	r1, r3
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	440b      	add	r3, r1
 80102e0:	3230      	adds	r2, #48	@ 0x30
 80102e2:	b2d2      	uxtb	r2, r2
 80102e4:	701a      	strb	r2, [r3, #0]
 80102e6:	e00a      	b.n	80102fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	0f1b      	lsrs	r3, r3, #28
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4619      	mov	r1, r3
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	440b      	add	r3, r1
 80102f8:	3237      	adds	r2, #55	@ 0x37
 80102fa:	b2d2      	uxtb	r2, r2
 80102fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	011b      	lsls	r3, r3, #4
 8010302:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	005b      	lsls	r3, r3, #1
 8010308:	3301      	adds	r3, #1
 801030a:	68ba      	ldr	r2, [r7, #8]
 801030c:	4413      	add	r3, r2
 801030e:	2200      	movs	r2, #0
 8010310:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	3301      	adds	r3, #1
 8010316:	75fb      	strb	r3, [r7, #23]
 8010318:	7dfa      	ldrb	r2, [r7, #23]
 801031a:	79fb      	ldrb	r3, [r7, #7]
 801031c:	429a      	cmp	r2, r3
 801031e:	d3d3      	bcc.n	80102c8 <IntToUnicode+0x18>
  }
}
 8010320:	bf00      	nop
 8010322:	bf00      	nop
 8010324:	371c      	adds	r7, #28
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr
	...

08010330 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b08a      	sub	sp, #40	@ 0x28
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010338:	f107 0314 	add.w	r3, r7, #20
 801033c:	2200      	movs	r2, #0
 801033e:	601a      	str	r2, [r3, #0]
 8010340:	605a      	str	r2, [r3, #4]
 8010342:	609a      	str	r2, [r3, #8]
 8010344:	60da      	str	r2, [r3, #12]
 8010346:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010350:	d13a      	bne.n	80103c8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010352:	2300      	movs	r3, #0
 8010354:	613b      	str	r3, [r7, #16]
 8010356:	4b1e      	ldr	r3, [pc, #120]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 8010358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801035a:	4a1d      	ldr	r2, [pc, #116]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 801035c:	f043 0301 	orr.w	r3, r3, #1
 8010360:	6313      	str	r3, [r2, #48]	@ 0x30
 8010362:	4b1b      	ldr	r3, [pc, #108]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 8010364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010366:	f003 0301 	and.w	r3, r3, #1
 801036a:	613b      	str	r3, [r7, #16]
 801036c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801036e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010374:	2302      	movs	r3, #2
 8010376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010378:	2300      	movs	r3, #0
 801037a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801037c:	2303      	movs	r3, #3
 801037e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010380:	230a      	movs	r3, #10
 8010382:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010384:	f107 0314 	add.w	r3, r7, #20
 8010388:	4619      	mov	r1, r3
 801038a:	4812      	ldr	r0, [pc, #72]	@ (80103d4 <HAL_PCD_MspInit+0xa4>)
 801038c:	f7f4 fe86 	bl	800509c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010390:	4b0f      	ldr	r3, [pc, #60]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 8010392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010394:	4a0e      	ldr	r2, [pc, #56]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 8010396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801039a:	6353      	str	r3, [r2, #52]	@ 0x34
 801039c:	2300      	movs	r3, #0
 801039e:	60fb      	str	r3, [r7, #12]
 80103a0:	4b0b      	ldr	r3, [pc, #44]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 80103a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103a4:	4a0a      	ldr	r2, [pc, #40]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 80103a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80103aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80103ac:	4b08      	ldr	r3, [pc, #32]	@ (80103d0 <HAL_PCD_MspInit+0xa0>)
 80103ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80103b4:	60fb      	str	r3, [r7, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103b8:	2200      	movs	r2, #0
 80103ba:	2100      	movs	r1, #0
 80103bc:	2043      	movs	r0, #67	@ 0x43
 80103be:	f7f4 fa1a 	bl	80047f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103c2:	2043      	movs	r0, #67	@ 0x43
 80103c4:	f7f4 fa33 	bl	800482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103c8:	bf00      	nop
 80103ca:	3728      	adds	r7, #40	@ 0x28
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	40023800 	.word	0x40023800
 80103d4:	40020000 	.word	0x40020000

080103d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80103ec:	4619      	mov	r1, r3
 80103ee:	4610      	mov	r0, r2
 80103f0:	f7fe fadd 	bl	800e9ae <USBD_LL_SetupStage>
}
 80103f4:	bf00      	nop
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}

080103fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	460b      	mov	r3, r1
 8010406:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801040e:	78fa      	ldrb	r2, [r7, #3]
 8010410:	6879      	ldr	r1, [r7, #4]
 8010412:	4613      	mov	r3, r2
 8010414:	00db      	lsls	r3, r3, #3
 8010416:	4413      	add	r3, r2
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	440b      	add	r3, r1
 801041c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	78fb      	ldrb	r3, [r7, #3]
 8010424:	4619      	mov	r1, r3
 8010426:	f7fe fb17 	bl	800ea58 <USBD_LL_DataOutStage>
}
 801042a:	bf00      	nop
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}

08010432 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b082      	sub	sp, #8
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	460b      	mov	r3, r1
 801043c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010444:	78fa      	ldrb	r2, [r7, #3]
 8010446:	6879      	ldr	r1, [r7, #4]
 8010448:	4613      	mov	r3, r2
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	4413      	add	r3, r2
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	440b      	add	r3, r1
 8010452:	3320      	adds	r3, #32
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	78fb      	ldrb	r3, [r7, #3]
 8010458:	4619      	mov	r1, r3
 801045a:	f7fe fbb0 	bl	800ebbe <USBD_LL_DataInStage>
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b082      	sub	sp, #8
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010474:	4618      	mov	r0, r3
 8010476:	f7fe fcea 	bl	800ee4e <USBD_LL_SOF>
}
 801047a:	bf00      	nop
 801047c:	3708      	adds	r7, #8
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b084      	sub	sp, #16
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801048a:	2301      	movs	r3, #1
 801048c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	79db      	ldrb	r3, [r3, #7]
 8010492:	2b02      	cmp	r3, #2
 8010494:	d001      	beq.n	801049a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010496:	f7f2 ffa3 	bl	80033e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104a0:	7bfa      	ldrb	r2, [r7, #15]
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fe fc8e 	bl	800edc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fe fc36 	bl	800ed22 <USBD_LL_Reset>
}
 80104b6:	bf00      	nop
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
	...

080104c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104ce:	4618      	mov	r0, r3
 80104d0:	f7fe fc89 	bl	800ede6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	6812      	ldr	r2, [r2, #0]
 80104e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80104e6:	f043 0301 	orr.w	r3, r3, #1
 80104ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	7adb      	ldrb	r3, [r3, #11]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d005      	beq.n	8010500 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80104f4:	4b04      	ldr	r3, [pc, #16]	@ (8010508 <HAL_PCD_SuspendCallback+0x48>)
 80104f6:	691b      	ldr	r3, [r3, #16]
 80104f8:	4a03      	ldr	r2, [pc, #12]	@ (8010508 <HAL_PCD_SuspendCallback+0x48>)
 80104fa:	f043 0306 	orr.w	r3, r3, #6
 80104fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	e000ed00 	.word	0xe000ed00

0801050c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801051a:	4618      	mov	r0, r3
 801051c:	f7fe fc7f 	bl	800ee1e <USBD_LL_Resume>
}
 8010520:	bf00      	nop
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	460b      	mov	r3, r1
 8010532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801053a:	78fa      	ldrb	r2, [r7, #3]
 801053c:	4611      	mov	r1, r2
 801053e:	4618      	mov	r0, r3
 8010540:	f7fe fcd7 	bl	800eef2 <USBD_LL_IsoOUTIncomplete>
}
 8010544:	bf00      	nop
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	460b      	mov	r3, r1
 8010556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801055e:	78fa      	ldrb	r2, [r7, #3]
 8010560:	4611      	mov	r1, r2
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe fc93 	bl	800ee8e <USBD_LL_IsoINIncomplete>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fce9 	bl	800ef56 <USBD_LL_DevConnected>
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fce6 	bl	800ef6c <USBD_LL_DevDisconnected>
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d13c      	bne.n	8010632 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80105b8:	4a20      	ldr	r2, [pc, #128]	@ (801063c <USBD_LL_Init+0x94>)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4a1e      	ldr	r2, [pc, #120]	@ (801063c <USBD_LL_Init+0x94>)
 80105c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105c8:	4b1c      	ldr	r3, [pc, #112]	@ (801063c <USBD_LL_Init+0x94>)
 80105ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80105ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80105d0:	4b1a      	ldr	r3, [pc, #104]	@ (801063c <USBD_LL_Init+0x94>)
 80105d2:	2204      	movs	r2, #4
 80105d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80105d6:	4b19      	ldr	r3, [pc, #100]	@ (801063c <USBD_LL_Init+0x94>)
 80105d8:	2202      	movs	r2, #2
 80105da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105dc:	4b17      	ldr	r3, [pc, #92]	@ (801063c <USBD_LL_Init+0x94>)
 80105de:	2200      	movs	r2, #0
 80105e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80105e2:	4b16      	ldr	r3, [pc, #88]	@ (801063c <USBD_LL_Init+0x94>)
 80105e4:	2202      	movs	r2, #2
 80105e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105e8:	4b14      	ldr	r3, [pc, #80]	@ (801063c <USBD_LL_Init+0x94>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80105ee:	4b13      	ldr	r3, [pc, #76]	@ (801063c <USBD_LL_Init+0x94>)
 80105f0:	2200      	movs	r2, #0
 80105f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80105f4:	4b11      	ldr	r3, [pc, #68]	@ (801063c <USBD_LL_Init+0x94>)
 80105f6:	2200      	movs	r2, #0
 80105f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80105fa:	4b10      	ldr	r3, [pc, #64]	@ (801063c <USBD_LL_Init+0x94>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010600:	4b0e      	ldr	r3, [pc, #56]	@ (801063c <USBD_LL_Init+0x94>)
 8010602:	2200      	movs	r2, #0
 8010604:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010606:	480d      	ldr	r0, [pc, #52]	@ (801063c <USBD_LL_Init+0x94>)
 8010608:	f7f8 fb09 	bl	8008c1e <HAL_PCD_Init>
 801060c:	4603      	mov	r3, r0
 801060e:	2b00      	cmp	r3, #0
 8010610:	d001      	beq.n	8010616 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010612:	f7f2 fee5 	bl	80033e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010616:	2180      	movs	r1, #128	@ 0x80
 8010618:	4808      	ldr	r0, [pc, #32]	@ (801063c <USBD_LL_Init+0x94>)
 801061a:	f7f9 fd36 	bl	800a08a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801061e:	2240      	movs	r2, #64	@ 0x40
 8010620:	2100      	movs	r1, #0
 8010622:	4806      	ldr	r0, [pc, #24]	@ (801063c <USBD_LL_Init+0x94>)
 8010624:	f7f9 fcea 	bl	8009ffc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010628:	2280      	movs	r2, #128	@ 0x80
 801062a:	2101      	movs	r1, #1
 801062c:	4803      	ldr	r0, [pc, #12]	@ (801063c <USBD_LL_Init+0x94>)
 801062e:	f7f9 fce5 	bl	8009ffc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20001ab8 	.word	0x20001ab8

08010640 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010656:	4618      	mov	r0, r3
 8010658:	f7f8 fbf0 	bl	8008e3c <HAL_PCD_Start>
 801065c:	4603      	mov	r3, r0
 801065e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010660:	7bfb      	ldrb	r3, [r7, #15]
 8010662:	4618      	mov	r0, r3
 8010664:	f000 f942 	bl	80108ec <USBD_Get_USB_Status>
 8010668:	4603      	mov	r3, r0
 801066a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801066c:	7bbb      	ldrb	r3, [r7, #14]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b084      	sub	sp, #16
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	4608      	mov	r0, r1
 8010680:	4611      	mov	r1, r2
 8010682:	461a      	mov	r2, r3
 8010684:	4603      	mov	r3, r0
 8010686:	70fb      	strb	r3, [r7, #3]
 8010688:	460b      	mov	r3, r1
 801068a:	70bb      	strb	r3, [r7, #2]
 801068c:	4613      	mov	r3, r2
 801068e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010690:	2300      	movs	r3, #0
 8010692:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010694:	2300      	movs	r3, #0
 8010696:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801069e:	78bb      	ldrb	r3, [r7, #2]
 80106a0:	883a      	ldrh	r2, [r7, #0]
 80106a2:	78f9      	ldrb	r1, [r7, #3]
 80106a4:	f7f9 f8c4 	bl	8009830 <HAL_PCD_EP_Open>
 80106a8:	4603      	mov	r3, r0
 80106aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106ac:	7bfb      	ldrb	r3, [r7, #15]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 f91c 	bl	80108ec <USBD_Get_USB_Status>
 80106b4:	4603      	mov	r3, r0
 80106b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b084      	sub	sp, #16
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	460b      	mov	r3, r1
 80106cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106d2:	2300      	movs	r3, #0
 80106d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106dc:	78fa      	ldrb	r2, [r7, #3]
 80106de:	4611      	mov	r1, r2
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7f9 f90f 	bl	8009904 <HAL_PCD_EP_Close>
 80106e6:	4603      	mov	r3, r0
 80106e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106ea:	7bfb      	ldrb	r3, [r7, #15]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f000 f8fd 	bl	80108ec <USBD_Get_USB_Status>
 80106f2:	4603      	mov	r3, r0
 80106f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b084      	sub	sp, #16
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	460b      	mov	r3, r1
 801070a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801071a:	78fa      	ldrb	r2, [r7, #3]
 801071c:	4611      	mov	r1, r2
 801071e:	4618      	mov	r0, r3
 8010720:	f7f9 f9c7 	bl	8009ab2 <HAL_PCD_EP_SetStall>
 8010724:	4603      	mov	r3, r0
 8010726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	4618      	mov	r0, r3
 801072c:	f000 f8de 	bl	80108ec <USBD_Get_USB_Status>
 8010730:	4603      	mov	r3, r0
 8010732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010734:	7bbb      	ldrb	r3, [r7, #14]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}

0801073e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801073e:	b580      	push	{r7, lr}
 8010740:	b084      	sub	sp, #16
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
 8010746:	460b      	mov	r3, r1
 8010748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801074a:	2300      	movs	r3, #0
 801074c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801074e:	2300      	movs	r3, #0
 8010750:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010758:	78fa      	ldrb	r2, [r7, #3]
 801075a:	4611      	mov	r1, r2
 801075c:	4618      	mov	r0, r3
 801075e:	f7f9 fa0b 	bl	8009b78 <HAL_PCD_EP_ClrStall>
 8010762:	4603      	mov	r3, r0
 8010764:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f8bf 	bl	80108ec <USBD_Get_USB_Status>
 801076e:	4603      	mov	r3, r0
 8010770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010772:	7bbb      	ldrb	r3, [r7, #14]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801077c:	b480      	push	{r7}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801078e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010794:	2b00      	cmp	r3, #0
 8010796:	da0b      	bge.n	80107b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010798:	78fb      	ldrb	r3, [r7, #3]
 801079a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801079e:	68f9      	ldr	r1, [r7, #12]
 80107a0:	4613      	mov	r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	4413      	add	r3, r2
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	440b      	add	r3, r1
 80107aa:	3316      	adds	r3, #22
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	e00b      	b.n	80107c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107b0:	78fb      	ldrb	r3, [r7, #3]
 80107b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80107b6:	68f9      	ldr	r1, [r7, #12]
 80107b8:	4613      	mov	r3, r2
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	4413      	add	r3, r2
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	440b      	add	r3, r1
 80107c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80107c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	460b      	mov	r3, r1
 80107de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107e0:	2300      	movs	r3, #0
 80107e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107e4:	2300      	movs	r3, #0
 80107e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107ee:	78fa      	ldrb	r2, [r7, #3]
 80107f0:	4611      	mov	r1, r2
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7f8 fff8 	bl	80097e8 <HAL_PCD_SetAddress>
 80107f8:	4603      	mov	r3, r0
 80107fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107fc:	7bfb      	ldrb	r3, [r7, #15]
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 f874 	bl	80108ec <USBD_Get_USB_Status>
 8010804:	4603      	mov	r3, r0
 8010806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010808:	7bbb      	ldrb	r3, [r7, #14]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b086      	sub	sp, #24
 8010816:	af00      	add	r7, sp, #0
 8010818:	60f8      	str	r0, [r7, #12]
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	603b      	str	r3, [r7, #0]
 801081e:	460b      	mov	r3, r1
 8010820:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010822:	2300      	movs	r3, #0
 8010824:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010830:	7af9      	ldrb	r1, [r7, #11]
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	687a      	ldr	r2, [r7, #4]
 8010836:	f7f9 f902 	bl	8009a3e <HAL_PCD_EP_Transmit>
 801083a:	4603      	mov	r3, r0
 801083c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801083e:	7dfb      	ldrb	r3, [r7, #23]
 8010840:	4618      	mov	r0, r3
 8010842:	f000 f853 	bl	80108ec <USBD_Get_USB_Status>
 8010846:	4603      	mov	r3, r0
 8010848:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801084a:	7dbb      	ldrb	r3, [r7, #22]
}
 801084c:	4618      	mov	r0, r3
 801084e:	3718      	adds	r7, #24
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b086      	sub	sp, #24
 8010858:	af00      	add	r7, sp, #0
 801085a:	60f8      	str	r0, [r7, #12]
 801085c:	607a      	str	r2, [r7, #4]
 801085e:	603b      	str	r3, [r7, #0]
 8010860:	460b      	mov	r3, r1
 8010862:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010864:	2300      	movs	r3, #0
 8010866:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010868:	2300      	movs	r3, #0
 801086a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010872:	7af9      	ldrb	r1, [r7, #11]
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	f7f9 f88e 	bl	8009998 <HAL_PCD_EP_Receive>
 801087c:	4603      	mov	r3, r0
 801087e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010880:	7dfb      	ldrb	r3, [r7, #23]
 8010882:	4618      	mov	r0, r3
 8010884:	f000 f832 	bl	80108ec <USBD_Get_USB_Status>
 8010888:	4603      	mov	r3, r0
 801088a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801088c:	7dbb      	ldrb	r3, [r7, #22]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3718      	adds	r7, #24
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}

08010896 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010896:	b580      	push	{r7, lr}
 8010898:	b082      	sub	sp, #8
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
 801089e:	460b      	mov	r3, r1
 80108a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80108a8:	78fa      	ldrb	r2, [r7, #3]
 80108aa:	4611      	mov	r1, r2
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7f9 f8ae 	bl	8009a0e <HAL_PCD_EP_GetRxCount>
 80108b2:	4603      	mov	r3, r0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80108c4:	4b03      	ldr	r3, [pc, #12]	@ (80108d4 <USBD_static_malloc+0x18>)
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr
 80108d2:	bf00      	nop
 80108d4:	20001f9c 	.word	0x20001f9c

080108d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]

}
 80108e0:	bf00      	nop
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b085      	sub	sp, #20
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	4603      	mov	r3, r0
 80108f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108fa:	79fb      	ldrb	r3, [r7, #7]
 80108fc:	2b03      	cmp	r3, #3
 80108fe:	d817      	bhi.n	8010930 <USBD_Get_USB_Status+0x44>
 8010900:	a201      	add	r2, pc, #4	@ (adr r2, 8010908 <USBD_Get_USB_Status+0x1c>)
 8010902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010906:	bf00      	nop
 8010908:	08010919 	.word	0x08010919
 801090c:	0801091f 	.word	0x0801091f
 8010910:	08010925 	.word	0x08010925
 8010914:	0801092b 	.word	0x0801092b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010918:	2300      	movs	r3, #0
 801091a:	73fb      	strb	r3, [r7, #15]
    break;
 801091c:	e00b      	b.n	8010936 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801091e:	2303      	movs	r3, #3
 8010920:	73fb      	strb	r3, [r7, #15]
    break;
 8010922:	e008      	b.n	8010936 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010924:	2301      	movs	r3, #1
 8010926:	73fb      	strb	r3, [r7, #15]
    break;
 8010928:	e005      	b.n	8010936 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801092a:	2303      	movs	r3, #3
 801092c:	73fb      	strb	r3, [r7, #15]
    break;
 801092e:	e002      	b.n	8010936 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010930:	2303      	movs	r3, #3
 8010932:	73fb      	strb	r3, [r7, #15]
    break;
 8010934:	bf00      	nop
  }
  return usb_status;
 8010936:	7bfb      	ldrb	r3, [r7, #15]
}
 8010938:	4618      	mov	r0, r3
 801093a:	3714      	adds	r7, #20
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <siprintf>:
 8010944:	b40e      	push	{r1, r2, r3}
 8010946:	b510      	push	{r4, lr}
 8010948:	b09d      	sub	sp, #116	@ 0x74
 801094a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801094c:	9002      	str	r0, [sp, #8]
 801094e:	9006      	str	r0, [sp, #24]
 8010950:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010954:	480a      	ldr	r0, [pc, #40]	@ (8010980 <siprintf+0x3c>)
 8010956:	9107      	str	r1, [sp, #28]
 8010958:	9104      	str	r1, [sp, #16]
 801095a:	490a      	ldr	r1, [pc, #40]	@ (8010984 <siprintf+0x40>)
 801095c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010960:	9105      	str	r1, [sp, #20]
 8010962:	2400      	movs	r4, #0
 8010964:	a902      	add	r1, sp, #8
 8010966:	6800      	ldr	r0, [r0, #0]
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801096c:	f000 f9a2 	bl	8010cb4 <_svfiprintf_r>
 8010970:	9b02      	ldr	r3, [sp, #8]
 8010972:	701c      	strb	r4, [r3, #0]
 8010974:	b01d      	add	sp, #116	@ 0x74
 8010976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801097a:	b003      	add	sp, #12
 801097c:	4770      	bx	lr
 801097e:	bf00      	nop
 8010980:	20000114 	.word	0x20000114
 8010984:	ffff0208 	.word	0xffff0208

08010988 <memset>:
 8010988:	4402      	add	r2, r0
 801098a:	4603      	mov	r3, r0
 801098c:	4293      	cmp	r3, r2
 801098e:	d100      	bne.n	8010992 <memset+0xa>
 8010990:	4770      	bx	lr
 8010992:	f803 1b01 	strb.w	r1, [r3], #1
 8010996:	e7f9      	b.n	801098c <memset+0x4>

08010998 <__errno>:
 8010998:	4b01      	ldr	r3, [pc, #4]	@ (80109a0 <__errno+0x8>)
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	4770      	bx	lr
 801099e:	bf00      	nop
 80109a0:	20000114 	.word	0x20000114

080109a4 <__libc_init_array>:
 80109a4:	b570      	push	{r4, r5, r6, lr}
 80109a6:	4d0d      	ldr	r5, [pc, #52]	@ (80109dc <__libc_init_array+0x38>)
 80109a8:	4c0d      	ldr	r4, [pc, #52]	@ (80109e0 <__libc_init_array+0x3c>)
 80109aa:	1b64      	subs	r4, r4, r5
 80109ac:	10a4      	asrs	r4, r4, #2
 80109ae:	2600      	movs	r6, #0
 80109b0:	42a6      	cmp	r6, r4
 80109b2:	d109      	bne.n	80109c8 <__libc_init_array+0x24>
 80109b4:	4d0b      	ldr	r5, [pc, #44]	@ (80109e4 <__libc_init_array+0x40>)
 80109b6:	4c0c      	ldr	r4, [pc, #48]	@ (80109e8 <__libc_init_array+0x44>)
 80109b8:	f000 fc64 	bl	8011284 <_init>
 80109bc:	1b64      	subs	r4, r4, r5
 80109be:	10a4      	asrs	r4, r4, #2
 80109c0:	2600      	movs	r6, #0
 80109c2:	42a6      	cmp	r6, r4
 80109c4:	d105      	bne.n	80109d2 <__libc_init_array+0x2e>
 80109c6:	bd70      	pop	{r4, r5, r6, pc}
 80109c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80109cc:	4798      	blx	r3
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7ee      	b.n	80109b0 <__libc_init_array+0xc>
 80109d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80109d6:	4798      	blx	r3
 80109d8:	3601      	adds	r6, #1
 80109da:	e7f2      	b.n	80109c2 <__libc_init_array+0x1e>
 80109dc:	080124e0 	.word	0x080124e0
 80109e0:	080124e0 	.word	0x080124e0
 80109e4:	080124e0 	.word	0x080124e0
 80109e8:	080124e4 	.word	0x080124e4

080109ec <__retarget_lock_acquire_recursive>:
 80109ec:	4770      	bx	lr

080109ee <__retarget_lock_release_recursive>:
 80109ee:	4770      	bx	lr

080109f0 <memcpy>:
 80109f0:	440a      	add	r2, r1
 80109f2:	4291      	cmp	r1, r2
 80109f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80109f8:	d100      	bne.n	80109fc <memcpy+0xc>
 80109fa:	4770      	bx	lr
 80109fc:	b510      	push	{r4, lr}
 80109fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a06:	4291      	cmp	r1, r2
 8010a08:	d1f9      	bne.n	80109fe <memcpy+0xe>
 8010a0a:	bd10      	pop	{r4, pc}

08010a0c <_free_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4605      	mov	r5, r0
 8010a10:	2900      	cmp	r1, #0
 8010a12:	d041      	beq.n	8010a98 <_free_r+0x8c>
 8010a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a18:	1f0c      	subs	r4, r1, #4
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	bfb8      	it	lt
 8010a1e:	18e4      	addlt	r4, r4, r3
 8010a20:	f000 f8e0 	bl	8010be4 <__malloc_lock>
 8010a24:	4a1d      	ldr	r2, [pc, #116]	@ (8010a9c <_free_r+0x90>)
 8010a26:	6813      	ldr	r3, [r2, #0]
 8010a28:	b933      	cbnz	r3, 8010a38 <_free_r+0x2c>
 8010a2a:	6063      	str	r3, [r4, #4]
 8010a2c:	6014      	str	r4, [r2, #0]
 8010a2e:	4628      	mov	r0, r5
 8010a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a34:	f000 b8dc 	b.w	8010bf0 <__malloc_unlock>
 8010a38:	42a3      	cmp	r3, r4
 8010a3a:	d908      	bls.n	8010a4e <_free_r+0x42>
 8010a3c:	6820      	ldr	r0, [r4, #0]
 8010a3e:	1821      	adds	r1, r4, r0
 8010a40:	428b      	cmp	r3, r1
 8010a42:	bf01      	itttt	eq
 8010a44:	6819      	ldreq	r1, [r3, #0]
 8010a46:	685b      	ldreq	r3, [r3, #4]
 8010a48:	1809      	addeq	r1, r1, r0
 8010a4a:	6021      	streq	r1, [r4, #0]
 8010a4c:	e7ed      	b.n	8010a2a <_free_r+0x1e>
 8010a4e:	461a      	mov	r2, r3
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	b10b      	cbz	r3, 8010a58 <_free_r+0x4c>
 8010a54:	42a3      	cmp	r3, r4
 8010a56:	d9fa      	bls.n	8010a4e <_free_r+0x42>
 8010a58:	6811      	ldr	r1, [r2, #0]
 8010a5a:	1850      	adds	r0, r2, r1
 8010a5c:	42a0      	cmp	r0, r4
 8010a5e:	d10b      	bne.n	8010a78 <_free_r+0x6c>
 8010a60:	6820      	ldr	r0, [r4, #0]
 8010a62:	4401      	add	r1, r0
 8010a64:	1850      	adds	r0, r2, r1
 8010a66:	4283      	cmp	r3, r0
 8010a68:	6011      	str	r1, [r2, #0]
 8010a6a:	d1e0      	bne.n	8010a2e <_free_r+0x22>
 8010a6c:	6818      	ldr	r0, [r3, #0]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	6053      	str	r3, [r2, #4]
 8010a72:	4408      	add	r0, r1
 8010a74:	6010      	str	r0, [r2, #0]
 8010a76:	e7da      	b.n	8010a2e <_free_r+0x22>
 8010a78:	d902      	bls.n	8010a80 <_free_r+0x74>
 8010a7a:	230c      	movs	r3, #12
 8010a7c:	602b      	str	r3, [r5, #0]
 8010a7e:	e7d6      	b.n	8010a2e <_free_r+0x22>
 8010a80:	6820      	ldr	r0, [r4, #0]
 8010a82:	1821      	adds	r1, r4, r0
 8010a84:	428b      	cmp	r3, r1
 8010a86:	bf04      	itt	eq
 8010a88:	6819      	ldreq	r1, [r3, #0]
 8010a8a:	685b      	ldreq	r3, [r3, #4]
 8010a8c:	6063      	str	r3, [r4, #4]
 8010a8e:	bf04      	itt	eq
 8010a90:	1809      	addeq	r1, r1, r0
 8010a92:	6021      	streq	r1, [r4, #0]
 8010a94:	6054      	str	r4, [r2, #4]
 8010a96:	e7ca      	b.n	8010a2e <_free_r+0x22>
 8010a98:	bd38      	pop	{r3, r4, r5, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20002300 	.word	0x20002300

08010aa0 <sbrk_aligned>:
 8010aa0:	b570      	push	{r4, r5, r6, lr}
 8010aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8010ae0 <sbrk_aligned+0x40>)
 8010aa4:	460c      	mov	r4, r1
 8010aa6:	6831      	ldr	r1, [r6, #0]
 8010aa8:	4605      	mov	r5, r0
 8010aaa:	b911      	cbnz	r1, 8010ab2 <sbrk_aligned+0x12>
 8010aac:	f000 fba4 	bl	80111f8 <_sbrk_r>
 8010ab0:	6030      	str	r0, [r6, #0]
 8010ab2:	4621      	mov	r1, r4
 8010ab4:	4628      	mov	r0, r5
 8010ab6:	f000 fb9f 	bl	80111f8 <_sbrk_r>
 8010aba:	1c43      	adds	r3, r0, #1
 8010abc:	d103      	bne.n	8010ac6 <sbrk_aligned+0x26>
 8010abe:	f04f 34ff 	mov.w	r4, #4294967295
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	bd70      	pop	{r4, r5, r6, pc}
 8010ac6:	1cc4      	adds	r4, r0, #3
 8010ac8:	f024 0403 	bic.w	r4, r4, #3
 8010acc:	42a0      	cmp	r0, r4
 8010ace:	d0f8      	beq.n	8010ac2 <sbrk_aligned+0x22>
 8010ad0:	1a21      	subs	r1, r4, r0
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	f000 fb90 	bl	80111f8 <_sbrk_r>
 8010ad8:	3001      	adds	r0, #1
 8010ada:	d1f2      	bne.n	8010ac2 <sbrk_aligned+0x22>
 8010adc:	e7ef      	b.n	8010abe <sbrk_aligned+0x1e>
 8010ade:	bf00      	nop
 8010ae0:	200022fc 	.word	0x200022fc

08010ae4 <_malloc_r>:
 8010ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae8:	1ccd      	adds	r5, r1, #3
 8010aea:	f025 0503 	bic.w	r5, r5, #3
 8010aee:	3508      	adds	r5, #8
 8010af0:	2d0c      	cmp	r5, #12
 8010af2:	bf38      	it	cc
 8010af4:	250c      	movcc	r5, #12
 8010af6:	2d00      	cmp	r5, #0
 8010af8:	4606      	mov	r6, r0
 8010afa:	db01      	blt.n	8010b00 <_malloc_r+0x1c>
 8010afc:	42a9      	cmp	r1, r5
 8010afe:	d904      	bls.n	8010b0a <_malloc_r+0x26>
 8010b00:	230c      	movs	r3, #12
 8010b02:	6033      	str	r3, [r6, #0]
 8010b04:	2000      	movs	r0, #0
 8010b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010be0 <_malloc_r+0xfc>
 8010b0e:	f000 f869 	bl	8010be4 <__malloc_lock>
 8010b12:	f8d8 3000 	ldr.w	r3, [r8]
 8010b16:	461c      	mov	r4, r3
 8010b18:	bb44      	cbnz	r4, 8010b6c <_malloc_r+0x88>
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	f7ff ffbf 	bl	8010aa0 <sbrk_aligned>
 8010b22:	1c43      	adds	r3, r0, #1
 8010b24:	4604      	mov	r4, r0
 8010b26:	d158      	bne.n	8010bda <_malloc_r+0xf6>
 8010b28:	f8d8 4000 	ldr.w	r4, [r8]
 8010b2c:	4627      	mov	r7, r4
 8010b2e:	2f00      	cmp	r7, #0
 8010b30:	d143      	bne.n	8010bba <_malloc_r+0xd6>
 8010b32:	2c00      	cmp	r4, #0
 8010b34:	d04b      	beq.n	8010bce <_malloc_r+0xea>
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	4639      	mov	r1, r7
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	eb04 0903 	add.w	r9, r4, r3
 8010b40:	f000 fb5a 	bl	80111f8 <_sbrk_r>
 8010b44:	4581      	cmp	r9, r0
 8010b46:	d142      	bne.n	8010bce <_malloc_r+0xea>
 8010b48:	6821      	ldr	r1, [r4, #0]
 8010b4a:	1a6d      	subs	r5, r5, r1
 8010b4c:	4629      	mov	r1, r5
 8010b4e:	4630      	mov	r0, r6
 8010b50:	f7ff ffa6 	bl	8010aa0 <sbrk_aligned>
 8010b54:	3001      	adds	r0, #1
 8010b56:	d03a      	beq.n	8010bce <_malloc_r+0xea>
 8010b58:	6823      	ldr	r3, [r4, #0]
 8010b5a:	442b      	add	r3, r5
 8010b5c:	6023      	str	r3, [r4, #0]
 8010b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8010b62:	685a      	ldr	r2, [r3, #4]
 8010b64:	bb62      	cbnz	r2, 8010bc0 <_malloc_r+0xdc>
 8010b66:	f8c8 7000 	str.w	r7, [r8]
 8010b6a:	e00f      	b.n	8010b8c <_malloc_r+0xa8>
 8010b6c:	6822      	ldr	r2, [r4, #0]
 8010b6e:	1b52      	subs	r2, r2, r5
 8010b70:	d420      	bmi.n	8010bb4 <_malloc_r+0xd0>
 8010b72:	2a0b      	cmp	r2, #11
 8010b74:	d917      	bls.n	8010ba6 <_malloc_r+0xc2>
 8010b76:	1961      	adds	r1, r4, r5
 8010b78:	42a3      	cmp	r3, r4
 8010b7a:	6025      	str	r5, [r4, #0]
 8010b7c:	bf18      	it	ne
 8010b7e:	6059      	strne	r1, [r3, #4]
 8010b80:	6863      	ldr	r3, [r4, #4]
 8010b82:	bf08      	it	eq
 8010b84:	f8c8 1000 	streq.w	r1, [r8]
 8010b88:	5162      	str	r2, [r4, r5]
 8010b8a:	604b      	str	r3, [r1, #4]
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f000 f82f 	bl	8010bf0 <__malloc_unlock>
 8010b92:	f104 000b 	add.w	r0, r4, #11
 8010b96:	1d23      	adds	r3, r4, #4
 8010b98:	f020 0007 	bic.w	r0, r0, #7
 8010b9c:	1ac2      	subs	r2, r0, r3
 8010b9e:	bf1c      	itt	ne
 8010ba0:	1a1b      	subne	r3, r3, r0
 8010ba2:	50a3      	strne	r3, [r4, r2]
 8010ba4:	e7af      	b.n	8010b06 <_malloc_r+0x22>
 8010ba6:	6862      	ldr	r2, [r4, #4]
 8010ba8:	42a3      	cmp	r3, r4
 8010baa:	bf0c      	ite	eq
 8010bac:	f8c8 2000 	streq.w	r2, [r8]
 8010bb0:	605a      	strne	r2, [r3, #4]
 8010bb2:	e7eb      	b.n	8010b8c <_malloc_r+0xa8>
 8010bb4:	4623      	mov	r3, r4
 8010bb6:	6864      	ldr	r4, [r4, #4]
 8010bb8:	e7ae      	b.n	8010b18 <_malloc_r+0x34>
 8010bba:	463c      	mov	r4, r7
 8010bbc:	687f      	ldr	r7, [r7, #4]
 8010bbe:	e7b6      	b.n	8010b2e <_malloc_r+0x4a>
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	42a3      	cmp	r3, r4
 8010bc6:	d1fb      	bne.n	8010bc0 <_malloc_r+0xdc>
 8010bc8:	2300      	movs	r3, #0
 8010bca:	6053      	str	r3, [r2, #4]
 8010bcc:	e7de      	b.n	8010b8c <_malloc_r+0xa8>
 8010bce:	230c      	movs	r3, #12
 8010bd0:	6033      	str	r3, [r6, #0]
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	f000 f80c 	bl	8010bf0 <__malloc_unlock>
 8010bd8:	e794      	b.n	8010b04 <_malloc_r+0x20>
 8010bda:	6005      	str	r5, [r0, #0]
 8010bdc:	e7d6      	b.n	8010b8c <_malloc_r+0xa8>
 8010bde:	bf00      	nop
 8010be0:	20002300 	.word	0x20002300

08010be4 <__malloc_lock>:
 8010be4:	4801      	ldr	r0, [pc, #4]	@ (8010bec <__malloc_lock+0x8>)
 8010be6:	f7ff bf01 	b.w	80109ec <__retarget_lock_acquire_recursive>
 8010bea:	bf00      	nop
 8010bec:	200022f8 	.word	0x200022f8

08010bf0 <__malloc_unlock>:
 8010bf0:	4801      	ldr	r0, [pc, #4]	@ (8010bf8 <__malloc_unlock+0x8>)
 8010bf2:	f7ff befc 	b.w	80109ee <__retarget_lock_release_recursive>
 8010bf6:	bf00      	nop
 8010bf8:	200022f8 	.word	0x200022f8

08010bfc <__ssputs_r>:
 8010bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c00:	688e      	ldr	r6, [r1, #8]
 8010c02:	461f      	mov	r7, r3
 8010c04:	42be      	cmp	r6, r7
 8010c06:	680b      	ldr	r3, [r1, #0]
 8010c08:	4682      	mov	sl, r0
 8010c0a:	460c      	mov	r4, r1
 8010c0c:	4690      	mov	r8, r2
 8010c0e:	d82d      	bhi.n	8010c6c <__ssputs_r+0x70>
 8010c10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010c18:	d026      	beq.n	8010c68 <__ssputs_r+0x6c>
 8010c1a:	6965      	ldr	r5, [r4, #20]
 8010c1c:	6909      	ldr	r1, [r1, #16]
 8010c1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c22:	eba3 0901 	sub.w	r9, r3, r1
 8010c26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c2a:	1c7b      	adds	r3, r7, #1
 8010c2c:	444b      	add	r3, r9
 8010c2e:	106d      	asrs	r5, r5, #1
 8010c30:	429d      	cmp	r5, r3
 8010c32:	bf38      	it	cc
 8010c34:	461d      	movcc	r5, r3
 8010c36:	0553      	lsls	r3, r2, #21
 8010c38:	d527      	bpl.n	8010c8a <__ssputs_r+0x8e>
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	f7ff ff52 	bl	8010ae4 <_malloc_r>
 8010c40:	4606      	mov	r6, r0
 8010c42:	b360      	cbz	r0, 8010c9e <__ssputs_r+0xa2>
 8010c44:	6921      	ldr	r1, [r4, #16]
 8010c46:	464a      	mov	r2, r9
 8010c48:	f7ff fed2 	bl	80109f0 <memcpy>
 8010c4c:	89a3      	ldrh	r3, [r4, #12]
 8010c4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c56:	81a3      	strh	r3, [r4, #12]
 8010c58:	6126      	str	r6, [r4, #16]
 8010c5a:	6165      	str	r5, [r4, #20]
 8010c5c:	444e      	add	r6, r9
 8010c5e:	eba5 0509 	sub.w	r5, r5, r9
 8010c62:	6026      	str	r6, [r4, #0]
 8010c64:	60a5      	str	r5, [r4, #8]
 8010c66:	463e      	mov	r6, r7
 8010c68:	42be      	cmp	r6, r7
 8010c6a:	d900      	bls.n	8010c6e <__ssputs_r+0x72>
 8010c6c:	463e      	mov	r6, r7
 8010c6e:	6820      	ldr	r0, [r4, #0]
 8010c70:	4632      	mov	r2, r6
 8010c72:	4641      	mov	r1, r8
 8010c74:	f000 faa6 	bl	80111c4 <memmove>
 8010c78:	68a3      	ldr	r3, [r4, #8]
 8010c7a:	1b9b      	subs	r3, r3, r6
 8010c7c:	60a3      	str	r3, [r4, #8]
 8010c7e:	6823      	ldr	r3, [r4, #0]
 8010c80:	4433      	add	r3, r6
 8010c82:	6023      	str	r3, [r4, #0]
 8010c84:	2000      	movs	r0, #0
 8010c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c8a:	462a      	mov	r2, r5
 8010c8c:	f000 fac4 	bl	8011218 <_realloc_r>
 8010c90:	4606      	mov	r6, r0
 8010c92:	2800      	cmp	r0, #0
 8010c94:	d1e0      	bne.n	8010c58 <__ssputs_r+0x5c>
 8010c96:	6921      	ldr	r1, [r4, #16]
 8010c98:	4650      	mov	r0, sl
 8010c9a:	f7ff feb7 	bl	8010a0c <_free_r>
 8010c9e:	230c      	movs	r3, #12
 8010ca0:	f8ca 3000 	str.w	r3, [sl]
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb0:	e7e9      	b.n	8010c86 <__ssputs_r+0x8a>
	...

08010cb4 <_svfiprintf_r>:
 8010cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb8:	4698      	mov	r8, r3
 8010cba:	898b      	ldrh	r3, [r1, #12]
 8010cbc:	061b      	lsls	r3, r3, #24
 8010cbe:	b09d      	sub	sp, #116	@ 0x74
 8010cc0:	4607      	mov	r7, r0
 8010cc2:	460d      	mov	r5, r1
 8010cc4:	4614      	mov	r4, r2
 8010cc6:	d510      	bpl.n	8010cea <_svfiprintf_r+0x36>
 8010cc8:	690b      	ldr	r3, [r1, #16]
 8010cca:	b973      	cbnz	r3, 8010cea <_svfiprintf_r+0x36>
 8010ccc:	2140      	movs	r1, #64	@ 0x40
 8010cce:	f7ff ff09 	bl	8010ae4 <_malloc_r>
 8010cd2:	6028      	str	r0, [r5, #0]
 8010cd4:	6128      	str	r0, [r5, #16]
 8010cd6:	b930      	cbnz	r0, 8010ce6 <_svfiprintf_r+0x32>
 8010cd8:	230c      	movs	r3, #12
 8010cda:	603b      	str	r3, [r7, #0]
 8010cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce0:	b01d      	add	sp, #116	@ 0x74
 8010ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce6:	2340      	movs	r3, #64	@ 0x40
 8010ce8:	616b      	str	r3, [r5, #20]
 8010cea:	2300      	movs	r3, #0
 8010cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8010cee:	2320      	movs	r3, #32
 8010cf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010cf8:	2330      	movs	r3, #48	@ 0x30
 8010cfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010e98 <_svfiprintf_r+0x1e4>
 8010cfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d02:	f04f 0901 	mov.w	r9, #1
 8010d06:	4623      	mov	r3, r4
 8010d08:	469a      	mov	sl, r3
 8010d0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d0e:	b10a      	cbz	r2, 8010d14 <_svfiprintf_r+0x60>
 8010d10:	2a25      	cmp	r2, #37	@ 0x25
 8010d12:	d1f9      	bne.n	8010d08 <_svfiprintf_r+0x54>
 8010d14:	ebba 0b04 	subs.w	fp, sl, r4
 8010d18:	d00b      	beq.n	8010d32 <_svfiprintf_r+0x7e>
 8010d1a:	465b      	mov	r3, fp
 8010d1c:	4622      	mov	r2, r4
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4638      	mov	r0, r7
 8010d22:	f7ff ff6b 	bl	8010bfc <__ssputs_r>
 8010d26:	3001      	adds	r0, #1
 8010d28:	f000 80a7 	beq.w	8010e7a <_svfiprintf_r+0x1c6>
 8010d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d2e:	445a      	add	r2, fp
 8010d30:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d32:	f89a 3000 	ldrb.w	r3, [sl]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f000 809f 	beq.w	8010e7a <_svfiprintf_r+0x1c6>
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d46:	f10a 0a01 	add.w	sl, sl, #1
 8010d4a:	9304      	str	r3, [sp, #16]
 8010d4c:	9307      	str	r3, [sp, #28]
 8010d4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d52:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d54:	4654      	mov	r4, sl
 8010d56:	2205      	movs	r2, #5
 8010d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d5c:	484e      	ldr	r0, [pc, #312]	@ (8010e98 <_svfiprintf_r+0x1e4>)
 8010d5e:	f7ef fa3f 	bl	80001e0 <memchr>
 8010d62:	9a04      	ldr	r2, [sp, #16]
 8010d64:	b9d8      	cbnz	r0, 8010d9e <_svfiprintf_r+0xea>
 8010d66:	06d0      	lsls	r0, r2, #27
 8010d68:	bf44      	itt	mi
 8010d6a:	2320      	movmi	r3, #32
 8010d6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d70:	0711      	lsls	r1, r2, #28
 8010d72:	bf44      	itt	mi
 8010d74:	232b      	movmi	r3, #43	@ 0x2b
 8010d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d80:	d015      	beq.n	8010dae <_svfiprintf_r+0xfa>
 8010d82:	9a07      	ldr	r2, [sp, #28]
 8010d84:	4654      	mov	r4, sl
 8010d86:	2000      	movs	r0, #0
 8010d88:	f04f 0c0a 	mov.w	ip, #10
 8010d8c:	4621      	mov	r1, r4
 8010d8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d92:	3b30      	subs	r3, #48	@ 0x30
 8010d94:	2b09      	cmp	r3, #9
 8010d96:	d94b      	bls.n	8010e30 <_svfiprintf_r+0x17c>
 8010d98:	b1b0      	cbz	r0, 8010dc8 <_svfiprintf_r+0x114>
 8010d9a:	9207      	str	r2, [sp, #28]
 8010d9c:	e014      	b.n	8010dc8 <_svfiprintf_r+0x114>
 8010d9e:	eba0 0308 	sub.w	r3, r0, r8
 8010da2:	fa09 f303 	lsl.w	r3, r9, r3
 8010da6:	4313      	orrs	r3, r2
 8010da8:	9304      	str	r3, [sp, #16]
 8010daa:	46a2      	mov	sl, r4
 8010dac:	e7d2      	b.n	8010d54 <_svfiprintf_r+0xa0>
 8010dae:	9b03      	ldr	r3, [sp, #12]
 8010db0:	1d19      	adds	r1, r3, #4
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	9103      	str	r1, [sp, #12]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	bfbb      	ittet	lt
 8010dba:	425b      	neglt	r3, r3
 8010dbc:	f042 0202 	orrlt.w	r2, r2, #2
 8010dc0:	9307      	strge	r3, [sp, #28]
 8010dc2:	9307      	strlt	r3, [sp, #28]
 8010dc4:	bfb8      	it	lt
 8010dc6:	9204      	strlt	r2, [sp, #16]
 8010dc8:	7823      	ldrb	r3, [r4, #0]
 8010dca:	2b2e      	cmp	r3, #46	@ 0x2e
 8010dcc:	d10a      	bne.n	8010de4 <_svfiprintf_r+0x130>
 8010dce:	7863      	ldrb	r3, [r4, #1]
 8010dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dd2:	d132      	bne.n	8010e3a <_svfiprintf_r+0x186>
 8010dd4:	9b03      	ldr	r3, [sp, #12]
 8010dd6:	1d1a      	adds	r2, r3, #4
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	9203      	str	r2, [sp, #12]
 8010ddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010de0:	3402      	adds	r4, #2
 8010de2:	9305      	str	r3, [sp, #20]
 8010de4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010ea8 <_svfiprintf_r+0x1f4>
 8010de8:	7821      	ldrb	r1, [r4, #0]
 8010dea:	2203      	movs	r2, #3
 8010dec:	4650      	mov	r0, sl
 8010dee:	f7ef f9f7 	bl	80001e0 <memchr>
 8010df2:	b138      	cbz	r0, 8010e04 <_svfiprintf_r+0x150>
 8010df4:	9b04      	ldr	r3, [sp, #16]
 8010df6:	eba0 000a 	sub.w	r0, r0, sl
 8010dfa:	2240      	movs	r2, #64	@ 0x40
 8010dfc:	4082      	lsls	r2, r0
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	3401      	adds	r4, #1
 8010e02:	9304      	str	r3, [sp, #16]
 8010e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e08:	4824      	ldr	r0, [pc, #144]	@ (8010e9c <_svfiprintf_r+0x1e8>)
 8010e0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e0e:	2206      	movs	r2, #6
 8010e10:	f7ef f9e6 	bl	80001e0 <memchr>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d036      	beq.n	8010e86 <_svfiprintf_r+0x1d2>
 8010e18:	4b21      	ldr	r3, [pc, #132]	@ (8010ea0 <_svfiprintf_r+0x1ec>)
 8010e1a:	bb1b      	cbnz	r3, 8010e64 <_svfiprintf_r+0x1b0>
 8010e1c:	9b03      	ldr	r3, [sp, #12]
 8010e1e:	3307      	adds	r3, #7
 8010e20:	f023 0307 	bic.w	r3, r3, #7
 8010e24:	3308      	adds	r3, #8
 8010e26:	9303      	str	r3, [sp, #12]
 8010e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e2a:	4433      	add	r3, r6
 8010e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e2e:	e76a      	b.n	8010d06 <_svfiprintf_r+0x52>
 8010e30:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e34:	460c      	mov	r4, r1
 8010e36:	2001      	movs	r0, #1
 8010e38:	e7a8      	b.n	8010d8c <_svfiprintf_r+0xd8>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	3401      	adds	r4, #1
 8010e3e:	9305      	str	r3, [sp, #20]
 8010e40:	4619      	mov	r1, r3
 8010e42:	f04f 0c0a 	mov.w	ip, #10
 8010e46:	4620      	mov	r0, r4
 8010e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e4c:	3a30      	subs	r2, #48	@ 0x30
 8010e4e:	2a09      	cmp	r2, #9
 8010e50:	d903      	bls.n	8010e5a <_svfiprintf_r+0x1a6>
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d0c6      	beq.n	8010de4 <_svfiprintf_r+0x130>
 8010e56:	9105      	str	r1, [sp, #20]
 8010e58:	e7c4      	b.n	8010de4 <_svfiprintf_r+0x130>
 8010e5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e5e:	4604      	mov	r4, r0
 8010e60:	2301      	movs	r3, #1
 8010e62:	e7f0      	b.n	8010e46 <_svfiprintf_r+0x192>
 8010e64:	ab03      	add	r3, sp, #12
 8010e66:	9300      	str	r3, [sp, #0]
 8010e68:	462a      	mov	r2, r5
 8010e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8010ea4 <_svfiprintf_r+0x1f0>)
 8010e6c:	a904      	add	r1, sp, #16
 8010e6e:	4638      	mov	r0, r7
 8010e70:	f3af 8000 	nop.w
 8010e74:	1c42      	adds	r2, r0, #1
 8010e76:	4606      	mov	r6, r0
 8010e78:	d1d6      	bne.n	8010e28 <_svfiprintf_r+0x174>
 8010e7a:	89ab      	ldrh	r3, [r5, #12]
 8010e7c:	065b      	lsls	r3, r3, #25
 8010e7e:	f53f af2d 	bmi.w	8010cdc <_svfiprintf_r+0x28>
 8010e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e84:	e72c      	b.n	8010ce0 <_svfiprintf_r+0x2c>
 8010e86:	ab03      	add	r3, sp, #12
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	462a      	mov	r2, r5
 8010e8c:	4b05      	ldr	r3, [pc, #20]	@ (8010ea4 <_svfiprintf_r+0x1f0>)
 8010e8e:	a904      	add	r1, sp, #16
 8010e90:	4638      	mov	r0, r7
 8010e92:	f000 f879 	bl	8010f88 <_printf_i>
 8010e96:	e7ed      	b.n	8010e74 <_svfiprintf_r+0x1c0>
 8010e98:	080124a4 	.word	0x080124a4
 8010e9c:	080124ae 	.word	0x080124ae
 8010ea0:	00000000 	.word	0x00000000
 8010ea4:	08010bfd 	.word	0x08010bfd
 8010ea8:	080124aa 	.word	0x080124aa

08010eac <_printf_common>:
 8010eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb0:	4616      	mov	r6, r2
 8010eb2:	4698      	mov	r8, r3
 8010eb4:	688a      	ldr	r2, [r1, #8]
 8010eb6:	690b      	ldr	r3, [r1, #16]
 8010eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	bfb8      	it	lt
 8010ec0:	4613      	movlt	r3, r2
 8010ec2:	6033      	str	r3, [r6, #0]
 8010ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ec8:	4607      	mov	r7, r0
 8010eca:	460c      	mov	r4, r1
 8010ecc:	b10a      	cbz	r2, 8010ed2 <_printf_common+0x26>
 8010ece:	3301      	adds	r3, #1
 8010ed0:	6033      	str	r3, [r6, #0]
 8010ed2:	6823      	ldr	r3, [r4, #0]
 8010ed4:	0699      	lsls	r1, r3, #26
 8010ed6:	bf42      	ittt	mi
 8010ed8:	6833      	ldrmi	r3, [r6, #0]
 8010eda:	3302      	addmi	r3, #2
 8010edc:	6033      	strmi	r3, [r6, #0]
 8010ede:	6825      	ldr	r5, [r4, #0]
 8010ee0:	f015 0506 	ands.w	r5, r5, #6
 8010ee4:	d106      	bne.n	8010ef4 <_printf_common+0x48>
 8010ee6:	f104 0a19 	add.w	sl, r4, #25
 8010eea:	68e3      	ldr	r3, [r4, #12]
 8010eec:	6832      	ldr	r2, [r6, #0]
 8010eee:	1a9b      	subs	r3, r3, r2
 8010ef0:	42ab      	cmp	r3, r5
 8010ef2:	dc26      	bgt.n	8010f42 <_printf_common+0x96>
 8010ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010ef8:	6822      	ldr	r2, [r4, #0]
 8010efa:	3b00      	subs	r3, #0
 8010efc:	bf18      	it	ne
 8010efe:	2301      	movne	r3, #1
 8010f00:	0692      	lsls	r2, r2, #26
 8010f02:	d42b      	bmi.n	8010f5c <_printf_common+0xb0>
 8010f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f08:	4641      	mov	r1, r8
 8010f0a:	4638      	mov	r0, r7
 8010f0c:	47c8      	blx	r9
 8010f0e:	3001      	adds	r0, #1
 8010f10:	d01e      	beq.n	8010f50 <_printf_common+0xa4>
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	6922      	ldr	r2, [r4, #16]
 8010f16:	f003 0306 	and.w	r3, r3, #6
 8010f1a:	2b04      	cmp	r3, #4
 8010f1c:	bf02      	ittt	eq
 8010f1e:	68e5      	ldreq	r5, [r4, #12]
 8010f20:	6833      	ldreq	r3, [r6, #0]
 8010f22:	1aed      	subeq	r5, r5, r3
 8010f24:	68a3      	ldr	r3, [r4, #8]
 8010f26:	bf0c      	ite	eq
 8010f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f2c:	2500      	movne	r5, #0
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	bfc4      	itt	gt
 8010f32:	1a9b      	subgt	r3, r3, r2
 8010f34:	18ed      	addgt	r5, r5, r3
 8010f36:	2600      	movs	r6, #0
 8010f38:	341a      	adds	r4, #26
 8010f3a:	42b5      	cmp	r5, r6
 8010f3c:	d11a      	bne.n	8010f74 <_printf_common+0xc8>
 8010f3e:	2000      	movs	r0, #0
 8010f40:	e008      	b.n	8010f54 <_printf_common+0xa8>
 8010f42:	2301      	movs	r3, #1
 8010f44:	4652      	mov	r2, sl
 8010f46:	4641      	mov	r1, r8
 8010f48:	4638      	mov	r0, r7
 8010f4a:	47c8      	blx	r9
 8010f4c:	3001      	adds	r0, #1
 8010f4e:	d103      	bne.n	8010f58 <_printf_common+0xac>
 8010f50:	f04f 30ff 	mov.w	r0, #4294967295
 8010f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f58:	3501      	adds	r5, #1
 8010f5a:	e7c6      	b.n	8010eea <_printf_common+0x3e>
 8010f5c:	18e1      	adds	r1, r4, r3
 8010f5e:	1c5a      	adds	r2, r3, #1
 8010f60:	2030      	movs	r0, #48	@ 0x30
 8010f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f66:	4422      	add	r2, r4
 8010f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f70:	3302      	adds	r3, #2
 8010f72:	e7c7      	b.n	8010f04 <_printf_common+0x58>
 8010f74:	2301      	movs	r3, #1
 8010f76:	4622      	mov	r2, r4
 8010f78:	4641      	mov	r1, r8
 8010f7a:	4638      	mov	r0, r7
 8010f7c:	47c8      	blx	r9
 8010f7e:	3001      	adds	r0, #1
 8010f80:	d0e6      	beq.n	8010f50 <_printf_common+0xa4>
 8010f82:	3601      	adds	r6, #1
 8010f84:	e7d9      	b.n	8010f3a <_printf_common+0x8e>
	...

08010f88 <_printf_i>:
 8010f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f8c:	7e0f      	ldrb	r7, [r1, #24]
 8010f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010f90:	2f78      	cmp	r7, #120	@ 0x78
 8010f92:	4691      	mov	r9, r2
 8010f94:	4680      	mov	r8, r0
 8010f96:	460c      	mov	r4, r1
 8010f98:	469a      	mov	sl, r3
 8010f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010f9e:	d807      	bhi.n	8010fb0 <_printf_i+0x28>
 8010fa0:	2f62      	cmp	r7, #98	@ 0x62
 8010fa2:	d80a      	bhi.n	8010fba <_printf_i+0x32>
 8010fa4:	2f00      	cmp	r7, #0
 8010fa6:	f000 80d1 	beq.w	801114c <_printf_i+0x1c4>
 8010faa:	2f58      	cmp	r7, #88	@ 0x58
 8010fac:	f000 80b8 	beq.w	8011120 <_printf_i+0x198>
 8010fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010fb8:	e03a      	b.n	8011030 <_printf_i+0xa8>
 8010fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010fbe:	2b15      	cmp	r3, #21
 8010fc0:	d8f6      	bhi.n	8010fb0 <_printf_i+0x28>
 8010fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8010fc8 <_printf_i+0x40>)
 8010fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010fc8:	08011021 	.word	0x08011021
 8010fcc:	08011035 	.word	0x08011035
 8010fd0:	08010fb1 	.word	0x08010fb1
 8010fd4:	08010fb1 	.word	0x08010fb1
 8010fd8:	08010fb1 	.word	0x08010fb1
 8010fdc:	08010fb1 	.word	0x08010fb1
 8010fe0:	08011035 	.word	0x08011035
 8010fe4:	08010fb1 	.word	0x08010fb1
 8010fe8:	08010fb1 	.word	0x08010fb1
 8010fec:	08010fb1 	.word	0x08010fb1
 8010ff0:	08010fb1 	.word	0x08010fb1
 8010ff4:	08011133 	.word	0x08011133
 8010ff8:	0801105f 	.word	0x0801105f
 8010ffc:	080110ed 	.word	0x080110ed
 8011000:	08010fb1 	.word	0x08010fb1
 8011004:	08010fb1 	.word	0x08010fb1
 8011008:	08011155 	.word	0x08011155
 801100c:	08010fb1 	.word	0x08010fb1
 8011010:	0801105f 	.word	0x0801105f
 8011014:	08010fb1 	.word	0x08010fb1
 8011018:	08010fb1 	.word	0x08010fb1
 801101c:	080110f5 	.word	0x080110f5
 8011020:	6833      	ldr	r3, [r6, #0]
 8011022:	1d1a      	adds	r2, r3, #4
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	6032      	str	r2, [r6, #0]
 8011028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801102c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011030:	2301      	movs	r3, #1
 8011032:	e09c      	b.n	801116e <_printf_i+0x1e6>
 8011034:	6833      	ldr	r3, [r6, #0]
 8011036:	6820      	ldr	r0, [r4, #0]
 8011038:	1d19      	adds	r1, r3, #4
 801103a:	6031      	str	r1, [r6, #0]
 801103c:	0606      	lsls	r6, r0, #24
 801103e:	d501      	bpl.n	8011044 <_printf_i+0xbc>
 8011040:	681d      	ldr	r5, [r3, #0]
 8011042:	e003      	b.n	801104c <_printf_i+0xc4>
 8011044:	0645      	lsls	r5, r0, #25
 8011046:	d5fb      	bpl.n	8011040 <_printf_i+0xb8>
 8011048:	f9b3 5000 	ldrsh.w	r5, [r3]
 801104c:	2d00      	cmp	r5, #0
 801104e:	da03      	bge.n	8011058 <_printf_i+0xd0>
 8011050:	232d      	movs	r3, #45	@ 0x2d
 8011052:	426d      	negs	r5, r5
 8011054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011058:	4858      	ldr	r0, [pc, #352]	@ (80111bc <_printf_i+0x234>)
 801105a:	230a      	movs	r3, #10
 801105c:	e011      	b.n	8011082 <_printf_i+0xfa>
 801105e:	6821      	ldr	r1, [r4, #0]
 8011060:	6833      	ldr	r3, [r6, #0]
 8011062:	0608      	lsls	r0, r1, #24
 8011064:	f853 5b04 	ldr.w	r5, [r3], #4
 8011068:	d402      	bmi.n	8011070 <_printf_i+0xe8>
 801106a:	0649      	lsls	r1, r1, #25
 801106c:	bf48      	it	mi
 801106e:	b2ad      	uxthmi	r5, r5
 8011070:	2f6f      	cmp	r7, #111	@ 0x6f
 8011072:	4852      	ldr	r0, [pc, #328]	@ (80111bc <_printf_i+0x234>)
 8011074:	6033      	str	r3, [r6, #0]
 8011076:	bf14      	ite	ne
 8011078:	230a      	movne	r3, #10
 801107a:	2308      	moveq	r3, #8
 801107c:	2100      	movs	r1, #0
 801107e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011082:	6866      	ldr	r6, [r4, #4]
 8011084:	60a6      	str	r6, [r4, #8]
 8011086:	2e00      	cmp	r6, #0
 8011088:	db05      	blt.n	8011096 <_printf_i+0x10e>
 801108a:	6821      	ldr	r1, [r4, #0]
 801108c:	432e      	orrs	r6, r5
 801108e:	f021 0104 	bic.w	r1, r1, #4
 8011092:	6021      	str	r1, [r4, #0]
 8011094:	d04b      	beq.n	801112e <_printf_i+0x1a6>
 8011096:	4616      	mov	r6, r2
 8011098:	fbb5 f1f3 	udiv	r1, r5, r3
 801109c:	fb03 5711 	mls	r7, r3, r1, r5
 80110a0:	5dc7      	ldrb	r7, [r0, r7]
 80110a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110a6:	462f      	mov	r7, r5
 80110a8:	42bb      	cmp	r3, r7
 80110aa:	460d      	mov	r5, r1
 80110ac:	d9f4      	bls.n	8011098 <_printf_i+0x110>
 80110ae:	2b08      	cmp	r3, #8
 80110b0:	d10b      	bne.n	80110ca <_printf_i+0x142>
 80110b2:	6823      	ldr	r3, [r4, #0]
 80110b4:	07df      	lsls	r7, r3, #31
 80110b6:	d508      	bpl.n	80110ca <_printf_i+0x142>
 80110b8:	6923      	ldr	r3, [r4, #16]
 80110ba:	6861      	ldr	r1, [r4, #4]
 80110bc:	4299      	cmp	r1, r3
 80110be:	bfde      	ittt	le
 80110c0:	2330      	movle	r3, #48	@ 0x30
 80110c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80110c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80110ca:	1b92      	subs	r2, r2, r6
 80110cc:	6122      	str	r2, [r4, #16]
 80110ce:	f8cd a000 	str.w	sl, [sp]
 80110d2:	464b      	mov	r3, r9
 80110d4:	aa03      	add	r2, sp, #12
 80110d6:	4621      	mov	r1, r4
 80110d8:	4640      	mov	r0, r8
 80110da:	f7ff fee7 	bl	8010eac <_printf_common>
 80110de:	3001      	adds	r0, #1
 80110e0:	d14a      	bne.n	8011178 <_printf_i+0x1f0>
 80110e2:	f04f 30ff 	mov.w	r0, #4294967295
 80110e6:	b004      	add	sp, #16
 80110e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	f043 0320 	orr.w	r3, r3, #32
 80110f2:	6023      	str	r3, [r4, #0]
 80110f4:	4832      	ldr	r0, [pc, #200]	@ (80111c0 <_printf_i+0x238>)
 80110f6:	2778      	movs	r7, #120	@ 0x78
 80110f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80110fc:	6823      	ldr	r3, [r4, #0]
 80110fe:	6831      	ldr	r1, [r6, #0]
 8011100:	061f      	lsls	r7, r3, #24
 8011102:	f851 5b04 	ldr.w	r5, [r1], #4
 8011106:	d402      	bmi.n	801110e <_printf_i+0x186>
 8011108:	065f      	lsls	r7, r3, #25
 801110a:	bf48      	it	mi
 801110c:	b2ad      	uxthmi	r5, r5
 801110e:	6031      	str	r1, [r6, #0]
 8011110:	07d9      	lsls	r1, r3, #31
 8011112:	bf44      	itt	mi
 8011114:	f043 0320 	orrmi.w	r3, r3, #32
 8011118:	6023      	strmi	r3, [r4, #0]
 801111a:	b11d      	cbz	r5, 8011124 <_printf_i+0x19c>
 801111c:	2310      	movs	r3, #16
 801111e:	e7ad      	b.n	801107c <_printf_i+0xf4>
 8011120:	4826      	ldr	r0, [pc, #152]	@ (80111bc <_printf_i+0x234>)
 8011122:	e7e9      	b.n	80110f8 <_printf_i+0x170>
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	f023 0320 	bic.w	r3, r3, #32
 801112a:	6023      	str	r3, [r4, #0]
 801112c:	e7f6      	b.n	801111c <_printf_i+0x194>
 801112e:	4616      	mov	r6, r2
 8011130:	e7bd      	b.n	80110ae <_printf_i+0x126>
 8011132:	6833      	ldr	r3, [r6, #0]
 8011134:	6825      	ldr	r5, [r4, #0]
 8011136:	6961      	ldr	r1, [r4, #20]
 8011138:	1d18      	adds	r0, r3, #4
 801113a:	6030      	str	r0, [r6, #0]
 801113c:	062e      	lsls	r6, r5, #24
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	d501      	bpl.n	8011146 <_printf_i+0x1be>
 8011142:	6019      	str	r1, [r3, #0]
 8011144:	e002      	b.n	801114c <_printf_i+0x1c4>
 8011146:	0668      	lsls	r0, r5, #25
 8011148:	d5fb      	bpl.n	8011142 <_printf_i+0x1ba>
 801114a:	8019      	strh	r1, [r3, #0]
 801114c:	2300      	movs	r3, #0
 801114e:	6123      	str	r3, [r4, #16]
 8011150:	4616      	mov	r6, r2
 8011152:	e7bc      	b.n	80110ce <_printf_i+0x146>
 8011154:	6833      	ldr	r3, [r6, #0]
 8011156:	1d1a      	adds	r2, r3, #4
 8011158:	6032      	str	r2, [r6, #0]
 801115a:	681e      	ldr	r6, [r3, #0]
 801115c:	6862      	ldr	r2, [r4, #4]
 801115e:	2100      	movs	r1, #0
 8011160:	4630      	mov	r0, r6
 8011162:	f7ef f83d 	bl	80001e0 <memchr>
 8011166:	b108      	cbz	r0, 801116c <_printf_i+0x1e4>
 8011168:	1b80      	subs	r0, r0, r6
 801116a:	6060      	str	r0, [r4, #4]
 801116c:	6863      	ldr	r3, [r4, #4]
 801116e:	6123      	str	r3, [r4, #16]
 8011170:	2300      	movs	r3, #0
 8011172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011176:	e7aa      	b.n	80110ce <_printf_i+0x146>
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	4632      	mov	r2, r6
 801117c:	4649      	mov	r1, r9
 801117e:	4640      	mov	r0, r8
 8011180:	47d0      	blx	sl
 8011182:	3001      	adds	r0, #1
 8011184:	d0ad      	beq.n	80110e2 <_printf_i+0x15a>
 8011186:	6823      	ldr	r3, [r4, #0]
 8011188:	079b      	lsls	r3, r3, #30
 801118a:	d413      	bmi.n	80111b4 <_printf_i+0x22c>
 801118c:	68e0      	ldr	r0, [r4, #12]
 801118e:	9b03      	ldr	r3, [sp, #12]
 8011190:	4298      	cmp	r0, r3
 8011192:	bfb8      	it	lt
 8011194:	4618      	movlt	r0, r3
 8011196:	e7a6      	b.n	80110e6 <_printf_i+0x15e>
 8011198:	2301      	movs	r3, #1
 801119a:	4632      	mov	r2, r6
 801119c:	4649      	mov	r1, r9
 801119e:	4640      	mov	r0, r8
 80111a0:	47d0      	blx	sl
 80111a2:	3001      	adds	r0, #1
 80111a4:	d09d      	beq.n	80110e2 <_printf_i+0x15a>
 80111a6:	3501      	adds	r5, #1
 80111a8:	68e3      	ldr	r3, [r4, #12]
 80111aa:	9903      	ldr	r1, [sp, #12]
 80111ac:	1a5b      	subs	r3, r3, r1
 80111ae:	42ab      	cmp	r3, r5
 80111b0:	dcf2      	bgt.n	8011198 <_printf_i+0x210>
 80111b2:	e7eb      	b.n	801118c <_printf_i+0x204>
 80111b4:	2500      	movs	r5, #0
 80111b6:	f104 0619 	add.w	r6, r4, #25
 80111ba:	e7f5      	b.n	80111a8 <_printf_i+0x220>
 80111bc:	080124b5 	.word	0x080124b5
 80111c0:	080124c6 	.word	0x080124c6

080111c4 <memmove>:
 80111c4:	4288      	cmp	r0, r1
 80111c6:	b510      	push	{r4, lr}
 80111c8:	eb01 0402 	add.w	r4, r1, r2
 80111cc:	d902      	bls.n	80111d4 <memmove+0x10>
 80111ce:	4284      	cmp	r4, r0
 80111d0:	4623      	mov	r3, r4
 80111d2:	d807      	bhi.n	80111e4 <memmove+0x20>
 80111d4:	1e43      	subs	r3, r0, #1
 80111d6:	42a1      	cmp	r1, r4
 80111d8:	d008      	beq.n	80111ec <memmove+0x28>
 80111da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80111de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80111e2:	e7f8      	b.n	80111d6 <memmove+0x12>
 80111e4:	4402      	add	r2, r0
 80111e6:	4601      	mov	r1, r0
 80111e8:	428a      	cmp	r2, r1
 80111ea:	d100      	bne.n	80111ee <memmove+0x2a>
 80111ec:	bd10      	pop	{r4, pc}
 80111ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80111f6:	e7f7      	b.n	80111e8 <memmove+0x24>

080111f8 <_sbrk_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4d06      	ldr	r5, [pc, #24]	@ (8011214 <_sbrk_r+0x1c>)
 80111fc:	2300      	movs	r3, #0
 80111fe:	4604      	mov	r4, r0
 8011200:	4608      	mov	r0, r1
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	f7f2 fbf8 	bl	80039f8 <_sbrk>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d102      	bne.n	8011212 <_sbrk_r+0x1a>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	b103      	cbz	r3, 8011212 <_sbrk_r+0x1a>
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	200022f4 	.word	0x200022f4

08011218 <_realloc_r>:
 8011218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121c:	4607      	mov	r7, r0
 801121e:	4614      	mov	r4, r2
 8011220:	460d      	mov	r5, r1
 8011222:	b921      	cbnz	r1, 801122e <_realloc_r+0x16>
 8011224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011228:	4611      	mov	r1, r2
 801122a:	f7ff bc5b 	b.w	8010ae4 <_malloc_r>
 801122e:	b92a      	cbnz	r2, 801123c <_realloc_r+0x24>
 8011230:	f7ff fbec 	bl	8010a0c <_free_r>
 8011234:	4625      	mov	r5, r4
 8011236:	4628      	mov	r0, r5
 8011238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123c:	f000 f81a 	bl	8011274 <_malloc_usable_size_r>
 8011240:	4284      	cmp	r4, r0
 8011242:	4606      	mov	r6, r0
 8011244:	d802      	bhi.n	801124c <_realloc_r+0x34>
 8011246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801124a:	d8f4      	bhi.n	8011236 <_realloc_r+0x1e>
 801124c:	4621      	mov	r1, r4
 801124e:	4638      	mov	r0, r7
 8011250:	f7ff fc48 	bl	8010ae4 <_malloc_r>
 8011254:	4680      	mov	r8, r0
 8011256:	b908      	cbnz	r0, 801125c <_realloc_r+0x44>
 8011258:	4645      	mov	r5, r8
 801125a:	e7ec      	b.n	8011236 <_realloc_r+0x1e>
 801125c:	42b4      	cmp	r4, r6
 801125e:	4622      	mov	r2, r4
 8011260:	4629      	mov	r1, r5
 8011262:	bf28      	it	cs
 8011264:	4632      	movcs	r2, r6
 8011266:	f7ff fbc3 	bl	80109f0 <memcpy>
 801126a:	4629      	mov	r1, r5
 801126c:	4638      	mov	r0, r7
 801126e:	f7ff fbcd 	bl	8010a0c <_free_r>
 8011272:	e7f1      	b.n	8011258 <_realloc_r+0x40>

08011274 <_malloc_usable_size_r>:
 8011274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011278:	1f18      	subs	r0, r3, #4
 801127a:	2b00      	cmp	r3, #0
 801127c:	bfbc      	itt	lt
 801127e:	580b      	ldrlt	r3, [r1, r0]
 8011280:	18c0      	addlt	r0, r0, r3
 8011282:	4770      	bx	lr

08011284 <_init>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	bf00      	nop
 8011288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801128a:	bc08      	pop	{r3}
 801128c:	469e      	mov	lr, r3
 801128e:	4770      	bx	lr

08011290 <_fini>:
 8011290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011292:	bf00      	nop
 8011294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011296:	bc08      	pop	{r3}
 8011298:	469e      	mov	lr, r3
 801129a:	4770      	bx	lr
