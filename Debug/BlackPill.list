
BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011038  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  080111d8  080111d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012414  08012414  00014164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012414  08012414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801241c  0801241c  00014164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801241c  0801241c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012420  08012420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08012424  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a0  20000164  08012588  00014164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002304  08012588  00014304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec87  00000000  00000000  00014194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b30  00000000  00000000  00032e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  00037950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000150d  00000000  00000000  00039488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c798  00000000  00000000  0003a995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002434c  00000000  00000000  0005712d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26ea  00000000  00000000  0007b479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011db63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  0011dba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  001252a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080111c0 	.word	0x080111c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	080111c0 	.word	0x080111c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADC_Conversion_Cplt>:
	0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff,
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xf8
};

void ADC_Conversion_Cplt(uint16_t *rawData, uint16_t *filtredData){
 80005ac:	b490      	push	{r4, r7}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 80005b6:	2300      	movs	r3, #0
 80005b8:	73fb      	strb	r3, [r7, #15]
 80005ba:	e042      	b.n	8000642 <ADC_Conversion_Cplt+0x96>
		sumData[channel] -= mediaBuffer[index][channel];
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4a2b      	ldr	r2, [pc, #172]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005c0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461c      	mov	r4, r3
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4829      	ldr	r0, [pc, #164]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 80005ce:	4623      	mov	r3, r4
 80005d0:	00db      	lsls	r3, r3, #3
 80005d2:	4423      	add	r3, r4
 80005d4:	4413      	add	r3, r2
 80005d6:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	1a8a      	subs	r2, r1, r2
 80005de:	b291      	uxth	r1, r2
 80005e0:	4a22      	ldr	r2, [pc, #136]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		sumData[channel] += rawData[channel];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4a20      	ldr	r2, [pc, #128]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 80005ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	440a      	add	r2, r1
 80005fc:	b291      	uxth	r1, r2
 80005fe:	4a1b      	ldr	r2, [pc, #108]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 8000600:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mediaBuffer[index][channel] = rawData[channel];
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4610      	mov	r0, r2
 8000612:	7bfa      	ldrb	r2, [r7, #15]
 8000614:	881c      	ldrh	r4, [r3, #0]
 8000616:	4917      	ldr	r1, [pc, #92]	@ (8000674 <ADC_Conversion_Cplt+0xc8>)
 8000618:	4603      	mov	r3, r0
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4403      	add	r3, r0
 800061e:	4413      	add	r3, r2
 8000620:	4622      	mov	r2, r4
 8000622:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		filtredData[channel] = (sumData[channel] >> ADC_DESPLAZAMIENTOS);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4a10      	ldr	r2, [pc, #64]	@ (800066c <ADC_Conversion_Cplt+0xc0>)
 800062a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	440b      	add	r3, r1
 8000636:	0952      	lsrs	r2, r2, #5
 8000638:	b292      	uxth	r2, r2
 800063a:	801a      	strh	r2, [r3, #0]
	for(uint8_t channel = 0; channel < ADC_NUM_SENSORS; channel++){
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b08      	cmp	r3, #8
 8000646:	d9b9      	bls.n	80005bc <ADC_Conversion_Cplt+0x10>
	}
	index++;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000652:	701a      	strb	r2, [r3, #0]
	index &= (ADC_MEDIA_SIZE - 1);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f003 031f 	and.w	r3, r3, #31
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <ADC_Conversion_Cplt+0xc4>)
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bc90      	pop	{r4, r7}
 800066a:	4770      	bx	lr
 800066c:	200003c0 	.word	0x200003c0
 8000670:	200003d2 	.word	0x200003d2
 8000674:	20000180 	.word	0x20000180

08000678 <inputState>:
#include "utilities.h"

s_Input debouncerBuff[MAX_INPUTS_DEBOUNCED];
uint8_t	inputIndex = 0;

void inputState(s_Input *stateInput){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(stateInput->state){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	785b      	ldrb	r3, [r3, #1]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d849      	bhi.n	800071c <inputState+0xa4>
 8000688:	a201      	add	r2, pc, #4	@ (adr r2, 8000690 <inputState+0x18>)
 800068a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068e:	bf00      	nop
 8000690:	080006b1 	.word	0x080006b1
 8000694:	080006a1 	.word	0x080006a1
 8000698:	080006ef 	.word	0x080006ef
 800069c:	080006c1 	.word	0x080006c1
		case UP:
			if(stateInput->value == DOWN)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <inputState+0xac>
				stateInput->state = FALLING;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2202      	movs	r2, #2
 80006ac:	705a      	strb	r2, [r3, #1]
		break;
 80006ae:	e039      	b.n	8000724 <inputState+0xac>
		case DOWN:
			if(stateInput->value == UP)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d137      	bne.n	8000728 <inputState+0xb0>
				stateInput->state = RISING;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2203      	movs	r2, #3
 80006bc:	705a      	strb	r2, [r3, #1]
		break;
 80006be:	e033      	b.n	8000728 <inputState+0xb0>
		case RISING:
			if(stateInput->value == UP){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10e      	bne.n	80006e6 <inputState+0x6e>
				stateInput->state = UP;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = UP;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d027      	beq.n	800072c <inputState+0xb4>
					stateInput->stateChanged(RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	2003      	movs	r0, #3
 80006e2:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = DOWN;
			}
		break;
 80006e4:	e022      	b.n	800072c <inputState+0xb4>
				stateInput->state = DOWN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	705a      	strb	r2, [r3, #1]
		break;
 80006ec:	e01e      	b.n	800072c <inputState+0xb4>
		case FALLING:
			if(stateInput->value == DOWN){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d10e      	bne.n	8000714 <inputState+0x9c>
				stateInput->state = DOWN;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2200      	movs	r2, #0
 80006fa:	705a      	strb	r2, [r3, #1]
				/*------------------------------*/
				stateInput->val = DOWN;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
				if(stateInput->stateChanged != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <inputState+0xb8>
					stateInput->stateChanged(FALLING);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	2002      	movs	r0, #2
 8000710:	4798      	blx	r3
				/*------------------------------*/
			}else{
				stateInput->state = UP;
			}
		break;
 8000712:	e00d      	b.n	8000730 <inputState+0xb8>
				stateInput->state = UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
		break;
 800071a:	e009      	b.n	8000730 <inputState+0xb8>
		default:
		stateInput->state = UP;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	705a      	strb	r2, [r3, #1]
	}
}
 8000722:	e006      	b.n	8000732 <inputState+0xba>
		break;
 8000724:	bf00      	nop
 8000726:	e004      	b.n	8000732 <inputState+0xba>
		break;
 8000728:	bf00      	nop
 800072a:	e002      	b.n	8000732 <inputState+0xba>
		break;
 800072c:	bf00      	nop
 800072e:	e000      	b.n	8000732 <inputState+0xba>
		break;
 8000730:	bf00      	nop
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <Debounce_Init>:

void Debounce_Init(){
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <Debounce_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e01d      	b.n	8000784 <Debounce_Init+0x48>
		debouncerBuff[inputIndex].getInputState = NULL;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <Debounce_Init+0x60>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <Debounce_Init+0x64>)
 8000750:	460b      	mov	r3, r1
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	440b      	add	r3, r1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	3308      	adds	r3, #8
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
		debouncerBuff[inputIndex].stateChanged = NULL;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <Debounce_Init+0x60>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <Debounce_Init+0x64>)
 8000768:	460b      	mov	r3, r1
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	440b      	add	r3, r1
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	3304      	adds	r3, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
	for(inputIndex=0; inputIndex<MAX_INPUTS_DEBOUNCED; inputIndex++){
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <Debounce_Init+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <Debounce_Init+0x60>)
 8000782:	701a      	strb	r2, [r3, #0]
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <Debounce_Init+0x60>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0dd      	beq.n	8000748 <Debounce_Init+0xc>
	}
	inputIndex = 0;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <Debounce_Init+0x60>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	200003e0 	.word	0x200003e0
 80007a0:	200003d4 	.word	0x200003d4

080007a4 <Debounce_Add>:

uint8_t Debounce_Add(uint8_t (*AbstHard)(), void (*STATECHANGED)(e_Estados estado)){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	if(inputIndex >= MAX_INPUTS_DEBOUNCED)
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <Debounce_Add+0x60>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <Debounce_Add+0x16>
		return 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e01d      	b.n	80007f6 <Debounce_Add+0x52>
	debouncerBuff[inputIndex].getInputState = AbstHard;
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <Debounce_Add+0x60>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4a11      	ldr	r2, [pc, #68]	@ (8000808 <Debounce_Add+0x64>)
 80007c2:	460b      	mov	r3, r1
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	440b      	add	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	3308      	adds	r3, #8
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	601a      	str	r2, [r3, #0]
	debouncerBuff[inputIndex].stateChanged = STATECHANGED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <Debounce_Add+0x60>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <Debounce_Add+0x64>)
 80007da:	460b      	mov	r3, r1
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	440b      	add	r3, r1
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	3304      	adds	r3, #4
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	601a      	str	r2, [r3, #0]
	return inputIndex++;
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <Debounce_Add+0x60>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	b2d1      	uxtb	r1, r2
 80007f2:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <Debounce_Add+0x60>)
 80007f4:	7011      	strb	r1, [r2, #0]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	200003e0 	.word	0x200003e0
 8000808:	200003d4 	.word	0x200003d4

0800080c <Debouncer_Task>:

void Debouncer_Task(){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e021      	b.n	800085c <Debouncer_Task+0x50>
		debouncerBuff[i].value = debouncerBuff[i].getInputState();
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4914      	ldr	r1, [pc, #80]	@ (800086c <Debouncer_Task+0x60>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	3308      	adds	r3, #8
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	79fc      	ldrb	r4, [r7, #7]
 800082c:	4798      	blx	r3
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <Debouncer_Task+0x60>)
 8000834:	4623      	mov	r3, r4
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4423      	add	r3, r4
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
		inputState(&debouncerBuff[i]);
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <Debouncer_Task+0x60>)
 800084e:	4413      	add	r3, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff11 	bl	8000678 <inputState>
	for(uint8_t i = 0; i < MAX_INPUTS_DEBOUNCED; i++){
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	3301      	adds	r3, #1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0da      	beq.n	8000818 <Debouncer_Task+0xc>
	}
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200003d4 	.word	0x200003d4

08000870 <MPU6050_Set_I2C_Communication>:
static e_system (*I2C_Master_Transmit_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);
static e_system (*I2C_Mem_Read)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout);

void MPU6050_Set_I2C_Communication(
		e_system (*Mem_Write_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout),
		e_system (*Mem_Read_Blocking)(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout)){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit_Blocking = Mem_Write_Blocking;
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <MPU6050_Set_I2C_Communication+0x24>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6013      	str	r3, [r2, #0]
	I2C_Mem_Read = Mem_Read_Blocking;
 8000880:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <MPU6050_Set_I2C_Communication+0x28>)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	200003e4 	.word	0x200003e4
 8000898:	200003e8 	.word	0x200003e8

0800089c <MPU6050_Init>:

e_system MPU6050_Init(s_MPU *mpu){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b099      	sub	sp, #100	@ 0x64
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	e_system status = SYS_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	status += I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_MPU6050, 1, &data, 1, MPU_TIMEOUT);
 80008b0:	4b49      	ldr	r3, [pc, #292]	@ (80009d8 <MPU6050_Init+0x13c>)
 80008b2:	681c      	ldr	r4, [r3, #0]
 80008b4:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2175      	movs	r1, #117	@ 0x75
 80008c6:	20d0      	movs	r0, #208	@ 0xd0
 80008c8:	47a0      	blx	r4
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80008d2:	4413      	add	r3, r2
 80008d4:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	if(data == WHO_AM_I_DEFAULT_VALUE){
 80008d8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80008dc:	2b68      	cmp	r3, #104	@ 0x68
 80008de:	d174      	bne.n	80009ca <MPU6050_Init+0x12e>
		data = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, POWER_MANAGEMENT_REG, 1, &data, 1, MPU_TIMEOUT);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MPU6050_Init+0x140>)
 80008e8:	681c      	ldr	r4, [r3, #0]
 80008ea:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 80008ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008f2:	9201      	str	r2, [sp, #4]
 80008f4:	2201      	movs	r2, #1
 80008f6:	9200      	str	r2, [sp, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	216b      	movs	r1, #107	@ 0x6b
 80008fc:	20d0      	movs	r0, #208	@ 0xd0
 80008fe:	47a0      	blx	r4

		// Set data rate of 1 KHz (default)
		data = 0x07;
 8000900:	2307      	movs	r3, #7
 8000902:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, MPU_TIMEOUT);
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MPU6050_Init+0x140>)
 8000908:	681c      	ldr	r4, [r3, #0]
 800090a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800090e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000912:	9201      	str	r2, [sp, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	9200      	str	r2, [sp, #0]
 8000918:	2201      	movs	r2, #1
 800091a:	2119      	movs	r1, #25
 800091c:	20d0      	movs	r0, #208	@ 0xd0
 800091e:	47a0      	blx	r4

		// Set accelerometer range of +/- 2g (default)
		data = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MPU6050_Init+0x140>)
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800092e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2201      	movs	r2, #1
 8000936:	9200      	str	r2, [sp, #0]
 8000938:	2201      	movs	r2, #1
 800093a:	211c      	movs	r1, #28
 800093c:	20d0      	movs	r0, #208	@ 0xd0
 800093e:	47a0      	blx	r4

		// Set gyroscope range of +/- 250 degree/s (default)
		data = 0x00;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, MPU_TIMEOUT);
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <MPU6050_Init+0x140>)
 8000948:	681c      	ldr	r4, [r3, #0]
 800094a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800094e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	9200      	str	r2, [sp, #0]
 8000958:	2201      	movs	r2, #1
 800095a:	211b      	movs	r1, #27
 800095c:	20d0      	movs	r0, #208	@ 0xd0
 800095e:	47a0      	blx	r4

		// Set Digital Low Pass Filter
		data = 0x03;
 8000960:	2303      	movs	r3, #3
 8000962:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, CONFIG, 1, &data, 1, MPU_TIMEOUT);
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MPU6050_Init+0x140>)
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800096e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000972:	9201      	str	r2, [sp, #4]
 8000974:	2201      	movs	r2, #1
 8000976:	9200      	str	r2, [sp, #0]
 8000978:	2201      	movs	r2, #1
 800097a:	211a      	movs	r1, #26
 800097c:	20d0      	movs	r0, #208	@ 0xd0
 800097e:	47a0      	blx	r4
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_PIN_CFG, 1, &data, 1, MPU_TIMEOUT);

		data = 0x01;
		I2C_Master_Transmit_Blocking(MPU6050_ADDR, INT_ENABLE, 1, &data, 1, MPU_TIMEOUT);
		 */
		*mpu = (s_MPU){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	2348      	movs	r3, #72	@ 0x48
 8000986:	461a      	mov	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f00f ff9b 	bl	80108c4 <memset>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			.Angle = {0, 0, 0},
			.dataReady = 0,
			.isInit = 1
		};

		for(uint8_t i=0; i<14; i++){
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800099c:	e00b      	b.n	80009b6 <MPU6050_Init+0x11a>
			mpu->data[i] = 0;
 800099e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
		for(uint8_t i=0; i<14; i++){
 80009ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009b0:	3301      	adds	r3, #1
 80009b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80009b6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80009ba:	2b0d      	cmp	r3, #13
 80009bc:	d9ef      	bls.n	800099e <MPU6050_Init+0x102>
		}

		if(status != SYS_OK){
 80009be:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <MPU6050_Init+0x132>
			return SYS_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e002      	b.n	80009d0 <MPU6050_Init+0x134>
		}


	}else{
		return SYS_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <MPU6050_Init+0x134>
	}
	return SYS_OK;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	375c      	adds	r7, #92	@ 0x5c
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200003e8 	.word	0x200003e8
 80009dc:	200003e4 	.word	0x200003e4

080009e0 <MPU6050_Calibrate>:

void MPU6050_Calibrate(s_MPU *mpu){
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 80009e8:	2300      	movs	r3, #0
 80009ea:	81fb      	strh	r3, [r7, #14]
 80009ec:	e075      	b.n	8000ada <MPU6050_Calibrate+0xfa>
		I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_REG, 1, mpu->data, 14, MPU_TIMEOUT);
 80009ee:	4b53      	ldr	r3, [pc, #332]	@ (8000b3c <MPU6050_Calibrate+0x15c>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3336      	adds	r3, #54	@ 0x36
 80009f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	220e      	movs	r2, #14
 80009fe:	9200      	str	r2, [sp, #0]
 8000a00:	2201      	movs	r2, #1
 8000a02:	213b      	movs	r1, #59	@ 0x3b
 8000a04:	20d0      	movs	r0, #208	@ 0xd0
 8000a06:	47a0      	blx	r4
		mpu->Acc.raw.x += (int16_t)((mpu->data[0] << 8) | mpu->data[1]);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8000a12:	b212      	sxth	r2, r2
 8000a14:	0212      	lsls	r2, r2, #8
 8000a16:	b211      	sxth	r1, r2
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000a1e:	b212      	sxth	r2, r2
 8000a20:	430a      	orrs	r2, r1
 8000a22:	b212      	sxth	r2, r2
 8000a24:	441a      	add	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60da      	str	r2, [r3, #12]
		mpu->Acc.raw.y += (int16_t)((mpu->data[2] << 8) | mpu->data[3]);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8000a34:	b212      	sxth	r2, r2
 8000a36:	0212      	lsls	r2, r2, #8
 8000a38:	b211      	sxth	r1, r2
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000a40:	b212      	sxth	r2, r2
 8000a42:	430a      	orrs	r2, r1
 8000a44:	b212      	sxth	r2, r2
 8000a46:	441a      	add	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
		mpu->Acc.raw.z += (int16_t)((mpu->data[4] << 8) | mpu->data[5]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 8000a56:	b212      	sxth	r2, r2
 8000a58:	0212      	lsls	r2, r2, #8
 8000a5a:	b211      	sxth	r1, r2
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000a62:	b212      	sxth	r2, r2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	b212      	sxth	r2, r2
 8000a68:	441a      	add	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	615a      	str	r2, [r3, #20]

		mpu->Gyro.raw.x += (int16_t)((mpu->data[8 ] << 8) | mpu->data[9 ]);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	f892 203e 	ldrb.w	r2, [r2, #62]	@ 0x3e
 8000a78:	b212      	sxth	r2, r2
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	b211      	sxth	r1, r2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000a84:	b212      	sxth	r2, r2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	b212      	sxth	r2, r2
 8000a8a:	441a      	add	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
		mpu->Gyro.raw.y += (int16_t)((mpu->data[10] << 8) | mpu->data[11]);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8000a9a:	b212      	sxth	r2, r2
 8000a9c:	0212      	lsls	r2, r2, #8
 8000a9e:	b211      	sxth	r1, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000aa6:	b212      	sxth	r2, r2
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	b212      	sxth	r2, r2
 8000aac:	441a      	add	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
		mpu->Gyro.raw.z += (int16_t)((mpu->data[12] << 8) | mpu->data[13]);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	f892 2042 	ldrb.w	r2, [r2, #66]	@ 0x42
 8000abc:	b212      	sxth	r2, r2
 8000abe:	0212      	lsls	r2, r2, #8
 8000ac0:	b211      	sxth	r1, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000ac8:	b212      	sxth	r2, r2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	b212      	sxth	r2, r2
 8000ace:	441a      	add	r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (uint16_t i=0; i < NUM_SAMPLES; i++){
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	89fb      	ldrh	r3, [r7, #14]
 8000adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ae0:	d385      	bcc.n	80009ee <MPU6050_Calibrate+0xe>
	}
    mpu->Acc.offset.x = (int16_t)(mpu->Acc.raw.x >> NUM_SAMPLES_BITS);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	131b      	asrs	r3, r3, #12
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	80da      	strh	r2, [r3, #6]
    mpu->Acc.offset.y = (int16_t)(mpu->Acc.raw.y >> NUM_SAMPLES_BITS);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	131b      	asrs	r3, r3, #12
 8000af4:	b21a      	sxth	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	811a      	strh	r2, [r3, #8]
    mpu->Acc.offset.z = (int16_t)(mpu->Acc.raw.z >> NUM_SAMPLES_BITS) - SCALE_FACTOR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	131b      	asrs	r3, r3, #12
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	815a      	strh	r2, [r3, #10]

    mpu->Gyro.offset.x = (int16_t)(mpu->Gyro.raw.x >> NUM_SAMPLES_BITS);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	131b      	asrs	r3, r3, #12
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	83da      	strh	r2, [r3, #30]
	mpu->Gyro.offset.y = (int16_t)(mpu->Gyro.raw.y >> NUM_SAMPLES_BITS);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1e:	131b      	asrs	r3, r3, #12
 8000b20:	b21a      	sxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	841a      	strh	r2, [r3, #32]
	mpu->Gyro.offset.z = (int16_t)(mpu->Gyro.raw.z >> NUM_SAMPLES_BITS);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b2a:	131b      	asrs	r3, r3, #12
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200003e8 	.word	0x200003e8

08000b40 <MPU6050_I2C_DMA_Cplt>:

void MPU6050_I2C_DMA_Cplt(s_MPU *mpu){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	// ACC: GET RAW INFORMATION
	mpu->Acc.raw.x = (((mpu->data[0] << 8) | mpu->data[1]));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	f892 2037 	ldrb.w	r2, [r2, #55]	@ 0x37
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
	mpu->Acc.raw.y = (((mpu->data[2] << 8) | mpu->data[3]));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	611a      	str	r2, [r3, #16]
	mpu->Acc.raw.z = (((mpu->data[4] << 8) | mpu->data[5]));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	f892 203b 	ldrb.w	r2, [r2, #59]	@ 0x3b
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	615a      	str	r2, [r3, #20]
	// ACC: CALCULATE TRUE ACCELERATION
	mpu->Acc.x = mpu->Acc.raw.x - mpu->Acc.offset.x;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	801a      	strh	r2, [r3, #0]
	mpu->Acc.y = mpu->Acc.raw.y - mpu->Acc.offset.y;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	805a      	strh	r2, [r3, #2]
	mpu->Acc.z = mpu->Acc.raw.z - mpu->Acc.offset.z;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	809a      	strh	r2, [r3, #4]

	// GYR: GET RAW INFORMATION
	mpu->Gyro.raw.x = (((mpu->data[8 ] << 8) | mpu->data[9 ]));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->Gyro.raw.y = (((mpu->data[10] << 8) | mpu->data[11]));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->Gyro.raw.z = (((mpu->data[12] << 8) | mpu->data[13]));
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	// GYR: CALCULATE TRUE ACCELERATION
	mpu->Gyro.x = mpu->Gyro.raw.x - mpu->Gyro.offset.x;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	831a      	strh	r2, [r3, #24]
	mpu->Gyro.y = mpu->Gyro.raw.y - mpu->Gyro.offset.y;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	835a      	strh	r2, [r3, #26]
	mpu->Gyro.z = mpu->Gyro.raw.z - mpu->Gyro.offset.z;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	839a      	strh	r2, [r3, #28]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <Display_Set_I2C_Master_Transmit>:
	uint8_t PageData[6];
}Update;

void Display_Set_I2C_Master_Transmit(
		e_system (*Master_Transmit)(uint16_t DevAddress, uint8_t reg, uint8_t *pData, uint16_t Size),
		e_system (*Master_Transmit_Blocking)(uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	I2C_Master_Transmit = Master_Transmit;
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <Display_Set_I2C_Master_Transmit+0x24>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
	I2C_Master_Transmit_Blocking = Master_Transmit_Blocking;
 8000c6c:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <Display_Set_I2C_Master_Transmit+0x28>)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	6013      	str	r3, [r2, #0]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200003f4 	.word	0x200003f4
 8000c84:	200003f8 	.word	0x200003f8

08000c88 <Display_Init>:

e_system Display_Init(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xAE);   // Display off
 8000c92:	22ae      	movs	r2, #174	@ 0xae
 8000c94:	2100      	movs	r1, #0
 8000c96:	2078      	movs	r0, #120	@ 0x78
 8000c98:	f000 f94a 	bl	8000f30 <ssd1306_I2C_Write>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // Set Memory Addressing Mode
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2078      	movs	r0, #120	@ 0x78
 8000cac:	f000 f940 	bl	8000f30 <ssd1306_I2C_Write>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000cba:	2210      	movs	r2, #16
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2078      	movs	r0, #120	@ 0x78
 8000cc0:	f000 f936 	bl	8000f30 <ssd1306_I2C_Write>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4413      	add	r3, r2
 8000ccc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8000cce:	22b0      	movs	r2, #176	@ 0xb0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2078      	movs	r0, #120	@ 0x78
 8000cd4:	f000 f92c 	bl	8000f30 <ssd1306_I2C_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4413      	add	r3, r2
 8000ce0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xC8);   // Set COM Output Scan Direction
 8000ce2:	22c8      	movs	r2, #200	@ 0xc8
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2078      	movs	r0, #120	@ 0x78
 8000ce8:	f000 f922 	bl	8000f30 <ssd1306_I2C_Write>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // Set low column address
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2078      	movs	r0, #120	@ 0x78
 8000cfc:	f000 f918 	bl	8000f30 <ssd1306_I2C_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	461a      	mov	r2, r3
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4413      	add	r3, r2
 8000d08:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x10);   // Set high column address
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2078      	movs	r0, #120	@ 0x78
 8000d10:	f000 f90e 	bl	8000f30 <ssd1306_I2C_Write>
 8000d14:	4603      	mov	r3, r0
 8000d16:	461a      	mov	r2, r3
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x40);   // Set start line address
 8000d1e:	2240      	movs	r2, #64	@ 0x40
 8000d20:	2100      	movs	r1, #0
 8000d22:	2078      	movs	r0, #120	@ 0x78
 8000d24:	f000 f904 	bl	8000f30 <ssd1306_I2C_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4413      	add	r3, r2
 8000d30:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x81);   // set contrast control register
 8000d32:	2281      	movs	r2, #129	@ 0x81
 8000d34:	2100      	movs	r1, #0
 8000d36:	2078      	movs	r0, #120	@ 0x78
 8000d38:	f000 f8fa 	bl	8000f30 <ssd1306_I2C_Write>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	4413      	add	r3, r2
 8000d44:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xFF);
 8000d46:	22ff      	movs	r2, #255	@ 0xff
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2078      	movs	r0, #120	@ 0x78
 8000d4c:	f000 f8f0 	bl	8000f30 <ssd1306_I2C_Write>
 8000d50:	4603      	mov	r3, r0
 8000d52:	461a      	mov	r2, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	4413      	add	r3, r2
 8000d58:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA1);   // Set segment re-map 0 to 127
 8000d5a:	22a1      	movs	r2, #161	@ 0xa1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 f8e6 	bl	8000f30 <ssd1306_I2C_Write>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xA6);   // Set normal display
 8000d6e:	22a6      	movs	r2, #166	@ 0xa6
 8000d70:	2100      	movs	r1, #0
 8000d72:	2078      	movs	r0, #120	@ 0x78
 8000d74:	f000 f8dc 	bl	8000f30 <ssd1306_I2C_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4413      	add	r3, r2
 8000d80:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA8);   // Set multiplex ratio(1 to 64)
 8000d82:	22a8      	movs	r2, #168	@ 0xa8
 8000d84:	2100      	movs	r1, #0
 8000d86:	2078      	movs	r0, #120	@ 0x78
 8000d88:	f000 f8d2 	bl	8000f30 <ssd1306_I2C_Write>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4413      	add	r3, r2
 8000d94:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(SSD1306_HEIGHT - 1);
 8000d96:	223f      	movs	r2, #63	@ 0x3f
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2078      	movs	r0, #120	@ 0x78
 8000d9c:	f000 f8c8 	bl	8000f30 <ssd1306_I2C_Write>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4413      	add	r3, r2
 8000da8:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000daa:	22a4      	movs	r2, #164	@ 0xa4
 8000dac:	2100      	movs	r1, #0
 8000dae:	2078      	movs	r0, #120	@ 0x78
 8000db0:	f000 f8be 	bl	8000f30 <ssd1306_I2C_Write>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4413      	add	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD3);   // Set display offset
 8000dbe:	22d3      	movs	r2, #211	@ 0xd3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2078      	movs	r0, #120	@ 0x78
 8000dc4:	f000 f8b4 	bl	8000f30 <ssd1306_I2C_Write>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4413      	add	r3, r2
 8000dd0:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x00);   // No offset
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	@ 0x78
 8000dd8:	f000 f8aa 	bl	8000f30 <ssd1306_I2C_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4413      	add	r3, r2
 8000de4:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD5);   // Set display clock divide ratio/oscillator frequency
 8000de6:	22d5      	movs	r2, #213	@ 0xd5
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	@ 0x78
 8000dec:	f000 f8a0 	bl	8000f30 <ssd1306_I2C_Write>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4413      	add	r3, r2
 8000df8:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xF0);   // Set divide ratio
 8000dfa:	22f0      	movs	r2, #240	@ 0xf0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2078      	movs	r0, #120	@ 0x78
 8000e00:	f000 f896 	bl	8000f30 <ssd1306_I2C_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xD9);   // Set pre-charge period
 8000e0e:	22d9      	movs	r2, #217	@ 0xd9
 8000e10:	2100      	movs	r1, #0
 8000e12:	2078      	movs	r0, #120	@ 0x78
 8000e14:	f000 f88c 	bl	8000f30 <ssd1306_I2C_Write>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4413      	add	r3, r2
 8000e20:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x22);
 8000e22:	2222      	movs	r2, #34	@ 0x22
 8000e24:	2100      	movs	r1, #0
 8000e26:	2078      	movs	r0, #120	@ 0x78
 8000e28:	f000 f882 	bl	8000f30 <ssd1306_I2C_Write>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4413      	add	r3, r2
 8000e34:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDA);   // Set com pins hardware configuration
 8000e36:	22da      	movs	r2, #218	@ 0xda
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2078      	movs	r0, #120	@ 0x78
 8000e3c:	f000 f878 	bl	8000f30 <ssd1306_I2C_Write>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4413      	add	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(Display_COM_LR_REMAP << 5 | Display_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8000e4a:	2212      	movs	r2, #18
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2078      	movs	r0, #120	@ 0x78
 8000e50:	f000 f86e 	bl	8000f30 <ssd1306_I2C_Write>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	71fb      	strb	r3, [r7, #7]

    status += SSD1306_WRITECOMMAND(0xDB);   // Set vcomh
 8000e5e:	22db      	movs	r2, #219	@ 0xdb
 8000e60:	2100      	movs	r1, #0
 8000e62:	2078      	movs	r0, #120	@ 0x78
 8000e64:	f000 f864 	bl	8000f30 <ssd1306_I2C_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x20);   // 0x20,0.77xVcc
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	2078      	movs	r0, #120	@ 0x78
 8000e78:	f000 f85a 	bl	8000f30 <ssd1306_I2C_Write>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461a      	mov	r2, r3
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4413      	add	r3, r2
 8000e84:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x8D);   // Set DC-DC enable
 8000e86:	228d      	movs	r2, #141	@ 0x8d
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2078      	movs	r0, #120	@ 0x78
 8000e8c:	f000 f850 	bl	8000f30 <ssd1306_I2C_Write>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4413      	add	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0x14);   //
 8000e9a:	2214      	movs	r2, #20
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2078      	movs	r0, #120	@ 0x78
 8000ea0:	f000 f846 	bl	8000f30 <ssd1306_I2C_Write>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4413      	add	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]
    status += SSD1306_WRITECOMMAND(0xAF);   // Turn on Display panel
 8000eae:	22af      	movs	r2, #175	@ 0xaf
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2078      	movs	r0, #120	@ 0x78
 8000eb4:	f000 f83c 	bl	8000f30 <ssd1306_I2C_Write>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	71fb      	strb	r3, [r7, #7]

	status += SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ec2:	222e      	movs	r2, #46	@ 0x2e
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2078      	movs	r0, #120	@ 0x78
 8000ec8:	f000 f832 	bl	8000f30 <ssd1306_I2C_Write>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	71fb      	strb	r3, [r7, #7]

	/* Clear screen */
	Display_Fill(SSD1306_COLOR_BLACK);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8ec 	bl	80010b4 <Display_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <Display_Init+0x2a0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <Display_Init+0x2a0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = TRUE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <Display_Init+0x2a0>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	715a      	strb	r2, [r3, #5]

	Update.state = PAGE;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	70da      	strb	r2, [r3, #3]
	Update.Page = 0;
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <Display_Init+0x2a4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	709a      	strb	r2, [r3, #2]
	Update.Ready_DMA = TRUE;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <Display_Init+0x2a4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	705a      	strb	r2, [r3, #1]
	Update.Ready_To_Refresh = FALSE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <Display_Init+0x2a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]

	Update.PageData[0] = 0xB0 + Update.Page;
 8000f06:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <Display_Init+0x2a4>)
 8000f08:	789b      	ldrb	r3, [r3, #2]
 8000f0a:	3b50      	subs	r3, #80	@ 0x50
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <Display_Init+0x2a4>)
 8000f10:	711a      	strb	r2, [r3, #4]
	Update.PageData[1] = 0x00; //< acá seleccionamos Lower start
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <Display_Init+0x2a4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	715a      	strb	r2, [r3, #5]
	Update.PageData[2] = 0x10; //< y acá upper start
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <Display_Init+0x2a4>)
 8000f1a:	2210      	movs	r2, #16
 8000f1c:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return status;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003ec 	.word	0x200003ec
 8000f2c:	200007fc 	.word	0x200007fc

08000f30 <ssd1306_I2C_Write>:

e_system ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data){
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	737b      	strb	r3, [r7, #13]
	return I2C_Master_Transmit_Blocking(address, dt, 2, 10);
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <ssd1306_I2C_Write+0x38>)
 8000f4c:	681c      	ldr	r4, [r3, #0]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	b298      	uxth	r0, r3
 8000f52:	f107 010c 	add.w	r1, r7, #12
 8000f56:	230a      	movs	r3, #10
 8000f58:	2202      	movs	r2, #2
 8000f5a:	47a0      	blx	r4
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200003f8 	.word	0x200003f8

08000f6c <Display_UpdateScreen_Task>:

e_system Display_UpdateScreen_Task() {
 8000f6c:	b598      	push	{r3, r4, r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if(Update.Ready_To_Refresh && Update.Ready_DMA && SSD1306.Initialized){
 8000f70:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d057      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f78:	4b2d      	ldr	r3, [pc, #180]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f7a:	785b      	ldrb	r3, [r3, #1]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d053      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>
 8000f80:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <Display_UpdateScreen_Task+0xc8>)
 8000f82:	795b      	ldrb	r3, [r3, #5]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d04f      	beq.n	8001028 <Display_UpdateScreen_Task+0xbc>

		switch(Update.state){
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <Display_UpdateScreen_Task+0x2a>
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d01f      	beq.n	8000fd4 <Display_UpdateScreen_Task+0x68>
 8000f94:	e03b      	b.n	800100e <Display_UpdateScreen_Task+0xa2>
		case PAGE:
			Update.PageData[0] = 0xB0 + Update.Page;     // Set Page
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	3b50      	subs	r3, #80	@ 0x50
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa0:	711a      	strb	r2, [r3, #4]
			Update.PageData[1] = 0x00;                   // Lower Column
 8000fa2:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	715a      	strb	r2, [r3, #5]
			Update.PageData[2] = 0x10;                   // Upper Column
 8000fa8:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	719a      	strb	r2, [r3, #6]
			if(I2C_Master_Transmit(SSD1306_I2C_ADDR, 0x00, Update.PageData, 3)		== SYS_OK){
 8000fae:	4b22      	ldr	r3, [pc, #136]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fb0:	681c      	ldr	r4, [r3, #0]
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <Display_UpdateScreen_Task+0xd0>)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	@ 0x78
 8000fba:	47a0      	blx	r4
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d106      	bne.n	8000fd0 <Display_UpdateScreen_Task+0x64>
				Update.state = DATA;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8000fce:	e021      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e02a      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		case DATA:
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <Display_UpdateScreen_Task+0xcc>)
 8000fd6:	681c      	ldr	r4, [r3, #0]
									&OLED_DMA_BUFFER[SSD1306_WIDTH * Update.Page],
 8000fd8:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	01db      	lsls	r3, r3, #7
			if(I2C_Master_Transmit(	SSD1306_I2C_ADDR, 0x40,
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <Display_UpdateScreen_Task+0xd4>)
 8000fe0:	441a      	add	r2, r3
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	2140      	movs	r1, #64	@ 0x40
 8000fe6:	2078      	movs	r0, #120	@ 0x78
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <Display_UpdateScreen_Task+0x9e>
									SSD1306_WIDTH) 									== SYS_OK){
				Update.Page++;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ff2:	789b      	ldrb	r3, [r3, #2]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffa:	709a      	strb	r2, [r3, #2]
				Update.state = PAGE;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	70da      	strb	r2, [r3, #3]
				Update.Ready_DMA = FALSE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	705a      	strb	r2, [r3, #1]
			}else{
				return SYS_ERROR;
			}
			break;
 8001008:	e004      	b.n	8001014 <Display_UpdateScreen_Task+0xa8>
				return SYS_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00d      	b.n	800102a <Display_UpdateScreen_Task+0xbe>
		default:
			Update.Page = 8; //!< fuerzo el if de abajo para reiniciar el sistema
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001010:	2208      	movs	r2, #8
 8001012:	709a      	strb	r2, [r3, #2]
		}
		if(Update.Page > 7){
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001016:	789b      	ldrb	r3, [r3, #2]
 8001018:	2b07      	cmp	r3, #7
 800101a:	d905      	bls.n	8001028 <Display_UpdateScreen_Task+0xbc>
			Update.Page = 0;
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 800101e:	2200      	movs	r2, #0
 8001020:	709a      	strb	r2, [r3, #2]
			Update.Ready_To_Refresh = FALSE;
 8001022:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <Display_UpdateScreen_Task+0xc4>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
		}
	}

	return SYS_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd98      	pop	{r3, r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	200007fc 	.word	0x200007fc
 8001034:	200003ec 	.word	0x200003ec
 8001038:	200003f4 	.word	0x200003f4
 800103c:	20000800 	.word	0x20000800
 8001040:	200003fc 	.word	0x200003fc

08001044 <Display_I2C_DMA_Ready>:

void Display_I2C_DMA_Ready(uint8_t val){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_DMA = val;
 800104e:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <Display_I2C_DMA_Ready+0x1c>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	7053      	strb	r3, [r2, #1]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200007fc 	.word	0x200007fc

08001064 <Display_I2C_Refresh_Ready>:

void Display_I2C_Refresh_Ready(uint8_t val){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	Update.Ready_To_Refresh = val;
 800106e:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <Display_I2C_Refresh_Ready+0x1c>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	7013      	strb	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	200007fc 	.word	0x200007fc

08001084 <Display_SetCursor>:

/**
 * SET CURSOR POSITION
 */
void Display_SetCursor(uint8_t x, uint8_t y)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <Display_SetCursor+0x2c>)
 800109a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <Display_SetCursor+0x2c>)
 80010a2:	805a      	strh	r2, [r3, #2]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	200003ec 	.word	0x200003ec

080010b4 <Display_Fill>:

void Display_Fill(SSD1306_COLOR_t color) {
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	//memset(OLED_DMA_BUFFER, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, 1024);
	uint32_t i;

	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00d      	b.n	80010e0 <Display_Fill+0x2c>
	{
		OLED_DMA_BUFFER[i] = (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <Display_Fill+0x1a>
 80010ca:	2100      	movs	r1, #0
 80010cc:	e000      	b.n	80010d0 <Display_Fill+0x1c>
 80010ce:	21ff      	movs	r1, #255	@ 0xff
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <Display_Fill+0x44>)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4413      	add	r3, r2
 80010d6:	460a      	mov	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_DMA_BUFFER); i++)	// Fill screenbuffer with a constant value (color)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e6:	d3ed      	bcc.n	80010c4 <Display_Fill+0x10>
	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200003fc 	.word	0x200003fc

080010fc <Display_DrawPixel>:

void Display_Clear (void){
	Display_Fill (0);
}

void Display_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
 8001106:	460b      	mov	r3, r1
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	70fb      	strb	r3, [r7, #3]
	if (
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b7f      	cmp	r3, #127	@ 0x7f
 8001112:	d848      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001114:	88bb      	ldrh	r3, [r7, #4]
 8001116:	2b3f      	cmp	r3, #63	@ 0x3f
 8001118:	d845      	bhi.n	80011a6 <Display_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <Display_DrawPixel+0xb8>)
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <Display_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d11a      	bne.n	800116c <Display_DrawPixel+0x70>
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b298      	uxth	r0, r3
 800113e:	4603      	mov	r3, r0
 8001140:	01db      	lsls	r3, r3, #7
 8001142:	4413      	add	r3, r2
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	b25a      	sxtb	r2, r3
 800114a:	88bb      	ldrh	r3, [r7, #4]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	2101      	movs	r1, #1
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b259      	sxtb	r1, r3
 800115c:	88fa      	ldrh	r2, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	01db      	lsls	r3, r3, #7
 8001162:	4413      	add	r3, r2
 8001164:	b2c9      	uxtb	r1, r1
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <Display_DrawPixel+0xbc>)
 8001168:	54d1      	strb	r1, [r2, r3]
 800116a:	e01d      	b.n	80011a8 <Display_DrawPixel+0xac>
	} else {
		OLED_DMA_BUFFER[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800116c:	88fa      	ldrh	r2, [r7, #6]
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	08db      	lsrs	r3, r3, #3
 8001172:	b298      	uxth	r0, r3
 8001174:	4603      	mov	r3, r0
 8001176:	01db      	lsls	r3, r3, #7
 8001178:	4413      	add	r3, r2
 800117a:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <Display_DrawPixel+0xbc>)
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	b25a      	sxtb	r2, r3
 8001180:	88bb      	ldrh	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	2101      	movs	r1, #1
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	b25b      	sxtb	r3, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	b259      	sxtb	r1, r3
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	4603      	mov	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	4413      	add	r3, r2
 800119e:	b2c9      	uxtb	r1, r1
 80011a0:	4a05      	ldr	r2, [pc, #20]	@ (80011b8 <Display_DrawPixel+0xbc>)
 80011a2:	54d1      	strb	r1, [r2, r3]
 80011a4:	e000      	b.n	80011a8 <Display_DrawPixel+0xac>
		return;
 80011a6:	bf00      	nop
	}
}
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200003ec 	.word	0x200003ec
 80011b8:	200003fc 	.word	0x200003fc

080011bc <Display_DrawBitmap>:

void Display_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	81fb      	strh	r3, [r7, #14]
 80011ca:	460b      	mov	r3, r1
 80011cc:	81bb      	strh	r3, [r7, #12]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	3307      	adds	r3, #7
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da00      	bge.n	80011de <Display_DrawBitmap+0x22>
 80011dc:	3307      	adds	r3, #7
 80011de:	10db      	asrs	r3, r3, #3
 80011e0:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]

    //memcpy(&OLED_DMA_BUFFER[OFFSET_DATA], bitmap, 1024);
	/*for(uint16_t i = 0; i<1024; i++){
		OLED_DMA_BUFFER[i] = bitmap[i];
	}*/
    for(int16_t j=0; j<h; j++, y++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	82bb      	strh	r3, [r7, #20]
 80011ea:	e044      	b.n	8001276 <Display_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	827b      	strh	r3, [r7, #18]
 80011f0:	e02f      	b.n	8001252 <Display_DrawBitmap+0x96>
        {
            if(i & 7)
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <Display_DrawBitmap+0x48>
            {
               byte <<= 1;
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
 8001202:	e012      	b.n	800122a <Display_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800120c:	fb03 f202 	mul.w	r2, r3, r2
 8001210:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <Display_DrawBitmap+0x5e>
 8001218:	3307      	adds	r3, #7
 800121a:	10db      	asrs	r3, r3, #3
 800121c:	b21b      	sxth	r3, r3
 800121e:	4413      	add	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) Display_DrawPixel(x+i, y, color);
 800122a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da09      	bge.n	8001246 <Display_DrawBitmap+0x8a>
 8001232:	89fa      	ldrh	r2, [r7, #14]
 8001234:	8a7b      	ldrh	r3, [r7, #18]
 8001236:	4413      	add	r3, r2
 8001238:	b29b      	uxth	r3, r3
 800123a:	89b9      	ldrh	r1, [r7, #12]
 800123c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5b 	bl	80010fc <Display_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800124a:	b29b      	uxth	r3, r3
 800124c:	3301      	adds	r3, #1
 800124e:	b29b      	uxth	r3, r3
 8001250:	827b      	strh	r3, [r7, #18]
 8001252:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbc9      	blt.n	80011f2 <Display_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800125e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001262:	b29b      	uxth	r3, r3
 8001264:	3301      	adds	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	82bb      	strh	r3, [r7, #20]
 800126a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800126e:	b29b      	uxth	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	81bb      	strh	r3, [r7, #12]
 8001276:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800127a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbb4      	blt.n	80011ec <Display_DrawBitmap+0x30>
        }
    }
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <Display_WriteChar>:

/**
 * WRITE A CHAR INTO THE DISPLAY BUFFER
 */
char Display_WriteChar(char ch, FontDef_t Font, SSD1306_COLOR_t color)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4604      	mov	r4, r0
 8001294:	1d38      	adds	r0, r7, #4
 8001296:	e880 0006 	stmia.w	r0, {r1, r2}
 800129a:	461a      	mov	r2, r3
 800129c:	4623      	mov	r3, r4
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	4613      	mov	r3, r2
 80012a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012a4:	4b36      	ldr	r3, [pc, #216]	@ (8001380 <Display_WriteChar+0xf4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	793b      	ldrb	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80012b0:	dc06      	bgt.n	80012c0 <Display_WriteChar+0x34>
    		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80012b2:	4b33      	ldr	r3, [pc, #204]	@ (8001380 <Display_WriteChar+0xf4>)
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	797b      	ldrb	r3, [r7, #5]
 80012ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80012bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012be:	dd01      	ble.n	80012c4 <Display_WriteChar+0x38>
    {

        return 0;	// Not enough space on current line
 80012c0:	2300      	movs	r3, #0
 80012c2:	e058      	b.n	8001376 <Display_WriteChar+0xea>
    }

    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	e048      	b.n	800135c <Display_WriteChar+0xd0>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	3b20      	subs	r3, #32
 80012d0:	7979      	ldrb	r1, [r7, #5]
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	440b      	add	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e030      	b.n	800134c <Display_WriteChar+0xc0>
        {
            if ((b << j) & 0x8000)
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <Display_WriteChar+0x90>
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012fa:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <Display_WriteChar+0xf4>)
 80012fc:	881a      	ldrh	r2, [r3, #0]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b298      	uxth	r0, r3
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <Display_WriteChar+0xf4>)
 8001308:	885a      	ldrh	r2, [r3, #2]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fef1 	bl	80010fc <Display_DrawPixel>
 800131a:	e014      	b.n	8001346 <Display_WriteChar+0xba>
            else
                Display_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <Display_WriteChar+0xf4>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4413      	add	r3, r2
 8001326:	b298      	uxth	r0, r3
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <Display_WriteChar+0xf4>)
 800132a:	885a      	ldrh	r2, [r3, #2]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4413      	add	r3, r2
 8001332:	b299      	uxth	r1, r3
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f7ff fedb 	bl	80010fc <Display_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	3301      	adds	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	793b      	ldrb	r3, [r7, #4]
 800134e:	461a      	mov	r2, r3
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4293      	cmp	r3, r2
 8001354:	d3c9      	bcc.n	80012ea <Display_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)	// Translate font to screenbuffer
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	797b      	ldrb	r3, [r7, #5]
 800135e:	461a      	mov	r2, r3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	4293      	cmp	r3, r2
 8001364:	d3b1      	bcc.n	80012ca <Display_WriteChar+0x3e>
        }
    }
    SSD1306.CurrentX += Font.FontWidth;	// The current space is now taken
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <Display_WriteChar+0xf4>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	793a      	ldrb	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <Display_WriteChar+0xf4>)
 8001372:	801a      	strh	r2, [r3, #0]

    return ch;	// Return written char for validation
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}
 800137e:	bf00      	nop
 8001380:	200003ec 	.word	0x200003ec

08001384 <Display_WriteString>:

/**
 * WRITE STRING INTO THE DISPLAY BUFFER
 */
char Display_WriteString(char* str, FontDef_t Font, SSD1306_COLOR_t color)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001392:	70fb      	strb	r3, [r7, #3]
    while (*str){
 8001394:	e012      	b.n	80013bc <Display_WriteString+0x38>
        if (Display_WriteChar(*str, Font, color) != *str)	// Write until null-byte
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	7818      	ldrb	r0, [r3, #0]
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	ca06      	ldmia	r2, {r1, r2}
 80013a0:	f7ff ff74 	bl	800128c <Display_WriteChar>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d002      	beq.n	80013b6 <Display_WriteString+0x32>
        	return *str;	// Char could not be written
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	e008      	b.n	80013c8 <Display_WriteString+0x44>

        str++;	// Next char
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
    while (*str){
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1e8      	bne.n	8001396 <Display_WriteString+0x12>
    }
    return *str;	// Everything ok
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Display_DrawLine>:

void Display_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	4611      	mov	r1, r2
 80013dc:	461a      	mov	r2, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	4603      	mov	r3, r0
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]
 80013ea:	4613      	mov	r3, r2
 80013ec:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, i, tmp;

	if(x0 != x1 && y0 != y1)
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d004      	beq.n	8001400 <Display_DrawLine+0x30>
 80013f6:	88ba      	ldrh	r2, [r7, #4]
 80013f8:	883b      	ldrh	r3, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f040 8090 	bne.w	8001520 <Display_DrawLine+0x150>
		return;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b7f      	cmp	r3, #127	@ 0x7f
 8001404:	d901      	bls.n	800140a <Display_DrawLine+0x3a>
		x0 = SSD1306_WIDTH - 1;
 8001406:	237f      	movs	r3, #127	@ 0x7f
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	2b7f      	cmp	r3, #127	@ 0x7f
 800140e:	d901      	bls.n	8001414 <Display_DrawLine+0x44>
		x1 = SSD1306_WIDTH - 1;
 8001410:	237f      	movs	r3, #127	@ 0x7f
 8001412:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2b3f      	cmp	r3, #63	@ 0x3f
 8001418:	d901      	bls.n	800141e <Display_DrawLine+0x4e>
		y0 = SSD1306_HEIGHT - 1;
 800141a:	233f      	movs	r3, #63	@ 0x3f
 800141c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	2b3f      	cmp	r3, #63	@ 0x3f
 8001422:	d901      	bls.n	8001428 <Display_DrawLine+0x58>
		y1 = SSD1306_HEIGHT - 1;
 8001424:	233f      	movs	r3, #63	@ 0x3f
 8001426:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	429a      	cmp	r2, r3
 800142e:	d205      	bcs.n	800143c <Display_DrawLine+0x6c>
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	b21b      	sxth	r3, r3
 800143a:	e004      	b.n	8001446 <Display_DrawLine+0x76>
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d205      	bcs.n	800145c <Display_DrawLine+0x8c>
 8001450:	883a      	ldrh	r2, [r7, #0]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	b21b      	sxth	r3, r3
 800145a:	e004      	b.n	8001466 <Display_DrawLine+0x96>
 800145c:	88ba      	ldrh	r2, [r7, #4]
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	b21b      	sxth	r3, r3
 8001466:	817b      	strh	r3, [r7, #10]

	if (dx == 0) {
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d129      	bne.n	80014c4 <Display_DrawLine+0xf4>
		if (y1 < y0) {
 8001470:	883a      	ldrh	r2, [r7, #0]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d205      	bcs.n	8001484 <Display_DrawLine+0xb4>
			tmp = y1;
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001480:	893b      	ldrh	r3, [r7, #8]
 8001482:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	429a      	cmp	r2, r3
 800148a:	d205      	bcs.n	8001498 <Display_DrawLine+0xc8>
			tmp = x1;
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	e00c      	b.n	80014b8 <Display_DrawLine+0xe8>
			Display_DrawPixel(x0, i, c);
 800149e:	89f9      	ldrh	r1, [r7, #14]
 80014a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe28 	bl	80010fc <Display_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	81fb      	strh	r3, [r7, #14]
 80014b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014bc:	883b      	ldrh	r3, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dded      	ble.n	800149e <Display_DrawLine+0xce>
		}

		/* Return from function */
		return;
 80014c2:	e030      	b.n	8001526 <Display_DrawLine+0x156>
	}

	if (dy == 0) {
 80014c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <Display_DrawLine+0x154>
		if (y1 < y0) {
 80014cc:	883a      	ldrh	r2, [r7, #0]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d205      	bcs.n	80014e0 <Display_DrawLine+0x110>
			tmp = y1;
 80014d4:	883b      	ldrh	r3, [r7, #0]
 80014d6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014dc:	893b      	ldrh	r3, [r7, #8]
 80014de:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d205      	bcs.n	80014f4 <Display_DrawLine+0x124>
			tmp = x1;
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	81fb      	strh	r3, [r7, #14]
 80014f8:	e00c      	b.n	8001514 <Display_DrawLine+0x144>
			Display_DrawPixel(i, y0, c);
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001500:	88b9      	ldrh	r1, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdfa 	bl	80010fc <Display_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3301      	adds	r3, #1
 8001510:	b29b      	uxth	r3, r3
 8001512:	81fb      	strh	r3, [r7, #14]
 8001514:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	429a      	cmp	r2, r3
 800151c:	dded      	ble.n	80014fa <Display_DrawLine+0x12a>
		}
	}
	return;
 800151e:	e001      	b.n	8001524 <Display_DrawLine+0x154>
		return;
 8001520:	bf00      	nop
 8001522:	e000      	b.n	8001526 <Display_DrawLine+0x156>
	return;
 8001524:	bf00      	nop
}
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}

0800152c <Display_DrawFilledRectangle>:
	Display_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	Display_DrawLine(x, y, x, y + h, c);         /* Left line */
	Display_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void Display_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b087      	sub	sp, #28
 8001530:	af02      	add	r7, sp, #8
 8001532:	4604      	mov	r4, r0
 8001534:	4608      	mov	r0, r1
 8001536:	4611      	mov	r1, r2
 8001538:	461a      	mov	r2, r3
 800153a:	4623      	mov	r3, r4
 800153c:	80fb      	strh	r3, [r7, #6]
 800153e:	4603      	mov	r3, r0
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
 8001546:	4613      	mov	r3, r2
 8001548:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	d836      	bhi.n	80015be <Display_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	2b3f      	cmp	r3, #63	@ 0x3f
 8001554:	d833      	bhi.n	80015be <Display_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	4413      	add	r3, r2
 800155c:	2b7f      	cmp	r3, #127	@ 0x7f
 800155e:	dd03      	ble.n	8001568 <Display_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001566:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001568:	88ba      	ldrh	r2, [r7, #4]
 800156a:	883b      	ldrh	r3, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001570:	dd03      	ble.n	800157a <Display_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001578:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e018      	b.n	80015b2 <Display_DrawFilledRectangle+0x86>
		/* Draw lines */
		Display_DrawLine(x, y + i, x + w, y + i, c);
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	b29a      	uxth	r2, r3
 8001584:	88bb      	ldrh	r3, [r7, #4]
 8001586:	4413      	add	r3, r2
 8001588:	b299      	uxth	r1, r3
 800158a:	88fa      	ldrh	r2, [r7, #6]
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4413      	add	r3, r2
 8001590:	b29c      	uxth	r4, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	b29a      	uxth	r2, r3
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	b29a      	uxth	r2, r3
 800159c:	88f8      	ldrh	r0, [r7, #6]
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	4622      	mov	r2, r4
 80015a8:	f7ff ff12 	bl	80013d0 <Display_DrawLine>
	for (i = 0; i <= h; i++) {
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	883a      	ldrh	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d2e1      	bcs.n	8001580 <Display_DrawFilledRectangle+0x54>
 80015bc:	e000      	b.n	80015c0 <Display_DrawFilledRectangle+0x94>
		return;
 80015be:	bf00      	nop
	}
}
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}

080015c6 <Encoder_Init>:
 *      Author: Agustín Alejandro Mayer
 */

#include "Motors/encoder.h"

void Encoder_Init(s_encoder *enc, uint8_t reset){
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70fb      	strb	r3, [r7, #3]
	enc->pulses = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	809a      	strh	r2, [r3, #4]
	enc->resetBase = reset;
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	801a      	strh	r2, [r3, #0]
	enc->timeReset = reset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	805a      	strh	r2, [r3, #2]
	enc->counter1s = 1000 / reset;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	729a      	strb	r2, [r3, #10]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <Encoder_Task>:

void Encoder_Task(s_encoder *enc){
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	enc->timeReset--;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	805a      	strh	r2, [r3, #2]
	if(!enc->timeReset){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10e      	bne.n	800163e <Encoder_Task+0x3a>

		enc->fastPPS += enc->pulses;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	88da      	ldrh	r2, [r3, #6]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	889b      	ldrh	r3, [r3, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	80da      	strh	r2, [r3, #6]

		enc->timeReset = enc->resetBase;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	881a      	ldrh	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	805a      	strh	r2, [r3, #2]
		enc->pulses = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	809a      	strh	r2, [r3, #4]
	}
	enc->counter1s--;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a9b      	ldrb	r3, [r3, #10]
 8001642:	3b01      	subs	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	729a      	strb	r2, [r3, #10]
	if(!enc->counter1s){
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a9b      	ldrb	r3, [r3, #10]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <Encoder_Task+0x54>
		enc->pps = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	811a      	strh	r2, [r3, #8]
	}
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <Encoder_Add_Pulse>:

void Encoder_Add_Pulse(s_encoder *enc){
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	enc->pulses++;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	889b      	ldrh	r3, [r3, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	809a      	strh	r2, [r3, #4]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <Encoder_1s_Elapsed>:

void Encoder_1s_Elapsed(s_encoder *enc){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	enc->pps = enc->fastPPS;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	88da      	ldrh	r2, [r3, #6]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	811a      	strh	r2, [r3, #8]
	enc->fastPPS=0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	80da      	strh	r2, [r3, #6]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <Motor_Init>:
 */
#include "Motors/motors.h"
#include <stddef.h>

void Motor_Init(s_motor *motor, void (*PWM_set)(uint16_t dCycle),
		void (*PIN_set)(uint8_t A, uint8_t B), uint16_t max_value){
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	807b      	strh	r3, [r7, #2]

	motor->direction = NO_INIT;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	motor->setPins = PIN_set;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]
	motor->setPWM = PWM_set;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	615a      	str	r2, [r3, #20]
	motor->maxValue = max_value;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	605a      	str	r2, [r3, #4]
	motor->vel = 0;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
	motor->brakeTimeout = 0;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	819a      	strh	r2, [r3, #12]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <Motor_Set_Speed>:

void Motor_Set_Speed(s_motor *motor, int8_t speed){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	if( motor->setPWM == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d050      	beq.n	800179a <Motor_Set_Speed+0xb6>
		return;
	if(speed > 100)
 80016f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016fc:	2b64      	cmp	r3, #100	@ 0x64
 80016fe:	dd01      	ble.n	8001704 <Motor_Set_Speed+0x20>
		speed = 100;
 8001700:	2364      	movs	r3, #100	@ 0x64
 8001702:	70fb      	strb	r3, [r7, #3]
	if(speed < -100)
 8001704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001708:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800170c:	da01      	bge.n	8001712 <Motor_Set_Speed+0x2e>
		speed = -100;
 800170e:	239c      	movs	r3, #156	@ 0x9c
 8001710:	70fb      	strb	r3, [r7, #3]
	if(speed == motor->vel)
 8001712:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d03f      	beq.n	800179e <Motor_Set_Speed+0xba>
		return;

	motor->vel = speed * 600;
 800171e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001722:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001726:	fb03 f202 	mul.w	r2, r3, r2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]

	if(speed > 0){
 800172e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dd10      	ble.n	8001758 <Motor_Set_Speed+0x74>
		motor->direction = FORWARD;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2202      	movs	r2, #2
 800173a:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FORWARD);
 800173c:	2102      	movs	r1, #2
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f832 	bl	80017a8 <Motor_Set_Direction>
		motor->setPWM((uint16_t)motor->vel-1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6892      	ldr	r2, [r2, #8]
 800174c:	b292      	uxth	r2, r2
 800174e:	3a01      	subs	r2, #1
 8001750:	b292      	uxth	r2, r2
 8001752:	4610      	mov	r0, r2
 8001754:	4798      	blx	r3
 8001756:	e023      	b.n	80017a0 <Motor_Set_Speed+0xbc>
	}else if(speed < 0){
 8001758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800175c:	2b00      	cmp	r3, #0
 800175e:	da10      	bge.n	8001782 <Motor_Set_Speed+0x9e>
		motor->direction = BACKWARD;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2203      	movs	r2, #3
 8001764:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, BACKWARD);
 8001766:	2103      	movs	r1, #3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f81d 	bl	80017a8 <Motor_Set_Direction>
		motor->setPWM((uint16_t)(motor->vel * -1)-1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6892      	ldr	r2, [r2, #8]
 8001776:	b292      	uxth	r2, r2
 8001778:	43d2      	mvns	r2, r2
 800177a:	b292      	uxth	r2, r2
 800177c:	4610      	mov	r0, r2
 800177e:	4798      	blx	r3
 8001780:	e00e      	b.n	80017a0 <Motor_Set_Speed+0xbc>
	}else{
		motor->direction = FREE_WHEEL;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
		Motor_Set_Direction(motor, FREE_WHEEL);
 8001788:	2101      	movs	r1, #1
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f80c 	bl	80017a8 <Motor_Set_Direction>
		motor->setPWM(0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	2000      	movs	r0, #0
 8001796:	4798      	blx	r3
 8001798:	e002      	b.n	80017a0 <Motor_Set_Speed+0xbc>
		return;
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <Motor_Set_Speed+0xbc>
		return;
 800179e:	bf00      	nop
	}
}
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <Motor_Set_Direction>:

void Motor_Set_Direction(s_motor *motor, e_direction direction){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
	if(motor->setPins == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d027      	beq.n	800180c <Motor_Set_Direction+0x64>
		return;
	switch(direction){
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d825      	bhi.n	800180e <Motor_Set_Direction+0x66>
 80017c2:	a201      	add	r2, pc, #4	@ (adr r2, 80017c8 <Motor_Set_Direction+0x20>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	0800180f 	.word	0x0800180f
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	080017f5 	.word	0x080017f5
 80017d8:	08001801 	.word	0x08001801
		case NO_INIT:
			break;
		case FREE_WHEEL:
			motor->setPins(0, 0);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2100      	movs	r1, #0
 80017e2:	2000      	movs	r0, #0
 80017e4:	4798      	blx	r3
			break;
 80017e6:	e012      	b.n	800180e <Motor_Set_Direction+0x66>
		case FORWARD:
			motor->setPins(1, 0);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2100      	movs	r1, #0
 80017ee:	2001      	movs	r0, #1
 80017f0:	4798      	blx	r3
			break;
 80017f2:	e00c      	b.n	800180e <Motor_Set_Direction+0x66>
		case BACKWARD:
			motor->setPins(0, 1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2101      	movs	r1, #1
 80017fa:	2000      	movs	r0, #0
 80017fc:	4798      	blx	r3
			break;
 80017fe:	e006      	b.n	800180e <Motor_Set_Direction+0x66>
		case BRAKE:
			motor->setPins(1, 1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2101      	movs	r1, #1
 8001806:	2001      	movs	r0, #1
 8001808:	4798      	blx	r3
			break;
 800180a:	e000      	b.n	800180e <Motor_Set_Direction+0x66>
		return;
 800180c:	bf00      	nop
	}
}
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <Motor_Break_Timeout>:
	motor->direction = BRAKE;
	Motor_Set_Direction(motor, BRAKE);

}

void Motor_Break_Timeout(s_motor *motor){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	if(motor->direction == BRAKE){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d10c      	bne.n	800183e <Motor_Break_Timeout+0x2a>
		motor->brakeTimeout--;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	899b      	ldrh	r3, [r3, #12]
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	819a      	strh	r2, [r3, #12]
		if(!motor->brakeTimeout)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	899b      	ldrh	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <Motor_Break_Timeout+0x2a>
			motor->direction = FREE_WHEEL;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
	}
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <Comm_Init>:
static uint8_t TxAuxBuffer[30];
static uint8_t indexStart;
static uint8_t indexStartValue;
static uint8_t checksum;

void Comm_Init(s_commData* comm, void (*dataD)(s_commData *comm), void (*dataW)(s_commData *comm)){
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	60b9      	str	r1, [r7, #8]
 8001854:	607a      	str	r2, [r7, #4]
	comm->dataDecoder = dataD;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
	comm->dataWriter = dataW;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	comm->timeOut = 0;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
	comm->indexStart = 0;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	705a      	strb	r2, [r3, #1]
	comm->checksumRx = 0;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
	comm->Tx.write=0;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	70da      	strb	r2, [r3, #3]
	comm->Tx.read=0;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	709a      	strb	r2, [r3, #2]
	comm->Rx.write=0;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	comm->Rx.read=0;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	comm->isESP01 = 0;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 222f 	strb.w	r2, [r3, #559]	@ 0x22f
	comm->protocolState = START;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
}
 80018a6:	bf00      	nop
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <Comm_Task>:

void Comm_Task(s_commData* comm){
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
	if(comm->Rx.read != comm->Rx.write){
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d002      	beq.n	80018d0 <Comm_Task+0x1e>
		decodeProtocol(comm);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f81a 	bl	8001904 <decodeProtocol>
	}
	if (comm->Tx.read != comm->Tx.write) {
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	789a      	ldrb	r2, [r3, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	78db      	ldrb	r3, [r3, #3]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d00e      	beq.n	80018fa <Comm_Task+0x48>
		if(!comm->isESP01){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 322f 	ldrb.w	r3, [r3, #559]	@ 0x22f
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <Comm_Task+0x48>
			if(comm->dataWriter != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <Comm_Task+0x48>
				comm->dataWriter(comm);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
		}else{
			//ESP01_Send((unsigned char*)&comm->Tx.buffer,  comm->Tx.read,  1,  RINGBUFFLENGTH);
		}
	}
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <decodeProtocol>:

void decodeProtocol(s_commData *datosCom){
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	static uint8_t nBytes=0;
	uint8_t indexWriteRxCopy = datosCom->Rx.write;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001912:	73fb      	strb	r3, [r7, #15]

	while (datosCom->Rx.read != indexWriteRxCopy){
 8001914:	e11b      	b.n	8001b4e <decodeProtocol+0x24a>
		switch(datosCom->protocolState){
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 322e 	ldrb.w	r3, [r3, #558]	@ 0x22e
 800191c:	2b06      	cmp	r3, #6
 800191e:	f200 810e 	bhi.w	8001b3e <decodeProtocol+0x23a>
 8001922:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <decodeProtocol+0x24>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001945 	.word	0x08001945
 800192c:	08001977 	.word	0x08001977
 8001930:	080019b9 	.word	0x080019b9
 8001934:	080019fb 	.word	0x080019fb
 8001938:	08001a3d 	.word	0x08001a3d
 800193c:	08001a6f 	.word	0x08001a6f
 8001940:	08001ac1 	.word	0x08001ac1
		case START:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'U'){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	b2d1      	uxtb	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800195e:	2b55      	cmp	r3, #85	@ 0x55
 8001960:	f040 80f2 	bne.w	8001b48 <decodeProtocol+0x244>
				datosCom->protocolState = HEADER_1;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx = 0;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			break;
 8001974:	e0e8      	b.n	8001b48 <decodeProtocol+0x244>
		case HEADER_1:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'N')
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	b2d1      	uxtb	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4413      	add	r3, r2
 800198c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001990:	2b4e      	cmp	r3, #78	@ 0x4e
 8001992:	d104      	bne.n	800199e <decodeProtocol+0x9a>
				datosCom->protocolState = HEADER_2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2202      	movs	r2, #2
 8001998:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 800199c:	e0d7      	b.n	8001b4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80019b6:	e0ca      	b.n	8001b4e <decodeProtocol+0x24a>
		case HEADER_2:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'E')
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 80019c8:	461a      	mov	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80019d2:	2b45      	cmp	r3, #69	@ 0x45
 80019d4:	d104      	bne.n	80019e0 <decodeProtocol+0xdc>
				datosCom->protocolState = HEADER_3;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 80019de:	e0b6      	b.n	8001b4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 80019f8:	e0a9      	b.n	8001b4e <decodeProtocol+0x24a>
		case HEADER_3:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == 'R')
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	b2d1      	uxtb	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a14:	2b52      	cmp	r3, #82	@ 0x52
 8001a16:	d104      	bne.n	8001a22 <decodeProtocol+0x11e>
				datosCom->protocolState = NBYTES;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001a20:	e095      	b.n	8001b4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a3a:	e088      	b.n	8001b4e <decodeProtocol+0x24a>
		case NBYTES:
			datosCom->indexStart = datosCom->Rx.read;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	705a      	strb	r2, [r3, #1]
			nBytes = datosCom->Rx.buffer[datosCom->Rx.read++];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	b2d1      	uxtb	r1, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001a60:	4b41      	ldr	r3, [pc, #260]	@ (8001b68 <decodeProtocol+0x264>)
 8001a62:	701a      	strb	r2, [r3, #0]
			datosCom->protocolState = TOKEN;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2205      	movs	r2, #5
 8001a68:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001a6c:	e06f      	b.n	8001b4e <decodeProtocol+0x24a>
		case TOKEN:
			if (datosCom->Rx.buffer[datosCom->Rx.read++] == ':'){
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	b2d1      	uxtb	r1, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001a88:	2b3a      	cmp	r3, #58	@ 0x3a
 8001a8a:	d10c      	bne.n	8001aa6 <decodeProtocol+0x1a2>
				datosCom->protocolState = PAYLOAD;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2206      	movs	r2, #6
 8001a90:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				datosCom->checksumRx ='U' ^ 'N' ^ 'E' ^ 'R' ^ nBytes ^ ':';
 8001a94:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <decodeProtocol+0x264>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			else{
				datosCom->Rx.read--;
				datosCom->protocolState = START;
			}
			break;
 8001aa4:	e053      	b.n	8001b4e <decodeProtocol+0x24a>
				datosCom->Rx.read--;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				datosCom->protocolState = START;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001abe:	e046      	b.n	8001b4e <decodeProtocol+0x24a>
		case PAYLOAD:
			if (nBytes > 1){
 8001ac0:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <decodeProtocol+0x264>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d914      	bls.n	8001af2 <decodeProtocol+0x1ee>
				datosCom->checksumRx ^= datosCom->Rx.buffer[datosCom->Rx.read++];
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	f882 1104 	strb.w	r1, [r2, #260]	@ 0x104
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8001ae8:	4053      	eors	r3, r2
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
			nBytes--;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <decodeProtocol+0x264>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <decodeProtocol+0x264>)
 8001afc:	701a      	strb	r2, [r3, #0]
			if(nBytes<=0){
 8001afe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b68 <decodeProtocol+0x264>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d122      	bne.n	8001b4c <decodeProtocol+0x248>
				datosCom->protocolState = START;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
				if(datosCom->checksumRx == datosCom->Rx.buffer[datosCom->Rx.read]){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	440b      	add	r3, r1
 8001b20:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d111      	bne.n	8001b4c <decodeProtocol+0x248>
					if(datosCom->dataDecoder != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <decodeProtocol+0x248>
						datosCom->dataDecoder(datosCom);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
				}
			}
			break;
 8001b3c:	e006      	b.n	8001b4c <decodeProtocol+0x248>
		default:
			datosCom->protocolState = START;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 222e 	strb.w	r2, [r3, #558]	@ 0x22e
			break;
 8001b46:	e002      	b.n	8001b4e <decodeProtocol+0x24a>
			break;
 8001b48:	bf00      	nop
 8001b4a:	e000      	b.n	8001b4e <decodeProtocol+0x24a>
			break;
 8001b4c:	bf00      	nop
	while (datosCom->Rx.read != indexWriteRxCopy){
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	f47f aedd 	bne.w	8001916 <decodeProtocol+0x12>
		}
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000829 	.word	0x20000829

08001b6c <comm_sendCMD>:

void comm_sendCMD(s_commData *datosCom, _eID cmd, uint8_t *str, uint8_t len){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	72fb      	strb	r3, [r7, #11]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	72bb      	strb	r3, [r7, #10]
    i = 0;
 8001b80:	4b62      	ldr	r3, [pc, #392]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
    auxIndex = 0;
 8001b86:	4b62      	ldr	r3, [pc, #392]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

    // Cabecera
    TxAuxBuffer[auxIndex++] = 'U'; // Start
 8001b8c:	4b60      	ldr	r3, [pc, #384]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	b2d1      	uxtb	r1, r2
 8001b94:	4a5e      	ldr	r2, [pc, #376]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001b96:	7011      	strb	r1, [r2, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001b9c:	2155      	movs	r1, #85	@ 0x55
 8001b9e:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'N'; // Header 1
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	b2d1      	uxtb	r1, r2
 8001ba8:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001baa:	7011      	strb	r1, [r2, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b59      	ldr	r3, [pc, #356]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001bb0:	214e      	movs	r1, #78	@ 0x4e
 8001bb2:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'E'; // Header 2
 8001bb4:	4b56      	ldr	r3, [pc, #344]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	4a54      	ldr	r2, [pc, #336]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bbe:	7011      	strb	r1, [r2, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b54      	ldr	r3, [pc, #336]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001bc4:	2145      	movs	r1, #69	@ 0x45
 8001bc6:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = 'R'; // Header 3
 8001bc8:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	b2d1      	uxtb	r1, r2
 8001bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bd2:	7011      	strb	r1, [r2, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001bd8:	2152      	movs	r1, #82	@ 0x52
 8001bda:	5499      	strb	r1, [r3, r2]

    indexStart = auxIndex; // Se guarda la posición del primer dato del mensaje (cmd)
 8001bdc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d18 <comm_sendCMD+0x1ac>)
 8001be2:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[auxIndex++] = 0;   // Placeholder del indexStart, se sobrescribirá después
 8001be4:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	b2d1      	uxtb	r1, r2
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bee:	7011      	strb	r1, [r2, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

    TxAuxBuffer[auxIndex++] = ':'; // Token
 8001bf8:	4b45      	ldr	r3, [pc, #276]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	b2d1      	uxtb	r1, r2
 8001c00:	4a43      	ldr	r2, [pc, #268]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c02:	7011      	strb	r1, [r2, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001c08:	213a      	movs	r1, #58	@ 0x3a
 8001c0a:	5499      	strb	r1, [r3, r2]
    TxAuxBuffer[auxIndex++] = cmd; // Comando
 8001c0c:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	b2d1      	uxtb	r1, r2
 8001c14:	4a3e      	ldr	r2, [pc, #248]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c16:	7011      	strb	r1, [r2, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	5453      	strb	r3, [r2, r1]

    if(cmd == USERTEXT || cmd == SYSERROR)
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	2bb1      	cmp	r3, #177	@ 0xb1
 8001c24:	d002      	beq.n	8001c2c <comm_sendCMD+0xc0>
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	2bee      	cmp	r3, #238	@ 0xee
 8001c2a:	d109      	bne.n	8001c40 <comm_sendCMD+0xd4>
    	TxAuxBuffer[auxIndex++] = len;
 8001c2c:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	b2d1      	uxtb	r1, r2
 8001c34:	4a36      	ldr	r2, [pc, #216]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c36:	7011      	strb	r1, [r2, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4a36      	ldr	r2, [pc, #216]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001c3c:	7abb      	ldrb	r3, [r7, #10]
 8001c3e:	5453      	strb	r3, [r2, r1]

    // Copia de datos si hay
    if (str != NULL && len > 0) {
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d013      	beq.n	8001c6e <comm_sendCMD+0x102>
 8001c46:	7abb      	ldrb	r3, [r7, #10]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <comm_sendCMD+0x102>
        memcpy(&TxAuxBuffer[auxIndex], str, len);
 8001c4c:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b30      	ldr	r3, [pc, #192]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001c54:	4413      	add	r3, r2
 8001c56:	7aba      	ldrb	r2, [r7, #10]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00e fe66 	bl	801092c <memcpy>
        auxIndex += len;
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	7abb      	ldrb	r3, [r7, #10]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c6c:	701a      	strb	r2, [r3, #0]
    }

    indexStartValue = auxIndex - indexStart - 1; // Cantidad de datos desde cmd hasta checksum
 8001c6e:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b29      	ldr	r3, [pc, #164]	@ (8001d18 <comm_sendCMD+0x1ac>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <comm_sendCMD+0x1b0>)
 8001c80:	701a      	strb	r2, [r3, #0]
    TxAuxBuffer[indexStart] = indexStartValue;
 8001c82:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <comm_sendCMD+0x1ac>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <comm_sendCMD+0x1b0>)
 8001c8a:	7819      	ldrb	r1, [r3, #0]
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001c8e:	5499      	strb	r1, [r3, r2]

    // Checksum
    checksum = 0;
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <comm_sendCMD+0x1b4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < auxIndex; i++) {
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e01f      	b.n	8001cde <comm_sendCMD+0x172>
        checksum ^= TxAuxBuffer[i];
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001ca6:	5c9a      	ldrb	r2, [r3, r2]
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <comm_sendCMD+0x1b4>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4053      	eors	r3, r2
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <comm_sendCMD+0x1b4>)
 8001cb2:	701a      	strb	r2, [r3, #0]
        datosCom->Tx.buffer[datosCom->Tx.write++] = TxAuxBuffer[i];
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	78db      	ldrb	r3, [r3, #3]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	b2d1      	uxtb	r1, r2
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	70d1      	strb	r1, [r2, #3]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <comm_sendCMD+0x1a8>)
 8001cca:	5c1a      	ldrb	r2, [r3, r0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	440b      	add	r3, r1
 8001cd0:	711a      	strb	r2, [r3, #4]
    for (i = 0; i < auxIndex; i++) {
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <comm_sendCMD+0x1a0>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <comm_sendCMD+0x1a4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d3d9      	bcc.n	8001c9e <comm_sendCMD+0x132>
    }

    datosCom->Tx.buffer[datosCom->Tx.write++] = checksum;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	78db      	ldrb	r3, [r3, #3]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	b2d1      	uxtb	r1, r2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	70d1      	strb	r1, [r2, #3]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <comm_sendCMD+0x1b4>)
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	440b      	add	r3, r1
 8001d00:	711a      	strb	r2, [r3, #4]
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000806 	.word	0x20000806
 8001d10:	20000807 	.word	0x20000807
 8001d14:	20000808 	.word	0x20000808
 8001d18:	20000826 	.word	0x20000826
 8001d1c:	20000827 	.word	0x20000827
 8001d20:	20000828 	.word	0x20000828

08001d24 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
void Init_Timing();
void Init_MPU6050();
void Init_Display();

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a07      	ldr	r2, [pc, #28]	@ (8001d50 <HAL_UART_RxCpltCallback+0x2c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d107      	bne.n	8001d46 <HAL_UART_RxCpltCallback+0x22>
		//dataTx = dataRx;
		HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 8001d36:	2201      	movs	r2, #1
 8001d38:	4906      	ldr	r1, [pc, #24]	@ (8001d54 <HAL_UART_RxCpltCallback+0x30>)
 8001d3a:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <HAL_UART_RxCpltCallback+0x34>)
 8001d3c:	f009 fde6 	bl	800b90c <HAL_UART_Receive_IT>
		dataRx = 0;
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <HAL_UART_RxCpltCallback+0x30>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
	}
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40011000 	.word	0x40011000
 8001d54:	200011c9 	.word	0x200011c9
 8001d58:	20000a78 	.word	0x20000a78

08001d5c <OLED_Print_Data_Task>:
/************************************ FIN FUNCIONES PARA ABSTRACCIÓN DE HARDWARE ************************************/
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void OLED_Print_Data_Task(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af02      	add	r7, sp, #8
	uint8_t auxPos = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	717b      	strb	r3, [r7, #5]
	if(Display.isInit){
 8001d66:	4ba3      	ldr	r3, [pc, #652]	@ (8001ff4 <OLED_Print_Data_Task+0x298>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 812b 	beq.w	8001fc6 <OLED_Print_Data_Task+0x26a>
		switch(Display.state){
 8001d70:	4ba0      	ldr	r3, [pc, #640]	@ (8001ff4 <OLED_Print_Data_Task+0x298>)
 8001d72:	f893 3401 	ldrb.w	r3, [r3, #1025]	@ 0x401
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d023      	beq.n	8001dc2 <OLED_Print_Data_Task+0x66>
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	f300 8123 	bgt.w	8001fc6 <OLED_Print_Data_Task+0x26a>
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <OLED_Print_Data_Task+0x2c>
 8001d84:	2b01      	cmp	r3, #1
				Display.state = INPUTS;
			}
			break;
		case MENU:

			break;
 8001d86:	e11e      	b.n	8001fc6 <OLED_Print_Data_Task+0x26a>
			if(HAL_GetTick() - Display.timer > 2000){
 8001d88:	f001 feac 	bl	8003ae4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b99      	ldr	r3, [pc, #612]	@ (8001ff4 <OLED_Print_Data_Task+0x298>)
 8001d90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d9a:	f240 8111 	bls.w	8001fc0 <OLED_Print_Data_Task+0x264>
				Display_Fill(SSD1306_COLOR_BLACK);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff f988 	bl	80010b4 <Display_Fill>
				Display_DrawBitmap(0, 0, status_screen, 128, 64, SSD1306_COLOR_WHITE);
 8001da4:	2301      	movs	r3, #1
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2340      	movs	r3, #64	@ 0x40
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	4a92      	ldr	r2, [pc, #584]	@ (8001ff8 <OLED_Print_Data_Task+0x29c>)
 8001db0:	2100      	movs	r1, #0
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff fa02 	bl	80011bc <Display_DrawBitmap>
				Display.state = INPUTS;
 8001db8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ff4 <OLED_Print_Data_Task+0x298>)
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
			break;
 8001dc0:	e0fe      	b.n	8001fc0 <OLED_Print_Data_Task+0x264>
		case INPUTS:
			Display_DrawBitmap(2, 17, ADC_Blackout, 37, 44, SSD1306_COLOR_BLACK);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	232c      	movs	r3, #44	@ 0x2c
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2325      	movs	r3, #37	@ 0x25
 8001dcc:	4a8b      	ldr	r2, [pc, #556]	@ (8001ffc <OLED_Print_Data_Task+0x2a0>)
 8001dce:	2111      	movs	r1, #17
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	f7ff f9f3 	bl	80011bc <Display_DrawBitmap>
			for(uint8_t i = 0; i < 8; i++){
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	e03f      	b.n	8001e5c <OLED_Print_Data_Task+0x100>
				for(uint8_t j = 0; j < 45; j++){
 8001ddc:	2300      	movs	r3, #0
 8001dde:	71bb      	strb	r3, [r7, #6]
 8001de0:	e036      	b.n	8001e50 <OLED_Print_Data_Task+0xf4>
					if(Analog.value[i] <= ADC_to_Index[j]){
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4a86      	ldr	r2, [pc, #536]	@ (8002000 <OLED_Print_Data_Task+0x2a4>)
 8001de6:	3308      	adds	r3, #8
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	885a      	ldrh	r2, [r3, #2]
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	4984      	ldr	r1, [pc, #528]	@ (8002004 <OLED_Print_Data_Task+0x2a8>)
 8001df2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d827      	bhi.n	8001e4a <OLED_Print_Data_Task+0xee>
						auxPos = 2 + i * 3;
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	0052      	lsls	r2, r2, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3302      	adds	r3, #2
 8001e06:	717b      	strb	r3, [r7, #5]
						Display_DrawLine(auxPos, 61,  auxPos, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001e08:	797b      	ldrb	r3, [r7, #5]
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	497d      	ldr	r1, [pc, #500]	@ (8002008 <OLED_Print_Data_Task+0x2ac>)
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	4619      	mov	r1, r3
 8001e18:	2301      	movs	r3, #1
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	213d      	movs	r1, #61	@ 0x3d
 8001e20:	f7ff fad6 	bl	80013d0 <Display_DrawLine>
						Display_DrawLine(auxPos+1, 61,  auxPos+1, Index_to_Bar[j], SSD1306_COLOR_WHITE);
 8001e24:	797b      	ldrb	r3, [r7, #5]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b298      	uxth	r0, r3
 8001e2c:	797b      	ldrb	r3, [r7, #5]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	79bb      	ldrb	r3, [r7, #6]
 8001e36:	4974      	ldr	r1, [pc, #464]	@ (8002008 <OLED_Print_Data_Task+0x2ac>)
 8001e38:	5ccb      	ldrb	r3, [r1, r3]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	460b      	mov	r3, r1
 8001e42:	213d      	movs	r1, #61	@ 0x3d
 8001e44:	f7ff fac4 	bl	80013d0 <Display_DrawLine>
						break;
 8001e48:	e005      	b.n	8001e56 <OLED_Print_Data_Task+0xfa>
				for(uint8_t j = 0; j < 45; j++){
 8001e4a:	79bb      	ldrb	r3, [r7, #6]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	71bb      	strb	r3, [r7, #6]
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	2b2c      	cmp	r3, #44	@ 0x2c
 8001e54:	d9c5      	bls.n	8001de2 <OLED_Print_Data_Task+0x86>
			for(uint8_t i = 0; i < 8; i++){
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b07      	cmp	r3, #7
 8001e60:	d9bc      	bls.n	8001ddc <OLED_Print_Data_Task+0x80>
					}
				}
			}


			if(MPU6050.isInit){
 8001e62:	4b6a      	ldr	r3, [pc, #424]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001e64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80ab 	beq.w	8001fc4 <OLED_Print_Data_Task+0x268>
				MPU6050.Acc.x = (MPU6050.Acc.x >> 14) * 9.8f;
 8001e6e:	4b67      	ldr	r3, [pc, #412]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	139b      	asrs	r3, r3, #14
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002010 <OLED_Print_Data_Task+0x2b4>
 8001e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8c:	ee17 3a90 	vmov	r3, s15
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	4b5e      	ldr	r3, [pc, #376]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001e94:	801a      	strh	r2, [r3, #0]
				MPU6050.Acc.y = (MPU6050.Acc.y >> 14) * 9.8f;
 8001e96:	4b5d      	ldr	r3, [pc, #372]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001e98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e9c:	139b      	asrs	r3, r3, #14
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002010 <OLED_Print_Data_Task+0x2b4>
 8001eac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb4:	ee17 3a90 	vmov	r3, s15
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	4b54      	ldr	r3, [pc, #336]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001ebc:	805a      	strh	r2, [r3, #2]
				MPU6050.Acc.z = (MPU6050.Acc.z >> 14) * 9.8f;
 8001ebe:	4b53      	ldr	r3, [pc, #332]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001ec0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec4:	139b      	asrs	r3, r3, #14
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002010 <OLED_Print_Data_Task+0x2b4>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001edc:	ee17 3a90 	vmov	r3, s15
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001ee4:	809a      	strh	r2, [r3, #4]
				sprintf((char*)Display.auxString, "Ax:%d", MPU6050.Acc.x);
 8001ee6:	4b49      	ldr	r3, [pc, #292]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4949      	ldr	r1, [pc, #292]	@ (8002014 <OLED_Print_Data_Task+0x2b8>)
 8001ef0:	4849      	ldr	r0, [pc, #292]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001ef2:	f00e fcc5 	bl	8010880 <siprintf>
				Display_SetCursor(25, 17);
 8001ef6:	2111      	movs	r1, #17
 8001ef8:	2019      	movs	r0, #25
 8001efa:	f7ff f8c3 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001efe:	4a47      	ldr	r2, [pc, #284]	@ (800201c <OLED_Print_Data_Task+0x2c0>)
 8001f00:	2301      	movs	r3, #1
 8001f02:	ca06      	ldmia	r2, {r1, r2}
 8001f04:	4844      	ldr	r0, [pc, #272]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f06:	f7ff fa3d 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Ay:%d", MPU6050.Acc.y);
 8001f0a:	4b40      	ldr	r3, [pc, #256]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001f0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4943      	ldr	r1, [pc, #268]	@ (8002020 <OLED_Print_Data_Task+0x2c4>)
 8001f14:	4840      	ldr	r0, [pc, #256]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f16:	f00e fcb3 	bl	8010880 <siprintf>
				Display_SetCursor(25, 34);
 8001f1a:	2122      	movs	r1, #34	@ 0x22
 8001f1c:	2019      	movs	r0, #25
 8001f1e:	f7ff f8b1 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f22:	4a3e      	ldr	r2, [pc, #248]	@ (800201c <OLED_Print_Data_Task+0x2c0>)
 8001f24:	2301      	movs	r3, #1
 8001f26:	ca06      	ldmia	r2, {r1, r2}
 8001f28:	483b      	ldr	r0, [pc, #236]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f2a:	f7ff fa2b 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Az:%d", MPU6050.Acc.z);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001f30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f34:	461a      	mov	r2, r3
 8001f36:	493b      	ldr	r1, [pc, #236]	@ (8002024 <OLED_Print_Data_Task+0x2c8>)
 8001f38:	4837      	ldr	r0, [pc, #220]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f3a:	f00e fca1 	bl	8010880 <siprintf>
				Display_SetCursor(25, 51);
 8001f3e:	2133      	movs	r1, #51	@ 0x33
 8001f40:	2019      	movs	r0, #25
 8001f42:	f7ff f89f 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f46:	4a35      	ldr	r2, [pc, #212]	@ (800201c <OLED_Print_Data_Task+0x2c0>)
 8001f48:	2301      	movs	r3, #1
 8001f4a:	ca06      	ldmia	r2, {r1, r2}
 8001f4c:	4832      	ldr	r0, [pc, #200]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f4e:	f7ff fa19 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gx:%d", MPU6050.Gyro.x);
 8001f52:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001f54:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4933      	ldr	r1, [pc, #204]	@ (8002028 <OLED_Print_Data_Task+0x2cc>)
 8001f5c:	482e      	ldr	r0, [pc, #184]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f5e:	f00e fc8f 	bl	8010880 <siprintf>
				Display_SetCursor(73, 17);
 8001f62:	2111      	movs	r1, #17
 8001f64:	2049      	movs	r0, #73	@ 0x49
 8001f66:	f7ff f88d 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800201c <OLED_Print_Data_Task+0x2c0>)
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	ca06      	ldmia	r2, {r1, r2}
 8001f70:	4829      	ldr	r0, [pc, #164]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f72:	f7ff fa07 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gy:%d", MPU6050.Gyro.y);
 8001f76:	4b25      	ldr	r3, [pc, #148]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001f78:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	492b      	ldr	r1, [pc, #172]	@ (800202c <OLED_Print_Data_Task+0x2d0>)
 8001f80:	4825      	ldr	r0, [pc, #148]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f82:	f00e fc7d 	bl	8010880 <siprintf>
				Display_SetCursor(73, 34);
 8001f86:	2122      	movs	r1, #34	@ 0x22
 8001f88:	2049      	movs	r0, #73	@ 0x49
 8001f8a:	f7ff f87b 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001f8e:	4a23      	ldr	r2, [pc, #140]	@ (800201c <OLED_Print_Data_Task+0x2c0>)
 8001f90:	2301      	movs	r3, #1
 8001f92:	ca06      	ldmia	r2, {r1, r2}
 8001f94:	4820      	ldr	r0, [pc, #128]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001f96:	f7ff f9f5 	bl	8001384 <Display_WriteString>
				sprintf((char*)Display.auxString, "Gz:%d", MPU6050.Gyro.z);
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <OLED_Print_Data_Task+0x2b0>)
 8001f9c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4923      	ldr	r1, [pc, #140]	@ (8002030 <OLED_Print_Data_Task+0x2d4>)
 8001fa4:	481c      	ldr	r0, [pc, #112]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001fa6:	f00e fc6b 	bl	8010880 <siprintf>
				Display_SetCursor(73, 51);
 8001faa:	2133      	movs	r1, #51	@ 0x33
 8001fac:	2049      	movs	r0, #73	@ 0x49
 8001fae:	f7ff f869 	bl	8001084 <Display_SetCursor>
				Display_WriteString((char*)Display.auxString, Font_7x10, SSD1306_COLOR_WHITE);
 8001fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800201c <OLED_Print_Data_Task+0x2c0>)
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	ca06      	ldmia	r2, {r1, r2}
 8001fb8:	4817      	ldr	r0, [pc, #92]	@ (8002018 <OLED_Print_Data_Task+0x2bc>)
 8001fba:	f7ff f9e3 	bl	8001384 <Display_WriteString>
			}

			break;
 8001fbe:	e001      	b.n	8001fc4 <OLED_Print_Data_Task+0x268>
			break;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <OLED_Print_Data_Task+0x26a>
			break;
 8001fc4:	bf00      	nop
		}
	}

	is30s--;
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <OLED_Print_Data_Task+0x2d8>)
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <OLED_Print_Data_Task+0x2d8>)
 8001fd0:	801a      	strh	r2, [r3, #0]
	if(!is30s){
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <OLED_Print_Data_Task+0x2d8>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <OLED_Print_Data_Task+0x28a>
		is30s = 300;
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <OLED_Print_Data_Task+0x2d8>)
 8001fdc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe0:	801a      	strh	r2, [r3, #0]
		BateryLevel_Set();
 8001fe2:	f000 f829 	bl	8002038 <BateryLevel_Set>
	}

	Display_I2C_Refresh_Ready(TRUE);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff f83c 	bl	8001064 <Display_I2C_Refresh_Ready>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000b5c 	.word	0x20000b5c
 8001ff8:	08011854 	.word	0x08011854
 8001ffc:	08011378 	.word	0x08011378
 8002000:	20000f70 	.word	0x20000f70
 8002004:	0801131c 	.word	0x0801131c
 8002008:	080112ec 	.word	0x080112ec
 800200c:	20000b14 	.word	0x20000b14
 8002010:	411ccccd 	.word	0x411ccccd
 8002014:	080111d8 	.word	0x080111d8
 8002018:	20000f64 	.word	0x20000f64
 800201c:	20000000 	.word	0x20000000
 8002020:	080111e0 	.word	0x080111e0
 8002024:	080111e8 	.word	0x080111e8
 8002028:	080111f0 	.word	0x080111f0
 800202c:	080111f8 	.word	0x080111f8
 8002030:	08011200 	.word	0x08011200
 8002034:	2000000c 	.word	0x2000000c

08002038 <BateryLevel_Set>:

void BateryLevel_Set(){
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af02      	add	r7, sp, #8
	Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_BLACK);
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2309      	movs	r3, #9
 8002044:	2206      	movs	r2, #6
 8002046:	2104      	movs	r1, #4
 8002048:	2003      	movs	r0, #3
 800204a:	f7ff fa6f 	bl	800152c <Display_DrawFilledRectangle>
	if(Analog.value[8] >= 3900){
 800204e:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <BateryLevel_Set+0x94>)
 8002050:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002052:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8002056:	4293      	cmp	r3, r2
 8002058:	d908      	bls.n	800206c <BateryLevel_Set+0x34>
		Display_DrawFilledRectangle(3, 4, 6, 9, SSD1306_COLOR_WHITE);
 800205a:	2301      	movs	r3, #1
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2309      	movs	r3, #9
 8002060:	2206      	movs	r2, #6
 8002062:	2104      	movs	r1, #4
 8002064:	2003      	movs	r0, #3
 8002066:	f7ff fa61 	bl	800152c <Display_DrawFilledRectangle>
	}else if(Analog.value[8] >= 2047){
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
	}else if(Analog.value[8] >= 1023){
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
	}
}
 800206a:	e02b      	b.n	80020c4 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 3000){
 800206c:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <BateryLevel_Set+0x94>)
 800206e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002070:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002074:	4293      	cmp	r3, r2
 8002076:	d908      	bls.n	800208a <BateryLevel_Set+0x52>
		Display_DrawFilledRectangle(3, 6, 6, 7, SSD1306_COLOR_WHITE);
 8002078:	2301      	movs	r3, #1
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2307      	movs	r3, #7
 800207e:	2206      	movs	r2, #6
 8002080:	2106      	movs	r1, #6
 8002082:	2003      	movs	r0, #3
 8002084:	f7ff fa52 	bl	800152c <Display_DrawFilledRectangle>
}
 8002088:	e01c      	b.n	80020c4 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 2047){
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <BateryLevel_Set+0x94>)
 800208c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800208e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8002092:	4293      	cmp	r3, r2
 8002094:	d908      	bls.n	80020a8 <BateryLevel_Set+0x70>
		Display_DrawFilledRectangle(3, 8, 6, 5, SSD1306_COLOR_WHITE);
 8002096:	2301      	movs	r3, #1
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2305      	movs	r3, #5
 800209c:	2206      	movs	r2, #6
 800209e:	2108      	movs	r1, #8
 80020a0:	2003      	movs	r0, #3
 80020a2:	f7ff fa43 	bl	800152c <Display_DrawFilledRectangle>
}
 80020a6:	e00d      	b.n	80020c4 <BateryLevel_Set+0x8c>
	}else if(Analog.value[8] >= 1023){
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <BateryLevel_Set+0x94>)
 80020aa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80020ac:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d907      	bls.n	80020c4 <BateryLevel_Set+0x8c>
		Display_DrawFilledRectangle(3, 11, 6, 2, SSD1306_COLOR_WHITE);
 80020b4:	2301      	movs	r3, #1
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2302      	movs	r3, #2
 80020ba:	2206      	movs	r2, #6
 80020bc:	210b      	movs	r1, #11
 80020be:	2003      	movs	r0, #3
 80020c0:	f7ff fa34 	bl	800152c <Display_DrawFilledRectangle>
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000f70 	.word	0x20000f70

080020d0 <decodeOn_USB>:

void decodeOn_USB(s_commData *data){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	switch(RXBUF[RXCMD]){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	3302      	adds	r3, #2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80020e6:	2bf1      	cmp	r3, #241	@ 0xf1
 80020e8:	f000 81c9 	beq.w	800247e <decodeOn_USB+0x3ae>
 80020ec:	2bf1      	cmp	r3, #241	@ 0xf1
 80020ee:	f300 81bf 	bgt.w	8002470 <decodeOn_USB+0x3a0>
 80020f2:	2bf0      	cmp	r3, #240	@ 0xf0
 80020f4:	d036      	beq.n	8002164 <decodeOn_USB+0x94>
 80020f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80020f8:	f300 81ba 	bgt.w	8002470 <decodeOn_USB+0x3a0>
 80020fc:	2bb1      	cmp	r3, #177	@ 0xb1
 80020fe:	dc2d      	bgt.n	800215c <decodeOn_USB+0x8c>
 8002100:	2ba0      	cmp	r3, #160	@ 0xa0
 8002102:	f2c0 81b5 	blt.w	8002470 <decodeOn_USB+0x3a0>
 8002106:	3ba0      	subs	r3, #160	@ 0xa0
 8002108:	2b11      	cmp	r3, #17
 800210a:	f200 81b1 	bhi.w	8002470 <decodeOn_USB+0x3a0>
 800210e:	a201      	add	r2, pc, #4	@ (adr r2, 8002114 <decodeOn_USB+0x44>)
 8002110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002114:	0800217f 	.word	0x0800217f
 8002118:	080021f5 	.word	0x080021f5
 800211c:	0800224f 	.word	0x0800224f
 8002120:	080022db 	.word	0x080022db
 8002124:	08002379 	.word	0x08002379
 8002128:	08002471 	.word	0x08002471
 800212c:	08002471 	.word	0x08002471
 8002130:	08002471 	.word	0x08002471
 8002134:	08002471 	.word	0x08002471
 8002138:	08002471 	.word	0x08002471
 800213c:	08002471 	.word	0x08002471
 8002140:	08002471 	.word	0x08002471
 8002144:	08002471 	.word	0x08002471
 8002148:	08002471 	.word	0x08002471
 800214c:	08002471 	.word	0x08002471
 8002150:	08002471 	.word	0x08002471
 8002154:	08002471 	.word	0x08002471
 8002158:	08002483 	.word	0x08002483
 800215c:	2bde      	cmp	r3, #222	@ 0xde
 800215e:	f000 8192 	beq.w	8002486 <decodeOn_USB+0x3b6>
 8002162:	e185      	b.n	8002470 <decodeOn_USB+0x3a0>
	case GETALIVE:
		data->auxBuffer[0] = ACK;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	220d      	movs	r2, #13
 8002168:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		comm_sendCMD(data, GETALIVE, &data->auxBuffer[0], 1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002172:	2301      	movs	r3, #1
 8002174:	21f0      	movs	r1, #240	@ 0xf0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fcf8 	bl	8001b6c <comm_sendCMD>
		break;
 800217c:	e184      	b.n	8002488 <decodeOn_USB+0x3b8>
	case FIRMWARE:
		break;
	case USERTEXT:
		break;
	case ADCSINGLE:
		if(RXBUF[RXCMD + 1] <= 8 && RXBUF[RXCMD + 1] >= 0){
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	785b      	ldrb	r3, [r3, #1]
 8002182:	3303      	adds	r3, #3
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800218c:	2b08      	cmp	r3, #8
 800218e:	d82a      	bhi.n	80021e6 <decodeOn_USB+0x116>
			decom.ui16[0] = Analog.value[RXBUF[RXCMD + 1]];
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	3303      	adds	r3, #3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800219e:	4aa8      	ldr	r2, [pc, #672]	@ (8002440 <decodeOn_USB+0x370>)
 80021a0:	3308      	adds	r3, #8
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	885a      	ldrh	r2, [r3, #2]
 80021a8:	4ba6      	ldr	r3, [pc, #664]	@ (8002444 <decodeOn_USB+0x374>)
 80021aa:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = RXBUF[RXCMD + 1];
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	3303      	adds	r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80021c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002444 <decodeOn_USB+0x374>)
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 80021ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002444 <decodeOn_USB+0x374>)
 80021cc:	785a      	ldrb	r2, [r3, #1]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, ADCSINGLE, &data->auxBuffer[0], 3);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80021da:	2303      	movs	r3, #3
 80021dc:	21a0      	movs	r1, #160	@ 0xa0
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fcc4 	bl	8001b6c <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
		}
		break;
 80021e4:	e150      	b.n	8002488 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ADC", 6);
 80021e6:	2306      	movs	r3, #6
 80021e8:	4a97      	ldr	r2, [pc, #604]	@ (8002448 <decodeOn_USB+0x378>)
 80021ea:	21ee      	movs	r1, #238	@ 0xee
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff fcbd 	bl	8001b6c <comm_sendCMD>
		break;
 80021f2:	e149      	b.n	8002488 <decodeOn_USB+0x3b8>
	case ADCBLOCK:
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	e01d      	b.n	8002236 <decodeOn_USB+0x166>
			decom.ui16[0] = Analog.value[i];
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	4a90      	ldr	r2, [pc, #576]	@ (8002440 <decodeOn_USB+0x370>)
 80021fe:	3308      	adds	r3, #8
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	885a      	ldrh	r2, [r3, #2]
 8002206:	4b8f      	ldr	r3, [pc, #572]	@ (8002444 <decodeOn_USB+0x374>)
 8002208:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[i*2] = decom.ui8[0];
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4a8d      	ldr	r2, [pc, #564]	@ (8002444 <decodeOn_USB+0x374>)
 8002210:	7811      	ldrb	r1, [r2, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	460a      	mov	r2, r1
 8002218:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[i*2+1] = decom.ui8[1];
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	3301      	adds	r3, #1
 8002222:	4a88      	ldr	r2, [pc, #544]	@ (8002444 <decodeOn_USB+0x374>)
 8002224:	7851      	ldrb	r1, [r2, #1]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	460a      	mov	r2, r1
 800222c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		for(uint8_t i = 0; i < ADC_NUM_SENSORS; i++){
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3301      	adds	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d9de      	bls.n	80021fa <decodeOn_USB+0x12a>
		}
		comm_sendCMD(data, ADCBLOCK, &data->auxBuffer[0], 17);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002242:	2311      	movs	r3, #17
 8002244:	21a1      	movs	r1, #161	@ 0xa1
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fc90 	bl	8001b6c <comm_sendCMD>
		break;
 800224c:	e11c      	b.n	8002488 <decodeOn_USB+0x3b8>
	case DEBUGER:

		break;
	case SETMOTOR:
		if(RXBUF[RXCMD + 1] == MOTOR_L){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	785b      	ldrb	r3, [r3, #1]
 8002252:	3303      	adds	r3, #3
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800225c:	2b00      	cmp	r3, #0
 800225e:	d115      	bne.n	800228c <decodeOn_USB+0x1bc>
			Motor_Set_Speed(&MotorL, RXBUF[RXCMD + 2]);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	3304      	adds	r3, #4
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800226e:	b25b      	sxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	4876      	ldr	r0, [pc, #472]	@ (800244c <decodeOn_USB+0x37c>)
 8002274:	f7ff fa36 	bl	80016e4 <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 8002278:	4b75      	ldr	r3, [pc, #468]	@ (8002450 <decodeOn_USB+0x380>)
 800227a:	220d      	movs	r2, #13
 800227c:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 8002280:	2301      	movs	r3, #1
 8002282:	4a74      	ldr	r2, [pc, #464]	@ (8002454 <decodeOn_USB+0x384>)
 8002284:	21a2      	movs	r1, #162	@ 0xa2
 8002286:	4872      	ldr	r0, [pc, #456]	@ (8002450 <decodeOn_USB+0x380>)
 8002288:	f7ff fc70 	bl	8001b6c <comm_sendCMD>
		}
		if(RXBUF[RXCMD + 1] == MOTOR_R){
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	3303      	adds	r3, #3
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800229a:	2b01      	cmp	r3, #1
 800229c:	d116      	bne.n	80022cc <decodeOn_USB+0x1fc>
			Motor_Set_Speed(&MotorR, RXBUF[RXCMD + 2]);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	3304      	adds	r3, #4
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	4869      	ldr	r0, [pc, #420]	@ (8002458 <decodeOn_USB+0x388>)
 80022b2:	f7ff fa17 	bl	80016e4 <Motor_Set_Speed>
			USB.data.auxBuffer[0] = ACK;
 80022b6:	4b66      	ldr	r3, [pc, #408]	@ (8002450 <decodeOn_USB+0x380>)
 80022b8:	220d      	movs	r2, #13
 80022ba:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			comm_sendCMD(&USB.data, SETMOTOR, &USB.data.auxBuffer[0], 1);
 80022be:	2301      	movs	r3, #1
 80022c0:	4a64      	ldr	r2, [pc, #400]	@ (8002454 <decodeOn_USB+0x384>)
 80022c2:	21a2      	movs	r1, #162	@ 0xa2
 80022c4:	4862      	ldr	r0, [pc, #392]	@ (8002450 <decodeOn_USB+0x380>)
 80022c6:	f7ff fc51 	bl	8001b6c <comm_sendCMD>
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
		}
		break;
 80022ca:	e0dd      	b.n	8002488 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO MOTOR", 8);
 80022cc:	2308      	movs	r3, #8
 80022ce:	4a63      	ldr	r2, [pc, #396]	@ (800245c <decodeOn_USB+0x38c>)
 80022d0:	21ee      	movs	r1, #238	@ 0xee
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fc4a 	bl	8001b6c <comm_sendCMD>
		break;
 80022d8:	e0d6      	b.n	8002488 <decodeOn_USB+0x3b8>
	case GET_ENCODER:
		if(RXBUF[RXCMD + 1] == ENCODER_L){
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	3303      	adds	r3, #3
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d11a      	bne.n	8002322 <decodeOn_USB+0x252>
			decom.ui16[0] = EncoderL.pps;
 80022ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002460 <decodeOn_USB+0x390>)
 80022ee:	891a      	ldrh	r2, [r3, #8]
 80022f0:	4b54      	ldr	r3, [pc, #336]	@ (8002444 <decodeOn_USB+0x374>)
 80022f2:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_L;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 80022fc:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <decodeOn_USB+0x374>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 8002306:	4b4f      	ldr	r3, [pc, #316]	@ (8002444 <decodeOn_USB+0x374>)
 8002308:	785a      	ldrb	r2, [r3, #1]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002316:	2303      	movs	r3, #3
 8002318:	21a3      	movs	r1, #163	@ 0xa3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fc26 	bl	8001b6c <comm_sendCMD>
			data->auxBuffer[2] = decom.ui8[1];
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
		}else{
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
		}
		break;
 8002320:	e0b2      	b.n	8002488 <decodeOn_USB+0x3b8>
		}else if(RXBUF[RXCMD + 1] == ENCODER_R){
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	3303      	adds	r3, #3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8002330:	2b01      	cmp	r3, #1
 8002332:	d11a      	bne.n	800236a <decodeOn_USB+0x29a>
			decom.ui16[0] = EncoderR.pps;
 8002334:	4b4b      	ldr	r3, [pc, #300]	@ (8002464 <decodeOn_USB+0x394>)
 8002336:	891a      	ldrh	r2, [r3, #8]
 8002338:	4b42      	ldr	r3, [pc, #264]	@ (8002444 <decodeOn_USB+0x374>)
 800233a:	801a      	strh	r2, [r3, #0]
			data->auxBuffer[0] = ENCODER_R;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
			data->auxBuffer[1] = decom.ui8[0];
 8002344:	4b3f      	ldr	r3, [pc, #252]	@ (8002444 <decodeOn_USB+0x374>)
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
			data->auxBuffer[2] = decom.ui8[1];
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <decodeOn_USB+0x374>)
 8002350:	785a      	ldrb	r2, [r3, #1]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
			comm_sendCMD(data, GET_ENCODER, &data->auxBuffer[0], 3);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800235e:	2303      	movs	r3, #3
 8002360:	21a3      	movs	r1, #163	@ 0xa3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fc02 	bl	8001b6c <comm_sendCMD>
		break;
 8002368:	e08e      	b.n	8002488 <decodeOn_USB+0x3b8>
			comm_sendCMD(data, SYSERROR, (uint8_t*)"NO ENCODER", 10);
 800236a:	230a      	movs	r3, #10
 800236c:	4a3e      	ldr	r2, [pc, #248]	@ (8002468 <decodeOn_USB+0x398>)
 800236e:	21ee      	movs	r1, #238	@ 0xee
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff fbfb 	bl	8001b6c <comm_sendCMD>
		break;
 8002376:	e087      	b.n	8002488 <decodeOn_USB+0x3b8>
	case MPUBLOCK:
		decom.i16[0] = MPU6050.Acc.x;
 8002378:	4b3c      	ldr	r3, [pc, #240]	@ (800246c <decodeOn_USB+0x39c>)
 800237a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800237e:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <decodeOn_USB+0x374>)
 8002380:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[0] = decom.ui8[0];
 8002382:	4b30      	ldr	r3, [pc, #192]	@ (8002444 <decodeOn_USB+0x374>)
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f883 2210 	strb.w	r2, [r3, #528]	@ 0x210
		data->auxBuffer[1] = decom.ui8[1];
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <decodeOn_USB+0x374>)
 800238e:	785a      	ldrb	r2, [r3, #1]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f883 2211 	strb.w	r2, [r3, #529]	@ 0x211
		decom.i16[0] = MPU6050.Acc.y;
 8002396:	4b35      	ldr	r3, [pc, #212]	@ (800246c <decodeOn_USB+0x39c>)
 8002398:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800239c:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <decodeOn_USB+0x374>)
 800239e:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[2] = decom.ui8[0];
 80023a0:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <decodeOn_USB+0x374>)
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f883 2212 	strb.w	r2, [r3, #530]	@ 0x212
		data->auxBuffer[3] = decom.ui8[1];
 80023aa:	4b26      	ldr	r3, [pc, #152]	@ (8002444 <decodeOn_USB+0x374>)
 80023ac:	785a      	ldrb	r2, [r3, #1]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
		decom.i16[0] = MPU6050.Acc.z;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <decodeOn_USB+0x39c>)
 80023b6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <decodeOn_USB+0x374>)
 80023bc:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[4] = decom.ui8[0];
 80023be:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <decodeOn_USB+0x374>)
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f883 2214 	strb.w	r2, [r3, #532]	@ 0x214
		data->auxBuffer[5] = decom.ui8[1];
 80023c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <decodeOn_USB+0x374>)
 80023ca:	785a      	ldrb	r2, [r3, #1]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f883 2215 	strb.w	r2, [r3, #533]	@ 0x215
		decom.i16[0] = MPU6050.Gyro.x;
 80023d2:	4b26      	ldr	r3, [pc, #152]	@ (800246c <decodeOn_USB+0x39c>)
 80023d4:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <decodeOn_USB+0x374>)
 80023da:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[6] = decom.ui8[0];
 80023dc:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <decodeOn_USB+0x374>)
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f883 2216 	strb.w	r2, [r3, #534]	@ 0x216
		data->auxBuffer[7] = decom.ui8[1];
 80023e6:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <decodeOn_USB+0x374>)
 80023e8:	785a      	ldrb	r2, [r3, #1]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f883 2217 	strb.w	r2, [r3, #535]	@ 0x217
		decom.i16[0] = MPU6050.Gyro.y;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <decodeOn_USB+0x39c>)
 80023f2:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <decodeOn_USB+0x374>)
 80023f8:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[8] = decom.ui8[0];
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <decodeOn_USB+0x374>)
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		data->auxBuffer[9] = decom.ui8[1];
 8002404:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <decodeOn_USB+0x374>)
 8002406:	785a      	ldrb	r2, [r3, #1]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
		decom.i16[0] = MPU6050.Gyro.z;
 800240e:	4b17      	ldr	r3, [pc, #92]	@ (800246c <decodeOn_USB+0x39c>)
 8002410:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <decodeOn_USB+0x374>)
 8002416:	801a      	strh	r2, [r3, #0]
		data->auxBuffer[10] = decom.ui8[0];
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <decodeOn_USB+0x374>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
		data->auxBuffer[11] = decom.ui8[1];
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <decodeOn_USB+0x374>)
 8002424:	785a      	ldrb	r2, [r3, #1]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
		comm_sendCMD(data, MPUBLOCK, data->auxBuffer, 12);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8002432:	230c      	movs	r3, #12
 8002434:	21a4      	movs	r1, #164	@ 0xa4
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fb98 	bl	8001b6c <comm_sendCMD>
		break;
 800243c:	e024      	b.n	8002488 <decodeOn_USB+0x3b8>
 800243e:	bf00      	nop
 8002440:	20000f70 	.word	0x20000f70
 8002444:	20000ac4 	.word	0x20000ac4
 8002448:	08011208 	.word	0x08011208
 800244c:	20000acc 	.word	0x20000acc
 8002450:	20000f94 	.word	0x20000f94
 8002454:	200011a4 	.word	0x200011a4
 8002458:	20000ae4 	.word	0x20000ae4
 800245c:	08011210 	.word	0x08011210
 8002460:	20000afc 	.word	0x20000afc
 8002464:	20000b08 	.word	0x20000b08
 8002468:	0801121c 	.word	0x0801121c
 800246c:	20000b14 	.word	0x20000b14
	default:
		comm_sendCMD(data, SYSERROR, (uint8_t*)"NO CMD", 6);
 8002470:	2306      	movs	r3, #6
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <decodeOn_USB+0x3c0>)
 8002474:	21ee      	movs	r1, #238	@ 0xee
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff fb78 	bl	8001b6c <comm_sendCMD>
		break;
 800247c:	e004      	b.n	8002488 <decodeOn_USB+0x3b8>
		break;
 800247e:	bf00      	nop
 8002480:	e002      	b.n	8002488 <decodeOn_USB+0x3b8>
		break;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <decodeOn_USB+0x3b8>
		break;
 8002486:	bf00      	nop
	}
}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	08011228 	.word	0x08011228

08002494 <onKeyChangeState>:

void onKeyChangeState(e_Estados value){
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]

}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <task_10ms>:

void task_10ms(){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	IS10MS = FALSE;
 80024b0:	4a27      	ldr	r2, [pc, #156]	@ (8002550 <task_10ms+0xa4>)
 80024b2:	7813      	ldrb	r3, [r2, #0]
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	7013      	strb	r3, [r2, #0]

	is100ms1--;
 80024ba:	4b26      	ldr	r3, [pc, #152]	@ (8002554 <task_10ms+0xa8>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3b01      	subs	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b24      	ldr	r3, [pc, #144]	@ (8002554 <task_10ms+0xa8>)
 80024c4:	701a      	strb	r2, [r3, #0]
	if(!is100ms1){
 80024c6:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <task_10ms+0xa8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11a      	bne.n	8002504 <task_10ms+0x58>
		is100ms1 = 10;
 80024ce:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <task_10ms+0xa8>)
 80024d0:	220a      	movs	r2, #10
 80024d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80024d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024d8:	481f      	ldr	r0, [pc, #124]	@ (8002558 <task_10ms+0xac>)
 80024da:	f002 ff32 	bl	8005342 <HAL_GPIO_TogglePin>
		is1s--;
 80024de:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <task_10ms+0xb0>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <task_10ms+0xb0>)
 80024e8:	701a      	strb	r2, [r3, #0]
		if(!is1s){
 80024ea:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <task_10ms+0xb0>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d108      	bne.n	8002504 <task_10ms+0x58>
			is1s = 10;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <task_10ms+0xb0>)
 80024f4:	220a      	movs	r2, #10
 80024f6:	701a      	strb	r2, [r3, #0]
			Encoder_1s_Elapsed(&EncoderL);
 80024f8:	4819      	ldr	r0, [pc, #100]	@ (8002560 <task_10ms+0xb4>)
 80024fa:	f7ff f8c3 	bl	8001684 <Encoder_1s_Elapsed>
			Encoder_1s_Elapsed(&EncoderR);
 80024fe:	4819      	ldr	r0, [pc, #100]	@ (8002564 <task_10ms+0xb8>)
 8002500:	f7ff f8c0 	bl	8001684 <Encoder_1s_Elapsed>
		}
	}

	Display.refreshCounter--;
 8002504:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <task_10ms+0xbc>)
 8002506:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 800250a:	3b01      	subs	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <task_10ms+0xbc>)
 8002510:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	if(!Display.refreshCounter){ //Tasa de refresco variable
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <task_10ms+0xbc>)
 8002516:	f893 3413 	ldrb.w	r3, [r3, #1043]	@ 0x413
 800251a:	2b00      	cmp	r3, #0
 800251c:	d107      	bne.n	800252e <task_10ms+0x82>
		Display.refreshCounter = Display.refreshRate;
 800251e:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <task_10ms+0xbc>)
 8002520:	f893 2412 	ldrb.w	r2, [r3, #1042]	@ 0x412
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <task_10ms+0xbc>)
 8002526:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
		OLED_Print_Data_Task();
 800252a:	f7ff fc17 	bl	8001d5c <OLED_Print_Data_Task>
	}

	Debouncer_Task();
 800252e:	f7fe f96d 	bl	800080c <Debouncer_Task>
	Motor_Break_Timeout(&MotorL);
 8002532:	480e      	ldr	r0, [pc, #56]	@ (800256c <task_10ms+0xc0>)
 8002534:	f7ff f96e 	bl	8001814 <Motor_Break_Timeout>
	Motor_Break_Timeout(&MotorR);
 8002538:	480d      	ldr	r0, [pc, #52]	@ (8002570 <task_10ms+0xc4>)
 800253a:	f7ff f96b 	bl	8001814 <Motor_Break_Timeout>
	Encoder_Task(&EncoderL);
 800253e:	4808      	ldr	r0, [pc, #32]	@ (8002560 <task_10ms+0xb4>)
 8002540:	f7ff f860 	bl	8001604 <Encoder_Task>
	Encoder_Task(&EncoderR);
 8002544:	4807      	ldr	r0, [pc, #28]	@ (8002564 <task_10ms+0xb8>)
 8002546:	f7ff f85d 	bl	8001604 <Encoder_Task>
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000ac0 	.word	0x20000ac0
 8002554:	20000008 	.word	0x20000008
 8002558:	40020800 	.word	0x40020800
 800255c:	20000009 	.word	0x20000009
 8002560:	20000afc 	.word	0x20000afc
 8002564:	20000b08 	.word	0x20000b08
 8002568:	20000b5c 	.word	0x20000b5c
 800256c:	20000acc 	.word	0x20000acc
 8002570:	20000ae4 	.word	0x20000ae4

08002574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002578:	f001 fa4e 	bl	8003a18 <HAL_Init>

  /* USER CODE BEGIN Init */
  MPU6050.isInit = FALSE;
 800257c:	4b39      	ldr	r3, [pc, #228]	@ (8002664 <main+0xf0>)
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  Display.isInit = FALSE;
 8002584:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <main+0xf4>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
  Display.state = INIT;
 800258a:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <main+0xf4>)
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002592:	f000 f893 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002596:	f000 fb25 	bl	8002be4 <MX_GPIO_Init>
  MX_DMA_Init();
 800259a:	f000 fae5 	bl	8002b68 <MX_DMA_Init>
  MX_ADC1_Init();
 800259e:	f000 f8f7 	bl	8002790 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80025a2:	f00d fbf1 	bl	800fd88 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80025a6:	f000 f9e3 	bl	8002970 <MX_TIM1_Init>
  MX_I2C1_Init();
 80025aa:	f000 f9b3 	bl	8002914 <MX_I2C1_Init>
  MX_TIM3_Init();
 80025ae:	f000 fa2f 	bl	8002a10 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80025b2:	f000 faaf 	bl	8002b14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */
  Comm_Init(&USB.data, &decodeOn_USB, &writeOn_USB);
 80025b6:	4a2d      	ldr	r2, [pc, #180]	@ (800266c <main+0xf8>)
 80025b8:	492d      	ldr	r1, [pc, #180]	@ (8002670 <main+0xfc>)
 80025ba:	482e      	ldr	r0, [pc, #184]	@ (8002674 <main+0x100>)
 80025bc:	f7ff f945 	bl	800184a <Comm_Init>
  CDC_Attach_Rx(&dataRxOn_USB);
 80025c0:	482d      	ldr	r0, [pc, #180]	@ (8002678 <main+0x104>)
 80025c2:	f00d fd33 	bl	801002c <CDC_Attach_Rx>

  HAL_UART_Receive_IT(&huart1, &dataRx, 1);
 80025c6:	2201      	movs	r2, #1
 80025c8:	492c      	ldr	r1, [pc, #176]	@ (800267c <main+0x108>)
 80025ca:	482d      	ldr	r0, [pc, #180]	@ (8002680 <main+0x10c>)
 80025cc:	f009 f99e 	bl	800b90c <HAL_UART_Receive_IT>
  /* FIN INICIALIZACIÓN DE PROTOCOLO MEDIANTE USB */

  /* INICIALIZACIÓN DE USER KEY Y DEBOUNCE */
  Debounce_Init();
 80025d0:	f7fe f8b4 	bl	800073c <Debounce_Init>
  key = Debounce_Add(&KEY_Read_Value, &onKeyChangeState);
 80025d4:	492b      	ldr	r1, [pc, #172]	@ (8002684 <main+0x110>)
 80025d6:	482c      	ldr	r0, [pc, #176]	@ (8002688 <main+0x114>)
 80025d8:	f7fe f8e4 	bl	80007a4 <Debounce_Add>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b2a      	ldr	r3, [pc, #168]	@ (800268c <main+0x118>)
 80025e2:	701a      	strb	r2, [r3, #0]
  /* FIN INICIALIZACIÓN DE USER KEY Y DEBOUNCE */

  Init_Timing();
 80025e4:	f000 fbe0 	bl	8002da8 <Init_Timing>


  Init_MPU6050();
 80025e8:	f000 fc22 	bl	8002e30 <Init_MPU6050>
	  }
  }*/
  /* FIN INICIALIZACIÓN DISPLAY */


  Init_Display();
 80025ec:	f000 fc58 	bl	8002ea0 <Init_Display>

  /* INICIALIZACIÓN DE MOTORES Y ENCODERS */
  Motor_Init(&MotorL, &Motor_Left_SetPWM , &Motor_Left_SetPins , htim3.Instance->ARR);
 80025f0:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <main+0x11c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4a26      	ldr	r2, [pc, #152]	@ (8002694 <main+0x120>)
 80025fa:	4927      	ldr	r1, [pc, #156]	@ (8002698 <main+0x124>)
 80025fc:	4827      	ldr	r0, [pc, #156]	@ (800269c <main+0x128>)
 80025fe:	f7ff f852 	bl	80016a6 <Motor_Init>
  Motor_Init(&MotorR, &Motor_Right_SetPWM, &Motor_Right_SetPins, htim3.Instance->ARR);
 8002602:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <main+0x11c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	b29b      	uxth	r3, r3
 800260a:	4a25      	ldr	r2, [pc, #148]	@ (80026a0 <main+0x12c>)
 800260c:	4925      	ldr	r1, [pc, #148]	@ (80026a4 <main+0x130>)
 800260e:	4826      	ldr	r0, [pc, #152]	@ (80026a8 <main+0x134>)
 8002610:	f7ff f849 	bl	80016a6 <Motor_Init>

  Encoder_Init(&EncoderL, ENCODER_FASTPPS_COUNTER_10MS);
 8002614:	210a      	movs	r1, #10
 8002616:	4825      	ldr	r0, [pc, #148]	@ (80026ac <main+0x138>)
 8002618:	f7fe ffd5 	bl	80015c6 <Encoder_Init>
  Encoder_Init(&EncoderR, ENCODER_FASTPPS_COUNTER_10MS);
 800261c:	210a      	movs	r1, #10
 800261e:	4824      	ldr	r0, [pc, #144]	@ (80026b0 <main+0x13c>)
 8002620:	f7fe ffd1 	bl	80015c6 <Encoder_Init>
  /* FIN INICIALIZACIÓN DE MOTORES Y ENCODERS */

  Car.state = IDLE;
 8002624:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <main+0x140>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* USER TASK */
	Comm_Task(&USB.data);
 800262a:	4812      	ldr	r0, [pc, #72]	@ (8002674 <main+0x100>)
 800262c:	f7ff f941 	bl	80018b2 <Comm_Task>
	Display_UpdateScreen_Task();
 8002630:	f7fe fc9c 	bl	8000f6c <Display_UpdateScreen_Task>
	  /* END USER TASK */

	if(IS10MS){
 8002634:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <main+0x144>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <main+0xd2>
		task_10ms();
 8002642:	f7ff ff33 	bl	80024ac <task_10ms>
	}

	switch(Car.state){
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <main+0x140>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d005      	beq.n	800265a <main+0xe6>
 800264e:	2b02      	cmp	r3, #2
 8002650:	dceb      	bgt.n	800262a <main+0xb6>
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <main+0xea>
 8002656:	2b01      	cmp	r3, #1
	case IDLE:

		break;
	case FOLLOW_LINE:

		break;
 8002658:	e002      	b.n	8002660 <main+0xec>
	case GO_FROM_TO:

		break;
 800265a:	bf00      	nop
 800265c:	e7e5      	b.n	800262a <main+0xb6>
		break;
 800265e:	bf00      	nop
	Comm_Task(&USB.data);
 8002660:	e7e3      	b.n	800262a <main+0xb6>
 8002662:	bf00      	nop
 8002664:	20000b14 	.word	0x20000b14
 8002668:	20000b5c 	.word	0x20000b5c
 800266c:	08003195 	.word	0x08003195
 8002670:	080020d1 	.word	0x080020d1
 8002674:	20000f94 	.word	0x20000f94
 8002678:	08003209 	.word	0x08003209
 800267c:	200011c9 	.word	0x200011c9
 8002680:	20000a78 	.word	0x20000a78
 8002684:	08002495 	.word	0x08002495
 8002688:	0800317d 	.word	0x0800317d
 800268c:	20000ac8 	.word	0x20000ac8
 8002690:	20000a30 	.word	0x20000a30
 8002694:	08003261 	.word	0x08003261
 8002698:	080032d5 	.word	0x080032d5
 800269c:	20000acc 	.word	0x20000acc
 80026a0:	08003299 	.word	0x08003299
 80026a4:	080032f9 	.word	0x080032f9
 80026a8:	20000ae4 	.word	0x20000ae4
 80026ac:	20000afc 	.word	0x20000afc
 80026b0:	20000b08 	.word	0x20000b08
 80026b4:	200011c8 	.word	0x200011c8
 80026b8:	20000ac0 	.word	0x20000ac0

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	@ 0x50
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	2230      	movs	r2, #48	@ 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00e f8fa 	bl	80108c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <SystemClock_Config+0xcc>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a27      	ldr	r2, [pc, #156]	@ (8002788 <SystemClock_Config+0xcc>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f0:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <SystemClock_Config+0xcc>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026fc:	2300      	movs	r3, #0
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	4b22      	ldr	r3, [pc, #136]	@ (800278c <SystemClock_Config+0xd0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a21      	ldr	r2, [pc, #132]	@ (800278c <SystemClock_Config+0xd0>)
 8002706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <SystemClock_Config+0xd0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002718:	2301      	movs	r3, #1
 800271a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800271c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002720:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002722:	2302      	movs	r3, #2
 8002724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002726:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800272c:	2319      	movs	r3, #25
 800272e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002730:	23c0      	movs	r3, #192	@ 0xc0
 8002732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002734:	2302      	movs	r3, #2
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002738:	2304      	movs	r3, #4
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	4618      	mov	r0, r3
 8002742:	f007 fc5d 	bl	800a000 <HAL_RCC_OscConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800274c:	f000 fde6 	bl	800331c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002750:	230f      	movs	r3, #15
 8002752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002754:	2302      	movs	r3, #2
 8002756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800275c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	2103      	movs	r1, #3
 800276c:	4618      	mov	r0, r3
 800276e:	f007 febf 	bl	800a4f0 <HAL_RCC_ClockConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002778:	f000 fdd0 	bl	800331c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800277c:	f007 ff9e 	bl	800a6bc <HAL_RCC_EnableCSS>
}
 8002780:	bf00      	nop
 8002782:	3750      	adds	r7, #80	@ 0x50
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000

08002790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002796:	463b      	mov	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80027a2:	4b59      	ldr	r3, [pc, #356]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027a4:	4a59      	ldr	r2, [pc, #356]	@ (800290c <MX_ADC1_Init+0x17c>)
 80027a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80027a8:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80027ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027b0:	4b55      	ldr	r3, [pc, #340]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80027b6:	4b54      	ldr	r3, [pc, #336]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027bc:	4b52      	ldr	r3, [pc, #328]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027be:	2200      	movs	r2, #0
 80027c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002910 <MX_ADC1_Init+0x180>)
 80027d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 80027dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027de:	2209      	movs	r2, #9
 80027e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027e2:	4b49      	ldr	r3, [pc, #292]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ea:	4b47      	ldr	r3, [pc, #284]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027f0:	4845      	ldr	r0, [pc, #276]	@ (8002908 <MX_ADC1_Init+0x178>)
 80027f2:	f001 f9a7 	bl	8003b44 <HAL_ADC_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80027fc:	f000 fd8e 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002800:	2301      	movs	r3, #1
 8002802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002808:	2303      	movs	r3, #3
 800280a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280c:	463b      	mov	r3, r7
 800280e:	4619      	mov	r1, r3
 8002810:	483d      	ldr	r0, [pc, #244]	@ (8002908 <MX_ADC1_Init+0x178>)
 8002812:	f001 fbf9 	bl	8004008 <HAL_ADC_ConfigChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800281c:	f000 fd7e 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002820:	2302      	movs	r3, #2
 8002822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002824:	2302      	movs	r3, #2
 8002826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002828:	463b      	mov	r3, r7
 800282a:	4619      	mov	r1, r3
 800282c:	4836      	ldr	r0, [pc, #216]	@ (8002908 <MX_ADC1_Init+0x178>)
 800282e:	f001 fbeb 	bl	8004008 <HAL_ADC_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002838:	f000 fd70 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800283c:	2303      	movs	r3, #3
 800283e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002840:	2303      	movs	r3, #3
 8002842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002844:	463b      	mov	r3, r7
 8002846:	4619      	mov	r1, r3
 8002848:	482f      	ldr	r0, [pc, #188]	@ (8002908 <MX_ADC1_Init+0x178>)
 800284a:	f001 fbdd 	bl	8004008 <HAL_ADC_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002854:	f000 fd62 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002858:	2304      	movs	r3, #4
 800285a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800285c:	2304      	movs	r3, #4
 800285e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002860:	463b      	mov	r3, r7
 8002862:	4619      	mov	r1, r3
 8002864:	4828      	ldr	r0, [pc, #160]	@ (8002908 <MX_ADC1_Init+0x178>)
 8002866:	f001 fbcf 	bl	8004008 <HAL_ADC_ConfigChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002870:	f000 fd54 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002874:	2305      	movs	r3, #5
 8002876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002878:	2305      	movs	r3, #5
 800287a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287c:	463b      	mov	r3, r7
 800287e:	4619      	mov	r1, r3
 8002880:	4821      	ldr	r0, [pc, #132]	@ (8002908 <MX_ADC1_Init+0x178>)
 8002882:	f001 fbc1 	bl	8004008 <HAL_ADC_ConfigChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800288c:	f000 fd46 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002890:	2306      	movs	r3, #6
 8002892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002894:	2306      	movs	r3, #6
 8002896:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	481a      	ldr	r0, [pc, #104]	@ (8002908 <MX_ADC1_Init+0x178>)
 800289e:	f001 fbb3 	bl	8004008 <HAL_ADC_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80028a8:	f000 fd38 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80028ac:	2307      	movs	r3, #7
 80028ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80028b0:	2307      	movs	r3, #7
 80028b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b4:	463b      	mov	r3, r7
 80028b6:	4619      	mov	r1, r3
 80028b8:	4813      	ldr	r0, [pc, #76]	@ (8002908 <MX_ADC1_Init+0x178>)
 80028ba:	f001 fba5 	bl	8004008 <HAL_ADC_ConfigChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80028c4:	f000 fd2a 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80028c8:	2308      	movs	r3, #8
 80028ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80028cc:	2308      	movs	r3, #8
 80028ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4619      	mov	r1, r3
 80028d4:	480c      	ldr	r0, [pc, #48]	@ (8002908 <MX_ADC1_Init+0x178>)
 80028d6:	f001 fb97 	bl	8004008 <HAL_ADC_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80028e0:	f000 fd1c 	bl	800331c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80028e4:	2309      	movs	r3, #9
 80028e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80028e8:	2309      	movs	r3, #9
 80028ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	@ (8002908 <MX_ADC1_Init+0x178>)
 80028f2:	f001 fb89 	bl	8004008 <HAL_ADC_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80028fc:	f000 fd0e 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	2000082c 	.word	0x2000082c
 800290c:	40012000 	.word	0x40012000
 8002910:	0f000001 	.word	0x0f000001

08002914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <MX_I2C1_Init+0x50>)
 800291a:	4a13      	ldr	r2, [pc, #76]	@ (8002968 <MX_I2C1_Init+0x54>)
 800291c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <MX_I2C1_Init+0x50>)
 8002920:	4a12      	ldr	r2, [pc, #72]	@ (800296c <MX_I2C1_Init+0x58>)
 8002922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002924:	4b0f      	ldr	r3, [pc, #60]	@ (8002964 <MX_I2C1_Init+0x50>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800292a:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <MX_I2C1_Init+0x50>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <MX_I2C1_Init+0x50>)
 8002932:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002938:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <MX_I2C1_Init+0x50>)
 800293a:	2200      	movs	r2, #0
 800293c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <MX_I2C1_Init+0x50>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002944:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <MX_I2C1_Init+0x50>)
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <MX_I2C1_Init+0x50>)
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002950:	4804      	ldr	r0, [pc, #16]	@ (8002964 <MX_I2C1_Init+0x50>)
 8002952:	f002 fd29 	bl	80053a8 <HAL_I2C_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800295c:	f000 fcde 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200008d4 	.word	0x200008d4
 8002968:	40005400 	.word	0x40005400
 800296c:	00061a80 	.word	0x00061a80

08002970 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <MX_TIM1_Init+0x98>)
 800298e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a0c <MX_TIM1_Init+0x9c>)
 8002990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002992:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <MX_TIM1_Init+0x98>)
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <MX_TIM1_Init+0x98>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 23999;
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029a0:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 80029a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029ac:	4b16      	ldr	r3, [pc, #88]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029b8:	4813      	ldr	r0, [pc, #76]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029ba:	f007 ffa0 	bl	800a8fe <HAL_TIM_Base_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029c4:	f000 fcaa 	bl	800331c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	4619      	mov	r1, r3
 80029d4:	480c      	ldr	r0, [pc, #48]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029d6:	f008 faff 	bl	800afd8 <HAL_TIM_ConfigClockSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029e0:	f000 fc9c 	bl	800331c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029ec:	463b      	mov	r3, r7
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	@ (8002a08 <MX_TIM1_Init+0x98>)
 80029f2:	f008 feb9 	bl	800b768 <HAL_TIMEx_MasterConfigSynchronization>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029fc:	f000 fc8e 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200009e8 	.word	0x200009e8
 8002a0c:	40010000 	.word	0x40010000

08002a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	@ 0x38
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	f107 0320 	add.w	r3, r7, #32
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
 8002a3c:	615a      	str	r2, [r3, #20]
 8002a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a40:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a42:	4a33      	ldr	r2, [pc, #204]	@ (8002b10 <MX_TIM3_Init+0x100>)
 8002a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8002a46:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a48:	220f      	movs	r2, #15
 8002a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002a52:	4b2e      	ldr	r3, [pc, #184]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a54:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a60:	4b2a      	ldr	r3, [pc, #168]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a66:	4829      	ldr	r0, [pc, #164]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a68:	f007 ff49 	bl	800a8fe <HAL_TIM_Base_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a72:	f000 fc53 	bl	800331c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4822      	ldr	r0, [pc, #136]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a84:	f008 faa8 	bl	800afd8 <HAL_TIM_ConfigClockSource>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a8e:	f000 fc45 	bl	800331c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a92:	481e      	ldr	r0, [pc, #120]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002a94:	f007 ffe4 	bl	800aa60 <HAL_TIM_PWM_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a9e:	f000 fc3d 	bl	800331c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aaa:	f107 0320 	add.w	r3, r7, #32
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4816      	ldr	r0, [pc, #88]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002ab2:	f008 fe59 	bl	800b768 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002abc:	f000 fc2e 	bl	800331c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac0:	2360      	movs	r3, #96	@ 0x60
 8002ac2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002ad8:	f008 f9bc 	bl	800ae54 <HAL_TIM_PWM_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002ae2:	f000 fc1b 	bl	800331c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4807      	ldr	r0, [pc, #28]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002aee:	f008 f9b1 	bl	800ae54 <HAL_TIM_PWM_ConfigChannel>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002af8:	f000 fc10 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <MX_TIM3_Init+0xfc>)
 8002afe:	f000 fde1 	bl	80036c4 <HAL_TIM_MspPostInit>

}
 8002b02:	bf00      	nop
 8002b04:	3738      	adds	r7, #56	@ 0x38
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000a30 	.word	0x20000a30
 8002b10:	40000400 	.word	0x40000400

08002b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	@ (8002b64 <MX_USART1_UART_Init+0x50>)
 8002b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b3a:	220c      	movs	r2, #12
 8002b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <MX_USART1_UART_Init+0x4c>)
 8002b4c:	f008 fe8e 	bl	800b86c <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b56:	f000 fbe1 	bl	800331c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000a78 	.word	0x20000a78
 8002b64:	40011000 	.word	0x40011000

08002b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <MX_DMA_Init+0x78>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	4a1a      	ldr	r2, [pc, #104]	@ (8002be0 <MX_DMA_Init+0x78>)
 8002b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <MX_DMA_Init+0x78>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <MX_DMA_Init+0x78>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <MX_DMA_Init+0x78>)
 8002b94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <MX_DMA_Init+0x78>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	200b      	movs	r0, #11
 8002bac:	f001 fdc1 	bl	8004732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002bb0:	200b      	movs	r0, #11
 8002bb2:	f001 fdda 	bl	800476a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	200c      	movs	r0, #12
 8002bbc:	f001 fdb9 	bl	8004732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002bc0:	200c      	movs	r0, #12
 8002bc2:	f001 fdd2 	bl	800476a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2038      	movs	r0, #56	@ 0x38
 8002bcc:	f001 fdb1 	bl	8004732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002bd0:	2038      	movs	r0, #56	@ 0x38
 8002bd2:	f001 fdca 	bl	800476a <HAL_NVIC_EnableIRQ>

}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800

08002be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	@ 0x28
 8002be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b66      	ldr	r3, [pc, #408]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a65      	ldr	r2, [pc, #404]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b63      	ldr	r3, [pc, #396]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b5c      	ldr	r3, [pc, #368]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b58      	ldr	r3, [pc, #352]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	4a57      	ldr	r2, [pc, #348]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c42:	4b55      	ldr	r3, [pc, #340]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b51      	ldr	r3, [pc, #324]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a50      	ldr	r2, [pc, #320]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d98 <MX_GPIO_Init+0x1b4>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002c70:	484a      	ldr	r0, [pc, #296]	@ (8002d9c <MX_GPIO_Init+0x1b8>)
 8002c72:	f002 fb4d 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 4106 	mov.w	r1, #34304	@ 0x8600
 8002c7c:	4848      	ldr	r0, [pc, #288]	@ (8002da0 <MX_GPIO_Init+0x1bc>)
 8002c7e:	f002 fb47 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2108      	movs	r1, #8
 8002c86:	4847      	ldr	r0, [pc, #284]	@ (8002da4 <MX_GPIO_Init+0x1c0>)
 8002c88:	f002 fb42 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f107 0314 	add.w	r3, r7, #20
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	483d      	ldr	r0, [pc, #244]	@ (8002d9c <MX_GPIO_Init+0x1b8>)
 8002ca6:	f002 f997 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4838      	ldr	r0, [pc, #224]	@ (8002da0 <MX_GPIO_Init+0x1bc>)
 8002cbe:	f002 f98b 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4833      	ldr	r0, [pc, #204]	@ (8002da4 <MX_GPIO_Init+0x1c0>)
 8002cd6:	f002 f97f 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_ENC_A_Pin */
  GPIO_InitStruct.Pin = M1_ENC_A_Pin;
 8002cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ce0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M1_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4619      	mov	r1, r3
 8002cf0:	482c      	ldr	r0, [pc, #176]	@ (8002da4 <MX_GPIO_Init+0x1c0>)
 8002cf2:	f002 f971 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002cf6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d08:	2305      	movs	r3, #5
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4824      	ldr	r0, [pc, #144]	@ (8002da4 <MX_GPIO_Init+0x1c0>)
 8002d14:	f002 f960 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_ENC_A_Pin */
  GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 8002d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	481c      	ldr	r0, [pc, #112]	@ (8002da0 <MX_GPIO_Init+0x1bc>)
 8002d30:	f002 f952 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_IN1_Pin M1_IN2_Pin M2_IN1_Pin */
  GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin;
 8002d34:	f44f 4306 	mov.w	r3, #34304	@ 0x8600
 8002d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4814      	ldr	r0, [pc, #80]	@ (8002da0 <MX_GPIO_Init+0x1bc>)
 8002d4e:	f002 f943 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IN2_Pin */
  GPIO_InitStruct.Pin = M2_IN2_Pin;
 8002d52:	2308      	movs	r3, #8
 8002d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d56:	2301      	movs	r3, #1
 8002d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(M2_IN2_GPIO_Port, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	480e      	ldr	r0, [pc, #56]	@ (8002da4 <MX_GPIO_Init+0x1c0>)
 8002d6a:	f002 f935 	bl	8004fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2017      	movs	r0, #23
 8002d74:	f001 fcdd 	bl	8004732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d78:	2017      	movs	r0, #23
 8002d7a:	f001 fcf6 	bl	800476a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	2028      	movs	r0, #40	@ 0x28
 8002d84:	f001 fcd5 	bl	8004732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d88:	2028      	movs	r0, #40	@ 0x28
 8002d8a:	f001 fcee 	bl	800476a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	@ 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400

08002da8 <Init_Timing>:

/* USER CODE BEGIN 4 */
/************************************ USER INIT FUNCTIONS ****************************************/
/* INICIALIZACIÓN DE TIMERS Y PWM*/
void Init_Timing(){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK){
 8002dac:	4819      	ldr	r0, [pc, #100]	@ (8002e14 <Init_Timing+0x6c>)
 8002dae:	f007 fdf5 	bl	800a99c <HAL_TIM_Base_Start_IT>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <Init_Timing+0x1c>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM1 INIT", 9);
 8002db8:	2309      	movs	r3, #9
 8002dba:	4a17      	ldr	r2, [pc, #92]	@ (8002e18 <Init_Timing+0x70>)
 8002dbc:	21ee      	movs	r1, #238	@ 0xee
 8002dbe:	4817      	ldr	r0, [pc, #92]	@ (8002e1c <Init_Timing+0x74>)
 8002dc0:	f7fe fed4 	bl	8001b6c <comm_sendCMD>
	  }
	  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK){
 8002dc4:	4816      	ldr	r0, [pc, #88]	@ (8002e20 <Init_Timing+0x78>)
 8002dc6:	f007 fde9 	bl	800a99c <HAL_TIM_Base_Start_IT>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <Init_Timing+0x34>
	  	  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT BASE", 14);
 8002dd0:	230e      	movs	r3, #14
 8002dd2:	4a14      	ldr	r2, [pc, #80]	@ (8002e24 <Init_Timing+0x7c>)
 8002dd4:	21ee      	movs	r1, #238	@ 0xee
 8002dd6:	4811      	ldr	r0, [pc, #68]	@ (8002e1c <Init_Timing+0x74>)
 8002dd8:	f7fe fec8 	bl	8001b6c <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK){
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4810      	ldr	r0, [pc, #64]	@ (8002e20 <Init_Timing+0x78>)
 8002de0:	f007 fe98 	bl	800ab14 <HAL_TIM_PWM_Start>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <Init_Timing+0x4e>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM1", 14);
 8002dea:	230e      	movs	r3, #14
 8002dec:	4a0e      	ldr	r2, [pc, #56]	@ (8002e28 <Init_Timing+0x80>)
 8002dee:	21ee      	movs	r1, #238	@ 0xee
 8002df0:	480a      	ldr	r0, [pc, #40]	@ (8002e1c <Init_Timing+0x74>)
 8002df2:	f7fe febb 	bl	8001b6c <comm_sendCMD>
	  }
	  if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK){
 8002df6:	2104      	movs	r1, #4
 8002df8:	4809      	ldr	r0, [pc, #36]	@ (8002e20 <Init_Timing+0x78>)
 8002dfa:	f007 fe8b 	bl	800ab14 <HAL_TIM_PWM_Start>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <Init_Timing+0x68>
		  comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"TIM3 INIT PWM2", 14);
 8002e04:	230e      	movs	r3, #14
 8002e06:	4a09      	ldr	r2, [pc, #36]	@ (8002e2c <Init_Timing+0x84>)
 8002e08:	21ee      	movs	r1, #238	@ 0xee
 8002e0a:	4804      	ldr	r0, [pc, #16]	@ (8002e1c <Init_Timing+0x74>)
 8002e0c:	f7fe feae 	bl	8001b6c <comm_sendCMD>
	  }
}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200009e8 	.word	0x200009e8
 8002e18:	08011230 	.word	0x08011230
 8002e1c:	20000f94 	.word	0x20000f94
 8002e20:	20000a30 	.word	0x20000a30
 8002e24:	0801123c 	.word	0x0801123c
 8002e28:	0801124c 	.word	0x0801124c
 8002e2c:	0801125c 	.word	0x0801125c

08002e30 <Init_MPU6050>:
/* FIN INICIALIZACIÓN DE TIMERS Y PWM*/
/* INICIALIZACIÓN DE MPU6050 */
void Init_MPU6050(){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 1, 10000) != HAL_OK){
 8002e34:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e38:	2201      	movs	r2, #1
 8002e3a:	21d0      	movs	r1, #208	@ 0xd0
 8002e3c:	4811      	ldr	r0, [pc, #68]	@ (8002e84 <Init_MPU6050+0x54>)
 8002e3e:	f003 fb25 	bl	800648c <HAL_I2C_IsDeviceReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <Init_MPU6050+0x26>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 READY", 13);
 8002e48:	230d      	movs	r3, #13
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e88 <Init_MPU6050+0x58>)
 8002e4c:	21ee      	movs	r1, #238	@ 0xee
 8002e4e:	480f      	ldr	r0, [pc, #60]	@ (8002e8c <Init_MPU6050+0x5c>)
 8002e50:	f7fe fe8c 	bl	8001b6c <comm_sendCMD>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
		}else{
			MPU6050_Calibrate(&MPU6050);
		}
	}
}
 8002e54:	e013      	b.n	8002e7e <Init_MPU6050+0x4e>
		MPU6050_Set_I2C_Communication(&I2C_1_Abstract_Mem_Write_Blocking, &I2C_1_Abstract_Mem_Read_Blocking);
 8002e56:	490e      	ldr	r1, [pc, #56]	@ (8002e90 <Init_MPU6050+0x60>)
 8002e58:	480e      	ldr	r0, [pc, #56]	@ (8002e94 <Init_MPU6050+0x64>)
 8002e5a:	f7fd fd09 	bl	8000870 <MPU6050_Set_I2C_Communication>
		if(MPU6050_Init(&MPU6050) != SYS_OK){
 8002e5e:	480e      	ldr	r0, [pc, #56]	@ (8002e98 <Init_MPU6050+0x68>)
 8002e60:	f7fd fd1c 	bl	800089c <MPU6050_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <Init_MPU6050+0x48>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"MPU6050 INIT", 12);
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e9c <Init_MPU6050+0x6c>)
 8002e6e:	21ee      	movs	r1, #238	@ 0xee
 8002e70:	4806      	ldr	r0, [pc, #24]	@ (8002e8c <Init_MPU6050+0x5c>)
 8002e72:	f7fe fe7b 	bl	8001b6c <comm_sendCMD>
}
 8002e76:	e002      	b.n	8002e7e <Init_MPU6050+0x4e>
			MPU6050_Calibrate(&MPU6050);
 8002e78:	4807      	ldr	r0, [pc, #28]	@ (8002e98 <Init_MPU6050+0x68>)
 8002e7a:	f7fd fdb1 	bl	80009e0 <MPU6050_Calibrate>
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	200008d4 	.word	0x200008d4
 8002e88:	0801126c 	.word	0x0801126c
 8002e8c:	20000f94 	.word	0x20000f94
 8002e90:	0800313d 	.word	0x0800313d
 8002e94:	080030fd 	.word	0x080030fd
 8002e98:	20000b14 	.word	0x20000b14
 8002e9c:	0801127c 	.word	0x0801127c

08002ea0 <Init_Display>:
/* FIN INICIALIZACIÓN DE MPU6050 */
/* INICIALIZACIÓN DISPLAY*/
void Init_Display(){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af02      	add	r7, sp, #8
	Display.refreshCounter = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <Init_Display+0x84>)
 8002ea8:	220a      	movs	r2, #10
 8002eaa:	f883 2413 	strb.w	r2, [r3, #1043]	@ 0x413
	Display.refreshRate = DISPLAY_TYPICAL_REFRESH_RATE_10MS;
 8002eae:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <Init_Display+0x84>)
 8002eb0:	220a      	movs	r2, #10
 8002eb2:	f883 2412 	strb.w	r2, [r3, #1042]	@ 0x412

	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 10000) != HAL_OK){
 8002eb6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002eba:	2201      	movs	r2, #1
 8002ebc:	2178      	movs	r1, #120	@ 0x78
 8002ebe:	481a      	ldr	r0, [pc, #104]	@ (8002f28 <Init_Display+0x88>)
 8002ec0:	f003 fae4 	bl	800648c <HAL_I2C_IsDeviceReady>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <Init_Display+0x38>
		comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED READY", 10);
 8002eca:	230a      	movs	r3, #10
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <Init_Display+0x8c>)
 8002ece:	21ee      	movs	r1, #238	@ 0xee
 8002ed0:	4817      	ldr	r0, [pc, #92]	@ (8002f30 <Init_Display+0x90>)
 8002ed2:	f7fe fe4b 	bl	8001b6c <comm_sendCMD>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
			Display.isInit = TRUE;
			Display.timer = HAL_GetTick();
		}
	}
}
 8002ed6:	e022      	b.n	8002f1e <Init_Display+0x7e>
		Display_Set_I2C_Master_Transmit(&I2C_1_Abstract_Mem_DMA_Transmit, &I2C_1_Abstract_Master_Transmit_Blocking);
 8002ed8:	4916      	ldr	r1, [pc, #88]	@ (8002f34 <Init_Display+0x94>)
 8002eda:	4817      	ldr	r0, [pc, #92]	@ (8002f38 <Init_Display+0x98>)
 8002edc:	f7fd febe 	bl	8000c5c <Display_Set_I2C_Master_Transmit>
		if(Display_Init() != SYS_OK){
 8002ee0:	f7fd fed2 	bl	8000c88 <Display_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <Init_Display+0x58>
			comm_sendCMD(&USB.data, SYSERROR, (uint8_t*)"OLED INIT", 9);
 8002eea:	2309      	movs	r3, #9
 8002eec:	4a13      	ldr	r2, [pc, #76]	@ (8002f3c <Init_Display+0x9c>)
 8002eee:	21ee      	movs	r1, #238	@ 0xee
 8002ef0:	480f      	ldr	r0, [pc, #60]	@ (8002f30 <Init_Display+0x90>)
 8002ef2:	f7fe fe3b 	bl	8001b6c <comm_sendCMD>
}
 8002ef6:	e012      	b.n	8002f1e <Init_Display+0x7e>
			Display_DrawBitmap(0,0, uner_logo, 128, 64, 1);
 8002ef8:	2301      	movs	r3, #1
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	2340      	movs	r3, #64	@ 0x40
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <Init_Display+0xa0>)
 8002f04:	2100      	movs	r1, #0
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7fe f958 	bl	80011bc <Display_DrawBitmap>
			Display.isInit = TRUE;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <Init_Display+0x84>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
			Display.timer = HAL_GetTick();
 8002f12:	f000 fde7 	bl	8003ae4 <HAL_GetTick>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a02      	ldr	r2, [pc, #8]	@ (8002f24 <Init_Display+0x84>)
 8002f1a:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000b5c 	.word	0x20000b5c
 8002f28:	200008d4 	.word	0x200008d4
 8002f2c:	0801128c 	.word	0x0801128c
 8002f30:	20000f94 	.word	0x20000f94
 8002f34:	080030c9 	.word	0x080030c9
 8002f38:	0800308d 	.word	0x0800308d
 8002f3c:	08011298 	.word	0x08011298
 8002f40:	08011454 	.word	0x08011454

08002f44 <HAL_TIM_PeriodElapsedCallback>:
/* FIN INICIALIZACIÓN DISPLAY */
/************************************ END USER INIT FUNCTIONS ****************************************/
/**************************************** HAL CALLBACKS ***************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //			1/4000s
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1a      	ldr	r2, [pc, #104]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d123      	bne.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x5a>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Analog.raw, 9);
 8002f56:	2209      	movs	r2, #9
 8002f58:	4919      	ldr	r1, [pc, #100]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f5a:	481a      	ldr	r0, [pc, #104]	@ (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f5c:	f000 ff46 	bl	8003dec <HAL_ADC_Start_DMA>
		is5ms--;
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f6a:	701a      	strb	r2, [r3, #0]
		if(!is5ms){
 8002f6c:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d114      	bne.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x5a>
			is5ms = 20;
 8002f74:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f76:	2214      	movs	r2, #20
 8002f78:	701a      	strb	r2, [r3, #0]
			if(MPU6050.isInit){
 8002f7a:	4b14      	ldr	r3, [pc, #80]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002f7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00c      	beq.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x5a>
				HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_REG, 1, MPU6050.data, 14);
 8002f84:	230e      	movs	r3, #14
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	223b      	movs	r2, #59	@ 0x3b
 8002f90:	21d0      	movs	r1, #208	@ 0xd0
 8002f92:	4810      	ldr	r0, [pc, #64]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002f94:	f003 f8ea 	bl	800616c <HAL_I2C_Mem_Read_DMA>
				Display_I2C_DMA_Ready(FALSE);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fe f853 	bl	8001044 <Display_I2C_DMA_Ready>
			}
		}
	}
	if(htim->Instance == TIM3){
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d104      	bne.n	8002fb2 <HAL_TIM_PeriodElapsedCallback+0x6e>
		IS10MS = TRUE;
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002faa:	7813      	ldrb	r3, [r2, #0]
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	7013      	strb	r3, [r2, #0]




	}
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40010000 	.word	0x40010000
 8002fc0:	20000f70 	.word	0x20000f70
 8002fc4:	2000082c 	.word	0x2000082c
 8002fc8:	2000000a 	.word	0x2000000a
 8002fcc:	20000b14 	.word	0x20000b14
 8002fd0:	20000b4a 	.word	0x20000b4a
 8002fd4:	200008d4 	.word	0x200008d4
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	20000ac0 	.word	0x20000ac0

08002fe0 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == SSD1306_I2C_ADDR){
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fec:	2b78      	cmp	r3, #120	@ 0x78
 8002fee:	d107      	bne.n	8003000 <HAL_I2C_MemTxCpltCallback+0x20>
		if(!MPU6050.isInit){
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <HAL_I2C_MemTxCpltCallback+0x28>)
 8002ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <HAL_I2C_MemTxCpltCallback+0x20>
			Display_I2C_DMA_Ready(TRUE);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7fe f822 	bl	8001044 <Display_I2C_DMA_Ready>
		}
	}
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000b14 	.word	0x20000b14

0800300c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	if(hi2c->Devaddress == MPU6050_ADDR){
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	2bd0      	cmp	r3, #208	@ 0xd0
 800301a:	d105      	bne.n	8003028 <HAL_I2C_MemRxCpltCallback+0x1c>
		MPU6050_I2C_DMA_Cplt(&MPU6050);
 800301c:	4804      	ldr	r0, [pc, #16]	@ (8003030 <HAL_I2C_MemRxCpltCallback+0x24>)
 800301e:	f7fd fd8f 	bl	8000b40 <MPU6050_I2C_DMA_Cplt>
		Display_I2C_DMA_Ready(TRUE);
 8003022:	2001      	movs	r0, #1
 8003024:	f7fe f80e 	bl	8001044 <Display_I2C_DMA_Ready>
	}
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000b14 	.word	0x20000b14

08003034 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	ADC_Conversion_Cplt(Analog.raw, Analog.value);
 800303c:	4903      	ldr	r1, [pc, #12]	@ (800304c <HAL_ADC_ConvCpltCallback+0x18>)
 800303e:	4804      	ldr	r0, [pc, #16]	@ (8003050 <HAL_ADC_ConvCpltCallback+0x1c>)
 8003040:	f7fd fab4 	bl	80005ac <ADC_Conversion_Cplt>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000f82 	.word	0x20000f82
 8003050:	20000f70 	.word	0x20000f70

08003054 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == M1_ENC_A_Pin){
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003064:	d102      	bne.n	800306c <HAL_GPIO_EXTI_Callback+0x18>
    	Encoder_Add_Pulse(&EncoderL);
 8003066:	4807      	ldr	r0, [pc, #28]	@ (8003084 <HAL_GPIO_EXTI_Callback+0x30>)
 8003068:	f7fe fafc 	bl	8001664 <Encoder_Add_Pulse>
    }
    if (GPIO_Pin == M2_ENC_A_Pin){
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003072:	d102      	bne.n	800307a <HAL_GPIO_EXTI_Callback+0x26>
    	Encoder_Add_Pulse(&EncoderR);
 8003074:	4804      	ldr	r0, [pc, #16]	@ (8003088 <HAL_GPIO_EXTI_Callback+0x34>)
 8003076:	f7fe faf5 	bl	8001664 <Encoder_Add_Pulse>
	}
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000afc 	.word	0x20000afc
 8003088:	20000b08 	.word	0x20000b08

0800308c <I2C_1_Abstract_Mem_DMA_Transmit>:
		dataRx = 0;
	}
}*/
/**************************************** END HAL CALLBACKS ***************************************/
/*************************************** HARDWARE ABSTRACTION ************************************/
e_system I2C_1_Abstract_Mem_DMA_Transmit(uint16_t Dev_Address, uint8_t reg, uint8_t *p_Data, uint16_t _Size){
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
 8003092:	60ba      	str	r2, [r7, #8]
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	81fb      	strh	r3, [r7, #14]
 800309a:	460b      	mov	r3, r1
 800309c:	737b      	strb	r3, [r7, #13]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
	return (e_system)HAL_I2C_Mem_Write_DMA(&hi2c1, Dev_Address, reg, 1, p_Data, _Size);
 80030a2:	7b7b      	ldrb	r3, [r7, #13]
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	89f9      	ldrh	r1, [r7, #14]
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2301      	movs	r3, #1
 80030b2:	4804      	ldr	r0, [pc, #16]	@ (80030c4 <I2C_1_Abstract_Mem_DMA_Transmit+0x38>)
 80030b4:	f002 fefc 	bl	8005eb0 <HAL_I2C_Mem_Write_DMA>
 80030b8:	4603      	mov	r3, r0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200008d4 	.word	0x200008d4

080030c8 <I2C_1_Abstract_Master_Transmit_Blocking>:

e_system I2C_1_Abstract_Master_Transmit_Blocking(uint16_t Dev_Address, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4603      	mov	r3, r0
 80030d4:	81fb      	strh	r3, [r7, #14]
 80030d6:	4613      	mov	r3, r2
 80030d8:	81bb      	strh	r3, [r7, #12]
	return (e_system)HAL_I2C_Master_Transmit(&hi2c1, Dev_Address, p_Data, _Size, _Timeout);
 80030da:	89ba      	ldrh	r2, [r7, #12]
 80030dc:	89f9      	ldrh	r1, [r7, #14]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4613      	mov	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4804      	ldr	r0, [pc, #16]	@ (80030f8 <I2C_1_Abstract_Master_Transmit_Blocking+0x30>)
 80030e8:	f002 fab8 	bl	800565c <HAL_I2C_Master_Transmit>
 80030ec:	4603      	mov	r3, r0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200008d4 	.word	0x200008d4

080030fc <I2C_1_Abstract_Mem_Write_Blocking>:

e_system I2C_1_Abstract_Mem_Write_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af04      	add	r7, sp, #16
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	4603      	mov	r3, r0
 8003106:	80fb      	strh	r3, [r7, #6]
 8003108:	460b      	mov	r3, r1
 800310a:	717b      	strb	r3, [r7, #5]
 800310c:	4613      	mov	r3, r2
 800310e:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Write(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8003110:	797b      	ldrb	r3, [r7, #5]
 8003112:	b29a      	uxth	r2, r3
 8003114:	793b      	ldrb	r3, [r7, #4]
 8003116:	b298      	uxth	r0, r3
 8003118:	88f9      	ldrh	r1, [r7, #6]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	9302      	str	r3, [sp, #8]
 800311e:	8a3b      	ldrh	r3, [r7, #16]
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	4603      	mov	r3, r0
 8003128:	4803      	ldr	r0, [pc, #12]	@ (8003138 <I2C_1_Abstract_Mem_Write_Blocking+0x3c>)
 800312a:	f002 fb95 	bl	8005858 <HAL_I2C_Mem_Write>
 800312e:	4603      	mov	r3, r0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200008d4 	.word	0x200008d4

0800313c <I2C_1_Abstract_Mem_Read_Blocking>:

e_system I2C_1_Abstract_Mem_Read_Blocking(uint16_t Dev_Address, uint8_t Mem_Adress, uint8_t Mem_AddSize, uint8_t *p_Data, uint16_t _Size, uint32_t _Timeout){
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af04      	add	r7, sp, #16
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4603      	mov	r3, r0
 8003146:	80fb      	strh	r3, [r7, #6]
 8003148:	460b      	mov	r3, r1
 800314a:	717b      	strb	r3, [r7, #5]
 800314c:	4613      	mov	r3, r2
 800314e:	713b      	strb	r3, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c1, Dev_Address, Mem_Adress, Mem_AddSize, p_Data, _Size, _Timeout);
 8003150:	797b      	ldrb	r3, [r7, #5]
 8003152:	b29a      	uxth	r2, r3
 8003154:	793b      	ldrb	r3, [r7, #4]
 8003156:	b298      	uxth	r0, r3
 8003158:	88f9      	ldrh	r1, [r7, #6]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9302      	str	r3, [sp, #8]
 800315e:	8a3b      	ldrh	r3, [r7, #16]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	4603      	mov	r3, r0
 8003168:	4803      	ldr	r0, [pc, #12]	@ (8003178 <I2C_1_Abstract_Mem_Read_Blocking+0x3c>)
 800316a:	f002 fc6f 	bl	8005a4c <HAL_I2C_Mem_Read>
 800316e:	4603      	mov	r3, r0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	200008d4 	.word	0x200008d4

0800317c <KEY_Read_Value>:

uint8_t KEY_Read_Value(){
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin);
 8003180:	2101      	movs	r1, #1
 8003182:	4803      	ldr	r0, [pc, #12]	@ (8003190 <KEY_Read_Value+0x14>)
 8003184:	f002 f8ac 	bl	80052e0 <HAL_GPIO_ReadPin>
 8003188:	4603      	mov	r3, r0
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40020000 	.word	0x40020000

08003194 <writeOn_USB>:

void writeOn_USB(s_commData *data){
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	if(USB.data.Tx.write > USB.data.Tx.read){
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <writeOn_USB+0x70>)
 800319e:	78da      	ldrb	r2, [r3, #3]
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <writeOn_USB+0x70>)
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d909      	bls.n	80031bc <writeOn_USB+0x28>
		USB.bytesToTx = USB.data.Tx.write - USB.data.Tx.read;
 80031a8:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <writeOn_USB+0x70>)
 80031aa:	78da      	ldrb	r2, [r3, #3]
 80031ac:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <writeOn_USB+0x70>)
 80031ae:	789b      	ldrb	r3, [r3, #2]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <writeOn_USB+0x70>)
 80031b6:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
 80031ba:	e006      	b.n	80031ca <writeOn_USB+0x36>
	}else{
		USB.bytesToTx = RINGBUFFLENGTH - USB.data.Tx.read;
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <writeOn_USB+0x70>)
 80031be:	789b      	ldrb	r3, [r3, #2]
 80031c0:	425b      	negs	r3, r3
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003204 <writeOn_USB+0x70>)
 80031c6:	f883 2230 	strb.w	r2, [r3, #560]	@ 0x230
	}
	if(CDC_Transmit_FS(&USB.data.Tx.buffer[USB.data.Tx.read], USB.bytesToTx) == USBD_OK){
 80031ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <writeOn_USB+0x70>)
 80031cc:	789b      	ldrb	r3, [r3, #2]
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <writeOn_USB+0x70>)
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003204 <writeOn_USB+0x70>)
 80031d8:	f892 2230 	ldrb.w	r2, [r2, #560]	@ 0x230
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f00c feec 	bl	800ffbc <CDC_Transmit_FS>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <writeOn_USB+0x68>
		USB.data.Tx.read += USB.bytesToTx;
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <writeOn_USB+0x70>)
 80031ec:	789a      	ldrb	r2, [r3, #2]
 80031ee:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <writeOn_USB+0x70>)
 80031f0:	f893 3230 	ldrb.w	r3, [r3, #560]	@ 0x230
 80031f4:	4413      	add	r3, r2
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	4b02      	ldr	r3, [pc, #8]	@ (8003204 <writeOn_USB+0x70>)
 80031fa:	709a      	strb	r2, [r3, #2]
	}
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000f94 	.word	0x20000f94

08003208 <dataRxOn_USB>:

void dataRxOn_USB(uint8_t *buff, uint32_t len){
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	if(buff != NULL){
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01a      	beq.n	800324e <dataRxOn_USB+0x46>
		for(uint16_t i = 0; i < len; i++){
 8003218:	2300      	movs	r3, #0
 800321a:	81fb      	strh	r3, [r7, #14]
 800321c:	e013      	b.n	8003246 <dataRxOn_USB+0x3e>
			USB.data.Rx.buffer[USB.data.Rx.write++] = buff[i];
 800321e:	89fb      	ldrh	r3, [r7, #14]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	441a      	add	r2, r3
 8003224:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <dataRxOn_USB+0x54>)
 8003226:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	b2c8      	uxtb	r0, r1
 800322e:	490b      	ldr	r1, [pc, #44]	@ (800325c <dataRxOn_USB+0x54>)
 8003230:	f881 0105 	strb.w	r0, [r1, #261]	@ 0x105
 8003234:	4619      	mov	r1, r3
 8003236:	7812      	ldrb	r2, [r2, #0]
 8003238:	4b08      	ldr	r3, [pc, #32]	@ (800325c <dataRxOn_USB+0x54>)
 800323a:	440b      	add	r3, r1
 800323c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
		for(uint16_t i = 0; i < len; i++){
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	3301      	adds	r3, #1
 8003244:	81fb      	strh	r3, [r7, #14]
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d8e7      	bhi.n	800321e <dataRxOn_USB+0x16>
		}
	}
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000f94 	.word	0x20000f94

08003260 <Motor_Left_SetPins>:

void Motor_Left_SetPins(uint8_t pinA, uint8_t pinB){
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	71fb      	strb	r3, [r7, #7]
 800326c:	4613      	mov	r3, r2
 800326e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, pinA);
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	461a      	mov	r2, r3
 8003274:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003278:	4806      	ldr	r0, [pc, #24]	@ (8003294 <Motor_Left_SetPins+0x34>)
 800327a:	f002 f849 	bl	8005310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, pinB);
 800327e:	79bb      	ldrb	r3, [r7, #6]
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003286:	4803      	ldr	r0, [pc, #12]	@ (8003294 <Motor_Left_SetPins+0x34>)
 8003288:	f002 f842 	bl	8005310 <HAL_GPIO_WritePin>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40020000 	.word	0x40020000

08003298 <Motor_Right_SetPins>:

void Motor_Right_SetPins(uint8_t pinA, uint8_t pinB){
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	460a      	mov	r2, r1
 80032a2:	71fb      	strb	r3, [r7, #7]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, pinA);
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032b0:	4806      	ldr	r0, [pc, #24]	@ (80032cc <Motor_Right_SetPins+0x34>)
 80032b2:	f002 f82d 	bl	8005310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, pinB);
 80032b6:	79bb      	ldrb	r3, [r7, #6]
 80032b8:	461a      	mov	r2, r3
 80032ba:	2108      	movs	r1, #8
 80032bc:	4804      	ldr	r0, [pc, #16]	@ (80032d0 <Motor_Right_SetPins+0x38>)
 80032be:	f002 f827 	bl	8005310 <HAL_GPIO_WritePin>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400

080032d4 <Motor_Left_SetPWM>:

void Motor_Left_SetPWM(uint16_t dCycle){
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, dCycle);
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <Motor_Left_SetPWM+0x20>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000a30 	.word	0x20000a30

080032f8 <Motor_Right_SetPWM>:

void Motor_Right_SetPWM(uint16_t dCycle){
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, dCycle);
 8003302:	4b05      	ldr	r3, [pc, #20]	@ (8003318 <Motor_Right_SetPWM+0x20>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000a30 	.word	0x20000a30

0800331c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003320:	b672      	cpsid	i
}
 8003322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <Error_Handler+0x8>

08003328 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	4b13      	ldr	r3, [pc, #76]	@ (8003380 <HAL_MspInit+0x58>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <HAL_MspInit+0x58>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800333c:	6453      	str	r3, [r2, #68]	@ 0x44
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <HAL_MspInit+0x58>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <HAL_MspInit+0x58>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_MspInit+0x58>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	@ 0x40
 800335a:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_MspInit+0x58>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8003366:	2200      	movs	r2, #0
 8003368:	2100      	movs	r1, #0
 800336a:	2051      	movs	r0, #81	@ 0x51
 800336c:	f001 f9e1 	bl	8004732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8003370:	2051      	movs	r0, #81	@ 0x51
 8003372:	f001 f9fa 	bl	800476a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a40      	ldr	r2, [pc, #256]	@ (80034a4 <HAL_ADC_MspInit+0x120>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d179      	bne.n	800349a <HAL_ADC_MspInit+0x116>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	4b3f      	ldr	r3, [pc, #252]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	4a3e      	ldr	r2, [pc, #248]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b6:	4b3c      	ldr	r3, [pc, #240]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	4b38      	ldr	r3, [pc, #224]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a37      	ldr	r2, [pc, #220]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	4b31      	ldr	r3, [pc, #196]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a30      	ldr	r2, [pc, #192]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b2e      	ldr	r3, [pc, #184]	@ (80034a8 <HAL_ADC_MspInit+0x124>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LF1_Pin|LF2_Pin|LF3_Pin|LF4_Pin
 80033fa:	23fe      	movs	r3, #254	@ 0xfe
 80033fc:	617b      	str	r3, [r7, #20]
                          |WD1_Pin|WD2_Pin|WD3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033fe:	2303      	movs	r3, #3
 8003400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	4827      	ldr	r0, [pc, #156]	@ (80034ac <HAL_ADC_MspInit+0x128>)
 800340e:	f001 fde3 	bl	8004fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WD4_Pin|BAT_LVL_Pin;
 8003412:	2303      	movs	r3, #3
 8003414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003416:	2303      	movs	r3, #3
 8003418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4619      	mov	r1, r3
 8003424:	4822      	ldr	r0, [pc, #136]	@ (80034b0 <HAL_ADC_MspInit+0x12c>)
 8003426:	f001 fdd7 	bl	8004fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 800342c:	4a22      	ldr	r2, [pc, #136]	@ (80034b8 <HAL_ADC_MspInit+0x134>)
 800342e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003430:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003432:	2200      	movs	r2, #0
 8003434:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003436:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800343c:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003442:	4b1c      	ldr	r3, [pc, #112]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003444:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003448:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800344a:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 800344c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003450:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003452:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003458:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800345a:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 800345c:	2200      	movs	r2, #0
 800345e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003462:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003466:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003468:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 800346a:	2200      	movs	r2, #0
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800346e:	4811      	ldr	r0, [pc, #68]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003470:	f001 f996 	bl	80047a0 <HAL_DMA_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800347a:	f7ff ff4f 	bl	800331c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a0c      	ldr	r2, [pc, #48]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38
 8003484:	4a0b      	ldr	r2, [pc, #44]	@ (80034b4 <HAL_ADC_MspInit+0x130>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	2012      	movs	r0, #18
 8003490:	f001 f94f 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003494:	2012      	movs	r0, #18
 8003496:	f001 f968 	bl	800476a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800349a:	bf00      	nop
 800349c:	3728      	adds	r7, #40	@ 0x28
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40012000 	.word	0x40012000
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	20000874 	.word	0x20000874
 80034b8:	40026410 	.word	0x40026410

080034bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	@ 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a50      	ldr	r2, [pc, #320]	@ (800361c <HAL_I2C_MspInit+0x160>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f040 8099 	bne.w	8003612 <HAL_I2C_MspInit+0x156>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	4b4e      	ldr	r3, [pc, #312]	@ (8003620 <HAL_I2C_MspInit+0x164>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003620 <HAL_I2C_MspInit+0x164>)
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003620 <HAL_I2C_MspInit+0x164>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80034fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003502:	2312      	movs	r3, #18
 8003504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800350e:	2304      	movs	r3, #4
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	f107 0314 	add.w	r3, r7, #20
 8003516:	4619      	mov	r1, r3
 8003518:	4842      	ldr	r0, [pc, #264]	@ (8003624 <HAL_I2C_MspInit+0x168>)
 800351a:	f001 fd5d 	bl	8004fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b3f      	ldr	r3, [pc, #252]	@ (8003620 <HAL_I2C_MspInit+0x164>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a3e      	ldr	r2, [pc, #248]	@ (8003620 <HAL_I2C_MspInit+0x164>)
 8003528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
 800352e:	4b3c      	ldr	r3, [pc, #240]	@ (8003620 <HAL_I2C_MspInit+0x164>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800353a:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 800353c:	4a3b      	ldr	r2, [pc, #236]	@ (800362c <HAL_I2C_MspInit+0x170>)
 800353e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003540:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003542:	2200      	movs	r2, #0
 8003544:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003546:	4b38      	ldr	r3, [pc, #224]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003548:	2240      	movs	r2, #64	@ 0x40
 800354a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800354c:	4b36      	ldr	r3, [pc, #216]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003552:	4b35      	ldr	r3, [pc, #212]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003554:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003558:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800355a:	4b33      	ldr	r3, [pc, #204]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003560:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003562:	2200      	movs	r2, #0
 8003564:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003566:	4b30      	ldr	r3, [pc, #192]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003568:	2200      	movs	r2, #0
 800356a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800356c:	4b2e      	ldr	r3, [pc, #184]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 800356e:	2200      	movs	r2, #0
 8003570:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003572:	4b2d      	ldr	r3, [pc, #180]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003574:	2200      	movs	r2, #0
 8003576:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003578:	482b      	ldr	r0, [pc, #172]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 800357a:	f001 f911 	bl	80047a0 <HAL_DMA_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8003584:	f7ff feca 	bl	800331c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a27      	ldr	r2, [pc, #156]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34
 800358e:	4a26      	ldr	r2, [pc, #152]	@ (8003628 <HAL_I2C_MspInit+0x16c>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003594:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 8003596:	4a27      	ldr	r2, [pc, #156]	@ (8003634 <HAL_I2C_MspInit+0x178>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800359a:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 800359c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035a0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035b4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80035ce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d0:	4b17      	ldr	r3, [pc, #92]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80035d6:	4816      	ldr	r0, [pc, #88]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035d8:	f001 f8e2 	bl	80047a0 <HAL_DMA_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80035e2:	f7ff fe9b 	bl	800331c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a11      	ldr	r2, [pc, #68]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80035ec:	4a10      	ldr	r2, [pc, #64]	@ (8003630 <HAL_I2C_MspInit+0x174>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	201f      	movs	r0, #31
 80035f8:	f001 f89b 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80035fc:	201f      	movs	r0, #31
 80035fe:	f001 f8b4 	bl	800476a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	2020      	movs	r0, #32
 8003608:	f001 f893 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800360c:	2020      	movs	r0, #32
 800360e:	f001 f8ac 	bl	800476a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003612:	bf00      	nop
 8003614:	3728      	adds	r7, #40	@ 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40005400 	.word	0x40005400
 8003620:	40023800 	.word	0x40023800
 8003624:	40020400 	.word	0x40020400
 8003628:	20000928 	.word	0x20000928
 800362c:	40026028 	.word	0x40026028
 8003630:	20000988 	.word	0x20000988
 8003634:	40026010 	.word	0x40026010

08003638 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1c      	ldr	r2, [pc, #112]	@ (80036b8 <HAL_TIM_Base_MspInit+0x80>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d116      	bne.n	8003678 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_TIM_Base_MspInit+0x84>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	4a1a      	ldr	r2, [pc, #104]	@ (80036bc <HAL_TIM_Base_MspInit+0x84>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6453      	str	r3, [r2, #68]	@ 0x44
 800365a:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <HAL_TIM_Base_MspInit+0x84>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	2019      	movs	r0, #25
 800366c:	f001 f861 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003670:	2019      	movs	r0, #25
 8003672:	f001 f87a 	bl	800476a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003676:	e01a      	b.n	80036ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a10      	ldr	r2, [pc, #64]	@ (80036c0 <HAL_TIM_Base_MspInit+0x88>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d115      	bne.n	80036ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_TIM_Base_MspInit+0x84>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	4a0c      	ldr	r2, [pc, #48]	@ (80036bc <HAL_TIM_Base_MspInit+0x84>)
 800368c:	f043 0302 	orr.w	r3, r3, #2
 8003690:	6413      	str	r3, [r2, #64]	@ 0x40
 8003692:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <HAL_TIM_Base_MspInit+0x84>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800369e:	2200      	movs	r2, #0
 80036a0:	2100      	movs	r1, #0
 80036a2:	201d      	movs	r0, #29
 80036a4:	f001 f845 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036a8:	201d      	movs	r0, #29
 80036aa:	f001 f85e 	bl	800476a <HAL_NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40000400 	.word	0x40000400

080036c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a12      	ldr	r2, [pc, #72]	@ (800372c <HAL_TIM_MspPostInit+0x68>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d11d      	bne.n	8003722 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <HAL_TIM_MspPostInit+0x6c>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	4a10      	ldr	r2, [pc, #64]	@ (8003730 <HAL_TIM_MspPostInit+0x6c>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_TIM_MspPostInit+0x6c>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = M1_PWM_Pin|M2_PWM_Pin;
 8003702:	2330      	movs	r3, #48	@ 0x30
 8003704:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003712:	2302      	movs	r3, #2
 8003714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 030c 	add.w	r3, r7, #12
 800371a:	4619      	mov	r1, r3
 800371c:	4805      	ldr	r0, [pc, #20]	@ (8003734 <HAL_TIM_MspPostInit+0x70>)
 800371e:	f001 fc5b 	bl	8004fd8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003722:	bf00      	nop
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40000400 	.word	0x40000400
 8003730:	40023800 	.word	0x40023800
 8003734:	40020400 	.word	0x40020400

08003738 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <HAL_UART_MspInit+0x94>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d133      	bne.n	80037c2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <HAL_UART_MspInit+0x98>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003762:	4a1b      	ldr	r2, [pc, #108]	@ (80037d0 <HAL_UART_MspInit+0x98>)
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	6453      	str	r3, [r2, #68]	@ 0x44
 800376a:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <HAL_UART_MspInit+0x98>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <HAL_UART_MspInit+0x98>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <HAL_UART_MspInit+0x98>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	6313      	str	r3, [r2, #48]	@ 0x30
 8003786:	4b12      	ldr	r3, [pc, #72]	@ (80037d0 <HAL_UART_MspInit+0x98>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ESP_RX_Pin|ESP_TX_Pin;
 8003792:	23c0      	movs	r3, #192	@ 0xc0
 8003794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2303      	movs	r3, #3
 80037a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037a2:	2307      	movs	r3, #7
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	4619      	mov	r1, r3
 80037ac:	4809      	ldr	r0, [pc, #36]	@ (80037d4 <HAL_UART_MspInit+0x9c>)
 80037ae:	f001 fc13 	bl	8004fd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2025      	movs	r0, #37	@ 0x25
 80037b8:	f000 ffbb 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037bc:	2025      	movs	r0, #37	@ 0x25
 80037be:	f000 ffd4 	bl	800476a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80037c2:	bf00      	nop
 80037c4:	3728      	adds	r7, #40	@ 0x28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40011000 	.word	0x40011000
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40020400 	.word	0x40020400

080037d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80037dc:	f007 f874 	bl	800a8c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <NMI_Handler+0x8>

080037e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <HardFault_Handler+0x4>

080037ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <MemManage_Handler+0x4>

080037f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <BusFault_Handler+0x4>

080037fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <UsageFault_Handler+0x4>

08003804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003832:	f000 f943 	bl	8003abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003840:	4802      	ldr	r0, [pc, #8]	@ (800384c <DMA1_Stream0_IRQHandler+0x10>)
 8003842:	f001 f945 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000988 	.word	0x20000988

08003850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003854:	4802      	ldr	r0, [pc, #8]	@ (8003860 <DMA1_Stream1_IRQHandler+0x10>)
 8003856:	f001 f93b 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000928 	.word	0x20000928

08003864 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003868:	4802      	ldr	r0, [pc, #8]	@ (8003874 <ADC_IRQHandler+0x10>)
 800386a:	f000 f9ae 	bl	8003bca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	2000082c 	.word	0x2000082c

08003878 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M2_ENC_A_Pin);
 800387c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003880:	f001 fd7a 	bl	8005378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}

08003888 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800388c:	4802      	ldr	r0, [pc, #8]	@ (8003898 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800388e:	f007 f9f1 	bl	800ac74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200009e8 	.word	0x200009e8

0800389c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038a0:	4802      	ldr	r0, [pc, #8]	@ (80038ac <TIM3_IRQHandler+0x10>)
 80038a2:	f007 f9e7 	bl	800ac74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000a30 	.word	0x20000a30

080038b0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80038b4:	4802      	ldr	r0, [pc, #8]	@ (80038c0 <I2C1_EV_IRQHandler+0x10>)
 80038b6:	f002 ff17 	bl	80066e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200008d4 	.word	0x200008d4

080038c4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80038c8:	4802      	ldr	r0, [pc, #8]	@ (80038d4 <I2C1_ER_IRQHandler+0x10>)
 80038ca:	f003 f87e 	bl	80069ca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200008d4 	.word	0x200008d4

080038d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038dc:	4802      	ldr	r0, [pc, #8]	@ (80038e8 <USART1_IRQHandler+0x10>)
 80038de:	f008 f83b 	bl	800b958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000a78 	.word	0x20000a78

080038ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(M1_ENC_A_Pin);
 80038f0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80038f4:	f001 fd40 	bl	8005378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003900:	4802      	ldr	r0, [pc, #8]	@ (800390c <DMA2_Stream0_IRQHandler+0x10>)
 8003902:	f001 f8e5 	bl	8004ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000874 	.word	0x20000874

08003910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003914:	4802      	ldr	r0, [pc, #8]	@ (8003920 <OTG_FS_IRQHandler+0x10>)
 8003916:	f005 fa64 	bl	8008de2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20001ab8 	.word	0x20001ab8

08003924 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	@ (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	@ (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	@ (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f00c ffb6 	bl	80108d4 <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	@ (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	@ (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20020000 	.word	0x20020000
 8003994:	00000400 	.word	0x00000400
 8003998:	200011cc 	.word	0x200011cc
 800399c:	20002308 	.word	0x20002308

080039a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039a4:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <SystemInit+0x20>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <SystemInit+0x20>)
 80039ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039c8:	f7ff ffea 	bl	80039a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039cc:	480c      	ldr	r0, [pc, #48]	@ (8003a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039ce:	490d      	ldr	r1, [pc, #52]	@ (8003a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d4:	e002      	b.n	80039dc <LoopCopyDataInit>

080039d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039da:	3304      	adds	r3, #4

080039dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e0:	d3f9      	bcc.n	80039d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e8:	e001      	b.n	80039ee <LoopFillZerobss>

080039ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039ec:	3204      	adds	r2, #4

080039ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f0:	d3fb      	bcc.n	80039ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039f2:	f00c ff75 	bl	80108e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039f6:	f7fe fdbd 	bl	8002574 <main>
  bx  lr    
 80039fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a04:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8003a08:	08012424 	.word	0x08012424
  ldr r2, =_sbss
 8003a0c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8003a10:	20002304 	.word	0x20002304

08003a14 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <DMA1_Stream2_IRQHandler>
	...

08003a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <HAL_Init+0x40>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <HAL_Init+0x40>)
 8003a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_Init+0x40>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <HAL_Init+0x40>)
 8003a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <HAL_Init+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <HAL_Init+0x40>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a40:	2003      	movs	r0, #3
 8003a42:	f000 fe6b 	bl	800471c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a46:	200f      	movs	r0, #15
 8003a48:	f000 f808 	bl	8003a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a4c:	f7ff fc6c 	bl	8003328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023c00 	.word	0x40023c00

08003a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a64:	4b12      	ldr	r3, [pc, #72]	@ (8003ab0 <HAL_InitTick+0x54>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <HAL_InitTick+0x58>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fe83 	bl	8004786 <HAL_SYSTICK_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e00e      	b.n	8003aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b0f      	cmp	r3, #15
 8003a8e:	d80a      	bhi.n	8003aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a90:	2200      	movs	r2, #0
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	f000 fe4b 	bl	8004732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a9c:	4a06      	ldr	r2, [pc, #24]	@ (8003ab8 <HAL_InitTick+0x5c>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e000      	b.n	8003aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000010 	.word	0x20000010
 8003ab4:	20000018 	.word	0x20000018
 8003ab8:	20000014 	.word	0x20000014

08003abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <HAL_IncTick+0x20>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_IncTick+0x24>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_IncTick+0x24>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000018 	.word	0x20000018
 8003ae0:	200011d0 	.word	0x200011d0

08003ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_GetTick+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	200011d0 	.word	0x200011d0

08003afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff ffee 	bl	8003ae4 <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b14:	d005      	beq.n	8003b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b16:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <HAL_Delay+0x44>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b22:	bf00      	nop
 8003b24:	f7ff ffde 	bl	8003ae4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d8f7      	bhi.n	8003b24 <HAL_Delay+0x28>
  {
  }
}
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000018 	.word	0x20000018

08003b44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e033      	b.n	8003bc2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fc0e 	bl	8003384 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b8a:	f023 0302 	bic.w	r3, r3, #2
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fb68 	bl	800426c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bb2:	e001      	b.n	8003bb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d049      	beq.n	8003c94 <HAL_ADC_IRQHandler+0xca>
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d046      	beq.n	8003c94 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d12b      	bne.n	8003c84 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d127      	bne.n	8003c84 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d119      	bne.n	8003c84 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0220 	bic.w	r2, r2, #32
 8003c5e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff f9d5 	bl	8003034 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f06f 0212 	mvn.w	r2, #18
 8003c92:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d057      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x190>
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d054      	beq.n	8003d5a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d105      	bne.n	8003cc8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d139      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d12b      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d124      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d11d      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d119      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d24:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	f043 0201 	orr.w	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fc0c 	bl	8004568 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 020c 	mvn.w	r2, #12
 8003d58:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x1d6>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d014      	beq.n	8003da0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d10d      	bne.n	8003da0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f925 	bl	8003fe0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0201 	mvn.w	r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003dae:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d015      	beq.n	8003de2 <HAL_ADC_IRQHandler+0x218>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc0:	f043 0202 	orr.w	r2, r3, #2
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0220 	mvn.w	r2, #32
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f90e 	bl	8003ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0220 	mvn.w	r2, #32
 8003de0:	601a      	str	r2, [r3, #0]
  }
}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d101      	bne.n	8003e0a <HAL_ADC_Start_DMA+0x1e>
 8003e06:	2302      	movs	r3, #2
 8003e08:	e0ce      	b.n	8003fa8 <HAL_ADC_Start_DMA+0x1bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d018      	beq.n	8003e52 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e30:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb0 <HAL_ADC_Start_DMA+0x1c4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5f      	ldr	r2, [pc, #380]	@ (8003fb4 <HAL_ADC_Start_DMA+0x1c8>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	0c9a      	lsrs	r2, r3, #18
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003e44:	e002      	b.n	8003e4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f9      	bne.n	8003e46 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e60:	d107      	bne.n	8003e72 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 8086 	bne.w	8003f8e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003eac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec0:	d106      	bne.n	8003ed0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f023 0206 	bic.w	r2, r3, #6
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ece:	e002      	b.n	8003ed6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ede:	4b36      	ldr	r3, [pc, #216]	@ (8003fb8 <HAL_ADC_Start_DMA+0x1cc>)
 8003ee0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	4a35      	ldr	r2, [pc, #212]	@ (8003fbc <HAL_ADC_Start_DMA+0x1d0>)
 8003ee8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	4a34      	ldr	r2, [pc, #208]	@ (8003fc0 <HAL_ADC_Start_DMA+0x1d4>)
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	4a33      	ldr	r2, [pc, #204]	@ (8003fc4 <HAL_ADC_Start_DMA+0x1d8>)
 8003ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003f02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f12:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f22:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	334c      	adds	r3, #76	@ 0x4c
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f000 fce2 	bl	80048fc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10f      	bne.n	8003f64 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d129      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	e020      	b.n	8003fa6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a17      	ldr	r2, [pc, #92]	@ (8003fc8 <HAL_ADC_Start_DMA+0x1dc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d11b      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1ba>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d114      	bne.n	8003fa6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00b      	b.n	8003fa6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f043 0210 	orr.w	r2, r3, #16
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0201 	orr.w	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000010 	.word	0x20000010
 8003fb4:	431bde83 	.word	0x431bde83
 8003fb8:	40012300 	.word	0x40012300
 8003fbc:	08004465 	.word	0x08004465
 8003fc0:	0800451f 	.word	0x0800451f
 8003fc4:	0800453b 	.word	0x0800453b
 8003fc8:	40012000 	.word	0x40012000

08003fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1c>
 8004020:	2302      	movs	r3, #2
 8004022:	e113      	b.n	800424c <HAL_ADC_ConfigChannel+0x244>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b09      	cmp	r3, #9
 8004032:	d925      	bls.n	8004080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68d9      	ldr	r1, [r3, #12]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	4613      	mov	r3, r2
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	4413      	add	r3, r2
 8004048:	3b1e      	subs	r3, #30
 800404a:	2207      	movs	r2, #7
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43da      	mvns	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	400a      	ands	r2, r1
 8004058:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68d9      	ldr	r1, [r3, #12]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	4603      	mov	r3, r0
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4403      	add	r3, r0
 8004072:	3b1e      	subs	r3, #30
 8004074:	409a      	lsls	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	e022      	b.n	80040c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6919      	ldr	r1, [r3, #16]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	2207      	movs	r2, #7
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	43da      	mvns	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	400a      	ands	r2, r1
 80040a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6919      	ldr	r1, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4618      	mov	r0, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4403      	add	r3, r0
 80040bc:	409a      	lsls	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d824      	bhi.n	8004118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	3b05      	subs	r3, #5
 80040e0:	221f      	movs	r2, #31
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43da      	mvns	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	400a      	ands	r2, r1
 80040ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	3b05      	subs	r3, #5
 800410a:	fa00 f203 	lsl.w	r2, r0, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	635a      	str	r2, [r3, #52]	@ 0x34
 8004116:	e04c      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b0c      	cmp	r3, #12
 800411e:	d824      	bhi.n	800416a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3b23      	subs	r3, #35	@ 0x23
 8004132:	221f      	movs	r2, #31
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43da      	mvns	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	400a      	ands	r2, r1
 8004140:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	4618      	mov	r0, r3
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	3b23      	subs	r3, #35	@ 0x23
 800415c:	fa00 f203 	lsl.w	r2, r0, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	631a      	str	r2, [r3, #48]	@ 0x30
 8004168:	e023      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b41      	subs	r3, #65	@ 0x41
 800417c:	221f      	movs	r2, #31
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	400a      	ands	r2, r1
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	b29b      	uxth	r3, r3
 8004198:	4618      	mov	r0, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	3b41      	subs	r3, #65	@ 0x41
 80041a6:	fa00 f203 	lsl.w	r2, r0, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041b2:	4b29      	ldr	r3, [pc, #164]	@ (8004258 <HAL_ADC_ConfigChannel+0x250>)
 80041b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a28      	ldr	r2, [pc, #160]	@ (800425c <HAL_ADC_ConfigChannel+0x254>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10f      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x1d8>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b12      	cmp	r3, #18
 80041c6:	d10b      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <HAL_ADC_ConfigChannel+0x254>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d12b      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x23a>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <HAL_ADC_ConfigChannel+0x258>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <HAL_ADC_ConfigChannel+0x1f4>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b11      	cmp	r3, #17
 80041fa:	d122      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a11      	ldr	r2, [pc, #68]	@ (8004260 <HAL_ADC_ConfigChannel+0x258>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d111      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800421e:	4b11      	ldr	r3, [pc, #68]	@ (8004264 <HAL_ADC_ConfigChannel+0x25c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a11      	ldr	r2, [pc, #68]	@ (8004268 <HAL_ADC_ConfigChannel+0x260>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	0c9a      	lsrs	r2, r3, #18
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004234:	e002      	b.n	800423c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3b01      	subs	r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f9      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40012300 	.word	0x40012300
 800425c:	40012000 	.word	0x40012000
 8004260:	10000012 	.word	0x10000012
 8004264:	20000010 	.word	0x20000010
 8004268:	431bde83 	.word	0x431bde83

0800426c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004274:	4b79      	ldr	r3, [pc, #484]	@ (800445c <ADC_Init+0x1f0>)
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6899      	ldr	r1, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	4a58      	ldr	r2, [pc, #352]	@ (8004460 <ADC_Init+0x1f4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d022      	beq.n	800434a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004312:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6899      	ldr	r1, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	e00f      	b.n	800436a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004368:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0202 	bic.w	r2, r2, #2
 8004378:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6899      	ldr	r1, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7e1b      	ldrb	r3, [r3, #24]
 8004384:	005a      	lsls	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	3b01      	subs	r3, #1
 80043c4:	035a      	lsls	r2, r3, #13
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	e007      	b.n	80043e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80043ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	051a      	lsls	r2, r3, #20
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004422:	025a      	lsls	r2, r3, #9
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800443a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6899      	ldr	r1, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	029a      	lsls	r2, r3, #10
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40012300 	.word	0x40012300
 8004460:	0f000001 	.word	0x0f000001

08004464 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d13c      	bne.n	80044f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d12b      	bne.n	80044f0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800449c:	2b00      	cmp	r3, #0
 800449e:	d127      	bne.n	80044f0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d006      	beq.n	80044bc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d119      	bne.n	80044f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0220 	bic.w	r2, r2, #32
 80044ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	f043 0201 	orr.w	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7fe fd9f 	bl	8003034 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044f6:	e00e      	b.n	8004516 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff fd75 	bl	8003ff4 <HAL_ADC_ErrorCallback>
}
 800450a:	e004      	b.n	8004516 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fd4d 	bl	8003fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2240      	movs	r2, #64	@ 0x40
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7ff fd4a 	bl	8003ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800458c:	4b0c      	ldr	r3, [pc, #48]	@ (80045c0 <__NVIC_SetPriorityGrouping+0x44>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004598:	4013      	ands	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ae:	4a04      	ldr	r2, [pc, #16]	@ (80045c0 <__NVIC_SetPriorityGrouping+0x44>)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	60d3      	str	r3, [r2, #12]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c8:	4b04      	ldr	r3, [pc, #16]	@ (80045dc <__NVIC_GetPriorityGrouping+0x18>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	0a1b      	lsrs	r3, r3, #8
 80045ce:	f003 0307 	and.w	r3, r3, #7
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	db0b      	blt.n	800460a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	f003 021f 	and.w	r2, r3, #31
 80045f8:	4907      	ldr	r1, [pc, #28]	@ (8004618 <__NVIC_EnableIRQ+0x38>)
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	2001      	movs	r0, #1
 8004602:	fa00 f202 	lsl.w	r2, r0, r2
 8004606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	e000e100 	.word	0xe000e100

0800461c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	6039      	str	r1, [r7, #0]
 8004626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462c:	2b00      	cmp	r3, #0
 800462e:	db0a      	blt.n	8004646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	490c      	ldr	r1, [pc, #48]	@ (8004668 <__NVIC_SetPriority+0x4c>)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	0112      	lsls	r2, r2, #4
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	440b      	add	r3, r1
 8004640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004644:	e00a      	b.n	800465c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	4908      	ldr	r1, [pc, #32]	@ (800466c <__NVIC_SetPriority+0x50>)
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	3b04      	subs	r3, #4
 8004654:	0112      	lsls	r2, r2, #4
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	440b      	add	r3, r1
 800465a:	761a      	strb	r2, [r3, #24]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	e000e100 	.word	0xe000e100
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f1c3 0307 	rsb	r3, r3, #7
 800468a:	2b04      	cmp	r3, #4
 800468c:	bf28      	it	cs
 800468e:	2304      	movcs	r3, #4
 8004690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3304      	adds	r3, #4
 8004696:	2b06      	cmp	r3, #6
 8004698:	d902      	bls.n	80046a0 <NVIC_EncodePriority+0x30>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3b03      	subs	r3, #3
 800469e:	e000      	b.n	80046a2 <NVIC_EncodePriority+0x32>
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a4:	f04f 32ff 	mov.w	r2, #4294967295
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	401a      	ands	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b8:	f04f 31ff 	mov.w	r1, #4294967295
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	43d9      	mvns	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c8:	4313      	orrs	r3, r2
         );
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3724      	adds	r7, #36	@ 0x24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046e8:	d301      	bcc.n	80046ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00f      	b.n	800470e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004718 <SysTick_Config+0x40>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046f6:	210f      	movs	r1, #15
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	f7ff ff8e 	bl	800461c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004700:	4b05      	ldr	r3, [pc, #20]	@ (8004718 <SysTick_Config+0x40>)
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004706:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <SysTick_Config+0x40>)
 8004708:	2207      	movs	r2, #7
 800470a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	e000e010 	.word	0xe000e010

0800471c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff ff29 	bl	800457c <__NVIC_SetPriorityGrouping>
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004744:	f7ff ff3e 	bl	80045c4 <__NVIC_GetPriorityGrouping>
 8004748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	6978      	ldr	r0, [r7, #20]
 8004750:	f7ff ff8e 	bl	8004670 <NVIC_EncodePriority>
 8004754:	4602      	mov	r2, r0
 8004756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff ff5d 	bl	800461c <__NVIC_SetPriority>
}
 8004762:	bf00      	nop
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	4603      	mov	r3, r0
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ff31 	bl	80045e0 <__NVIC_EnableIRQ>
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ffa2 	bl	80046d8 <SysTick_Config>
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff f99a 	bl	8003ae4 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e099      	b.n	80048f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047dc:	e00f      	b.n	80047fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047de:	f7ff f981 	bl	8003ae4 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d908      	bls.n	80047fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2220      	movs	r2, #32
 80047f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2203      	movs	r2, #3
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e078      	b.n	80048f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e8      	bne.n	80047de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <HAL_DMA_Init+0x158>)
 8004818:	4013      	ands	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800482a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	2b04      	cmp	r3, #4
 8004856:	d107      	bne.n	8004868 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	4313      	orrs	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	2b04      	cmp	r3, #4
 8004890:	d117      	bne.n	80048c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb1b 	bl	8004ee0 <DMA_CheckFifoParam>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2240      	movs	r2, #64	@ 0x40
 80048b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80048be:	2301      	movs	r3, #1
 80048c0:	e016      	b.n	80048f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fad2 	bl	8004e74 <DMA_CalcBaseAndBitshift>
 80048d0:	4603      	mov	r3, r0
 80048d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d8:	223f      	movs	r2, #63	@ 0x3f
 80048da:	409a      	lsls	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	f010803f 	.word	0xf010803f

080048fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004912:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_DMA_Start_IT+0x26>
 800491e:	2302      	movs	r3, #2
 8004920:	e040      	b.n	80049a4 <HAL_DMA_Start_IT+0xa8>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d12f      	bne.n	8004996 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fa64 	bl	8004e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	223f      	movs	r2, #63	@ 0x3f
 8004956:	409a      	lsls	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0216 	orr.w	r2, r2, #22
 800496a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e005      	b.n	80049a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800499e:	2302      	movs	r3, #2
 80049a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049ba:	f7ff f893 	bl	8003ae4 <HAL_GetTick>
 80049be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d008      	beq.n	80049de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2280      	movs	r2, #128	@ 0x80
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e052      	b.n	8004a84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0216 	bic.w	r2, r2, #22
 80049ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <HAL_DMA_Abort+0x62>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0208 	bic.w	r2, r2, #8
 8004a1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a2e:	e013      	b.n	8004a58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a30:	f7ff f858 	bl	8003ae4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d90c      	bls.n	8004a58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2203      	movs	r2, #3
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e015      	b.n	8004a84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e4      	bne.n	8004a30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6a:	223f      	movs	r2, #63	@ 0x3f
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2280      	movs	r2, #128	@ 0x80
 8004aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e00c      	b.n	8004ac4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2205      	movs	r2, #5
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004adc:	4b8e      	ldr	r3, [pc, #568]	@ (8004d18 <HAL_DMA_IRQHandler+0x248>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a8e      	ldr	r2, [pc, #568]	@ (8004d1c <HAL_DMA_IRQHandler+0x24c>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0a9b      	lsrs	r3, r3, #10
 8004ae8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afa:	2208      	movs	r2, #8
 8004afc:	409a      	lsls	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01a      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d013      	beq.n	8004b3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	2208      	movs	r2, #8
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b34:	f043 0201 	orr.w	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	2204      	movs	r2, #4
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d012      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b94:	2204      	movs	r2, #4
 8004b96:	409a      	lsls	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f043 0204 	orr.w	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bac:	2210      	movs	r2, #16
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d043      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d03c      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	2210      	movs	r2, #16
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d018      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d108      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d024      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	4798      	blx	r3
 8004bfe:	e01f      	b.n	8004c40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
 8004c10:	e016      	b.n	8004c40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d107      	bne.n	8004c30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0208 	bic.w	r2, r2, #8
 8004c2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c44:	2220      	movs	r2, #32
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 808f 	beq.w	8004d70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 8087 	beq.w	8004d70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	2220      	movs	r2, #32
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d136      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0216 	bic.w	r2, r2, #22
 8004c88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_DMA_IRQHandler+0x1da>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d007      	beq.n	8004cba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0208 	bic.w	r2, r2, #8
 8004cb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbe:	223f      	movs	r2, #63	@ 0x3f
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d07e      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
        }
        return;
 8004ce6:	e079      	b.n	8004ddc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01d      	beq.n	8004d32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10d      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d031      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
 8004d14:	e02c      	b.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
 8004d16:	bf00      	nop
 8004d18:	20000010 	.word	0x20000010
 8004d1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d023      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	4798      	blx	r3
 8004d30:	e01e      	b.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10f      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0210 	bic.w	r2, r2, #16
 8004d4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d032      	beq.n	8004dde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d022      	beq.n	8004dca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2205      	movs	r2, #5
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d307      	bcc.n	8004db8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f2      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x2cc>
 8004db6:	e000      	b.n	8004dba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004db8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	4798      	blx	r3
 8004dda:	e000      	b.n	8004dde <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ddc:	bf00      	nop
    }
  }
}
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004df2:	b2db      	uxtb	r3, r3
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d108      	bne.n	8004e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e56:	e007      	b.n	8004e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	60da      	str	r2, [r3, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	3b10      	subs	r3, #16
 8004e84:	4a14      	ldr	r2, [pc, #80]	@ (8004ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e8e:	4a13      	ldr	r2, [pc, #76]	@ (8004edc <DMA_CalcBaseAndBitshift+0x68>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d909      	bls.n	8004eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004eb4:	e007      	b.n	8004ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	aaaaaaab 	.word	0xaaaaaaab
 8004edc:	080123d8 	.word	0x080123d8

08004ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11f      	bne.n	8004f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d856      	bhi.n	8004fae <DMA_CheckFifoParam+0xce>
 8004f00:	a201      	add	r2, pc, #4	@ (adr r2, 8004f08 <DMA_CheckFifoParam+0x28>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f2b 	.word	0x08004f2b
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004faf 	.word	0x08004faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d046      	beq.n	8004fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f28:	e043      	b.n	8004fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f32:	d140      	bne.n	8004fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e03d      	b.n	8004fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f42:	d121      	bne.n	8004f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d837      	bhi.n	8004fba <DMA_CheckFifoParam+0xda>
 8004f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f50 <DMA_CheckFifoParam+0x70>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f67 	.word	0x08004f67
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	08004f79 	.word	0x08004f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e030      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d025      	beq.n	8004fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f76:	e022      	b.n	8004fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f80:	d11f      	bne.n	8004fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f86:	e01c      	b.n	8004fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d903      	bls.n	8004f96 <DMA_CheckFifoParam+0xb6>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d003      	beq.n	8004f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f94:	e018      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9a:	e015      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e00b      	b.n	8004fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e00a      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e008      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e006      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e004      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	@ 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e159      	b.n	80052a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4013      	ands	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	f040 8148 	bne.w	80052a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d005      	beq.n	800502a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005026:	2b02      	cmp	r3, #2
 8005028:	d130      	bne.n	800508c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	2203      	movs	r2, #3
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005060:	2201      	movs	r2, #1
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 0201 	and.w	r2, r3, #1
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b03      	cmp	r3, #3
 8005096:	d017      	beq.n	80050c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2203      	movs	r2, #3
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d123      	bne.n	800511c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	08da      	lsrs	r2, r3, #3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3208      	adds	r2, #8
 80050dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	220f      	movs	r2, #15
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	08da      	lsrs	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3208      	adds	r2, #8
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 0203 	and.w	r2, r3, #3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80a2 	beq.w	80052a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	4b57      	ldr	r3, [pc, #348]	@ (80052c0 <HAL_GPIO_Init+0x2e8>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	4a56      	ldr	r2, [pc, #344]	@ (80052c0 <HAL_GPIO_Init+0x2e8>)
 8005168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800516c:	6453      	str	r3, [r2, #68]	@ 0x44
 800516e:	4b54      	ldr	r3, [pc, #336]	@ (80052c0 <HAL_GPIO_Init+0x2e8>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800517a:	4a52      	ldr	r2, [pc, #328]	@ (80052c4 <HAL_GPIO_Init+0x2ec>)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	3302      	adds	r3, #2
 8005182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	220f      	movs	r2, #15
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a49      	ldr	r2, [pc, #292]	@ (80052c8 <HAL_GPIO_Init+0x2f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d019      	beq.n	80051da <HAL_GPIO_Init+0x202>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a48      	ldr	r2, [pc, #288]	@ (80052cc <HAL_GPIO_Init+0x2f4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_GPIO_Init+0x1fe>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a47      	ldr	r2, [pc, #284]	@ (80052d0 <HAL_GPIO_Init+0x2f8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00d      	beq.n	80051d2 <HAL_GPIO_Init+0x1fa>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a46      	ldr	r2, [pc, #280]	@ (80052d4 <HAL_GPIO_Init+0x2fc>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <HAL_GPIO_Init+0x1f6>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a45      	ldr	r2, [pc, #276]	@ (80052d8 <HAL_GPIO_Init+0x300>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_GPIO_Init+0x1f2>
 80051c6:	2304      	movs	r3, #4
 80051c8:	e008      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051ca:	2307      	movs	r3, #7
 80051cc:	e006      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e004      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e002      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_GPIO_Init+0x204>
 80051da:	2300      	movs	r3, #0
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	4093      	lsls	r3, r2
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ec:	4935      	ldr	r1, [pc, #212]	@ (80052c4 <HAL_GPIO_Init+0x2ec>)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	3302      	adds	r3, #2
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051fa:	4b38      	ldr	r3, [pc, #224]	@ (80052dc <HAL_GPIO_Init+0x304>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	43db      	mvns	r3, r3
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4013      	ands	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521e:	4a2f      	ldr	r2, [pc, #188]	@ (80052dc <HAL_GPIO_Init+0x304>)
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005224:	4b2d      	ldr	r3, [pc, #180]	@ (80052dc <HAL_GPIO_Init+0x304>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	43db      	mvns	r3, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4013      	ands	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005248:	4a24      	ldr	r2, [pc, #144]	@ (80052dc <HAL_GPIO_Init+0x304>)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800524e:	4b23      	ldr	r3, [pc, #140]	@ (80052dc <HAL_GPIO_Init+0x304>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005272:	4a1a      	ldr	r2, [pc, #104]	@ (80052dc <HAL_GPIO_Init+0x304>)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005278:	4b18      	ldr	r3, [pc, #96]	@ (80052dc <HAL_GPIO_Init+0x304>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800529c:	4a0f      	ldr	r2, [pc, #60]	@ (80052dc <HAL_GPIO_Init+0x304>)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b0f      	cmp	r3, #15
 80052ac:	f67f aea2 	bls.w	8004ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3724      	adds	r7, #36	@ 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020800 	.word	0x40020800
 80052d4:	40020c00 	.word	0x40020c00
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40013c00 	.word	0x40013c00

080052e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	887b      	ldrh	r3, [r7, #2]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052f8:	2301      	movs	r3, #1
 80052fa:	73fb      	strb	r3, [r7, #15]
 80052fc:	e001      	b.n	8005302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005302:	7bfb      	ldrb	r3, [r7, #15]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005320:	787b      	ldrb	r3, [r7, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800532c:	e003      	b.n	8005336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532e:	887b      	ldrh	r3, [r7, #2]
 8005330:	041a      	lsls	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	619a      	str	r2, [r3, #24]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005354:	887a      	ldrh	r2, [r7, #2]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4013      	ands	r3, r2
 800535a:	041a      	lsls	r2, r3, #16
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43d9      	mvns	r1, r3
 8005360:	887b      	ldrh	r3, [r7, #2]
 8005362:	400b      	ands	r3, r1
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	619a      	str	r2, [r3, #24]
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005382:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d006      	beq.n	800539c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800538e:	4a05      	ldr	r2, [pc, #20]	@ (80053a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fd fe5c 	bl	8003054 <HAL_GPIO_EXTI_Callback>
  }
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40013c00 	.word	0x40013c00

080053a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e12b      	b.n	8005612 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fe f874 	bl	80034bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2224      	movs	r2, #36	@ 0x24
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800540a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800540c:	f005 fa34 	bl	800a878 <HAL_RCC_GetPCLK1Freq>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4a81      	ldr	r2, [pc, #516]	@ (800561c <HAL_I2C_Init+0x274>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d807      	bhi.n	800542c <HAL_I2C_Init+0x84>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a80      	ldr	r2, [pc, #512]	@ (8005620 <HAL_I2C_Init+0x278>)
 8005420:	4293      	cmp	r3, r2
 8005422:	bf94      	ite	ls
 8005424:	2301      	movls	r3, #1
 8005426:	2300      	movhi	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e006      	b.n	800543a <HAL_I2C_Init+0x92>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a7d      	ldr	r2, [pc, #500]	@ (8005624 <HAL_I2C_Init+0x27c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	bf94      	ite	ls
 8005434:	2301      	movls	r3, #1
 8005436:	2300      	movhi	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0e7      	b.n	8005612 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a78      	ldr	r2, [pc, #480]	@ (8005628 <HAL_I2C_Init+0x280>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a6a      	ldr	r2, [pc, #424]	@ (800561c <HAL_I2C_Init+0x274>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d802      	bhi.n	800547c <HAL_I2C_Init+0xd4>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3301      	adds	r3, #1
 800547a:	e009      	b.n	8005490 <HAL_I2C_Init+0xe8>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	4a69      	ldr	r2, [pc, #420]	@ (800562c <HAL_I2C_Init+0x284>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	099b      	lsrs	r3, r3, #6
 800548e:	3301      	adds	r3, #1
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	495c      	ldr	r1, [pc, #368]	@ (800561c <HAL_I2C_Init+0x274>)
 80054ac:	428b      	cmp	r3, r1
 80054ae:	d819      	bhi.n	80054e4 <HAL_I2C_Init+0x13c>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1e59      	subs	r1, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80054c4:	400b      	ands	r3, r1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_I2C_Init+0x138>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1e59      	subs	r1, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054d8:	3301      	adds	r3, #1
 80054da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054de:	e051      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 80054e0:	2304      	movs	r3, #4
 80054e2:	e04f      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d111      	bne.n	8005510 <HAL_I2C_Init+0x168>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1e58      	subs	r0, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	440b      	add	r3, r1
 80054fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054fe:	3301      	adds	r3, #1
 8005500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e012      	b.n	8005536 <HAL_I2C_Init+0x18e>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1e58      	subs	r0, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6859      	ldr	r1, [r3, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	0099      	lsls	r1, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	fbb0 f3f3 	udiv	r3, r0, r3
 8005526:	3301      	adds	r3, #1
 8005528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Init+0x196>
 800553a:	2301      	movs	r3, #1
 800553c:	e022      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10e      	bne.n	8005564 <HAL_I2C_Init+0x1bc>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1e58      	subs	r0, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	440b      	add	r3, r1
 8005554:	fbb0 f3f3 	udiv	r3, r0, r3
 8005558:	3301      	adds	r3, #1
 800555a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005562:	e00f      	b.n	8005584 <HAL_I2C_Init+0x1dc>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e58      	subs	r0, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	0099      	lsls	r1, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	6809      	ldr	r1, [r1, #0]
 8005588:	4313      	orrs	r3, r2
 800558a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6911      	ldr	r1, [r2, #16]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68d2      	ldr	r2, [r2, #12]
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	000186a0 	.word	0x000186a0
 8005620:	001e847f 	.word	0x001e847f
 8005624:	003d08ff 	.word	0x003d08ff
 8005628:	431bde83 	.word	0x431bde83
 800562c:	10624dd3 	.word	0x10624dd3

08005630 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005642:	2b80      	cmp	r3, #128	@ 0x80
 8005644:	d103      	bne.n	800564e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	611a      	str	r2, [r3, #16]
  }
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	461a      	mov	r2, r3
 8005668:	460b      	mov	r3, r1
 800566a:	817b      	strh	r3, [r7, #10]
 800566c:	4613      	mov	r3, r2
 800566e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005670:	f7fe fa38 	bl	8003ae4 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b20      	cmp	r3, #32
 8005680:	f040 80e0 	bne.w	8005844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	2319      	movs	r3, #25
 800568a:	2201      	movs	r2, #1
 800568c:	4970      	ldr	r1, [pc, #448]	@ (8005850 <HAL_I2C_Master_Transmit+0x1f4>)
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f002 ffe0 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
 800569c:	e0d3      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_I2C_Master_Transmit+0x50>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0cc      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d007      	beq.n	80056d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2221      	movs	r2, #33	@ 0x21
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2210      	movs	r2, #16
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	893a      	ldrh	r2, [r7, #8]
 8005702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a50      	ldr	r2, [pc, #320]	@ (8005854 <HAL_I2C_Master_Transmit+0x1f8>)
 8005712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005714:	8979      	ldrh	r1, [r7, #10]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a3a      	ldr	r2, [r7, #32]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f002 fbd6 	bl	8007ecc <I2C_MasterRequestWrite>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e08d      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005740:	e066      	b.n	8005810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6a39      	ldr	r1, [r7, #32]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f003 f89e 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	2b04      	cmp	r3, #4
 8005758:	d107      	bne.n	800576a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06b      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d11b      	bne.n	80057e4 <HAL_I2C_Master_Transmit+0x188>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	6a39      	ldr	r1, [r7, #32]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f003 f895 	bl	8008918 <I2C_WaitOnBTFFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00d      	beq.n	8005810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d107      	bne.n	800580c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800580a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e01a      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d194      	bne.n	8005742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e000      	b.n	8005846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	00100002 	.word	0x00100002
 8005854:	ffff0000 	.word	0xffff0000

08005858 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	4603      	mov	r3, r0
 8005868:	817b      	strh	r3, [r7, #10]
 800586a:	460b      	mov	r3, r1
 800586c:	813b      	strh	r3, [r7, #8]
 800586e:	4613      	mov	r3, r2
 8005870:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005872:	f7fe f937 	bl	8003ae4 <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b20      	cmp	r3, #32
 8005882:	f040 80d9 	bne.w	8005a38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	2319      	movs	r3, #25
 800588c:	2201      	movs	r2, #1
 800588e:	496d      	ldr	r1, [pc, #436]	@ (8005a44 <HAL_I2C_Mem_Write+0x1ec>)
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f002 fedf 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
 800589e:	e0cc      	b.n	8005a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_I2C_Mem_Write+0x56>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0c5      	b.n	8005a3a <HAL_I2C_Mem_Write+0x1e2>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d007      	beq.n	80058d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2221      	movs	r2, #33	@ 0x21
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2240      	movs	r2, #64	@ 0x40
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a3a      	ldr	r2, [r7, #32]
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4a4d      	ldr	r2, [pc, #308]	@ (8005a48 <HAL_I2C_Mem_Write+0x1f0>)
 8005914:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005916:	88f8      	ldrh	r0, [r7, #6]
 8005918:	893a      	ldrh	r2, [r7, #8]
 800591a:	8979      	ldrh	r1, [r7, #10]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f002 fb52 	bl	8007fd0 <I2C_RequestMemoryWrite>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d052      	beq.n	80059d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e081      	b.n	8005a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f002 ffa4 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00d      	beq.n	8005962 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594a:	2b04      	cmp	r3, #4
 800594c:	d107      	bne.n	800595e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e06b      	b.n	8005a3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	781a      	ldrb	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b04      	cmp	r3, #4
 800599e:	d11b      	bne.n	80059d8 <HAL_I2C_Mem_Write+0x180>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d017      	beq.n	80059d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1aa      	bne.n	8005936 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f002 ff97 	bl	8008918 <I2C_WaitOnBTFFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d107      	bne.n	8005a08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e016      	b.n	8005a3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e000      	b.n	8005a3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	00100002 	.word	0x00100002
 8005a48:	ffff0000 	.word	0xffff0000

08005a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	@ 0x30
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	4608      	mov	r0, r1
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	817b      	strh	r3, [r7, #10]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	813b      	strh	r3, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a66:	f7fe f83d 	bl	8003ae4 <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	f040 8214 	bne.w	8005ea2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	2319      	movs	r3, #25
 8005a80:	2201      	movs	r2, #1
 8005a82:	497b      	ldr	r1, [pc, #492]	@ (8005c70 <HAL_I2C_Mem_Read+0x224>)
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f002 fde5 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
 8005a92:	e207      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2C_Mem_Read+0x56>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e200      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d007      	beq.n	8005ac8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2222      	movs	r2, #34	@ 0x22
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2240      	movs	r2, #64	@ 0x40
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a5b      	ldr	r2, [pc, #364]	@ (8005c74 <HAL_I2C_Mem_Read+0x228>)
 8005b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b0a:	88f8      	ldrh	r0, [r7, #6]
 8005b0c:	893a      	ldrh	r2, [r7, #8]
 8005b0e:	8979      	ldrh	r1, [r7, #10]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	4603      	mov	r3, r0
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f002 faee 	bl	80080fc <I2C_RequestMemoryRead>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e1bc      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d113      	bne.n	8005b5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e190      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d11b      	bne.n	8005b9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e170      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d11b      	bne.n	8005bda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	e150      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	617b      	str	r3, [r7, #20]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	617b      	str	r3, [r7, #20]
 8005bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bf0:	e144      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	f200 80f1 	bhi.w	8005dde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d123      	bne.n	8005c4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f002 feff 	bl	8008a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e145      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b01      	subs	r3, #1
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c4a:	e117      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d14e      	bne.n	8005cf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	4906      	ldr	r1, [pc, #24]	@ (8005c78 <HAL_I2C_Mem_Read+0x22c>)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f002 fcf8 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e11a      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
 8005c6e:	bf00      	nop
 8005c70:	00100002 	.word	0x00100002
 8005c74:	ffff0000 	.word	0xffff0000
 8005c78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cf0:	e0c4      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	496c      	ldr	r1, [pc, #432]	@ (8005eac <HAL_I2C_Mem_Read+0x460>)
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f002 fca9 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0cb      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	4955      	ldr	r1, [pc, #340]	@ (8005eac <HAL_I2C_Mem_Read+0x460>)
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f002 fc7b 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e09d      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ddc:	e04e      	b.n	8005e7c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f002 fe12 	bl	8008a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e058      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d124      	bne.n	8005e7c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d107      	bne.n	8005e4a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e48:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	3b01      	subs	r3, #1
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f47f aeb6 	bne.w	8005bf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3728      	adds	r7, #40	@ 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	00010004 	.word	0x00010004

08005eb0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	817b      	strh	r3, [r7, #10]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	813b      	strh	r3, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ece:	f7fd fe09 	bl	8003ae4 <HAL_GetTick>
 8005ed2:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	f040 8136 	bne.w	800614e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ee2:	4b9d      	ldr	r3, [pc, #628]	@ (8006158 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	4a9c      	ldr	r2, [pc, #624]	@ (800615c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	0a1a      	lsrs	r2, r3, #8
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009a      	lsls	r2, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d112      	bne.n	8005f2e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e110      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d0df      	beq.n	8005efc <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_I2C_Mem_Write_DMA+0x9a>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e102      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d007      	beq.n	8005f70 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f042 0201 	orr.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2221      	movs	r2, #33	@ 0x21
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2240      	movs	r2, #64	@ 0x40
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8005fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a6c      	ldr	r2, [pc, #432]	@ (8006160 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8005fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005fb2:	897a      	ldrh	r2, [r7, #10]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005fb8:	893a      	ldrh	r2, [r7, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80a9 	beq.w	8006126 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d02a      	beq.n	8006032 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe0:	4a60      	ldr	r2, [pc, #384]	@ (8006164 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8005fe2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe8:	4a5f      	ldr	r2, [pc, #380]	@ (8006168 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8005fea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006000:	2200      	movs	r2, #0
 8006002:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006008:	2200      	movs	r2, #0
 800600a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	4619      	mov	r1, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3310      	adds	r3, #16
 800601c:	461a      	mov	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006022:	f7fe fc6b 	bl	80048fc <HAL_DMA_Start_IT>
 8006026:	4603      	mov	r3, r0
 8006028:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800602a:	7efb      	ldrb	r3, [r7, #27]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d166      	bne.n	80060fe <HAL_I2C_Mem_Write_DMA+0x24e>
 8006030:	e013      	b.n	800605a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e07a      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800605a:	88f8      	ldrh	r0, [r7, #6]
 800605c:	893a      	ldrh	r2, [r7, #8]
 800605e:	8979      	ldrh	r1, [r7, #10]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	2323      	movs	r3, #35	@ 0x23
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	4603      	mov	r3, r0
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f001 ffb0 	bl	8007fd0 <I2C_RequestMemoryWrite>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d022      	beq.n	80060bc <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fd06 	bl	8004a8c <HAL_DMA_Abort_IT>
 8006080:	4603      	mov	r3, r0
 8006082:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006088:	2200      	movs	r2, #0
 800608a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800609a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e049      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060e8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f8:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	e028      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	f043 0210 	orr.w	r2, r3, #16
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e014      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
  }
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000010 	.word	0x20000010
 800615c:	14f8b589 	.word	0x14f8b589
 8006160:	ffff0000 	.word	0xffff0000
 8006164:	080082cd 	.word	0x080082cd
 8006168:	0800848b 	.word	0x0800848b

0800616c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08c      	sub	sp, #48	@ 0x30
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	4608      	mov	r0, r1
 8006176:	4611      	mov	r1, r2
 8006178:	461a      	mov	r2, r3
 800617a:	4603      	mov	r3, r0
 800617c:	817b      	strh	r3, [r7, #10]
 800617e:	460b      	mov	r3, r1
 8006180:	813b      	strh	r3, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006186:	f7fd fcad 	bl	8003ae4 <HAL_GetTick>
 800618a:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b20      	cmp	r3, #32
 800619a:	f040 8172 	bne.w	8006482 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800619e:	4b93      	ldr	r3, [pc, #588]	@ (80063ec <HAL_I2C_Mem_Read_DMA+0x280>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	4a92      	ldr	r2, [pc, #584]	@ (80063f0 <HAL_I2C_Mem_Read_DMA+0x284>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	0a1a      	lsrs	r2, r3, #8
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009a      	lsls	r2, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d112      	bne.n	80061ea <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
 80061e8:	e14c      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d0df      	beq.n	80061b8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_I2C_Mem_Read_DMA+0x9a>
 8006202:	2302      	movs	r3, #2
 8006204:	e13e      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	d007      	beq.n	800622c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800623a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2222      	movs	r2, #34	@ 0x22
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2240      	movs	r2, #64	@ 0x40
 8006248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006256:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800625c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a62      	ldr	r2, [pc, #392]	@ (80063f4 <HAL_I2C_Mem_Read_DMA+0x288>)
 800626c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800626e:	897a      	ldrh	r2, [r7, #10]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8006274:	893a      	ldrh	r2, [r7, #8]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80cc 	beq.w	8006428 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02d      	beq.n	80062f4 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629c:	4a56      	ldr	r2, [pc, #344]	@ (80063f8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800629e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	4a55      	ldr	r2, [pc, #340]	@ (80063fc <HAL_I2C_Mem_Read_DMA+0x290>)
 80062a6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	2200      	movs	r2, #0
 80062ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	2200      	movs	r2, #0
 80062b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062bc:	2200      	movs	r2, #0
 80062be:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c4:	2200      	movs	r2, #0
 80062c6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3310      	adds	r3, #16
 80062d2:	4619      	mov	r1, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	461a      	mov	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062de:	f7fe fb0d 	bl	80048fc <HAL_DMA_Start_IT>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80062e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 8087 	bne.w	8006400 <HAL_I2C_Mem_Read_DMA+0x294>
 80062f2:	e013      	b.n	800631c <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0b3      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800631c:	88f8      	ldrh	r0, [r7, #6]
 800631e:	893a      	ldrh	r2, [r7, #8]
 8006320:	8979      	ldrh	r1, [r7, #10]
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	2323      	movs	r3, #35	@ 0x23
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	4603      	mov	r3, r0
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f001 fee5 	bl	80080fc <I2C_RequestMemoryRead>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d023      	beq.n	8006380 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	4618      	mov	r0, r3
 800633e:	f7fe fba5 	bl	8004a8c <HAL_DMA_Abort_IT>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	2200      	movs	r2, #0
 800634e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800635e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0201 	bic.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e081      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	2b01      	cmp	r3, #1
 8006386:	d108      	bne.n	800639a <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e007      	b.n	80063aa <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80063a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063aa:	2300      	movs	r3, #0
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063d6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	e049      	b.n	800647e <HAL_I2C_Mem_Read_DMA+0x312>
 80063ea:	bf00      	nop
 80063ec:	20000010 	.word	0x20000010
 80063f0:	14f8b589 	.word	0x14f8b589
 80063f4:	ffff0000 	.word	0xffff0000
 80063f8:	080082cd 	.word	0x080082cd
 80063fc:	0800848b 	.word	0x0800848b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006414:	f043 0210 	orr.w	r2, r3, #16
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e02d      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006428:	88f8      	ldrh	r0, [r7, #6]
 800642a:	893a      	ldrh	r2, [r7, #8]
 800642c:	8979      	ldrh	r1, [r7, #10]
 800642e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	2323      	movs	r3, #35	@ 0x23
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	4603      	mov	r3, r0
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 fe5f 	bl	80080fc <I2C_RequestMemoryRead>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e01d      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800646c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	e000      	b.n	8006484 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8006482:	2302      	movs	r3, #2
  }
}
 8006484:	4618      	mov	r0, r3
 8006486:	3728      	adds	r7, #40	@ 0x28
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	@ 0x28
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	460b      	mov	r3, r1
 800649a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800649c:	f7fd fb22 	bl	8003ae4 <HAL_GetTick>
 80064a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 8111 	bne.w	80066d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	2319      	movs	r3, #25
 80064ba:	2201      	movs	r2, #1
 80064bc:	4988      	ldr	r1, [pc, #544]	@ (80066e0 <HAL_I2C_IsDeviceReady+0x254>)
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f002 f8c8 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e104      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_I2C_IsDeviceReady+0x50>
 80064d8:	2302      	movs	r3, #2
 80064da:	e0fd      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d007      	beq.n	8006502 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2224      	movs	r2, #36	@ 0x24
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a70      	ldr	r2, [pc, #448]	@ (80066e4 <HAL_I2C_IsDeviceReady+0x258>)
 8006524:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006534:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2200      	movs	r2, #0
 800653e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f002 f886 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00d      	beq.n	800656a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800655c:	d103      	bne.n	8006566 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006564:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e0b6      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	461a      	mov	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006578:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800657a:	f7fd fab3 	bl	8003ae4 <HAL_GetTick>
 800657e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a4:	bf0c      	ite	eq
 80065a6:	2301      	moveq	r3, #1
 80065a8:	2300      	movne	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065ae:	e025      	b.n	80065fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065b0:	f7fd fa98 	bl	8003ae4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d302      	bcc.n	80065c6 <HAL_I2C_IsDeviceReady+0x13a>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d103      	bne.n	80065ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	22a0      	movs	r2, #160	@ 0xa0
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b02      	cmp	r3, #2
 80065da:	bf0c      	ite	eq
 80065dc:	2301      	moveq	r3, #1
 80065de:	2300      	movne	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f2:	bf0c      	ite	eq
 80065f4:	2301      	moveq	r3, #1
 80065f6:	2300      	movne	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2ba0      	cmp	r3, #160	@ 0xa0
 8006606:	d005      	beq.n	8006614 <HAL_I2C_IsDeviceReady+0x188>
 8006608:	7dfb      	ldrb	r3, [r7, #23]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d102      	bne.n	8006614 <HAL_I2C_IsDeviceReady+0x188>
 800660e:	7dbb      	ldrb	r3, [r7, #22]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0cd      	beq.n	80065b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b02      	cmp	r3, #2
 8006628:	d129      	bne.n	800667e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006638:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2319      	movs	r3, #25
 8006656:	2201      	movs	r2, #1
 8006658:	4921      	ldr	r1, [pc, #132]	@ (80066e0 <HAL_I2C_IsDeviceReady+0x254>)
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 fffa 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e036      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e02c      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006696:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	2319      	movs	r3, #25
 800669e:	2201      	movs	r2, #1
 80066a0:	490f      	ldr	r1, [pc, #60]	@ (80066e0 <HAL_I2C_IsDeviceReady+0x254>)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f001 ffd6 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e012      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	3301      	adds	r3, #1
 80066b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	f4ff af32 	bcc.w	8006526 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	00100002 	.word	0x00100002
 80066e4:	ffff0000 	.word	0xffff0000

080066e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006708:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006710:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b10      	cmp	r3, #16
 8006716:	d003      	beq.n	8006720 <HAL_I2C_EV_IRQHandler+0x38>
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b40      	cmp	r3, #64	@ 0x40
 800671c:	f040 80c1 	bne.w	80068a2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10d      	bne.n	8006756 <HAL_I2C_EV_IRQHandler+0x6e>
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006740:	d003      	beq.n	800674a <HAL_I2C_EV_IRQHandler+0x62>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006748:	d101      	bne.n	800674e <HAL_I2C_EV_IRQHandler+0x66>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <HAL_I2C_EV_IRQHandler+0x68>
 800674e:	2300      	movs	r3, #0
 8006750:	2b01      	cmp	r3, #1
 8006752:	f000 8132 	beq.w	80069ba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00c      	beq.n	800677a <HAL_I2C_EV_IRQHandler+0x92>
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	0a5b      	lsrs	r3, r3, #9
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f002 f9d9 	bl	8008b24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fd8b 	bl	800728e <I2C_Master_SB>
 8006778:	e092      	b.n	80068a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	08db      	lsrs	r3, r3, #3
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <HAL_I2C_EV_IRQHandler+0xb2>
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	0a5b      	lsrs	r3, r3, #9
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fe01 	bl	800739a <I2C_Master_ADD10>
 8006798:	e082      	b.n	80068a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d009      	beq.n	80067ba <HAL_I2C_EV_IRQHandler+0xd2>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	0a5b      	lsrs	r3, r3, #9
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fe1b 	bl	80073ee <I2C_Master_ADDR>
 80067b8:	e072      	b.n	80068a0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	089b      	lsrs	r3, r3, #2
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d03b      	beq.n	800683e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d4:	f000 80f3 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00f      	beq.n	8006804 <HAL_I2C_EV_IRQHandler+0x11c>
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	0a9b      	lsrs	r3, r3, #10
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d009      	beq.n	8006804 <HAL_I2C_EV_IRQHandler+0x11c>
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	089b      	lsrs	r3, r3, #2
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d103      	bne.n	8006804 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f9df 	bl	8006bc0 <I2C_MasterTransmit_TXE>
 8006802:	e04d      	b.n	80068a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 80d6 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	0a5b      	lsrs	r3, r3, #9
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 80cf 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b21      	cmp	r3, #33	@ 0x21
 8006824:	d103      	bne.n	800682e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa66 	bl	8006cf8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800682c:	e0c7      	b.n	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b40      	cmp	r3, #64	@ 0x40
 8006832:	f040 80c4 	bne.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fad4 	bl	8006de4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800683c:	e0bf      	b.n	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684c:	f000 80b7 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	099b      	lsrs	r3, r3, #6
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00f      	beq.n	800687c <HAL_I2C_EV_IRQHandler+0x194>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	0a9b      	lsrs	r3, r3, #10
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <HAL_I2C_EV_IRQHandler+0x194>
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fb4d 	bl	8006f14 <I2C_MasterReceive_RXNE>
 800687a:	e011      	b.n	80068a0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	089b      	lsrs	r3, r3, #2
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 809a 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	0a5b      	lsrs	r3, r3, #9
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8093 	beq.w	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fc03 	bl	80070a4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800689e:	e08e      	b.n	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
 80068a0:	e08d      	b.n	80069be <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e007      	b.n	80068c4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <HAL_I2C_EV_IRQHandler+0x20e>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	0a5b      	lsrs	r3, r3, #9
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00c      	beq.n	80068f6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068ec:	69b9      	ldr	r1, [r7, #24]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 ffcc 	bl	800788c <I2C_Slave_ADDR>
 80068f4:	e066      	b.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d009      	beq.n	8006916 <HAL_I2C_EV_IRQHandler+0x22e>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	0a5b      	lsrs	r3, r3, #9
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f806 	bl	8007920 <I2C_Slave_STOPF>
 8006914:	e056      	b.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b21      	cmp	r3, #33	@ 0x21
 800691a:	d002      	beq.n	8006922 <HAL_I2C_EV_IRQHandler+0x23a>
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b29      	cmp	r3, #41	@ 0x29
 8006920:	d125      	bne.n	800696e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	09db      	lsrs	r3, r3, #7
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00f      	beq.n	800694e <HAL_I2C_EV_IRQHandler+0x266>
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	0a9b      	lsrs	r3, r3, #10
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_I2C_EV_IRQHandler+0x266>
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d103      	bne.n	800694e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fee2 	bl	8007710 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800694c:	e039      	b.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d033      	beq.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2da>
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	0a5b      	lsrs	r3, r3, #9
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02d      	beq.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 ff0f 	bl	800778a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800696c:	e029      	b.n	80069c2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	099b      	lsrs	r3, r3, #6
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00f      	beq.n	800699a <HAL_I2C_EV_IRQHandler+0x2b2>
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	0a9b      	lsrs	r3, r3, #10
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_I2C_EV_IRQHandler+0x2b2>
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	089b      	lsrs	r3, r3, #2
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d103      	bne.n	800699a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 ff1a 	bl	80077cc <I2C_SlaveReceive_RXNE>
 8006998:	e014      	b.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	089b      	lsrs	r3, r3, #2
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00e      	beq.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	0a5b      	lsrs	r3, r3, #9
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ff48 	bl	8007848 <I2C_SlaveReceive_BTF>
 80069b8:	e004      	b.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069ba:	bf00      	nop
 80069bc:	e002      	b.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069be:	bf00      	nop
 80069c0:	e000      	b.n	80069c4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069c2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80069c4:	3720      	adds	r7, #32
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b08a      	sub	sp, #40	@ 0x28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069ec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	0a1b      	lsrs	r3, r3, #8
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00e      	beq.n	8006a18 <HAL_I2C_ER_IRQHandler+0x4e>
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	0a1b      	lsrs	r3, r3, #8
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006a16:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	0a5b      	lsrs	r3, r3, #9
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <HAL_I2C_ER_IRQHandler+0x78>
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	f003 0301 	and.w	r3, r3, #1
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006a40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	0a9b      	lsrs	r3, r3, #10
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d03f      	beq.n	8006ace <HAL_I2C_ER_IRQHandler+0x104>
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	0a1b      	lsrs	r3, r3, #8
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d039      	beq.n	8006ace <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006a5a:	7efb      	ldrb	r3, [r7, #27]
 8006a5c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a6c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a72:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006a74:	7ebb      	ldrb	r3, [r7, #26]
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d112      	bne.n	8006aa0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10f      	bne.n	8006aa0 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a80:	7cfb      	ldrb	r3, [r7, #19]
 8006a82:	2b21      	cmp	r3, #33	@ 0x21
 8006a84:	d008      	beq.n	8006a98 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006a86:	7cfb      	ldrb	r3, [r7, #19]
 8006a88:	2b29      	cmp	r3, #41	@ 0x29
 8006a8a:	d005      	beq.n	8006a98 <HAL_I2C_ER_IRQHandler+0xce>
 8006a8c:	7cfb      	ldrb	r3, [r7, #19]
 8006a8e:	2b28      	cmp	r3, #40	@ 0x28
 8006a90:	d106      	bne.n	8006aa0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b21      	cmp	r3, #33	@ 0x21
 8006a96:	d103      	bne.n	8006aa0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f871 	bl	8007b80 <I2C_Slave_AF>
 8006a9e:	e016      	b.n	8006ace <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006aa8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	f043 0304 	orr.w	r3, r3, #4
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006ab2:	7efb      	ldrb	r3, [r7, #27]
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d002      	beq.n	8006abe <HAL_I2C_ER_IRQHandler+0xf4>
 8006ab8:	7efb      	ldrb	r3, [r7, #27]
 8006aba:	2b40      	cmp	r3, #64	@ 0x40
 8006abc:	d107      	bne.n	8006ace <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006acc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	0adb      	lsrs	r3, r3, #11
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00e      	beq.n	8006af8 <HAL_I2C_ER_IRQHandler+0x12e>
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d008      	beq.n	8006af8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	f043 0308 	orr.w	r3, r3, #8
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006af6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 f8ac 	bl	8007c68 <I2C_ITError>
  }
}
 8006b10:	bf00      	nop
 8006b12:	3728      	adds	r7, #40	@ 0x28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
 8006b74:	4613      	mov	r3, r2
 8006b76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d150      	bne.n	8006c88 <I2C_MasterTransmit_TXE+0xc8>
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b21      	cmp	r3, #33	@ 0x21
 8006bea:	d14d      	bne.n	8006c88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d01d      	beq.n	8006c2e <I2C_MasterTransmit_TXE+0x6e>
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d01a      	beq.n	8006c2e <I2C_MasterTransmit_TXE+0x6e>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bfe:	d016      	beq.n	8006c2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2211      	movs	r2, #17
 8006c14:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7ff ff76 	bl	8006b18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c2c:	e060      	b.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b40      	cmp	r3, #64	@ 0x40
 8006c66:	d107      	bne.n	8006c78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fc f9b5 	bl	8002fe0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c76:	e03b      	b.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ff49 	bl	8006b18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c86:	e033      	b.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	2b21      	cmp	r3, #33	@ 0x21
 8006c8c:	d005      	beq.n	8006c9a <I2C_MasterTransmit_TXE+0xda>
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b40      	cmp	r3, #64	@ 0x40
 8006c92:	d12d      	bne.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b22      	cmp	r3, #34	@ 0x22
 8006c98:	d12a      	bne.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006cb4:	e01c      	b.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b40      	cmp	r3, #64	@ 0x40
 8006cc0:	d103      	bne.n	8006cca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f88e 	bl	8006de4 <I2C_MemoryTransmit_TXE_BTF>
}
 8006cc8:	e012      	b.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006cee:	e7ff      	b.n	8006cf0 <I2C_MasterTransmit_TXE+0x130>
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b21      	cmp	r3, #33	@ 0x21
 8006d10:	d164      	bne.n	8006ddc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d012      	beq.n	8006d42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006d40:	e04c      	b.n	8006ddc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d01d      	beq.n	8006d84 <I2C_MasterTransmit_BTF+0x8c>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d01a      	beq.n	8006d84 <I2C_MasterTransmit_BTF+0x8c>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d54:	d016      	beq.n	8006d84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2211      	movs	r2, #17
 8006d6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff fecb 	bl	8006b18 <HAL_I2C_MasterTxCpltCallback>
}
 8006d82:	e02b      	b.n	8006ddc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006da2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b40      	cmp	r3, #64	@ 0x40
 8006dbc:	d107      	bne.n	8006dce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fc f90a 	bl	8002fe0 <HAL_I2C_MemTxCpltCallback>
}
 8006dcc:	e006      	b.n	8006ddc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fe9e 	bl	8006b18 <HAL_I2C_MasterTxCpltCallback>
}
 8006ddc:	bf00      	nop
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11d      	bne.n	8006e38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10b      	bne.n	8006e1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e14:	1c9a      	adds	r2, r3, #2
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006e1a:	e077      	b.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	121b      	asrs	r3, r3, #8
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006e36:	e069      	b.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d10b      	bne.n	8006e58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006e56:	e059      	b.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d152      	bne.n	8006f06 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b22      	cmp	r3, #34	@ 0x22
 8006e64:	d10d      	bne.n	8006e82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006e80:	e044      	b.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b21      	cmp	r3, #33	@ 0x21
 8006e90:	d112      	bne.n	8006eb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	781a      	ldrb	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006eb6:	e029      	b.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d124      	bne.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
 8006ec4:	2b21      	cmp	r3, #33	@ 0x21
 8006ec6:	d121      	bne.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ed6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ee6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7fc f86e 	bl	8002fe0 <HAL_I2C_MemTxCpltCallback>
}
 8006f04:	e002      	b.n	8006f0c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fe fb92 	bl	8005630 <I2C_Flush_DR>
}
 8006f0c:	bf00      	nop
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b22      	cmp	r3, #34	@ 0x22
 8006f26:	f040 80b9 	bne.w	800709c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d921      	bls.n	8006f82 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	f040 8096 	bne.w	800709c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f7e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006f80:	e08c      	b.n	800709c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d07f      	beq.n	800708a <I2C_MasterReceive_RXNE+0x176>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d002      	beq.n	8006f96 <I2C_MasterReceive_RXNE+0x82>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d179      	bne.n	800708a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fd06 	bl	80089a8 <I2C_WaitOnSTOPRequestThroughIT>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d14c      	bne.n	800703c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fb0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fc0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b40      	cmp	r3, #64	@ 0x40
 8006ffa:	d10a      	bne.n	8007012 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fb fffe 	bl	800300c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007010:	e044      	b.n	800709c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d002      	beq.n	8007026 <I2C_MasterReceive_RXNE+0x112>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b20      	cmp	r3, #32
 8007024:	d103      	bne.n	800702e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	@ 0x30
 800702c:	e002      	b.n	8007034 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2212      	movs	r2, #18
 8007032:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fd79 	bl	8006b2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800703a:	e02f      	b.n	800709c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800704a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691a      	ldr	r2, [r3, #16]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff fd88 	bl	8006b98 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007088:	e008      	b.n	800709c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007098:	605a      	str	r2, [r3, #4]
}
 800709a:	e7ff      	b.n	800709c <I2C_MasterReceive_RXNE+0x188>
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d11b      	bne.n	80070f4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ca:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	1c5a      	adds	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80070f2:	e0c8      	b.n	8007286 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d129      	bne.n	8007152 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800710c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b04      	cmp	r3, #4
 8007112:	d00a      	beq.n	800712a <I2C_MasterReceive_BTF+0x86>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d007      	beq.n	800712a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007128:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007150:	e099      	b.n	8007286 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	f040 8081 	bne.w	8007260 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d002      	beq.n	800716a <I2C_MasterReceive_BTF+0xc6>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b10      	cmp	r3, #16
 8007168:	d108      	bne.n	800717c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e019      	b.n	80071b0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b04      	cmp	r3, #4
 8007180:	d002      	beq.n	8007188 <I2C_MasterReceive_BTF+0xe4>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d108      	bne.n	800719a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e00a      	b.n	80071b0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b10      	cmp	r3, #16
 800719e:	d007      	beq.n	80071b0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800720a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b40      	cmp	r3, #64	@ 0x40
 800721e:	d10a      	bne.n	8007236 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fb feec 	bl	800300c <HAL_I2C_MemRxCpltCallback>
}
 8007234:	e027      	b.n	8007286 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d002      	beq.n	800724a <I2C_MasterReceive_BTF+0x1a6>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b20      	cmp	r3, #32
 8007248:	d103      	bne.n	8007252 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007250:	e002      	b.n	8007258 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2212      	movs	r2, #18
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fc67 	bl	8006b2c <HAL_I2C_MasterRxCpltCallback>
}
 800725e:	e012      	b.n	8007286 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800728e:	b480      	push	{r7}
 8007290:	b083      	sub	sp, #12
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b40      	cmp	r3, #64	@ 0x40
 80072a0:	d117      	bne.n	80072d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d109      	bne.n	80072be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80072bc:	e067      	b.n	800738e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	611a      	str	r2, [r3, #16]
}
 80072d0:	e05d      	b.n	800738e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072da:	d133      	bne.n	8007344 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b21      	cmp	r3, #33	@ 0x21
 80072e6:	d109      	bne.n	80072fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072f8:	611a      	str	r2, [r3, #16]
 80072fa:	e008      	b.n	800730e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	b2da      	uxtb	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <I2C_Master_SB+0x92>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007324:	2b00      	cmp	r3, #0
 8007326:	d032      	beq.n	800738e <I2C_Master_SB+0x100>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d02d      	beq.n	800738e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007340:	605a      	str	r2, [r3, #4]
}
 8007342:	e024      	b.n	800738e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10e      	bne.n	800736a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007350:	b29b      	uxth	r3, r3
 8007352:	11db      	asrs	r3, r3, #7
 8007354:	b2db      	uxtb	r3, r3
 8007356:	f003 0306 	and.w	r3, r3, #6
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f063 030f 	orn	r3, r3, #15
 8007360:	b2da      	uxtb	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	611a      	str	r2, [r3, #16]
}
 8007368:	e011      	b.n	800738e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800736e:	2b01      	cmp	r3, #1
 8007370:	d10d      	bne.n	800738e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	b29b      	uxth	r3, r3
 8007378:	11db      	asrs	r3, r3, #7
 800737a:	b2db      	uxtb	r3, r3
 800737c:	f003 0306 	and.w	r3, r3, #6
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f063 030e 	orn	r3, r3, #14
 8007386:	b2da      	uxtb	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	611a      	str	r2, [r3, #16]
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d004      	beq.n	80073c0 <I2C_Master_ADD10+0x26>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <I2C_Master_ADD10+0x48>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073e0:	605a      	str	r2, [r3, #4]
  }
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b091      	sub	sp, #68	@ 0x44
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007404:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b22      	cmp	r3, #34	@ 0x22
 8007416:	f040 8169 	bne.w	80076ec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10f      	bne.n	8007442 <I2C_Master_ADDR+0x54>
 8007422:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007426:	2b40      	cmp	r3, #64	@ 0x40
 8007428:	d10b      	bne.n	8007442 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800742a:	2300      	movs	r3, #0
 800742c:	633b      	str	r3, [r7, #48]	@ 0x30
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	633b      	str	r3, [r7, #48]	@ 0x30
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	633b      	str	r3, [r7, #48]	@ 0x30
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	e160      	b.n	8007704 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007446:	2b00      	cmp	r3, #0
 8007448:	d11d      	bne.n	8007486 <I2C_Master_ADDR+0x98>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007452:	d118      	bne.n	8007486 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007454:	2300      	movs	r3, #0
 8007456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007478:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	651a      	str	r2, [r3, #80]	@ 0x50
 8007484:	e13e      	b.n	8007704 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d113      	bne.n	80074b8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007490:	2300      	movs	r3, #0
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e115      	b.n	80076e4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	f040 808a 	bne.w	80075d8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80074c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074ca:	d137      	bne.n	800753c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074da:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ea:	d113      	bne.n	8007514 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074fa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074fc:	2300      	movs	r3, #0
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	627b      	str	r3, [r7, #36]	@ 0x24
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	e0e7      	b.n	80076e4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007514:	2300      	movs	r3, #0
 8007516:	623b      	str	r3, [r7, #32]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	623b      	str	r3, [r7, #32]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	623b      	str	r3, [r7, #32]
 8007528:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e0d3      	b.n	80076e4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753e:	2b08      	cmp	r3, #8
 8007540:	d02e      	beq.n	80075a0 <I2C_Master_ADDR+0x1b2>
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	2b20      	cmp	r3, #32
 8007546:	d02b      	beq.n	80075a0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800754a:	2b12      	cmp	r3, #18
 800754c:	d102      	bne.n	8007554 <I2C_Master_ADDR+0x166>
 800754e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007550:	2b01      	cmp	r3, #1
 8007552:	d125      	bne.n	80075a0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	2b04      	cmp	r3, #4
 8007558:	d00e      	beq.n	8007578 <I2C_Master_ADDR+0x18a>
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	2b02      	cmp	r3, #2
 800755e:	d00b      	beq.n	8007578 <I2C_Master_ADDR+0x18a>
 8007560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007562:	2b10      	cmp	r3, #16
 8007564:	d008      	beq.n	8007578 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	e007      	b.n	8007588 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007586:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007588:	2300      	movs	r3, #0
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	e0a1      	b.n	80076e4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075b0:	2300      	movs	r3, #0
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e085      	b.n	80076e4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d14d      	bne.n	800767e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d016      	beq.n	8007616 <I2C_Master_ADDR+0x228>
 80075e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d013      	beq.n	8007616 <I2C_Master_ADDR+0x228>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d010      	beq.n	8007616 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007602:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e007      	b.n	8007626 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007624:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007634:	d117      	bne.n	8007666 <I2C_Master_ADDR+0x278>
 8007636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007638:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800763c:	d00b      	beq.n	8007656 <I2C_Master_ADDR+0x268>
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	2b01      	cmp	r3, #1
 8007642:	d008      	beq.n	8007656 <I2C_Master_ADDR+0x268>
 8007644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007646:	2b08      	cmp	r3, #8
 8007648:	d005      	beq.n	8007656 <I2C_Master_ADDR+0x268>
 800764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764c:	2b10      	cmp	r3, #16
 800764e:	d002      	beq.n	8007656 <I2C_Master_ADDR+0x268>
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	2b20      	cmp	r3, #32
 8007654:	d107      	bne.n	8007666 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007664:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007666:	2300      	movs	r3, #0
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	e032      	b.n	80076e4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800768c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800769c:	d117      	bne.n	80076ce <I2C_Master_ADDR+0x2e0>
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076a4:	d00b      	beq.n	80076be <I2C_Master_ADDR+0x2d0>
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d008      	beq.n	80076be <I2C_Master_ADDR+0x2d0>
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d005      	beq.n	80076be <I2C_Master_ADDR+0x2d0>
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d002      	beq.n	80076be <I2C_Master_ADDR+0x2d0>
 80076b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d107      	bne.n	80076ce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	695b      	ldr	r3, [r3, #20]
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	613b      	str	r3, [r7, #16]
 80076e2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80076ea:	e00b      	b.n	8007704 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ec:	2300      	movs	r3, #0
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
}
 8007702:	e7ff      	b.n	8007704 <I2C_Master_ADDR+0x316>
 8007704:	bf00      	nop
 8007706:	3744      	adds	r7, #68	@ 0x44
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d02b      	beq.n	8007782 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d114      	bne.n	8007782 <I2C_SlaveTransmit_TXE+0x72>
 8007758:	7bfb      	ldrb	r3, [r7, #15]
 800775a:	2b29      	cmp	r3, #41	@ 0x29
 800775c:	d111      	bne.n	8007782 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800776c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2221      	movs	r2, #33	@ 0x21
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2228      	movs	r2, #40	@ 0x28
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff f9df 	bl	8006b40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007796:	b29b      	uxth	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d011      	beq.n	80077c0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d02c      	beq.n	8007840 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	b2d2      	uxtb	r2, r2
 80077f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007802:	b29b      	uxth	r3, r3
 8007804:	3b01      	subs	r3, #1
 8007806:	b29a      	uxth	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d114      	bne.n	8007840 <I2C_SlaveReceive_RXNE+0x74>
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b2a      	cmp	r3, #42	@ 0x2a
 800781a:	d111      	bne.n	8007840 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800782a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2222      	movs	r2, #34	@ 0x22
 8007830:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2228      	movs	r2, #40	@ 0x28
 8007836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff f98a 	bl	8006b54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d012      	beq.n	8007880 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691a      	ldr	r2, [r3, #16]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	b2d2      	uxtb	r2, r2
 8007866:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007896:	2300      	movs	r3, #0
 8007898:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80078a6:	2b28      	cmp	r3, #40	@ 0x28
 80078a8:	d127      	bne.n	80078fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	089b      	lsrs	r3, r3, #2
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80078c6:	2301      	movs	r3, #1
 80078c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	09db      	lsrs	r3, r3, #7
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d103      	bne.n	80078de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	81bb      	strh	r3, [r7, #12]
 80078dc:	e002      	b.n	80078e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80078ec:	89ba      	ldrh	r2, [r7, #12]
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff f938 	bl	8006b68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80078f8:	e00e      	b.n	8007918 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800792e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800793e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007940:	2300      	movs	r3, #0
 8007942:	60bb      	str	r3, [r7, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800796c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800797c:	d172      	bne.n	8007a64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b22      	cmp	r3, #34	@ 0x22
 8007982:	d002      	beq.n	800798a <I2C_Slave_STOPF+0x6a>
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2b2a      	cmp	r3, #42	@ 0x2a
 8007988:	d135      	bne.n	80079f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	f043 0204 	orr.w	r2, r3, #4
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80079bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd fa0e 	bl	8004de4 <HAL_DMA_GetState>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d049      	beq.n	8007a62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d2:	4a69      	ldr	r2, [pc, #420]	@ (8007b78 <I2C_Slave_STOPF+0x258>)
 80079d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fd f856 	bl	8004a8c <HAL_DMA_Abort_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d03d      	beq.n	8007a62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079f4:	e035      	b.n	8007a62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a12:	f043 0204 	orr.w	r2, r3, #4
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fd f9d8 	bl	8004de4 <HAL_DMA_GetState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d014      	beq.n	8007a64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8007b78 <I2C_Slave_STOPF+0x258>)
 8007a40:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fd f820 	bl	8004a8c <HAL_DMA_Abort_IT>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	e000      	b.n	8007a64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d03e      	beq.n	8007aec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d112      	bne.n	8007aa2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aac:	2b40      	cmp	r3, #64	@ 0x40
 8007aae:	d112      	bne.n	8007ad6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae4:	f043 0204 	orr.w	r2, r3, #4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f8b7 	bl	8007c68 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007afa:	e039      	b.n	8007b70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b00:	d109      	bne.n	8007b16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2228      	movs	r2, #40	@ 0x28
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff f81f 	bl	8006b54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b28      	cmp	r3, #40	@ 0x28
 8007b20:	d111      	bne.n	8007b46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a15      	ldr	r2, [pc, #84]	@ (8007b7c <I2C_Slave_STOPF+0x25c>)
 8007b26:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff f820 	bl	8006b84 <HAL_I2C_ListenCpltCallback>
}
 8007b44:	e014      	b.n	8007b70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	2b22      	cmp	r3, #34	@ 0x22
 8007b4c:	d002      	beq.n	8007b54 <I2C_Slave_STOPF+0x234>
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b22      	cmp	r3, #34	@ 0x22
 8007b52:	d10d      	bne.n	8007b70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fe fff2 	bl	8006b54 <HAL_I2C_SlaveRxCpltCallback>
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	08008505 	.word	0x08008505
 8007b7c:	ffff0000 	.word	0xffff0000

08007b80 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b94:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d002      	beq.n	8007ba2 <I2C_Slave_AF+0x22>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d129      	bne.n	8007bf6 <I2C_Slave_AF+0x76>
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	2b28      	cmp	r3, #40	@ 0x28
 8007ba6:	d126      	bne.n	8007bf6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a2e      	ldr	r2, [pc, #184]	@ (8007c64 <I2C_Slave_AF+0xe4>)
 8007bac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007bbc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bc6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bd6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7fe ffc8 	bl	8006b84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007bf4:	e031      	b.n	8007c5a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	2b21      	cmp	r3, #33	@ 0x21
 8007bfa:	d129      	bne.n	8007c50 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a19      	ldr	r2, [pc, #100]	@ (8007c64 <I2C_Slave_AF+0xe4>)
 8007c00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2221      	movs	r2, #33	@ 0x21
 8007c06:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c26:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c30:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c40:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fd fcf4 	bl	8005630 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7fe ff79 	bl	8006b40 <HAL_I2C_SlaveTxCpltCallback>
}
 8007c4e:	e004      	b.n	8007c5a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c58:	615a      	str	r2, [r3, #20]
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	ffff0000 	.word	0xffff0000

08007c68 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d002      	beq.n	8007c8c <I2C_ITError+0x24>
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b40      	cmp	r3, #64	@ 0x40
 8007c8a:	d10a      	bne.n	8007ca2 <I2C_ITError+0x3a>
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b22      	cmp	r3, #34	@ 0x22
 8007c90:	d107      	bne.n	8007ca2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ca0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007ca8:	2b28      	cmp	r3, #40	@ 0x28
 8007caa:	d107      	bne.n	8007cbc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2228      	movs	r2, #40	@ 0x28
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007cba:	e015      	b.n	8007ce8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cca:	d00a      	beq.n	8007ce2 <I2C_ITError+0x7a>
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	2b60      	cmp	r3, #96	@ 0x60
 8007cd0:	d007      	beq.n	8007ce2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cf6:	d162      	bne.n	8007dbe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d06:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d020      	beq.n	8007d58 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8007ec4 <I2C_ITError+0x25c>)
 8007d1c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fc feb2 	bl	8004a8c <HAL_DMA_Abort_IT>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8089 	beq.w	8007e42 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007d52:	4610      	mov	r0, r2
 8007d54:	4798      	blx	r3
 8007d56:	e074      	b.n	8007e42 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5c:	4a59      	ldr	r2, [pc, #356]	@ (8007ec4 <I2C_ITError+0x25c>)
 8007d5e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fc fe91 	bl	8004a8c <HAL_DMA_Abort_IT>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d068      	beq.n	8007e42 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7a:	2b40      	cmp	r3, #64	@ 0x40
 8007d7c:	d10b      	bne.n	8007d96 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691a      	ldr	r2, [r3, #16]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0201 	bic.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	e041      	b.n	8007e42 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b60      	cmp	r3, #96	@ 0x60
 8007dc8:	d125      	bne.n	8007e16 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de2:	2b40      	cmp	r3, #64	@ 0x40
 8007de4:	d10b      	bne.n	8007dfe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe fecc 	bl	8006bac <HAL_I2C_AbortCpltCallback>
 8007e14:	e015      	b.n	8007e42 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e20:	2b40      	cmp	r3, #64	@ 0x40
 8007e22:	d10b      	bne.n	8007e3c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691a      	ldr	r2, [r3, #16]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f7fe feab 	bl	8006b98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10e      	bne.n	8007e70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d109      	bne.n	8007e70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d104      	bne.n	8007e70 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d007      	beq.n	8007e80 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e7e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e86:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d113      	bne.n	8007ebc <I2C_ITError+0x254>
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	2b28      	cmp	r3, #40	@ 0x28
 8007e98:	d110      	bne.n	8007ebc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ec8 <I2C_ITError+0x260>)
 8007e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7fe fe64 	bl	8006b84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	08008505 	.word	0x08008505
 8007ec8:	ffff0000 	.word	0xffff0000

08007ecc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af02      	add	r7, sp, #8
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	607a      	str	r2, [r7, #4]
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b08      	cmp	r3, #8
 8007ee6:	d006      	beq.n	8007ef6 <I2C_MasterRequestWrite+0x2a>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d003      	beq.n	8007ef6 <I2C_MasterRequestWrite+0x2a>
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ef4:	d108      	bne.n	8007f08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e00b      	b.n	8007f20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f0c:	2b12      	cmp	r3, #18
 8007f0e:	d107      	bne.n	8007f20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fb91 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00d      	beq.n	8007f54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f46:	d103      	bne.n	8007f50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e035      	b.n	8007fc0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f5c:	d108      	bne.n	8007f70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f5e:	897b      	ldrh	r3, [r7, #10]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	461a      	mov	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007f6c:	611a      	str	r2, [r3, #16]
 8007f6e:	e01b      	b.n	8007fa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f70:	897b      	ldrh	r3, [r7, #10]
 8007f72:	11db      	asrs	r3, r3, #7
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	f003 0306 	and.w	r3, r3, #6
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f063 030f 	orn	r3, r3, #15
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	490e      	ldr	r1, [pc, #56]	@ (8007fc8 <I2C_MasterRequestWrite+0xfc>)
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fbda 	bl	8008748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e010      	b.n	8007fc0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f9e:	897b      	ldrh	r3, [r7, #10]
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4907      	ldr	r1, [pc, #28]	@ (8007fcc <I2C_MasterRequestWrite+0x100>)
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f000 fbca 	bl	8008748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e000      	b.n	8007fc0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	00010008 	.word	0x00010008
 8007fcc:	00010002 	.word	0x00010002

08007fd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4603      	mov	r3, r0
 8007fe0:	817b      	strh	r3, [r7, #10]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	813b      	strh	r3, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	2200      	movs	r2, #0
 8008002:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 fb24 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800801c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008020:	d103      	bne.n	800802a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008028:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e05f      	b.n	80080ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800802e:	897b      	ldrh	r3, [r7, #10]
 8008030:	b2db      	uxtb	r3, r3
 8008032:	461a      	mov	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800803c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	492d      	ldr	r1, [pc, #180]	@ (80080f8 <I2C_RequestMemoryWrite+0x128>)
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb7f 	bl	8008748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e04c      	b.n	80080ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800806a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800806c:	6a39      	ldr	r1, [r7, #32]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fc0a 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00d      	beq.n	8008096 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800807e:	2b04      	cmp	r3, #4
 8008080:	d107      	bne.n	8008092 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008090:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e02b      	b.n	80080ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d105      	bne.n	80080a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800809c:	893b      	ldrh	r3, [r7, #8]
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	611a      	str	r2, [r3, #16]
 80080a6:	e021      	b.n	80080ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080a8:	893b      	ldrh	r3, [r7, #8]
 80080aa:	0a1b      	lsrs	r3, r3, #8
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b8:	6a39      	ldr	r1, [r7, #32]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fbe4 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d107      	bne.n	80080de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e005      	b.n	80080ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080e2:	893b      	ldrh	r3, [r7, #8]
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	00010002 	.word	0x00010002

080080fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	4603      	mov	r3, r0
 800810c:	817b      	strh	r3, [r7, #10]
 800810e:	460b      	mov	r3, r1
 8008110:	813b      	strh	r3, [r7, #8]
 8008112:	4613      	mov	r3, r2
 8008114:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008124:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008134:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	2200      	movs	r2, #0
 800813e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fa86 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00d      	beq.n	800816a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800815c:	d103      	bne.n	8008166 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008164:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e0aa      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800816a:	897b      	ldrh	r3, [r7, #10]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008178:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	4952      	ldr	r1, [pc, #328]	@ (80082c8 <I2C_RequestMemoryRead+0x1cc>)
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 fae1 	bl	8008748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e097      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	617b      	str	r3, [r7, #20]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a8:	6a39      	ldr	r1, [r7, #32]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 fb6c 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00d      	beq.n	80081d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ba:	2b04      	cmp	r3, #4
 80081bc:	d107      	bne.n	80081ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e076      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081d2:	88fb      	ldrh	r3, [r7, #6]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d105      	bne.n	80081e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081d8:	893b      	ldrh	r3, [r7, #8]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	611a      	str	r2, [r3, #16]
 80081e2:	e021      	b.n	8008228 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80081e4:	893b      	ldrh	r3, [r7, #8]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f4:	6a39      	ldr	r1, [r7, #32]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fb46 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00d      	beq.n	800821e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008206:	2b04      	cmp	r3, #4
 8008208:	d107      	bne.n	800821a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008218:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e050      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800821e:	893b      	ldrh	r3, [r7, #8]
 8008220:	b2da      	uxtb	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800822a:	6a39      	ldr	r1, [r7, #32]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fb2b 	bl	8008888 <I2C_WaitOnTXEFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00d      	beq.n	8008254 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800823c:	2b04      	cmp	r3, #4
 800823e:	d107      	bne.n	8008250 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800824e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e035      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008262:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2200      	movs	r2, #0
 800826c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f9ef 	bl	8008654 <I2C_WaitOnFlagUntilTimeout>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800828a:	d103      	bne.n	8008294 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008292:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e013      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008298:	897b      	ldrh	r3, [r7, #10]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	6a3a      	ldr	r2, [r7, #32]
 80082ac:	4906      	ldr	r1, [pc, #24]	@ (80082c8 <I2C_RequestMemoryRead+0x1cc>)
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fa4a 	bl	8008748 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e000      	b.n	80082c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	00010002 	.word	0x00010002

080082cc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082e8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80082fe:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800830c:	2200      	movs	r2, #0
 800830e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831c:	2200      	movs	r2, #0
 800831e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008320:	7cfb      	ldrb	r3, [r7, #19]
 8008322:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008326:	2b21      	cmp	r3, #33	@ 0x21
 8008328:	d007      	beq.n	800833a <I2C_DMAXferCplt+0x6e>
 800832a:	7cfb      	ldrb	r3, [r7, #19]
 800832c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8008330:	2b22      	cmp	r3, #34	@ 0x22
 8008332:	d131      	bne.n	8008398 <I2C_DMAXferCplt+0xcc>
 8008334:	7cbb      	ldrb	r3, [r7, #18]
 8008336:	2b20      	cmp	r3, #32
 8008338:	d12e      	bne.n	8008398 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008348:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2200      	movs	r2, #0
 800834e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008350:	7cfb      	ldrb	r3, [r7, #19]
 8008352:	2b29      	cmp	r3, #41	@ 0x29
 8008354:	d10a      	bne.n	800836c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2221      	movs	r2, #33	@ 0x21
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2228      	movs	r2, #40	@ 0x28
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008364:	6978      	ldr	r0, [r7, #20]
 8008366:	f7fe fbeb 	bl	8006b40 <HAL_I2C_SlaveTxCpltCallback>
 800836a:	e00c      	b.n	8008386 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800836c:	7cfb      	ldrb	r3, [r7, #19]
 800836e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008370:	d109      	bne.n	8008386 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2222      	movs	r2, #34	@ 0x22
 8008376:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2228      	movs	r2, #40	@ 0x28
 800837c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008380:	6978      	ldr	r0, [r7, #20]
 8008382:	f7fe fbe7 	bl	8006b54 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8008394:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008396:	e074      	b.n	8008482 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d06e      	beq.n	8008482 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d107      	bne.n	80083be <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083bc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80083cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80083d4:	d009      	beq.n	80083ea <I2C_DMAXferCplt+0x11e>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d006      	beq.n	80083ea <I2C_DMAXferCplt+0x11e>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80083e2:	d002      	beq.n	80083ea <I2C_DMAXferCplt+0x11e>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d107      	bne.n	80083fa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083f8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008408:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008418:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2200      	movs	r2, #0
 800841e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008428:	6978      	ldr	r0, [r7, #20]
 800842a:	f7fe fbb5 	bl	8006b98 <HAL_I2C_ErrorCallback>
}
 800842e:	e028      	b.n	8008482 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b40      	cmp	r3, #64	@ 0x40
 8008442:	d10a      	bne.n	800845a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2200      	movs	r2, #0
 8008450:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008452:	6978      	ldr	r0, [r7, #20]
 8008454:	f7fa fdda 	bl	800300c <HAL_I2C_MemRxCpltCallback>
}
 8008458:	e013      	b.n	8008482 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d002      	beq.n	800846e <I2C_DMAXferCplt+0x1a2>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b20      	cmp	r3, #32
 800846c:	d103      	bne.n	8008476 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	631a      	str	r2, [r3, #48]	@ 0x30
 8008474:	e002      	b.n	800847c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2212      	movs	r2, #18
 800847a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f7fe fb55 	bl	8006b2c <HAL_I2C_MasterRxCpltCallback>
}
 8008482:	bf00      	nop
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008496:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a4:	2200      	movs	r2, #0
 80084a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	2200      	movs	r2, #0
 80084b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fc fca1 	bl	8004e00 <HAL_DMA_GetError>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d01b      	beq.n	80084fc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084d2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2220      	movs	r2, #32
 80084de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ee:	f043 0210 	orr.w	r2, r3, #16
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7fe fb4e 	bl	8006b98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800851c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800851e:	4b4b      	ldr	r3, [pc, #300]	@ (800864c <I2C_DMAAbort+0x148>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	4a4a      	ldr	r2, [pc, #296]	@ (8008650 <I2C_DMAAbort+0x14c>)
 8008526:	fba2 2303 	umull	r2, r3, r2, r3
 800852a:	0a1a      	lsrs	r2, r3, #8
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	00da      	lsls	r2, r3, #3
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800854a:	e00a      	b.n	8008562 <I2C_DMAAbort+0x5e>
    }
    count--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3b01      	subs	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800855c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008560:	d0ea      	beq.n	8008538 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800856e:	2200      	movs	r2, #0
 8008570:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857e:	2200      	movs	r2, #0
 8008580:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008590:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a4:	2200      	movs	r2, #0
 80085a6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b4:	2200      	movs	r2, #0
 80085b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0201 	bic.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b60      	cmp	r3, #96	@ 0x60
 80085d2:	d10e      	bne.n	80085f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2200      	movs	r2, #0
 80085e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80085ea:	6978      	ldr	r0, [r7, #20]
 80085ec:	f7fe fade 	bl	8006bac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085f0:	e027      	b.n	8008642 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085f2:	7cfb      	ldrb	r3, [r7, #19]
 80085f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085f8:	2b28      	cmp	r3, #40	@ 0x28
 80085fa:	d117      	bne.n	800862c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0201 	orr.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800861a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2200      	movs	r2, #0
 8008620:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2228      	movs	r2, #40	@ 0x28
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800862a:	e007      	b.n	800863c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800863c:	6978      	ldr	r0, [r7, #20]
 800863e:	f7fe faab 	bl	8006b98 <HAL_I2C_ErrorCallback>
}
 8008642:	bf00      	nop
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000010 	.word	0x20000010
 8008650:	14f8b589 	.word	0x14f8b589

08008654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	4613      	mov	r3, r2
 8008662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008664:	e048      	b.n	80086f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d044      	beq.n	80086f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866e:	f7fb fa39 	bl	8003ae4 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	69bb      	ldr	r3, [r7, #24]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	429a      	cmp	r2, r3
 800867c:	d302      	bcc.n	8008684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d139      	bne.n	80086f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b01      	cmp	r3, #1
 800868c:	d10d      	bne.n	80086aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	43da      	mvns	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	4013      	ands	r3, r2
 800869a:	b29b      	uxth	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	bf0c      	ite	eq
 80086a0:	2301      	moveq	r3, #1
 80086a2:	2300      	movne	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	461a      	mov	r2, r3
 80086a8:	e00c      	b.n	80086c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	43da      	mvns	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4013      	ands	r3, r2
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bf0c      	ite	eq
 80086bc:	2301      	moveq	r3, #1
 80086be:	2300      	movne	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d116      	bne.n	80086f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2220      	movs	r2, #32
 80086d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e4:	f043 0220 	orr.w	r2, r3, #32
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e023      	b.n	8008740 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	0c1b      	lsrs	r3, r3, #16
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d10d      	bne.n	800871e <I2C_WaitOnFlagUntilTimeout+0xca>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	43da      	mvns	r2, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4013      	ands	r3, r2
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	e00c      	b.n	8008738 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	43da      	mvns	r2, r3
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	4013      	ands	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	bf0c      	ite	eq
 8008730:	2301      	moveq	r3, #1
 8008732:	2300      	movne	r3, #0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	429a      	cmp	r2, r3
 800873c:	d093      	beq.n	8008666 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008756:	e071      	b.n	800883c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008766:	d123      	bne.n	80087b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008776:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879c:	f043 0204 	orr.w	r2, r3, #4
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e067      	b.n	8008880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d041      	beq.n	800883c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087b8:	f7fb f994 	bl	8003ae4 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d302      	bcc.n	80087ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d136      	bne.n	800883c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	0c1b      	lsrs	r3, r3, #16
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10c      	bne.n	80087f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	43da      	mvns	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4013      	ands	r3, r2
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bf14      	ite	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	2300      	moveq	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	e00b      	b.n	800880a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	43da      	mvns	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4013      	ands	r3, r2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	bf14      	ite	ne
 8008804:	2301      	movne	r3, #1
 8008806:	2300      	moveq	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2200      	movs	r2, #0
 8008812:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008828:	f043 0220 	orr.w	r2, r3, #32
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e021      	b.n	8008880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	0c1b      	lsrs	r3, r3, #16
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b01      	cmp	r3, #1
 8008844:	d10c      	bne.n	8008860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	43da      	mvns	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	4013      	ands	r3, r2
 8008852:	b29b      	uxth	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	bf14      	ite	ne
 8008858:	2301      	movne	r3, #1
 800885a:	2300      	moveq	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	e00b      	b.n	8008878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	43da      	mvns	r2, r3
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4013      	ands	r3, r2
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	bf14      	ite	ne
 8008872:	2301      	movne	r3, #1
 8008874:	2300      	moveq	r3, #0
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f af6d 	bne.w	8008758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008894:	e034      	b.n	8008900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f915 	bl	8008ac6 <I2C_IsAcknowledgeFailed>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e034      	b.n	8008910 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d028      	beq.n	8008900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088ae:	f7fb f919 	bl	8003ae4 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d302      	bcc.n	80088c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d11d      	bne.n	8008900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ce:	2b80      	cmp	r3, #128	@ 0x80
 80088d0:	d016      	beq.n	8008900 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	f043 0220 	orr.w	r2, r3, #32
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e007      	b.n	8008910 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800890a:	2b80      	cmp	r3, #128	@ 0x80
 800890c:	d1c3      	bne.n	8008896 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008924:	e034      	b.n	8008990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f8cd 	bl	8008ac6 <I2C_IsAcknowledgeFailed>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e034      	b.n	80089a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d028      	beq.n	8008990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800893e:	f7fb f8d1 	bl	8003ae4 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d11d      	bne.n	8008990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b04      	cmp	r3, #4
 8008960:	d016      	beq.n	8008990 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897c:	f043 0220 	orr.w	r2, r3, #32
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e007      	b.n	80089a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b04      	cmp	r3, #4
 800899c:	d1c3      	bne.n	8008926 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80089b4:	4b13      	ldr	r3, [pc, #76]	@ (8008a04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	08db      	lsrs	r3, r3, #3
 80089ba:	4a13      	ldr	r2, [pc, #76]	@ (8008a08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80089bc:	fba2 2303 	umull	r2, r3, r2, r3
 80089c0:	0a1a      	lsrs	r2, r3, #8
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	f043 0220 	orr.w	r2, r3, #32
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e008      	b.n	80089f8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089f4:	d0e9      	beq.n	80089ca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	20000010 	.word	0x20000010
 8008a08:	14f8b589 	.word	0x14f8b589

08008a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a18:	e049      	b.n	8008aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	f003 0310 	and.w	r3, r3, #16
 8008a24:	2b10      	cmp	r3, #16
 8008a26:	d119      	bne.n	8008a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0210 	mvn.w	r2, #16
 8008a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e030      	b.n	8008abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5c:	f7fb f842 	bl	8003ae4 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d302      	bcc.n	8008a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d11d      	bne.n	8008aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	695b      	ldr	r3, [r3, #20]
 8008a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a7c:	2b40      	cmp	r3, #64	@ 0x40
 8008a7e:	d016      	beq.n	8008aae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	f043 0220 	orr.w	r2, r3, #32
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e007      	b.n	8008abe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab8:	2b40      	cmp	r3, #64	@ 0x40
 8008aba:	d1ae      	bne.n	8008a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ac6:	b480      	push	{r7}
 8008ac8:	b083      	sub	sp, #12
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008adc:	d11b      	bne.n	8008b16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008ae6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	f043 0204 	orr.w	r2, r3, #4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e000      	b.n	8008b18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008b34:	d103      	bne.n	8008b3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b3c:	e007      	b.n	8008b4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b42:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008b46:	d102      	bne.n	8008b4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008b4e:	bf00      	nop
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af02      	add	r7, sp, #8
 8008b60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d101      	bne.n	8008b6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e101      	b.n	8008d70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f007 fb70 	bl	801026c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b9a:	d102      	bne.n	8008ba2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f003 feeb 	bl	800c982 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7c1a      	ldrb	r2, [r3, #16]
 8008bb4:	f88d 2000 	strb.w	r2, [sp]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bbc:	f003 fdca 	bl	800c754 <USB_CoreInit>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2202      	movs	r2, #2
 8008bca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e0ce      	b.n	8008d70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f003 fee3 	bl	800c9a4 <USB_SetCurrentMode>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d005      	beq.n	8008bf0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0bf      	b.n	8008d70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
 8008bf4:	e04a      	b.n	8008c8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008bf6:	7bfa      	ldrb	r2, [r7, #15]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	3315      	adds	r3, #21
 8008c06:	2201      	movs	r2, #1
 8008c08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c0a:	7bfa      	ldrb	r2, [r7, #15]
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	3314      	adds	r3, #20
 8008c1a:	7bfa      	ldrb	r2, [r7, #15]
 8008c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008c1e:	7bfa      	ldrb	r2, [r7, #15]
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	b298      	uxth	r0, r3
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	332e      	adds	r3, #46	@ 0x2e
 8008c32:	4602      	mov	r2, r0
 8008c34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c36:	7bfa      	ldrb	r2, [r7, #15]
 8008c38:	6879      	ldr	r1, [r7, #4]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	3318      	adds	r3, #24
 8008c46:	2200      	movs	r2, #0
 8008c48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008c4a:	7bfa      	ldrb	r2, [r7, #15]
 8008c4c:	6879      	ldr	r1, [r7, #4]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	00db      	lsls	r3, r3, #3
 8008c52:	4413      	add	r3, r2
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	440b      	add	r3, r1
 8008c58:	331c      	adds	r3, #28
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008c5e:	7bfa      	ldrb	r2, [r7, #15]
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	00db      	lsls	r3, r3, #3
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3320      	adds	r3, #32
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008c72:	7bfa      	ldrb	r2, [r7, #15]
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4613      	mov	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3324      	adds	r3, #36	@ 0x24
 8008c82:	2200      	movs	r2, #0
 8008c84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	73fb      	strb	r3, [r7, #15]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	791b      	ldrb	r3, [r3, #4]
 8008c90:	7bfa      	ldrb	r2, [r7, #15]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d3af      	bcc.n	8008bf6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	e044      	b.n	8008d26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008c9c:	7bfa      	ldrb	r2, [r7, #15]
 8008c9e:	6879      	ldr	r1, [r7, #4]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	00db      	lsls	r3, r3, #3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	440b      	add	r3, r1
 8008caa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008cb2:	7bfa      	ldrb	r2, [r7, #15]
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	00db      	lsls	r3, r3, #3
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008cc8:	7bfa      	ldrb	r2, [r7, #15]
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008cda:	2200      	movs	r2, #0
 8008cdc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008cde:	7bfa      	ldrb	r2, [r7, #15]
 8008ce0:	6879      	ldr	r1, [r7, #4]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	440b      	add	r3, r1
 8008cec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008cf4:	7bfa      	ldrb	r2, [r7, #15]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d0a:	7bfa      	ldrb	r2, [r7, #15]
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	3301      	adds	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	7bfa      	ldrb	r2, [r7, #15]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d3b5      	bcc.n	8008c9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7c1a      	ldrb	r2, [r3, #16]
 8008d38:	f88d 2000 	strb.w	r2, [sp]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d40:	f003 fe7c 	bl	800ca3c <USB_DevInit>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e00c      	b.n	8008d70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f004 fec6 	bl	800dafa <USB_DevDisconnect>

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_PCD_Start+0x1c>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e022      	b.n	8008dda <HAL_PCD_Start+0x62>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d105      	bne.n	8008dbc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008db4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f003 fdcd 	bl	800c960 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f004 fe74 	bl	800dab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008de2:	b590      	push	{r4, r7, lr}
 8008de4:	b08d      	sub	sp, #52	@ 0x34
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f004 ff32 	bl	800dc62 <USB_GetMode>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 848c 	bne.w	800971e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f004 fe96 	bl	800db3c <USB_ReadInterrupts>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8482 	beq.w	800971c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	0a1b      	lsrs	r3, r3, #8
 8008e22:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f004 fe83 	bl	800db3c <USB_ReadInterrupts>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d107      	bne.n	8008e50 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	695a      	ldr	r2, [r3, #20]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f002 0202 	and.w	r2, r2, #2
 8008e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f004 fe71 	bl	800db3c <USB_ReadInterrupts>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	d161      	bne.n	8008f28 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0210 	bic.w	r2, r2, #16
 8008e72:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f003 020f 	and.w	r2, r3, #15
 8008e80:	4613      	mov	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	4413      	add	r3, r2
 8008e90:	3304      	adds	r3, #4
 8008e92:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008e9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e9e:	d124      	bne.n	8008eea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d035      	beq.n	8008f18 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	091b      	lsrs	r3, r3, #4
 8008eb4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6a38      	ldr	r0, [r7, #32]
 8008ec0:	f004 fca8 	bl	800d814 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	091b      	lsrs	r3, r3, #4
 8008ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ed0:	441a      	add	r2, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	695a      	ldr	r2, [r3, #20]
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ee2:	441a      	add	r2, r3
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	615a      	str	r2, [r3, #20]
 8008ee8:	e016      	b.n	8008f18 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8008ef0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008ef4:	d110      	bne.n	8008f18 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008efc:	2208      	movs	r2, #8
 8008efe:	4619      	mov	r1, r3
 8008f00:	6a38      	ldr	r0, [r7, #32]
 8008f02:	f004 fc87 	bl	800d814 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	695a      	ldr	r2, [r3, #20]
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f12:	441a      	add	r2, r3
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	699a      	ldr	r2, [r3, #24]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0210 	orr.w	r2, r2, #16
 8008f26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f004 fe05 	bl	800db3c <USB_ReadInterrupts>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f38:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008f3c:	f040 80a7 	bne.w	800908e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f004 fe0a 	bl	800db62 <USB_ReadDevAllOutEpInterrupt>
 8008f4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008f50:	e099      	b.n	8009086 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 808e 	beq.w	800907a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	4611      	mov	r1, r2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f004 fe2e 	bl	800dbca <USB_ReadDevOutEPInterrupt>
 8008f6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00c      	beq.n	8008f94 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f86:	461a      	mov	r2, r3
 8008f88:	2301      	movs	r3, #1
 8008f8a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008f8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fea4 	bl	8009cdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f003 0308 	and.w	r3, r3, #8
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00c      	beq.n	8008fb8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008faa:	461a      	mov	r2, r3
 8008fac:	2308      	movs	r3, #8
 8008fae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008fb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 ff7a 	bl	8009eac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f003 0310 	and.w	r3, r3, #16
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d008      	beq.n	8008fd4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fce:	461a      	mov	r2, r3
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d030      	beq.n	8009040 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d109      	bne.n	8008ffe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ff8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008ffc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	4413      	add	r3, r2
 8009010:	3304      	adds	r3, #4
 8009012:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	78db      	ldrb	r3, [r3, #3]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d108      	bne.n	800902e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2200      	movs	r2, #0
 8009020:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f007 fa1b 	bl	8010464 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800903a:	461a      	mov	r2, r3
 800903c:	2302      	movs	r3, #2
 800903e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009056:	461a      	mov	r2, r3
 8009058:	2320      	movs	r3, #32
 800905a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009072:	461a      	mov	r2, r3
 8009074:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009078:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	3301      	adds	r3, #1
 800907e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009082:	085b      	lsrs	r3, r3, #1
 8009084:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009088:	2b00      	cmp	r3, #0
 800908a:	f47f af62 	bne.w	8008f52 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4618      	mov	r0, r3
 8009094:	f004 fd52 	bl	800db3c <USB_ReadInterrupts>
 8009098:	4603      	mov	r3, r0
 800909a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800909e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80090a2:	f040 80db 	bne.w	800925c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f004 fd73 	bl	800db96 <USB_ReadDevAllInEpInterrupt>
 80090b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80090b2:	2300      	movs	r3, #0
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80090b6:	e0cd      	b.n	8009254 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80090b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80c2 	beq.w	8009248 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	4611      	mov	r1, r2
 80090ce:	4618      	mov	r0, r3
 80090d0:	f004 fd99 	bl	800dc06 <USB_ReadDevInEPInterrupt>
 80090d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d057      	beq.n	8009190 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	2201      	movs	r2, #1
 80090e8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	43db      	mvns	r3, r3
 80090fa:	69f9      	ldr	r1, [r7, #28]
 80090fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009100:	4013      	ands	r3, r2
 8009102:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009110:	461a      	mov	r2, r3
 8009112:	2301      	movs	r3, #1
 8009114:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	799b      	ldrb	r3, [r3, #6]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d132      	bne.n	8009184 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009122:	4613      	mov	r3, r2
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	4413      	add	r3, r2
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	440b      	add	r3, r1
 800912c:	3320      	adds	r3, #32
 800912e:	6819      	ldr	r1, [r3, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009134:	4613      	mov	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4403      	add	r3, r0
 800913e:	331c      	adds	r3, #28
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4419      	add	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009148:	4613      	mov	r3, r2
 800914a:	00db      	lsls	r3, r3, #3
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4403      	add	r3, r0
 8009152:	3320      	adds	r3, #32
 8009154:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	d113      	bne.n	8009184 <HAL_PCD_IRQHandler+0x3a2>
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	3324      	adds	r3, #36	@ 0x24
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d108      	bne.n	8009184 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6818      	ldr	r0, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800917c:	461a      	mov	r2, r3
 800917e:	2101      	movs	r1, #1
 8009180:	f004 fda0 	bl	800dcc4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009186:	b2db      	uxtb	r3, r3
 8009188:	4619      	mov	r1, r3
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f007 f8ef 	bl	801036e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d008      	beq.n	80091ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091a6:	461a      	mov	r2, r3
 80091a8:	2308      	movs	r3, #8
 80091aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f003 0310 	and.w	r3, r3, #16
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d008      	beq.n	80091c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091c2:	461a      	mov	r2, r3
 80091c4:	2310      	movs	r3, #16
 80091c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d008      	beq.n	80091e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80091d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091de:	461a      	mov	r2, r3
 80091e0:	2340      	movs	r3, #64	@ 0x40
 80091e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d023      	beq.n	8009236 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80091ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091f0:	6a38      	ldr	r0, [r7, #32]
 80091f2:	f003 fd87 	bl	800cd04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80091f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091f8:	4613      	mov	r3, r2
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	4413      	add	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	3310      	adds	r3, #16
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	4413      	add	r3, r2
 8009206:	3304      	adds	r3, #4
 8009208:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	78db      	ldrb	r3, [r3, #3]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d108      	bne.n	8009224 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	b2db      	uxtb	r3, r3
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f007 f932 	bl	8010488 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009230:	461a      	mov	r2, r3
 8009232:	2302      	movs	r3, #2
 8009234:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009240:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fcbd 	bl	8009bc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924a:	3301      	adds	r3, #1
 800924c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800924e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009250:	085b      	lsrs	r3, r3, #1
 8009252:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	f47f af2e 	bne.w	80090b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f004 fc6b 	bl	800db3c <USB_ReadInterrupts>
 8009266:	4603      	mov	r3, r0
 8009268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800926c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009270:	d122      	bne.n	80092b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800928c:	2b01      	cmp	r3, #1
 800928e:	d108      	bne.n	80092a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009298:	2100      	movs	r1, #0
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fea4 	bl	8009fe8 <HAL_PCDEx_LPM_Callback>
 80092a0:	e002      	b.n	80092a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f007 f8d0 	bl	8010448 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	695a      	ldr	r2, [r3, #20]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80092b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4618      	mov	r0, r3
 80092be:	f004 fc3d 	bl	800db3c <USB_ReadInterrupts>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092cc:	d112      	bne.n	80092f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d102      	bne.n	80092e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f007 f88c 	bl	80103fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	695a      	ldr	r2, [r3, #20]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80092f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f004 fc1f 	bl	800db3c <USB_ReadInterrupts>
 80092fe:	4603      	mov	r3, r0
 8009300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009308:	f040 80b7 	bne.w	800947a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	69fa      	ldr	r2, [r7, #28]
 8009316:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2110      	movs	r1, #16
 8009326:	4618      	mov	r0, r3
 8009328:	f003 fcec 	bl	800cd04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800932c:	2300      	movs	r3, #0
 800932e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009330:	e046      	b.n	80093c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009334:	015a      	lsls	r2, r3, #5
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	4413      	add	r3, r2
 800933a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800933e:	461a      	mov	r2, r3
 8009340:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009344:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009348:	015a      	lsls	r2, r3, #5
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	4413      	add	r3, r2
 800934e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009360:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009364:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009372:	461a      	mov	r2, r3
 8009374:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009378:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800938a:	0151      	lsls	r1, r2, #5
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	440a      	add	r2, r1
 8009390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009394:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009398:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800939a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093bc:	3301      	adds	r3, #1
 80093be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	791b      	ldrb	r3, [r3, #4]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d3b2      	bcc.n	8009332 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	69fa      	ldr	r2, [r7, #28]
 80093d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80093de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7bdb      	ldrb	r3, [r3, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d016      	beq.n	8009416 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093f8:	f043 030b 	orr.w	r3, r3, #11
 80093fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009408:	69fa      	ldr	r2, [r7, #28]
 800940a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800940e:	f043 030b 	orr.w	r3, r3, #11
 8009412:	6453      	str	r3, [r2, #68]	@ 0x44
 8009414:	e015      	b.n	8009442 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009424:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009428:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800942c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800943c:	f043 030b 	orr.w	r3, r3, #11
 8009440:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69fa      	ldr	r2, [r7, #28]
 800944c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009450:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009454:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009464:	461a      	mov	r2, r3
 8009466:	f004 fc2d 	bl	800dcc4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	695a      	ldr	r2, [r3, #20]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009478:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4618      	mov	r0, r3
 8009480:	f004 fb5c 	bl	800db3c <USB_ReadInterrupts>
 8009484:	4603      	mov	r3, r0
 8009486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800948a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800948e:	d123      	bne.n	80094d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f004 fbf2 	bl	800dc7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f003 fca9 	bl	800cdf6 <USB_GetDevSpeed>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681c      	ldr	r4, [r3, #0]
 80094b0:	f001 f9d6 	bl	800a860 <HAL_RCC_GetHCLKFreq>
 80094b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80094ba:	461a      	mov	r2, r3
 80094bc:	4620      	mov	r0, r4
 80094be:	f003 f9ad 	bl	800c81c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f006 ff7b 	bl	80103be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695a      	ldr	r2, [r3, #20]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80094d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f004 fb2d 	bl	800db3c <USB_ReadInterrupts>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d10a      	bne.n	8009502 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f006 ff58 	bl	80103a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	695a      	ldr	r2, [r3, #20]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f002 0208 	and.w	r2, r2, #8
 8009500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f004 fb18 	bl	800db3c <USB_ReadInterrupts>
 800950c:	4603      	mov	r3, r0
 800950e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009512:	2b80      	cmp	r3, #128	@ 0x80
 8009514:	d123      	bne.n	800955e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009522:	2301      	movs	r3, #1
 8009524:	627b      	str	r3, [r7, #36]	@ 0x24
 8009526:	e014      	b.n	8009552 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800952c:	4613      	mov	r3, r2
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d105      	bne.n	800954c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	b2db      	uxtb	r3, r3
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fb0a 	bl	8009b60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	3301      	adds	r3, #1
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	791b      	ldrb	r3, [r3, #4]
 8009556:	461a      	mov	r2, r3
 8009558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955a:	4293      	cmp	r3, r2
 800955c:	d3e4      	bcc.n	8009528 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f004 faea 	bl	800db3c <USB_ReadInterrupts>
 8009568:	4603      	mov	r3, r0
 800956a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800956e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009572:	d13c      	bne.n	80095ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009574:	2301      	movs	r3, #1
 8009576:	627b      	str	r3, [r7, #36]	@ 0x24
 8009578:	e02b      	b.n	80095d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	015a      	lsls	r2, r3, #5
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	4413      	add	r3, r2
 8009582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800958e:	4613      	mov	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	440b      	add	r3, r1
 8009598:	3318      	adds	r3, #24
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d115      	bne.n	80095cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80095a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	da12      	bge.n	80095cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095aa:	4613      	mov	r3, r2
 80095ac:	00db      	lsls	r3, r3, #3
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	3317      	adds	r3, #23
 80095b6:	2201      	movs	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 faca 	bl	8009b60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	3301      	adds	r3, #1
 80095d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	791b      	ldrb	r3, [r3, #4]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	4293      	cmp	r3, r2
 80095dc:	d3cd      	bcc.n	800957a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	695a      	ldr	r2, [r3, #20]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80095ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f004 faa2 	bl	800db3c <USB_ReadInterrupts>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009602:	d156      	bne.n	80096b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009604:	2301      	movs	r3, #1
 8009606:	627b      	str	r3, [r7, #36]	@ 0x24
 8009608:	e045      	b.n	8009696 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961e:	4613      	mov	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d12e      	bne.n	8009690 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009632:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009634:	2b00      	cmp	r3, #0
 8009636:	da2b      	bge.n	8009690 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009644:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009648:	429a      	cmp	r2, r3
 800964a:	d121      	bne.n	8009690 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009650:	4613      	mov	r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	440b      	add	r3, r1
 800965a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800965e:	2201      	movs	r2, #1
 8009660:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800966e:	6a3b      	ldr	r3, [r7, #32]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009676:	2b00      	cmp	r3, #0
 8009678:	d10a      	bne.n	8009690 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009688:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800968c:	6053      	str	r3, [r2, #4]
            break;
 800968e:	e008      	b.n	80096a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	3301      	adds	r3, #1
 8009694:	627b      	str	r3, [r7, #36]	@ 0x24
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	791b      	ldrb	r3, [r3, #4]
 800969a:	461a      	mov	r2, r3
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	4293      	cmp	r3, r2
 80096a0:	d3b3      	bcc.n	800960a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	695a      	ldr	r2, [r3, #20]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80096b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f004 fa40 	bl	800db3c <USB_ReadInterrupts>
 80096bc:	4603      	mov	r3, r0
 80096be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c6:	d10a      	bne.n	80096de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f006 feef 	bl	80104ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	695a      	ldr	r2, [r3, #20]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80096dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f004 fa2a 	bl	800db3c <USB_ReadInterrupts>
 80096e8:	4603      	mov	r3, r0
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d115      	bne.n	800971e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f006 fedf 	bl	80104c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6859      	ldr	r1, [r3, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69ba      	ldr	r2, [r7, #24]
 8009716:	430a      	orrs	r2, r1
 8009718:	605a      	str	r2, [r3, #4]
 800971a:	e000      	b.n	800971e <HAL_PCD_IRQHandler+0x93c>
      return;
 800971c:	bf00      	nop
    }
  }
}
 800971e:	3734      	adds	r7, #52	@ 0x34
 8009720:	46bd      	mov	sp, r7
 8009722:	bd90      	pop	{r4, r7, pc}

08009724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	460b      	mov	r3, r1
 800972e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <HAL_PCD_SetAddress+0x1a>
 800973a:	2302      	movs	r3, #2
 800973c:	e012      	b.n	8009764 <HAL_PCD_SetAddress+0x40>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	78fa      	ldrb	r2, [r7, #3]
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f004 f989 	bl	800da6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	461a      	mov	r2, r3
 800977a:	4603      	mov	r3, r0
 800977c:	70fb      	strb	r3, [r7, #3]
 800977e:	460b      	mov	r3, r1
 8009780:	803b      	strh	r3, [r7, #0]
 8009782:	4613      	mov	r3, r2
 8009784:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800978a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800978e:	2b00      	cmp	r3, #0
 8009790:	da0f      	bge.n	80097b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	f003 020f 	and.w	r2, r3, #15
 8009798:	4613      	mov	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	3310      	adds	r3, #16
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4413      	add	r3, r2
 80097a6:	3304      	adds	r3, #4
 80097a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2201      	movs	r2, #1
 80097ae:	705a      	strb	r2, [r3, #1]
 80097b0:	e00f      	b.n	80097d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	4613      	mov	r3, r2
 80097ba:	00db      	lsls	r3, r3, #3
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80097de:	883b      	ldrh	r3, [r7, #0]
 80097e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	78ba      	ldrb	r2, [r7, #2]
 80097ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009800:	78bb      	ldrb	r3, [r7, #2]
 8009802:	2b02      	cmp	r3, #2
 8009804:	d102      	bne.n	800980c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_PCD_EP_Open+0xae>
 8009816:	2302      	movs	r3, #2
 8009818:	e00e      	b.n	8009838 <HAL_PCD_EP_Open+0xcc>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68f9      	ldr	r1, [r7, #12]
 8009828:	4618      	mov	r0, r3
 800982a:	f003 fb09 	bl	800ce40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009836:	7afb      	ldrb	r3, [r7, #11]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800984c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009850:	2b00      	cmp	r3, #0
 8009852:	da0f      	bge.n	8009874 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	f003 020f 	and.w	r2, r3, #15
 800985a:	4613      	mov	r3, r2
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	4413      	add	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	3310      	adds	r3, #16
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	4413      	add	r3, r2
 8009868:	3304      	adds	r3, #4
 800986a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	705a      	strb	r2, [r3, #1]
 8009872:	e00f      	b.n	8009894 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	f003 020f 	and.w	r2, r3, #15
 800987a:	4613      	mov	r3, r2
 800987c:	00db      	lsls	r3, r3, #3
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	4413      	add	r3, r2
 800988a:	3304      	adds	r3, #4
 800988c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	f003 030f 	and.w	r3, r3, #15
 800989a:	b2da      	uxtb	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_PCD_EP_Close+0x6e>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e00e      	b.n	80098cc <HAL_PCD_EP_Close+0x8c>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68f9      	ldr	r1, [r7, #12]
 80098bc:	4618      	mov	r0, r3
 80098be:	f003 fb47 	bl	800cf50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b086      	sub	sp, #24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	460b      	mov	r3, r1
 80098e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098e4:	7afb      	ldrb	r3, [r7, #11]
 80098e6:	f003 020f 	and.w	r2, r3, #15
 80098ea:	4613      	mov	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	3304      	adds	r3, #4
 80098fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2200      	movs	r2, #0
 800990e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2200      	movs	r2, #0
 8009914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009916:	7afb      	ldrb	r3, [r7, #11]
 8009918:	f003 030f 	and.w	r3, r3, #15
 800991c:	b2da      	uxtb	r2, r3
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	799b      	ldrb	r3, [r3, #6]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d102      	bne.n	8009930 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	799b      	ldrb	r3, [r3, #6]
 8009938:	461a      	mov	r2, r3
 800993a:	6979      	ldr	r1, [r7, #20]
 800993c:	f003 fbe4 	bl	800d108 <USB_EPStartXfer>

  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3718      	adds	r7, #24
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	460b      	mov	r3, r1
 8009954:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	f003 020f 	and.w	r2, r3, #15
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	4613      	mov	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	440b      	add	r3, r1
 8009968:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800996c:	681b      	ldr	r3, [r3, #0]
}
 800996e:	4618      	mov	r0, r3
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b086      	sub	sp, #24
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
 8009986:	460b      	mov	r3, r1
 8009988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800998a:	7afb      	ldrb	r3, [r7, #11]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	4613      	mov	r3, r2
 8009992:	00db      	lsls	r3, r3, #3
 8009994:	4413      	add	r3, r2
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	3310      	adds	r3, #16
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	3304      	adds	r3, #4
 80099a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2200      	movs	r2, #0
 80099b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2201      	movs	r2, #1
 80099b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	799b      	ldrb	r3, [r3, #6]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d102      	bne.n	80099d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	799b      	ldrb	r3, [r3, #6]
 80099dc:	461a      	mov	r2, r3
 80099de:	6979      	ldr	r1, [r7, #20]
 80099e0:	f003 fb92 	bl	800d108 <USB_EPStartXfer>

  return HAL_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	f003 030f 	and.w	r3, r3, #15
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	7912      	ldrb	r2, [r2, #4]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d901      	bls.n	8009a0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e04f      	b.n	8009aac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da0f      	bge.n	8009a34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	f003 020f 	and.w	r2, r3, #15
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	4413      	add	r3, r2
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	3310      	adds	r3, #16
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	705a      	strb	r2, [r3, #1]
 8009a32:	e00d      	b.n	8009a50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	4613      	mov	r3, r2
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	4413      	add	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	4413      	add	r3, r2
 8009a46:	3304      	adds	r3, #4
 8009a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2201      	movs	r2, #1
 8009a54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a56:	78fb      	ldrb	r3, [r7, #3]
 8009a58:	f003 030f 	and.w	r3, r3, #15
 8009a5c:	b2da      	uxtb	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_PCD_EP_SetStall+0x82>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e01d      	b.n	8009aac <HAL_PCD_EP_SetStall+0xbe>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68f9      	ldr	r1, [r7, #12]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f003 ff20 	bl	800d8c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009a84:	78fb      	ldrb	r3, [r7, #3]
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6818      	ldr	r0, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7999      	ldrb	r1, [r3, #6]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	f004 f911 	bl	800dcc4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	f003 030f 	and.w	r3, r3, #15
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	7912      	ldrb	r2, [r2, #4]
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d901      	bls.n	8009ad2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e042      	b.n	8009b58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	da0f      	bge.n	8009afa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	f003 020f 	and.w	r2, r3, #15
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	3310      	adds	r3, #16
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	3304      	adds	r3, #4
 8009af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2201      	movs	r2, #1
 8009af6:	705a      	strb	r2, [r3, #1]
 8009af8:	e00f      	b.n	8009b1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	f003 020f 	and.w	r2, r3, #15
 8009b00:	4613      	mov	r3, r2
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	4413      	add	r3, r2
 8009b10:	3304      	adds	r3, #4
 8009b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d101      	bne.n	8009b3a <HAL_PCD_EP_ClrStall+0x86>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e00e      	b.n	8009b58 <HAL_PCD_EP_ClrStall+0xa4>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68f9      	ldr	r1, [r7, #12]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f003 ff29 	bl	800d9a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	da0c      	bge.n	8009b8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b74:	78fb      	ldrb	r3, [r7, #3]
 8009b76:	f003 020f 	and.w	r2, r3, #15
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	3310      	adds	r3, #16
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	3304      	adds	r3, #4
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	e00c      	b.n	8009ba8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b8e:	78fb      	ldrb	r3, [r7, #3]
 8009b90:	f003 020f 	and.w	r2, r3, #15
 8009b94:	4613      	mov	r3, r2
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68f9      	ldr	r1, [r7, #12]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f003 fd48 	bl	800d644 <USB_EPStopXfer>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009bb8:	7afb      	ldrb	r3, [r7, #11]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b08a      	sub	sp, #40	@ 0x28
 8009bc6:	af02      	add	r7, sp, #8
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	4413      	add	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	3310      	adds	r3, #16
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	4413      	add	r3, r2
 8009be6:	3304      	adds	r3, #4
 8009be8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	695a      	ldr	r2, [r3, #20]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d901      	bls.n	8009bfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e06b      	b.n	8009cd2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d902      	bls.n	8009c16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	3303      	adds	r3, #3
 8009c1a:	089b      	lsrs	r3, r3, #2
 8009c1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c1e:	e02a      	b.n	8009c76 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	691a      	ldr	r2, [r3, #16]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	69fa      	ldr	r2, [r7, #28]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d902      	bls.n	8009c3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	3303      	adds	r3, #3
 8009c40:	089b      	lsrs	r3, r3, #2
 8009c42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68d9      	ldr	r1, [r3, #12]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4603      	mov	r3, r0
 8009c58:	6978      	ldr	r0, [r7, #20]
 8009c5a:	f003 fd9d 	bl	800d798 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	441a      	add	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	695a      	ldr	r2, [r3, #20]
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	441a      	add	r2, r3
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d809      	bhi.n	8009ca0 <PCD_WriteEmptyTxFifo+0xde>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	695a      	ldr	r2, [r3, #20]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d203      	bcs.n	8009ca0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1bf      	bne.n	8009c20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d811      	bhi.n	8009cd0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	f003 030f 	and.w	r3, r3, #15
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	43db      	mvns	r3, r3
 8009cc6:	6939      	ldr	r1, [r7, #16]
 8009cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ccc:	4013      	ands	r3, r2
 8009cce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3720      	adds	r7, #32
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	333c      	adds	r3, #60	@ 0x3c
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	799b      	ldrb	r3, [r3, #6]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d17b      	bne.n	8009e0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d015      	beq.n	8009d48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	4a61      	ldr	r2, [pc, #388]	@ (8009ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	f240 80b9 	bls.w	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 80b3 	beq.w	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d44:	6093      	str	r3, [r2, #8]
 8009d46:	e0a7      	b.n	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f003 0320 	and.w	r3, r3, #32
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d009      	beq.n	8009d66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	015a      	lsls	r2, r3, #5
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	4413      	add	r3, r2
 8009d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5e:	461a      	mov	r2, r3
 8009d60:	2320      	movs	r3, #32
 8009d62:	6093      	str	r3, [r2, #8]
 8009d64:	e098      	b.n	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f040 8093 	bne.w	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	4a4b      	ldr	r2, [pc, #300]	@ (8009ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d90f      	bls.n	8009d9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00a      	beq.n	8009d9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d90:	461a      	mov	r2, r3
 8009d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d96:	6093      	str	r3, [r2, #8]
 8009d98:	e07e      	b.n	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	00db      	lsls	r3, r3, #3
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	4413      	add	r3, r2
 8009dac:	3304      	adds	r3, #4
 8009dae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a1a      	ldr	r2, [r3, #32]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	0159      	lsls	r1, r3, #5
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	440b      	add	r3, r1
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dc6:	1ad2      	subs	r2, r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d114      	bne.n	8009dfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009de4:	461a      	mov	r2, r3
 8009de6:	2101      	movs	r1, #1
 8009de8:	f003 ff6c 	bl	800dcc4 <USB_EP0_OutStart>
 8009dec:	e006      	b.n	8009dfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	441a      	add	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f006 fa98 	bl	8010338 <HAL_PCD_DataOutStageCallback>
 8009e08:	e046      	b.n	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4a26      	ldr	r2, [pc, #152]	@ (8009ea8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d124      	bne.n	8009e5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e2e:	6093      	str	r3, [r2, #8]
 8009e30:	e032      	b.n	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d008      	beq.n	8009e4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e48:	461a      	mov	r2, r3
 8009e4a:	2320      	movs	r3, #32
 8009e4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f006 fa6f 	bl	8010338 <HAL_PCD_DataOutStageCallback>
 8009e5a:	e01d      	b.n	8009e98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d114      	bne.n	8009e8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	4613      	mov	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	4413      	add	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	440b      	add	r3, r1
 8009e70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d108      	bne.n	8009e8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e84:	461a      	mov	r2, r3
 8009e86:	2100      	movs	r1, #0
 8009e88:	f003 ff1c 	bl	800dcc4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	4619      	mov	r1, r3
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f006 fa50 	bl	8010338 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	4f54300a 	.word	0x4f54300a
 8009ea8:	4f54310a 	.word	0x4f54310a

08009eac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	333c      	adds	r3, #60	@ 0x3c
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4a15      	ldr	r2, [pc, #84]	@ (8009f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d90e      	bls.n	8009f00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d009      	beq.n	8009f00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009efe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f006 fa07 	bl	8010314 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4a0a      	ldr	r2, [pc, #40]	@ (8009f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d90c      	bls.n	8009f28 <PCD_EP_OutSetupPacket_int+0x7c>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	799b      	ldrb	r3, [r3, #6]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d108      	bne.n	8009f28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f20:	461a      	mov	r2, r3
 8009f22:	2101      	movs	r1, #1
 8009f24:	f003 fece 	bl	800dcc4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3718      	adds	r7, #24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	4f54300a 	.word	0x4f54300a

08009f38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
 8009f44:	4613      	mov	r3, r2
 8009f46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d107      	bne.n	8009f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009f56:	883b      	ldrh	r3, [r7, #0]
 8009f58:	0419      	lsls	r1, r3, #16
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f64:	e028      	b.n	8009fb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6c:	0c1b      	lsrs	r3, r3, #16
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009f74:	2300      	movs	r3, #0
 8009f76:	73fb      	strb	r3, [r7, #15]
 8009f78:	e00d      	b.n	8009f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	3340      	adds	r3, #64	@ 0x40
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
 8009f92:	3301      	adds	r3, #1
 8009f94:	73fb      	strb	r3, [r7, #15]
 8009f96:	7bfa      	ldrb	r2, [r7, #15]
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d3ec      	bcc.n	8009f7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009fa0:	883b      	ldrh	r3, [r7, #0]
 8009fa2:	0418      	lsls	r0, r3, #16
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6819      	ldr	r1, [r3, #0]
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	4302      	orrs	r2, r0
 8009fb0:	3340      	adds	r3, #64	@ 0x40
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b083      	sub	sp, #12
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	460b      	mov	r3, r1
 8009fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	887a      	ldrh	r2, [r7, #2]
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009ff4:	bf00      	nop
 8009ff6:	370c      	adds	r7, #12
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d101      	bne.n	800a012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e267      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d075      	beq.n	800a10a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a01e:	4b88      	ldr	r3, [pc, #544]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f003 030c 	and.w	r3, r3, #12
 800a026:	2b04      	cmp	r3, #4
 800a028:	d00c      	beq.n	800a044 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a02a:	4b85      	ldr	r3, [pc, #532]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800a032:	2b08      	cmp	r3, #8
 800a034:	d112      	bne.n	800a05c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a036:	4b82      	ldr	r3, [pc, #520]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a03e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a042:	d10b      	bne.n	800a05c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a044:	4b7e      	ldr	r3, [pc, #504]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d05b      	beq.n	800a108 <HAL_RCC_OscConfig+0x108>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d157      	bne.n	800a108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e242      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a064:	d106      	bne.n	800a074 <HAL_RCC_OscConfig+0x74>
 800a066:	4b76      	ldr	r3, [pc, #472]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a75      	ldr	r2, [pc, #468]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a06c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e01d      	b.n	800a0b0 <HAL_RCC_OscConfig+0xb0>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a07c:	d10c      	bne.n	800a098 <HAL_RCC_OscConfig+0x98>
 800a07e:	4b70      	ldr	r3, [pc, #448]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a6f      	ldr	r2, [pc, #444]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	4b6d      	ldr	r3, [pc, #436]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a6c      	ldr	r2, [pc, #432]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	e00b      	b.n	800a0b0 <HAL_RCC_OscConfig+0xb0>
 800a098:	4b69      	ldr	r3, [pc, #420]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a68      	ldr	r2, [pc, #416]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a09e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	4b66      	ldr	r3, [pc, #408]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a65      	ldr	r2, [pc, #404]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a0aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d013      	beq.n	800a0e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0b8:	f7f9 fd14 	bl	8003ae4 <HAL_GetTick>
 800a0bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c0:	f7f9 fd10 	bl	8003ae4 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b64      	cmp	r3, #100	@ 0x64
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e207      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0d2:	4b5b      	ldr	r3, [pc, #364]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f0      	beq.n	800a0c0 <HAL_RCC_OscConfig+0xc0>
 800a0de:	e014      	b.n	800a10a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0e0:	f7f9 fd00 	bl	8003ae4 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0e8:	f7f9 fcfc 	bl	8003ae4 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b64      	cmp	r3, #100	@ 0x64
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e1f3      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0fa:	4b51      	ldr	r3, [pc, #324]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0xe8>
 800a106:	e000      	b.n	800a10a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d063      	beq.n	800a1de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a116:	4b4a      	ldr	r3, [pc, #296]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 030c 	and.w	r3, r3, #12
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00b      	beq.n	800a13a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a122:	4b47      	ldr	r3, [pc, #284]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d11c      	bne.n	800a168 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a12e:	4b44      	ldr	r3, [pc, #272]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d116      	bne.n	800a168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a13a:	4b41      	ldr	r3, [pc, #260]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <HAL_RCC_OscConfig+0x152>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d001      	beq.n	800a152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e1c7      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a152:	4b3b      	ldr	r3, [pc, #236]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4937      	ldr	r1, [pc, #220]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a162:	4313      	orrs	r3, r2
 800a164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a166:	e03a      	b.n	800a1de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d020      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a170:	4b34      	ldr	r3, [pc, #208]	@ (800a244 <HAL_RCC_OscConfig+0x244>)
 800a172:	2201      	movs	r2, #1
 800a174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a176:	f7f9 fcb5 	bl	8003ae4 <HAL_GetTick>
 800a17a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a17c:	e008      	b.n	800a190 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a17e:	f7f9 fcb1 	bl	8003ae4 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d901      	bls.n	800a190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e1a8      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a190:	4b2b      	ldr	r3, [pc, #172]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0302 	and.w	r3, r3, #2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0f0      	beq.n	800a17e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a19c:	4b28      	ldr	r3, [pc, #160]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	4925      	ldr	r1, [pc, #148]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	600b      	str	r3, [r1, #0]
 800a1b0:	e015      	b.n	800a1de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1b2:	4b24      	ldr	r3, [pc, #144]	@ (800a244 <HAL_RCC_OscConfig+0x244>)
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b8:	f7f9 fc94 	bl	8003ae4 <HAL_GetTick>
 800a1bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1be:	e008      	b.n	800a1d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1c0:	f7f9 fc90 	bl	8003ae4 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e187      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1f0      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d036      	beq.n	800a258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d016      	beq.n	800a220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1f2:	4b15      	ldr	r3, [pc, #84]	@ (800a248 <HAL_RCC_OscConfig+0x248>)
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1f8:	f7f9 fc74 	bl	8003ae4 <HAL_GetTick>
 800a1fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1fe:	e008      	b.n	800a212 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a200:	f7f9 fc70 	bl	8003ae4 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d901      	bls.n	800a212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e167      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a212:	4b0b      	ldr	r3, [pc, #44]	@ (800a240 <HAL_RCC_OscConfig+0x240>)
 800a214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0f0      	beq.n	800a200 <HAL_RCC_OscConfig+0x200>
 800a21e:	e01b      	b.n	800a258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a220:	4b09      	ldr	r3, [pc, #36]	@ (800a248 <HAL_RCC_OscConfig+0x248>)
 800a222:	2200      	movs	r2, #0
 800a224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a226:	f7f9 fc5d 	bl	8003ae4 <HAL_GetTick>
 800a22a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a22c:	e00e      	b.n	800a24c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a22e:	f7f9 fc59 	bl	8003ae4 <HAL_GetTick>
 800a232:	4602      	mov	r2, r0
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	1ad3      	subs	r3, r2, r3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d907      	bls.n	800a24c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e150      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
 800a240:	40023800 	.word	0x40023800
 800a244:	42470000 	.word	0x42470000
 800a248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a24c:	4b88      	ldr	r3, [pc, #544]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a24e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1ea      	bne.n	800a22e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	f000 8097 	beq.w	800a394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a266:	2300      	movs	r3, #0
 800a268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a26a:	4b81      	ldr	r3, [pc, #516]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10f      	bne.n	800a296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a276:	2300      	movs	r3, #0
 800a278:	60bb      	str	r3, [r7, #8]
 800a27a:	4b7d      	ldr	r3, [pc, #500]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a27e:	4a7c      	ldr	r2, [pc, #496]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a284:	6413      	str	r3, [r2, #64]	@ 0x40
 800a286:	4b7a      	ldr	r3, [pc, #488]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a28a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a28e:	60bb      	str	r3, [r7, #8]
 800a290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a292:	2301      	movs	r3, #1
 800a294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a296:	4b77      	ldr	r3, [pc, #476]	@ (800a474 <HAL_RCC_OscConfig+0x474>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d118      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2a2:	4b74      	ldr	r3, [pc, #464]	@ (800a474 <HAL_RCC_OscConfig+0x474>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a73      	ldr	r2, [pc, #460]	@ (800a474 <HAL_RCC_OscConfig+0x474>)
 800a2a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2ae:	f7f9 fc19 	bl	8003ae4 <HAL_GetTick>
 800a2b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2b4:	e008      	b.n	800a2c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2b6:	f7f9 fc15 	bl	8003ae4 <HAL_GetTick>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d901      	bls.n	800a2c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e10c      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2c8:	4b6a      	ldr	r3, [pc, #424]	@ (800a474 <HAL_RCC_OscConfig+0x474>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d0f0      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d106      	bne.n	800a2ea <HAL_RCC_OscConfig+0x2ea>
 800a2dc:	4b64      	ldr	r3, [pc, #400]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2e0:	4a63      	ldr	r2, [pc, #396]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a2e2:	f043 0301 	orr.w	r3, r3, #1
 800a2e6:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2e8:	e01c      	b.n	800a324 <HAL_RCC_OscConfig+0x324>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d10c      	bne.n	800a30c <HAL_RCC_OscConfig+0x30c>
 800a2f2:	4b5f      	ldr	r3, [pc, #380]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a2f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2f6:	4a5e      	ldr	r2, [pc, #376]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a2f8:	f043 0304 	orr.w	r3, r3, #4
 800a2fc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a2fe:	4b5c      	ldr	r3, [pc, #368]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a302:	4a5b      	ldr	r2, [pc, #364]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a304:	f043 0301 	orr.w	r3, r3, #1
 800a308:	6713      	str	r3, [r2, #112]	@ 0x70
 800a30a:	e00b      	b.n	800a324 <HAL_RCC_OscConfig+0x324>
 800a30c:	4b58      	ldr	r3, [pc, #352]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a30e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a310:	4a57      	ldr	r2, [pc, #348]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a312:	f023 0301 	bic.w	r3, r3, #1
 800a316:	6713      	str	r3, [r2, #112]	@ 0x70
 800a318:	4b55      	ldr	r3, [pc, #340]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a31a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a31c:	4a54      	ldr	r2, [pc, #336]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a31e:	f023 0304 	bic.w	r3, r3, #4
 800a322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d015      	beq.n	800a358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a32c:	f7f9 fbda 	bl	8003ae4 <HAL_GetTick>
 800a330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a332:	e00a      	b.n	800a34a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a334:	f7f9 fbd6 	bl	8003ae4 <HAL_GetTick>
 800a338:	4602      	mov	r2, r0
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	1ad3      	subs	r3, r2, r3
 800a33e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a342:	4293      	cmp	r3, r2
 800a344:	d901      	bls.n	800a34a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e0cb      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a34a:	4b49      	ldr	r3, [pc, #292]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a34c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0ee      	beq.n	800a334 <HAL_RCC_OscConfig+0x334>
 800a356:	e014      	b.n	800a382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a358:	f7f9 fbc4 	bl	8003ae4 <HAL_GetTick>
 800a35c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a35e:	e00a      	b.n	800a376 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a360:	f7f9 fbc0 	bl	8003ae4 <HAL_GetTick>
 800a364:	4602      	mov	r2, r0
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a36e:	4293      	cmp	r3, r2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e0b5      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a376:	4b3e      	ldr	r3, [pc, #248]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a37a:	f003 0302 	and.w	r3, r3, #2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1ee      	bne.n	800a360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d105      	bne.n	800a394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a388:	4b39      	ldr	r3, [pc, #228]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a38a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38c:	4a38      	ldr	r2, [pc, #224]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a38e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 80a1 	beq.w	800a4e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a39e:	4b34      	ldr	r3, [pc, #208]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f003 030c 	and.w	r3, r3, #12
 800a3a6:	2b08      	cmp	r3, #8
 800a3a8:	d05c      	beq.n	800a464 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d141      	bne.n	800a436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3b2:	4b31      	ldr	r3, [pc, #196]	@ (800a478 <HAL_RCC_OscConfig+0x478>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3b8:	f7f9 fb94 	bl	8003ae4 <HAL_GetTick>
 800a3bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3be:	e008      	b.n	800a3d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3c0:	f7f9 fb90 	bl	8003ae4 <HAL_GetTick>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e087      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3d2:	4b27      	ldr	r3, [pc, #156]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1f0      	bne.n	800a3c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	69da      	ldr	r2, [r3, #28]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	431a      	orrs	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ec:	019b      	lsls	r3, r3, #6
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	041b      	lsls	r3, r3, #16
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	061b      	lsls	r3, r3, #24
 800a402:	491b      	ldr	r1, [pc, #108]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a404:	4313      	orrs	r3, r2
 800a406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a408:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <HAL_RCC_OscConfig+0x478>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a40e:	f7f9 fb69 	bl	8003ae4 <HAL_GetTick>
 800a412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a414:	e008      	b.n	800a428 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a416:	f7f9 fb65 	bl	8003ae4 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	2b02      	cmp	r3, #2
 800a422:	d901      	bls.n	800a428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e05c      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a428:	4b11      	ldr	r3, [pc, #68]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0f0      	beq.n	800a416 <HAL_RCC_OscConfig+0x416>
 800a434:	e054      	b.n	800a4e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a436:	4b10      	ldr	r3, [pc, #64]	@ (800a478 <HAL_RCC_OscConfig+0x478>)
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a43c:	f7f9 fb52 	bl	8003ae4 <HAL_GetTick>
 800a440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a442:	e008      	b.n	800a456 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a444:	f7f9 fb4e 	bl	8003ae4 <HAL_GetTick>
 800a448:	4602      	mov	r2, r0
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d901      	bls.n	800a456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a452:	2303      	movs	r3, #3
 800a454:	e045      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a456:	4b06      	ldr	r3, [pc, #24]	@ (800a470 <HAL_RCC_OscConfig+0x470>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1f0      	bne.n	800a444 <HAL_RCC_OscConfig+0x444>
 800a462:	e03d      	b.n	800a4e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d107      	bne.n	800a47c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e038      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
 800a470:	40023800 	.word	0x40023800
 800a474:	40007000 	.word	0x40007000
 800a478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a47c:	4b1b      	ldr	r3, [pc, #108]	@ (800a4ec <HAL_RCC_OscConfig+0x4ec>)
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	699b      	ldr	r3, [r3, #24]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d028      	beq.n	800a4dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a494:	429a      	cmp	r2, r3
 800a496:	d121      	bne.n	800a4dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d11a      	bne.n	800a4dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a4b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d111      	bne.n	800a4dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d107      	bne.n	800a4dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d001      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e000      	b.n	800a4e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3718      	adds	r7, #24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	40023800 	.word	0x40023800

0800a4f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e0cc      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a504:	4b68      	ldr	r3, [pc, #416]	@ (800a6a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0307 	and.w	r3, r3, #7
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d90c      	bls.n	800a52c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a512:	4b65      	ldr	r3, [pc, #404]	@ (800a6a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a51a:	4b63      	ldr	r3, [pc, #396]	@ (800a6a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	d001      	beq.n	800a52c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e0b8      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0302 	and.w	r3, r3, #2
 800a534:	2b00      	cmp	r3, #0
 800a536:	d020      	beq.n	800a57a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a544:	4b59      	ldr	r3, [pc, #356]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	4a58      	ldr	r2, [pc, #352]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a54a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a54e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d005      	beq.n	800a568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a55c:	4b53      	ldr	r3, [pc, #332]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	4a52      	ldr	r2, [pc, #328]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a568:	4b50      	ldr	r3, [pc, #320]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689b      	ldr	r3, [r3, #8]
 800a574:	494d      	ldr	r1, [pc, #308]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a576:	4313      	orrs	r3, r2
 800a578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 0301 	and.w	r3, r3, #1
 800a582:	2b00      	cmp	r3, #0
 800a584:	d044      	beq.n	800a610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d107      	bne.n	800a59e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a58e:	4b47      	ldr	r3, [pc, #284]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d119      	bne.n	800a5ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e07f      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d003      	beq.n	800a5ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d107      	bne.n	800a5be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e06f      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5be:	4b3b      	ldr	r3, [pc, #236]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e067      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a5ce:	4b37      	ldr	r3, [pc, #220]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f023 0203 	bic.w	r2, r3, #3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	4934      	ldr	r1, [pc, #208]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a5e0:	f7f9 fa80 	bl	8003ae4 <HAL_GetTick>
 800a5e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5e6:	e00a      	b.n	800a5fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5e8:	f7f9 fa7c 	bl	8003ae4 <HAL_GetTick>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d901      	bls.n	800a5fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	e04f      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f003 020c 	and.w	r2, r3, #12
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d1eb      	bne.n	800a5e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a610:	4b25      	ldr	r3, [pc, #148]	@ (800a6a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0307 	and.w	r3, r3, #7
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d20c      	bcs.n	800a638 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a61e:	4b22      	ldr	r3, [pc, #136]	@ (800a6a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a626:	4b20      	ldr	r3, [pc, #128]	@ (800a6a8 <HAL_RCC_ClockConfig+0x1b8>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d001      	beq.n	800a638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e032      	b.n	800a69e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d008      	beq.n	800a656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a644:	4b19      	ldr	r3, [pc, #100]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	4916      	ldr	r1, [pc, #88]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a652:	4313      	orrs	r3, r2
 800a654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0308 	and.w	r3, r3, #8
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a662:	4b12      	ldr	r3, [pc, #72]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	490e      	ldr	r1, [pc, #56]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a672:	4313      	orrs	r3, r2
 800a674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a676:	f000 f82d 	bl	800a6d4 <HAL_RCC_GetSysClockFreq>
 800a67a:	4602      	mov	r2, r0
 800a67c:	4b0b      	ldr	r3, [pc, #44]	@ (800a6ac <HAL_RCC_ClockConfig+0x1bc>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	091b      	lsrs	r3, r3, #4
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	490a      	ldr	r1, [pc, #40]	@ (800a6b0 <HAL_RCC_ClockConfig+0x1c0>)
 800a688:	5ccb      	ldrb	r3, [r1, r3]
 800a68a:	fa22 f303 	lsr.w	r3, r2, r3
 800a68e:	4a09      	ldr	r2, [pc, #36]	@ (800a6b4 <HAL_RCC_ClockConfig+0x1c4>)
 800a690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <HAL_RCC_ClockConfig+0x1c8>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4618      	mov	r0, r3
 800a698:	f7f9 f9e0 	bl	8003a5c <HAL_InitTick>

  return HAL_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	40023c00 	.word	0x40023c00
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	080123c0 	.word	0x080123c0
 800a6b4:	20000010 	.word	0x20000010
 800a6b8:	20000014 	.word	0x20000014

0800a6bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a6c0:	4b03      	ldr	r3, [pc, #12]	@ (800a6d0 <HAL_RCC_EnableCSS+0x14>)
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	601a      	str	r2, [r3, #0]
}
 800a6c6:	bf00      	nop
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	4247004c 	.word	0x4247004c

0800a6d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6d8:	b090      	sub	sp, #64	@ 0x40
 800a6da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6ec:	4b59      	ldr	r3, [pc, #356]	@ (800a854 <HAL_RCC_GetSysClockFreq+0x180>)
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f003 030c 	and.w	r3, r3, #12
 800a6f4:	2b08      	cmp	r3, #8
 800a6f6:	d00d      	beq.n	800a714 <HAL_RCC_GetSysClockFreq+0x40>
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	f200 80a1 	bhi.w	800a840 <HAL_RCC_GetSysClockFreq+0x16c>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <HAL_RCC_GetSysClockFreq+0x34>
 800a702:	2b04      	cmp	r3, #4
 800a704:	d003      	beq.n	800a70e <HAL_RCC_GetSysClockFreq+0x3a>
 800a706:	e09b      	b.n	800a840 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a708:	4b53      	ldr	r3, [pc, #332]	@ (800a858 <HAL_RCC_GetSysClockFreq+0x184>)
 800a70a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a70c:	e09b      	b.n	800a846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a70e:	4b53      	ldr	r3, [pc, #332]	@ (800a85c <HAL_RCC_GetSysClockFreq+0x188>)
 800a710:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a712:	e098      	b.n	800a846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a714:	4b4f      	ldr	r3, [pc, #316]	@ (800a854 <HAL_RCC_GetSysClockFreq+0x180>)
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a71c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a71e:	4b4d      	ldr	r3, [pc, #308]	@ (800a854 <HAL_RCC_GetSysClockFreq+0x180>)
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d028      	beq.n	800a77c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a72a:	4b4a      	ldr	r3, [pc, #296]	@ (800a854 <HAL_RCC_GetSysClockFreq+0x180>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	099b      	lsrs	r3, r3, #6
 800a730:	2200      	movs	r2, #0
 800a732:	623b      	str	r3, [r7, #32]
 800a734:	627a      	str	r2, [r7, #36]	@ 0x24
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a73c:	2100      	movs	r1, #0
 800a73e:	4b47      	ldr	r3, [pc, #284]	@ (800a85c <HAL_RCC_GetSysClockFreq+0x188>)
 800a740:	fb03 f201 	mul.w	r2, r3, r1
 800a744:	2300      	movs	r3, #0
 800a746:	fb00 f303 	mul.w	r3, r0, r3
 800a74a:	4413      	add	r3, r2
 800a74c:	4a43      	ldr	r2, [pc, #268]	@ (800a85c <HAL_RCC_GetSysClockFreq+0x188>)
 800a74e:	fba0 1202 	umull	r1, r2, r0, r2
 800a752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a754:	460a      	mov	r2, r1
 800a756:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a75a:	4413      	add	r3, r2
 800a75c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a760:	2200      	movs	r2, #0
 800a762:	61bb      	str	r3, [r7, #24]
 800a764:	61fa      	str	r2, [r7, #28]
 800a766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a76a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a76e:	f7f5 fd87 	bl	8000280 <__aeabi_uldivmod>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4613      	mov	r3, r2
 800a778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a77a:	e053      	b.n	800a824 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a77c:	4b35      	ldr	r3, [pc, #212]	@ (800a854 <HAL_RCC_GetSysClockFreq+0x180>)
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	099b      	lsrs	r3, r3, #6
 800a782:	2200      	movs	r2, #0
 800a784:	613b      	str	r3, [r7, #16]
 800a786:	617a      	str	r2, [r7, #20]
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a78e:	f04f 0b00 	mov.w	fp, #0
 800a792:	4652      	mov	r2, sl
 800a794:	465b      	mov	r3, fp
 800a796:	f04f 0000 	mov.w	r0, #0
 800a79a:	f04f 0100 	mov.w	r1, #0
 800a79e:	0159      	lsls	r1, r3, #5
 800a7a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a7a4:	0150      	lsls	r0, r2, #5
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	ebb2 080a 	subs.w	r8, r2, sl
 800a7ae:	eb63 090b 	sbc.w	r9, r3, fp
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	f04f 0300 	mov.w	r3, #0
 800a7ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a7be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a7c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a7c6:	ebb2 0408 	subs.w	r4, r2, r8
 800a7ca:	eb63 0509 	sbc.w	r5, r3, r9
 800a7ce:	f04f 0200 	mov.w	r2, #0
 800a7d2:	f04f 0300 	mov.w	r3, #0
 800a7d6:	00eb      	lsls	r3, r5, #3
 800a7d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a7dc:	00e2      	lsls	r2, r4, #3
 800a7de:	4614      	mov	r4, r2
 800a7e0:	461d      	mov	r5, r3
 800a7e2:	eb14 030a 	adds.w	r3, r4, sl
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	eb45 030b 	adc.w	r3, r5, fp
 800a7ec:	607b      	str	r3, [r7, #4]
 800a7ee:	f04f 0200 	mov.w	r2, #0
 800a7f2:	f04f 0300 	mov.w	r3, #0
 800a7f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	028b      	lsls	r3, r1, #10
 800a7fe:	4621      	mov	r1, r4
 800a800:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a804:	4621      	mov	r1, r4
 800a806:	028a      	lsls	r2, r1, #10
 800a808:	4610      	mov	r0, r2
 800a80a:	4619      	mov	r1, r3
 800a80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a80e:	2200      	movs	r2, #0
 800a810:	60bb      	str	r3, [r7, #8]
 800a812:	60fa      	str	r2, [r7, #12]
 800a814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a818:	f7f5 fd32 	bl	8000280 <__aeabi_uldivmod>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4613      	mov	r3, r2
 800a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a824:	4b0b      	ldr	r3, [pc, #44]	@ (800a854 <HAL_RCC_GetSysClockFreq+0x180>)
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	0c1b      	lsrs	r3, r3, #16
 800a82a:	f003 0303 	and.w	r3, r3, #3
 800a82e:	3301      	adds	r3, #1
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a834:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a838:	fbb2 f3f3 	udiv	r3, r2, r3
 800a83c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a83e:	e002      	b.n	800a846 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a840:	4b05      	ldr	r3, [pc, #20]	@ (800a858 <HAL_RCC_GetSysClockFreq+0x184>)
 800a842:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a844:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3740      	adds	r7, #64	@ 0x40
 800a84c:	46bd      	mov	sp, r7
 800a84e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a852:	bf00      	nop
 800a854:	40023800 	.word	0x40023800
 800a858:	00f42400 	.word	0x00f42400
 800a85c:	017d7840 	.word	0x017d7840

0800a860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a864:	4b03      	ldr	r3, [pc, #12]	@ (800a874 <HAL_RCC_GetHCLKFreq+0x14>)
 800a866:	681b      	ldr	r3, [r3, #0]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20000010 	.word	0x20000010

0800a878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a87c:	f7ff fff0 	bl	800a860 <HAL_RCC_GetHCLKFreq>
 800a880:	4602      	mov	r2, r0
 800a882:	4b05      	ldr	r3, [pc, #20]	@ (800a898 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	0a9b      	lsrs	r3, r3, #10
 800a888:	f003 0307 	and.w	r3, r3, #7
 800a88c:	4903      	ldr	r1, [pc, #12]	@ (800a89c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a88e:	5ccb      	ldrb	r3, [r1, r3]
 800a890:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a894:	4618      	mov	r0, r3
 800a896:	bd80      	pop	{r7, pc}
 800a898:	40023800 	.word	0x40023800
 800a89c:	080123d0 	.word	0x080123d0

0800a8a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8a4:	f7ff ffdc 	bl	800a860 <HAL_RCC_GetHCLKFreq>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	4b05      	ldr	r3, [pc, #20]	@ (800a8c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a8ac:	689b      	ldr	r3, [r3, #8]
 800a8ae:	0b5b      	lsrs	r3, r3, #13
 800a8b0:	f003 0307 	and.w	r3, r3, #7
 800a8b4:	4903      	ldr	r1, [pc, #12]	@ (800a8c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8b6:	5ccb      	ldrb	r3, [r1, r3]
 800a8b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	40023800 	.word	0x40023800
 800a8c4:	080123d0 	.word	0x080123d0

0800a8c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a8cc:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8d4:	2b80      	cmp	r3, #128	@ 0x80
 800a8d6:	d104      	bne.n	800a8e2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a8d8:	f000 f80a 	bl	800a8f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a8dc:	4b03      	ldr	r3, [pc, #12]	@ (800a8ec <HAL_RCC_NMI_IRQHandler+0x24>)
 800a8de:	2280      	movs	r2, #128	@ 0x80
 800a8e0:	701a      	strb	r2, [r3, #0]
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	40023800 	.word	0x40023800
 800a8ec:	4002380e 	.word	0x4002380e

0800a8f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a8f4:	bf00      	nop
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e041      	b.n	800a994 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7f8 fe87 	bl	8003638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3304      	adds	r3, #4
 800a93a:	4619      	mov	r1, r3
 800a93c:	4610      	mov	r0, r2
 800a93e:	f000 fc3b 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d001      	beq.n	800a9b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e044      	b.n	800aa3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68da      	ldr	r2, [r3, #12]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0201 	orr.w	r2, r2, #1
 800a9ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a1e      	ldr	r2, [pc, #120]	@ (800aa4c <HAL_TIM_Base_Start_IT+0xb0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d018      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x6c>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9de:	d013      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x6c>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a1a      	ldr	r2, [pc, #104]	@ (800aa50 <HAL_TIM_Base_Start_IT+0xb4>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00e      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x6c>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a19      	ldr	r2, [pc, #100]	@ (800aa54 <HAL_TIM_Base_Start_IT+0xb8>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d009      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x6c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a17      	ldr	r2, [pc, #92]	@ (800aa58 <HAL_TIM_Base_Start_IT+0xbc>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <HAL_TIM_Base_Start_IT+0x6c>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a16      	ldr	r2, [pc, #88]	@ (800aa5c <HAL_TIM_Base_Start_IT+0xc0>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d111      	bne.n	800aa2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b06      	cmp	r3, #6
 800aa18:	d010      	beq.n	800aa3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f042 0201 	orr.w	r2, r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa2a:	e007      	b.n	800aa3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0201 	orr.w	r2, r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	40010000 	.word	0x40010000
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	40014000 	.word	0x40014000

0800aa60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e041      	b.n	800aaf6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f839 	bl	800aafe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	f000 fb8a 	bl	800b1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b083      	sub	sp, #12
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ab06:	bf00      	nop
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d109      	bne.n	800ab38 <HAL_TIM_PWM_Start+0x24>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	bf14      	ite	ne
 800ab30:	2301      	movne	r3, #1
 800ab32:	2300      	moveq	r3, #0
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	e022      	b.n	800ab7e <HAL_TIM_PWM_Start+0x6a>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	d109      	bne.n	800ab52 <HAL_TIM_PWM_Start+0x3e>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	bf14      	ite	ne
 800ab4a:	2301      	movne	r3, #1
 800ab4c:	2300      	moveq	r3, #0
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	e015      	b.n	800ab7e <HAL_TIM_PWM_Start+0x6a>
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b08      	cmp	r3, #8
 800ab56:	d109      	bne.n	800ab6c <HAL_TIM_PWM_Start+0x58>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	bf14      	ite	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	2300      	moveq	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	e008      	b.n	800ab7e <HAL_TIM_PWM_Start+0x6a>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	bf14      	ite	ne
 800ab78:	2301      	movne	r3, #1
 800ab7a:	2300      	moveq	r3, #0
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e068      	b.n	800ac58 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d104      	bne.n	800ab96 <HAL_TIM_PWM_Start+0x82>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab94:	e013      	b.n	800abbe <HAL_TIM_PWM_Start+0xaa>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d104      	bne.n	800aba6 <HAL_TIM_PWM_Start+0x92>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2202      	movs	r2, #2
 800aba0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aba4:	e00b      	b.n	800abbe <HAL_TIM_PWM_Start+0xaa>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b08      	cmp	r3, #8
 800abaa:	d104      	bne.n	800abb6 <HAL_TIM_PWM_Start+0xa2>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abb4:	e003      	b.n	800abbe <HAL_TIM_PWM_Start+0xaa>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2202      	movs	r2, #2
 800abba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	2201      	movs	r2, #1
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fda8 	bl	800b71c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a23      	ldr	r2, [pc, #140]	@ (800ac60 <HAL_TIM_PWM_Start+0x14c>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d107      	bne.n	800abe6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800abe4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a1d      	ldr	r2, [pc, #116]	@ (800ac60 <HAL_TIM_PWM_Start+0x14c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d018      	beq.n	800ac22 <HAL_TIM_PWM_Start+0x10e>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abf8:	d013      	beq.n	800ac22 <HAL_TIM_PWM_Start+0x10e>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a19      	ldr	r2, [pc, #100]	@ (800ac64 <HAL_TIM_PWM_Start+0x150>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d00e      	beq.n	800ac22 <HAL_TIM_PWM_Start+0x10e>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a17      	ldr	r2, [pc, #92]	@ (800ac68 <HAL_TIM_PWM_Start+0x154>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d009      	beq.n	800ac22 <HAL_TIM_PWM_Start+0x10e>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a16      	ldr	r2, [pc, #88]	@ (800ac6c <HAL_TIM_PWM_Start+0x158>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d004      	beq.n	800ac22 <HAL_TIM_PWM_Start+0x10e>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a14      	ldr	r2, [pc, #80]	@ (800ac70 <HAL_TIM_PWM_Start+0x15c>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d111      	bne.n	800ac46 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b06      	cmp	r3, #6
 800ac32:	d010      	beq.n	800ac56 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f042 0201 	orr.w	r2, r2, #1
 800ac42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac44:	e007      	b.n	800ac56 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f042 0201 	orr.w	r2, r2, #1
 800ac54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	40010000 	.word	0x40010000
 800ac64:	40000400 	.word	0x40000400
 800ac68:	40000800 	.word	0x40000800
 800ac6c:	40000c00 	.word	0x40000c00
 800ac70:	40014000 	.word	0x40014000

0800ac74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f003 0302 	and.w	r3, r3, #2
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d020      	beq.n	800acd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f003 0302 	and.w	r3, r3, #2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d01b      	beq.n	800acd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f06f 0202 	mvn.w	r2, #2
 800aca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2201      	movs	r2, #1
 800acae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	699b      	ldr	r3, [r3, #24]
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d003      	beq.n	800acc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fa5b 	bl	800b17a <HAL_TIM_IC_CaptureCallback>
 800acc4:	e005      	b.n	800acd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa4d 	bl	800b166 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fa5e 	bl	800b18e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d020      	beq.n	800ad24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f003 0304 	and.w	r3, r3, #4
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01b      	beq.n	800ad24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f06f 0204 	mvn.w	r2, #4
 800acf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2202      	movs	r2, #2
 800acfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa35 	bl	800b17a <HAL_TIM_IC_CaptureCallback>
 800ad10:	e005      	b.n	800ad1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa27 	bl	800b166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa38 	bl	800b18e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	f003 0308 	and.w	r3, r3, #8
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d020      	beq.n	800ad70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f003 0308 	and.w	r3, r3, #8
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d01b      	beq.n	800ad70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0208 	mvn.w	r2, #8
 800ad40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2204      	movs	r2, #4
 800ad46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	f003 0303 	and.w	r3, r3, #3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa0f 	bl	800b17a <HAL_TIM_IC_CaptureCallback>
 800ad5c:	e005      	b.n	800ad6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa01 	bl	800b166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fa12 	bl	800b18e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f003 0310 	and.w	r3, r3, #16
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d020      	beq.n	800adbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d01b      	beq.n	800adbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f06f 0210 	mvn.w	r2, #16
 800ad8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2208      	movs	r2, #8
 800ad92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f9e9 	bl	800b17a <HAL_TIM_IC_CaptureCallback>
 800ada8:	e005      	b.n	800adb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f9db 	bl	800b166 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f9ec 	bl	800b18e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00c      	beq.n	800ade0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d007      	beq.n	800ade0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f06f 0201 	mvn.w	r2, #1
 800add8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7f8 f8b2 	bl	8002f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00c      	beq.n	800ae04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d007      	beq.n	800ae04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800adfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fd2a 	bl	800b858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00c      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f9bd 	bl	800b1a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00c      	beq.n	800ae4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f003 0320 	and.w	r3, r3, #32
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d007      	beq.n	800ae4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f06f 0220 	mvn.w	r2, #32
 800ae44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fcfc 	bl	800b844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b086      	sub	sp, #24
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	60f8      	str	r0, [r7, #12]
 800ae5c:	60b9      	str	r1, [r7, #8]
 800ae5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d101      	bne.n	800ae72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e0ae      	b.n	800afd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b0c      	cmp	r3, #12
 800ae7e:	f200 809f 	bhi.w	800afc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ae82:	a201      	add	r2, pc, #4	@ (adr r2, 800ae88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae88:	0800aebd 	.word	0x0800aebd
 800ae8c:	0800afc1 	.word	0x0800afc1
 800ae90:	0800afc1 	.word	0x0800afc1
 800ae94:	0800afc1 	.word	0x0800afc1
 800ae98:	0800aefd 	.word	0x0800aefd
 800ae9c:	0800afc1 	.word	0x0800afc1
 800aea0:	0800afc1 	.word	0x0800afc1
 800aea4:	0800afc1 	.word	0x0800afc1
 800aea8:	0800af3f 	.word	0x0800af3f
 800aeac:	0800afc1 	.word	0x0800afc1
 800aeb0:	0800afc1 	.word	0x0800afc1
 800aeb4:	0800afc1 	.word	0x0800afc1
 800aeb8:	0800af7f 	.word	0x0800af7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68b9      	ldr	r1, [r7, #8]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fa04 	bl	800b2d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0208 	orr.w	r2, r2, #8
 800aed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	699a      	ldr	r2, [r3, #24]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f022 0204 	bic.w	r2, r2, #4
 800aee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6999      	ldr	r1, [r3, #24]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	691a      	ldr	r2, [r3, #16]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	430a      	orrs	r2, r1
 800aef8:	619a      	str	r2, [r3, #24]
      break;
 800aefa:	e064      	b.n	800afc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 fa4a 	bl	800b39c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699a      	ldr	r2, [r3, #24]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6999      	ldr	r1, [r3, #24]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	021a      	lsls	r2, r3, #8
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	430a      	orrs	r2, r1
 800af3a:	619a      	str	r2, [r3, #24]
      break;
 800af3c:	e043      	b.n	800afc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fa95 	bl	800b474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	69da      	ldr	r2, [r3, #28]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0208 	orr.w	r2, r2, #8
 800af58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69da      	ldr	r2, [r3, #28]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0204 	bic.w	r2, r2, #4
 800af68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	69d9      	ldr	r1, [r3, #28]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	691a      	ldr	r2, [r3, #16]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	61da      	str	r2, [r3, #28]
      break;
 800af7c:	e023      	b.n	800afc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fadf 	bl	800b548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	69da      	ldr	r2, [r3, #28]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69d9      	ldr	r1, [r3, #28]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	021a      	lsls	r2, r3, #8
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	61da      	str	r2, [r3, #28]
      break;
 800afbe:	e002      	b.n	800afc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	75fb      	strb	r3, [r7, #23]
      break;
 800afc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800afce:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afec:	2b01      	cmp	r3, #1
 800afee:	d101      	bne.n	800aff4 <HAL_TIM_ConfigClockSource+0x1c>
 800aff0:	2302      	movs	r3, #2
 800aff2:	e0b4      	b.n	800b15e <HAL_TIM_ConfigClockSource+0x186>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b01a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b02c:	d03e      	beq.n	800b0ac <HAL_TIM_ConfigClockSource+0xd4>
 800b02e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b032:	f200 8087 	bhi.w	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b03a:	f000 8086 	beq.w	800b14a <HAL_TIM_ConfigClockSource+0x172>
 800b03e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b042:	d87f      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b044:	2b70      	cmp	r3, #112	@ 0x70
 800b046:	d01a      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0xa6>
 800b048:	2b70      	cmp	r3, #112	@ 0x70
 800b04a:	d87b      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b04c:	2b60      	cmp	r3, #96	@ 0x60
 800b04e:	d050      	beq.n	800b0f2 <HAL_TIM_ConfigClockSource+0x11a>
 800b050:	2b60      	cmp	r3, #96	@ 0x60
 800b052:	d877      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b054:	2b50      	cmp	r3, #80	@ 0x50
 800b056:	d03c      	beq.n	800b0d2 <HAL_TIM_ConfigClockSource+0xfa>
 800b058:	2b50      	cmp	r3, #80	@ 0x50
 800b05a:	d873      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b05c:	2b40      	cmp	r3, #64	@ 0x40
 800b05e:	d058      	beq.n	800b112 <HAL_TIM_ConfigClockSource+0x13a>
 800b060:	2b40      	cmp	r3, #64	@ 0x40
 800b062:	d86f      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b064:	2b30      	cmp	r3, #48	@ 0x30
 800b066:	d064      	beq.n	800b132 <HAL_TIM_ConfigClockSource+0x15a>
 800b068:	2b30      	cmp	r3, #48	@ 0x30
 800b06a:	d86b      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	d060      	beq.n	800b132 <HAL_TIM_ConfigClockSource+0x15a>
 800b070:	2b20      	cmp	r3, #32
 800b072:	d867      	bhi.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
 800b074:	2b00      	cmp	r3, #0
 800b076:	d05c      	beq.n	800b132 <HAL_TIM_ConfigClockSource+0x15a>
 800b078:	2b10      	cmp	r3, #16
 800b07a:	d05a      	beq.n	800b132 <HAL_TIM_ConfigClockSource+0x15a>
 800b07c:	e062      	b.n	800b144 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b08e:	f000 fb25 	bl	800b6dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b0a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	609a      	str	r2, [r3, #8]
      break;
 800b0aa:	e04f      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b0bc:	f000 fb0e 	bl	800b6dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689a      	ldr	r2, [r3, #8]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0ce:	609a      	str	r2, [r3, #8]
      break;
 800b0d0:	e03c      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0de:	461a      	mov	r2, r3
 800b0e0:	f000 fa82 	bl	800b5e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2150      	movs	r1, #80	@ 0x50
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fadb 	bl	800b6a6 <TIM_ITRx_SetConfig>
      break;
 800b0f0:	e02c      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b0fe:	461a      	mov	r2, r3
 800b100:	f000 faa1 	bl	800b646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2160      	movs	r1, #96	@ 0x60
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 facb 	bl	800b6a6 <TIM_ITRx_SetConfig>
      break;
 800b110:	e01c      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b11e:	461a      	mov	r2, r3
 800b120:	f000 fa62 	bl	800b5e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2140      	movs	r1, #64	@ 0x40
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fabb 	bl	800b6a6 <TIM_ITRx_SetConfig>
      break;
 800b130:	e00c      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4619      	mov	r1, r3
 800b13c:	4610      	mov	r0, r2
 800b13e:	f000 fab2 	bl	800b6a6 <TIM_ITRx_SetConfig>
      break;
 800b142:	e003      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	73fb      	strb	r3, [r7, #15]
      break;
 800b148:	e000      	b.n	800b14c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b14a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b16e:	bf00      	nop
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
	...

0800b1b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a3a      	ldr	r2, [pc, #232]	@ (800b2b4 <TIM_Base_SetConfig+0xfc>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00f      	beq.n	800b1f0 <TIM_Base_SetConfig+0x38>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1d6:	d00b      	beq.n	800b1f0 <TIM_Base_SetConfig+0x38>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a37      	ldr	r2, [pc, #220]	@ (800b2b8 <TIM_Base_SetConfig+0x100>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d007      	beq.n	800b1f0 <TIM_Base_SetConfig+0x38>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a36      	ldr	r2, [pc, #216]	@ (800b2bc <TIM_Base_SetConfig+0x104>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d003      	beq.n	800b1f0 <TIM_Base_SetConfig+0x38>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a35      	ldr	r2, [pc, #212]	@ (800b2c0 <TIM_Base_SetConfig+0x108>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d108      	bne.n	800b202 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	4a2b      	ldr	r2, [pc, #172]	@ (800b2b4 <TIM_Base_SetConfig+0xfc>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d01b      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b210:	d017      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4a28      	ldr	r2, [pc, #160]	@ (800b2b8 <TIM_Base_SetConfig+0x100>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d013      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a27      	ldr	r2, [pc, #156]	@ (800b2bc <TIM_Base_SetConfig+0x104>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d00f      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a26      	ldr	r2, [pc, #152]	@ (800b2c0 <TIM_Base_SetConfig+0x108>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d00b      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a25      	ldr	r2, [pc, #148]	@ (800b2c4 <TIM_Base_SetConfig+0x10c>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d007      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a24      	ldr	r2, [pc, #144]	@ (800b2c8 <TIM_Base_SetConfig+0x110>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d003      	beq.n	800b242 <TIM_Base_SetConfig+0x8a>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a23      	ldr	r2, [pc, #140]	@ (800b2cc <TIM_Base_SetConfig+0x114>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d108      	bne.n	800b254 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4313      	orrs	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a0e      	ldr	r2, [pc, #56]	@ (800b2b4 <TIM_Base_SetConfig+0xfc>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d103      	bne.n	800b288 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	2b01      	cmp	r3, #1
 800b298:	d105      	bne.n	800b2a6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	f023 0201 	bic.w	r2, r3, #1
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	611a      	str	r2, [r3, #16]
  }
}
 800b2a6:	bf00      	nop
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40000400 	.word	0x40000400
 800b2bc:	40000800 	.word	0x40000800
 800b2c0:	40000c00 	.word	0x40000c00
 800b2c4:	40014000 	.word	0x40014000
 800b2c8:	40014400 	.word	0x40014400
 800b2cc:	40014800 	.word	0x40014800

0800b2d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b087      	sub	sp, #28
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	f023 0201 	bic.w	r2, r3, #1
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f023 0303 	bic.w	r3, r3, #3
 800b306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f023 0302 	bic.w	r3, r3, #2
 800b318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	4313      	orrs	r3, r2
 800b322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a1c      	ldr	r2, [pc, #112]	@ (800b398 <TIM_OC1_SetConfig+0xc8>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d10c      	bne.n	800b346 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f023 0308 	bic.w	r3, r3, #8
 800b332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f023 0304 	bic.w	r3, r3, #4
 800b344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a13      	ldr	r2, [pc, #76]	@ (800b398 <TIM_OC1_SetConfig+0xc8>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d111      	bne.n	800b372 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	4313      	orrs	r3, r2
 800b366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	4313      	orrs	r3, r2
 800b370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	621a      	str	r2, [r3, #32]
}
 800b38c:	bf00      	nop
 800b38e:	371c      	adds	r7, #28
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	40010000 	.word	0x40010000

0800b39c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b087      	sub	sp, #28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	f023 0210 	bic.w	r2, r3, #16
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	699b      	ldr	r3, [r3, #24]
 800b3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	021b      	lsls	r3, r3, #8
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	f023 0320 	bic.w	r3, r3, #32
 800b3e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	011b      	lsls	r3, r3, #4
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4a1e      	ldr	r2, [pc, #120]	@ (800b470 <TIM_OC2_SetConfig+0xd4>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	d10d      	bne.n	800b418 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	011b      	lsls	r3, r3, #4
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b416:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a15      	ldr	r2, [pc, #84]	@ (800b470 <TIM_OC2_SetConfig+0xd4>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d113      	bne.n	800b448 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b42e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	4313      	orrs	r3, r2
 800b43a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	693a      	ldr	r2, [r7, #16]
 800b44c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	621a      	str	r2, [r3, #32]
}
 800b462:	bf00      	nop
 800b464:	371c      	adds	r7, #28
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	40010000 	.word	0x40010000

0800b474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f023 0303 	bic.w	r3, r3, #3
 800b4aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b4bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	021b      	lsls	r3, r3, #8
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b544 <TIM_OC3_SetConfig+0xd0>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d10d      	bne.n	800b4ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b4d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	021b      	lsls	r3, r3, #8
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b4ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a14      	ldr	r2, [pc, #80]	@ (800b544 <TIM_OC3_SetConfig+0xd0>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d113      	bne.n	800b51e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	693a      	ldr	r2, [r7, #16]
 800b50e:	4313      	orrs	r3, r2
 800b510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	011b      	lsls	r3, r3, #4
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	621a      	str	r2, [r3, #32]
}
 800b538:	bf00      	nop
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr
 800b544:	40010000 	.word	0x40010000

0800b548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a1b      	ldr	r3, [r3, #32]
 800b55c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b57e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	021b      	lsls	r3, r3, #8
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	4313      	orrs	r3, r2
 800b58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	031b      	lsls	r3, r3, #12
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a10      	ldr	r2, [pc, #64]	@ (800b5e4 <TIM_OC4_SetConfig+0x9c>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d109      	bne.n	800b5bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b5ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	695b      	ldr	r3, [r3, #20]
 800b5b4:	019b      	lsls	r3, r3, #6
 800b5b6:	697a      	ldr	r2, [r7, #20]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	693a      	ldr	r2, [r7, #16]
 800b5d4:	621a      	str	r2, [r3, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	40010000 	.word	0x40010000

0800b5e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a1b      	ldr	r3, [r3, #32]
 800b5f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	f023 0201 	bic.w	r2, r3, #1
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	699b      	ldr	r3, [r3, #24]
 800b60a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	011b      	lsls	r3, r3, #4
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f023 030a 	bic.w	r3, r3, #10
 800b624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	621a      	str	r2, [r3, #32]
}
 800b63a:	bf00      	nop
 800b63c:	371c      	adds	r7, #28
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b646:	b480      	push	{r7}
 800b648:	b087      	sub	sp, #28
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	60f8      	str	r0, [r7, #12]
 800b64e:	60b9      	str	r1, [r7, #8]
 800b650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	f023 0210 	bic.w	r2, r3, #16
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	699b      	ldr	r3, [r3, #24]
 800b668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	031b      	lsls	r3, r3, #12
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	4313      	orrs	r3, r2
 800b67a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b682:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	011b      	lsls	r3, r3, #4
 800b688:	697a      	ldr	r2, [r7, #20]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	621a      	str	r2, [r3, #32]
}
 800b69a:	bf00      	nop
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b085      	sub	sp, #20
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	f043 0307 	orr.w	r3, r3, #7
 800b6c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	609a      	str	r2, [r3, #8]
}
 800b6d0:	bf00      	nop
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b087      	sub	sp, #28
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	021a      	lsls	r2, r3, #8
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	431a      	orrs	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	4313      	orrs	r3, r2
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	4313      	orrs	r3, r2
 800b708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	609a      	str	r2, [r3, #8]
}
 800b710:	bf00      	nop
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b087      	sub	sp, #28
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f003 031f 	and.w	r3, r3, #31
 800b72e:	2201      	movs	r2, #1
 800b730:	fa02 f303 	lsl.w	r3, r2, r3
 800b734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6a1a      	ldr	r2, [r3, #32]
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	401a      	ands	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1a      	ldr	r2, [r3, #32]
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f003 031f 	and.w	r3, r3, #31
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	fa01 f303 	lsl.w	r3, r1, r3
 800b754:	431a      	orrs	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	621a      	str	r2, [r3, #32]
}
 800b75a:	bf00      	nop
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
	...

0800b768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d101      	bne.n	800b780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b77c:	2302      	movs	r3, #2
 800b77e:	e050      	b.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a1c      	ldr	r2, [pc, #112]	@ (800b830 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d018      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7cc:	d013      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a18      	ldr	r2, [pc, #96]	@ (800b834 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d00e      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a16      	ldr	r2, [pc, #88]	@ (800b838 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d009      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a15      	ldr	r2, [pc, #84]	@ (800b83c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d004      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a13      	ldr	r2, [pc, #76]	@ (800b840 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d10c      	bne.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	4313      	orrs	r3, r2
 800b806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	40010000 	.word	0x40010000
 800b834:	40000400 	.word	0x40000400
 800b838:	40000800 	.word	0x40000800
 800b83c:	40000c00 	.word	0x40000c00
 800b840:	40014000 	.word	0x40014000

0800b844 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e042      	b.n	800b904 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b00      	cmp	r3, #0
 800b888:	d106      	bne.n	800b898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7f7 ff50 	bl	8003738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2224      	movs	r2, #36	@ 0x24
 800b89c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68da      	ldr	r2, [r3, #12]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b8ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fcdb 	bl	800c26c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	691a      	ldr	r2, [r3, #16]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b8c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	695a      	ldr	r2, [r3, #20]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68da      	ldr	r2, [r3, #12]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b8e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	4613      	mov	r3, r2
 800b918:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b20      	cmp	r3, #32
 800b924:	d112      	bne.n	800b94c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <HAL_UART_Receive_IT+0x26>
 800b92c:	88fb      	ldrh	r3, [r7, #6]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d101      	bne.n	800b936 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b932:	2301      	movs	r3, #1
 800b934:	e00b      	b.n	800b94e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b93c:	88fb      	ldrh	r3, [r7, #6]
 800b93e:	461a      	mov	r2, r3
 800b940:	68b9      	ldr	r1, [r7, #8]
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 faba 	bl	800bebc <UART_Start_Receive_IT>
 800b948:	4603      	mov	r3, r0
 800b94a:	e000      	b.n	800b94e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b94c:	2302      	movs	r3, #2
  }
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b0ba      	sub	sp, #232	@ 0xe8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b97e:	2300      	movs	r3, #0
 800b980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b984:	2300      	movs	r3, #0
 800b986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10f      	bne.n	800b9be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b99e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a2:	f003 0320 	and.w	r3, r3, #32
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d009      	beq.n	800b9be <HAL_UART_IRQHandler+0x66>
 800b9aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9ae:	f003 0320 	and.w	r3, r3, #32
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fb99 	bl	800c0ee <UART_Receive_IT>
      return;
 800b9bc:	e25b      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80de 	beq.w	800bb84 <HAL_UART_IRQHandler+0x22c>
 800b9c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b9cc:	f003 0301 	and.w	r3, r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d106      	bne.n	800b9e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 80d1 	beq.w	800bb84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00b      	beq.n	800ba06 <HAL_UART_IRQHandler+0xae>
 800b9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d005      	beq.n	800ba06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9fe:	f043 0201 	orr.w	r2, r3, #1
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba0a:	f003 0304 	and.w	r3, r3, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <HAL_UART_IRQHandler+0xd2>
 800ba12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba22:	f043 0202 	orr.w	r2, r3, #2
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <HAL_UART_IRQHandler+0xf6>
 800ba36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba46:	f043 0204 	orr.w	r2, r3, #4
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba52:	f003 0308 	and.w	r3, r3, #8
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d011      	beq.n	800ba7e <HAL_UART_IRQHandler+0x126>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba76:	f043 0208 	orr.w	r2, r3, #8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 81f2 	beq.w	800be6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba8c:	f003 0320 	and.w	r3, r3, #32
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d008      	beq.n	800baa6 <HAL_UART_IRQHandler+0x14e>
 800ba94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba98:	f003 0320 	and.w	r3, r3, #32
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fb24 	bl	800c0ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab0:	2b40      	cmp	r3, #64	@ 0x40
 800bab2:	bf0c      	ite	eq
 800bab4:	2301      	moveq	r3, #1
 800bab6:	2300      	movne	r3, #0
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac2:	f003 0308 	and.w	r3, r3, #8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <HAL_UART_IRQHandler+0x17a>
 800baca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d04f      	beq.n	800bb72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fa2c 	bl	800bf30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bae2:	2b40      	cmp	r3, #64	@ 0x40
 800bae4:	d141      	bne.n	800bb6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3314      	adds	r3, #20
 800baec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800baf4:	e853 3f00 	ldrex	r3, [r3]
 800baf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bafc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bb00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3314      	adds	r3, #20
 800bb0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bb12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bb16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bb1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bb22:	e841 2300 	strex	r3, r2, [r1]
 800bb26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bb2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1d9      	bne.n	800bae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d013      	beq.n	800bb62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb3e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd38 <HAL_UART_IRQHandler+0x3e0>)
 800bb40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7f8 ffa0 	bl	8004a8c <HAL_DMA_Abort_IT>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d016      	beq.n	800bb80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb60:	e00e      	b.n	800bb80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f994 	bl	800be90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb68:	e00a      	b.n	800bb80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f990 	bl	800be90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb70:	e006      	b.n	800bb80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f98c 	bl	800be90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bb7e:	e175      	b.n	800be6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb80:	bf00      	nop
    return;
 800bb82:	e173      	b.n	800be6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	f040 814f 	bne.w	800be2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb92:	f003 0310 	and.w	r3, r3, #16
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	f000 8148 	beq.w	800be2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f000 8141 	beq.w	800be2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	60bb      	str	r3, [r7, #8]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	60bb      	str	r3, [r7, #8]
 800bbbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	695b      	ldr	r3, [r3, #20]
 800bbc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbca:	2b40      	cmp	r3, #64	@ 0x40
 800bbcc:	f040 80b6 	bne.w	800bd3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 8145 	beq.w	800be70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bbea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	f080 813e 	bcs.w	800be70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bbfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc06:	f000 8088 	beq.w	800bd1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	330c      	adds	r3, #12
 800bc10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bc20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bc24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	330c      	adds	r3, #12
 800bc32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bc36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bc3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bc42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bc4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1d9      	bne.n	800bc0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	3314      	adds	r3, #20
 800bc5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc60:	e853 3f00 	ldrex	r3, [r3]
 800bc64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bc66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc68:	f023 0301 	bic.w	r3, r3, #1
 800bc6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3314      	adds	r3, #20
 800bc76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bc7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bc7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bc82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bc8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e1      	bne.n	800bc56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3314      	adds	r3, #20
 800bc98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bca8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3314      	adds	r3, #20
 800bcb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bcb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bcb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bcbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bcc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e3      	bne.n	800bc92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	330c      	adds	r3, #12
 800bcde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bce2:	e853 3f00 	ldrex	r3, [r3]
 800bce6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcea:	f023 0310 	bic.w	r3, r3, #16
 800bcee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	330c      	adds	r3, #12
 800bcf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bcfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bcfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd04:	e841 2300 	strex	r3, r2, [r1]
 800bd08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e3      	bne.n	800bcd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd14:	4618      	mov	r0, r3
 800bd16:	f7f8 fe49 	bl	80049ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 f8b7 	bl	800bea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd36:	e09b      	b.n	800be70 <HAL_UART_IRQHandler+0x518>
 800bd38:	0800bff7 	.word	0x0800bff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	f000 808e 	beq.w	800be74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8089 	beq.w	800be74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	330c      	adds	r3, #12
 800bd68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bd78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	330c      	adds	r3, #12
 800bd82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800bd86:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e3      	bne.n	800bd62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3314      	adds	r3, #20
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	3314      	adds	r3, #20
 800bdba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bdbe:	633a      	str	r2, [r7, #48]	@ 0x30
 800bdc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bdc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdc6:	e841 2300 	strex	r3, r2, [r1]
 800bdca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bdcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1e3      	bne.n	800bd9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2200      	movs	r2, #0
 800bdde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	330c      	adds	r3, #12
 800bde6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	e853 3f00 	ldrex	r3, [r3]
 800bdee:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f023 0310 	bic.w	r3, r3, #16
 800bdf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	330c      	adds	r3, #12
 800be00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800be04:	61fa      	str	r2, [r7, #28]
 800be06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	69b9      	ldr	r1, [r7, #24]
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	617b      	str	r3, [r7, #20]
   return(result);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e3      	bne.n	800bde0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2202      	movs	r2, #2
 800be1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800be22:	4619      	mov	r1, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f83d 	bl	800bea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be2a:	e023      	b.n	800be74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be34:	2b00      	cmp	r3, #0
 800be36:	d009      	beq.n	800be4c <HAL_UART_IRQHandler+0x4f4>
 800be38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f8ea 	bl	800c01e <UART_Transmit_IT>
    return;
 800be4a:	e014      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00e      	beq.n	800be76 <HAL_UART_IRQHandler+0x51e>
 800be58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	d008      	beq.n	800be76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f92a 	bl	800c0be <UART_EndTransmit_IT>
    return;
 800be6a:	e004      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
    return;
 800be6c:	bf00      	nop
 800be6e:	e002      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
      return;
 800be70:	bf00      	nop
 800be72:	e000      	b.n	800be76 <HAL_UART_IRQHandler+0x51e>
      return;
 800be74:	bf00      	nop
  }
}
 800be76:	37e8      	adds	r7, #232	@ 0xe8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	460b      	mov	r3, r1
 800beae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	4613      	mov	r3, r2
 800bec8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	88fa      	ldrh	r2, [r7, #6]
 800bed4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2222      	movs	r2, #34	@ 0x22
 800bee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	695a      	ldr	r2, [r3, #20]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f042 0201 	orr.w	r2, r2, #1
 800bf10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68da      	ldr	r2, [r3, #12]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f042 0220 	orr.w	r2, r2, #32
 800bf20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b095      	sub	sp, #84	@ 0x54
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	330c      	adds	r3, #12
 800bf3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf42:	e853 3f00 	ldrex	r3, [r3]
 800bf46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	330c      	adds	r3, #12
 800bf56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bf58:	643a      	str	r2, [r7, #64]	@ 0x40
 800bf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf60:	e841 2300 	strex	r3, r2, [r1]
 800bf64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e5      	bne.n	800bf38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	3314      	adds	r3, #20
 800bf72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	e853 3f00 	ldrex	r3, [r3]
 800bf7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	f023 0301 	bic.w	r3, r3, #1
 800bf82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3314      	adds	r3, #20
 800bf8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf94:	e841 2300 	strex	r3, r2, [r1]
 800bf98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1e5      	bne.n	800bf6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d119      	bne.n	800bfdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	330c      	adds	r3, #12
 800bfae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f023 0310 	bic.w	r3, r3, #16
 800bfbe:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	330c      	adds	r3, #12
 800bfc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfc8:	61ba      	str	r2, [r7, #24]
 800bfca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	6979      	ldr	r1, [r7, #20]
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e5      	bne.n	800bfa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bfea:	bf00      	nop
 800bfec:	3754      	adds	r7, #84	@ 0x54
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr

0800bff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f7ff ff3d 	bl	800be90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c01e:	b480      	push	{r7}
 800c020:	b085      	sub	sp, #20
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b21      	cmp	r3, #33	@ 0x21
 800c030:	d13e      	bne.n	800c0b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c03a:	d114      	bne.n	800c066 <UART_Transmit_IT+0x48>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d110      	bne.n	800c066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a1b      	ldr	r3, [r3, #32]
 800c048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	461a      	mov	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	1c9a      	adds	r2, r3, #2
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	621a      	str	r2, [r3, #32]
 800c064:	e008      	b.n	800c078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	1c59      	adds	r1, r3, #1
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	6211      	str	r1, [r2, #32]
 800c070:	781a      	ldrb	r2, [r3, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	b29b      	uxth	r3, r3
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	4619      	mov	r1, r3
 800c086:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10f      	bne.n	800c0ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c09a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68da      	ldr	r2, [r3, #12]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e000      	b.n	800c0b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c0b0:	2302      	movs	r3, #2
  }
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3714      	adds	r7, #20
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c0d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff fecc 	bl	800be7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b08c      	sub	sp, #48	@ 0x30
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b22      	cmp	r3, #34	@ 0x22
 800c100:	f040 80ae 	bne.w	800c260 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c10c:	d117      	bne.n	800c13e <UART_Receive_IT+0x50>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d113      	bne.n	800c13e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c116:	2300      	movs	r3, #0
 800c118:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c11e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	b29b      	uxth	r3, r3
 800c128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c130:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c136:	1c9a      	adds	r2, r3, #2
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c13c:	e026      	b.n	800c18c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c142:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c144:	2300      	movs	r3, #0
 800c146:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c150:	d007      	beq.n	800c162 <UART_Receive_IT+0x74>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <UART_Receive_IT+0x82>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	691b      	ldr	r3, [r3, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d106      	bne.n	800c170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c16c:	701a      	strb	r2, [r3, #0]
 800c16e:	e008      	b.n	800c182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c186:	1c5a      	adds	r2, r3, #1
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c190:	b29b      	uxth	r3, r3
 800c192:	3b01      	subs	r3, #1
 800c194:	b29b      	uxth	r3, r3
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	4619      	mov	r1, r3
 800c19a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d15d      	bne.n	800c25c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68da      	ldr	r2, [r3, #12]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f022 0220 	bic.w	r2, r2, #32
 800c1ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c1be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695a      	ldr	r2, [r3, #20]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f022 0201 	bic.w	r2, r2, #1
 800c1ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2220      	movs	r2, #32
 800c1d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d135      	bne.n	800c252 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	e853 3f00 	ldrex	r3, [r3]
 800c1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f023 0310 	bic.w	r3, r3, #16
 800c202:	627b      	str	r3, [r7, #36]	@ 0x24
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	330c      	adds	r3, #12
 800c20a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c20c:	623a      	str	r2, [r7, #32]
 800c20e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	6a3a      	ldr	r2, [r7, #32]
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	61bb      	str	r3, [r7, #24]
   return(result);
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e5      	bne.n	800c1ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 0310 	and.w	r3, r3, #16
 800c22a:	2b10      	cmp	r3, #16
 800c22c:	d10a      	bne.n	800c244 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f7ff fe2a 	bl	800bea4 <HAL_UARTEx_RxEventCallback>
 800c250:	e002      	b.n	800c258 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7f5 fd66 	bl	8001d24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	e002      	b.n	800c262 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e000      	b.n	800c262 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c260:	2302      	movs	r3, #2
  }
}
 800c262:	4618      	mov	r0, r3
 800c264:	3730      	adds	r7, #48	@ 0x30
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
	...

0800c26c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c26c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c270:	b0c0      	sub	sp, #256	@ 0x100
 800c272:	af00      	add	r7, sp, #0
 800c274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c288:	68d9      	ldr	r1, [r3, #12]
 800c28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	ea40 0301 	orr.w	r3, r0, r1
 800c294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c29a:	689a      	ldr	r2, [r3, #8]
 800c29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c2c4:	f021 010c 	bic.w	r1, r1, #12
 800c2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c2d2:	430b      	orrs	r3, r1
 800c2d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c2e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2e6:	6999      	ldr	r1, [r3, #24]
 800c2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	ea40 0301 	orr.w	r3, r0, r1
 800c2f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b8f      	ldr	r3, [pc, #572]	@ (800c538 <UART_SetConfig+0x2cc>)
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d005      	beq.n	800c30c <UART_SetConfig+0xa0>
 800c300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	4b8d      	ldr	r3, [pc, #564]	@ (800c53c <UART_SetConfig+0x2d0>)
 800c308:	429a      	cmp	r2, r3
 800c30a:	d104      	bne.n	800c316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c30c:	f7fe fac8 	bl	800a8a0 <HAL_RCC_GetPCLK2Freq>
 800c310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c314:	e003      	b.n	800c31e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c316:	f7fe faaf 	bl	800a878 <HAL_RCC_GetPCLK1Freq>
 800c31a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c31e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c322:	69db      	ldr	r3, [r3, #28]
 800c324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c328:	f040 810c 	bne.w	800c544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c32c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c330:	2200      	movs	r2, #0
 800c332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c33a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c33e:	4622      	mov	r2, r4
 800c340:	462b      	mov	r3, r5
 800c342:	1891      	adds	r1, r2, r2
 800c344:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c346:	415b      	adcs	r3, r3
 800c348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c34a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c34e:	4621      	mov	r1, r4
 800c350:	eb12 0801 	adds.w	r8, r2, r1
 800c354:	4629      	mov	r1, r5
 800c356:	eb43 0901 	adc.w	r9, r3, r1
 800c35a:	f04f 0200 	mov.w	r2, #0
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c36a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c36e:	4690      	mov	r8, r2
 800c370:	4699      	mov	r9, r3
 800c372:	4623      	mov	r3, r4
 800c374:	eb18 0303 	adds.w	r3, r8, r3
 800c378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c37c:	462b      	mov	r3, r5
 800c37e:	eb49 0303 	adc.w	r3, r9, r3
 800c382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c39a:	460b      	mov	r3, r1
 800c39c:	18db      	adds	r3, r3, r3
 800c39e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	eb42 0303 	adc.w	r3, r2, r3
 800c3a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c3a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c3ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c3b0:	f7f3 ff66 	bl	8000280 <__aeabi_uldivmod>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4b61      	ldr	r3, [pc, #388]	@ (800c540 <UART_SetConfig+0x2d4>)
 800c3ba:	fba3 2302 	umull	r2, r3, r3, r2
 800c3be:	095b      	lsrs	r3, r3, #5
 800c3c0:	011c      	lsls	r4, r3, #4
 800c3c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c3cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c3d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c3d4:	4642      	mov	r2, r8
 800c3d6:	464b      	mov	r3, r9
 800c3d8:	1891      	adds	r1, r2, r2
 800c3da:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c3dc:	415b      	adcs	r3, r3
 800c3de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c3e4:	4641      	mov	r1, r8
 800c3e6:	eb12 0a01 	adds.w	sl, r2, r1
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	eb43 0b01 	adc.w	fp, r3, r1
 800c3f0:	f04f 0200 	mov.w	r2, #0
 800c3f4:	f04f 0300 	mov.w	r3, #0
 800c3f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c3fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c404:	4692      	mov	sl, r2
 800c406:	469b      	mov	fp, r3
 800c408:	4643      	mov	r3, r8
 800c40a:	eb1a 0303 	adds.w	r3, sl, r3
 800c40e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c412:	464b      	mov	r3, r9
 800c414:	eb4b 0303 	adc.w	r3, fp, r3
 800c418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c42c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c430:	460b      	mov	r3, r1
 800c432:	18db      	adds	r3, r3, r3
 800c434:	643b      	str	r3, [r7, #64]	@ 0x40
 800c436:	4613      	mov	r3, r2
 800c438:	eb42 0303 	adc.w	r3, r2, r3
 800c43c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c43e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c446:	f7f3 ff1b 	bl	8000280 <__aeabi_uldivmod>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	4b3b      	ldr	r3, [pc, #236]	@ (800c540 <UART_SetConfig+0x2d4>)
 800c452:	fba3 2301 	umull	r2, r3, r3, r1
 800c456:	095b      	lsrs	r3, r3, #5
 800c458:	2264      	movs	r2, #100	@ 0x64
 800c45a:	fb02 f303 	mul.w	r3, r2, r3
 800c45e:	1acb      	subs	r3, r1, r3
 800c460:	00db      	lsls	r3, r3, #3
 800c462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c466:	4b36      	ldr	r3, [pc, #216]	@ (800c540 <UART_SetConfig+0x2d4>)
 800c468:	fba3 2302 	umull	r2, r3, r3, r2
 800c46c:	095b      	lsrs	r3, r3, #5
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c474:	441c      	add	r4, r3
 800c476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c488:	4642      	mov	r2, r8
 800c48a:	464b      	mov	r3, r9
 800c48c:	1891      	adds	r1, r2, r2
 800c48e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c490:	415b      	adcs	r3, r3
 800c492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c498:	4641      	mov	r1, r8
 800c49a:	1851      	adds	r1, r2, r1
 800c49c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c49e:	4649      	mov	r1, r9
 800c4a0:	414b      	adcs	r3, r1
 800c4a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4a4:	f04f 0200 	mov.w	r2, #0
 800c4a8:	f04f 0300 	mov.w	r3, #0
 800c4ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c4b0:	4659      	mov	r1, fp
 800c4b2:	00cb      	lsls	r3, r1, #3
 800c4b4:	4651      	mov	r1, sl
 800c4b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4ba:	4651      	mov	r1, sl
 800c4bc:	00ca      	lsls	r2, r1, #3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4642      	mov	r2, r8
 800c4c6:	189b      	adds	r3, r3, r2
 800c4c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4cc:	464b      	mov	r3, r9
 800c4ce:	460a      	mov	r2, r1
 800c4d0:	eb42 0303 	adc.w	r3, r2, r3
 800c4d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c4e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	18db      	adds	r3, r3, r3
 800c4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	eb42 0303 	adc.w	r3, r2, r3
 800c4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c4fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c502:	f7f3 febd 	bl	8000280 <__aeabi_uldivmod>
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4b0d      	ldr	r3, [pc, #52]	@ (800c540 <UART_SetConfig+0x2d4>)
 800c50c:	fba3 1302 	umull	r1, r3, r3, r2
 800c510:	095b      	lsrs	r3, r3, #5
 800c512:	2164      	movs	r1, #100	@ 0x64
 800c514:	fb01 f303 	mul.w	r3, r1, r3
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	3332      	adds	r3, #50	@ 0x32
 800c51e:	4a08      	ldr	r2, [pc, #32]	@ (800c540 <UART_SetConfig+0x2d4>)
 800c520:	fba2 2303 	umull	r2, r3, r2, r3
 800c524:	095b      	lsrs	r3, r3, #5
 800c526:	f003 0207 	and.w	r2, r3, #7
 800c52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4422      	add	r2, r4
 800c532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c534:	e106      	b.n	800c744 <UART_SetConfig+0x4d8>
 800c536:	bf00      	nop
 800c538:	40011000 	.word	0x40011000
 800c53c:	40011400 	.word	0x40011400
 800c540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c548:	2200      	movs	r2, #0
 800c54a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c54e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c556:	4642      	mov	r2, r8
 800c558:	464b      	mov	r3, r9
 800c55a:	1891      	adds	r1, r2, r2
 800c55c:	6239      	str	r1, [r7, #32]
 800c55e:	415b      	adcs	r3, r3
 800c560:	627b      	str	r3, [r7, #36]	@ 0x24
 800c562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c566:	4641      	mov	r1, r8
 800c568:	1854      	adds	r4, r2, r1
 800c56a:	4649      	mov	r1, r9
 800c56c:	eb43 0501 	adc.w	r5, r3, r1
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	00eb      	lsls	r3, r5, #3
 800c57a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c57e:	00e2      	lsls	r2, r4, #3
 800c580:	4614      	mov	r4, r2
 800c582:	461d      	mov	r5, r3
 800c584:	4643      	mov	r3, r8
 800c586:	18e3      	adds	r3, r4, r3
 800c588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c58c:	464b      	mov	r3, r9
 800c58e:	eb45 0303 	adc.w	r3, r5, r3
 800c592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c5a6:	f04f 0200 	mov.w	r2, #0
 800c5aa:	f04f 0300 	mov.w	r3, #0
 800c5ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	008b      	lsls	r3, r1, #2
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c5bc:	4621      	mov	r1, r4
 800c5be:	008a      	lsls	r2, r1, #2
 800c5c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c5c4:	f7f3 fe5c 	bl	8000280 <__aeabi_uldivmod>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4b60      	ldr	r3, [pc, #384]	@ (800c750 <UART_SetConfig+0x4e4>)
 800c5ce:	fba3 2302 	umull	r2, r3, r3, r2
 800c5d2:	095b      	lsrs	r3, r3, #5
 800c5d4:	011c      	lsls	r4, r3, #4
 800c5d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c5e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c5e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c5e8:	4642      	mov	r2, r8
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	1891      	adds	r1, r2, r2
 800c5ee:	61b9      	str	r1, [r7, #24]
 800c5f0:	415b      	adcs	r3, r3
 800c5f2:	61fb      	str	r3, [r7, #28]
 800c5f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	1851      	adds	r1, r2, r1
 800c5fc:	6139      	str	r1, [r7, #16]
 800c5fe:	4649      	mov	r1, r9
 800c600:	414b      	adcs	r3, r1
 800c602:	617b      	str	r3, [r7, #20]
 800c604:	f04f 0200 	mov.w	r2, #0
 800c608:	f04f 0300 	mov.w	r3, #0
 800c60c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c610:	4659      	mov	r1, fp
 800c612:	00cb      	lsls	r3, r1, #3
 800c614:	4651      	mov	r1, sl
 800c616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c61a:	4651      	mov	r1, sl
 800c61c:	00ca      	lsls	r2, r1, #3
 800c61e:	4610      	mov	r0, r2
 800c620:	4619      	mov	r1, r3
 800c622:	4603      	mov	r3, r0
 800c624:	4642      	mov	r2, r8
 800c626:	189b      	adds	r3, r3, r2
 800c628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c62c:	464b      	mov	r3, r9
 800c62e:	460a      	mov	r2, r1
 800c630:	eb42 0303 	adc.w	r3, r2, r3
 800c634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	f04f 0300 	mov.w	r3, #0
 800c64c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c650:	4649      	mov	r1, r9
 800c652:	008b      	lsls	r3, r1, #2
 800c654:	4641      	mov	r1, r8
 800c656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c65a:	4641      	mov	r1, r8
 800c65c:	008a      	lsls	r2, r1, #2
 800c65e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c662:	f7f3 fe0d 	bl	8000280 <__aeabi_uldivmod>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	4611      	mov	r1, r2
 800c66c:	4b38      	ldr	r3, [pc, #224]	@ (800c750 <UART_SetConfig+0x4e4>)
 800c66e:	fba3 2301 	umull	r2, r3, r3, r1
 800c672:	095b      	lsrs	r3, r3, #5
 800c674:	2264      	movs	r2, #100	@ 0x64
 800c676:	fb02 f303 	mul.w	r3, r2, r3
 800c67a:	1acb      	subs	r3, r1, r3
 800c67c:	011b      	lsls	r3, r3, #4
 800c67e:	3332      	adds	r3, #50	@ 0x32
 800c680:	4a33      	ldr	r2, [pc, #204]	@ (800c750 <UART_SetConfig+0x4e4>)
 800c682:	fba2 2303 	umull	r2, r3, r2, r3
 800c686:	095b      	lsrs	r3, r3, #5
 800c688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c68c:	441c      	add	r4, r3
 800c68e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c692:	2200      	movs	r2, #0
 800c694:	673b      	str	r3, [r7, #112]	@ 0x70
 800c696:	677a      	str	r2, [r7, #116]	@ 0x74
 800c698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c69c:	4642      	mov	r2, r8
 800c69e:	464b      	mov	r3, r9
 800c6a0:	1891      	adds	r1, r2, r2
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	415b      	adcs	r3, r3
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6ac:	4641      	mov	r1, r8
 800c6ae:	1851      	adds	r1, r2, r1
 800c6b0:	6039      	str	r1, [r7, #0]
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	414b      	adcs	r3, r1
 800c6b6:	607b      	str	r3, [r7, #4]
 800c6b8:	f04f 0200 	mov.w	r2, #0
 800c6bc:	f04f 0300 	mov.w	r3, #0
 800c6c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	00cb      	lsls	r3, r1, #3
 800c6c8:	4651      	mov	r1, sl
 800c6ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c6ce:	4651      	mov	r1, sl
 800c6d0:	00ca      	lsls	r2, r1, #3
 800c6d2:	4610      	mov	r0, r2
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	4642      	mov	r2, r8
 800c6da:	189b      	adds	r3, r3, r2
 800c6dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6de:	464b      	mov	r3, r9
 800c6e0:	460a      	mov	r2, r1
 800c6e2:	eb42 0303 	adc.w	r3, r2, r3
 800c6e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c6f2:	667a      	str	r2, [r7, #100]	@ 0x64
 800c6f4:	f04f 0200 	mov.w	r2, #0
 800c6f8:	f04f 0300 	mov.w	r3, #0
 800c6fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c700:	4649      	mov	r1, r9
 800c702:	008b      	lsls	r3, r1, #2
 800c704:	4641      	mov	r1, r8
 800c706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c70a:	4641      	mov	r1, r8
 800c70c:	008a      	lsls	r2, r1, #2
 800c70e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c712:	f7f3 fdb5 	bl	8000280 <__aeabi_uldivmod>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <UART_SetConfig+0x4e4>)
 800c71c:	fba3 1302 	umull	r1, r3, r3, r2
 800c720:	095b      	lsrs	r3, r3, #5
 800c722:	2164      	movs	r1, #100	@ 0x64
 800c724:	fb01 f303 	mul.w	r3, r1, r3
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	011b      	lsls	r3, r3, #4
 800c72c:	3332      	adds	r3, #50	@ 0x32
 800c72e:	4a08      	ldr	r2, [pc, #32]	@ (800c750 <UART_SetConfig+0x4e4>)
 800c730:	fba2 2303 	umull	r2, r3, r2, r3
 800c734:	095b      	lsrs	r3, r3, #5
 800c736:	f003 020f 	and.w	r2, r3, #15
 800c73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4422      	add	r2, r4
 800c742:	609a      	str	r2, [r3, #8]
}
 800c744:	bf00      	nop
 800c746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c74a:	46bd      	mov	sp, r7
 800c74c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c750:	51eb851f 	.word	0x51eb851f

0800c754 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c754:	b084      	sub	sp, #16
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	f107 001c 	add.w	r0, r7, #28
 800c762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c766:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d123      	bne.n	800c7b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c772:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c796:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d105      	bne.n	800c7aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f001 fae8 	bl	800dd80 <USB_CoreReset>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73fb      	strb	r3, [r7, #15]
 800c7b4:	e01b      	b.n	800c7ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 fadc 	bl	800dd80 <USB_CoreReset>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c7cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	639a      	str	r2, [r3, #56]	@ 0x38
 800c7e0:	e005      	b.n	800c7ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c7ee:	7fbb      	ldrb	r3, [r7, #30]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d10b      	bne.n	800c80c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f043 0206 	orr.w	r2, r3, #6
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	f043 0220 	orr.w	r2, r3, #32
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c818:	b004      	add	sp, #16
 800c81a:	4770      	bx	lr

0800c81c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b087      	sub	sp, #28
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d165      	bne.n	800c8fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	4a41      	ldr	r2, [pc, #260]	@ (800c938 <USB_SetTurnaroundTime+0x11c>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d906      	bls.n	800c846 <USB_SetTurnaroundTime+0x2a>
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4a40      	ldr	r2, [pc, #256]	@ (800c93c <USB_SetTurnaroundTime+0x120>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d202      	bcs.n	800c846 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c840:	230f      	movs	r3, #15
 800c842:	617b      	str	r3, [r7, #20]
 800c844:	e062      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	4a3c      	ldr	r2, [pc, #240]	@ (800c93c <USB_SetTurnaroundTime+0x120>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d306      	bcc.n	800c85c <USB_SetTurnaroundTime+0x40>
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	4a3b      	ldr	r2, [pc, #236]	@ (800c940 <USB_SetTurnaroundTime+0x124>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d202      	bcs.n	800c85c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c856:	230e      	movs	r3, #14
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	e057      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4a38      	ldr	r2, [pc, #224]	@ (800c940 <USB_SetTurnaroundTime+0x124>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d306      	bcc.n	800c872 <USB_SetTurnaroundTime+0x56>
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	4a37      	ldr	r2, [pc, #220]	@ (800c944 <USB_SetTurnaroundTime+0x128>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d202      	bcs.n	800c872 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c86c:	230d      	movs	r3, #13
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	e04c      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	4a33      	ldr	r2, [pc, #204]	@ (800c944 <USB_SetTurnaroundTime+0x128>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d306      	bcc.n	800c888 <USB_SetTurnaroundTime+0x6c>
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	4a32      	ldr	r2, [pc, #200]	@ (800c948 <USB_SetTurnaroundTime+0x12c>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d802      	bhi.n	800c888 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c882:	230c      	movs	r3, #12
 800c884:	617b      	str	r3, [r7, #20]
 800c886:	e041      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	4a2f      	ldr	r2, [pc, #188]	@ (800c948 <USB_SetTurnaroundTime+0x12c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d906      	bls.n	800c89e <USB_SetTurnaroundTime+0x82>
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	4a2e      	ldr	r2, [pc, #184]	@ (800c94c <USB_SetTurnaroundTime+0x130>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d802      	bhi.n	800c89e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c898:	230b      	movs	r3, #11
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	e036      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c94c <USB_SetTurnaroundTime+0x130>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d906      	bls.n	800c8b4 <USB_SetTurnaroundTime+0x98>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	4a29      	ldr	r2, [pc, #164]	@ (800c950 <USB_SetTurnaroundTime+0x134>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d802      	bhi.n	800c8b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c8ae:	230a      	movs	r3, #10
 800c8b0:	617b      	str	r3, [r7, #20]
 800c8b2:	e02b      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	4a26      	ldr	r2, [pc, #152]	@ (800c950 <USB_SetTurnaroundTime+0x134>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d906      	bls.n	800c8ca <USB_SetTurnaroundTime+0xae>
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	4a25      	ldr	r2, [pc, #148]	@ (800c954 <USB_SetTurnaroundTime+0x138>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d202      	bcs.n	800c8ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c8c4:	2309      	movs	r3, #9
 800c8c6:	617b      	str	r3, [r7, #20]
 800c8c8:	e020      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	4a21      	ldr	r2, [pc, #132]	@ (800c954 <USB_SetTurnaroundTime+0x138>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d306      	bcc.n	800c8e0 <USB_SetTurnaroundTime+0xc4>
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	4a20      	ldr	r2, [pc, #128]	@ (800c958 <USB_SetTurnaroundTime+0x13c>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d802      	bhi.n	800c8e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c8da:	2308      	movs	r3, #8
 800c8dc:	617b      	str	r3, [r7, #20]
 800c8de:	e015      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4a1d      	ldr	r2, [pc, #116]	@ (800c958 <USB_SetTurnaroundTime+0x13c>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d906      	bls.n	800c8f6 <USB_SetTurnaroundTime+0xda>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	4a1c      	ldr	r2, [pc, #112]	@ (800c95c <USB_SetTurnaroundTime+0x140>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d202      	bcs.n	800c8f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c8f0:	2307      	movs	r3, #7
 800c8f2:	617b      	str	r3, [r7, #20]
 800c8f4:	e00a      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c8f6:	2306      	movs	r3, #6
 800c8f8:	617b      	str	r3, [r7, #20]
 800c8fa:	e007      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c8fc:	79fb      	ldrb	r3, [r7, #7]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d102      	bne.n	800c908 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c902:	2309      	movs	r3, #9
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	e001      	b.n	800c90c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c908:	2309      	movs	r3, #9
 800c90a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	68da      	ldr	r2, [r3, #12]
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	029b      	lsls	r3, r3, #10
 800c920:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800c924:	431a      	orrs	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	371c      	adds	r7, #28
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr
 800c938:	00d8acbf 	.word	0x00d8acbf
 800c93c:	00e4e1c0 	.word	0x00e4e1c0
 800c940:	00f42400 	.word	0x00f42400
 800c944:	01067380 	.word	0x01067380
 800c948:	011a499f 	.word	0x011a499f
 800c94c:	01312cff 	.word	0x01312cff
 800c950:	014ca43f 	.word	0x014ca43f
 800c954:	016e3600 	.word	0x016e3600
 800c958:	01a6ab1f 	.word	0x01a6ab1f
 800c95c:	01e84800 	.word	0x01e84800

0800c960 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	f043 0201 	orr.w	r2, r3, #1
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c974:	2300      	movs	r3, #0
}
 800c976:	4618      	mov	r0, r3
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c982:	b480      	push	{r7}
 800c984:	b083      	sub	sp, #12
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	f023 0201 	bic.w	r2, r3, #1
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b084      	sub	sp, #16
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c9c0:	78fb      	ldrb	r3, [r7, #3]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d115      	bne.n	800c9f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c9d2:	200a      	movs	r0, #10
 800c9d4:	f7f7 f892 	bl	8003afc <HAL_Delay>
      ms += 10U;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	330a      	adds	r3, #10
 800c9dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f001 f93f 	bl	800dc62 <USB_GetMode>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d01e      	beq.n	800ca28 <USB_SetCurrentMode+0x84>
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2bc7      	cmp	r3, #199	@ 0xc7
 800c9ee:	d9f0      	bls.n	800c9d2 <USB_SetCurrentMode+0x2e>
 800c9f0:	e01a      	b.n	800ca28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c9f2:	78fb      	ldrb	r3, [r7, #3]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d115      	bne.n	800ca24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ca04:	200a      	movs	r0, #10
 800ca06:	f7f7 f879 	bl	8003afc <HAL_Delay>
      ms += 10U;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	330a      	adds	r3, #10
 800ca0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f001 f926 	bl	800dc62 <USB_GetMode>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d005      	beq.n	800ca28 <USB_SetCurrentMode+0x84>
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ca20:	d9f0      	bls.n	800ca04 <USB_SetCurrentMode+0x60>
 800ca22:	e001      	b.n	800ca28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e005      	b.n	800ca34 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ca2c:	d101      	bne.n	800ca32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e000      	b.n	800ca34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b086      	sub	sp, #24
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ca4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ca56:	2300      	movs	r3, #0
 800ca58:	613b      	str	r3, [r7, #16]
 800ca5a:	e009      	b.n	800ca70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	3340      	adds	r3, #64	@ 0x40
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4413      	add	r3, r2
 800ca66:	2200      	movs	r2, #0
 800ca68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	613b      	str	r3, [r7, #16]
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	2b0e      	cmp	r3, #14
 800ca74:	d9f2      	bls.n	800ca5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ca76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d11c      	bne.n	800cab8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca8c:	f043 0302 	orr.w	r3, r3, #2
 800ca90:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caa2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	639a      	str	r2, [r3, #56]	@ 0x38
 800cab6:	e00b      	b.n	800cad0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cabc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cad6:	461a      	mov	r2, r3
 800cad8:	2300      	movs	r3, #0
 800cada:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cadc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d10d      	bne.n	800cb00 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d104      	bne.n	800caf6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800caec:	2100      	movs	r1, #0
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f968 	bl	800cdc4 <USB_SetDevSpeed>
 800caf4:	e008      	b.n	800cb08 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800caf6:	2101      	movs	r1, #1
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f963 	bl	800cdc4 <USB_SetDevSpeed>
 800cafe:	e003      	b.n	800cb08 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cb00:	2103      	movs	r1, #3
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f95e 	bl	800cdc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb08:	2110      	movs	r1, #16
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f8fa 	bl	800cd04 <USB_FlushTxFifo>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f924 	bl	800cd68 <USB_FlushRxFifo>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d001      	beq.n	800cb2a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb30:	461a      	mov	r2, r3
 800cb32:	2300      	movs	r3, #0
 800cb34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb48:	461a      	mov	r2, r3
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cb4e:	2300      	movs	r3, #0
 800cb50:	613b      	str	r3, [r7, #16]
 800cb52:	e043      	b.n	800cbdc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	015a      	lsls	r2, r3, #5
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cb66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb6a:	d118      	bne.n	800cb9e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10a      	bne.n	800cb88 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	015a      	lsls	r2, r3, #5
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	4413      	add	r3, r2
 800cb7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cb84:	6013      	str	r3, [r2, #0]
 800cb86:	e013      	b.n	800cbb0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	015a      	lsls	r2, r3, #5
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4413      	add	r3, r2
 800cb90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb94:	461a      	mov	r2, r3
 800cb96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	e008      	b.n	800cbb0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	015a      	lsls	r2, r3, #5
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	4413      	add	r3, r2
 800cba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbaa:	461a      	mov	r2, r3
 800cbac:	2300      	movs	r3, #0
 800cbae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	015a      	lsls	r2, r3, #5
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	4413      	add	r3, r2
 800cbca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbce:	461a      	mov	r2, r3
 800cbd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cbd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d3b5      	bcc.n	800cb54 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	613b      	str	r3, [r7, #16]
 800cbec:	e043      	b.n	800cc76 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	015a      	lsls	r2, r3, #5
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc04:	d118      	bne.n	800cc38 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d10a      	bne.n	800cc22 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	015a      	lsls	r2, r3, #5
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4413      	add	r3, r2
 800cc14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc18:	461a      	mov	r2, r3
 800cc1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc1e:	6013      	str	r3, [r2, #0]
 800cc20:	e013      	b.n	800cc4a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc2e:	461a      	mov	r2, r3
 800cc30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	e008      	b.n	800cc4a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	015a      	lsls	r2, r3, #5
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc44:	461a      	mov	r2, r3
 800cc46:	2300      	movs	r3, #0
 800cc48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	015a      	lsls	r2, r3, #5
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc56:	461a      	mov	r2, r3
 800cc58:	2300      	movs	r3, #0
 800cc5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	015a      	lsls	r2, r3, #5
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc68:	461a      	mov	r2, r3
 800cc6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cc6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	3301      	adds	r3, #1
 800cc74:	613b      	str	r3, [r7, #16]
 800cc76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	4293      	cmp	r3, r2
 800cc80:	d3b5      	bcc.n	800cbee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800cca2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cca4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d105      	bne.n	800ccb8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	f043 0210 	orr.w	r2, r3, #16
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	699a      	ldr	r2, [r3, #24]
 800ccbc:	4b10      	ldr	r3, [pc, #64]	@ (800cd00 <USB_DevInit+0x2c4>)
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ccc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d005      	beq.n	800ccd8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	f043 0208 	orr.w	r2, r3, #8
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ccd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d107      	bne.n	800ccf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	699b      	ldr	r3, [r3, #24]
 800cce4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cce8:	f043 0304 	orr.w	r3, r3, #4
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3718      	adds	r7, #24
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccfc:	b004      	add	sp, #16
 800ccfe:	4770      	bx	lr
 800cd00:	803c3800 	.word	0x803c3800

0800cd04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	3301      	adds	r3, #1
 800cd16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd1e:	d901      	bls.n	800cd24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e01b      	b.n	800cd5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	691b      	ldr	r3, [r3, #16]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	daf2      	bge.n	800cd12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	019b      	lsls	r3, r3, #6
 800cd34:	f043 0220 	orr.w	r2, r3, #32
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd48:	d901      	bls.n	800cd4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	e006      	b.n	800cd5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	f003 0320 	and.w	r3, r3, #32
 800cd56:	2b20      	cmp	r3, #32
 800cd58:	d0f0      	beq.n	800cd3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cd5a:	2300      	movs	r3, #0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3714      	adds	r7, #20
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cd80:	d901      	bls.n	800cd86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e018      	b.n	800cdb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	daf2      	bge.n	800cd74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2210      	movs	r2, #16
 800cd96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cda4:	d901      	bls.n	800cdaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e006      	b.n	800cdb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	f003 0310 	and.w	r3, r3, #16
 800cdb2:	2b10      	cmp	r3, #16
 800cdb4:	d0f0      	beq.n	800cd98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	460b      	mov	r3, r1
 800cdce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	78fb      	ldrb	r3, [r7, #3]
 800cdde:	68f9      	ldr	r1, [r7, #12]
 800cde0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cde4:	4313      	orrs	r3, r2
 800cde6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3714      	adds	r7, #20
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800cdf6:	b480      	push	{r7}
 800cdf8:	b087      	sub	sp, #28
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	f003 0306 	and.w	r3, r3, #6
 800ce0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d102      	bne.n	800ce1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ce16:	2300      	movs	r3, #0
 800ce18:	75fb      	strb	r3, [r7, #23]
 800ce1a:	e00a      	b.n	800ce32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d002      	beq.n	800ce28 <USB_GetDevSpeed+0x32>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2b06      	cmp	r3, #6
 800ce26:	d102      	bne.n	800ce2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ce28:	2302      	movs	r3, #2
 800ce2a:	75fb      	strb	r3, [r7, #23]
 800ce2c:	e001      	b.n	800ce32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ce2e:	230f      	movs	r3, #15
 800ce30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	371c      	adds	r7, #28
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	785b      	ldrb	r3, [r3, #1]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d13a      	bne.n	800ced2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ce62:	69da      	ldr	r2, [r3, #28]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	f003 030f 	and.w	r3, r3, #15
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	68f9      	ldr	r1, [r7, #12]
 800ce76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	015a      	lsls	r2, r3, #5
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	4413      	add	r3, r2
 800ce86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d155      	bne.n	800cf40 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	015a      	lsls	r2, r3, #5
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	791b      	ldrb	r3, [r3, #4]
 800ceae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ceb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	059b      	lsls	r3, r3, #22
 800ceb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	0151      	lsls	r1, r2, #5
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	440a      	add	r2, r1
 800cec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ceca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cece:	6013      	str	r3, [r2, #0]
 800ced0:	e036      	b.n	800cf40 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ced8:	69da      	ldr	r2, [r3, #28]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	f003 030f 	and.w	r3, r3, #15
 800cee2:	2101      	movs	r1, #1
 800cee4:	fa01 f303 	lsl.w	r3, r1, r3
 800cee8:	041b      	lsls	r3, r3, #16
 800ceea:	68f9      	ldr	r1, [r7, #12]
 800ceec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cef0:	4313      	orrs	r3, r2
 800cef2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	015a      	lsls	r2, r3, #5
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	4413      	add	r3, r2
 800cefc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d11a      	bne.n	800cf40 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	015a      	lsls	r2, r3, #5
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	4413      	add	r3, r2
 800cf12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cf16:	681a      	ldr	r2, [r3, #0]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	689b      	ldr	r3, [r3, #8]
 800cf1c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	791b      	ldrb	r3, [r3, #4]
 800cf24:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cf26:	430b      	orrs	r3, r1
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	0151      	lsls	r1, r2, #5
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	440a      	add	r2, r1
 800cf32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cf36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf3e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3714      	adds	r7, #20
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
	...

0800cf50 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	785b      	ldrb	r3, [r3, #1]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d161      	bne.n	800d030 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	015a      	lsls	r2, r3, #5
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4413      	add	r3, r2
 800cf74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cf7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf82:	d11f      	bne.n	800cfc4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	0151      	lsls	r1, r2, #5
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	440a      	add	r2, r1
 800cf9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cf9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cfa2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	0151      	lsls	r1, r2, #5
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	440a      	add	r2, r1
 800cfba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cfbe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cfc2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	f003 030f 	and.w	r3, r3, #15
 800cfd4:	2101      	movs	r1, #1
 800cfd6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	43db      	mvns	r3, r3
 800cfde:	68f9      	ldr	r1, [r7, #12]
 800cfe0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cfee:	69da      	ldr	r2, [r3, #28]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	f003 030f 	and.w	r3, r3, #15
 800cff8:	2101      	movs	r1, #1
 800cffa:	fa01 f303 	lsl.w	r3, r1, r3
 800cffe:	b29b      	uxth	r3, r3
 800d000:	43db      	mvns	r3, r3
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d008:	4013      	ands	r3, r2
 800d00a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	0159      	lsls	r1, r3, #5
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	440b      	add	r3, r1
 800d022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d026:	4619      	mov	r1, r3
 800d028:	4b35      	ldr	r3, [pc, #212]	@ (800d100 <USB_DeactivateEndpoint+0x1b0>)
 800d02a:	4013      	ands	r3, r2
 800d02c:	600b      	str	r3, [r1, #0]
 800d02e:	e060      	b.n	800d0f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	015a      	lsls	r2, r3, #5
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	4413      	add	r3, r2
 800d038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d046:	d11f      	bne.n	800d088 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	015a      	lsls	r2, r3, #5
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	0151      	lsls	r1, r2, #5
 800d05a:	68fa      	ldr	r2, [r7, #12]
 800d05c:	440a      	add	r2, r1
 800d05e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d062:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d066:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	015a      	lsls	r2, r3, #5
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4413      	add	r3, r2
 800d070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	0151      	lsls	r1, r2, #5
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	440a      	add	r2, r1
 800d07e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d086:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d08e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	2101      	movs	r1, #1
 800d09a:	fa01 f303 	lsl.w	r3, r1, r3
 800d09e:	041b      	lsls	r3, r3, #16
 800d0a0:	43db      	mvns	r3, r3
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0b2:	69da      	ldr	r2, [r3, #28]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	f003 030f 	and.w	r3, r3, #15
 800d0bc:	2101      	movs	r1, #1
 800d0be:	fa01 f303 	lsl.w	r3, r1, r3
 800d0c2:	041b      	lsls	r3, r3, #16
 800d0c4:	43db      	mvns	r3, r3
 800d0c6:	68f9      	ldr	r1, [r7, #12]
 800d0c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	015a      	lsls	r2, r3, #5
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	0159      	lsls	r1, r3, #5
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	440b      	add	r3, r1
 800d0e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	4b05      	ldr	r3, [pc, #20]	@ (800d104 <USB_DeactivateEndpoint+0x1b4>)
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3714      	adds	r7, #20
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr
 800d100:	ec337800 	.word	0xec337800
 800d104:	eff37800 	.word	0xeff37800

0800d108 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b08a      	sub	sp, #40	@ 0x28
 800d10c:	af02      	add	r7, sp, #8
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	4613      	mov	r3, r2
 800d114:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	785b      	ldrb	r3, [r3, #1]
 800d124:	2b01      	cmp	r3, #1
 800d126:	f040 817f 	bne.w	800d428 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	691b      	ldr	r3, [r3, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d132      	bne.n	800d198 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	015a      	lsls	r2, r3, #5
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	4413      	add	r3, r2
 800d13a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	69ba      	ldr	r2, [r7, #24]
 800d142:	0151      	lsls	r1, r2, #5
 800d144:	69fa      	ldr	r2, [r7, #28]
 800d146:	440a      	add	r2, r1
 800d148:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d14c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d150:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	015a      	lsls	r2, r3, #5
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	4413      	add	r3, r2
 800d15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	69ba      	ldr	r2, [r7, #24]
 800d166:	0151      	lsls	r1, r2, #5
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	440a      	add	r2, r1
 800d16c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d170:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	015a      	lsls	r2, r3, #5
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	4413      	add	r3, r2
 800d17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	69ba      	ldr	r2, [r7, #24]
 800d186:	0151      	lsls	r1, r2, #5
 800d188:	69fa      	ldr	r2, [r7, #28]
 800d18a:	440a      	add	r2, r1
 800d18c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d190:	0cdb      	lsrs	r3, r3, #19
 800d192:	04db      	lsls	r3, r3, #19
 800d194:	6113      	str	r3, [r2, #16]
 800d196:	e097      	b.n	800d2c8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	015a      	lsls	r2, r3, #5
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	4413      	add	r3, r2
 800d1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1a4:	691b      	ldr	r3, [r3, #16]
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	0151      	lsls	r1, r2, #5
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1b2:	0cdb      	lsrs	r3, r3, #19
 800d1b4:	04db      	lsls	r3, r3, #19
 800d1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	4413      	add	r3, r2
 800d1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	69ba      	ldr	r2, [r7, #24]
 800d1c8:	0151      	lsls	r1, r2, #5
 800d1ca:	69fa      	ldr	r2, [r7, #28]
 800d1cc:	440a      	add	r2, r1
 800d1ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d1d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d1d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d1da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d11a      	bne.n	800d218 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	691a      	ldr	r2, [r3, #16]
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d903      	bls.n	800d1f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	689a      	ldr	r2, [r3, #8]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	015a      	lsls	r2, r3, #5
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	69ba      	ldr	r2, [r7, #24]
 800d206:	0151      	lsls	r1, r2, #5
 800d208:	69fa      	ldr	r2, [r7, #28]
 800d20a:	440a      	add	r2, r1
 800d20c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d210:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d214:	6113      	str	r3, [r2, #16]
 800d216:	e044      	b.n	800d2a2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	691a      	ldr	r2, [r3, #16]
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	4413      	add	r3, r2
 800d222:	1e5a      	subs	r2, r3, #1
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	fbb2 f3f3 	udiv	r3, r2, r3
 800d22c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	015a      	lsls	r2, r3, #5
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	4413      	add	r3, r2
 800d236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d23a:	691a      	ldr	r2, [r3, #16]
 800d23c:	8afb      	ldrh	r3, [r7, #22]
 800d23e:	04d9      	lsls	r1, r3, #19
 800d240:	4ba4      	ldr	r3, [pc, #656]	@ (800d4d4 <USB_EPStartXfer+0x3cc>)
 800d242:	400b      	ands	r3, r1
 800d244:	69b9      	ldr	r1, [r7, #24]
 800d246:	0148      	lsls	r0, r1, #5
 800d248:	69f9      	ldr	r1, [r7, #28]
 800d24a:	4401      	add	r1, r0
 800d24c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d250:	4313      	orrs	r3, r2
 800d252:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	791b      	ldrb	r3, [r3, #4]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d122      	bne.n	800d2a2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	0151      	lsls	r1, r2, #5
 800d26e:	69fa      	ldr	r2, [r7, #28]
 800d270:	440a      	add	r2, r1
 800d272:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d276:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d27a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	015a      	lsls	r2, r3, #5
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	4413      	add	r3, r2
 800d284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d288:	691a      	ldr	r2, [r3, #16]
 800d28a:	8afb      	ldrh	r3, [r7, #22]
 800d28c:	075b      	lsls	r3, r3, #29
 800d28e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d292:	69b9      	ldr	r1, [r7, #24]
 800d294:	0148      	lsls	r0, r1, #5
 800d296:	69f9      	ldr	r1, [r7, #28]
 800d298:	4401      	add	r1, r0
 800d29a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2ae:	691a      	ldr	r2, [r3, #16]
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2b8:	69b9      	ldr	r1, [r7, #24]
 800d2ba:	0148      	lsls	r0, r1, #5
 800d2bc:	69f9      	ldr	r1, [r7, #28]
 800d2be:	4401      	add	r1, r0
 800d2c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d2c8:	79fb      	ldrb	r3, [r7, #7]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d14b      	bne.n	800d366 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	69db      	ldr	r3, [r3, #28]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d009      	beq.n	800d2ea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	015a      	lsls	r2, r3, #5
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	4413      	add	r3, r2
 800d2de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	69db      	ldr	r3, [r3, #28]
 800d2e8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	791b      	ldrb	r3, [r3, #4]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d128      	bne.n	800d344 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d110      	bne.n	800d324 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	69ba      	ldr	r2, [r7, #24]
 800d312:	0151      	lsls	r1, r2, #5
 800d314:	69fa      	ldr	r2, [r7, #28]
 800d316:	440a      	add	r2, r1
 800d318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d31c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d320:	6013      	str	r3, [r2, #0]
 800d322:	e00f      	b.n	800d344 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	015a      	lsls	r2, r3, #5
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	4413      	add	r3, r2
 800d32c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	69ba      	ldr	r2, [r7, #24]
 800d334:	0151      	lsls	r1, r2, #5
 800d336:	69fa      	ldr	r2, [r7, #28]
 800d338:	440a      	add	r2, r1
 800d33a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d33e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d342:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	015a      	lsls	r2, r3, #5
 800d348:	69fb      	ldr	r3, [r7, #28]
 800d34a:	4413      	add	r3, r2
 800d34c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	69ba      	ldr	r2, [r7, #24]
 800d354:	0151      	lsls	r1, r2, #5
 800d356:	69fa      	ldr	r2, [r7, #28]
 800d358:	440a      	add	r2, r1
 800d35a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d35e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	e166      	b.n	800d634 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	015a      	lsls	r2, r3, #5
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	4413      	add	r3, r2
 800d36e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	0151      	lsls	r1, r2, #5
 800d378:	69fa      	ldr	r2, [r7, #28]
 800d37a:	440a      	add	r2, r1
 800d37c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d380:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d384:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	791b      	ldrb	r3, [r3, #4]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d015      	beq.n	800d3ba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 814e 	beq.w	800d634 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d39e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	f003 030f 	and.w	r3, r3, #15
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ae:	69f9      	ldr	r1, [r7, #28]
 800d3b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	634b      	str	r3, [r1, #52]	@ 0x34
 800d3b8:	e13c      	b.n	800d634 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d110      	bne.n	800d3ec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	015a      	lsls	r2, r3, #5
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	69ba      	ldr	r2, [r7, #24]
 800d3da:	0151      	lsls	r1, r2, #5
 800d3dc:	69fa      	ldr	r2, [r7, #28]
 800d3de:	440a      	add	r2, r1
 800d3e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d3e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	e00f      	b.n	800d40c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	015a      	lsls	r2, r3, #5
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	4413      	add	r3, r2
 800d3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	69ba      	ldr	r2, [r7, #24]
 800d3fc:	0151      	lsls	r1, r2, #5
 800d3fe:	69fa      	ldr	r2, [r7, #28]
 800d400:	440a      	add	r2, r1
 800d402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d406:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d40a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	68d9      	ldr	r1, [r3, #12]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	781a      	ldrb	r2, [r3, #0]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	b298      	uxth	r0, r3
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	4603      	mov	r3, r0
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 f9b9 	bl	800d798 <USB_WritePacket>
 800d426:	e105      	b.n	800d634 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	015a      	lsls	r2, r3, #5
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	4413      	add	r3, r2
 800d430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	69ba      	ldr	r2, [r7, #24]
 800d438:	0151      	lsls	r1, r2, #5
 800d43a:	69fa      	ldr	r2, [r7, #28]
 800d43c:	440a      	add	r2, r1
 800d43e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d442:	0cdb      	lsrs	r3, r3, #19
 800d444:	04db      	lsls	r3, r3, #19
 800d446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	015a      	lsls	r2, r3, #5
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	4413      	add	r3, r2
 800d450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d454:	691b      	ldr	r3, [r3, #16]
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	0151      	lsls	r1, r2, #5
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	440a      	add	r2, r1
 800d45e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d462:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800d466:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800d46a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d132      	bne.n	800d4d8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	689a      	ldr	r2, [r3, #8]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	015a      	lsls	r2, r3, #5
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	4413      	add	r3, r2
 800d492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d496:	691a      	ldr	r2, [r3, #16]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	6a1b      	ldr	r3, [r3, #32]
 800d49c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4a0:	69b9      	ldr	r1, [r7, #24]
 800d4a2:	0148      	lsls	r0, r1, #5
 800d4a4:	69f9      	ldr	r1, [r7, #28]
 800d4a6:	4401      	add	r1, r0
 800d4a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	015a      	lsls	r2, r3, #5
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	69ba      	ldr	r2, [r7, #24]
 800d4c0:	0151      	lsls	r1, r2, #5
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	440a      	add	r2, r1
 800d4c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d4ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d4ce:	6113      	str	r3, [r2, #16]
 800d4d0:	e062      	b.n	800d598 <USB_EPStartXfer+0x490>
 800d4d2:	bf00      	nop
 800d4d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d123      	bne.n	800d528 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	015a      	lsls	r2, r3, #5
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4ec:	691a      	ldr	r2, [r3, #16]
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4f6:	69b9      	ldr	r1, [r7, #24]
 800d4f8:	0148      	lsls	r0, r1, #5
 800d4fa:	69f9      	ldr	r1, [r7, #28]
 800d4fc:	4401      	add	r1, r0
 800d4fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d502:	4313      	orrs	r3, r2
 800d504:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	015a      	lsls	r2, r3, #5
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	4413      	add	r3, r2
 800d50e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	69ba      	ldr	r2, [r7, #24]
 800d516:	0151      	lsls	r1, r2, #5
 800d518:	69fa      	ldr	r2, [r7, #28]
 800d51a:	440a      	add	r2, r1
 800d51c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d520:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d524:	6113      	str	r3, [r2, #16]
 800d526:	e037      	b.n	800d598 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	691a      	ldr	r2, [r3, #16]
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	4413      	add	r3, r2
 800d532:	1e5a      	subs	r2, r3, #1
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	fbb2 f3f3 	udiv	r3, r2, r3
 800d53c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	8afa      	ldrh	r2, [r7, #22]
 800d544:	fb03 f202 	mul.w	r2, r3, r2
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	015a      	lsls	r2, r3, #5
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	4413      	add	r3, r2
 800d554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d558:	691a      	ldr	r2, [r3, #16]
 800d55a:	8afb      	ldrh	r3, [r7, #22]
 800d55c:	04d9      	lsls	r1, r3, #19
 800d55e:	4b38      	ldr	r3, [pc, #224]	@ (800d640 <USB_EPStartXfer+0x538>)
 800d560:	400b      	ands	r3, r1
 800d562:	69b9      	ldr	r1, [r7, #24]
 800d564:	0148      	lsls	r0, r1, #5
 800d566:	69f9      	ldr	r1, [r7, #28]
 800d568:	4401      	add	r1, r0
 800d56a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d56e:	4313      	orrs	r3, r2
 800d570:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	015a      	lsls	r2, r3, #5
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	4413      	add	r3, r2
 800d57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d57e:	691a      	ldr	r2, [r3, #16]
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d588:	69b9      	ldr	r1, [r7, #24]
 800d58a:	0148      	lsls	r0, r1, #5
 800d58c:	69f9      	ldr	r1, [r7, #28]
 800d58e:	4401      	add	r1, r0
 800d590:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800d594:	4313      	orrs	r3, r2
 800d596:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d10d      	bne.n	800d5ba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d009      	beq.n	800d5ba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	68d9      	ldr	r1, [r3, #12]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	015a      	lsls	r2, r3, #5
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5b6:	460a      	mov	r2, r1
 800d5b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	791b      	ldrb	r3, [r3, #4]
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d128      	bne.n	800d614 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d110      	bne.n	800d5f4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	015a      	lsls	r2, r3, #5
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	69ba      	ldr	r2, [r7, #24]
 800d5e2:	0151      	lsls	r1, r2, #5
 800d5e4:	69fa      	ldr	r2, [r7, #28]
 800d5e6:	440a      	add	r2, r1
 800d5e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d5f0:	6013      	str	r3, [r2, #0]
 800d5f2:	e00f      	b.n	800d614 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	015a      	lsls	r2, r3, #5
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	69ba      	ldr	r2, [r7, #24]
 800d604:	0151      	lsls	r1, r2, #5
 800d606:	69fa      	ldr	r2, [r7, #28]
 800d608:	440a      	add	r2, r1
 800d60a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d60e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d612:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	015a      	lsls	r2, r3, #5
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	4413      	add	r3, r2
 800d61c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	69ba      	ldr	r2, [r7, #24]
 800d624:	0151      	lsls	r1, r2, #5
 800d626:	69fa      	ldr	r2, [r7, #28]
 800d628:	440a      	add	r2, r1
 800d62a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d62e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3720      	adds	r7, #32
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	1ff80000 	.word	0x1ff80000

0800d644 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d64e:	2300      	movs	r3, #0
 800d650:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800d652:	2300      	movs	r3, #0
 800d654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	785b      	ldrb	r3, [r3, #1]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d14a      	bne.n	800d6f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d67a:	f040 8086 	bne.w	800d78a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	015a      	lsls	r2, r3, #5
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	4413      	add	r3, r2
 800d688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	683a      	ldr	r2, [r7, #0]
 800d690:	7812      	ldrb	r2, [r2, #0]
 800d692:	0151      	lsls	r1, r2, #5
 800d694:	693a      	ldr	r2, [r7, #16]
 800d696:	440a      	add	r2, r1
 800d698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d69c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d6a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	015a      	lsls	r2, r3, #5
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	7812      	ldrb	r2, [r2, #0]
 800d6b6:	0151      	lsls	r1, r2, #5
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	440a      	add	r2, r1
 800d6bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d6c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d6c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d902      	bls.n	800d6dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	75fb      	strb	r3, [r7, #23]
          break;
 800d6da:	e056      	b.n	800d78a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	015a      	lsls	r2, r3, #5
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d6f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d6f4:	d0e7      	beq.n	800d6c6 <USB_EPStopXfer+0x82>
 800d6f6:	e048      	b.n	800d78a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	015a      	lsls	r2, r3, #5
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	4413      	add	r3, r2
 800d702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d70c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d710:	d13b      	bne.n	800d78a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	015a      	lsls	r2, r3, #5
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	7812      	ldrb	r2, [r2, #0]
 800d726:	0151      	lsls	r1, r2, #5
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	440a      	add	r2, r1
 800d72c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d730:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d734:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	015a      	lsls	r2, r3, #5
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	4413      	add	r3, r2
 800d740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	7812      	ldrb	r2, [r2, #0]
 800d74a:	0151      	lsls	r1, r2, #5
 800d74c:	693a      	ldr	r2, [r7, #16]
 800d74e:	440a      	add	r2, r1
 800d750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d754:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d758:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	3301      	adds	r3, #1
 800d75e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f242 7210 	movw	r2, #10000	@ 0x2710
 800d766:	4293      	cmp	r3, r2
 800d768:	d902      	bls.n	800d770 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	75fb      	strb	r3, [r7, #23]
          break;
 800d76e:	e00c      	b.n	800d78a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	015a      	lsls	r2, r3, #5
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	4413      	add	r3, r2
 800d77a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d788:	d0e7      	beq.n	800d75a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	371c      	adds	r7, #28
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d798:	b480      	push	{r7}
 800d79a:	b089      	sub	sp, #36	@ 0x24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	71fb      	strb	r3, [r7, #7]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d7b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d123      	bne.n	800d806 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d7be:	88bb      	ldrh	r3, [r7, #4]
 800d7c0:	3303      	adds	r3, #3
 800d7c2:	089b      	lsrs	r3, r3, #2
 800d7c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	61bb      	str	r3, [r7, #24]
 800d7ca:	e018      	b.n	800d7fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	031a      	lsls	r2, r3, #12
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7d8:	461a      	mov	r2, r3
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	61bb      	str	r3, [r7, #24]
 800d7fe:	69ba      	ldr	r2, [r7, #24]
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	429a      	cmp	r2, r3
 800d804:	d3e2      	bcc.n	800d7cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3724      	adds	r7, #36	@ 0x24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d814:	b480      	push	{r7}
 800d816:	b08b      	sub	sp, #44	@ 0x2c
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	4613      	mov	r3, r2
 800d820:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d82a:	88fb      	ldrh	r3, [r7, #6]
 800d82c:	089b      	lsrs	r3, r3, #2
 800d82e:	b29b      	uxth	r3, r3
 800d830:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d832:	88fb      	ldrh	r3, [r7, #6]
 800d834:	f003 0303 	and.w	r3, r3, #3
 800d838:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d83a:	2300      	movs	r3, #0
 800d83c:	623b      	str	r3, [r7, #32]
 800d83e:	e014      	b.n	800d86a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84e:	3301      	adds	r3, #1
 800d850:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d854:	3301      	adds	r3, #1
 800d856:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85a:	3301      	adds	r3, #1
 800d85c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d860:	3301      	adds	r3, #1
 800d862:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d864:	6a3b      	ldr	r3, [r7, #32]
 800d866:	3301      	adds	r3, #1
 800d868:	623b      	str	r3, [r7, #32]
 800d86a:	6a3a      	ldr	r2, [r7, #32]
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d3e6      	bcc.n	800d840 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d872:	8bfb      	ldrh	r3, [r7, #30]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d01e      	beq.n	800d8b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d878:	2300      	movs	r3, #0
 800d87a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d882:	461a      	mov	r2, r3
 800d884:	f107 0310 	add.w	r3, r7, #16
 800d888:	6812      	ldr	r2, [r2, #0]
 800d88a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d88c:	693a      	ldr	r2, [r7, #16]
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	b2db      	uxtb	r3, r3
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	fa22 f303 	lsr.w	r3, r2, r3
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89c:	701a      	strb	r2, [r3, #0]
      i++;
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	623b      	str	r3, [r7, #32]
      pDest++;
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d8aa:	8bfb      	ldrh	r3, [r7, #30]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d8b0:	8bfb      	ldrh	r3, [r7, #30]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1ea      	bne.n	800d88c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	372c      	adds	r7, #44	@ 0x2c
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	785b      	ldrb	r3, [r3, #1]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d12c      	bne.n	800d93a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	db12      	blt.n	800d918 <USB_EPSetStall+0x54>
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00f      	beq.n	800d918 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	015a      	lsls	r2, r3, #5
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	4413      	add	r3, r2
 800d900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68ba      	ldr	r2, [r7, #8]
 800d908:	0151      	lsls	r1, r2, #5
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	440a      	add	r2, r1
 800d90e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d916:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	015a      	lsls	r2, r3, #5
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	0151      	lsls	r1, r2, #5
 800d92a:	68fa      	ldr	r2, [r7, #12]
 800d92c:	440a      	add	r2, r1
 800d92e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d932:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d936:	6013      	str	r3, [r2, #0]
 800d938:	e02b      	b.n	800d992 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	015a      	lsls	r2, r3, #5
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	4413      	add	r3, r2
 800d942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	db12      	blt.n	800d972 <USB_EPSetStall+0xae>
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00f      	beq.n	800d972 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	015a      	lsls	r2, r3, #5
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4413      	add	r3, r2
 800d95a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68ba      	ldr	r2, [r7, #8]
 800d962:	0151      	lsls	r1, r2, #5
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	440a      	add	r2, r1
 800d968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d96c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d970:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	015a      	lsls	r2, r3, #5
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4413      	add	r3, r2
 800d97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	0151      	lsls	r1, r2, #5
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	440a      	add	r2, r1
 800d988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d98c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d990:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	785b      	ldrb	r3, [r3, #1]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d128      	bne.n	800da0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	015a      	lsls	r2, r3, #5
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	0151      	lsls	r1, r2, #5
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	440a      	add	r2, r1
 800d9d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d9d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d9da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	791b      	ldrb	r3, [r3, #4]
 800d9e0:	2b03      	cmp	r3, #3
 800d9e2:	d003      	beq.n	800d9ec <USB_EPClearStall+0x4c>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	791b      	ldrb	r3, [r3, #4]
 800d9e8:	2b02      	cmp	r3, #2
 800d9ea:	d138      	bne.n	800da5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	0151      	lsls	r1, r2, #5
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	440a      	add	r2, r1
 800da02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800da06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da0a:	6013      	str	r3, [r2, #0]
 800da0c:	e027      	b.n	800da5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	015a      	lsls	r2, r3, #5
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	4413      	add	r3, r2
 800da16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	0151      	lsls	r1, r2, #5
 800da20:	68fa      	ldr	r2, [r7, #12]
 800da22:	440a      	add	r2, r1
 800da24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800da2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	791b      	ldrb	r3, [r3, #4]
 800da32:	2b03      	cmp	r3, #3
 800da34:	d003      	beq.n	800da3e <USB_EPClearStall+0x9e>
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	791b      	ldrb	r3, [r3, #4]
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d10f      	bne.n	800da5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	015a      	lsls	r2, r3, #5
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	4413      	add	r3, r2
 800da46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68ba      	ldr	r2, [r7, #8]
 800da4e:	0151      	lsls	r1, r2, #5
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	440a      	add	r2, r1
 800da54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800da5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3714      	adds	r7, #20
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	460b      	mov	r3, r1
 800da76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800da8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	78fb      	ldrb	r3, [r7, #3]
 800da9a:	011b      	lsls	r3, r3, #4
 800da9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800daa0:	68f9      	ldr	r1, [r7, #12]
 800daa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800daa6:	4313      	orrs	r3, r2
 800daa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dad2:	f023 0303 	bic.w	r3, r3, #3
 800dad6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dae6:	f023 0302 	bic.w	r3, r3, #2
 800daea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dafa:	b480      	push	{r7}
 800dafc:	b085      	sub	sp, #20
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db14:	f023 0303 	bic.w	r3, r3, #3
 800db18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800db28:	f043 0302 	orr.w	r3, r3, #2
 800db2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	699b      	ldr	r3, [r3, #24]
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	4013      	ands	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800db54:	68fb      	ldr	r3, [r7, #12]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800db62:	b480      	push	{r7}
 800db64:	b085      	sub	sp, #20
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	68ba      	ldr	r2, [r7, #8]
 800db82:	4013      	ands	r3, r2
 800db84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	0c1b      	lsrs	r3, r3, #16
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800db96:	b480      	push	{r7}
 800db98:	b085      	sub	sp, #20
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	68ba      	ldr	r2, [r7, #8]
 800dbb6:	4013      	ands	r3, r2
 800dbb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	b29b      	uxth	r3, r3
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr

0800dbca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dbca:	b480      	push	{r7}
 800dbcc:	b085      	sub	sp, #20
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dbda:	78fb      	ldrb	r3, [r7, #3]
 800dbdc:	015a      	lsls	r2, r3, #5
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbe6:	689b      	ldr	r3, [r3, #8]
 800dbe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	4013      	ands	r3, r2
 800dbf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b087      	sub	sp, #28
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc1c:	691b      	ldr	r3, [r3, #16]
 800dc1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	f003 030f 	and.w	r3, r3, #15
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	fa22 f303 	lsr.w	r3, r2, r3
 800dc36:	01db      	lsls	r3, r3, #7
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	693a      	ldr	r2, [r7, #16]
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dc40:	78fb      	ldrb	r3, [r7, #3]
 800dc42:	015a      	lsls	r2, r3, #5
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	4413      	add	r3, r2
 800dc48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc4c:	689b      	ldr	r3, [r3, #8]
 800dc4e:	693a      	ldr	r2, [r7, #16]
 800dc50:	4013      	ands	r3, r2
 800dc52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dc54:	68bb      	ldr	r3, [r7, #8]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	371c      	adds	r7, #28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b083      	sub	sp, #12
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	695b      	ldr	r3, [r3, #20]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr

0800dc7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b085      	sub	sp, #20
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68fa      	ldr	r2, [r7, #12]
 800dc94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800dc9c:	f023 0307 	bic.w	r3, r3, #7
 800dca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3714      	adds	r7, #20
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	460b      	mov	r3, r1
 800dcce:	607a      	str	r2, [r7, #4]
 800dcd0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	333c      	adds	r3, #60	@ 0x3c
 800dcda:	3304      	adds	r3, #4
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	4a26      	ldr	r2, [pc, #152]	@ (800dd7c <USB_EP0_OutStart+0xb8>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d90a      	bls.n	800dcfe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dcf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dcf8:	d101      	bne.n	800dcfe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e037      	b.n	800dd6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd04:	461a      	mov	r2, r3
 800dd06:	2300      	movs	r3, #0
 800dd08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd10:	691b      	ldr	r3, [r3, #16]
 800dd12:	697a      	ldr	r2, [r7, #20]
 800dd14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd24:	691b      	ldr	r3, [r3, #16]
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd2c:	f043 0318 	orr.w	r3, r3, #24
 800dd30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	697a      	ldr	r2, [r7, #20]
 800dd3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800dd44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dd46:	7afb      	ldrb	r3, [r7, #11]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d10f      	bne.n	800dd6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd52:	461a      	mov	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dd66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800dd6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr
 800dd7a:	bf00      	nop
 800dd7c:	4f54300a 	.word	0x4f54300a

0800dd80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd98:	d901      	bls.n	800dd9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e01b      	b.n	800ddd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	691b      	ldr	r3, [r3, #16]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	daf2      	bge.n	800dd8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dda6:	2300      	movs	r3, #0
 800dda8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	691b      	ldr	r3, [r3, #16]
 800ddae:	f043 0201 	orr.w	r2, r3, #1
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ddc2:	d901      	bls.n	800ddc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ddc4:	2303      	movs	r3, #3
 800ddc6:	e006      	b.n	800ddd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d0f0      	beq.n	800ddb6 <USB_CoreReset+0x36>

  return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
	...

0800dde4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ddf0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ddf4:	f002 fd00 	bl	80107f8 <USBD_static_malloc>
 800ddf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d109      	bne.n	800de14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	32b0      	adds	r2, #176	@ 0xb0
 800de0a:	2100      	movs	r1, #0
 800de0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800de10:	2302      	movs	r3, #2
 800de12:	e0d4      	b.n	800dfbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800de14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800de18:	2100      	movs	r1, #0
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f002 fd52 	bl	80108c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	32b0      	adds	r2, #176	@ 0xb0
 800de2a:	68f9      	ldr	r1, [r7, #12]
 800de2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	32b0      	adds	r2, #176	@ 0xb0
 800de3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7c1b      	ldrb	r3, [r3, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d138      	bne.n	800debe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de4c:	4b5e      	ldr	r3, [pc, #376]	@ (800dfc8 <USBD_CDC_Init+0x1e4>)
 800de4e:	7819      	ldrb	r1, [r3, #0]
 800de50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de54:	2202      	movs	r2, #2
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f002 fbab 	bl	80105b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de5c:	4b5a      	ldr	r3, [pc, #360]	@ (800dfc8 <USBD_CDC_Init+0x1e4>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	f003 020f 	and.w	r2, r3, #15
 800de64:	6879      	ldr	r1, [r7, #4]
 800de66:	4613      	mov	r3, r2
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	4413      	add	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	440b      	add	r3, r1
 800de70:	3324      	adds	r3, #36	@ 0x24
 800de72:	2201      	movs	r2, #1
 800de74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de76:	4b55      	ldr	r3, [pc, #340]	@ (800dfcc <USBD_CDC_Init+0x1e8>)
 800de78:	7819      	ldrb	r1, [r3, #0]
 800de7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800de7e:	2202      	movs	r2, #2
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f002 fb96 	bl	80105b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de86:	4b51      	ldr	r3, [pc, #324]	@ (800dfcc <USBD_CDC_Init+0x1e8>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	f003 020f 	and.w	r2, r3, #15
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	4613      	mov	r3, r2
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	4413      	add	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	440b      	add	r3, r1
 800de9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800de9e:	2201      	movs	r2, #1
 800dea0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dea2:	4b4b      	ldr	r3, [pc, #300]	@ (800dfd0 <USBD_CDC_Init+0x1ec>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	f003 020f 	and.w	r2, r3, #15
 800deaa:	6879      	ldr	r1, [r7, #4]
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	440b      	add	r3, r1
 800deb6:	3326      	adds	r3, #38	@ 0x26
 800deb8:	2210      	movs	r2, #16
 800deba:	801a      	strh	r2, [r3, #0]
 800debc:	e035      	b.n	800df2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800debe:	4b42      	ldr	r3, [pc, #264]	@ (800dfc8 <USBD_CDC_Init+0x1e4>)
 800dec0:	7819      	ldrb	r1, [r3, #0]
 800dec2:	2340      	movs	r3, #64	@ 0x40
 800dec4:	2202      	movs	r2, #2
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f002 fb73 	bl	80105b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800decc:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc8 <USBD_CDC_Init+0x1e4>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 020f 	and.w	r2, r3, #15
 800ded4:	6879      	ldr	r1, [r7, #4]
 800ded6:	4613      	mov	r3, r2
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	440b      	add	r3, r1
 800dee0:	3324      	adds	r3, #36	@ 0x24
 800dee2:	2201      	movs	r2, #1
 800dee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dee6:	4b39      	ldr	r3, [pc, #228]	@ (800dfcc <USBD_CDC_Init+0x1e8>)
 800dee8:	7819      	ldrb	r1, [r3, #0]
 800deea:	2340      	movs	r3, #64	@ 0x40
 800deec:	2202      	movs	r2, #2
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f002 fb5f 	bl	80105b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800def4:	4b35      	ldr	r3, [pc, #212]	@ (800dfcc <USBD_CDC_Init+0x1e8>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f003 020f 	and.w	r2, r3, #15
 800defc:	6879      	ldr	r1, [r7, #4]
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	440b      	add	r3, r1
 800df08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df0c:	2201      	movs	r2, #1
 800df0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df10:	4b2f      	ldr	r3, [pc, #188]	@ (800dfd0 <USBD_CDC_Init+0x1ec>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	f003 020f 	and.w	r2, r3, #15
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	4613      	mov	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	4413      	add	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	440b      	add	r3, r1
 800df24:	3326      	adds	r3, #38	@ 0x26
 800df26:	2210      	movs	r2, #16
 800df28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df2a:	4b29      	ldr	r3, [pc, #164]	@ (800dfd0 <USBD_CDC_Init+0x1ec>)
 800df2c:	7819      	ldrb	r1, [r3, #0]
 800df2e:	2308      	movs	r3, #8
 800df30:	2203      	movs	r2, #3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f002 fb3d 	bl	80105b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800df38:	4b25      	ldr	r3, [pc, #148]	@ (800dfd0 <USBD_CDC_Init+0x1ec>)
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	f003 020f 	and.w	r2, r3, #15
 800df40:	6879      	ldr	r1, [r7, #4]
 800df42:	4613      	mov	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	440b      	add	r3, r1
 800df4c:	3324      	adds	r3, #36	@ 0x24
 800df4e:	2201      	movs	r2, #1
 800df50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2200      	movs	r2, #0
 800df56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	33b0      	adds	r3, #176	@ 0xb0
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	4413      	add	r3, r2
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800df84:	2b00      	cmp	r3, #0
 800df86:	d101      	bne.n	800df8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800df88:	2302      	movs	r3, #2
 800df8a:	e018      	b.n	800dfbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	7c1b      	ldrb	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10a      	bne.n	800dfaa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df94:	4b0d      	ldr	r3, [pc, #52]	@ (800dfcc <USBD_CDC_Init+0x1e8>)
 800df96:	7819      	ldrb	r1, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f002 fbf4 	bl	8010790 <USBD_LL_PrepareReceive>
 800dfa8:	e008      	b.n	800dfbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dfaa:	4b08      	ldr	r3, [pc, #32]	@ (800dfcc <USBD_CDC_Init+0x1e8>)
 800dfac:	7819      	ldrb	r1, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dfb4:	2340      	movs	r3, #64	@ 0x40
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f002 fbea 	bl	8010790 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfbc:	2300      	movs	r3, #0
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	200000a3 	.word	0x200000a3
 800dfcc:	200000a4 	.word	0x200000a4
 800dfd0:	200000a5 	.word	0x200000a5

0800dfd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dfe0:	4b3a      	ldr	r3, [pc, #232]	@ (800e0cc <USBD_CDC_DeInit+0xf8>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f002 fb09 	bl	80105fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dfec:	4b37      	ldr	r3, [pc, #220]	@ (800e0cc <USBD_CDC_DeInit+0xf8>)
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	f003 020f 	and.w	r2, r3, #15
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	4613      	mov	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4413      	add	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	440b      	add	r3, r1
 800e000:	3324      	adds	r3, #36	@ 0x24
 800e002:	2200      	movs	r2, #0
 800e004:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e006:	4b32      	ldr	r3, [pc, #200]	@ (800e0d0 <USBD_CDC_DeInit+0xfc>)
 800e008:	781b      	ldrb	r3, [r3, #0]
 800e00a:	4619      	mov	r1, r3
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f002 faf6 	bl	80105fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e012:	4b2f      	ldr	r3, [pc, #188]	@ (800e0d0 <USBD_CDC_DeInit+0xfc>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	f003 020f 	and.w	r2, r3, #15
 800e01a:	6879      	ldr	r1, [r7, #4]
 800e01c:	4613      	mov	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e02a:	2200      	movs	r2, #0
 800e02c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e02e:	4b29      	ldr	r3, [pc, #164]	@ (800e0d4 <USBD_CDC_DeInit+0x100>)
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	4619      	mov	r1, r3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f002 fae2 	bl	80105fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e03a:	4b26      	ldr	r3, [pc, #152]	@ (800e0d4 <USBD_CDC_DeInit+0x100>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 020f 	and.w	r2, r3, #15
 800e042:	6879      	ldr	r1, [r7, #4]
 800e044:	4613      	mov	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	440b      	add	r3, r1
 800e04e:	3324      	adds	r3, #36	@ 0x24
 800e050:	2200      	movs	r2, #0
 800e052:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e054:	4b1f      	ldr	r3, [pc, #124]	@ (800e0d4 <USBD_CDC_DeInit+0x100>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	f003 020f 	and.w	r2, r3, #15
 800e05c:	6879      	ldr	r1, [r7, #4]
 800e05e:	4613      	mov	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	440b      	add	r3, r1
 800e068:	3326      	adds	r3, #38	@ 0x26
 800e06a:	2200      	movs	r2, #0
 800e06c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	32b0      	adds	r2, #176	@ 0xb0
 800e078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01f      	beq.n	800e0c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	33b0      	adds	r3, #176	@ 0xb0
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	32b0      	adds	r2, #176	@ 0xb0
 800e09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f002 fbb6 	bl	8010814 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	32b0      	adds	r2, #176	@ 0xb0
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3708      	adds	r7, #8
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	200000a3 	.word	0x200000a3
 800e0d0:	200000a4 	.word	0x200000a4
 800e0d4:	200000a5 	.word	0x200000a5

0800e0d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	32b0      	adds	r2, #176	@ 0xb0
 800e0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d101      	bne.n	800e108 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e104:	2303      	movs	r3, #3
 800e106:	e0bf      	b.n	800e288 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e110:	2b00      	cmp	r3, #0
 800e112:	d050      	beq.n	800e1b6 <USBD_CDC_Setup+0xde>
 800e114:	2b20      	cmp	r3, #32
 800e116:	f040 80af 	bne.w	800e278 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	88db      	ldrh	r3, [r3, #6]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d03a      	beq.n	800e198 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	b25b      	sxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	da1b      	bge.n	800e164 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	33b0      	adds	r3, #176	@ 0xb0
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	4413      	add	r3, r2
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	689b      	ldr	r3, [r3, #8]
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e142:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	88d2      	ldrh	r2, [r2, #6]
 800e148:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	88db      	ldrh	r3, [r3, #6]
 800e14e:	2b07      	cmp	r3, #7
 800e150:	bf28      	it	cs
 800e152:	2307      	movcs	r3, #7
 800e154:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	89fa      	ldrh	r2, [r7, #14]
 800e15a:	4619      	mov	r1, r3
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f001 fd93 	bl	800fc88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e162:	e090      	b.n	800e286 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	785a      	ldrb	r2, [r3, #1]
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	88db      	ldrh	r3, [r3, #6]
 800e172:	2b3f      	cmp	r3, #63	@ 0x3f
 800e174:	d803      	bhi.n	800e17e <USBD_CDC_Setup+0xa6>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	88db      	ldrh	r3, [r3, #6]
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	e000      	b.n	800e180 <USBD_CDC_Setup+0xa8>
 800e17e:	2240      	movs	r2, #64	@ 0x40
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e186:	6939      	ldr	r1, [r7, #16]
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e18e:	461a      	mov	r2, r3
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f001 fda5 	bl	800fce0 <USBD_CtlPrepareRx>
      break;
 800e196:	e076      	b.n	800e286 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	33b0      	adds	r3, #176	@ 0xb0
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	7850      	ldrb	r0, [r2, #1]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	4798      	blx	r3
      break;
 800e1b4:	e067      	b.n	800e286 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	785b      	ldrb	r3, [r3, #1]
 800e1ba:	2b0b      	cmp	r3, #11
 800e1bc:	d851      	bhi.n	800e262 <USBD_CDC_Setup+0x18a>
 800e1be:	a201      	add	r2, pc, #4	@ (adr r2, 800e1c4 <USBD_CDC_Setup+0xec>)
 800e1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c4:	0800e1f5 	.word	0x0800e1f5
 800e1c8:	0800e271 	.word	0x0800e271
 800e1cc:	0800e263 	.word	0x0800e263
 800e1d0:	0800e263 	.word	0x0800e263
 800e1d4:	0800e263 	.word	0x0800e263
 800e1d8:	0800e263 	.word	0x0800e263
 800e1dc:	0800e263 	.word	0x0800e263
 800e1e0:	0800e263 	.word	0x0800e263
 800e1e4:	0800e263 	.word	0x0800e263
 800e1e8:	0800e263 	.word	0x0800e263
 800e1ec:	0800e21f 	.word	0x0800e21f
 800e1f0:	0800e249 	.word	0x0800e249
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	d107      	bne.n	800e210 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e200:	f107 030a 	add.w	r3, r7, #10
 800e204:	2202      	movs	r2, #2
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f001 fd3d 	bl	800fc88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e20e:	e032      	b.n	800e276 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f001 fcbb 	bl	800fb8e <USBD_CtlError>
            ret = USBD_FAIL;
 800e218:	2303      	movs	r3, #3
 800e21a:	75fb      	strb	r3, [r7, #23]
          break;
 800e21c:	e02b      	b.n	800e276 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e224:	b2db      	uxtb	r3, r3
 800e226:	2b03      	cmp	r3, #3
 800e228:	d107      	bne.n	800e23a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e22a:	f107 030d 	add.w	r3, r7, #13
 800e22e:	2201      	movs	r2, #1
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f001 fd28 	bl	800fc88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e238:	e01d      	b.n	800e276 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f001 fca6 	bl	800fb8e <USBD_CtlError>
            ret = USBD_FAIL;
 800e242:	2303      	movs	r3, #3
 800e244:	75fb      	strb	r3, [r7, #23]
          break;
 800e246:	e016      	b.n	800e276 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b03      	cmp	r3, #3
 800e252:	d00f      	beq.n	800e274 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f001 fc99 	bl	800fb8e <USBD_CtlError>
            ret = USBD_FAIL;
 800e25c:	2303      	movs	r3, #3
 800e25e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e260:	e008      	b.n	800e274 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e262:	6839      	ldr	r1, [r7, #0]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f001 fc92 	bl	800fb8e <USBD_CtlError>
          ret = USBD_FAIL;
 800e26a:	2303      	movs	r3, #3
 800e26c:	75fb      	strb	r3, [r7, #23]
          break;
 800e26e:	e002      	b.n	800e276 <USBD_CDC_Setup+0x19e>
          break;
 800e270:	bf00      	nop
 800e272:	e008      	b.n	800e286 <USBD_CDC_Setup+0x1ae>
          break;
 800e274:	bf00      	nop
      }
      break;
 800e276:	e006      	b.n	800e286 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f001 fc87 	bl	800fb8e <USBD_CtlError>
      ret = USBD_FAIL;
 800e280:	2303      	movs	r3, #3
 800e282:	75fb      	strb	r3, [r7, #23]
      break;
 800e284:	bf00      	nop
  }

  return (uint8_t)ret;
 800e286:	7dfb      	ldrb	r3, [r7, #23]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	460b      	mov	r3, r1
 800e29a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	32b0      	adds	r2, #176	@ 0xb0
 800e2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e2b6:	2303      	movs	r3, #3
 800e2b8:	e065      	b.n	800e386 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	32b0      	adds	r2, #176	@ 0xb0
 800e2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2ca:	78fb      	ldrb	r3, [r7, #3]
 800e2cc:	f003 020f 	and.w	r2, r3, #15
 800e2d0:	6879      	ldr	r1, [r7, #4]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	440b      	add	r3, r1
 800e2dc:	3318      	adds	r3, #24
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d02f      	beq.n	800e344 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e2e4:	78fb      	ldrb	r3, [r7, #3]
 800e2e6:	f003 020f 	and.w	r2, r3, #15
 800e2ea:	6879      	ldr	r1, [r7, #4]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	440b      	add	r3, r1
 800e2f6:	3318      	adds	r3, #24
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	78fb      	ldrb	r3, [r7, #3]
 800e2fc:	f003 010f 	and.w	r1, r3, #15
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	460b      	mov	r3, r1
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	440b      	add	r3, r1
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4403      	add	r3, r0
 800e30c:	331c      	adds	r3, #28
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	fbb2 f1f3 	udiv	r1, r2, r3
 800e314:	fb01 f303 	mul.w	r3, r1, r3
 800e318:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d112      	bne.n	800e344 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e31e:	78fb      	ldrb	r3, [r7, #3]
 800e320:	f003 020f 	and.w	r2, r3, #15
 800e324:	6879      	ldr	r1, [r7, #4]
 800e326:	4613      	mov	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4413      	add	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	440b      	add	r3, r1
 800e330:	3318      	adds	r3, #24
 800e332:	2200      	movs	r2, #0
 800e334:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e336:	78f9      	ldrb	r1, [r7, #3]
 800e338:	2300      	movs	r3, #0
 800e33a:	2200      	movs	r2, #0
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f002 fa06 	bl	801074e <USBD_LL_Transmit>
 800e342:	e01f      	b.n	800e384 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2200      	movs	r2, #0
 800e348:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	33b0      	adds	r3, #176	@ 0xb0
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4413      	add	r3, r2
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d010      	beq.n	800e384 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	33b0      	adds	r3, #176	@ 0xb0
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e380:	78fa      	ldrb	r2, [r7, #3]
 800e382:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
 800e396:	460b      	mov	r3, r1
 800e398:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	32b0      	adds	r2, #176	@ 0xb0
 800e3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	32b0      	adds	r2, #176	@ 0xb0
 800e3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d101      	bne.n	800e3c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e3bc:	2303      	movs	r3, #3
 800e3be:	e01a      	b.n	800e3f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e3c0:	78fb      	ldrb	r3, [r7, #3]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f002 fa04 	bl	80107d2 <USBD_LL_GetRxDataSize>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	33b0      	adds	r3, #176	@ 0xb0
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3710      	adds	r7, #16
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b084      	sub	sp, #16
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	32b0      	adds	r2, #176	@ 0xb0
 800e410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e41c:	2303      	movs	r3, #3
 800e41e:	e024      	b.n	800e46a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	33b0      	adds	r3, #176	@ 0xb0
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d019      	beq.n	800e468 <USBD_CDC_EP0_RxReady+0x6a>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e43a:	2bff      	cmp	r3, #255	@ 0xff
 800e43c:	d014      	beq.n	800e468 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	33b0      	adds	r3, #176	@ 0xb0
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	4413      	add	r3, r2
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e456:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e45e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	22ff      	movs	r2, #255	@ 0xff
 800e464:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
	...

0800e474 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e47c:	2182      	movs	r1, #130	@ 0x82
 800e47e:	4818      	ldr	r0, [pc, #96]	@ (800e4e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e480:	f000 fd4f 	bl	800ef22 <USBD_GetEpDesc>
 800e484:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e486:	2101      	movs	r1, #1
 800e488:	4815      	ldr	r0, [pc, #84]	@ (800e4e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e48a:	f000 fd4a 	bl	800ef22 <USBD_GetEpDesc>
 800e48e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e490:	2181      	movs	r1, #129	@ 0x81
 800e492:	4813      	ldr	r0, [pc, #76]	@ (800e4e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e494:	f000 fd45 	bl	800ef22 <USBD_GetEpDesc>
 800e498:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d002      	beq.n	800e4a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2210      	movs	r2, #16
 800e4a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d006      	beq.n	800e4ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4b4:	711a      	strb	r2, [r3, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d006      	beq.n	800e4ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4c8:	711a      	strb	r2, [r3, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2243      	movs	r2, #67	@ 0x43
 800e4d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e4d4:	4b02      	ldr	r3, [pc, #8]	@ (800e4e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	20000060 	.word	0x20000060

0800e4e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4ec:	2182      	movs	r1, #130	@ 0x82
 800e4ee:	4818      	ldr	r0, [pc, #96]	@ (800e550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4f0:	f000 fd17 	bl	800ef22 <USBD_GetEpDesc>
 800e4f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	4815      	ldr	r0, [pc, #84]	@ (800e550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4fa:	f000 fd12 	bl	800ef22 <USBD_GetEpDesc>
 800e4fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e500:	2181      	movs	r1, #129	@ 0x81
 800e502:	4813      	ldr	r0, [pc, #76]	@ (800e550 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e504:	f000 fd0d 	bl	800ef22 <USBD_GetEpDesc>
 800e508:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d002      	beq.n	800e516 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2210      	movs	r2, #16
 800e514:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d006      	beq.n	800e52a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	2200      	movs	r2, #0
 800e520:	711a      	strb	r2, [r3, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f042 0202 	orr.w	r2, r2, #2
 800e528:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d006      	beq.n	800e53e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	711a      	strb	r2, [r3, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	f042 0202 	orr.w	r2, r2, #2
 800e53c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2243      	movs	r2, #67	@ 0x43
 800e542:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e544:	4b02      	ldr	r3, [pc, #8]	@ (800e550 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
 800e54e:	bf00      	nop
 800e550:	20000060 	.word	0x20000060

0800e554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e55c:	2182      	movs	r1, #130	@ 0x82
 800e55e:	4818      	ldr	r0, [pc, #96]	@ (800e5c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e560:	f000 fcdf 	bl	800ef22 <USBD_GetEpDesc>
 800e564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e566:	2101      	movs	r1, #1
 800e568:	4815      	ldr	r0, [pc, #84]	@ (800e5c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e56a:	f000 fcda 	bl	800ef22 <USBD_GetEpDesc>
 800e56e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e570:	2181      	movs	r1, #129	@ 0x81
 800e572:	4813      	ldr	r0, [pc, #76]	@ (800e5c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e574:	f000 fcd5 	bl	800ef22 <USBD_GetEpDesc>
 800e578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	2210      	movs	r2, #16
 800e584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d006      	beq.n	800e59a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	2200      	movs	r2, #0
 800e590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e594:	711a      	strb	r2, [r3, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d006      	beq.n	800e5ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e5a8:	711a      	strb	r2, [r3, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2243      	movs	r2, #67	@ 0x43
 800e5b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5b4:	4b02      	ldr	r3, [pc, #8]	@ (800e5c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20000060 	.word	0x20000060

0800e5c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	220a      	movs	r2, #10
 800e5d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e5d2:	4b03      	ldr	r3, [pc, #12]	@ (800e5e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	370c      	adds	r7, #12
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr
 800e5e0:	2000001c 	.word	0x2000001c

0800e5e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e5f4:	2303      	movs	r3, #3
 800e5f6:	e009      	b.n	800e60c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	33b0      	adds	r3, #176	@ 0xb0
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	4413      	add	r3, r2
 800e606:	683a      	ldr	r2, [r7, #0]
 800e608:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e618:	b480      	push	{r7}
 800e61a:	b087      	sub	sp, #28
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	32b0      	adds	r2, #176	@ 0xb0
 800e62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e632:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e63a:	2303      	movs	r3, #3
 800e63c:	e008      	b.n	800e650 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	371c      	adds	r7, #28
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b085      	sub	sp, #20
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	32b0      	adds	r2, #176	@ 0xb0
 800e670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e674:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e67c:	2303      	movs	r3, #3
 800e67e:	e004      	b.n	800e68a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3714      	adds	r7, #20
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
	...

0800e698 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	32b0      	adds	r2, #176	@ 0xb0
 800e6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e025      	b.n	800e70a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d11f      	bne.n	800e708 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e6d0:	4b10      	ldr	r3, [pc, #64]	@ (800e714 <USBD_CDC_TransmitPacket+0x7c>)
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	f003 020f 	and.w	r2, r3, #15
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4403      	add	r3, r0
 800e6ea:	3318      	adds	r3, #24
 800e6ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e6ee:	4b09      	ldr	r3, [pc, #36]	@ (800e714 <USBD_CDC_TransmitPacket+0x7c>)
 800e6f0:	7819      	ldrb	r1, [r3, #0]
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f002 f825 	bl	801074e <USBD_LL_Transmit>

    ret = USBD_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e708:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	200000a3 	.word	0x200000a3

0800e718 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b084      	sub	sp, #16
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	32b0      	adds	r2, #176	@ 0xb0
 800e72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e72e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	32b0      	adds	r2, #176	@ 0xb0
 800e73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d101      	bne.n	800e746 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e742:	2303      	movs	r3, #3
 800e744:	e018      	b.n	800e778 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7c1b      	ldrb	r3, [r3, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d10a      	bne.n	800e764 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e74e:	4b0c      	ldr	r3, [pc, #48]	@ (800e780 <USBD_CDC_ReceivePacket+0x68>)
 800e750:	7819      	ldrb	r1, [r3, #0]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e758:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f002 f817 	bl	8010790 <USBD_LL_PrepareReceive>
 800e762:	e008      	b.n	800e776 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e764:	4b06      	ldr	r3, [pc, #24]	@ (800e780 <USBD_CDC_ReceivePacket+0x68>)
 800e766:	7819      	ldrb	r1, [r3, #0]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e76e:	2340      	movs	r3, #64	@ 0x40
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f002 f80d 	bl	8010790 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	200000a4 	.word	0x200000a4

0800e784 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	4613      	mov	r3, r2
 800e790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d101      	bne.n	800e79c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e798:	2303      	movs	r3, #3
 800e79a:	e01f      	b.n	800e7dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d003      	beq.n	800e7c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	68ba      	ldr	r2, [r7, #8]
 800e7be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	79fa      	ldrb	r2, [r7, #7]
 800e7ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f001 fe87 	bl	80104e4 <USBD_LL_Init>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3718      	adds	r7, #24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
 800e7ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d101      	bne.n	800e7fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e7f8:	2303      	movs	r3, #3
 800e7fa:	e025      	b.n	800e848 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	683a      	ldr	r2, [r7, #0]
 800e800:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	32ae      	adds	r2, #174	@ 0xae
 800e80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00f      	beq.n	800e838 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	32ae      	adds	r2, #174	@ 0xae
 800e822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e828:	f107 020e 	add.w	r2, r7, #14
 800e82c:	4610      	mov	r0, r2
 800e82e:	4798      	blx	r3
 800e830:	4602      	mov	r2, r0
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e846:	2300      	movs	r3, #0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f001 fe8f 	bl	801057c <USBD_LL_Start>
 800e85e:	4603      	mov	r3, r0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e870:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e872:	4618      	mov	r0, r3
 800e874:	370c      	adds	r7, #12
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b084      	sub	sp, #16
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	460b      	mov	r3, r1
 800e888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e894:	2b00      	cmp	r3, #0
 800e896:	d009      	beq.n	800e8ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	78fa      	ldrb	r2, [r7, #3]
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	4798      	blx	r3
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	460b      	mov	r3, r1
 800e8c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	78fa      	ldrb	r2, [r7, #3]
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	4798      	blx	r3
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e8dc:	2303      	movs	r3, #3
 800e8de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b084      	sub	sp, #16
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e8fa:	6839      	ldr	r1, [r7, #0]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f001 f90c 	bl	800fb1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2201      	movs	r2, #1
 800e906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e910:	461a      	mov	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e91e:	f003 031f 	and.w	r3, r3, #31
 800e922:	2b02      	cmp	r3, #2
 800e924:	d01a      	beq.n	800e95c <USBD_LL_SetupStage+0x72>
 800e926:	2b02      	cmp	r3, #2
 800e928:	d822      	bhi.n	800e970 <USBD_LL_SetupStage+0x86>
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d002      	beq.n	800e934 <USBD_LL_SetupStage+0x4a>
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d00a      	beq.n	800e948 <USBD_LL_SetupStage+0x5e>
 800e932:	e01d      	b.n	800e970 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e93a:	4619      	mov	r1, r3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 fb63 	bl	800f008 <USBD_StdDevReq>
 800e942:	4603      	mov	r3, r0
 800e944:	73fb      	strb	r3, [r7, #15]
      break;
 800e946:	e020      	b.n	800e98a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e94e:	4619      	mov	r1, r3
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 fbcb 	bl	800f0ec <USBD_StdItfReq>
 800e956:	4603      	mov	r3, r0
 800e958:	73fb      	strb	r3, [r7, #15]
      break;
 800e95a:	e016      	b.n	800e98a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e962:	4619      	mov	r1, r3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 fc2d 	bl	800f1c4 <USBD_StdEPReq>
 800e96a:	4603      	mov	r3, r0
 800e96c:	73fb      	strb	r3, [r7, #15]
      break;
 800e96e:	e00c      	b.n	800e98a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e976:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	4619      	mov	r1, r3
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f001 fe5c 	bl	801063c <USBD_LL_StallEP>
 800e984:	4603      	mov	r3, r0
 800e986:	73fb      	strb	r3, [r7, #15]
      break;
 800e988:	bf00      	nop
  }

  return ret;
 800e98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3710      	adds	r7, #16
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	460b      	mov	r3, r1
 800e99e:	607a      	str	r2, [r7, #4]
 800e9a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e9a6:	7afb      	ldrb	r3, [r7, #11]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d16e      	bne.n	800ea8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e9b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e9ba:	2b03      	cmp	r3, #3
 800e9bc:	f040 8098 	bne.w	800eaf0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	689a      	ldr	r2, [r3, #8]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	68db      	ldr	r3, [r3, #12]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d913      	bls.n	800e9f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	689a      	ldr	r2, [r3, #8]
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	1ad2      	subs	r2, r2, r3
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	68da      	ldr	r2, [r3, #12]
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	bf28      	it	cs
 800e9e6:	4613      	movcs	r3, r2
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	6879      	ldr	r1, [r7, #4]
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f001 f994 	bl	800fd1a <USBD_CtlContinueRx>
 800e9f2:	e07d      	b.n	800eaf0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e9fa:	f003 031f 	and.w	r3, r3, #31
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d014      	beq.n	800ea2c <USBD_LL_DataOutStage+0x98>
 800ea02:	2b02      	cmp	r3, #2
 800ea04:	d81d      	bhi.n	800ea42 <USBD_LL_DataOutStage+0xae>
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d002      	beq.n	800ea10 <USBD_LL_DataOutStage+0x7c>
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d003      	beq.n	800ea16 <USBD_LL_DataOutStage+0x82>
 800ea0e:	e018      	b.n	800ea42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ea10:	2300      	movs	r3, #0
 800ea12:	75bb      	strb	r3, [r7, #22]
            break;
 800ea14:	e018      	b.n	800ea48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	4619      	mov	r1, r3
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f000 fa64 	bl	800eeee <USBD_CoreFindIF>
 800ea26:	4603      	mov	r3, r0
 800ea28:	75bb      	strb	r3, [r7, #22]
            break;
 800ea2a:	e00d      	b.n	800ea48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	4619      	mov	r1, r3
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f000 fa66 	bl	800ef08 <USBD_CoreFindEP>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	75bb      	strb	r3, [r7, #22]
            break;
 800ea40:	e002      	b.n	800ea48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ea42:	2300      	movs	r3, #0
 800ea44:	75bb      	strb	r3, [r7, #22]
            break;
 800ea46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ea48:	7dbb      	ldrb	r3, [r7, #22]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d119      	bne.n	800ea82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	2b03      	cmp	r3, #3
 800ea58:	d113      	bne.n	800ea82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ea5a:	7dba      	ldrb	r2, [r7, #22]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	32ae      	adds	r2, #174	@ 0xae
 800ea60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00b      	beq.n	800ea82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ea6a:	7dba      	ldrb	r2, [r7, #22]
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ea72:	7dba      	ldrb	r2, [r7, #22]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	32ae      	adds	r2, #174	@ 0xae
 800ea78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ea82:	68f8      	ldr	r0, [r7, #12]
 800ea84:	f001 f95a 	bl	800fd3c <USBD_CtlSendStatus>
 800ea88:	e032      	b.n	800eaf0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ea8a:	7afb      	ldrb	r3, [r7, #11]
 800ea8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	4619      	mov	r1, r3
 800ea94:	68f8      	ldr	r0, [r7, #12]
 800ea96:	f000 fa37 	bl	800ef08 <USBD_CoreFindEP>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea9e:	7dbb      	ldrb	r3, [r7, #22]
 800eaa0:	2bff      	cmp	r3, #255	@ 0xff
 800eaa2:	d025      	beq.n	800eaf0 <USBD_LL_DataOutStage+0x15c>
 800eaa4:	7dbb      	ldrb	r3, [r7, #22]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d122      	bne.n	800eaf0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b03      	cmp	r3, #3
 800eab4:	d117      	bne.n	800eae6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800eab6:	7dba      	ldrb	r2, [r7, #22]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	32ae      	adds	r2, #174	@ 0xae
 800eabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00f      	beq.n	800eae6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800eac6:	7dba      	ldrb	r2, [r7, #22]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800eace:	7dba      	ldrb	r2, [r7, #22]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	32ae      	adds	r2, #174	@ 0xae
 800ead4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	7afa      	ldrb	r2, [r7, #11]
 800eadc:	4611      	mov	r1, r2
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	4798      	blx	r3
 800eae2:	4603      	mov	r3, r0
 800eae4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800eae6:	7dfb      	ldrb	r3, [r7, #23]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d001      	beq.n	800eaf0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800eaec:	7dfb      	ldrb	r3, [r7, #23]
 800eaee:	e000      	b.n	800eaf2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3718      	adds	r7, #24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b086      	sub	sp, #24
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	60f8      	str	r0, [r7, #12]
 800eb02:	460b      	mov	r3, r1
 800eb04:	607a      	str	r2, [r7, #4]
 800eb06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800eb08:	7afb      	ldrb	r3, [r7, #11]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d16f      	bne.n	800ebee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3314      	adds	r3, #20
 800eb12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800eb1a:	2b02      	cmp	r3, #2
 800eb1c:	d15a      	bne.n	800ebd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	689a      	ldr	r2, [r3, #8]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d914      	bls.n	800eb54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	689a      	ldr	r2, [r3, #8]
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	68db      	ldr	r3, [r3, #12]
 800eb32:	1ad2      	subs	r2, r2, r3
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	6879      	ldr	r1, [r7, #4]
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f001 f8bc 	bl	800fcbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb46:	2300      	movs	r3, #0
 800eb48:	2200      	movs	r2, #0
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	68f8      	ldr	r0, [r7, #12]
 800eb4e:	f001 fe1f 	bl	8010790 <USBD_LL_PrepareReceive>
 800eb52:	e03f      	b.n	800ebd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	68da      	ldr	r2, [r3, #12]
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d11c      	bne.n	800eb9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	685a      	ldr	r2, [r3, #4]
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d316      	bcc.n	800eb9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	685a      	ldr	r2, [r3, #4]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d20f      	bcs.n	800eb9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f001 f89d 	bl	800fcbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2100      	movs	r1, #0
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f001 fdfc 	bl	8010790 <USBD_LL_PrepareReceive>
 800eb98:	e01c      	b.n	800ebd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d10f      	bne.n	800ebc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d009      	beq.n	800ebc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebc0:	68db      	ldr	r3, [r3, #12]
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebc6:	2180      	movs	r1, #128	@ 0x80
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f001 fd37 	bl	801063c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f001 f8c7 	bl	800fd62 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d03a      	beq.n	800ec54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	f7ff fe42 	bl	800e868 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ebec:	e032      	b.n	800ec54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ebee:	7afb      	ldrb	r3, [r7, #11]
 800ebf0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f000 f985 	bl	800ef08 <USBD_CoreFindEP>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec02:	7dfb      	ldrb	r3, [r7, #23]
 800ec04:	2bff      	cmp	r3, #255	@ 0xff
 800ec06:	d025      	beq.n	800ec54 <USBD_LL_DataInStage+0x15a>
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d122      	bne.n	800ec54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d11c      	bne.n	800ec54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ec1a:	7dfa      	ldrb	r2, [r7, #23]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	32ae      	adds	r2, #174	@ 0xae
 800ec20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec24:	695b      	ldr	r3, [r3, #20]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d014      	beq.n	800ec54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ec2a:	7dfa      	ldrb	r2, [r7, #23]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ec32:	7dfa      	ldrb	r2, [r7, #23]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	32ae      	adds	r2, #174	@ 0xae
 800ec38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec3c:	695b      	ldr	r3, [r3, #20]
 800ec3e:	7afa      	ldrb	r2, [r7, #11]
 800ec40:	4611      	mov	r1, r2
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	4798      	blx	r3
 800ec46:	4603      	mov	r3, r0
 800ec48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ec4a:	7dbb      	ldrb	r3, [r7, #22]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d001      	beq.n	800ec54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ec50:	7dbb      	ldrb	r3, [r7, #22]
 800ec52:	e000      	b.n	800ec56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ec54:	2300      	movs	r3, #0
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b084      	sub	sp, #16
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d014      	beq.n	800ecc4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00e      	beq.n	800ecc4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	6852      	ldr	r2, [r2, #4]
 800ecb2:	b2d2      	uxtb	r2, r2
 800ecb4:	4611      	mov	r1, r2
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	4798      	blx	r3
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ecc4:	2340      	movs	r3, #64	@ 0x40
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	2100      	movs	r1, #0
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f001 fc71 	bl	80105b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2240      	movs	r2, #64	@ 0x40
 800ecdc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ece0:	2340      	movs	r3, #64	@ 0x40
 800ece2:	2200      	movs	r2, #0
 800ece4:	2180      	movs	r1, #128	@ 0x80
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f001 fc63 	bl	80105b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2240      	movs	r2, #64	@ 0x40
 800ecf6:	621a      	str	r2, [r3, #32]

  return ret;
 800ecf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ed02:	b480      	push	{r7}
 800ed04:	b083      	sub	sp, #12
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	78fa      	ldrb	r2, [r7, #3]
 800ed12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	370c      	adds	r7, #12
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ed22:	b480      	push	{r7}
 800ed24:	b083      	sub	sp, #12
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d006      	beq.n	800ed44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2204      	movs	r2, #4
 800ed48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	370c      	adds	r7, #12
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr

0800ed5a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ed5a:	b480      	push	{r7}
 800ed5c:	b083      	sub	sp, #12
 800ed5e:	af00      	add	r7, sp, #0
 800ed60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	2b04      	cmp	r3, #4
 800ed6c:	d106      	bne.n	800ed7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ed7c:	2300      	movs	r3, #0
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	370c      	adds	r7, #12
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b03      	cmp	r3, #3
 800ed9c:	d110      	bne.n	800edc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00b      	beq.n	800edc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d005      	beq.n	800edc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edba:	69db      	ldr	r3, [r3, #28]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800edc0:	2300      	movs	r3, #0
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3708      	adds	r7, #8
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b082      	sub	sp, #8
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
 800edd2:	460b      	mov	r3, r1
 800edd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	32ae      	adds	r2, #174	@ 0xae
 800ede0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d101      	bne.n	800edec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ede8:	2303      	movs	r3, #3
 800edea:	e01c      	b.n	800ee26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	2b03      	cmp	r3, #3
 800edf6:	d115      	bne.n	800ee24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	32ae      	adds	r2, #174	@ 0xae
 800ee02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee06:	6a1b      	ldr	r3, [r3, #32]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00b      	beq.n	800ee24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	32ae      	adds	r2, #174	@ 0xae
 800ee16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee1a:	6a1b      	ldr	r3, [r3, #32]
 800ee1c:	78fa      	ldrb	r2, [r7, #3]
 800ee1e:	4611      	mov	r1, r2
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b082      	sub	sp, #8
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	460b      	mov	r3, r1
 800ee38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	32ae      	adds	r2, #174	@ 0xae
 800ee44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d101      	bne.n	800ee50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	e01c      	b.n	800ee8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b03      	cmp	r3, #3
 800ee5a:	d115      	bne.n	800ee88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	32ae      	adds	r2, #174	@ 0xae
 800ee66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00b      	beq.n	800ee88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	32ae      	adds	r2, #174	@ 0xae
 800ee7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee80:	78fa      	ldrb	r2, [r7, #3]
 800ee82:	4611      	mov	r1, r2
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee88:	2300      	movs	r3, #0
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3708      	adds	r7, #8
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ee92:	b480      	push	{r7}
 800ee94:	b083      	sub	sp, #12
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	370c      	adds	r7, #12
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d00e      	beq.n	800eee4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	6852      	ldr	r2, [r2, #4]
 800eed2:	b2d2      	uxtb	r2, r2
 800eed4:	4611      	mov	r1, r2
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	4798      	blx	r3
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d001      	beq.n	800eee4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800eee0:	2303      	movs	r3, #3
 800eee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eeee:	b480      	push	{r7}
 800eef0:	b083      	sub	sp, #12
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
 800eef6:	460b      	mov	r3, r1
 800eef8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eefa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	370c      	adds	r7, #12
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b086      	sub	sp, #24
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ef36:	2300      	movs	r3, #0
 800ef38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	885b      	ldrh	r3, [r3, #2]
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	7812      	ldrb	r2, [r2, #0]
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d91f      	bls.n	800ef88 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ef4e:	e013      	b.n	800ef78 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ef50:	f107 030a 	add.w	r3, r7, #10
 800ef54:	4619      	mov	r1, r3
 800ef56:	6978      	ldr	r0, [r7, #20]
 800ef58:	f000 f81b 	bl	800ef92 <USBD_GetNextDesc>
 800ef5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	785b      	ldrb	r3, [r3, #1]
 800ef62:	2b05      	cmp	r3, #5
 800ef64:	d108      	bne.n	800ef78 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ef6a:	693b      	ldr	r3, [r7, #16]
 800ef6c:	789b      	ldrb	r3, [r3, #2]
 800ef6e:	78fa      	ldrb	r2, [r7, #3]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d008      	beq.n	800ef86 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ef74:	2300      	movs	r3, #0
 800ef76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	885b      	ldrh	r3, [r3, #2]
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	897b      	ldrh	r3, [r7, #10]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d8e5      	bhi.n	800ef50 <USBD_GetEpDesc+0x2e>
 800ef84:	e000      	b.n	800ef88 <USBD_GetEpDesc+0x66>
          break;
 800ef86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ef88:	693b      	ldr	r3, [r7, #16]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3718      	adds	r7, #24
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef92:	b480      	push	{r7}
 800ef94:	b085      	sub	sp, #20
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	7812      	ldrb	r2, [r2, #0]
 800efa8:	4413      	add	r3, r2
 800efaa:	b29a      	uxth	r2, r3
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	461a      	mov	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4413      	add	r3, r2
 800efba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800efbc:	68fb      	ldr	r3, [r7, #12]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800efca:	b480      	push	{r7}
 800efcc:	b087      	sub	sp, #28
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	3301      	adds	r3, #1
 800efe0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800efe8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	b21a      	sxth	r2, r3
 800eff0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eff4:	4313      	orrs	r3, r2
 800eff6:	b21b      	sxth	r3, r3
 800eff8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800effa:	89fb      	ldrh	r3, [r7, #14]
}
 800effc:	4618      	mov	r0, r3
 800effe:	371c      	adds	r7, #28
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f012:	2300      	movs	r3, #0
 800f014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f01e:	2b40      	cmp	r3, #64	@ 0x40
 800f020:	d005      	beq.n	800f02e <USBD_StdDevReq+0x26>
 800f022:	2b40      	cmp	r3, #64	@ 0x40
 800f024:	d857      	bhi.n	800f0d6 <USBD_StdDevReq+0xce>
 800f026:	2b00      	cmp	r3, #0
 800f028:	d00f      	beq.n	800f04a <USBD_StdDevReq+0x42>
 800f02a:	2b20      	cmp	r3, #32
 800f02c:	d153      	bne.n	800f0d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	32ae      	adds	r2, #174	@ 0xae
 800f038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f03c:	689b      	ldr	r3, [r3, #8]
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	4798      	blx	r3
 800f044:	4603      	mov	r3, r0
 800f046:	73fb      	strb	r3, [r7, #15]
      break;
 800f048:	e04a      	b.n	800f0e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	2b09      	cmp	r3, #9
 800f050:	d83b      	bhi.n	800f0ca <USBD_StdDevReq+0xc2>
 800f052:	a201      	add	r2, pc, #4	@ (adr r2, 800f058 <USBD_StdDevReq+0x50>)
 800f054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f058:	0800f0ad 	.word	0x0800f0ad
 800f05c:	0800f0c1 	.word	0x0800f0c1
 800f060:	0800f0cb 	.word	0x0800f0cb
 800f064:	0800f0b7 	.word	0x0800f0b7
 800f068:	0800f0cb 	.word	0x0800f0cb
 800f06c:	0800f08b 	.word	0x0800f08b
 800f070:	0800f081 	.word	0x0800f081
 800f074:	0800f0cb 	.word	0x0800f0cb
 800f078:	0800f0a3 	.word	0x0800f0a3
 800f07c:	0800f095 	.word	0x0800f095
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fa3c 	bl	800f500 <USBD_GetDescriptor>
          break;
 800f088:	e024      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 fba1 	bl	800f7d4 <USBD_SetAddress>
          break;
 800f092:	e01f      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 fbe0 	bl	800f85c <USBD_SetConfig>
 800f09c:	4603      	mov	r3, r0
 800f09e:	73fb      	strb	r3, [r7, #15]
          break;
 800f0a0:	e018      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fc83 	bl	800f9b0 <USBD_GetConfig>
          break;
 800f0aa:	e013      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f0ac:	6839      	ldr	r1, [r7, #0]
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f000 fcb4 	bl	800fa1c <USBD_GetStatus>
          break;
 800f0b4:	e00e      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f0b6:	6839      	ldr	r1, [r7, #0]
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 fce3 	bl	800fa84 <USBD_SetFeature>
          break;
 800f0be:	e009      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 fd07 	bl	800fad6 <USBD_ClrFeature>
          break;
 800f0c8:	e004      	b.n	800f0d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f0ca:	6839      	ldr	r1, [r7, #0]
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 fd5e 	bl	800fb8e <USBD_CtlError>
          break;
 800f0d2:	bf00      	nop
      }
      break;
 800f0d4:	e004      	b.n	800f0e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fd58 	bl	800fb8e <USBD_CtlError>
      break;
 800f0de:	bf00      	nop
  }

  return ret;
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop

0800f0ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f102:	2b40      	cmp	r3, #64	@ 0x40
 800f104:	d005      	beq.n	800f112 <USBD_StdItfReq+0x26>
 800f106:	2b40      	cmp	r3, #64	@ 0x40
 800f108:	d852      	bhi.n	800f1b0 <USBD_StdItfReq+0xc4>
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <USBD_StdItfReq+0x26>
 800f10e:	2b20      	cmp	r3, #32
 800f110:	d14e      	bne.n	800f1b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	3b01      	subs	r3, #1
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d840      	bhi.n	800f1a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	889b      	ldrh	r3, [r3, #4]
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b01      	cmp	r3, #1
 800f128:	d836      	bhi.n	800f198 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	889b      	ldrh	r3, [r3, #4]
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	4619      	mov	r1, r3
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff fedb 	bl	800eeee <USBD_CoreFindIF>
 800f138:	4603      	mov	r3, r0
 800f13a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f13c:	7bbb      	ldrb	r3, [r7, #14]
 800f13e:	2bff      	cmp	r3, #255	@ 0xff
 800f140:	d01d      	beq.n	800f17e <USBD_StdItfReq+0x92>
 800f142:	7bbb      	ldrb	r3, [r7, #14]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d11a      	bne.n	800f17e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f148:	7bba      	ldrb	r2, [r7, #14]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	32ae      	adds	r2, #174	@ 0xae
 800f14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f152:	689b      	ldr	r3, [r3, #8]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00f      	beq.n	800f178 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f158:	7bba      	ldrb	r2, [r7, #14]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f160:	7bba      	ldrb	r2, [r7, #14]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	32ae      	adds	r2, #174	@ 0xae
 800f166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	4798      	blx	r3
 800f172:	4603      	mov	r3, r0
 800f174:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f176:	e004      	b.n	800f182 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f178:	2303      	movs	r3, #3
 800f17a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f17c:	e001      	b.n	800f182 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f17e:	2303      	movs	r3, #3
 800f180:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	88db      	ldrh	r3, [r3, #6]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d110      	bne.n	800f1ac <USBD_StdItfReq+0xc0>
 800f18a:	7bfb      	ldrb	r3, [r7, #15]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10d      	bne.n	800f1ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 fdd3 	bl	800fd3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f196:	e009      	b.n	800f1ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fcf7 	bl	800fb8e <USBD_CtlError>
          break;
 800f1a0:	e004      	b.n	800f1ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fcf2 	bl	800fb8e <USBD_CtlError>
          break;
 800f1aa:	e000      	b.n	800f1ae <USBD_StdItfReq+0xc2>
          break;
 800f1ac:	bf00      	nop
      }
      break;
 800f1ae:	e004      	b.n	800f1ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f000 fceb 	bl	800fb8e <USBD_CtlError>
      break;
 800f1b8:	bf00      	nop
  }

  return ret;
 800f1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	889b      	ldrh	r3, [r3, #4]
 800f1d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1e0:	2b40      	cmp	r3, #64	@ 0x40
 800f1e2:	d007      	beq.n	800f1f4 <USBD_StdEPReq+0x30>
 800f1e4:	2b40      	cmp	r3, #64	@ 0x40
 800f1e6:	f200 817f 	bhi.w	800f4e8 <USBD_StdEPReq+0x324>
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d02a      	beq.n	800f244 <USBD_StdEPReq+0x80>
 800f1ee:	2b20      	cmp	r3, #32
 800f1f0:	f040 817a 	bne.w	800f4e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	6878      	ldr	r0, [r7, #4]
 800f1fa:	f7ff fe85 	bl	800ef08 <USBD_CoreFindEP>
 800f1fe:	4603      	mov	r3, r0
 800f200:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f202:	7b7b      	ldrb	r3, [r7, #13]
 800f204:	2bff      	cmp	r3, #255	@ 0xff
 800f206:	f000 8174 	beq.w	800f4f2 <USBD_StdEPReq+0x32e>
 800f20a:	7b7b      	ldrb	r3, [r7, #13]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	f040 8170 	bne.w	800f4f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f212:	7b7a      	ldrb	r2, [r7, #13]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f21a:	7b7a      	ldrb	r2, [r7, #13]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	32ae      	adds	r2, #174	@ 0xae
 800f220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f224:	689b      	ldr	r3, [r3, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	f000 8163 	beq.w	800f4f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f22c:	7b7a      	ldrb	r2, [r7, #13]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	32ae      	adds	r2, #174	@ 0xae
 800f232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	6839      	ldr	r1, [r7, #0]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	4798      	blx	r3
 800f23e:	4603      	mov	r3, r0
 800f240:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f242:	e156      	b.n	800f4f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	785b      	ldrb	r3, [r3, #1]
 800f248:	2b03      	cmp	r3, #3
 800f24a:	d008      	beq.n	800f25e <USBD_StdEPReq+0x9a>
 800f24c:	2b03      	cmp	r3, #3
 800f24e:	f300 8145 	bgt.w	800f4dc <USBD_StdEPReq+0x318>
 800f252:	2b00      	cmp	r3, #0
 800f254:	f000 809b 	beq.w	800f38e <USBD_StdEPReq+0x1ca>
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d03c      	beq.n	800f2d6 <USBD_StdEPReq+0x112>
 800f25c:	e13e      	b.n	800f4dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b02      	cmp	r3, #2
 800f268:	d002      	beq.n	800f270 <USBD_StdEPReq+0xac>
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d016      	beq.n	800f29c <USBD_StdEPReq+0xd8>
 800f26e:	e02c      	b.n	800f2ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f270:	7bbb      	ldrb	r3, [r7, #14]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d00d      	beq.n	800f292 <USBD_StdEPReq+0xce>
 800f276:	7bbb      	ldrb	r3, [r7, #14]
 800f278:	2b80      	cmp	r3, #128	@ 0x80
 800f27a:	d00a      	beq.n	800f292 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f27c:	7bbb      	ldrb	r3, [r7, #14]
 800f27e:	4619      	mov	r1, r3
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f001 f9db 	bl	801063c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f286:	2180      	movs	r1, #128	@ 0x80
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f001 f9d7 	bl	801063c <USBD_LL_StallEP>
 800f28e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f290:	e020      	b.n	800f2d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 fc7a 	bl	800fb8e <USBD_CtlError>
              break;
 800f29a:	e01b      	b.n	800f2d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	885b      	ldrh	r3, [r3, #2]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d10e      	bne.n	800f2c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f2a4:	7bbb      	ldrb	r3, [r7, #14]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00b      	beq.n	800f2c2 <USBD_StdEPReq+0xfe>
 800f2aa:	7bbb      	ldrb	r3, [r7, #14]
 800f2ac:	2b80      	cmp	r3, #128	@ 0x80
 800f2ae:	d008      	beq.n	800f2c2 <USBD_StdEPReq+0xfe>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	88db      	ldrh	r3, [r3, #6]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d104      	bne.n	800f2c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2b8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f001 f9bd 	bl	801063c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 fd3a 	bl	800fd3c <USBD_CtlSendStatus>

              break;
 800f2c8:	e004      	b.n	800f2d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fc5e 	bl	800fb8e <USBD_CtlError>
              break;
 800f2d2:	bf00      	nop
          }
          break;
 800f2d4:	e107      	b.n	800f4e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d002      	beq.n	800f2e8 <USBD_StdEPReq+0x124>
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d016      	beq.n	800f314 <USBD_StdEPReq+0x150>
 800f2e6:	e04b      	b.n	800f380 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00d      	beq.n	800f30a <USBD_StdEPReq+0x146>
 800f2ee:	7bbb      	ldrb	r3, [r7, #14]
 800f2f0:	2b80      	cmp	r3, #128	@ 0x80
 800f2f2:	d00a      	beq.n	800f30a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2f4:	7bbb      	ldrb	r3, [r7, #14]
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f001 f99f 	bl	801063c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2fe:	2180      	movs	r1, #128	@ 0x80
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f001 f99b 	bl	801063c <USBD_LL_StallEP>
 800f306:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f308:	e040      	b.n	800f38c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f30a:	6839      	ldr	r1, [r7, #0]
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fc3e 	bl	800fb8e <USBD_CtlError>
              break;
 800f312:	e03b      	b.n	800f38c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	885b      	ldrh	r3, [r3, #2]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d136      	bne.n	800f38a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f31c:	7bbb      	ldrb	r3, [r7, #14]
 800f31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f326:	7bbb      	ldrb	r3, [r7, #14]
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f001 f9a5 	bl	801067a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fd03 	bl	800fd3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff fde4 	bl	800ef08 <USBD_CoreFindEP>
 800f340:	4603      	mov	r3, r0
 800f342:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f344:	7b7b      	ldrb	r3, [r7, #13]
 800f346:	2bff      	cmp	r3, #255	@ 0xff
 800f348:	d01f      	beq.n	800f38a <USBD_StdEPReq+0x1c6>
 800f34a:	7b7b      	ldrb	r3, [r7, #13]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d11c      	bne.n	800f38a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f350:	7b7a      	ldrb	r2, [r7, #13]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f358:	7b7a      	ldrb	r2, [r7, #13]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	32ae      	adds	r2, #174	@ 0xae
 800f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d010      	beq.n	800f38a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f368:	7b7a      	ldrb	r2, [r7, #13]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	32ae      	adds	r2, #174	@ 0xae
 800f36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	4798      	blx	r3
 800f37a:	4603      	mov	r3, r0
 800f37c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f37e:	e004      	b.n	800f38a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 fc03 	bl	800fb8e <USBD_CtlError>
              break;
 800f388:	e000      	b.n	800f38c <USBD_StdEPReq+0x1c8>
              break;
 800f38a:	bf00      	nop
          }
          break;
 800f38c:	e0ab      	b.n	800f4e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b02      	cmp	r3, #2
 800f398:	d002      	beq.n	800f3a0 <USBD_StdEPReq+0x1dc>
 800f39a:	2b03      	cmp	r3, #3
 800f39c:	d032      	beq.n	800f404 <USBD_StdEPReq+0x240>
 800f39e:	e097      	b.n	800f4d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3a0:	7bbb      	ldrb	r3, [r7, #14]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d007      	beq.n	800f3b6 <USBD_StdEPReq+0x1f2>
 800f3a6:	7bbb      	ldrb	r3, [r7, #14]
 800f3a8:	2b80      	cmp	r3, #128	@ 0x80
 800f3aa:	d004      	beq.n	800f3b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 fbed 	bl	800fb8e <USBD_CtlError>
                break;
 800f3b4:	e091      	b.n	800f4da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	da0b      	bge.n	800f3d6 <USBD_StdEPReq+0x212>
 800f3be:	7bbb      	ldrb	r3, [r7, #14]
 800f3c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	4413      	add	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	3310      	adds	r3, #16
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	e00b      	b.n	800f3ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3d6:	7bbb      	ldrb	r3, [r7, #14]
 800f3d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3dc:	4613      	mov	r3, r2
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4413      	add	r3, r2
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fc43 	bl	800fc88 <USBD_CtlSendData>
              break;
 800f402:	e06a      	b.n	800f4da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	da11      	bge.n	800f430 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f40c:	7bbb      	ldrb	r3, [r7, #14]
 800f40e:	f003 020f 	and.w	r2, r3, #15
 800f412:	6879      	ldr	r1, [r7, #4]
 800f414:	4613      	mov	r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	440b      	add	r3, r1
 800f41e:	3324      	adds	r3, #36	@ 0x24
 800f420:	881b      	ldrh	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d117      	bne.n	800f456 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fbb0 	bl	800fb8e <USBD_CtlError>
                  break;
 800f42e:	e054      	b.n	800f4da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f430:	7bbb      	ldrb	r3, [r7, #14]
 800f432:	f003 020f 	and.w	r2, r3, #15
 800f436:	6879      	ldr	r1, [r7, #4]
 800f438:	4613      	mov	r3, r2
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4413      	add	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	440b      	add	r3, r1
 800f442:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d104      	bne.n	800f456 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f44c:	6839      	ldr	r1, [r7, #0]
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 fb9d 	bl	800fb8e <USBD_CtlError>
                  break;
 800f454:	e041      	b.n	800f4da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	da0b      	bge.n	800f476 <USBD_StdEPReq+0x2b2>
 800f45e:	7bbb      	ldrb	r3, [r7, #14]
 800f460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f464:	4613      	mov	r3, r2
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	3310      	adds	r3, #16
 800f46e:	687a      	ldr	r2, [r7, #4]
 800f470:	4413      	add	r3, r2
 800f472:	3304      	adds	r3, #4
 800f474:	e00b      	b.n	800f48e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f476:	7bbb      	ldrb	r3, [r7, #14]
 800f478:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f47c:	4613      	mov	r3, r2
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	4413      	add	r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	4413      	add	r3, r2
 800f48c:	3304      	adds	r3, #4
 800f48e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <USBD_StdEPReq+0x2d8>
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	2b80      	cmp	r3, #128	@ 0x80
 800f49a:	d103      	bne.n	800f4a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	e00e      	b.n	800f4c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f4a4:	7bbb      	ldrb	r3, [r7, #14]
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f001 f905 	bl	80106b8 <USBD_LL_IsStallEP>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d003      	beq.n	800f4bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	601a      	str	r2, [r3, #0]
 800f4ba:	e002      	b.n	800f4c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	2202      	movs	r2, #2
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fbdd 	bl	800fc88 <USBD_CtlSendData>
              break;
 800f4ce:	e004      	b.n	800f4da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f4d0:	6839      	ldr	r1, [r7, #0]
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fb5b 	bl	800fb8e <USBD_CtlError>
              break;
 800f4d8:	bf00      	nop
          }
          break;
 800f4da:	e004      	b.n	800f4e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f4dc:	6839      	ldr	r1, [r7, #0]
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fb55 	bl	800fb8e <USBD_CtlError>
          break;
 800f4e4:	bf00      	nop
      }
      break;
 800f4e6:	e005      	b.n	800f4f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fb4f 	bl	800fb8e <USBD_CtlError>
      break;
 800f4f0:	e000      	b.n	800f4f4 <USBD_StdEPReq+0x330>
      break;
 800f4f2:	bf00      	nop
  }

  return ret;
 800f4f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
	...

0800f500 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f50e:	2300      	movs	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f512:	2300      	movs	r3, #0
 800f514:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	885b      	ldrh	r3, [r3, #2]
 800f51a:	0a1b      	lsrs	r3, r3, #8
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	3b01      	subs	r3, #1
 800f520:	2b06      	cmp	r3, #6
 800f522:	f200 8128 	bhi.w	800f776 <USBD_GetDescriptor+0x276>
 800f526:	a201      	add	r2, pc, #4	@ (adr r2, 800f52c <USBD_GetDescriptor+0x2c>)
 800f528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f52c:	0800f549 	.word	0x0800f549
 800f530:	0800f561 	.word	0x0800f561
 800f534:	0800f5a1 	.word	0x0800f5a1
 800f538:	0800f777 	.word	0x0800f777
 800f53c:	0800f777 	.word	0x0800f777
 800f540:	0800f717 	.word	0x0800f717
 800f544:	0800f743 	.word	0x0800f743
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	7c12      	ldrb	r2, [r2, #16]
 800f554:	f107 0108 	add.w	r1, r7, #8
 800f558:	4610      	mov	r0, r2
 800f55a:	4798      	blx	r3
 800f55c:	60f8      	str	r0, [r7, #12]
      break;
 800f55e:	e112      	b.n	800f786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	7c1b      	ldrb	r3, [r3, #16]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10d      	bne.n	800f584 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f570:	f107 0208 	add.w	r2, r7, #8
 800f574:	4610      	mov	r0, r2
 800f576:	4798      	blx	r3
 800f578:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3301      	adds	r3, #1
 800f57e:	2202      	movs	r2, #2
 800f580:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f582:	e100      	b.n	800f786 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f58c:	f107 0208 	add.w	r2, r7, #8
 800f590:	4610      	mov	r0, r2
 800f592:	4798      	blx	r3
 800f594:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	3301      	adds	r3, #1
 800f59a:	2202      	movs	r2, #2
 800f59c:	701a      	strb	r2, [r3, #0]
      break;
 800f59e:	e0f2      	b.n	800f786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	885b      	ldrh	r3, [r3, #2]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	2b05      	cmp	r3, #5
 800f5a8:	f200 80ac 	bhi.w	800f704 <USBD_GetDescriptor+0x204>
 800f5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f5b4 <USBD_GetDescriptor+0xb4>)
 800f5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5b2:	bf00      	nop
 800f5b4:	0800f5cd 	.word	0x0800f5cd
 800f5b8:	0800f601 	.word	0x0800f601
 800f5bc:	0800f635 	.word	0x0800f635
 800f5c0:	0800f669 	.word	0x0800f669
 800f5c4:	0800f69d 	.word	0x0800f69d
 800f5c8:	0800f6d1 	.word	0x0800f6d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d00b      	beq.n	800f5f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	7c12      	ldrb	r2, [r2, #16]
 800f5e4:	f107 0108 	add.w	r1, r7, #8
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	4798      	blx	r3
 800f5ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5ee:	e091      	b.n	800f714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 facb 	bl	800fb8e <USBD_CtlError>
            err++;
 800f5f8:	7afb      	ldrb	r3, [r7, #11]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	72fb      	strb	r3, [r7, #11]
          break;
 800f5fe:	e089      	b.n	800f714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f606:	689b      	ldr	r3, [r3, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00b      	beq.n	800f624 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	7c12      	ldrb	r2, [r2, #16]
 800f618:	f107 0108 	add.w	r1, r7, #8
 800f61c:	4610      	mov	r0, r2
 800f61e:	4798      	blx	r3
 800f620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f622:	e077      	b.n	800f714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 fab1 	bl	800fb8e <USBD_CtlError>
            err++;
 800f62c:	7afb      	ldrb	r3, [r7, #11]
 800f62e:	3301      	adds	r3, #1
 800f630:	72fb      	strb	r3, [r7, #11]
          break;
 800f632:	e06f      	b.n	800f714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00b      	beq.n	800f658 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	687a      	ldr	r2, [r7, #4]
 800f64a:	7c12      	ldrb	r2, [r2, #16]
 800f64c:	f107 0108 	add.w	r1, r7, #8
 800f650:	4610      	mov	r0, r2
 800f652:	4798      	blx	r3
 800f654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f656:	e05d      	b.n	800f714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 fa97 	bl	800fb8e <USBD_CtlError>
            err++;
 800f660:	7afb      	ldrb	r3, [r7, #11]
 800f662:	3301      	adds	r3, #1
 800f664:	72fb      	strb	r3, [r7, #11]
          break;
 800f666:	e055      	b.n	800f714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f66e:	691b      	ldr	r3, [r3, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00b      	beq.n	800f68c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f67a:	691b      	ldr	r3, [r3, #16]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	7c12      	ldrb	r2, [r2, #16]
 800f680:	f107 0108 	add.w	r1, r7, #8
 800f684:	4610      	mov	r0, r2
 800f686:	4798      	blx	r3
 800f688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f68a:	e043      	b.n	800f714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 fa7d 	bl	800fb8e <USBD_CtlError>
            err++;
 800f694:	7afb      	ldrb	r3, [r7, #11]
 800f696:	3301      	adds	r3, #1
 800f698:	72fb      	strb	r3, [r7, #11]
          break;
 800f69a:	e03b      	b.n	800f714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6a2:	695b      	ldr	r3, [r3, #20]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00b      	beq.n	800f6c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6ae:	695b      	ldr	r3, [r3, #20]
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	7c12      	ldrb	r2, [r2, #16]
 800f6b4:	f107 0108 	add.w	r1, r7, #8
 800f6b8:	4610      	mov	r0, r2
 800f6ba:	4798      	blx	r3
 800f6bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6be:	e029      	b.n	800f714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fa63 	bl	800fb8e <USBD_CtlError>
            err++;
 800f6c8:	7afb      	ldrb	r3, [r7, #11]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f6ce:	e021      	b.n	800f714 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6d6:	699b      	ldr	r3, [r3, #24]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d00b      	beq.n	800f6f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f6e2:	699b      	ldr	r3, [r3, #24]
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	7c12      	ldrb	r2, [r2, #16]
 800f6e8:	f107 0108 	add.w	r1, r7, #8
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4798      	blx	r3
 800f6f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6f2:	e00f      	b.n	800f714 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 fa49 	bl	800fb8e <USBD_CtlError>
            err++;
 800f6fc:	7afb      	ldrb	r3, [r7, #11]
 800f6fe:	3301      	adds	r3, #1
 800f700:	72fb      	strb	r3, [r7, #11]
          break;
 800f702:	e007      	b.n	800f714 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 fa41 	bl	800fb8e <USBD_CtlError>
          err++;
 800f70c:	7afb      	ldrb	r3, [r7, #11]
 800f70e:	3301      	adds	r3, #1
 800f710:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f712:	bf00      	nop
      }
      break;
 800f714:	e037      	b.n	800f786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7c1b      	ldrb	r3, [r3, #16]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d109      	bne.n	800f732 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f726:	f107 0208 	add.w	r2, r7, #8
 800f72a:	4610      	mov	r0, r2
 800f72c:	4798      	blx	r3
 800f72e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f730:	e029      	b.n	800f786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f732:	6839      	ldr	r1, [r7, #0]
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 fa2a 	bl	800fb8e <USBD_CtlError>
        err++;
 800f73a:	7afb      	ldrb	r3, [r7, #11]
 800f73c:	3301      	adds	r3, #1
 800f73e:	72fb      	strb	r3, [r7, #11]
      break;
 800f740:	e021      	b.n	800f786 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	7c1b      	ldrb	r3, [r3, #16]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d10d      	bne.n	800f766 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f752:	f107 0208 	add.w	r2, r7, #8
 800f756:	4610      	mov	r0, r2
 800f758:	4798      	blx	r3
 800f75a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	3301      	adds	r3, #1
 800f760:	2207      	movs	r2, #7
 800f762:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f764:	e00f      	b.n	800f786 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f766:	6839      	ldr	r1, [r7, #0]
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f000 fa10 	bl	800fb8e <USBD_CtlError>
        err++;
 800f76e:	7afb      	ldrb	r3, [r7, #11]
 800f770:	3301      	adds	r3, #1
 800f772:	72fb      	strb	r3, [r7, #11]
      break;
 800f774:	e007      	b.n	800f786 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fa08 	bl	800fb8e <USBD_CtlError>
      err++;
 800f77e:	7afb      	ldrb	r3, [r7, #11]
 800f780:	3301      	adds	r3, #1
 800f782:	72fb      	strb	r3, [r7, #11]
      break;
 800f784:	bf00      	nop
  }

  if (err != 0U)
 800f786:	7afb      	ldrb	r3, [r7, #11]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d11e      	bne.n	800f7ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	88db      	ldrh	r3, [r3, #6]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d016      	beq.n	800f7c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f794:	893b      	ldrh	r3, [r7, #8]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d00e      	beq.n	800f7b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	88da      	ldrh	r2, [r3, #6]
 800f79e:	893b      	ldrh	r3, [r7, #8]
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	bf28      	it	cs
 800f7a4:	4613      	movcs	r3, r2
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7aa:	893b      	ldrh	r3, [r7, #8]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	68f9      	ldr	r1, [r7, #12]
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f000 fa69 	bl	800fc88 <USBD_CtlSendData>
 800f7b6:	e009      	b.n	800f7cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f000 f9e7 	bl	800fb8e <USBD_CtlError>
 800f7c0:	e004      	b.n	800f7cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 faba 	bl	800fd3c <USBD_CtlSendStatus>
 800f7c8:	e000      	b.n	800f7cc <USBD_GetDescriptor+0x2cc>
    return;
 800f7ca:	bf00      	nop
  }
}
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop

0800f7d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	889b      	ldrh	r3, [r3, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d131      	bne.n	800f84a <USBD_SetAddress+0x76>
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	88db      	ldrh	r3, [r3, #6]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d12d      	bne.n	800f84a <USBD_SetAddress+0x76>
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	885b      	ldrh	r3, [r3, #2]
 800f7f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f7f4:	d829      	bhi.n	800f84a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	885b      	ldrh	r3, [r3, #2]
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	2b03      	cmp	r3, #3
 800f80c:	d104      	bne.n	800f818 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 f9bc 	bl	800fb8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f816:	e01d      	b.n	800f854 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	7bfa      	ldrb	r2, [r7, #15]
 800f81c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	4619      	mov	r1, r3
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 ff73 	bl	8010710 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 fa86 	bl	800fd3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d004      	beq.n	800f840 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2202      	movs	r2, #2
 800f83a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f83e:	e009      	b.n	800f854 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f848:	e004      	b.n	800f854 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f84a:	6839      	ldr	r1, [r7, #0]
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f000 f99e 	bl	800fb8e <USBD_CtlError>
  }
}
 800f852:	bf00      	nop
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f866:	2300      	movs	r3, #0
 800f868:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	885b      	ldrh	r3, [r3, #2]
 800f86e:	b2da      	uxtb	r2, r3
 800f870:	4b4e      	ldr	r3, [pc, #312]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f872:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f874:	4b4d      	ldr	r3, [pc, #308]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d905      	bls.n	800f888 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f87c:	6839      	ldr	r1, [r7, #0]
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f985 	bl	800fb8e <USBD_CtlError>
    return USBD_FAIL;
 800f884:	2303      	movs	r3, #3
 800f886:	e08c      	b.n	800f9a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b02      	cmp	r3, #2
 800f892:	d002      	beq.n	800f89a <USBD_SetConfig+0x3e>
 800f894:	2b03      	cmp	r3, #3
 800f896:	d029      	beq.n	800f8ec <USBD_SetConfig+0x90>
 800f898:	e075      	b.n	800f986 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f89a:	4b44      	ldr	r3, [pc, #272]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d020      	beq.n	800f8e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f8a2:	4b42      	ldr	r3, [pc, #264]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f8a4:	781b      	ldrb	r3, [r3, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8ac:	4b3f      	ldr	r3, [pc, #252]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7fe ffe3 	bl	800e87e <USBD_SetClassConfig>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f8bc:	7bfb      	ldrb	r3, [r7, #15]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d008      	beq.n	800f8d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f962 	bl	800fb8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8d2:	e065      	b.n	800f9a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 fa31 	bl	800fd3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2203      	movs	r2, #3
 800f8de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f8e2:	e05d      	b.n	800f9a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f000 fa29 	bl	800fd3c <USBD_CtlSendStatus>
      break;
 800f8ea:	e059      	b.n	800f9a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f8ec:	4b2f      	ldr	r3, [pc, #188]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d112      	bne.n	800f91a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f8fc:	4b2b      	ldr	r3, [pc, #172]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	461a      	mov	r2, r3
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f906:	4b29      	ldr	r3, [pc, #164]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	4619      	mov	r1, r3
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7fe ffd2 	bl	800e8b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fa12 	bl	800fd3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f918:	e042      	b.n	800f9a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f91a:	4b24      	ldr	r3, [pc, #144]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	461a      	mov	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	429a      	cmp	r2, r3
 800f926:	d02a      	beq.n	800f97e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	b2db      	uxtb	r3, r3
 800f92e:	4619      	mov	r1, r3
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7fe ffc0 	bl	800e8b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f936:	4b1d      	ldr	r3, [pc, #116]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	461a      	mov	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f940:	4b1a      	ldr	r3, [pc, #104]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	4619      	mov	r1, r3
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7fe ff99 	bl	800e87e <USBD_SetClassConfig>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00f      	beq.n	800f976 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f956:	6839      	ldr	r1, [r7, #0]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f918 	bl	800fb8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	b2db      	uxtb	r3, r3
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7fe ffa5 	bl	800e8b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2202      	movs	r2, #2
 800f970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f974:	e014      	b.n	800f9a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 f9e0 	bl	800fd3c <USBD_CtlSendStatus>
      break;
 800f97c:	e010      	b.n	800f9a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f9dc 	bl	800fd3c <USBD_CtlSendStatus>
      break;
 800f984:	e00c      	b.n	800f9a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f900 	bl	800fb8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f98e:	4b07      	ldr	r3, [pc, #28]	@ (800f9ac <USBD_SetConfig+0x150>)
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	4619      	mov	r1, r3
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7fe ff8e 	bl	800e8b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f99a:	2303      	movs	r3, #3
 800f99c:	73fb      	strb	r3, [r7, #15]
      break;
 800f99e:	bf00      	nop
  }

  return ret;
 800f9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	200011d4 	.word	0x200011d4

0800f9b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	88db      	ldrh	r3, [r3, #6]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d004      	beq.n	800f9cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f9c2:	6839      	ldr	r1, [r7, #0]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f8e2 	bl	800fb8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f9ca:	e023      	b.n	800fa14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	dc02      	bgt.n	800f9de <USBD_GetConfig+0x2e>
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dc03      	bgt.n	800f9e4 <USBD_GetConfig+0x34>
 800f9dc:	e015      	b.n	800fa0a <USBD_GetConfig+0x5a>
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	d00b      	beq.n	800f9fa <USBD_GetConfig+0x4a>
 800f9e2:	e012      	b.n	800fa0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	3308      	adds	r3, #8
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 f948 	bl	800fc88 <USBD_CtlSendData>
        break;
 800f9f8:	e00c      	b.n	800fa14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3304      	adds	r3, #4
 800f9fe:	2201      	movs	r2, #1
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 f940 	bl	800fc88 <USBD_CtlSendData>
        break;
 800fa08:	e004      	b.n	800fa14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa0a:	6839      	ldr	r1, [r7, #0]
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f8be 	bl	800fb8e <USBD_CtlError>
        break;
 800fa12:	bf00      	nop
}
 800fa14:	bf00      	nop
 800fa16:	3708      	adds	r7, #8
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d81e      	bhi.n	800fa72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	88db      	ldrh	r3, [r3, #6]
 800fa38:	2b02      	cmp	r3, #2
 800fa3a:	d004      	beq.n	800fa46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 f8a5 	bl	800fb8e <USBD_CtlError>
        break;
 800fa44:	e01a      	b.n	800fa7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2201      	movs	r2, #1
 800fa4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d005      	beq.n	800fa62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	f043 0202 	orr.w	r2, r3, #2
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	330c      	adds	r3, #12
 800fa66:	2202      	movs	r2, #2
 800fa68:	4619      	mov	r1, r3
 800fa6a:	6878      	ldr	r0, [r7, #4]
 800fa6c:	f000 f90c 	bl	800fc88 <USBD_CtlSendData>
      break;
 800fa70:	e004      	b.n	800fa7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fa72:	6839      	ldr	r1, [r7, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 f88a 	bl	800fb8e <USBD_CtlError>
      break;
 800fa7a:	bf00      	nop
  }
}
 800fa7c:	bf00      	nop
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	885b      	ldrh	r3, [r3, #2]
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d107      	bne.n	800faa6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 f94c 	bl	800fd3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800faa4:	e013      	b.n	800face <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	885b      	ldrh	r3, [r3, #2]
 800faaa:	2b02      	cmp	r3, #2
 800faac:	d10b      	bne.n	800fac6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	889b      	ldrh	r3, [r3, #4]
 800fab2:	0a1b      	lsrs	r3, r3, #8
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	b2da      	uxtb	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 f93c 	bl	800fd3c <USBD_CtlSendStatus>
}
 800fac4:	e003      	b.n	800face <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 f860 	bl	800fb8e <USBD_CtlError>
}
 800face:	bf00      	nop
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b082      	sub	sp, #8
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
 800fade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	3b01      	subs	r3, #1
 800faea:	2b02      	cmp	r3, #2
 800faec:	d80b      	bhi.n	800fb06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	885b      	ldrh	r3, [r3, #2]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d10c      	bne.n	800fb10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f91c 	bl	800fd3c <USBD_CtlSendStatus>
      }
      break;
 800fb04:	e004      	b.n	800fb10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 f840 	bl	800fb8e <USBD_CtlError>
      break;
 800fb0e:	e000      	b.n	800fb12 <USBD_ClrFeature+0x3c>
      break;
 800fb10:	bf00      	nop
  }
}
 800fb12:	bf00      	nop
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b084      	sub	sp, #16
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
 800fb22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	781a      	ldrb	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	3301      	adds	r3, #1
 800fb34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	781a      	ldrb	r2, [r3, #0]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	3301      	adds	r3, #1
 800fb42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f7ff fa40 	bl	800efca <SWAPBYTE>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7ff fa33 	bl	800efca <SWAPBYTE>
 800fb64:	4603      	mov	r3, r0
 800fb66:	461a      	mov	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	3301      	adds	r3, #1
 800fb76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	f7ff fa26 	bl	800efca <SWAPBYTE>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	461a      	mov	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	80da      	strh	r2, [r3, #6]
}
 800fb86:	bf00      	nop
 800fb88:	3710      	adds	r7, #16
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b082      	sub	sp, #8
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
 800fb96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb98:	2180      	movs	r1, #128	@ 0x80
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 fd4e 	bl	801063c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fba0:	2100      	movs	r1, #0
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fd4a 	bl	801063c <USBD_LL_StallEP>
}
 800fba8:	bf00      	nop
 800fbaa:	3708      	adds	r7, #8
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d042      	beq.n	800fc4c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800fbca:	6938      	ldr	r0, [r7, #16]
 800fbcc:	f000 f842 	bl	800fc54 <USBD_GetLen>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	005b      	lsls	r3, r3, #1
 800fbd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbda:	d808      	bhi.n	800fbee <USBD_GetString+0x3e>
 800fbdc:	6938      	ldr	r0, [r7, #16]
 800fbde:	f000 f839 	bl	800fc54 <USBD_GetLen>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	e001      	b.n	800fbf2 <USBD_GetString+0x42>
 800fbee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
 800fbf8:	68ba      	ldr	r2, [r7, #8]
 800fbfa:	4413      	add	r3, r2
 800fbfc:	687a      	ldr	r2, [r7, #4]
 800fbfe:	7812      	ldrb	r2, [r2, #0]
 800fc00:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	3301      	adds	r3, #1
 800fc06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc08:	7dfb      	ldrb	r3, [r7, #23]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	2203      	movs	r2, #3
 800fc10:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc12:	7dfb      	ldrb	r3, [r7, #23]
 800fc14:	3301      	adds	r3, #1
 800fc16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc18:	e013      	b.n	800fc42 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	4413      	add	r3, r2
 800fc20:	693a      	ldr	r2, [r7, #16]
 800fc22:	7812      	ldrb	r2, [r2, #0]
 800fc24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	613b      	str	r3, [r7, #16]
    idx++;
 800fc2c:	7dfb      	ldrb	r3, [r7, #23]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc32:	7dfb      	ldrb	r3, [r7, #23]
 800fc34:	68ba      	ldr	r2, [r7, #8]
 800fc36:	4413      	add	r3, r2
 800fc38:	2200      	movs	r2, #0
 800fc3a:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d1e7      	bne.n	800fc1a <USBD_GetString+0x6a>
 800fc4a:	e000      	b.n	800fc4e <USBD_GetString+0x9e>
    return;
 800fc4c:	bf00      	nop
  }
}
 800fc4e:	3718      	adds	r7, #24
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc64:	e005      	b.n	800fc72 <USBD_GetLen+0x1e>
  {
    len++;
 800fc66:	7bfb      	ldrb	r3, [r7, #15]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1f5      	bne.n	800fc66 <USBD_GetLen+0x12>
  }

  return len;
 800fc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3714      	adds	r7, #20
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b084      	sub	sp, #16
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2202      	movs	r2, #2
 800fc98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	2100      	movs	r1, #0
 800fcae:	68f8      	ldr	r0, [r7, #12]
 800fcb0:	f000 fd4d 	bl	801074e <USBD_LL_Transmit>

  return USBD_OK;
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b084      	sub	sp, #16
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	60f8      	str	r0, [r7, #12]
 800fcc6:	60b9      	str	r1, [r7, #8]
 800fcc8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	2100      	movs	r1, #0
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f000 fd3c 	bl	801074e <USBD_LL_Transmit>

  return USBD_OK;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3710      	adds	r7, #16
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2203      	movs	r2, #3
 800fcf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	2100      	movs	r1, #0
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	f000 fd40 	bl	8010790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd10:	2300      	movs	r3, #0
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b084      	sub	sp, #16
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	60f8      	str	r0, [r7, #12]
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 fd2f 	bl	8010790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2204      	movs	r2, #4
 800fd48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	2200      	movs	r2, #0
 800fd50:	2100      	movs	r1, #0
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 fcfb 	bl	801074e <USBD_LL_Transmit>

  return USBD_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b082      	sub	sp, #8
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2205      	movs	r2, #5
 800fd6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd72:	2300      	movs	r3, #0
 800fd74:	2200      	movs	r2, #0
 800fd76:	2100      	movs	r1, #0
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fd09 	bl	8010790 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	4912      	ldr	r1, [pc, #72]	@ (800fdd8 <MX_USB_DEVICE_Init+0x50>)
 800fd90:	4812      	ldr	r0, [pc, #72]	@ (800fddc <MX_USB_DEVICE_Init+0x54>)
 800fd92:	f7fe fcf7 	bl	800e784 <USBD_Init>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d001      	beq.n	800fda0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd9c:	f7f3 fabe 	bl	800331c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fda0:	490f      	ldr	r1, [pc, #60]	@ (800fde0 <MX_USB_DEVICE_Init+0x58>)
 800fda2:	480e      	ldr	r0, [pc, #56]	@ (800fddc <MX_USB_DEVICE_Init+0x54>)
 800fda4:	f7fe fd1e 	bl	800e7e4 <USBD_RegisterClass>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fdae:	f7f3 fab5 	bl	800331c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fdb2:	490c      	ldr	r1, [pc, #48]	@ (800fde4 <MX_USB_DEVICE_Init+0x5c>)
 800fdb4:	4809      	ldr	r0, [pc, #36]	@ (800fddc <MX_USB_DEVICE_Init+0x54>)
 800fdb6:	f7fe fc15 	bl	800e5e4 <USBD_CDC_RegisterInterface>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d001      	beq.n	800fdc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fdc0:	f7f3 faac 	bl	800331c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fdc4:	4805      	ldr	r0, [pc, #20]	@ (800fddc <MX_USB_DEVICE_Init+0x54>)
 800fdc6:	f7fe fd43 	bl	800e850 <USBD_Start>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d001      	beq.n	800fdd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fdd0:	f7f3 faa4 	bl	800331c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdd4:	bf00      	nop
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	200000c4 	.word	0x200000c4
 800fddc:	200011d8 	.word	0x200011d8
 800fde0:	20000028 	.word	0x20000028
 800fde4:	200000b0 	.word	0x200000b0

0800fde8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fdec:	2200      	movs	r2, #0
 800fdee:	4905      	ldr	r1, [pc, #20]	@ (800fe04 <CDC_Init_FS+0x1c>)
 800fdf0:	4805      	ldr	r0, [pc, #20]	@ (800fe08 <CDC_Init_FS+0x20>)
 800fdf2:	f7fe fc11 	bl	800e618 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fdf6:	4905      	ldr	r1, [pc, #20]	@ (800fe0c <CDC_Init_FS+0x24>)
 800fdf8:	4803      	ldr	r0, [pc, #12]	@ (800fe08 <CDC_Init_FS+0x20>)
 800fdfa:	f7fe fc2f 	bl	800e65c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fdfe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	200016b4 	.word	0x200016b4
 800fe08:	200011d8 	.word	0x200011d8
 800fe0c:	200014b4 	.word	0x200014b4

0800fe10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fe10:	b480      	push	{r7}
 800fe12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fe14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	4603      	mov	r3, r0
 800fe28:	6039      	str	r1, [r7, #0]
 800fe2a:	71fb      	strb	r3, [r7, #7]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	2b23      	cmp	r3, #35	@ 0x23
 800fe34:	f200 8097 	bhi.w	800ff66 <CDC_Control_FS+0x146>
 800fe38:	a201      	add	r2, pc, #4	@ (adr r2, 800fe40 <CDC_Control_FS+0x20>)
 800fe3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3e:	bf00      	nop
 800fe40:	0800ff67 	.word	0x0800ff67
 800fe44:	0800ff67 	.word	0x0800ff67
 800fe48:	0800ff67 	.word	0x0800ff67
 800fe4c:	0800ff67 	.word	0x0800ff67
 800fe50:	0800ff67 	.word	0x0800ff67
 800fe54:	0800ff67 	.word	0x0800ff67
 800fe58:	0800ff67 	.word	0x0800ff67
 800fe5c:	0800ff67 	.word	0x0800ff67
 800fe60:	0800ff67 	.word	0x0800ff67
 800fe64:	0800ff67 	.word	0x0800ff67
 800fe68:	0800ff67 	.word	0x0800ff67
 800fe6c:	0800ff67 	.word	0x0800ff67
 800fe70:	0800ff67 	.word	0x0800ff67
 800fe74:	0800ff67 	.word	0x0800ff67
 800fe78:	0800ff67 	.word	0x0800ff67
 800fe7c:	0800ff67 	.word	0x0800ff67
 800fe80:	0800ff67 	.word	0x0800ff67
 800fe84:	0800ff67 	.word	0x0800ff67
 800fe88:	0800ff67 	.word	0x0800ff67
 800fe8c:	0800ff67 	.word	0x0800ff67
 800fe90:	0800ff67 	.word	0x0800ff67
 800fe94:	0800ff67 	.word	0x0800ff67
 800fe98:	0800ff67 	.word	0x0800ff67
 800fe9c:	0800ff67 	.word	0x0800ff67
 800fea0:	0800ff67 	.word	0x0800ff67
 800fea4:	0800ff67 	.word	0x0800ff67
 800fea8:	0800ff67 	.word	0x0800ff67
 800feac:	0800ff67 	.word	0x0800ff67
 800feb0:	0800ff67 	.word	0x0800ff67
 800feb4:	0800ff67 	.word	0x0800ff67
 800feb8:	0800ff67 	.word	0x0800ff67
 800febc:	0800ff67 	.word	0x0800ff67
 800fec0:	0800fed1 	.word	0x0800fed1
 800fec4:	0800ff13 	.word	0x0800ff13
 800fec8:	0800ff67 	.word	0x0800ff67
 800fecc:	0800ff67 	.word	0x0800ff67
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0]) | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24);
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	3301      	adds	r3, #1
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	021b      	lsls	r3, r3, #8
 800fede:	431a      	orrs	r2, r3
 800fee0:	683b      	ldr	r3, [r7, #0]
 800fee2:	3302      	adds	r3, #2
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	041b      	lsls	r3, r3, #16
 800fee8:	431a      	orrs	r2, r3
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	3303      	adds	r3, #3
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	061b      	lsls	r3, r3, #24
 800fef2:	4313      	orrs	r3, r2
 800fef4:	4a20      	ldr	r2, [pc, #128]	@ (800ff78 <CDC_Control_FS+0x158>)
 800fef6:	6013      	str	r3, [r2, #0]
		LineCoding.format = pbuf[4];
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	791a      	ldrb	r2, [r3, #4]
 800fefc:	4b1e      	ldr	r3, [pc, #120]	@ (800ff78 <CDC_Control_FS+0x158>)
 800fefe:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	795a      	ldrb	r2, [r3, #5]
 800ff04:	4b1c      	ldr	r3, [pc, #112]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff06:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	799a      	ldrb	r2, [r3, #6]
 800ff0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff0e:	719a      	strb	r2, [r3, #6]
    break;
 800ff10:	e02a      	b.n	800ff68 <CDC_Control_FS+0x148>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ff12:	4b19      	ldr	r3, [pc, #100]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ff1c:	4b16      	ldr	r3, [pc, #88]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	0a1a      	lsrs	r2, r3, #8
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	3301      	adds	r3, #1
 800ff26:	b2d2      	uxtb	r2, r2
 800ff28:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800ff2a:	4b13      	ldr	r3, [pc, #76]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	0c1a      	lsrs	r2, r3, #16
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	3302      	adds	r3, #2
 800ff34:	b2d2      	uxtb	r2, r2
 800ff36:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800ff38:	4b0f      	ldr	r3, [pc, #60]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	0e1a      	lsrs	r2, r3, #24
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	3303      	adds	r3, #3
 800ff42:	b2d2      	uxtb	r2, r2
 800ff44:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = LineCoding.format;
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	3304      	adds	r3, #4
 800ff4a:	4a0b      	ldr	r2, [pc, #44]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff4c:	7912      	ldrb	r2, [r2, #4]
 800ff4e:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = LineCoding.paritytype;
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	3305      	adds	r3, #5
 800ff54:	4a08      	ldr	r2, [pc, #32]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff56:	7952      	ldrb	r2, [r2, #5]
 800ff58:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = LineCoding.datatype;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	3306      	adds	r3, #6
 800ff5e:	4a06      	ldr	r2, [pc, #24]	@ (800ff78 <CDC_Control_FS+0x158>)
 800ff60:	7992      	ldrb	r2, [r2, #6]
 800ff62:	701a      	strb	r2, [r3, #0]
	break;
 800ff64:	e000      	b.n	800ff68 <CDC_Control_FS+0x148>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ff66:	bf00      	nop
  }

  return (USBD_OK);
 800ff68:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	200000a8 	.word	0x200000a8

0800ff7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(dataOnRx != NULL){
 800ff86:	4b0b      	ldr	r3, [pc, #44]	@ (800ffb4 <CDC_Receive_FS+0x38>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d006      	beq.n	800ff9c <CDC_Receive_FS+0x20>
		dataOnRx(Buf, *Len);
 800ff8e:	4b09      	ldr	r3, [pc, #36]	@ (800ffb4 <CDC_Receive_FS+0x38>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	6812      	ldr	r2, [r2, #0]
 800ff96:	4611      	mov	r1, r2
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ff9c:	6879      	ldr	r1, [r7, #4]
 800ff9e:	4806      	ldr	r0, [pc, #24]	@ (800ffb8 <CDC_Receive_FS+0x3c>)
 800ffa0:	f7fe fb5c 	bl	800e65c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ffa4:	4804      	ldr	r0, [pc, #16]	@ (800ffb8 <CDC_Receive_FS+0x3c>)
 800ffa6:	f7fe fbb7 	bl	800e718 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ffaa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3708      	adds	r7, #8
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	200018b4 	.word	0x200018b4
 800ffb8:	200011d8 	.word	0x200011d8

0800ffbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ffcc:	4b0d      	ldr	r3, [pc, #52]	@ (8010004 <CDC_Transmit_FS+0x48>)
 800ffce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ffd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e00b      	b.n	800fffa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ffe2:	887b      	ldrh	r3, [r7, #2]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	6879      	ldr	r1, [r7, #4]
 800ffe8:	4806      	ldr	r0, [pc, #24]	@ (8010004 <CDC_Transmit_FS+0x48>)
 800ffea:	f7fe fb15 	bl	800e618 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ffee:	4805      	ldr	r0, [pc, #20]	@ (8010004 <CDC_Transmit_FS+0x48>)
 800fff0:	f7fe fb52 	bl	800e698 <USBD_CDC_TransmitPacket>
 800fff4:	4603      	mov	r3, r0
 800fff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3710      	adds	r7, #16
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	200011d8 	.word	0x200011d8

08010008 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010008:	b480      	push	{r7}
 801000a:	b087      	sub	sp, #28
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	4613      	mov	r3, r2
 8010014:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010016:	2300      	movs	r3, #0
 8010018:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801001a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801001e:	4618      	mov	r0, r3
 8010020:	371c      	adds	r7, #28
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
	...

0801002c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void (*RxData)(uint8_t* buf, uint32_t len)){
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
	dataOnRx = RxData;
 8010034:	4a04      	ldr	r2, [pc, #16]	@ (8010048 <CDC_Attach_Rx+0x1c>)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6013      	str	r3, [r2, #0]
}
 801003a:	bf00      	nop
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	200018b4 	.word	0x200018b4

0801004c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	4603      	mov	r3, r0
 8010054:	6039      	str	r1, [r7, #0]
 8010056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	2212      	movs	r2, #18
 801005c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801005e:	4b03      	ldr	r3, [pc, #12]	@ (801006c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010060:	4618      	mov	r0, r3
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	200000e0 	.word	0x200000e0

08010070 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	6039      	str	r1, [r7, #0]
 801007a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2204      	movs	r2, #4
 8010080:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010082:	4b03      	ldr	r3, [pc, #12]	@ (8010090 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010084:	4618      	mov	r0, r3
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	200000f4 	.word	0x200000f4

08010094 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	4603      	mov	r3, r0
 801009c:	6039      	str	r1, [r7, #0]
 801009e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80100a0:	79fb      	ldrb	r3, [r7, #7]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d105      	bne.n	80100b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80100a6:	683a      	ldr	r2, [r7, #0]
 80100a8:	4907      	ldr	r1, [pc, #28]	@ (80100c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80100aa:	4808      	ldr	r0, [pc, #32]	@ (80100cc <USBD_FS_ProductStrDescriptor+0x38>)
 80100ac:	f7ff fd80 	bl	800fbb0 <USBD_GetString>
 80100b0:	e004      	b.n	80100bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80100b2:	683a      	ldr	r2, [r7, #0]
 80100b4:	4904      	ldr	r1, [pc, #16]	@ (80100c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80100b6:	4805      	ldr	r0, [pc, #20]	@ (80100cc <USBD_FS_ProductStrDescriptor+0x38>)
 80100b8:	f7ff fd7a 	bl	800fbb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80100bc:	4b02      	ldr	r3, [pc, #8]	@ (80100c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3708      	adds	r7, #8
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	200018b8 	.word	0x200018b8
 80100cc:	080112a4 	.word	0x080112a4

080100d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	4603      	mov	r3, r0
 80100d8:	6039      	str	r1, [r7, #0]
 80100da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	4904      	ldr	r1, [pc, #16]	@ (80100f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80100e0:	4804      	ldr	r0, [pc, #16]	@ (80100f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80100e2:	f7ff fd65 	bl	800fbb0 <USBD_GetString>
  return USBD_StrDesc;
 80100e6:	4b02      	ldr	r3, [pc, #8]	@ (80100f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	200018b8 	.word	0x200018b8
 80100f4:	080112bc 	.word	0x080112bc

080100f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	6039      	str	r1, [r7, #0]
 8010102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	221a      	movs	r2, #26
 8010108:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801010a:	f000 f843 	bl	8010194 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801010e:	4b02      	ldr	r3, [pc, #8]	@ (8010118 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010110:	4618      	mov	r0, r3
 8010112:	3708      	adds	r7, #8
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	200000f8 	.word	0x200000f8

0801011c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	6039      	str	r1, [r7, #0]
 8010126:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010128:	79fb      	ldrb	r3, [r7, #7]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d105      	bne.n	801013a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	4907      	ldr	r1, [pc, #28]	@ (8010150 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010132:	4808      	ldr	r0, [pc, #32]	@ (8010154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010134:	f7ff fd3c 	bl	800fbb0 <USBD_GetString>
 8010138:	e004      	b.n	8010144 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	4904      	ldr	r1, [pc, #16]	@ (8010150 <USBD_FS_ConfigStrDescriptor+0x34>)
 801013e:	4805      	ldr	r0, [pc, #20]	@ (8010154 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010140:	f7ff fd36 	bl	800fbb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010144:	4b02      	ldr	r3, [pc, #8]	@ (8010150 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010146:	4618      	mov	r0, r3
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	200018b8 	.word	0x200018b8
 8010154:	080112d0 	.word	0x080112d0

08010158 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	4603      	mov	r3, r0
 8010160:	6039      	str	r1, [r7, #0]
 8010162:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010164:	79fb      	ldrb	r3, [r7, #7]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d105      	bne.n	8010176 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801016a:	683a      	ldr	r2, [r7, #0]
 801016c:	4907      	ldr	r1, [pc, #28]	@ (801018c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801016e:	4808      	ldr	r0, [pc, #32]	@ (8010190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010170:	f7ff fd1e 	bl	800fbb0 <USBD_GetString>
 8010174:	e004      	b.n	8010180 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	4904      	ldr	r1, [pc, #16]	@ (801018c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801017a:	4805      	ldr	r0, [pc, #20]	@ (8010190 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801017c:	f7ff fd18 	bl	800fbb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010180:	4b02      	ldr	r3, [pc, #8]	@ (801018c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	200018b8 	.word	0x200018b8
 8010190:	080112dc 	.word	0x080112dc

08010194 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801019a:	4b0f      	ldr	r3, [pc, #60]	@ (80101d8 <Get_SerialNum+0x44>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80101a0:	4b0e      	ldr	r3, [pc, #56]	@ (80101dc <Get_SerialNum+0x48>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80101a6:	4b0e      	ldr	r3, [pc, #56]	@ (80101e0 <Get_SerialNum+0x4c>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80101ac:	68fa      	ldr	r2, [r7, #12]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4413      	add	r3, r2
 80101b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d009      	beq.n	80101ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80101ba:	2208      	movs	r2, #8
 80101bc:	4909      	ldr	r1, [pc, #36]	@ (80101e4 <Get_SerialNum+0x50>)
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 f814 	bl	80101ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80101c4:	2204      	movs	r2, #4
 80101c6:	4908      	ldr	r1, [pc, #32]	@ (80101e8 <Get_SerialNum+0x54>)
 80101c8:	68b8      	ldr	r0, [r7, #8]
 80101ca:	f000 f80f 	bl	80101ec <IntToUnicode>
  }
}
 80101ce:	bf00      	nop
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	1fff7a10 	.word	0x1fff7a10
 80101dc:	1fff7a14 	.word	0x1fff7a14
 80101e0:	1fff7a18 	.word	0x1fff7a18
 80101e4:	200000fa 	.word	0x200000fa
 80101e8:	2000010a 	.word	0x2000010a

080101ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b087      	sub	sp, #28
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	4613      	mov	r3, r2
 80101f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80101fe:	2300      	movs	r3, #0
 8010200:	75fb      	strb	r3, [r7, #23]
 8010202:	e027      	b.n	8010254 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	0f1b      	lsrs	r3, r3, #28
 8010208:	2b09      	cmp	r3, #9
 801020a:	d80b      	bhi.n	8010224 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	0f1b      	lsrs	r3, r3, #28
 8010210:	b2da      	uxtb	r2, r3
 8010212:	7dfb      	ldrb	r3, [r7, #23]
 8010214:	005b      	lsls	r3, r3, #1
 8010216:	4619      	mov	r1, r3
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	440b      	add	r3, r1
 801021c:	3230      	adds	r2, #48	@ 0x30
 801021e:	b2d2      	uxtb	r2, r2
 8010220:	701a      	strb	r2, [r3, #0]
 8010222:	e00a      	b.n	801023a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	0f1b      	lsrs	r3, r3, #28
 8010228:	b2da      	uxtb	r2, r3
 801022a:	7dfb      	ldrb	r3, [r7, #23]
 801022c:	005b      	lsls	r3, r3, #1
 801022e:	4619      	mov	r1, r3
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	440b      	add	r3, r1
 8010234:	3237      	adds	r2, #55	@ 0x37
 8010236:	b2d2      	uxtb	r2, r2
 8010238:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	011b      	lsls	r3, r3, #4
 801023e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010240:	7dfb      	ldrb	r3, [r7, #23]
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	3301      	adds	r3, #1
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	4413      	add	r3, r2
 801024a:	2200      	movs	r2, #0
 801024c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	3301      	adds	r3, #1
 8010252:	75fb      	strb	r3, [r7, #23]
 8010254:	7dfa      	ldrb	r2, [r7, #23]
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	429a      	cmp	r2, r3
 801025a:	d3d3      	bcc.n	8010204 <IntToUnicode+0x18>
  }
}
 801025c:	bf00      	nop
 801025e:	bf00      	nop
 8010260:	371c      	adds	r7, #28
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
	...

0801026c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b08a      	sub	sp, #40	@ 0x28
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010274:	f107 0314 	add.w	r3, r7, #20
 8010278:	2200      	movs	r2, #0
 801027a:	601a      	str	r2, [r3, #0]
 801027c:	605a      	str	r2, [r3, #4]
 801027e:	609a      	str	r2, [r3, #8]
 8010280:	60da      	str	r2, [r3, #12]
 8010282:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801028c:	d13a      	bne.n	8010304 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801028e:	2300      	movs	r3, #0
 8010290:	613b      	str	r3, [r7, #16]
 8010292:	4b1e      	ldr	r3, [pc, #120]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 8010294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010296:	4a1d      	ldr	r2, [pc, #116]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 8010298:	f043 0301 	orr.w	r3, r3, #1
 801029c:	6313      	str	r3, [r2, #48]	@ 0x30
 801029e:	4b1b      	ldr	r3, [pc, #108]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 80102a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	613b      	str	r3, [r7, #16]
 80102a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80102aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80102ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102b0:	2302      	movs	r3, #2
 80102b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102b8:	2303      	movs	r3, #3
 80102ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80102bc:	230a      	movs	r3, #10
 80102be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102c0:	f107 0314 	add.w	r3, r7, #20
 80102c4:	4619      	mov	r1, r3
 80102c6:	4812      	ldr	r0, [pc, #72]	@ (8010310 <HAL_PCD_MspInit+0xa4>)
 80102c8:	f7f4 fe86 	bl	8004fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80102cc:	4b0f      	ldr	r3, [pc, #60]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 80102ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102d0:	4a0e      	ldr	r2, [pc, #56]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 80102d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102d6:	6353      	str	r3, [r2, #52]	@ 0x34
 80102d8:	2300      	movs	r3, #0
 80102da:	60fb      	str	r3, [r7, #12]
 80102dc:	4b0b      	ldr	r3, [pc, #44]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 80102de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102e0:	4a0a      	ldr	r2, [pc, #40]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 80102e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80102e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80102e8:	4b08      	ldr	r3, [pc, #32]	@ (801030c <HAL_PCD_MspInit+0xa0>)
 80102ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102f0:	60fb      	str	r3, [r7, #12]
 80102f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80102f4:	2200      	movs	r2, #0
 80102f6:	2100      	movs	r1, #0
 80102f8:	2043      	movs	r0, #67	@ 0x43
 80102fa:	f7f4 fa1a 	bl	8004732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80102fe:	2043      	movs	r0, #67	@ 0x43
 8010300:	f7f4 fa33 	bl	800476a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010304:	bf00      	nop
 8010306:	3728      	adds	r7, #40	@ 0x28
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	40023800 	.word	0x40023800
 8010310:	40020000 	.word	0x40020000

08010314 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8010328:	4619      	mov	r1, r3
 801032a:	4610      	mov	r0, r2
 801032c:	f7fe fadd 	bl	800e8ea <USBD_LL_SetupStage>
}
 8010330:	bf00      	nop
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	460b      	mov	r3, r1
 8010342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801034a:	78fa      	ldrb	r2, [r7, #3]
 801034c:	6879      	ldr	r1, [r7, #4]
 801034e:	4613      	mov	r3, r2
 8010350:	00db      	lsls	r3, r3, #3
 8010352:	4413      	add	r3, r2
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	440b      	add	r3, r1
 8010358:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	78fb      	ldrb	r3, [r7, #3]
 8010360:	4619      	mov	r1, r3
 8010362:	f7fe fb17 	bl	800e994 <USBD_LL_DataOutStage>
}
 8010366:	bf00      	nop
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
 8010376:	460b      	mov	r3, r1
 8010378:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010380:	78fa      	ldrb	r2, [r7, #3]
 8010382:	6879      	ldr	r1, [r7, #4]
 8010384:	4613      	mov	r3, r2
 8010386:	00db      	lsls	r3, r3, #3
 8010388:	4413      	add	r3, r2
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	440b      	add	r3, r1
 801038e:	3320      	adds	r3, #32
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	78fb      	ldrb	r3, [r7, #3]
 8010394:	4619      	mov	r1, r3
 8010396:	f7fe fbb0 	bl	800eafa <USBD_LL_DataInStage>
}
 801039a:	bf00      	nop
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b082      	sub	sp, #8
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fe fcea 	bl	800ed8a <USBD_LL_SOF>
}
 80103b6:	bf00      	nop
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80103c6:	2301      	movs	r3, #1
 80103c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	79db      	ldrb	r3, [r3, #7]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	d001      	beq.n	80103d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80103d2:	f7f2 ffa3 	bl	800331c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103dc:	7bfa      	ldrb	r2, [r7, #15]
 80103de:	4611      	mov	r1, r2
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fe fc8e 	bl	800ed02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fe fc36 	bl	800ec5e <USBD_LL_Reset>
}
 80103f2:	bf00      	nop
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
	...

080103fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b082      	sub	sp, #8
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe fc89 	bl	800ed22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	6812      	ldr	r2, [r2, #0]
 801041e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010422:	f043 0301 	orr.w	r3, r3, #1
 8010426:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7adb      	ldrb	r3, [r3, #11]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d005      	beq.n	801043c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010430:	4b04      	ldr	r3, [pc, #16]	@ (8010444 <HAL_PCD_SuspendCallback+0x48>)
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	4a03      	ldr	r2, [pc, #12]	@ (8010444 <HAL_PCD_SuspendCallback+0x48>)
 8010436:	f043 0306 	orr.w	r3, r3, #6
 801043a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	e000ed00 	.word	0xe000ed00

08010448 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe fc7f 	bl	800ed5a <USBD_LL_Resume>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	460b      	mov	r3, r1
 801046e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010476:	78fa      	ldrb	r2, [r7, #3]
 8010478:	4611      	mov	r1, r2
 801047a:	4618      	mov	r0, r3
 801047c:	f7fe fcd7 	bl	800ee2e <USBD_LL_IsoOUTIncomplete>
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b082      	sub	sp, #8
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fe fc93 	bl	800edca <USBD_LL_IsoINIncomplete>
}
 80104a4:	bf00      	nop
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fe fce9 	bl	800ee92 <USBD_LL_DevConnected>
}
 80104c0:	bf00      	nop
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b082      	sub	sp, #8
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe fce6 	bl	800eea8 <USBD_LL_DevDisconnected>
}
 80104dc:	bf00      	nop
 80104de:	3708      	adds	r7, #8
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d13c      	bne.n	801056e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80104f4:	4a20      	ldr	r2, [pc, #128]	@ (8010578 <USBD_LL_Init+0x94>)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4a1e      	ldr	r2, [pc, #120]	@ (8010578 <USBD_LL_Init+0x94>)
 8010500:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010504:	4b1c      	ldr	r3, [pc, #112]	@ (8010578 <USBD_LL_Init+0x94>)
 8010506:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801050a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801050c:	4b1a      	ldr	r3, [pc, #104]	@ (8010578 <USBD_LL_Init+0x94>)
 801050e:	2204      	movs	r2, #4
 8010510:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010512:	4b19      	ldr	r3, [pc, #100]	@ (8010578 <USBD_LL_Init+0x94>)
 8010514:	2202      	movs	r2, #2
 8010516:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010518:	4b17      	ldr	r3, [pc, #92]	@ (8010578 <USBD_LL_Init+0x94>)
 801051a:	2200      	movs	r2, #0
 801051c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801051e:	4b16      	ldr	r3, [pc, #88]	@ (8010578 <USBD_LL_Init+0x94>)
 8010520:	2202      	movs	r2, #2
 8010522:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010524:	4b14      	ldr	r3, [pc, #80]	@ (8010578 <USBD_LL_Init+0x94>)
 8010526:	2200      	movs	r2, #0
 8010528:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801052a:	4b13      	ldr	r3, [pc, #76]	@ (8010578 <USBD_LL_Init+0x94>)
 801052c:	2200      	movs	r2, #0
 801052e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010530:	4b11      	ldr	r3, [pc, #68]	@ (8010578 <USBD_LL_Init+0x94>)
 8010532:	2200      	movs	r2, #0
 8010534:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010536:	4b10      	ldr	r3, [pc, #64]	@ (8010578 <USBD_LL_Init+0x94>)
 8010538:	2200      	movs	r2, #0
 801053a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801053c:	4b0e      	ldr	r3, [pc, #56]	@ (8010578 <USBD_LL_Init+0x94>)
 801053e:	2200      	movs	r2, #0
 8010540:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010542:	480d      	ldr	r0, [pc, #52]	@ (8010578 <USBD_LL_Init+0x94>)
 8010544:	f7f8 fb09 	bl	8008b5a <HAL_PCD_Init>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d001      	beq.n	8010552 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801054e:	f7f2 fee5 	bl	800331c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010552:	2180      	movs	r1, #128	@ 0x80
 8010554:	4808      	ldr	r0, [pc, #32]	@ (8010578 <USBD_LL_Init+0x94>)
 8010556:	f7f9 fd36 	bl	8009fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801055a:	2240      	movs	r2, #64	@ 0x40
 801055c:	2100      	movs	r1, #0
 801055e:	4806      	ldr	r0, [pc, #24]	@ (8010578 <USBD_LL_Init+0x94>)
 8010560:	f7f9 fcea 	bl	8009f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010564:	2280      	movs	r2, #128	@ 0x80
 8010566:	2101      	movs	r1, #1
 8010568:	4803      	ldr	r0, [pc, #12]	@ (8010578 <USBD_LL_Init+0x94>)
 801056a:	f7f9 fce5 	bl	8009f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	20001ab8 	.word	0x20001ab8

0801057c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010584:	2300      	movs	r3, #0
 8010586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010588:	2300      	movs	r3, #0
 801058a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010592:	4618      	mov	r0, r3
 8010594:	f7f8 fbf0 	bl	8008d78 <HAL_PCD_Start>
 8010598:	4603      	mov	r3, r0
 801059a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801059c:	7bfb      	ldrb	r3, [r7, #15]
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 f942 	bl	8010828 <USBD_Get_USB_Status>
 80105a4:	4603      	mov	r3, r0
 80105a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}

080105b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80105b2:	b580      	push	{r7, lr}
 80105b4:	b084      	sub	sp, #16
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
 80105ba:	4608      	mov	r0, r1
 80105bc:	4611      	mov	r1, r2
 80105be:	461a      	mov	r2, r3
 80105c0:	4603      	mov	r3, r0
 80105c2:	70fb      	strb	r3, [r7, #3]
 80105c4:	460b      	mov	r3, r1
 80105c6:	70bb      	strb	r3, [r7, #2]
 80105c8:	4613      	mov	r3, r2
 80105ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105cc:	2300      	movs	r3, #0
 80105ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105d0:	2300      	movs	r3, #0
 80105d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80105da:	78bb      	ldrb	r3, [r7, #2]
 80105dc:	883a      	ldrh	r2, [r7, #0]
 80105de:	78f9      	ldrb	r1, [r7, #3]
 80105e0:	f7f9 f8c4 	bl	800976c <HAL_PCD_EP_Open>
 80105e4:	4603      	mov	r3, r0
 80105e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105e8:	7bfb      	ldrb	r3, [r7, #15]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 f91c 	bl	8010828 <USBD_Get_USB_Status>
 80105f0:	4603      	mov	r3, r0
 80105f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b084      	sub	sp, #16
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
 8010606:	460b      	mov	r3, r1
 8010608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801060a:	2300      	movs	r3, #0
 801060c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801060e:	2300      	movs	r3, #0
 8010610:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010618:	78fa      	ldrb	r2, [r7, #3]
 801061a:	4611      	mov	r1, r2
 801061c:	4618      	mov	r0, r3
 801061e:	f7f9 f90f 	bl	8009840 <HAL_PCD_EP_Close>
 8010622:	4603      	mov	r3, r0
 8010624:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010626:	7bfb      	ldrb	r3, [r7, #15]
 8010628:	4618      	mov	r0, r3
 801062a:	f000 f8fd 	bl	8010828 <USBD_Get_USB_Status>
 801062e:	4603      	mov	r3, r0
 8010630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010632:	7bbb      	ldrb	r3, [r7, #14]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	460b      	mov	r3, r1
 8010646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010656:	78fa      	ldrb	r2, [r7, #3]
 8010658:	4611      	mov	r1, r2
 801065a:	4618      	mov	r0, r3
 801065c:	f7f9 f9c7 	bl	80099ee <HAL_PCD_EP_SetStall>
 8010660:	4603      	mov	r3, r0
 8010662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010664:	7bfb      	ldrb	r3, [r7, #15]
 8010666:	4618      	mov	r0, r3
 8010668:	f000 f8de 	bl	8010828 <USBD_Get_USB_Status>
 801066c:	4603      	mov	r3, r0
 801066e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010670:	7bbb      	ldrb	r3, [r7, #14]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b084      	sub	sp, #16
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	460b      	mov	r3, r1
 8010684:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010686:	2300      	movs	r3, #0
 8010688:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801068a:	2300      	movs	r3, #0
 801068c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010694:	78fa      	ldrb	r2, [r7, #3]
 8010696:	4611      	mov	r1, r2
 8010698:	4618      	mov	r0, r3
 801069a:	f7f9 fa0b 	bl	8009ab4 <HAL_PCD_EP_ClrStall>
 801069e:	4603      	mov	r3, r0
 80106a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106a2:	7bfb      	ldrb	r3, [r7, #15]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f000 f8bf 	bl	8010828 <USBD_Get_USB_Status>
 80106aa:	4603      	mov	r3, r0
 80106ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3710      	adds	r7, #16
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106b8:	b480      	push	{r7}
 80106ba:	b085      	sub	sp, #20
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	460b      	mov	r3, r1
 80106c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80106ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80106cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	da0b      	bge.n	80106ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106da:	68f9      	ldr	r1, [r7, #12]
 80106dc:	4613      	mov	r3, r2
 80106de:	00db      	lsls	r3, r3, #3
 80106e0:	4413      	add	r3, r2
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	440b      	add	r3, r1
 80106e6:	3316      	adds	r3, #22
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	e00b      	b.n	8010704 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80106ec:	78fb      	ldrb	r3, [r7, #3]
 80106ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80106f2:	68f9      	ldr	r1, [r7, #12]
 80106f4:	4613      	mov	r3, r2
 80106f6:	00db      	lsls	r3, r3, #3
 80106f8:	4413      	add	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	440b      	add	r3, r1
 80106fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010702:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010704:	4618      	mov	r0, r3
 8010706:	3714      	adds	r7, #20
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	460b      	mov	r3, r1
 801071a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801071c:	2300      	movs	r3, #0
 801071e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801072a:	78fa      	ldrb	r2, [r7, #3]
 801072c:	4611      	mov	r1, r2
 801072e:	4618      	mov	r0, r3
 8010730:	f7f8 fff8 	bl	8009724 <HAL_PCD_SetAddress>
 8010734:	4603      	mov	r3, r0
 8010736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010738:	7bfb      	ldrb	r3, [r7, #15]
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f874 	bl	8010828 <USBD_Get_USB_Status>
 8010740:	4603      	mov	r3, r0
 8010742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010744:	7bbb      	ldrb	r3, [r7, #14]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801074e:	b580      	push	{r7, lr}
 8010750:	b086      	sub	sp, #24
 8010752:	af00      	add	r7, sp, #0
 8010754:	60f8      	str	r0, [r7, #12]
 8010756:	607a      	str	r2, [r7, #4]
 8010758:	603b      	str	r3, [r7, #0]
 801075a:	460b      	mov	r3, r1
 801075c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010762:	2300      	movs	r3, #0
 8010764:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801076c:	7af9      	ldrb	r1, [r7, #11]
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	f7f9 f902 	bl	800997a <HAL_PCD_EP_Transmit>
 8010776:	4603      	mov	r3, r0
 8010778:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801077a:	7dfb      	ldrb	r3, [r7, #23]
 801077c:	4618      	mov	r0, r3
 801077e:	f000 f853 	bl	8010828 <USBD_Get_USB_Status>
 8010782:	4603      	mov	r3, r0
 8010784:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010786:	7dbb      	ldrb	r3, [r7, #22]
}
 8010788:	4618      	mov	r0, r3
 801078a:	3718      	adds	r7, #24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}

08010790 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	607a      	str	r2, [r7, #4]
 801079a:	603b      	str	r3, [r7, #0]
 801079c:	460b      	mov	r3, r1
 801079e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107a4:	2300      	movs	r3, #0
 80107a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80107ae:	7af9      	ldrb	r1, [r7, #11]
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	f7f9 f88e 	bl	80098d4 <HAL_PCD_EP_Receive>
 80107b8:	4603      	mov	r3, r0
 80107ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107bc:	7dfb      	ldrb	r3, [r7, #23]
 80107be:	4618      	mov	r0, r3
 80107c0:	f000 f832 	bl	8010828 <USBD_Get_USB_Status>
 80107c4:	4603      	mov	r3, r0
 80107c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80107c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3718      	adds	r7, #24
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b082      	sub	sp, #8
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
 80107da:	460b      	mov	r3, r1
 80107dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80107e4:	78fa      	ldrb	r2, [r7, #3]
 80107e6:	4611      	mov	r1, r2
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7f9 f8ae 	bl	800994a <HAL_PCD_EP_GetRxCount>
 80107ee:	4603      	mov	r3, r0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010800:	4b03      	ldr	r3, [pc, #12]	@ (8010810 <USBD_static_malloc+0x18>)
}
 8010802:	4618      	mov	r0, r3
 8010804:	370c      	adds	r7, #12
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr
 801080e:	bf00      	nop
 8010810:	20001f9c 	.word	0x20001f9c

08010814 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010814:	b480      	push	{r7}
 8010816:	b083      	sub	sp, #12
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]

}
 801081c:	bf00      	nop
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	4603      	mov	r3, r0
 8010830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010832:	2300      	movs	r3, #0
 8010834:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010836:	79fb      	ldrb	r3, [r7, #7]
 8010838:	2b03      	cmp	r3, #3
 801083a:	d817      	bhi.n	801086c <USBD_Get_USB_Status+0x44>
 801083c:	a201      	add	r2, pc, #4	@ (adr r2, 8010844 <USBD_Get_USB_Status+0x1c>)
 801083e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010842:	bf00      	nop
 8010844:	08010855 	.word	0x08010855
 8010848:	0801085b 	.word	0x0801085b
 801084c:	08010861 	.word	0x08010861
 8010850:	08010867 	.word	0x08010867
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010854:	2300      	movs	r3, #0
 8010856:	73fb      	strb	r3, [r7, #15]
    break;
 8010858:	e00b      	b.n	8010872 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801085a:	2303      	movs	r3, #3
 801085c:	73fb      	strb	r3, [r7, #15]
    break;
 801085e:	e008      	b.n	8010872 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010860:	2301      	movs	r3, #1
 8010862:	73fb      	strb	r3, [r7, #15]
    break;
 8010864:	e005      	b.n	8010872 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010866:	2303      	movs	r3, #3
 8010868:	73fb      	strb	r3, [r7, #15]
    break;
 801086a:	e002      	b.n	8010872 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801086c:	2303      	movs	r3, #3
 801086e:	73fb      	strb	r3, [r7, #15]
    break;
 8010870:	bf00      	nop
  }
  return usb_status;
 8010872:	7bfb      	ldrb	r3, [r7, #15]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <siprintf>:
 8010880:	b40e      	push	{r1, r2, r3}
 8010882:	b510      	push	{r4, lr}
 8010884:	b09d      	sub	sp, #116	@ 0x74
 8010886:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010888:	9002      	str	r0, [sp, #8]
 801088a:	9006      	str	r0, [sp, #24]
 801088c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010890:	480a      	ldr	r0, [pc, #40]	@ (80108bc <siprintf+0x3c>)
 8010892:	9107      	str	r1, [sp, #28]
 8010894:	9104      	str	r1, [sp, #16]
 8010896:	490a      	ldr	r1, [pc, #40]	@ (80108c0 <siprintf+0x40>)
 8010898:	f853 2b04 	ldr.w	r2, [r3], #4
 801089c:	9105      	str	r1, [sp, #20]
 801089e:	2400      	movs	r4, #0
 80108a0:	a902      	add	r1, sp, #8
 80108a2:	6800      	ldr	r0, [r0, #0]
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80108a8:	f000 f9a2 	bl	8010bf0 <_svfiprintf_r>
 80108ac:	9b02      	ldr	r3, [sp, #8]
 80108ae:	701c      	strb	r4, [r3, #0]
 80108b0:	b01d      	add	sp, #116	@ 0x74
 80108b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108b6:	b003      	add	sp, #12
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	20000114 	.word	0x20000114
 80108c0:	ffff0208 	.word	0xffff0208

080108c4 <memset>:
 80108c4:	4402      	add	r2, r0
 80108c6:	4603      	mov	r3, r0
 80108c8:	4293      	cmp	r3, r2
 80108ca:	d100      	bne.n	80108ce <memset+0xa>
 80108cc:	4770      	bx	lr
 80108ce:	f803 1b01 	strb.w	r1, [r3], #1
 80108d2:	e7f9      	b.n	80108c8 <memset+0x4>

080108d4 <__errno>:
 80108d4:	4b01      	ldr	r3, [pc, #4]	@ (80108dc <__errno+0x8>)
 80108d6:	6818      	ldr	r0, [r3, #0]
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop
 80108dc:	20000114 	.word	0x20000114

080108e0 <__libc_init_array>:
 80108e0:	b570      	push	{r4, r5, r6, lr}
 80108e2:	4d0d      	ldr	r5, [pc, #52]	@ (8010918 <__libc_init_array+0x38>)
 80108e4:	4c0d      	ldr	r4, [pc, #52]	@ (801091c <__libc_init_array+0x3c>)
 80108e6:	1b64      	subs	r4, r4, r5
 80108e8:	10a4      	asrs	r4, r4, #2
 80108ea:	2600      	movs	r6, #0
 80108ec:	42a6      	cmp	r6, r4
 80108ee:	d109      	bne.n	8010904 <__libc_init_array+0x24>
 80108f0:	4d0b      	ldr	r5, [pc, #44]	@ (8010920 <__libc_init_array+0x40>)
 80108f2:	4c0c      	ldr	r4, [pc, #48]	@ (8010924 <__libc_init_array+0x44>)
 80108f4:	f000 fc64 	bl	80111c0 <_init>
 80108f8:	1b64      	subs	r4, r4, r5
 80108fa:	10a4      	asrs	r4, r4, #2
 80108fc:	2600      	movs	r6, #0
 80108fe:	42a6      	cmp	r6, r4
 8010900:	d105      	bne.n	801090e <__libc_init_array+0x2e>
 8010902:	bd70      	pop	{r4, r5, r6, pc}
 8010904:	f855 3b04 	ldr.w	r3, [r5], #4
 8010908:	4798      	blx	r3
 801090a:	3601      	adds	r6, #1
 801090c:	e7ee      	b.n	80108ec <__libc_init_array+0xc>
 801090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010912:	4798      	blx	r3
 8010914:	3601      	adds	r6, #1
 8010916:	e7f2      	b.n	80108fe <__libc_init_array+0x1e>
 8010918:	0801241c 	.word	0x0801241c
 801091c:	0801241c 	.word	0x0801241c
 8010920:	0801241c 	.word	0x0801241c
 8010924:	08012420 	.word	0x08012420

08010928 <__retarget_lock_acquire_recursive>:
 8010928:	4770      	bx	lr

0801092a <__retarget_lock_release_recursive>:
 801092a:	4770      	bx	lr

0801092c <memcpy>:
 801092c:	440a      	add	r2, r1
 801092e:	4291      	cmp	r1, r2
 8010930:	f100 33ff 	add.w	r3, r0, #4294967295
 8010934:	d100      	bne.n	8010938 <memcpy+0xc>
 8010936:	4770      	bx	lr
 8010938:	b510      	push	{r4, lr}
 801093a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801093e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010942:	4291      	cmp	r1, r2
 8010944:	d1f9      	bne.n	801093a <memcpy+0xe>
 8010946:	bd10      	pop	{r4, pc}

08010948 <_free_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	4605      	mov	r5, r0
 801094c:	2900      	cmp	r1, #0
 801094e:	d041      	beq.n	80109d4 <_free_r+0x8c>
 8010950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010954:	1f0c      	subs	r4, r1, #4
 8010956:	2b00      	cmp	r3, #0
 8010958:	bfb8      	it	lt
 801095a:	18e4      	addlt	r4, r4, r3
 801095c:	f000 f8e0 	bl	8010b20 <__malloc_lock>
 8010960:	4a1d      	ldr	r2, [pc, #116]	@ (80109d8 <_free_r+0x90>)
 8010962:	6813      	ldr	r3, [r2, #0]
 8010964:	b933      	cbnz	r3, 8010974 <_free_r+0x2c>
 8010966:	6063      	str	r3, [r4, #4]
 8010968:	6014      	str	r4, [r2, #0]
 801096a:	4628      	mov	r0, r5
 801096c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010970:	f000 b8dc 	b.w	8010b2c <__malloc_unlock>
 8010974:	42a3      	cmp	r3, r4
 8010976:	d908      	bls.n	801098a <_free_r+0x42>
 8010978:	6820      	ldr	r0, [r4, #0]
 801097a:	1821      	adds	r1, r4, r0
 801097c:	428b      	cmp	r3, r1
 801097e:	bf01      	itttt	eq
 8010980:	6819      	ldreq	r1, [r3, #0]
 8010982:	685b      	ldreq	r3, [r3, #4]
 8010984:	1809      	addeq	r1, r1, r0
 8010986:	6021      	streq	r1, [r4, #0]
 8010988:	e7ed      	b.n	8010966 <_free_r+0x1e>
 801098a:	461a      	mov	r2, r3
 801098c:	685b      	ldr	r3, [r3, #4]
 801098e:	b10b      	cbz	r3, 8010994 <_free_r+0x4c>
 8010990:	42a3      	cmp	r3, r4
 8010992:	d9fa      	bls.n	801098a <_free_r+0x42>
 8010994:	6811      	ldr	r1, [r2, #0]
 8010996:	1850      	adds	r0, r2, r1
 8010998:	42a0      	cmp	r0, r4
 801099a:	d10b      	bne.n	80109b4 <_free_r+0x6c>
 801099c:	6820      	ldr	r0, [r4, #0]
 801099e:	4401      	add	r1, r0
 80109a0:	1850      	adds	r0, r2, r1
 80109a2:	4283      	cmp	r3, r0
 80109a4:	6011      	str	r1, [r2, #0]
 80109a6:	d1e0      	bne.n	801096a <_free_r+0x22>
 80109a8:	6818      	ldr	r0, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	6053      	str	r3, [r2, #4]
 80109ae:	4408      	add	r0, r1
 80109b0:	6010      	str	r0, [r2, #0]
 80109b2:	e7da      	b.n	801096a <_free_r+0x22>
 80109b4:	d902      	bls.n	80109bc <_free_r+0x74>
 80109b6:	230c      	movs	r3, #12
 80109b8:	602b      	str	r3, [r5, #0]
 80109ba:	e7d6      	b.n	801096a <_free_r+0x22>
 80109bc:	6820      	ldr	r0, [r4, #0]
 80109be:	1821      	adds	r1, r4, r0
 80109c0:	428b      	cmp	r3, r1
 80109c2:	bf04      	itt	eq
 80109c4:	6819      	ldreq	r1, [r3, #0]
 80109c6:	685b      	ldreq	r3, [r3, #4]
 80109c8:	6063      	str	r3, [r4, #4]
 80109ca:	bf04      	itt	eq
 80109cc:	1809      	addeq	r1, r1, r0
 80109ce:	6021      	streq	r1, [r4, #0]
 80109d0:	6054      	str	r4, [r2, #4]
 80109d2:	e7ca      	b.n	801096a <_free_r+0x22>
 80109d4:	bd38      	pop	{r3, r4, r5, pc}
 80109d6:	bf00      	nop
 80109d8:	20002300 	.word	0x20002300

080109dc <sbrk_aligned>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	4e0f      	ldr	r6, [pc, #60]	@ (8010a1c <sbrk_aligned+0x40>)
 80109e0:	460c      	mov	r4, r1
 80109e2:	6831      	ldr	r1, [r6, #0]
 80109e4:	4605      	mov	r5, r0
 80109e6:	b911      	cbnz	r1, 80109ee <sbrk_aligned+0x12>
 80109e8:	f000 fba4 	bl	8011134 <_sbrk_r>
 80109ec:	6030      	str	r0, [r6, #0]
 80109ee:	4621      	mov	r1, r4
 80109f0:	4628      	mov	r0, r5
 80109f2:	f000 fb9f 	bl	8011134 <_sbrk_r>
 80109f6:	1c43      	adds	r3, r0, #1
 80109f8:	d103      	bne.n	8010a02 <sbrk_aligned+0x26>
 80109fa:	f04f 34ff 	mov.w	r4, #4294967295
 80109fe:	4620      	mov	r0, r4
 8010a00:	bd70      	pop	{r4, r5, r6, pc}
 8010a02:	1cc4      	adds	r4, r0, #3
 8010a04:	f024 0403 	bic.w	r4, r4, #3
 8010a08:	42a0      	cmp	r0, r4
 8010a0a:	d0f8      	beq.n	80109fe <sbrk_aligned+0x22>
 8010a0c:	1a21      	subs	r1, r4, r0
 8010a0e:	4628      	mov	r0, r5
 8010a10:	f000 fb90 	bl	8011134 <_sbrk_r>
 8010a14:	3001      	adds	r0, #1
 8010a16:	d1f2      	bne.n	80109fe <sbrk_aligned+0x22>
 8010a18:	e7ef      	b.n	80109fa <sbrk_aligned+0x1e>
 8010a1a:	bf00      	nop
 8010a1c:	200022fc 	.word	0x200022fc

08010a20 <_malloc_r>:
 8010a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a24:	1ccd      	adds	r5, r1, #3
 8010a26:	f025 0503 	bic.w	r5, r5, #3
 8010a2a:	3508      	adds	r5, #8
 8010a2c:	2d0c      	cmp	r5, #12
 8010a2e:	bf38      	it	cc
 8010a30:	250c      	movcc	r5, #12
 8010a32:	2d00      	cmp	r5, #0
 8010a34:	4606      	mov	r6, r0
 8010a36:	db01      	blt.n	8010a3c <_malloc_r+0x1c>
 8010a38:	42a9      	cmp	r1, r5
 8010a3a:	d904      	bls.n	8010a46 <_malloc_r+0x26>
 8010a3c:	230c      	movs	r3, #12
 8010a3e:	6033      	str	r3, [r6, #0]
 8010a40:	2000      	movs	r0, #0
 8010a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010b1c <_malloc_r+0xfc>
 8010a4a:	f000 f869 	bl	8010b20 <__malloc_lock>
 8010a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8010a52:	461c      	mov	r4, r3
 8010a54:	bb44      	cbnz	r4, 8010aa8 <_malloc_r+0x88>
 8010a56:	4629      	mov	r1, r5
 8010a58:	4630      	mov	r0, r6
 8010a5a:	f7ff ffbf 	bl	80109dc <sbrk_aligned>
 8010a5e:	1c43      	adds	r3, r0, #1
 8010a60:	4604      	mov	r4, r0
 8010a62:	d158      	bne.n	8010b16 <_malloc_r+0xf6>
 8010a64:	f8d8 4000 	ldr.w	r4, [r8]
 8010a68:	4627      	mov	r7, r4
 8010a6a:	2f00      	cmp	r7, #0
 8010a6c:	d143      	bne.n	8010af6 <_malloc_r+0xd6>
 8010a6e:	2c00      	cmp	r4, #0
 8010a70:	d04b      	beq.n	8010b0a <_malloc_r+0xea>
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	4639      	mov	r1, r7
 8010a76:	4630      	mov	r0, r6
 8010a78:	eb04 0903 	add.w	r9, r4, r3
 8010a7c:	f000 fb5a 	bl	8011134 <_sbrk_r>
 8010a80:	4581      	cmp	r9, r0
 8010a82:	d142      	bne.n	8010b0a <_malloc_r+0xea>
 8010a84:	6821      	ldr	r1, [r4, #0]
 8010a86:	1a6d      	subs	r5, r5, r1
 8010a88:	4629      	mov	r1, r5
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	f7ff ffa6 	bl	80109dc <sbrk_aligned>
 8010a90:	3001      	adds	r0, #1
 8010a92:	d03a      	beq.n	8010b0a <_malloc_r+0xea>
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	442b      	add	r3, r5
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a9e:	685a      	ldr	r2, [r3, #4]
 8010aa0:	bb62      	cbnz	r2, 8010afc <_malloc_r+0xdc>
 8010aa2:	f8c8 7000 	str.w	r7, [r8]
 8010aa6:	e00f      	b.n	8010ac8 <_malloc_r+0xa8>
 8010aa8:	6822      	ldr	r2, [r4, #0]
 8010aaa:	1b52      	subs	r2, r2, r5
 8010aac:	d420      	bmi.n	8010af0 <_malloc_r+0xd0>
 8010aae:	2a0b      	cmp	r2, #11
 8010ab0:	d917      	bls.n	8010ae2 <_malloc_r+0xc2>
 8010ab2:	1961      	adds	r1, r4, r5
 8010ab4:	42a3      	cmp	r3, r4
 8010ab6:	6025      	str	r5, [r4, #0]
 8010ab8:	bf18      	it	ne
 8010aba:	6059      	strne	r1, [r3, #4]
 8010abc:	6863      	ldr	r3, [r4, #4]
 8010abe:	bf08      	it	eq
 8010ac0:	f8c8 1000 	streq.w	r1, [r8]
 8010ac4:	5162      	str	r2, [r4, r5]
 8010ac6:	604b      	str	r3, [r1, #4]
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f000 f82f 	bl	8010b2c <__malloc_unlock>
 8010ace:	f104 000b 	add.w	r0, r4, #11
 8010ad2:	1d23      	adds	r3, r4, #4
 8010ad4:	f020 0007 	bic.w	r0, r0, #7
 8010ad8:	1ac2      	subs	r2, r0, r3
 8010ada:	bf1c      	itt	ne
 8010adc:	1a1b      	subne	r3, r3, r0
 8010ade:	50a3      	strne	r3, [r4, r2]
 8010ae0:	e7af      	b.n	8010a42 <_malloc_r+0x22>
 8010ae2:	6862      	ldr	r2, [r4, #4]
 8010ae4:	42a3      	cmp	r3, r4
 8010ae6:	bf0c      	ite	eq
 8010ae8:	f8c8 2000 	streq.w	r2, [r8]
 8010aec:	605a      	strne	r2, [r3, #4]
 8010aee:	e7eb      	b.n	8010ac8 <_malloc_r+0xa8>
 8010af0:	4623      	mov	r3, r4
 8010af2:	6864      	ldr	r4, [r4, #4]
 8010af4:	e7ae      	b.n	8010a54 <_malloc_r+0x34>
 8010af6:	463c      	mov	r4, r7
 8010af8:	687f      	ldr	r7, [r7, #4]
 8010afa:	e7b6      	b.n	8010a6a <_malloc_r+0x4a>
 8010afc:	461a      	mov	r2, r3
 8010afe:	685b      	ldr	r3, [r3, #4]
 8010b00:	42a3      	cmp	r3, r4
 8010b02:	d1fb      	bne.n	8010afc <_malloc_r+0xdc>
 8010b04:	2300      	movs	r3, #0
 8010b06:	6053      	str	r3, [r2, #4]
 8010b08:	e7de      	b.n	8010ac8 <_malloc_r+0xa8>
 8010b0a:	230c      	movs	r3, #12
 8010b0c:	6033      	str	r3, [r6, #0]
 8010b0e:	4630      	mov	r0, r6
 8010b10:	f000 f80c 	bl	8010b2c <__malloc_unlock>
 8010b14:	e794      	b.n	8010a40 <_malloc_r+0x20>
 8010b16:	6005      	str	r5, [r0, #0]
 8010b18:	e7d6      	b.n	8010ac8 <_malloc_r+0xa8>
 8010b1a:	bf00      	nop
 8010b1c:	20002300 	.word	0x20002300

08010b20 <__malloc_lock>:
 8010b20:	4801      	ldr	r0, [pc, #4]	@ (8010b28 <__malloc_lock+0x8>)
 8010b22:	f7ff bf01 	b.w	8010928 <__retarget_lock_acquire_recursive>
 8010b26:	bf00      	nop
 8010b28:	200022f8 	.word	0x200022f8

08010b2c <__malloc_unlock>:
 8010b2c:	4801      	ldr	r0, [pc, #4]	@ (8010b34 <__malloc_unlock+0x8>)
 8010b2e:	f7ff befc 	b.w	801092a <__retarget_lock_release_recursive>
 8010b32:	bf00      	nop
 8010b34:	200022f8 	.word	0x200022f8

08010b38 <__ssputs_r>:
 8010b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3c:	688e      	ldr	r6, [r1, #8]
 8010b3e:	461f      	mov	r7, r3
 8010b40:	42be      	cmp	r6, r7
 8010b42:	680b      	ldr	r3, [r1, #0]
 8010b44:	4682      	mov	sl, r0
 8010b46:	460c      	mov	r4, r1
 8010b48:	4690      	mov	r8, r2
 8010b4a:	d82d      	bhi.n	8010ba8 <__ssputs_r+0x70>
 8010b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010b54:	d026      	beq.n	8010ba4 <__ssputs_r+0x6c>
 8010b56:	6965      	ldr	r5, [r4, #20]
 8010b58:	6909      	ldr	r1, [r1, #16]
 8010b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b5e:	eba3 0901 	sub.w	r9, r3, r1
 8010b62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b66:	1c7b      	adds	r3, r7, #1
 8010b68:	444b      	add	r3, r9
 8010b6a:	106d      	asrs	r5, r5, #1
 8010b6c:	429d      	cmp	r5, r3
 8010b6e:	bf38      	it	cc
 8010b70:	461d      	movcc	r5, r3
 8010b72:	0553      	lsls	r3, r2, #21
 8010b74:	d527      	bpl.n	8010bc6 <__ssputs_r+0x8e>
 8010b76:	4629      	mov	r1, r5
 8010b78:	f7ff ff52 	bl	8010a20 <_malloc_r>
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	b360      	cbz	r0, 8010bda <__ssputs_r+0xa2>
 8010b80:	6921      	ldr	r1, [r4, #16]
 8010b82:	464a      	mov	r2, r9
 8010b84:	f7ff fed2 	bl	801092c <memcpy>
 8010b88:	89a3      	ldrh	r3, [r4, #12]
 8010b8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b92:	81a3      	strh	r3, [r4, #12]
 8010b94:	6126      	str	r6, [r4, #16]
 8010b96:	6165      	str	r5, [r4, #20]
 8010b98:	444e      	add	r6, r9
 8010b9a:	eba5 0509 	sub.w	r5, r5, r9
 8010b9e:	6026      	str	r6, [r4, #0]
 8010ba0:	60a5      	str	r5, [r4, #8]
 8010ba2:	463e      	mov	r6, r7
 8010ba4:	42be      	cmp	r6, r7
 8010ba6:	d900      	bls.n	8010baa <__ssputs_r+0x72>
 8010ba8:	463e      	mov	r6, r7
 8010baa:	6820      	ldr	r0, [r4, #0]
 8010bac:	4632      	mov	r2, r6
 8010bae:	4641      	mov	r1, r8
 8010bb0:	f000 faa6 	bl	8011100 <memmove>
 8010bb4:	68a3      	ldr	r3, [r4, #8]
 8010bb6:	1b9b      	subs	r3, r3, r6
 8010bb8:	60a3      	str	r3, [r4, #8]
 8010bba:	6823      	ldr	r3, [r4, #0]
 8010bbc:	4433      	add	r3, r6
 8010bbe:	6023      	str	r3, [r4, #0]
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc6:	462a      	mov	r2, r5
 8010bc8:	f000 fac4 	bl	8011154 <_realloc_r>
 8010bcc:	4606      	mov	r6, r0
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d1e0      	bne.n	8010b94 <__ssputs_r+0x5c>
 8010bd2:	6921      	ldr	r1, [r4, #16]
 8010bd4:	4650      	mov	r0, sl
 8010bd6:	f7ff feb7 	bl	8010948 <_free_r>
 8010bda:	230c      	movs	r3, #12
 8010bdc:	f8ca 3000 	str.w	r3, [sl]
 8010be0:	89a3      	ldrh	r3, [r4, #12]
 8010be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010be6:	81a3      	strh	r3, [r4, #12]
 8010be8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bec:	e7e9      	b.n	8010bc2 <__ssputs_r+0x8a>
	...

08010bf0 <_svfiprintf_r>:
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	4698      	mov	r8, r3
 8010bf6:	898b      	ldrh	r3, [r1, #12]
 8010bf8:	061b      	lsls	r3, r3, #24
 8010bfa:	b09d      	sub	sp, #116	@ 0x74
 8010bfc:	4607      	mov	r7, r0
 8010bfe:	460d      	mov	r5, r1
 8010c00:	4614      	mov	r4, r2
 8010c02:	d510      	bpl.n	8010c26 <_svfiprintf_r+0x36>
 8010c04:	690b      	ldr	r3, [r1, #16]
 8010c06:	b973      	cbnz	r3, 8010c26 <_svfiprintf_r+0x36>
 8010c08:	2140      	movs	r1, #64	@ 0x40
 8010c0a:	f7ff ff09 	bl	8010a20 <_malloc_r>
 8010c0e:	6028      	str	r0, [r5, #0]
 8010c10:	6128      	str	r0, [r5, #16]
 8010c12:	b930      	cbnz	r0, 8010c22 <_svfiprintf_r+0x32>
 8010c14:	230c      	movs	r3, #12
 8010c16:	603b      	str	r3, [r7, #0]
 8010c18:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1c:	b01d      	add	sp, #116	@ 0x74
 8010c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c22:	2340      	movs	r3, #64	@ 0x40
 8010c24:	616b      	str	r3, [r5, #20]
 8010c26:	2300      	movs	r3, #0
 8010c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c2a:	2320      	movs	r3, #32
 8010c2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c34:	2330      	movs	r3, #48	@ 0x30
 8010c36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010dd4 <_svfiprintf_r+0x1e4>
 8010c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010c3e:	f04f 0901 	mov.w	r9, #1
 8010c42:	4623      	mov	r3, r4
 8010c44:	469a      	mov	sl, r3
 8010c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c4a:	b10a      	cbz	r2, 8010c50 <_svfiprintf_r+0x60>
 8010c4c:	2a25      	cmp	r2, #37	@ 0x25
 8010c4e:	d1f9      	bne.n	8010c44 <_svfiprintf_r+0x54>
 8010c50:	ebba 0b04 	subs.w	fp, sl, r4
 8010c54:	d00b      	beq.n	8010c6e <_svfiprintf_r+0x7e>
 8010c56:	465b      	mov	r3, fp
 8010c58:	4622      	mov	r2, r4
 8010c5a:	4629      	mov	r1, r5
 8010c5c:	4638      	mov	r0, r7
 8010c5e:	f7ff ff6b 	bl	8010b38 <__ssputs_r>
 8010c62:	3001      	adds	r0, #1
 8010c64:	f000 80a7 	beq.w	8010db6 <_svfiprintf_r+0x1c6>
 8010c68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c6a:	445a      	add	r2, fp
 8010c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 809f 	beq.w	8010db6 <_svfiprintf_r+0x1c6>
 8010c78:	2300      	movs	r3, #0
 8010c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c82:	f10a 0a01 	add.w	sl, sl, #1
 8010c86:	9304      	str	r3, [sp, #16]
 8010c88:	9307      	str	r3, [sp, #28]
 8010c8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c90:	4654      	mov	r4, sl
 8010c92:	2205      	movs	r2, #5
 8010c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c98:	484e      	ldr	r0, [pc, #312]	@ (8010dd4 <_svfiprintf_r+0x1e4>)
 8010c9a:	f7ef faa1 	bl	80001e0 <memchr>
 8010c9e:	9a04      	ldr	r2, [sp, #16]
 8010ca0:	b9d8      	cbnz	r0, 8010cda <_svfiprintf_r+0xea>
 8010ca2:	06d0      	lsls	r0, r2, #27
 8010ca4:	bf44      	itt	mi
 8010ca6:	2320      	movmi	r3, #32
 8010ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cac:	0711      	lsls	r1, r2, #28
 8010cae:	bf44      	itt	mi
 8010cb0:	232b      	movmi	r3, #43	@ 0x2b
 8010cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8010cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8010cbc:	d015      	beq.n	8010cea <_svfiprintf_r+0xfa>
 8010cbe:	9a07      	ldr	r2, [sp, #28]
 8010cc0:	4654      	mov	r4, sl
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	f04f 0c0a 	mov.w	ip, #10
 8010cc8:	4621      	mov	r1, r4
 8010cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cce:	3b30      	subs	r3, #48	@ 0x30
 8010cd0:	2b09      	cmp	r3, #9
 8010cd2:	d94b      	bls.n	8010d6c <_svfiprintf_r+0x17c>
 8010cd4:	b1b0      	cbz	r0, 8010d04 <_svfiprintf_r+0x114>
 8010cd6:	9207      	str	r2, [sp, #28]
 8010cd8:	e014      	b.n	8010d04 <_svfiprintf_r+0x114>
 8010cda:	eba0 0308 	sub.w	r3, r0, r8
 8010cde:	fa09 f303 	lsl.w	r3, r9, r3
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	9304      	str	r3, [sp, #16]
 8010ce6:	46a2      	mov	sl, r4
 8010ce8:	e7d2      	b.n	8010c90 <_svfiprintf_r+0xa0>
 8010cea:	9b03      	ldr	r3, [sp, #12]
 8010cec:	1d19      	adds	r1, r3, #4
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	9103      	str	r1, [sp, #12]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	bfbb      	ittet	lt
 8010cf6:	425b      	neglt	r3, r3
 8010cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8010cfc:	9307      	strge	r3, [sp, #28]
 8010cfe:	9307      	strlt	r3, [sp, #28]
 8010d00:	bfb8      	it	lt
 8010d02:	9204      	strlt	r2, [sp, #16]
 8010d04:	7823      	ldrb	r3, [r4, #0]
 8010d06:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d08:	d10a      	bne.n	8010d20 <_svfiprintf_r+0x130>
 8010d0a:	7863      	ldrb	r3, [r4, #1]
 8010d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d0e:	d132      	bne.n	8010d76 <_svfiprintf_r+0x186>
 8010d10:	9b03      	ldr	r3, [sp, #12]
 8010d12:	1d1a      	adds	r2, r3, #4
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	9203      	str	r2, [sp, #12]
 8010d18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d1c:	3402      	adds	r4, #2
 8010d1e:	9305      	str	r3, [sp, #20]
 8010d20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010de4 <_svfiprintf_r+0x1f4>
 8010d24:	7821      	ldrb	r1, [r4, #0]
 8010d26:	2203      	movs	r2, #3
 8010d28:	4650      	mov	r0, sl
 8010d2a:	f7ef fa59 	bl	80001e0 <memchr>
 8010d2e:	b138      	cbz	r0, 8010d40 <_svfiprintf_r+0x150>
 8010d30:	9b04      	ldr	r3, [sp, #16]
 8010d32:	eba0 000a 	sub.w	r0, r0, sl
 8010d36:	2240      	movs	r2, #64	@ 0x40
 8010d38:	4082      	lsls	r2, r0
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	3401      	adds	r4, #1
 8010d3e:	9304      	str	r3, [sp, #16]
 8010d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d44:	4824      	ldr	r0, [pc, #144]	@ (8010dd8 <_svfiprintf_r+0x1e8>)
 8010d46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d4a:	2206      	movs	r2, #6
 8010d4c:	f7ef fa48 	bl	80001e0 <memchr>
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d036      	beq.n	8010dc2 <_svfiprintf_r+0x1d2>
 8010d54:	4b21      	ldr	r3, [pc, #132]	@ (8010ddc <_svfiprintf_r+0x1ec>)
 8010d56:	bb1b      	cbnz	r3, 8010da0 <_svfiprintf_r+0x1b0>
 8010d58:	9b03      	ldr	r3, [sp, #12]
 8010d5a:	3307      	adds	r3, #7
 8010d5c:	f023 0307 	bic.w	r3, r3, #7
 8010d60:	3308      	adds	r3, #8
 8010d62:	9303      	str	r3, [sp, #12]
 8010d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d66:	4433      	add	r3, r6
 8010d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d6a:	e76a      	b.n	8010c42 <_svfiprintf_r+0x52>
 8010d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d70:	460c      	mov	r4, r1
 8010d72:	2001      	movs	r0, #1
 8010d74:	e7a8      	b.n	8010cc8 <_svfiprintf_r+0xd8>
 8010d76:	2300      	movs	r3, #0
 8010d78:	3401      	adds	r4, #1
 8010d7a:	9305      	str	r3, [sp, #20]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	f04f 0c0a 	mov.w	ip, #10
 8010d82:	4620      	mov	r0, r4
 8010d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d88:	3a30      	subs	r2, #48	@ 0x30
 8010d8a:	2a09      	cmp	r2, #9
 8010d8c:	d903      	bls.n	8010d96 <_svfiprintf_r+0x1a6>
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d0c6      	beq.n	8010d20 <_svfiprintf_r+0x130>
 8010d92:	9105      	str	r1, [sp, #20]
 8010d94:	e7c4      	b.n	8010d20 <_svfiprintf_r+0x130>
 8010d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	e7f0      	b.n	8010d82 <_svfiprintf_r+0x192>
 8010da0:	ab03      	add	r3, sp, #12
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	462a      	mov	r2, r5
 8010da6:	4b0e      	ldr	r3, [pc, #56]	@ (8010de0 <_svfiprintf_r+0x1f0>)
 8010da8:	a904      	add	r1, sp, #16
 8010daa:	4638      	mov	r0, r7
 8010dac:	f3af 8000 	nop.w
 8010db0:	1c42      	adds	r2, r0, #1
 8010db2:	4606      	mov	r6, r0
 8010db4:	d1d6      	bne.n	8010d64 <_svfiprintf_r+0x174>
 8010db6:	89ab      	ldrh	r3, [r5, #12]
 8010db8:	065b      	lsls	r3, r3, #25
 8010dba:	f53f af2d 	bmi.w	8010c18 <_svfiprintf_r+0x28>
 8010dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010dc0:	e72c      	b.n	8010c1c <_svfiprintf_r+0x2c>
 8010dc2:	ab03      	add	r3, sp, #12
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	4b05      	ldr	r3, [pc, #20]	@ (8010de0 <_svfiprintf_r+0x1f0>)
 8010dca:	a904      	add	r1, sp, #16
 8010dcc:	4638      	mov	r0, r7
 8010dce:	f000 f879 	bl	8010ec4 <_printf_i>
 8010dd2:	e7ed      	b.n	8010db0 <_svfiprintf_r+0x1c0>
 8010dd4:	080123e0 	.word	0x080123e0
 8010dd8:	080123ea 	.word	0x080123ea
 8010ddc:	00000000 	.word	0x00000000
 8010de0:	08010b39 	.word	0x08010b39
 8010de4:	080123e6 	.word	0x080123e6

08010de8 <_printf_common>:
 8010de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dec:	4616      	mov	r6, r2
 8010dee:	4698      	mov	r8, r3
 8010df0:	688a      	ldr	r2, [r1, #8]
 8010df2:	690b      	ldr	r3, [r1, #16]
 8010df4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	bfb8      	it	lt
 8010dfc:	4613      	movlt	r3, r2
 8010dfe:	6033      	str	r3, [r6, #0]
 8010e00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010e04:	4607      	mov	r7, r0
 8010e06:	460c      	mov	r4, r1
 8010e08:	b10a      	cbz	r2, 8010e0e <_printf_common+0x26>
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	6033      	str	r3, [r6, #0]
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	0699      	lsls	r1, r3, #26
 8010e12:	bf42      	ittt	mi
 8010e14:	6833      	ldrmi	r3, [r6, #0]
 8010e16:	3302      	addmi	r3, #2
 8010e18:	6033      	strmi	r3, [r6, #0]
 8010e1a:	6825      	ldr	r5, [r4, #0]
 8010e1c:	f015 0506 	ands.w	r5, r5, #6
 8010e20:	d106      	bne.n	8010e30 <_printf_common+0x48>
 8010e22:	f104 0a19 	add.w	sl, r4, #25
 8010e26:	68e3      	ldr	r3, [r4, #12]
 8010e28:	6832      	ldr	r2, [r6, #0]
 8010e2a:	1a9b      	subs	r3, r3, r2
 8010e2c:	42ab      	cmp	r3, r5
 8010e2e:	dc26      	bgt.n	8010e7e <_printf_common+0x96>
 8010e30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010e34:	6822      	ldr	r2, [r4, #0]
 8010e36:	3b00      	subs	r3, #0
 8010e38:	bf18      	it	ne
 8010e3a:	2301      	movne	r3, #1
 8010e3c:	0692      	lsls	r2, r2, #26
 8010e3e:	d42b      	bmi.n	8010e98 <_printf_common+0xb0>
 8010e40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010e44:	4641      	mov	r1, r8
 8010e46:	4638      	mov	r0, r7
 8010e48:	47c8      	blx	r9
 8010e4a:	3001      	adds	r0, #1
 8010e4c:	d01e      	beq.n	8010e8c <_printf_common+0xa4>
 8010e4e:	6823      	ldr	r3, [r4, #0]
 8010e50:	6922      	ldr	r2, [r4, #16]
 8010e52:	f003 0306 	and.w	r3, r3, #6
 8010e56:	2b04      	cmp	r3, #4
 8010e58:	bf02      	ittt	eq
 8010e5a:	68e5      	ldreq	r5, [r4, #12]
 8010e5c:	6833      	ldreq	r3, [r6, #0]
 8010e5e:	1aed      	subeq	r5, r5, r3
 8010e60:	68a3      	ldr	r3, [r4, #8]
 8010e62:	bf0c      	ite	eq
 8010e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e68:	2500      	movne	r5, #0
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	bfc4      	itt	gt
 8010e6e:	1a9b      	subgt	r3, r3, r2
 8010e70:	18ed      	addgt	r5, r5, r3
 8010e72:	2600      	movs	r6, #0
 8010e74:	341a      	adds	r4, #26
 8010e76:	42b5      	cmp	r5, r6
 8010e78:	d11a      	bne.n	8010eb0 <_printf_common+0xc8>
 8010e7a:	2000      	movs	r0, #0
 8010e7c:	e008      	b.n	8010e90 <_printf_common+0xa8>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	4652      	mov	r2, sl
 8010e82:	4641      	mov	r1, r8
 8010e84:	4638      	mov	r0, r7
 8010e86:	47c8      	blx	r9
 8010e88:	3001      	adds	r0, #1
 8010e8a:	d103      	bne.n	8010e94 <_printf_common+0xac>
 8010e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e94:	3501      	adds	r5, #1
 8010e96:	e7c6      	b.n	8010e26 <_printf_common+0x3e>
 8010e98:	18e1      	adds	r1, r4, r3
 8010e9a:	1c5a      	adds	r2, r3, #1
 8010e9c:	2030      	movs	r0, #48	@ 0x30
 8010e9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010ea2:	4422      	add	r2, r4
 8010ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ea8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010eac:	3302      	adds	r3, #2
 8010eae:	e7c7      	b.n	8010e40 <_printf_common+0x58>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	4622      	mov	r2, r4
 8010eb4:	4641      	mov	r1, r8
 8010eb6:	4638      	mov	r0, r7
 8010eb8:	47c8      	blx	r9
 8010eba:	3001      	adds	r0, #1
 8010ebc:	d0e6      	beq.n	8010e8c <_printf_common+0xa4>
 8010ebe:	3601      	adds	r6, #1
 8010ec0:	e7d9      	b.n	8010e76 <_printf_common+0x8e>
	...

08010ec4 <_printf_i>:
 8010ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec8:	7e0f      	ldrb	r7, [r1, #24]
 8010eca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ecc:	2f78      	cmp	r7, #120	@ 0x78
 8010ece:	4691      	mov	r9, r2
 8010ed0:	4680      	mov	r8, r0
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	469a      	mov	sl, r3
 8010ed6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010eda:	d807      	bhi.n	8010eec <_printf_i+0x28>
 8010edc:	2f62      	cmp	r7, #98	@ 0x62
 8010ede:	d80a      	bhi.n	8010ef6 <_printf_i+0x32>
 8010ee0:	2f00      	cmp	r7, #0
 8010ee2:	f000 80d1 	beq.w	8011088 <_printf_i+0x1c4>
 8010ee6:	2f58      	cmp	r7, #88	@ 0x58
 8010ee8:	f000 80b8 	beq.w	801105c <_printf_i+0x198>
 8010eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ef0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ef4:	e03a      	b.n	8010f6c <_printf_i+0xa8>
 8010ef6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010efa:	2b15      	cmp	r3, #21
 8010efc:	d8f6      	bhi.n	8010eec <_printf_i+0x28>
 8010efe:	a101      	add	r1, pc, #4	@ (adr r1, 8010f04 <_printf_i+0x40>)
 8010f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f04:	08010f5d 	.word	0x08010f5d
 8010f08:	08010f71 	.word	0x08010f71
 8010f0c:	08010eed 	.word	0x08010eed
 8010f10:	08010eed 	.word	0x08010eed
 8010f14:	08010eed 	.word	0x08010eed
 8010f18:	08010eed 	.word	0x08010eed
 8010f1c:	08010f71 	.word	0x08010f71
 8010f20:	08010eed 	.word	0x08010eed
 8010f24:	08010eed 	.word	0x08010eed
 8010f28:	08010eed 	.word	0x08010eed
 8010f2c:	08010eed 	.word	0x08010eed
 8010f30:	0801106f 	.word	0x0801106f
 8010f34:	08010f9b 	.word	0x08010f9b
 8010f38:	08011029 	.word	0x08011029
 8010f3c:	08010eed 	.word	0x08010eed
 8010f40:	08010eed 	.word	0x08010eed
 8010f44:	08011091 	.word	0x08011091
 8010f48:	08010eed 	.word	0x08010eed
 8010f4c:	08010f9b 	.word	0x08010f9b
 8010f50:	08010eed 	.word	0x08010eed
 8010f54:	08010eed 	.word	0x08010eed
 8010f58:	08011031 	.word	0x08011031
 8010f5c:	6833      	ldr	r3, [r6, #0]
 8010f5e:	1d1a      	adds	r2, r3, #4
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	6032      	str	r2, [r6, #0]
 8010f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010f68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	e09c      	b.n	80110aa <_printf_i+0x1e6>
 8010f70:	6833      	ldr	r3, [r6, #0]
 8010f72:	6820      	ldr	r0, [r4, #0]
 8010f74:	1d19      	adds	r1, r3, #4
 8010f76:	6031      	str	r1, [r6, #0]
 8010f78:	0606      	lsls	r6, r0, #24
 8010f7a:	d501      	bpl.n	8010f80 <_printf_i+0xbc>
 8010f7c:	681d      	ldr	r5, [r3, #0]
 8010f7e:	e003      	b.n	8010f88 <_printf_i+0xc4>
 8010f80:	0645      	lsls	r5, r0, #25
 8010f82:	d5fb      	bpl.n	8010f7c <_printf_i+0xb8>
 8010f84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010f88:	2d00      	cmp	r5, #0
 8010f8a:	da03      	bge.n	8010f94 <_printf_i+0xd0>
 8010f8c:	232d      	movs	r3, #45	@ 0x2d
 8010f8e:	426d      	negs	r5, r5
 8010f90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f94:	4858      	ldr	r0, [pc, #352]	@ (80110f8 <_printf_i+0x234>)
 8010f96:	230a      	movs	r3, #10
 8010f98:	e011      	b.n	8010fbe <_printf_i+0xfa>
 8010f9a:	6821      	ldr	r1, [r4, #0]
 8010f9c:	6833      	ldr	r3, [r6, #0]
 8010f9e:	0608      	lsls	r0, r1, #24
 8010fa0:	f853 5b04 	ldr.w	r5, [r3], #4
 8010fa4:	d402      	bmi.n	8010fac <_printf_i+0xe8>
 8010fa6:	0649      	lsls	r1, r1, #25
 8010fa8:	bf48      	it	mi
 8010faa:	b2ad      	uxthmi	r5, r5
 8010fac:	2f6f      	cmp	r7, #111	@ 0x6f
 8010fae:	4852      	ldr	r0, [pc, #328]	@ (80110f8 <_printf_i+0x234>)
 8010fb0:	6033      	str	r3, [r6, #0]
 8010fb2:	bf14      	ite	ne
 8010fb4:	230a      	movne	r3, #10
 8010fb6:	2308      	moveq	r3, #8
 8010fb8:	2100      	movs	r1, #0
 8010fba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010fbe:	6866      	ldr	r6, [r4, #4]
 8010fc0:	60a6      	str	r6, [r4, #8]
 8010fc2:	2e00      	cmp	r6, #0
 8010fc4:	db05      	blt.n	8010fd2 <_printf_i+0x10e>
 8010fc6:	6821      	ldr	r1, [r4, #0]
 8010fc8:	432e      	orrs	r6, r5
 8010fca:	f021 0104 	bic.w	r1, r1, #4
 8010fce:	6021      	str	r1, [r4, #0]
 8010fd0:	d04b      	beq.n	801106a <_printf_i+0x1a6>
 8010fd2:	4616      	mov	r6, r2
 8010fd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8010fd8:	fb03 5711 	mls	r7, r3, r1, r5
 8010fdc:	5dc7      	ldrb	r7, [r0, r7]
 8010fde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010fe2:	462f      	mov	r7, r5
 8010fe4:	42bb      	cmp	r3, r7
 8010fe6:	460d      	mov	r5, r1
 8010fe8:	d9f4      	bls.n	8010fd4 <_printf_i+0x110>
 8010fea:	2b08      	cmp	r3, #8
 8010fec:	d10b      	bne.n	8011006 <_printf_i+0x142>
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	07df      	lsls	r7, r3, #31
 8010ff2:	d508      	bpl.n	8011006 <_printf_i+0x142>
 8010ff4:	6923      	ldr	r3, [r4, #16]
 8010ff6:	6861      	ldr	r1, [r4, #4]
 8010ff8:	4299      	cmp	r1, r3
 8010ffa:	bfde      	ittt	le
 8010ffc:	2330      	movle	r3, #48	@ 0x30
 8010ffe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011002:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011006:	1b92      	subs	r2, r2, r6
 8011008:	6122      	str	r2, [r4, #16]
 801100a:	f8cd a000 	str.w	sl, [sp]
 801100e:	464b      	mov	r3, r9
 8011010:	aa03      	add	r2, sp, #12
 8011012:	4621      	mov	r1, r4
 8011014:	4640      	mov	r0, r8
 8011016:	f7ff fee7 	bl	8010de8 <_printf_common>
 801101a:	3001      	adds	r0, #1
 801101c:	d14a      	bne.n	80110b4 <_printf_i+0x1f0>
 801101e:	f04f 30ff 	mov.w	r0, #4294967295
 8011022:	b004      	add	sp, #16
 8011024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	f043 0320 	orr.w	r3, r3, #32
 801102e:	6023      	str	r3, [r4, #0]
 8011030:	4832      	ldr	r0, [pc, #200]	@ (80110fc <_printf_i+0x238>)
 8011032:	2778      	movs	r7, #120	@ 0x78
 8011034:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011038:	6823      	ldr	r3, [r4, #0]
 801103a:	6831      	ldr	r1, [r6, #0]
 801103c:	061f      	lsls	r7, r3, #24
 801103e:	f851 5b04 	ldr.w	r5, [r1], #4
 8011042:	d402      	bmi.n	801104a <_printf_i+0x186>
 8011044:	065f      	lsls	r7, r3, #25
 8011046:	bf48      	it	mi
 8011048:	b2ad      	uxthmi	r5, r5
 801104a:	6031      	str	r1, [r6, #0]
 801104c:	07d9      	lsls	r1, r3, #31
 801104e:	bf44      	itt	mi
 8011050:	f043 0320 	orrmi.w	r3, r3, #32
 8011054:	6023      	strmi	r3, [r4, #0]
 8011056:	b11d      	cbz	r5, 8011060 <_printf_i+0x19c>
 8011058:	2310      	movs	r3, #16
 801105a:	e7ad      	b.n	8010fb8 <_printf_i+0xf4>
 801105c:	4826      	ldr	r0, [pc, #152]	@ (80110f8 <_printf_i+0x234>)
 801105e:	e7e9      	b.n	8011034 <_printf_i+0x170>
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	f023 0320 	bic.w	r3, r3, #32
 8011066:	6023      	str	r3, [r4, #0]
 8011068:	e7f6      	b.n	8011058 <_printf_i+0x194>
 801106a:	4616      	mov	r6, r2
 801106c:	e7bd      	b.n	8010fea <_printf_i+0x126>
 801106e:	6833      	ldr	r3, [r6, #0]
 8011070:	6825      	ldr	r5, [r4, #0]
 8011072:	6961      	ldr	r1, [r4, #20]
 8011074:	1d18      	adds	r0, r3, #4
 8011076:	6030      	str	r0, [r6, #0]
 8011078:	062e      	lsls	r6, r5, #24
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	d501      	bpl.n	8011082 <_printf_i+0x1be>
 801107e:	6019      	str	r1, [r3, #0]
 8011080:	e002      	b.n	8011088 <_printf_i+0x1c4>
 8011082:	0668      	lsls	r0, r5, #25
 8011084:	d5fb      	bpl.n	801107e <_printf_i+0x1ba>
 8011086:	8019      	strh	r1, [r3, #0]
 8011088:	2300      	movs	r3, #0
 801108a:	6123      	str	r3, [r4, #16]
 801108c:	4616      	mov	r6, r2
 801108e:	e7bc      	b.n	801100a <_printf_i+0x146>
 8011090:	6833      	ldr	r3, [r6, #0]
 8011092:	1d1a      	adds	r2, r3, #4
 8011094:	6032      	str	r2, [r6, #0]
 8011096:	681e      	ldr	r6, [r3, #0]
 8011098:	6862      	ldr	r2, [r4, #4]
 801109a:	2100      	movs	r1, #0
 801109c:	4630      	mov	r0, r6
 801109e:	f7ef f89f 	bl	80001e0 <memchr>
 80110a2:	b108      	cbz	r0, 80110a8 <_printf_i+0x1e4>
 80110a4:	1b80      	subs	r0, r0, r6
 80110a6:	6060      	str	r0, [r4, #4]
 80110a8:	6863      	ldr	r3, [r4, #4]
 80110aa:	6123      	str	r3, [r4, #16]
 80110ac:	2300      	movs	r3, #0
 80110ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110b2:	e7aa      	b.n	801100a <_printf_i+0x146>
 80110b4:	6923      	ldr	r3, [r4, #16]
 80110b6:	4632      	mov	r2, r6
 80110b8:	4649      	mov	r1, r9
 80110ba:	4640      	mov	r0, r8
 80110bc:	47d0      	blx	sl
 80110be:	3001      	adds	r0, #1
 80110c0:	d0ad      	beq.n	801101e <_printf_i+0x15a>
 80110c2:	6823      	ldr	r3, [r4, #0]
 80110c4:	079b      	lsls	r3, r3, #30
 80110c6:	d413      	bmi.n	80110f0 <_printf_i+0x22c>
 80110c8:	68e0      	ldr	r0, [r4, #12]
 80110ca:	9b03      	ldr	r3, [sp, #12]
 80110cc:	4298      	cmp	r0, r3
 80110ce:	bfb8      	it	lt
 80110d0:	4618      	movlt	r0, r3
 80110d2:	e7a6      	b.n	8011022 <_printf_i+0x15e>
 80110d4:	2301      	movs	r3, #1
 80110d6:	4632      	mov	r2, r6
 80110d8:	4649      	mov	r1, r9
 80110da:	4640      	mov	r0, r8
 80110dc:	47d0      	blx	sl
 80110de:	3001      	adds	r0, #1
 80110e0:	d09d      	beq.n	801101e <_printf_i+0x15a>
 80110e2:	3501      	adds	r5, #1
 80110e4:	68e3      	ldr	r3, [r4, #12]
 80110e6:	9903      	ldr	r1, [sp, #12]
 80110e8:	1a5b      	subs	r3, r3, r1
 80110ea:	42ab      	cmp	r3, r5
 80110ec:	dcf2      	bgt.n	80110d4 <_printf_i+0x210>
 80110ee:	e7eb      	b.n	80110c8 <_printf_i+0x204>
 80110f0:	2500      	movs	r5, #0
 80110f2:	f104 0619 	add.w	r6, r4, #25
 80110f6:	e7f5      	b.n	80110e4 <_printf_i+0x220>
 80110f8:	080123f1 	.word	0x080123f1
 80110fc:	08012402 	.word	0x08012402

08011100 <memmove>:
 8011100:	4288      	cmp	r0, r1
 8011102:	b510      	push	{r4, lr}
 8011104:	eb01 0402 	add.w	r4, r1, r2
 8011108:	d902      	bls.n	8011110 <memmove+0x10>
 801110a:	4284      	cmp	r4, r0
 801110c:	4623      	mov	r3, r4
 801110e:	d807      	bhi.n	8011120 <memmove+0x20>
 8011110:	1e43      	subs	r3, r0, #1
 8011112:	42a1      	cmp	r1, r4
 8011114:	d008      	beq.n	8011128 <memmove+0x28>
 8011116:	f811 2b01 	ldrb.w	r2, [r1], #1
 801111a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801111e:	e7f8      	b.n	8011112 <memmove+0x12>
 8011120:	4402      	add	r2, r0
 8011122:	4601      	mov	r1, r0
 8011124:	428a      	cmp	r2, r1
 8011126:	d100      	bne.n	801112a <memmove+0x2a>
 8011128:	bd10      	pop	{r4, pc}
 801112a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801112e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011132:	e7f7      	b.n	8011124 <memmove+0x24>

08011134 <_sbrk_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4d06      	ldr	r5, [pc, #24]	@ (8011150 <_sbrk_r+0x1c>)
 8011138:	2300      	movs	r3, #0
 801113a:	4604      	mov	r4, r0
 801113c:	4608      	mov	r0, r1
 801113e:	602b      	str	r3, [r5, #0]
 8011140:	f7f2 fbf8 	bl	8003934 <_sbrk>
 8011144:	1c43      	adds	r3, r0, #1
 8011146:	d102      	bne.n	801114e <_sbrk_r+0x1a>
 8011148:	682b      	ldr	r3, [r5, #0]
 801114a:	b103      	cbz	r3, 801114e <_sbrk_r+0x1a>
 801114c:	6023      	str	r3, [r4, #0]
 801114e:	bd38      	pop	{r3, r4, r5, pc}
 8011150:	200022f4 	.word	0x200022f4

08011154 <_realloc_r>:
 8011154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011158:	4607      	mov	r7, r0
 801115a:	4614      	mov	r4, r2
 801115c:	460d      	mov	r5, r1
 801115e:	b921      	cbnz	r1, 801116a <_realloc_r+0x16>
 8011160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011164:	4611      	mov	r1, r2
 8011166:	f7ff bc5b 	b.w	8010a20 <_malloc_r>
 801116a:	b92a      	cbnz	r2, 8011178 <_realloc_r+0x24>
 801116c:	f7ff fbec 	bl	8010948 <_free_r>
 8011170:	4625      	mov	r5, r4
 8011172:	4628      	mov	r0, r5
 8011174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011178:	f000 f81a 	bl	80111b0 <_malloc_usable_size_r>
 801117c:	4284      	cmp	r4, r0
 801117e:	4606      	mov	r6, r0
 8011180:	d802      	bhi.n	8011188 <_realloc_r+0x34>
 8011182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011186:	d8f4      	bhi.n	8011172 <_realloc_r+0x1e>
 8011188:	4621      	mov	r1, r4
 801118a:	4638      	mov	r0, r7
 801118c:	f7ff fc48 	bl	8010a20 <_malloc_r>
 8011190:	4680      	mov	r8, r0
 8011192:	b908      	cbnz	r0, 8011198 <_realloc_r+0x44>
 8011194:	4645      	mov	r5, r8
 8011196:	e7ec      	b.n	8011172 <_realloc_r+0x1e>
 8011198:	42b4      	cmp	r4, r6
 801119a:	4622      	mov	r2, r4
 801119c:	4629      	mov	r1, r5
 801119e:	bf28      	it	cs
 80111a0:	4632      	movcs	r2, r6
 80111a2:	f7ff fbc3 	bl	801092c <memcpy>
 80111a6:	4629      	mov	r1, r5
 80111a8:	4638      	mov	r0, r7
 80111aa:	f7ff fbcd 	bl	8010948 <_free_r>
 80111ae:	e7f1      	b.n	8011194 <_realloc_r+0x40>

080111b0 <_malloc_usable_size_r>:
 80111b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111b4:	1f18      	subs	r0, r3, #4
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	bfbc      	itt	lt
 80111ba:	580b      	ldrlt	r3, [r1, r0]
 80111bc:	18c0      	addlt	r0, r0, r3
 80111be:	4770      	bx	lr

080111c0 <_init>:
 80111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c2:	bf00      	nop
 80111c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111c6:	bc08      	pop	{r3}
 80111c8:	469e      	mov	lr, r3
 80111ca:	4770      	bx	lr

080111cc <_fini>:
 80111cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ce:	bf00      	nop
 80111d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111d2:	bc08      	pop	{r3}
 80111d4:	469e      	mov	lr, r3
 80111d6:	4770      	bx	lr
